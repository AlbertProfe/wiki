---
title: "IFCD0210 Product Backlog"
categories: [ifcd0210, backlog]
---


![Backlog course](/images/home/backlog.jpg){width="30%"}

::: {.summary}

- [December 2022](/ifcd0210/ifcd0210backlog-product.qmd#december-2022)
- [January 2023](/ifcd0210/ifcd0210backlog-product.qmd#djanuary-2023)
- [February 2023](/ifcd0210/ifcd0210backlog-product.qmd#february-2023)
- [March 2023](/ifcd0210/ifcd0210backlog-product.qmd#march-2023)
- [April 2023](/ifcd0210/ifcd0210backlog-product.qmd#april-2023)
- [May 2023](/ifcd0210/ifcd0210backlog-product.qmd#may-2023)
- [June 2023](/ifcd0210/ifcd0210backlog-product.qmd#june-2023)
- [July 2023](/ifcd0210/ifcd0210backlog-product.qmd#july-2023)

:::

::: {.column-page-right}

## December 2022


| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| **#1** | **1** | **12/12/2022** | **- Introduction to course IFCD0210</br> - Setting of all tools we are going to need** | - |
|  | 2 | 13/12/2022 | - Quarto create and Publish in GitHub</br> - Create VM and IDEs - Accounts - MOOC | - |
|  | 3 | 14/12/2022 | - Linux VM VirtualBox over Windows</br> - What is a Dependency Management, Maven | - |
|  | 4 | 15/12/2022 | - Quarto create and Publish in GitHub with adavnced tools | - |
|  | 5 | 16/12/2022 | - Create Java Maven Project: JUnit</br> - What is Java SE, EE and Spring MVC, Boot</br> - Create classes| - |
| **#2** | **6** | **19/12/2022** | **Create Java Maven Project: Git - Why scope is so important in Java** | - |
|  | 7 | 20/12/2022 | - Introduction to MVC Pattern | - |
|  | 8 | 21/12/2022 | - Create Java Maven Project: Classes</br> - Tag & Little-Cube are our dear friends | - |
|  | 9 | 22/12/2022 | - Introduction to React JS Framework | - |
: Backlog course December 2022 table {tbl-colwidths="[2,2,2,60,34]"}

## January 2023

| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| **#3** | **10** | **09/01** | **- Different approaches to complex problems are crucial to solve it</br>- How to manage large volumes: quarto</br>- How to stay in class: ask, interrupt, explain new ideas, detect mistakes, connect** | **[Bash, Pipes](/linux/linux-what-bash.qmd)</br>[Learn](/about/about-learning-intro.qmd#put-your-soul-now)** |
|  | 11 | 10/01 | - How to create a Maven Java Project with TDD in Mind</br> - What could go wrong when create a Maven Project | [TDD, JUnit](/javase/se-concepts-tdd.qmd)</br> [Maven Java](/javase/se-concepts-createproject.qmd )</br>[Lab#SE01-1](/javase/selab2-1.qmd)|
|  | 12 | 11/01 | - What is Model in Java</br> - Why model is so important</br> - All begins in Model</br> - How to create a model (1) Class Candidates (2) Validated Class (3) Relationships | [Java Classes and Objects](/javase/se-concepts-objects.qmd)</br>[Pattern UML](/javase/se-pattern-uml.qmd) |
|  | 13 | 12/01 | - Coupling and DD defines from first line even to Deploy</br> - Plan a Project: sprint 0 and SCRUM</br> - Even name a variable is important | [Coupling](/javase/se-concepts-coupling.qmd)</br>[Lab#SE02-4](/javase/selab2-4.qmd) |
|  | 14 | 13/01 | - Time Management</br> -  Object Creation: <b>new</b> and @Test</br> - Nested objects in Java are not easy</br> - Tags & Little-cube are our friends | [Lab#SE02-1](/javase/selab2-1.qmd)</br>[Time Managemnt](/ifcd0210/ifcd0210calendar.qmd#time-management)</br>[Maven Project to GitHub: git init](/javase/se-concepts-projectgit.qmd#maven-project-push-to-github-cli-git) |
| **#4** | **15** | **16/01** | **+ Object Creation: nested Objects in Java</br> + Movie-Reviews-Review-Critic</br>+ @Test and debug</br> - <s>Java Principles</s><br> ++ Within which <b>scope</b> (1) creation object: new, (2) operations and methods and (3) sending-parameters by callings there must be?** | **[Lab#SE02-1](/javase/selab2-1.qmd)</br>[Markdown in IntellJIdea Mermaid](https://www.jetbrains.com/help/idea/markdown.html#table){.external} & [Mermaid](https://mermaid.js.org/syntax/classDiagram.html){.external} </br>[Principles](/javase/se-what-principles.qmd) / [Objects and class](/javase/se-concepts-objects.qmd)</br>[MovieManager Code](https://github.com/AlbertProfe/CifoJava2023/tree/c7832d6b556668d391bedf3750dd75e696dcc5e3/MovieManger){.external}** |
|  | 16 | 17/01 | + MovieManager static or non-static</br> - <s>How to send data within Java</s></br> + Movie-Reviews-Review-Critic</br> + Java Principles </br> - <s>Project structure: .gitignore, readme.md, uml.md</s></br> ++ Decision making at Model: (1) Composition? (2) Inherence? (3) Use? (4) Is Class? sure? (5) static/non-static? (6) Domains? (7) Coupling? (8) Interface/Abstract (9) Multiplicity (10) Packages</br> ++ How to write a comment: What? For what? How?| [Lab#SE02-2](/javase/selab2-2.qmd)</br>[.gitignore](https://git-scm.com/docs/gitignore){.external} / [.gitignore not working](https://stackoverflow.com/questions/25436312/gitignore-not-working){.external}</br>[Objects and class](/javase/se-concepts-objects.qmd) / [static](/javase/se-concepts-static.qmd)</br>[MovieManager Code](https://github.com/AlbertProfe/CifoJava2023/tree/f62b9a176493b6189efd3d55d4b05c1ec5b4fb2e/MovieManger){.external} |
|  | 17 | 18/01 | + Relationships and Multiplicity: onetoone, onetomany, manytomany</br> - <s>Model First: customer/product</s></br> - <s>Project structure: .gitignore, readme.md, uml.md</s> </br> ++ Why Multiplicity? (1) People at same page (2) Identify killing problems: pavoland (3) avoid future problems and correct them before code (4) Huge improvement on understanding THE problem (5) documentation</br>| [Multiplicity](/javase/se-pattern-uml.qmd#entity-relationship-types-multiplicity)</br>[Mermaid Class Diagram UML](https://mermaid.js.org/syntax/classDiagram.html){.external}</br> [Customer/Product example](https://albertprofe.github.io/wiki/javase/se-pattern-uml.html#example-customer-product){.external}</br> [Get your team on the same page](https://theteamcanvas.com/){.external} |
|  | 18 | 19/01 | + 1:n / onetomany / @OneToMany</br> + Example (1) oneToMany: Director/Movie</br> + Project structure: .gitignore, readme.md, uml.md</br> ++ Intro **Albertus' dylemma** | [Java Persistence](https://en.wikibooks.org/wiki/Java_Persistence){.external}</br> [MovieManager Code](https://github.com/AlbertProfe/CifoJava2023/tree/6f962d23a4fae67099ee766f2aa2a17e60a46cd7/MovieManger){.external}</br> [Domain Driven Design — method and process agnostic](https://www.linkedin.com/pulse/domain-driven-design-method-process-agnostic-angelo-hulshout-bit){.external}</br> |
|  | 19 | 20/01 |  + How to approach a complex software architecture (software lifecycle meta-domains): (1) project (2) domains-DDD (3) UML (4) coding  </br> + Decision-making & Albertus' dylema</br>+ SCRUM Projects: (1) Management (2) Meetings Rules (3) Mistakes (4) Roles (5) Iterations</br> + spaceX: all requirements are dumb</br> | [Software lifecycle](/index.qmd#lifecycle-software-(2022))</br> [SCRUM](/scrum/scrum-what-concepts.qmd)</br> [All requirements are dumb](https://modelthinkers.com/mental-model/musks-5-step-design-process){.external}</br> [SpaceX’s first Starship SN5 150m hop test](https://www.youtube.com/watch?v=TYAi2JJItgY){.external}  |
| **#5** | **20**| **23/01** | **+ Top/Down or Down/Top project approach and build-up</br> + Project/Domain-DDD/UML/microProgramming</br> + MovieManager Domains & Packages, connecting classes: general plan  (1/3)</br> - <s>Test interactivity</s></br>**  | **[Packages](/javase/se-concepts-package.qmd)</br> [Movie Manager (with errors: very unusual and not clean)](https://github.com/AlbertProfe/CifoJava2023/tree/6e54545494594c6ff36fe063afc02a98b34d68d0){.external}</br> [Top-down and bottom-up design](https://en.wikipedia.org/wiki/Top-down_and_bottom-up_design){.external}</br>**  |
|  | 21 | 24/01 | + MovieManager Domains & Packages, connecting classes: static/non-static and reusable method/class (2/3)</br> + Hashmap</br> + Try and Catch</br> + Test interactivity</br> | [Movie Manager](https://github.com/AlbertProfe/CifoJava2023/tree/075af8cb656849e32f202d929db86ee86024cc67){.external}</br>  [HashMap w3school](https://www.w3schools.com/java/java_hashmap.asp){.external}</br> [Lab#SE02-5 Test Input Console](/javase/selab2-5.qmd#core-classes)</br> [Lab#SE02-4 Try and Catch](/javase/selab2-4.qmd#trycatch-for-wrong-inputs)</br> |
|  | 22 | 25/01 |  ++ How to code: (1) User-story (2) New Feature (How it fits with existing UML) (3) pseudo-code (4) code acutal typing</br> + MovieManager Domains & Packages, connecting classes (3/3):</br> (1) HashMap movies and CRUD operations,</br> (2) createAndAddMovieToStore,</br> <s>(3) HashMap testMovies</s> </br> (4) testCreateAndAddMovieToStoreInputConsole</br> | [Movie Manager](https://github.com/AlbertProfe/CifoJava2023/tree/5fe2990429323fd800fd614a778c17961240a360){.external}</br> [Simulate Input by console](/javase/selab2-5.qmd#core-classes) |
|  | 23 | 26/01 |  + MovieManager, Test and CRUD (1/2)</br> (1) HashMap Movies CRUD (2) implement test by a simulated console: createMovie and deleteMovie tests (3) document test with html (4) manager CRUD implement<br>  + <s>Inherence / Interface / Abstract Class</s></br> - <s>git</s></br> |  [Movie Manager Simulate input (1/2)](https://github.com/AlbertProfe/CifoJava2023/tree/f4dcc5e1718fb4b014b2fac21f481f624c4ed666){.external}</br>  [Class Test <b>Create</b> Movie](https://github.com/AlbertProfe/CifoJava2023/blob/f4dcc5e1718fb4b014b2fac21f481f624c4ed666/MovieManger/src/test/java/org/example/crudMovieByConsoleTest.java#L16){.external}</br>  [Movie Manager Simulate input (2/2)](https://github.com/AlbertProfe/CifoJava2023/tree/6c42c29085db0bef19a8ee780343c2198b1113c3){.external}</br> [Class Test <b>Delete</b> Movie](https://github.com/AlbertProfe/CifoJava2023/blob/6c42c29085db0bef19a8ee780343c2198b1113c3/MovieManger/src/test/java/org/example/crudMovieByConsoleTest.java#L39){.external}|
|  | 24 | 27/01 | + MovieManager, CRUD & update (2/2)</br> + SCRUM + Vocabulary (writting)</br> + Book: SRE | [Movie Manager Update CRUD](https://github.com/AlbertProfe/CifoJava2023/tree/96bf8a96998809a8f5ee1acea7fc9f42139a120c){.external}</br> [Class MovieManager <b>Update</b> Movie](https://github.com/AlbertProfe/CifoJava2023/blob/96bf8a96998809a8f5ee1acea7fc9f42139a120c/MovieManger/src/main/java/org/example/manager/MovieManager.java#L37){.external}</br> [SRE](/books/sre.qmd) </br> |
| **#6** | **25** | 3**0/01** | **+ Intro to CSS, OJS, Engines and tools</br> + Example (3) manyToMany: memberLibrary/Book, Customer/Product, Director/Movie</br>** | **[manytomany](/javase/se-pattern-uml.qmd#many-to-many-(nm))</br> [CSS and Engines Resources](/markup/resources.qmd#css)**  |
|  | 26 | 31/01 | + Library Model Basic/Large</br> + Reuse Movie/Review as a Template </br> + Start with LibraryProject: lombok (create 100 users/books), use-case, refactor, maven, dependencies, DDD, UML and core classes, borrow core-operation, managers, test, mockup, git, common lenguage </br>  | [Lab#SE00-3 Basic](/javase/selab0-3.qmd#basic-uml) </br>[Lab#SE00-3 Large](/javase/selab0-3.qmd#large-uml) </br> [LibraryProject](https://github.com/AlbertProfe/CifoJava2023/tree/master/LibraryProject){.external}  </br> |
|  | 27 | 01/02 | + LibraryProject:</br> (1) define priorities: tasks and kanban</br> (2) code Faker create Users </br> <s>(3) code test Borrow a book from console</s> </br> (4) UUID method </br> |  [Lab#SE03-1 UML](/javase/selab3-1.qmd) </br> [Lab#SE03-2 Sprint Zero](/javase/selab3-2.qmd) </br>  ![Library Project key-words sprint zero](/images/javase/libraryproject_board.jpg){#library-board width="40%"} </br> [LibraryProject](https://github.com/AlbertProfe/CifoJava2023/tree/6527f471c8cef1606e20d80cb4ca9fb9f9445f48/LibraryProject){.external} <br> |
|  | 28 | 02/02 | + MVC: Api Rest</br> + Quarto: using API Rest with D3.js</br>  + git</br> | [Quarto API REST](/markup/markup-quarto-api-rest.qmd)</br> [D3.js](https://d3js.org/){.external} </br>  [Observable JavaScript](https://observablehq.com/@observablehq/observable-javascript){.external} |
|  | 29 | 03/02 | + SCRUM: delete (step 2 spaceX)</br> + Vocabulary</br> + <b>Four-Hats</b>: Project/DDD/UML/code</br>+ Cifo Java AppWeb Service Infrastructure: servers, services, network, URL | [Cifo JAVA AppWeb Infrastructure](https://cifoweb.dev){.external}</br> [Prioritize When You Wear Multiple Hats](https://www.liquidplanner.com/blog/ask-a-pm-how-to-prioritize-when-you-wear-multiple-hats/){.external} |
: Backlog course January 2023 table {tbl-colwidths="[2,2,2,60,34]"}



## February 2023

| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| **#7** | **30** | **06/02** | **-** | **-** |
|  | 31 | 07/02 | - | - |
|  | 32 | 08/02 | + LibraryProject:</br> (1) create GitHub Projects and Kanban</br> (2) create tasks Sprint 1 </br> (3) discuss about how to make user/book/borrow interface management  </br> (4) discuss Borrow object test</br>  | [LibraryProject](https://github.com/AlbertProfe/CifoJava2023/tree/12a97938cc4a0718ae66f08075a402af13354dce/LibraryProject){.external} |
|  | 33 | 09/02 | + Library Model Basic/Large</br> + Example (3) manyToMany: memberLibrary/Book, Customer/Product, Director/Movie</br> + LibraryProject</br> - <s>Inherence / Interface / Abstract Class</s> </br> ++ Optional | [Lab#SE00-4](/javase/selab0-4.qmd) </br> [Inherence](/javase/se-principles-inheritance.qmd)</br> [Lab#SE00-3 Basic](/javase/selab0-3.qmd#basic-uml) </br>[Lab#SE00-3 Large](/javase/selab0-3.qmd#large-uml) </br>  [LibraryProject](https://github.com/AlbertProfe/CifoJava2023/tree/492e602a2e7dbd672adf7ff47287cd6ba5a02e07/LibraryProject){.external}</br>  [Optional](https://github.com/AlbertProfe/CifoJava2023/blob/492e602a2e7dbd672adf7ff47287cd6ba5a02e07/LibraryProject/src/test/java/org/example/createObjectsTest.java#L97){.external} </br> |
|  | 34 | 10/02 | + LibraryProject: sprint 1</br> - <s>Spring Boot Intro</br>  - Spring Rest and Web</br> - Thymeleaf </s></br> ++ Albertu's Dylemma </br > + Inherence / Interface / Abstract Class| [LibraryProject](https://github.com/AlbertProfe/CifoJava2023/tree/ebca4fe77c3ef73bd476d393a0654930c5fd34cb/LibraryProject){.external} </br>[Generic Types](https://docs.oracle.com/javase/tutorial/java/generics/types.html){.external} </br> [Interface](https://docs.oracle.com/javase/tutorial/java/concepts/interface.html){.external} </br> [Interface w3 schools](https://www.w3schools.com/java/java_interface.asp){.external} |
| #8 | 35 | 13/02 | + Sprint2: pick up tasks from Product Backlog </br>+ LibraryProject:</br> (1) testBorrowUI </br> (2) bookManager </br> (3) returns </br> (4) storage </br> + Spring Boot: </br> (1) Intro & project structure/folder tree</br>  (2) Spring Rest and Web</br> (3) Thymeleaf </br> (4) Resources: books and webs </br>  | [LibraryProject](https://github.com/AlbertProfe/CifoJava2023/tree/c8b04b02e4d3c9407a92fa3211ee34a6eb56e935/LibraryProject){.external} <br>  [MyFirstSpring](https://github.com/AlbertProfe/CifoJava2023/tree/c8b04b02e4d3c9407a92fa3211ee34a6eb56e935/myFirstSpring){.external} <br> [Spring Boot: create a Maven Project](/springboot/boot-what-create.qmd) </br> ![Sprint1 Product Backlog](/images/javase/Sprint1.jpg){width="30%"} |
|  | 36 | 14/02 | + LibraryProject:</br> <s>(1) borrowManager: list and get statusBorrow</s> </br> (2) returnBook: pseudo-code</br> ++ use-story > use-case > functional-diagram > pseudo-code > code  |[LibraryProject Approach 1](https://github.com/AlbertProfe/CifoJava2023/tree/a2e9c9911f04b8708e1bdf2b9de55300046b70aa/LibraryProject){.external} </br>  [LibraryProject Approach 1 with several methods](https://github.com/AlbertProfe/CifoJava2023/tree/a28d35b6bb99e70cd8f7dd0eace56edc2c4702df/LibraryProject){.external} </br> |
|  | 37 | 15/02 | + LibraryProject:</br>  (1) returnBook: code branch-pattern (to-do)</br> (2) returnBook: codee branch-moreHashmaps (to-do)</br> (3) returnBook: code branch-bidirectional (to-do)</br> **(3) returnBook: code branch-handlerOptions**</br> ++ Make a *brief study* of the main efficient/relevant (three or four?) solutions and approaches to our problem in order to understand it, find out the **optimus solution**, solve it and eventually code it. </br> ++ Create one branch for attempt/aproach (to-do)</br>| [LibraryProject branch-handlerOptions `pseudo` ](https://github.com/AlbertProfe/CifoJava2023/tree/79540cb6e18c8480b8c618d6d22901a36fc2fa58/LibraryProject){.external} </br>   [LibraryProject branch-handlerOptions `finished`](https://github.com/AlbertProfe/CifoJava2023/tree/6d30ebfc6c082356ae566a2bba875fc304715d4e/LibraryProject){.external} </br></br> ![](/images/javase/how-to-code.jpg){width="30%"} |
|  | 38 | 16/02 | - LibraryProject:</br> <s>(1) Inherence Person,Publication </s></br> (2) createBorrows (fake) </br> (3) pickBorrowByUser (basic-polish bookReturn) </br> (4) findBorrowsByUser </br> (5) switch (book, user, borrow) </br> | [LibraryProject branch-handlerOptions `fakeBorrows`](https://github.com/AlbertProfe/CifoJava2023/tree/fc58efe226075da55ae19845a31cc58bfe1e8e1a/LibraryProjecT){.external}  </br> [Java 8](/javase/se-concepts-java8.qmd) </br> [2](https://github.com/AlbertProfe/CifoJava2023/blob/fc58efe226075da55ae19845a31cc58bfe1e8e1a/LibraryProject/src/main/java/org/example/manager/BorrowManager.java#L16){.external}, [3](https://github.com/AlbertProfe/CifoJava2023/blob/fc58efe226075da55ae19845a31cc58bfe1e8e1a/LibraryProject/src/main/java/org/example/manager/BorrowManager.java#L161){.external}, [4](https://github.com/AlbertProfe/CifoJava2023/blob/fc58efe226075da55ae19845a31cc58bfe1e8e1a/LibraryProject/src/main/java/org/example/manager/BorrowManager.java#L205){.external}, [5](https://github.com/AlbertProfe/CifoJava2023/blob/fc58efe226075da55ae19845a31cc58bfe1e8e1a/LibraryProject/src/main/java/org/example/manager/BorrowManager.java#L107){.external}</br> |
|  | 39 | 17/02 | - LibraryProject: </br> (1) core-functional return-book use-case </br>- SCRUM: </br> (1) Albertus' Dylemma: burnout flag </br> (2) Why execution is so difficult? </br><s>(3) Writting </s></br> (4) SpaceX: step 2 and further </br> (5) Motivation or Purpose </br>  | [Discussion: use case return a book](/images/javase/bookReturnByUser2.png) </br></br> [Burn out](/books/burnout.qmd) and [Relaxation](/books/relaxationrevolution.qmd)</br> [Execution: The Discipline of Getting Things Done](/books/execution.qmd)  </br>[Motivation?](https://positivepsychology.com/what-is-motivation/){.external} vs. [Less Wrong](https://www.lesswrong.com/){.external} </br> [dukkha](https://en.wikipedia.org/wiki/Du%E1%B8%A5kha){.external}|
| #9 | 40 | 20/01 | + LibraryProject:</br> (0) plan Sprint </br> (1) brief-study returnBook </br> (2) branch returnBook </br> (3) Inherence Person </br> + Git: <br> (1) Remote/Local (just one user)</br> (2) Basic Operations: push, pull, commit, add, clone </br> (3) watchdog: writting commits, location, document, time</br>| [LibraryProject ](https://github.com/AlbertProfe/CifoJava2023/tree/1413c47c8aa8e5ed6ec4eb6ff4600df5dbfb28a8/LibraryProject){.external} </br> [Learn Git](https://learngitbranching.js.org/){.external} </br> ![](/images/javase/git_branch.png){width="45%"} |
|  | 41 | 21/01 | + LibraryProject:</br> (1) Inherence: Member and/or LibraryMember </br> (2) Is Author a Member? </br> (3) Member is Abstract/Interface/Regular class? </br> (4) How will we call Managers? </br><s> - Quarto </s></br>| [core-General UML Proposal](/javase/selab3-3.qmd) </br> ![user-librarian Inherence UML](/images/javase/uml_user-librarian_inherence.png){width="80%"}|
|  | 42 | 22/02 | + Spring Boot: </br> (1) Book @Controller  </br> (2) Book @Service </br> (3) Book CRUD </br> (4) HTML Thymeleaf </br> (5) H2 DataBase Local Source and Application.properties</br> - <s>Git</s> </br>  | [Lab#SB02-Library5 Code](https://github.com/AlbertProfe/cifojava2022-3/tree/master/library5){.external} </br> [Lab#SB02-Library5 Docs](https://github.com/AlbertProfe/cifojava2022-3/wiki/Library5:-ThymeLeaf-Web-Project){.external} </br> [Create H2 DB Spring Boot](/springboot/boot-what-create-th-h2.qmd) </br> [Create Spring Boot](/springboot/boot-what-create.qmd) </br>|
|  | 43 | 23/02 | - <s>LibraryProject: </br>  (1) finish core use-cases </br> (2) finish main UML</s></br> ++ LibraryManagement: </br> (1) What is Spring Boot? </br> (2) How does it works? </br> (3) What are the main elements of Spring Boot? </br> (4) What is Thymeleaf? </br> (5) What are server-renders and template engines? </br> ++ Deliveries MF01 </br> | [Thymeleaf](https://www.thymeleaf.org/){.external} </br> [H2 DB](https://www.h2database.com/html/main.html){.external} </br> [Spring Boot Reference Documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/){.external}</br> [Spring init](https://start.spring.io/){.external} </br>  [Building an App with Spring Boot](https://spring.io/guides/gs/spring-boot/){.external}  </br></BR>  [Create Spring Boot](/springboot/boot-what-create-th-h2.qmd) </br>  [Create Spring Boot H2 DB and TH](/springboot/boot-what-create-th-h2.qmd) </br>[Lab#SB00-1](/springboot/sblab0-1.qmd)  </br> </br> |
|  | 44 | 24/02 |  - Deliveries MF01</br> - Quarto </br> - Spring Boot: </br> (1) Summary week </br>  - SCRUM: </br> <s>(1) Motivation/Purpose 2 </s></br> (2) Burn Out multitasking, several hats </br>  (3) spaceX beyond Scrum | - |
| #10 | 45 | 27/02 | + LibraryManagement: </br> (0) Mock-up  </br> <s>(1) Tree-Folder: packages </s> </br> (2) Book: @Entity, @Repository, @Controller, @Service  </br> (3) Thymelaf </br>  + Spring Boot: request-response Cycle | [Spring Boot H2DB TH](/springboot/boot-what-create-th-h2.qmd) </br>[Spring Boot: cycle](/springboot/boot-what-cycle.qmd) </br> [Lab#SB00-1](/springboot/sblab0-1.qmd) </br></br> Auto-reload compiler:</br>![Auto-reload compiler: Advanced Settings](/images/springboot/compiler.png){width="20%"}  ![Auto-reload compiler: build project automatically](/images/springboot/compiller2.png){width="20%"} </br> |
|  | 46 | 28/02 | + View-Controller </br> (1) Controller </br> (2) View  </br> (3) Example| [Controller](/springboot/boot-concepts-controller.qmd) - [View](/springboot/boot-concepts-view.qmd) </br> [Auto-reload compiler](/springboot/boot-what-create-th-h2.qmd#auto-reload-compiler) </br> [Tutorial: Using Thymeleaf](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html){.external} |
|  | 47 | 01/03 | + View-Controller </br> (1) @Service and Dependency Injection </br>(2) HashMap fake @Repository </br>(3) <b>request-response scope</b>  </br>  (4) redirect: </br>  (5) messages.properties </br>  (6)  CRUD operations draft and pseudo-code </br><s>LibraryProject: </br>  (1) finish core use-cases </br> (2) finish main UML</s></br> | [controllerView Project](https://github.com/AlbertProfe/CifoJava2023/tree/e17d40231644aca79c90ff9205f323536495d8d4/controllerView){.external} </br> [render controllerView](/images/springboot/th_controller_view.png) </br> [resources messages.properties](https://github.com/AlbertProfe/CifoJava2023/tree/master/controllerView/src/main/resources){.external}</br> |
|  | 48 | 02/03 | + View-Controller  </br> (1) Mock-up user-librarian HTML  </br> (2) Tree-Folder: packages  </br> (3) User: Java Lombok Class and @UserController  </br> (4) User: fake @Repository (HashMap) and @Service  </br> <s>(5) CRUD Operations User and draft Librarian </s></br>  - <s>Spring Timeline <s></br> | [Lab#SB00-2](/springboot/sblab0-2.qmd) </br> [Lab#SB02-Library5 Code](https://github.com/AlbertProfe/cifojava2022-3/tree/master/library5){.external} </br>  [Lab#SB02-Library5 Docs](https://github.com/AlbertProfe/cifojava2022-3/wiki/Library5:-ThymeLeaf-Web-Project){.external}  </br> [controllerView](https://github.com/AlbertProfe/CifoJava2023/tree/master/controllerView){.external} |
|  | 49 | 03/03 | + Deliveries MF01</br> + Spring Boot: </br> (1) Summary week </br> ++ How to Connect Domains </br> (1) URL+ paths: localhost: 8080/home </br> (2) annotations: @Controller, @RequestMapping, @RequestParam </br> (3) Dependency Injection @Autowired UserService userService </br>  + SCRUM: </br> <s>(1) Motivation/Purpose 2 </s></br> (2) Order and How we see the world </br>  <s>(3) spaceX beyond Scrum </s> | [controllerView](https://github.com/AlbertProfe/CifoJava2023/tree/0a821cc862d142f213b13f65586de09236699ee9/controllerView){.external} </br> [Neuroscience: You Will Never Lack Motivation Again](https://www.newtraderu.com/2023/02/25/neuroscience-you-will-never-lack-motivation-again/?utm_content=cmp-true){.external} |
: Backlog course February 2023 table {tbl-colwidths="[2,2,2,64,30]"}

## March 2023

| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| #11 | 50 | 06/03 | - | - |
|  | 51 | 07/03 | - | - |
|  | 52 | 08/03 | - | - |
|  | 53 | 09/03 | - | - |
|  | 54 | 10/03 | - | - |
| #12 | 55 | 13/03 | - ThymeLeaf: </br> (1) Fragments </br> | - |
|  | 56 | 14/03 | - LibraryManagement: </br> (1) Borrow </br> - Git </br>  - LibraryProject: </br>  (1) finish core use-cases </br> (2) finish main UML</br> - LibraryManagement: </br> (1) refactor variables and packages </br> (2) Project > Management </br> (3) userController > Management | [CRUD: delete](/springboot/sblab0-2.qmd#crud-delete) </br> [userController: delete](){.external} </br> |
|  | 57 | 15/03 | - | - |
|  | 58 | 16/03 | - | - |
|  | 59 | 17/03 | - | - |
| #13 | 60 | 20/03 | - | - |
|  | 61 | 21/03 | - | - |
|  | 62 | 22/03 | - | - |
|  | 63 | 23/03 | - | - |
|  | 64 | 24/03 | - | - |
| #14 | 65 | 27/03 | - | - |
|  | 66 | 28/02 | - | - |
|  | 67 | 29/03 | - | - |
|  | 68 | 30/03 | - | - |
|  | 69 | 31/03 | - | - |
: Backlog course March 2023 table {tbl-colwidths="[2,2,2,64,30]"}

## April 2023

| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| #15 | 70 | 03/04 | - | - |
|  | 71 | 04/04 | - | - |
|  | 72 | 05/04 | - | - |
|  | 73 | 06/04 | - | - |
| #16 | 74 | 11/04 | - | - |
|  | 75 | 12/04 | - | - |
|  | 76 | 13/04 | - | - |
|  | 77 | 14/04 | - | - |
| #17 | 78 | 17/04 | - | - |
|  | 79 | 18/04 | - | - |
|  | 80 | 19/04 | - | - |
|  | 81 | 20/04 | - | - |
|  | 82 | 21/04 | - | - |
| #18 | 83 | 24/04 | - | - |
|  | 84 | 25/04 | - | - |-product
|  | 85 | 26/04 | - | - |
|  | 86 | 27/04 | - | - |
|  | 87 | 28/04 | - | - |
: Backlog course April 2023 table {tbl-colwidths="[2,2,2,64,30]"}

## May 2023

| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| #19 | 88 | 02/05 | - | - |
|  | 89 | 03/05 | - | - |
|  | 90 | 04/05 | - | - |
|  | 91 | 05/05 | - | - |
| #20 | 92 | 08/05 | - | - |
|  | 93 | 09/05 | - | - |
|  | 94 | 10/05 | - | - |
|  | 95 | 11/05 | - | - |
|  | 96 | 12/05 | - | - |
| #21 | 97 | 15/05 | - | - |
|  | 98 | 16/05 | - | - |
|  | 99 | 17/05 | - | - |
|  | 100 | 18/05 | - | - |
|  | 101 | 19/05 | - | - |
| #22 | 102 | 22/05 | - | - |
|  | 103 | 23/05 | - | - |
|  | 104 | 24/05 | - | - |
|  | 105 | 25/05 | - | - |
|  | 106 | 26/05 | - | - |
| #23 | 107 | 29/05 | - | - |
|  | 108 | 30/05 | - | - |
|  | 109 | 31/05 | - | - |
|  | 110 | 01/06 | - | - |
|  | 111 | 02/06 | - | - |
: Backlog course May 2023 table {tbl-colwidths="[2,2,2,64,30]"}

## June 2023

| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| #24 | 112 | 06/06 | - | - |
|  | 113 | 07/06 | - | - |
|  | 114 | 08/06 | - | - |
|  | 115 | 09/06 | - | - |
: Backlog course June 2023 table {tbl-colwidths="[2,2,2,64,30]"}

## July 2023

:::

<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} IFCD0210 Sprint Backlog](/ifcd0210/ifcd0210backlog-sprint.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[IFCD0210 Projects Backlog  {{< fa solid arrow-right >}}](/ifcd0210/ifcd0210backlog-projects.qmd)
<br>
</div>
<br>
</div>
