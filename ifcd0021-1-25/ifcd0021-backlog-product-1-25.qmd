---
title: "IFCD0021-1-25 Product Backlog"
categories: [ifcd0021, backlog]
toc: true
number-sections: false
format:
  html
baseurlaws: "https://cifojava2024screenrecordings.s3.eu-central-1.amazonaws.com/"
---


![Backlog course](/images/home/backlog.jpg){width="30%"}




# Product Backlog by Month

::: {.callout-tip title="Months"}
- [September 2025](/ifcd0021-1-25/ifcd0021-backlog-product-1-25.qmd#september-2025)
- [October 2025](/ifcd0021-1-25/ifcd0021-backlog-product-1-25.qmd#october-2025)
- [November 2025](/ifcd0021-1-25/ifcd0021-backlog-product-1-25.qmd#november-2025)


:::



::: {.column-page-right}

## September 2025

<details>
<summary>September 2025</summary>




| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| **01**  | 01 | 15/09/2025 | - Kick-off Java FullStack 2025: </br> (1) albertprofe.dev </br> (2) What is a **roadmap** and why is so important? </br> (3) Planning #11 weeks course  </br></br> - Architecture: Request-Response Cycle </br> | - [Request-Response Cycle](/springboot/boot-what-cycle.qmd){.external target='_blank'}  </br>  - [Developer 2025](/about/about-this-developer.qmd){.external target='_blank'} </br> - [MOOC Helsinki](/javase/se-what-moochelsinki.qmd){.external target='_blank'} </br> </br>  ![](https://albertprofe.dev/images/springboot/springboot-architecture-2.png){.lightbox width=80% fig-align="center"} </br>  - [Unveiling the Technological Marvels behind Netflixâ€™s Seamless Experience](https://kasun-r-weerasinghe.medium.com/architecture-of-netflix-1c38257f1f4a){.external target='_blank'}  |
|   | 02 | 16/09/2025 | - Contact: albertprofe@gmail.com </br>  - Lateralization: learning </br>  - Spring Boot: intro </br>  - <s>**Pet** Projecct: UML & data model</s> </br>  - Vocabulary: API, Framework, etc.. </br> - Tech Stack  </br>  - Git/gh  |  - [git basics](https://gist.github.com/AlbertProfe/b05e8198f02b311d18e7c4a86c5241e0){.external target='_blank'} </br>  - [gh auth login](https://cli.github.com/manual/gh_auth_login){.external target='_blank'}</br> - [UML](/javase/se-pattern-uml.qmd){.external target='_blank'}</br>- [Maven Create Project](/javase/se-concepts-createproject.qmd){.external target='_blank'}  </br> - [Push to git](/javase/se-concepts-projectgit.qmd){.external target='_blank'}  </br> - [UML Mermaid](https://mermaid.js.org/){.external target='_blank'}  |
|   |
|   | 03 | 18/09/2025 | - How to plan </br>  - Create a Spring Boot Project: debugg </br> - MVC: how it works </br>  - Spring Boot as a Restaurant  </br> - Java SE: scope </br> - Thymeleaf: what is a template engine | - [Spring Boot Create Project](/springboot/boot-what-create.qmd){.external target='_blank'} </br>  - [Maven Create Project](/javase/se-concepts-createproject.qmd){.external target='_blank'}  </br> - [Java Version Switch](https://stackoverflow.com/questions/59856882/how-to-switch-between-different-java-versions-in-linux){.external target='_blank'} |
|   | 04 | 19/09/2029 | - Git: version control </br>  - Project Maven Renting Car: </br> (0) Project in 4 steps: Project > DDD > UML > Code </br> (1) UML: Booking has Car & Client </br> (2) Maven Project </br> (3) Entity classes </br>  (4) Execution flow **Apache-Maven-quickstart**</br></br> - <s>static vs. non-static</s> </br> ++ SCRUM: intro |  - [Maven Create Project](/javase/se-concepts-createproject.qmd){.external target='_blank'}  </br>  - [Git](/devops/devops-vc-git.qmd){.external target='_blank'} </br> - [Git & gh basic commands](https://gist.github.com/AlbertProfe/b05e8198f02b311d18e7c4a86c5241e0){.external target='_blank'} </br>  - [Repo rentingCar](https://github.com/AlbertProfe/rentingCarTest){.external target='_blank'}  |
| **02**  | 05 | 22/09/2025 | - Planning Sprint#02 </br>  - <s>Linux: basics</s>  </br> - Java SE: static vs non-static  </br> </br>  - Project: rentingCar: </br> (1)  UML: class, execution flow, seq. diagram </br> (2) booking object </br> (3) docs | - [linux: Basics](/linux/linux-what-basics.qmd){.external target='_blank'}  </br> - [UML Mermaid](https://mermaid.js.org/){.external target='_blank'}</br>  - [Mermaid docs](https://mermaid.js.org/syntax/classDiagram.html){.external target='_blank'} </br> - [static](/javase/se-concepts-static.qmd){.external target='_blank'} </br> - [UML](/javase/se-pattern-uml.qmd){.external target='_blank'}</br>   - [Repo rentingCar: da0e3f](https://github.com/AlbertProfe/rentingCarTest/tree/da0e3f142379f6ac77f534e32a714a32e17cbb56){.external target='_blank'} |
|   | 06 | 23/09/2025 | - Java: JUnit </br></br> - Project: rentingCar: <br> (1) UML, booking object  <br> (2) UI: cli interaction <br> (3) Class Repository: HashMap vs. List  <br>  (4) Main Loop: scanner  </br>  (5) UML: model, data store, view, business logic </br></br>  ++ How to program: Project > DDD > UML > Code  | - [JUnit and TDD](/javase/se-concepts-tdd.qmd){.external target='_blank'}</br> - [Repo rentingCar: c7c49c88](https://github.com/AlbertProfe/rentingCarTest/tree/c7c49c886dbd3ad792170c5f8b182143a368a975){.external target='_blank'}    |
|   |
|   | 07 | 25/09/2025 | - Git </br> </br> ++ Java Classes, for what? Entities and model, object management, helpers and utilities </br>  - Project: rentingCar: <br> (1) UML, booking object & **myDataStore object** <br> (2) <s>UI: cli interaction</s> <br> (3) <s>Class Repository: HashMap vs. List</s>  <br>  (4) <s>Main Loop: scanner</s>  </br> (5) ++ Fake Data DB populator </br> </br> ++ Time data in Java: object, string or long epoch  | - [Coupling](/javase/se-concepts-coupling.qmd){.external target='_blank'}</br> - [Git](/devops/devops-vc-git.qmd){.external target='_blank'} </br> - [Git & gh basic commands](https://gist.github.com/AlbertProfe/b05e8198f02b311d18e7c4a86c5241e0){.external target='_blank'} </br> - [gh auth login](https://cli.github.com/manual/gh_auth_login){.external target='_blank'}</br></br>   - [Repo rentingCar: ad580c5](https://github.com/AlbertProfe/rentingCarTest/tree/ad580c501188fa15b6a32d5b036f3fba8dc4d12d){.external target='_blank'} </br> - [epoch](https://www.epochconverter.com/){.external target='_blank'} </br> </br>  ![](/images/ifcd0021-1-25/dataStore.drawio.png){.lightbox width=80% fig-align="center"}|
|   | 08 | 26/09/2029 | - Project: rentingCar: <br> (1) UML, booking object  <br> (2) UI: cli interaction <br> (3) Class Repository: HashMap vs. List  <br>  (4) Main Loop: scanner   |     - [UML Mermaid](https://mermaid.js.org/){.external target='_blank'} </br> - [UML](/javase/se-pattern-uml.qmd){.external target='_blank'}</br>   - [Repo rentingCar](https://github.com/AlbertProfe/rentingCarTest){.external target='_blank'}  |   - [Repo rentingCar](https://github.com/AlbertProfe/rentingCarTest){.external target='_blank'}  </br> |
|   | <s>09</s> | <s>29/09/2025</s> | *Class postponed* |  |
| **03**  | 09 | 30/09/2025 |  - Project: rentingCar: <br> (1) UML, booking object  <br> (2) UI: cli interaction <br> (3) Class Manager: CarManager  <br>  (4) Main Loop: scanner  </br>  (5) UML: model, data store, view, business logic </br></br>  ++ How to team: A + B is A or B, almost never C; think and then code: develop, code and then think: sandbox; do not digress, be concrete  |   - [Repo rentingCar: 3144476](https://github.com/AlbertProfe/rentingCarTest/tree/3144476d7b9b7094003f79e485fed6204379038d){.external target='_blank'} </br>   |
|   |
|   | 10 | 02/10/2025 | - Project: rentingCar: <br> (1) UML, booking object & **myDataStore object** <br> (2) UI: cli interaction <br> (3) Class Manager: Car, Client and Booking  <br>  (4) Main Loop: scanner, now **Disptacher**  </br> (5)  Fake Data DB populator Client </br> (6)  Implement **CreateBooking**, draft Login </br> (7) add field **loggedClient**, type Client to datastore</br> </br> - <s>Time data in Java: object, string or long epoch</s>  </br>  </br> - What does it mean to be a programmer and not a coder? </br> (1) Ask yourself every line: is t his core? do I know how to code it quickly? does it involves a lot of decision-making?</br> (2)  Do not overcomplicate the process </br> </br>  - DDD: domain-driven design & coupling; keywords for rentingCar domains  | - [Repo rentingCar: b7aa3539](https://github.com/AlbertProfe/rentingCarTest/tree/b7aa3539ccc54fbde1c06f6b2edc34a8969c1727){.external target='_blank'}  </br>  - [DDD and coupling](/javase/se-concepts-coupling.qmd){.external target='_blank'} </br></br> ![](/images/ifcd0021-1-25/domains.png){.lightbox width=100% fig-align="center"} </br> ![by Sonia](/images/ifcd0021-1-25/keywords.png){.lightbox width=100% fig-align="center"} |
|   | 11 | 03/10/2029 | - Project: rentingCar: <br> (1) UML, booking object & **myDataStore object** <br> (2) UI: cli interaction <br> (3) Class Manager: Car, Client and Booking  <br>  (4) Main Loop: scanner, now Disptacher  </br> (5)  Fake Data DB populator Client </br> (6)  Implement CreateBooking </br> (7) add field **loggedClient**, type Client to datastore</br> (8) Impplement **Login** decoupled: LoginView, LoginValidate </br></br>  - SPA vs. Multi-page</br> - Git: fork and sync  </br></br> - Retrospective   |   - [Repo rentingCar: d2d29d56](https://github.com/AlbertProfe/rentingCarTest/tree/d2d29d56bef92b2050675660acf7d938ebf87588){.external target='_blank'}  </br> </br>  ![](/images/ifcd0021-1-25/spa-multipage.png){.lightbox width=80% fig-align="center"}  </br>  ![](/images/ifcd0021-1-25/spa-va-mpa-key-features-1024x800.png){.lightbox width=80% fig-align="center"}|
: Backlog course September 2025 table {tbl-colwidths="[2,2,2,60,34]"}

</details>

## October 2025

<details>
<summary>October 2025</summary>




| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
|  **04**  | 12 | 06/10//2025 |  - Plan Sprint#04 </br></br> - Project: rentingCar-Boot: <br> (1) UML, Car & Client object  <br> (2) UI: no UI, just JUnit tests <br> (3) <s>Class @Service: CarService & ClientService  <br>  (4) Class @Controller: Thymeleaf and Api Rest </s> </br>  (5) Repository: JPA & H2 DB </br> (6) POM and dependencies </br> (7) **Root project** </br></br>  ++ Microservices vs. Monolith    |   - [Repo rentingCar-Boot: 2a29d27](https://github.com/AlbertProfe/rentingCarTest/tree/2a29d2779c03fe05a5d629355779033ce45b271b){.external target='_blank'} </br> - [Spring Boot create](/springboot/boot-what-create-th-h2.qmd){.external target='_blank'} |
|  | 13 | 07/10/2025 | - Request/Response Cycle: **mapping** </br></br> - Project: rentingCarBoot: <br> (1) UML, Car & Client object, **CarExtras**  <br> (2) UI: no UI, just JUnit tests <br> (3) Class @Service: CarService & ClientService  <br>  (4) Class @Controller: Thymeleaf and Api Rest  </br>  (5) Repository: JPA & H2 DB </br> (6) Create local H2 db</br></br>  ++ JPA: @oneToMany and @MenyToOne   |   - [Repo rentingCar-Boot: eb3217d0](https://github.com/AlbertProfe/rentingCarTest/tree/eb3217d0a80c56e074605c2dedf0a0e6f24bd293){.external target='_blank'}  </br> - [JPA: relationships](/springboot/boot-concepts-jpa-3.qmd){.external target='_blank'} </br> </br>   ![JPA: relationships](/images/springboot/labsb08/labsb08-4-onetomay.png){.lightbox width=100% fig-align="center"}  </br> </br>  - [JPA vs Hibernate](https://panls.ai/blog/jpa-vs-hibernate/){.external target='_blank'}|
|   |
|   | 14 | 09/10/2025 | - Project: rentingCarBoot: <br> (1) UML, Car & Client object  <br> (2) UI: no UI, just JUnit tests <br> (3) Class @Service: CarService & ClientService  <br>  (4) JPA: Java Persistence Api </br>  (5) Repository: JPA & H2 DB </br> (6) Create local H2 db </br></br>  <s>- Git: fork and sync</s>  </br> | - [Repo rentingCar-Boot: ab214ca](https://github.com/AlbertProfe/rentingCarTest/tree/ab214cae1d17b4fb262b9219a2c5b0516013d25a){.external target='_blank'}  </br>  - [DDD and coupling](/javase/se-concepts-coupling.qmd){.external target='_blank'} </br></br>  |
|   | 15 | 10/15/2025 | - Project: rentingCarBoot: <br> (1) UML, Car & Client object  <br> (2) UI: no UI, just JUnit tests <br> (3) Class @Service: CarService & ClientService  <br>  (4) CJPA: Java Persistence Api  </br>  (5) Repository: JPA & H2 DB </br> (6) **InsuranceCia** **n:1** with Car </br> </br> - SPA vs. Multi-page</br>  - Managing time in Java: epoch, object, String</br>   |   - [Repo rentingCar-Boot: a771773](https://github.com/AlbertProfe/rentingCarTest/tree/a771773333f91b72bc2fd7e144845677f2488ee3){.external target='_blank'}  </br> </br>  ![](/images/ifcd0021-1-25/spa-multipage.png){.lightbox width=80% fig-align="center"}  </br>  ![](/images/ifcd0021-1-25/spa-va-mpa-key-features-1024x800.png){.lightbox width=80% fig-align="center"}|
| **05**  | 16 | 13/10//2025 |  - Plan Sprint#05 </br></br> - Project: rentingCar-Boot: <br> (1) UML, Car & Client object  <br> (2) UI: no UI, just JUnit tests <br>  (3) Repository: JPA & H2 DB </br> (4) **Many-To-Many**: two approaches, bridge and @JoinTable  </br> (5) **Booking** domain </br> (6) Implement @Booking as a **bridge** </br> (7) LAZY & EAGER; @Transactioanl  </br> </br>  ++ TH: view for Cars with its entities  |   - [Repo rentingCar-Boot: 62b5c18](https://github.com/AlbertProfe/rentingCarTest/tree/62b5c184d6c275321c85eee36c7785d14d756dbd){.external target='_blank'} </br> - [Spring Boot create](/springboot/boot-what-create-th-h2.qmd){.external target='_blank'} </br> </br> ![](/images/ifcd0021-1-25/n-m-uni.png){.lightbox width=100% fig-align="center"} |
|  | 17 | 14/10/2025 |  - Project: rentingCar-Boot: <br> (1) UML, Car & Client object  <br> (2) UI: no UI, just JUnit tests <br>  (3) Repository: JPA & H2 DB </br> (4) @ManyToMany  </br> (5) **Booking** domain: populate at /utils  </br></br> </br></br>  ++ Booking populate faker </br> ++ @ElementCollection for List  |  - [Repo rentingCar-Boot: bf2f0dc](https://github.com/AlbertProfe/rentingCarTest/tree/bf2f0dce1f523b6008186a74b74a7a76b4c52de5){.external target='_blank'}  </br> - [JPA: relationships](/springboot/boot-concepts-jpa-3.qmd){.external target='_blank'} </br> </br>  </br> </br> |
|   |
|   | 18 | 16/10/2025 | - Project: rentingCarBoot: <br> (1) UML, Car & Client object  <br> (2) UI: no UI, just JUnit tests <br> (3) Booking feature: service draft </br> (4) **@ManyToMany**: Unidirectional or bidirectional </br> (5) Course @Entity **@joinTable** m:n with Booking  </br> (6) generateUUID to /utils </br></br>  ++ Populate DrivingCourse: nested loop with for and if-else is the best option?  | - [Repo rentingCar-Boot: 463c84268](https://github.com/AlbertProfe/rentingCarTest/tree/463c84268e14d8a200341d2da71e93dc86b3e878){.external target='_blank'}  </br>  - [DDD and coupling](/javase/se-concepts-coupling.qmd){.external target='_blank'} </br></br> ![](/images/springboot/manytomany-example.png){.lightbox width=100% fig-align="center"} </br> - [JPA - Using @JoinTable](https://www.logicbig.com/tutorials/java-ee-tutorial/jpa/one-to-one-join-table.html){.external target='_blank'} </br> - [Library3: API Rest Library Book @ManyToMany @OneToOne CRUD with Swagger](https://github.com/AlbertProfe/cifojava2022-3/wiki/Library3:-API-Rest-Library-Book-@ManyToMany-@OneToOne-CRUD-with-Swagger){.external target='_blank'} |
|   | 19 | 17/15/2025 | - Project: rentingCarBoot: <br> (1) UML, Car & Client object  <br> (2) UI: no UI, just JUnit tests <br>  (3) **Booking feature** </br></br> - Client <> Addreses: @ElementCollection </br></br>  - Populate DrivingCourse: nested loop with for and if-else is the best option?  |   - [Repo rentingCar-Boot: 355302](https://github.com/AlbertProfe/rentingCarTest/tree/35530294b1a465ef22c61e27288905f318d9b7c4){.external target='_blank'}  </br></br> ![](/images/ifcd0021-1-25/uml-rentigcar-v2.png){.lightbox width=100% fig-align="center"}|
: Backlog course October 2025 table {tbl-colwidths="[2,2,2,60,34]"}

</details>

## November 2025

<details>
<summary>November 2025</summary>




| Sprint | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
|    |    |    |    |    |
: Backlog course November 2025 table {tbl-colwidths="[2,2,2,60,34]"}

</details>


:::

