---
title: "Java SE: Coupling/Cohesion"
---

::: {.summary}
**Coupling** refers to the degree to which one class or module depends on another class or module.

**High/tight coupling** means that one class or module depends heavily on another class or module, while **low/loose coupling** means that one class or module has minimal dependencies on other classes or modules.

:::

---
Coupling and decoupling are fundamental in modern Java applied to **microservices**.

**Coupling** refers to the degree of dependence, **decoupling**, on the other hand, refers to the process of <mark>reducing the degree of coupling between different classes or modules in a system</mark>. By decoupling classes or modules, you can make the system **more modular, scalable, flexible, and maintainable**.

## Key-concept

The **importance of decoupling** in Java lies in its ability to improve the modularity, flexibility, and maintainability of a system. When classes or modules <mark>are highly coupled, changes to one class or module can have a cascading effect on other classes or modules, which can make the system difficult to modify and maintain<mark>. By decoupling classes or modules, you can **reduce** the dependencies between them, which can make the system more modular and easier to modify and maintain.

![Coupling and cohesion by Евгений Мирошниченко, CC0, [via Wikimedia Commons](https://commons.wikimedia.org/wiki/File:CouplingVsCohesion.svg)](https://upload.wikimedia.org/wikipedia/commons/0/09/CouplingVsCohesion.svg)

Additionally, decoupling can help to improve the reusability of classes or modules. When classes or modules are <mark>highly coupled, it can be difficult to reuse them in other contexts or situations</mark>. By **decoupling** classes or modules, you can make them more self-contained and independent, which can make them more easily reusable in other contexts.

## Example: ``CarFactory``

Here is an example of decoupling in Java, using a `CarFactory` class to create different types of cars:

```java
public class CarFactory {
    // Private constructor to prevent instantiation
    private CarFactory() { }

    // Factory method for creating cars
    public static Car createCar(String type) {
        switch (type) {
            case "sedan":
                return new Sedan("Toyota", "Camry", 2019);
            case "hatchback":
                return new Hatchback("Honda", "Fit", 2019);
            case "suv":
                return new SUV("Jeep", "Grand Cherokee", 2019);
            default:
                throw new IllegalArgumentException("Invalid car type: " + type);
        }
    }
}
```
In this example, the `CarFactory` class defines a `createCar()` method, which is marked as `public` and `static`. This method is the factory method, which is responsible for creating objects of the `Car` type. The `createCar()` method takes a `type` parameter, which specifies the type of car to create, and returns an instance of the appropriate concrete class.

By decoupling the `CarFactory` class from the code that uses the cars, you can make the code that uses the cars more flexible and reusable. For example, you could define a `CarDriver` class that takes a `Car` object as a parameter, and uses the `Car` object to drive the car. Because the `CarDriver` class doesn't depend on the `CarFactory` class, you can use the `CarDriver` class to drive any type of car, regardless of how the car was created.

Additionally, by decoupling the `CarFactory` class from the code that uses the cars, you can make the logic for creating the cars more modular and maintainable. For example, if you want to add a new type of car, such as a truck, you can simply add a new `Truck` class that extends the `Car` class, and then update the `CarFactory` class to include logic for creating instances of the `Truck` class. Because the `CarFactory` class is decoupled from the code that uses the cars, you don't have to change any other code in the system in order to add the new car type.

## Conclusion

Overall, decoupling is an important concept in Java programming, and can help to improve the modularity, flexibility, and maintainability of a system. By reducing the dependencies between classes or modules, you can make the system more modular and easier to modify and maintain, and you can improve the reusability of individual classes or modules.
