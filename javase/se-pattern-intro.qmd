---
title: "Java SE Design-Patterns"
subtitle: Java Fundamentals and Patterns
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: What is the Abstract Facotory
categories: [javase, design-patterns, concepts]
toc: true
number-sections: true
format:
  html
---

## Overview

::: {.summary}
ðŸ“˜ **Design-patterns**

In Java, a design pattern is a **general repeatable solution to a commonly occurring problem in software design**.

A design pattern is <mark>not a finished design</mark> that can be transformed directly into code, but rather it is a description or template that can be used to solve a problem that is commonly encountered in software development.

:::

---

There are many different design patterns that have been identified and documented, and each pattern provides a different solution to a specific problem.

Some of the most important design patterns in Java include:

- the singleton,
- the factory,
- the abstract factory
- the observer,
- and the builder.

These patterns are commonly used in Java because they provide solutions to common problems that are encountered in software development, and they can help to make your code more efficient, reusable, and maintainable.

## Design Patterns Cheat-sheet

![Design Patterns Cheat-sheet](../images/javase/design-patterns.png){width=70%}
<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} Java SE: Polymorphism](/javase/se-principles-polymorphism.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[Java Patterns: UML  {{< fa solid arrow-right >}}](/javase/se-pattern-uml.qmd)
<br>
</div>
<br>
</div>
