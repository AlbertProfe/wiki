---
title: "Java SE: JUnit and TDD"
---

::: {.summary}

ðŸ“˜ **JUnit**

**JUnit is a unit testing framework for the Java programming language**. It is used to write and run repeatable tests for Java code. JUnit provides a set of **annotations** and **assertions** that make it easy to write and run tests, as well as a simple framework for organizing and running tests.
:::

---

::: {.summary}

ðŸ“˜ **TDD: Test Driven Domain**

**Test-driven development (TDD)** is a software development process in which **tests are written for a piece of code before the code itself is written**.

This approach to development is designed to ensure that the code meets the requirements and works as intended. TDD involves writing a test for a feature, running the test to see if it fails, writing the code to implement the feature, and then running the test again to ensure that it passes. This process is then repeated for each feature until the code is complete.

TDD is often used in **agile software development**, as it allows for the rapid development of **high-quality code***.
:::

---

## JUnit: unit test

Link: [Junit](https://junit.org/junit5/) and [User guide](https://junit.org/junit5/docs/current/user-guide/)

Unit tests are the smallest elements in the test automation process. With the help of unit tests, the developer can check the business logic of any class. So JUnit plays a vital role in the development of a test-driven development framework.

The following example provides a glimpse at the minimum requirements for writing a test in JUnit Jupiter. Subsequent sections of this chapter will provide further details on all available features.

``` java
import static org.junit.jupiter.api.Assertions.assertEquals;

import example.util.Calculator;

import org.junit.jupiter.api.Test;

class MyFirstJUnitJupiterTests {

    private final Calculator calculator = new Calculator();

    @Test
    void addition() {
        assertEquals(2, calculator.add(1, 1));
    }

}

```


## TDD

<mark>Test-driven development is a development technique where the developer must first write a test that fails before writing a new functional code<</mark>. It ensures a proven way to ensure effective unit testing; however, it does not replace traditional testing. We believe that TDD is an excellent practice that all software developers should consider during the development process.

Steps for the same are given below:

1. Firstly, add a test.
2. Run all the tests and see if any new test fails.
3. Update the code to make it pass the new tests.
4. Rerun the test and if they fail, then refactor again and repeat.


## Example

Here is an example of how TDD could be applied in a Java project using JUnit. Let's say we are building a class that represents a simple calculator. We want the calculator to have methods for adding, subtracting, multiplying, and dividing two numbers.

First, we would write a test for the add method, which should take two numbers as arguments and return their sum. Here is an example of how this test might look using JUnit:

``` java
public class CalculatorTest {

  @Test
  public void testAdd() {
    Calculator calc = new Calculator();
    double result = calc.add(2, 3);
    assertEquals(5, result, 0);
  }

}
```

Next, we would run the test to see if it fails. Since we have not yet implemented the add method, the test should fail with a message indicating that the add method is not yet implemented.

Next, we would write the code for the add method. Here is an example of how this method might look:

``` java
public class Calculator {

  public double add(double a, double b) {
    return a + b;
  }

}
```

Finally, we would run the test again to ensure that it passes. If the test passes, we know that the add method is working correctly and we can move on to the next feature. We would repeat this process for each of the calculator's methods, writing a test for each one, implementing the code, and then running the test to ensure it passes.

This is just one example of how TDD can be applied in a Java project using JUnit. There are many other ways to approach TDD, and the specific steps and details will vary depending on the project and the requirements.





