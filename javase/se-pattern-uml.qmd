---
title: "Java Patterns: UML"
subtitle: Java Fundamentals and Patterns
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: What is the Abstract Facotory
categories: [javase, uml , design-patterns, concepts]
toc: true
number-sections: true
format:
  html
---

## Definition

::: {.summary}
**UML stands for Unified Modeling Language**. It is a standardized **visual language for specifying, constructing, visualizing, and documenting the artifacts of software systems**, as well as for business modeling and other non-software systems. 
:::

---

UML is used by software **developers, business analysts, and systems engineers** to model the design of a system and communicate that design to others. It provides a common language that allows people from different disciplines to understand and discuss system design in a consistent and precise way.

**UML is a powerful tool** that can help teams design and develop software and other systems more efficiently and effectively.

## UML: class diagram and relationships


![Example of UML class-diagram](/images/javase/uml_example.png){.preview-image #uml-example width=80%}

In UML, there are several types of **relationships** that can be used to model the relationships between elements in a system. Here is a brief overview of some of the most common types of relationships:

- **Inheritance**: Inheritance is a relationship between classes, where one class is a subclass of another class and inherits the properties and behavior of the superclass. This is represented in UML by a solid line with a closed, filled arrowhead pointing from the subclass to the superclass.
- **Composition**: Composition is a strong type of association that represents a whole-part relationship between two classes, **where the parts cannot exist independently of the whole**. This is represented in UML by a solid line with a closed diamond shape pointing from the whole to the part.
- **Aggregation**: Aggregation is a weaker type of association that represents a **whole-part relationship between two classes, where the parts can exist independently of the whole**. This is represented in UML by a solid line with an open diamond shape pointing from the whole to the part.
- **Association**: Association is a relationship between two classes that represents a connection or relationship between them. This is represented in UML by a solid line with an open arrowhead pointing from one class to the other.
- **Dependency**: Dependency is a relationship between two classes that indicates that **one class depends on the other for its functionality**. This is represented in UML by a dashed line with an open arrowhead pointing from the dependent class to the class it depends on.
- **Use**: Use is a relationship between two classes that indicates that **one class uses the other in some way**. This is represented in UML by a dashed line with an open, unfilled arrowhead pointing from the using class to the class being used.

## Example: class and object diagram

![Example of UML class and object](/images/javase/UML_ClassInstance.png){.preview-image #class-object width=80%}<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} Java SE Design-Patterns](/javase/se-pattern-intro.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[Java Patterns: Singleton  {{< fa solid arrow-right >}}](/javase/se-pattern-singleton.qmd)
<br>
</div>
<br>
</div>
