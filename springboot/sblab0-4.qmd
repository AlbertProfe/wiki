---
title: "Lab#SB00-4: API Rest"
subtitle: Spring Boot Library Management API Rest
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: Spring Boot
categories: [Spring-Boot, lab, rest]
toc: true
number-sections: true
format:
  html
---

::: {.labs}
ðŸ“˜ **Spring Boot Lab#SB00-4: API Rest**

After [Lab#SB00-3](/springboot/sblab0-3.qmd) we are going to creata an `API Rest` just for `book` domain.

You may also check [this](/markup/markup-quarto-api-rest.qmd) introduction to API Rest.
:::

</br>

## Overview

An `API` is a **set of definitions and protocols for building and integrating application software**.

> Itâ€™s sometimes referred to as a contract between an information provider and an information userâ€”establishing the content required from the consumer (the `call`) and the content required by the producer (the `response`).

::: {.column-margin}
For example, the API design for a `weather service` could specify that the user supply a `zip code` and that the producer reply with a 2-part answer, the first being the `high temperature`, and the second being the `low temperature`.
:::

::: {.callout-note}
## Rest
REST is a set of architectural constraints, not a protocol or a standard. *API developers can implement REST in a variety of ways.*
:::

When a client request is made via a RESTful API, it transfers a representation of the state of the resource to the requester or endpoint.

This information, or representation, is delivered in one of several formats via `HTTP`: `JSON` (Javascript Object Notation), `HTML`, `XLT`, `Python`, `PHP`, or `plain text`. 

::: {.callout-note}
## JSON
JSON is the most generally popular file format to use because, despite its name, itâ€™s language-agnostic, as well as readable by both humans and machines.
:::

## Library Management base project


- [Library Management 0.7](https://github.com/AlbertProfe/CifoJava2023/tree/4a2599405941d32bdf5431cde70a8052c845588e/LibraryManagement){.external}

## Folder-tree project

![Library Management](/images/springboot/LibraryManagement-apirest.png){width="40%"}


## API Rest `book`

Reference: 

- [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/){.external}
- [What is JSON](https://www.w3schools.com/whatis/whatis_json.asp){.external}
- [Library1 Rest Controller Book](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library1/src/main/java/io/company/library/LibraryRestController.java){.external}
- [What is a REST API?](https://www.redhat.com/en/topics/api/what-is-a-rest-api){.external}

::: {.callout-note}
## @RestController Annotation
This **annotation** is used at the class level and allows the class to handle the requests made by the client. The RestController allows to handle all REST APIs such as GET, POST, Delete, and PUT requests. 
:::

We define a REST controller using the `@RestController` and @`RequestMapping `annotations. The controller handles requests related to books under the base path `"/api/book"`.

The `BookRestController` class has a dependency on the `BookService` class, which is automatically injected using the `@Autowired` annotation.

The controller has a `GET` method mapped to the `"/books"` path, which retrieves all the books using the `bookService.getAllBooks()` method and returns them as a `HashMap` with String keys and `Book` values.

::: {.column-margin}
This method can be accessed through a web browser or another client, and it will return the response in a format such as JSON or XML.
:::

```java
package com.example.myFirstSpring.restcontroller;

import com.example.myFirstSpring.model.Book;
import com.example.myFirstSpring.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.HashMap;

@RestController
@RequestMapping("/api/book")
public class BookRestController {

    @Autowired
    BookService bookService;

    @GetMapping ("/books")
    public HashMap<String, Book> getAllBooks(){

      return bookService.getAllBooks();


    }
}
```

## Postman

### Install Postman in Linux Mint

``` terminal

$ sudo rm /etc/apt/preferences.d/nosnap.pref
$ sudo apt update
$ sudo apt install snapd
$ sudo snap install postman


```

**endpoint**: `http://localhost:8086/api/book/books`

![Postman](/images/springboot/postman.png){width="40%"}



<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} Spring Boot: Data](/springboot/boot-concepts-data.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[Lab 2: Spring Boot Projects  {{< fa solid arrow-right >}}](/springboot/sblab2.qmd)
<br>
</div>
<br>
</div>
