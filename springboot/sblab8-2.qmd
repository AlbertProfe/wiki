---
title: "Lab#SB08-2: Vaadin"
subtitle: Spring Boot Restaurant Management Vaadin
author: albertprofe
date: "01/010/2024"
date-modified: last-modified
date-format: full
description:  Spring Boot
categories: [Spring-Boot, lab]
toc: true
number-sections: true
format:
  html
---

:::: {.labs}
ðŸ“˜ Spring Boot Lab#SB00-2: RestaurantManager Vaadin
We are going to evolve the current Java SE Restaurant project into a `Spring Boot Restaurant Management System` with an `H2 DB` and web interface using `Vaadin`.
:::
</br>

![](/images/springboot/labsb08/lab08-1-vaadin-view-restaurantVaadin2.png)

# From RestaurantProject to RestaurantManagement

- [Restuarant Java SE Lab](/javase/selab4-1.qmd)
- [Restaurant Java SE Code](https://github.com/AlbertProfe/restaurant){.external target='_blank'}
- [Restaurant Java SE Wiki](https://github.com/AlbertProfe/restaurant/wiki){.external target='_blank'}
- [Spring Boot H2 and TH](/springboot/boot-what-create-th-h2.qmd){.external target='_blank'}

# Create a new Spring Boot project & H2 DB

- **Create a new Spring Boot project**: The first step would be to create a new Spring Boot project in the preferred IDE or text editor.

> The project can be created using **Spring Initializr**, which will create the necessary **file structure and dependencies**.

- **Configure the H2 database**: In the newly created project, configure the H2 database by adding:
  - the H2 dependency in the `pom.xml` file,
  - and also create a new `application.properties` file
  - set the database properties such as:
    - the database **URL**,
    - **username**,
    - and **password**.


## Model & Entities

- **Create a Menu Entity**: To represent a menu item in the restaurant management system, create a Menu @Entity 

> It could include attributes such as name, price, description, category (appetizer, main course, dessert, etc.), and availability status.

- **Create a Customer Entity**: To represent a customer in the system, create a Customer entity that includes attributes such as customer ID, name, phone number, email, and **reservation history.**

- **Create Booking Entity**: To represent a booking in the system, create a Booking entity that includes attributes such as booking date, time, number of people, tables, and associated customer.

- **Create Staff Entity**: To represent staff members in the system, create a Staff entity that includes attributes such as staff ID, name, position, shift schedules, and assigned tables.

## Domains: @Controller, @Service and @Repository

- **Create Repositories**: To access the data stored in the database, create repositories for each entity. **The repositories will provide the methods to create, read, update, and delete the data.**

- **Create Services**: Create services that **will implement the business logic of the system by calling the repository methods.** 

> The **services** will provide the methods to search for available tables, make a reservation, update menu items, process orders, manage staff schedules, handle customer feedback, and generate reports on restaurant performance.

- **Create Controllers**: Create controllers that **will handle the requests from the Vaadin UI by calling the service methods.** 

> The **controllers** will provide the methods to create a customer account, search for available tables, make a reservation, view and update menu items, place an order, manage staff schedules, submit customer feedback, and generate various reports.

# Vaadin

## Modern Java framework for building web applications

Vaadin is a web application framework for Java that allows developers to build modern, interactive web applications using Java without having to write HTML, CSS, or JavaScript. Here are some key points about Vaadin:

- [Vaadin Official Website](https://vaadin.com/)
- [Vaadin Documentation](https://vaadin.com/docs/latest/)
- [Vaadin Spring Boot Integration](https://vaadin.com/docs/latest/flow/integrations/spring/)

## Create Vaadin Views

- **Create Vaadin Views**: To create the web interface of the system, create Vaadin views for each of the main functionalities. **The views will be used to display the data and handle user interactions.**

> Vaadin allows you to create rich, interactive UIs using Java code. It provides a wide range of UI components and layouts that you can use to build your application's interface.

Example of a simple Vaadin view:

```java
@Route("menu")
public class MenuView extends VerticalLayout {
    private final MenuService menuService;

    public MenuView(MenuService menuService) {
        this.menuService = menuService;
        
        H1 title = new H1("Restaurant Menu");
        Grid<Menu> grid = new Grid<>(Menu.class);
        grid.setItems(menuService.getAllMenuItems());
        
        add(title, grid);
    }
}
```

This view creates a page with a title and a grid showing all menu items.

## Key Vaadin Concepts

1. **Server-side Architecture**: Vaadin primarily runs on the server, which means your business logic stays secure and you can leverage the full power of Java.

2. **Component-based UI**: Build UIs by combining and customizing existing components or creating your own.

3. **Data Binding**: Easily bind UI components to data sources, including JPA entities.

4. **Themes and Styling**: Customize the look and feel of your application using CSS and Vaadin's theming capabilities.

5. **Integration with Spring Boot**: Vaadin integrates seamlessly with Spring Boot, allowing you to use Spring's dependency injection and other features.


# Test

- Test the system: Test the system by running it and making sure that all the functionalities work as expected. This includes testing reservation creation, menu management, order processing, staff scheduling, and report generation.

# Code and output

![](/images/springboot/labsb08/lab08-1-vaadin-view.png)

- [GitHub code](https://github.com/AlbertProfe/restaurantVaadin){.external target='_blank'}

<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} Lab#SB08-1: RestaurantManager ](/springboot/sblab8-1.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[Lab#SB08-3: RestaurantManager  {{< fa solid arrow-right >}}](/springboot/sblab8-3.qmd)
<br>
</div>
<br>
</div>
