{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lab#SB08-3: H2 and API Rest\"\n",
        "subtitle: Spring Boot Restaurant Management H2 and API Rest\n",
        "author: albertprofe\n",
        "date: \"01/010/2024\"\n",
        "date-modified: last-modified\n",
        "date-format: full\n",
        "description:  Spring Boot\n",
        "categories: [Spring-Boot, lab]\n",
        "toc: true\n",
        "number-sections: true\n",
        "format:\n",
        "  html\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        ":::: {.labs}\n",
        "ðŸ“˜ Spring Boot Lab#SB00-3: RestaurantManager\n",
        "\n",
        "We are going to evolve the current **Java SE Restaurant** project into a **Spring Boot Restaurant Management System** with an `H2 DB` and `API Rest` manages by `Swagger`.\n",
        ":::\n",
        "</br>\n",
        "\n",
        "- [Commits](https://github.com/AlbertProfe/restaurantManager/commits/master/){.external target='_blank'}\n",
        "\n",
        "# RestaurantManager Project Summary\n",
        "\n",
        "`Key Components`\n",
        "\n",
        "- **Java Faker**: Library for generating fake data. [Java Faker GitHub](https://github.com/DiUS/java-faker)\n",
        "- **@Bean Annotation**: Spring annotation for declaring managed beans.\n",
        "- **H2 Database**: In-memory database for testing. [H2 Database Engine](https://www.h2database.com/)\n",
        "- **Swagger**: Tool for API documentation. [Swagger Documentation](https://swagger.io/docs/)\n",
        "- **ResponseEntity**: Spring class for HTTP response control.\n",
        "- **JUnit**: Spring Boot uitlity for testing. \n",
        "\n",
        "`Approaches to Create Fake Customers`\n",
        "\n",
        "1. Using **@Bean** and **CommandLineRunner**\n",
        "2. Using static method (not recommended)\n",
        "3. Using **ApplicationRunner** (recommended)\n",
        "`H2 Database Configuration`\n",
        "\n",
        "- **In-memory**: Temporary database, resets on application restart\n",
        "- **Local**: Persistent storage on disk\n",
        "- **Mixed**: In-memory for development, local for production\n",
        "\n",
        "`API and Controller`\n",
        "\n",
        "- **CustomerController**: Implements CRUD operations\n",
        "- Uses **Swagger annotations** for API documentation\n",
        "- Utilizes **ResponseEntity** for flexible HTTP responses\n",
        "\n",
        "`Service, Repo and JUnit`\n",
        "\n",
        "- @Service with all business logic from app\n",
        "- JpaRepository interface\n",
        "\n",
        "`Additional Resources`\n",
        "\n",
        "- [Spring Framework Documentation](https://docs.spring.io/spring-framework/reference/)\n",
        "- [Spring Boot Guide](https://spring.io/guides/gs/spring-boot/)\n",
        "- [RESTful Web Services Guide](https://spring.io/guides/gs/rest-service/)\n",
        "\n",
        "\n",
        "\n",
        "# Project structure\n",
        "\n",
        "\n",
        "`RestaurantManager` directory structure represents a <mark>typical Java Spring Boot project for a restaurant management application</mark>.\n",
        "\n",
        "Here's a basic explanation of the **main** components:\n",
        "\n",
        "**Root Directory**\n",
        "\n",
        "- `HELP.md`: contains project general information about `RestaurantManager`.\n",
        "- `mvnw` and `mvnw.cmd`: `Maven wrapper` scripts for `Unix-like` systems and `Windows`, respectively.\n",
        "- `pom.xml`: The `Maven` project configuration file.\n",
        "\n",
        "**Source Code (`src`)**\n",
        "\n",
        "The `src` directory contains the main application code and test code.\n",
        "\n",
        "**Main Application Code (`src/main`)**\n",
        "\n",
        "- `java/dev/example/restaurantManager`: The root package for the application.\n",
        "  - `controller`: Contains controller classes for handling HTTP requests.\n",
        "  - `model`: Defines the data models (entities) for the application.\n",
        "  - `repository`: Interfaces for database operations.\n",
        "  - `service`: Service layer implementation.\n",
        "  - `utilities`: Utility classes, such as data loaders.\n",
        "  - `RestaurantManagerApplication.java`: The main class to run the Spring Boot application.\n",
        "\n",
        "**Resources (`src/main/resources`)**\n",
        "\n",
        "- Configuration files (`application*.properties`)\n",
        "- Static resources and templates (.js, .css, etc..)\n",
        "\n",
        "**Test Code (`src/test`)**\n",
        "\n",
        "Contains test classes for the application.\n",
        "\n",
        "**Build Output (`target`)**\n",
        "\n",
        "This directory contains compiled classes, JAR files, and other build artifacts.\n",
        "\n",
        "**Project Structure**\n",
        "\n",
        "The project follows a typical MVC (Model-View-Controller) structure with additional layers:\n",
        "\n",
        "1. Models (in `model` package)\n",
        "2. Views (in `resources/templates`)\n",
        "3. Controllers (in `controller` package)\n",
        "4. Services (in `service` package)\n",
        "5. Repositories (in `repository` package)\n",
        "\n",
        "This structure allows for a clean separation of concerns and promotes maintainability and scalability of the application.\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-3-tree.png)\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-3-tree-scr.png)\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-3-tree-scr-2.png)\n",
        "\n",
        "\n",
        "\n",
        "<details>\n",
        "<summary>Code</summary>\n",
        "\n",
        "\n",
        "\n",
        "``` java\n",
        ".\n",
        "â”œâ”€â”€ HELP.md\n",
        "â”œâ”€â”€ mvnw\n",
        "â”œâ”€â”€ mvnw.cmd\n",
        "â”œâ”€â”€ pom.xml\n",
        "â”œâ”€â”€ _PRA\n",
        "â”‚Â Â  â””â”€â”€ PRA01.md\n",
        "â”œâ”€â”€ src\n",
        "â”‚Â Â  â”œâ”€â”€ main\n",
        "â”‚Â Â  â”‚Â Â  â”œâ”€â”€ java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â  â””â”€â”€ dev\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â      â””â”€â”€ example\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â          â””â”€â”€ restaurantManager\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”œâ”€â”€ controller\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â”œâ”€â”€ CustomerController.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â””â”€â”€ CustomerWebController.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”œâ”€â”€ model\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â”œâ”€â”€ Booking.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â”œâ”€â”€ Customer.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â”œâ”€â”€ Menu.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â”œâ”€â”€ Order.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â””â”€â”€ Table.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”œâ”€â”€ repository\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â””â”€â”€ CustomerRepository.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”œâ”€â”€ RestaurantManagerApplication.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”œâ”€â”€ service\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â”œâ”€â”€ CustomerServiceImpl.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â”‚Â Â  â””â”€â”€ CustomerService.java\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â              â””â”€â”€ utilities\n",
        "â”‚Â Â  â”‚Â Â  â”‚Â Â                  â””â”€â”€ CustomerDataLoader.java\n",
        "â”‚Â Â  â”‚Â Â  â””â”€â”€ resources\n",
        "â”‚Â Â  â”‚Â Â      â”œâ”€â”€ application-local.properties\n",
        "â”‚Â Â  â”‚Â Â      â”œâ”€â”€ application-memory.properties\n",
        "â”‚Â Â  â”‚Â Â      â”œâ”€â”€ application.properties\n",
        "â”‚Â Â  â”‚Â Â      â”œâ”€â”€ static\n",
        "â”‚Â Â  â”‚Â Â      â””â”€â”€ templates\n",
        "â”‚Â Â  â”‚Â Â          â””â”€â”€ home.html\n",
        "â”‚Â Â  â””â”€â”€ test\n",
        "â”‚Â Â      â””â”€â”€ java\n",
        "â”‚Â Â          â””â”€â”€ dev\n",
        "â”‚Â Â              â””â”€â”€ example\n",
        "â”‚Â Â                  â””â”€â”€ restaurantManager\n",
        "â”‚Â Â                      â”œâ”€â”€ CustomerRepositoryTest.java\n",
        "â”‚Â Â                      â””â”€â”€ RestaurantManagerApplicationTests.java\n",
        "â””â”€â”€ target\n",
        "    â”œâ”€â”€ classes\n",
        "    â”‚Â Â  â”œâ”€â”€ application-local.properties\n",
        "    â”‚Â Â  â”œâ”€â”€ application-memory.properties\n",
        "    â”‚Â Â  â”œâ”€â”€ application.properties\n",
        "    â”‚Â Â  â”œâ”€â”€ dev\n",
        "    â”‚Â Â  â”‚Â Â  â””â”€â”€ example\n",
        "    â”‚Â Â  â”‚Â Â      â””â”€â”€ restaurantManager\n",
        "    â”‚Â Â  â”‚Â Â          â”œâ”€â”€ controller\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â”œâ”€â”€ CustomerController.class\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â””â”€â”€ CustomerWebController.class\n",
        "    â”‚Â Â  â”‚Â Â          â”œâ”€â”€ model\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â”œâ”€â”€ Booking.class\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â”œâ”€â”€ Customer.class\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â”œâ”€â”€ Menu.class\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â”œâ”€â”€ Order.class\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â””â”€â”€ Table.class\n",
        "    â”‚Â Â  â”‚Â Â          â”œâ”€â”€ repository\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â””â”€â”€ CustomerRepository.class\n",
        "    â”‚Â Â  â”‚Â Â          â”œâ”€â”€ RestaurantManagerApplication.class\n",
        "    â”‚Â Â  â”‚Â Â          â”œâ”€â”€ service\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â”œâ”€â”€ CustomerService.class\n",
        "    â”‚Â Â  â”‚Â Â          â”‚Â Â  â””â”€â”€ CustomerServiceImpl.class\n",
        "    â”‚Â Â  â”‚Â Â          â””â”€â”€ utilities\n",
        "    â”‚Â Â  â”‚Â Â              â””â”€â”€ CustomerDataLoader.class\n",
        "    â”‚Â Â  â””â”€â”€ templates\n",
        "    â”‚Â Â      â””â”€â”€ home.html\n",
        "    â”œâ”€â”€ generated-sources\n",
        "    â”‚Â Â  â””â”€â”€ annotations\n",
        "    â”œâ”€â”€ generated-test-sources\n",
        "    â”‚Â Â  â””â”€â”€ test-annotations\n",
        "    â”œâ”€â”€ maven-archiver\n",
        "    â”‚Â Â  â””â”€â”€ pom.properties\n",
        "    â”œâ”€â”€ maven-status\n",
        "    â”‚Â Â  â””â”€â”€ maven-compiler-plugin\n",
        "    â”‚Â Â      â”œâ”€â”€ compile\n",
        "    â”‚Â Â      â”‚Â Â  â””â”€â”€ default-compile\n",
        "    â”‚Â Â      â”‚Â Â      â”œâ”€â”€ createdFiles.lst\n",
        "    â”‚Â Â      â”‚Â Â      â””â”€â”€ inputFiles.lst\n",
        "    â”‚Â Â      â””â”€â”€ testCompile\n",
        "    â”‚Â Â          â””â”€â”€ default-testCompile\n",
        "    â”‚Â Â              â”œâ”€â”€ createdFiles.lst\n",
        "    â”‚Â Â              â””â”€â”€ inputFiles.lst\n",
        "    â”œâ”€â”€ restaurantManager-0.0.1-SNAPSHOT.jar\n",
        "    â”œâ”€â”€ restaurantManager-0.0.1-SNAPSHOT.jar.original\n",
        "    â”œâ”€â”€ surefire-reports\n",
        "    â”‚Â Â  â”œâ”€â”€ dev.example.restaurantManager.RestaurantManagerApplicationTests.txt\n",
        "    â”‚Â Â  â””â”€â”€ TEST-dev.example.restaurantManager.RestaurantManagerApplicationTests.xml\n",
        "    â””â”€â”€ test-classes\n",
        "        â””â”€â”€ dev\n",
        "            â””â”€â”€ example\n",
        "                â””â”€â”€ restaurantManager\n",
        "                    â”œâ”€â”€ CustomerRepositoryTest.class\n",
        "                    â””â”€â”€ RestaurantManagerApplicationTests.class\n",
        "\n",
        "```\n",
        "</details>\n",
        "\n",
        "# Fake customer RestaurantManager\n",
        "\n",
        "## Java Faker\n",
        "\n",
        "**Java Faker** is a library that generates fake data for various purposes such as testing, development, and demonstration.\n",
        "\n",
        "> Java Faker is a tool that <mark>creates realistic-looking fake data</mark>, including names, addresses, phone numbers, and much more.\n",
        "\n",
        "It's useful for:\n",
        "\n",
        "1. Populating databases with test data\n",
        "2. Creating mock objects for unit testing\n",
        "3. Generating sample data for applications\n",
        "4. Prototyping user interfaces\n",
        "\n",
        "The library provides a wide range of pre-defined categories (like name, address, phone number) and methods to generate fake data within those categories. It's easy to use and can generate data in multiple languages and locales.\n",
        "\n",
        "For example, you can create a Faker instance and generate fake data like this:\n",
        "\n",
        "```java\n",
        "Faker faker = new Faker();\n",
        " // Generates a random full name\n",
        "String name = faker.name().fullName();\n",
        "// Generates a random email address\n",
        "String email = faker.internet().emailAddress(); \n",
        "```\n",
        "\n",
        "Dependency for maven:\n",
        "\n",
        "```xml\n",
        "<dependency>\n",
        "    <groupId>com.github.javafaker</groupId>\n",
        "    <artifactId>javafaker</artifactId>\n",
        "    <version>1.0.2</version>\n",
        "</dependency>\n",
        "```\n",
        "\n",
        "## Bean\n",
        "\n",
        "`@Bean` in Spring is:\n",
        "\n",
        "1. A <mark>method-level annotation</mark>\n",
        "2. Used to declare a Spring bean typically used in `@Configuration` classes\n",
        "3. Tells Spring to:\n",
        "  1. manage the object returned by the method\n",
        "  2. and allows you to configure and customize the bean\n",
        "4. [JavaBeans - Wikipedia](https://en.wikipedia.org/wiki/JavaBeans)\n",
        "\n",
        "> `@Bean` in Spring is like telling a toy factory to make a special toy for you. When you use `@Bean`, you are saying,:\n",
        "> \n",
        "> - \"Please create this toy and keep it safe so I can play with it whenever I want.\"\n",
        "> \n",
        "> Just like the factory remembers how to make your favorite toy, Spring remembers how to create and manage the special object you asked for, so you can use it in your game whenever you need it.\n",
        "\n",
        "Example:\n",
        "\n",
        "```java\n",
        "@Configuration\n",
        "public class AppConfig {\n",
        "\n",
        "@Bean\n",
        "public MyService myService() {\n",
        "return new MyService();\n",
        "}\n",
        "}\n",
        "```\n",
        "\n",
        "### Approach #1: @Bean\n",
        "\n",
        "This `CommandLineRunner`does the following:\n",
        "\n",
        "1. It checks if the database is empty by counting the number of customers in the repository.\n",
        "2. If the database is empty, it creates a `new Faker` instance with the US locale.\n",
        "3. It then generates <mark>100 fake customers using Faker to create realistic</mark> `names`, `email` addresses, and` phone numbers`.\n",
        "4. Each customer is assigned a random `UUID` as their ID`.`\n",
        "5. The fake `customers` are saved to the `CustomerRepository`.\n",
        "6. Finally, it prints a message confirming that 100 fake customers have been created and saved.\n",
        "\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "package dev.example.restaurant;\n",
        "\n",
        "import com.github.javafaker.Faker;\n",
        "import dev.example.restaurant.model.Customer;\n",
        "import dev.example.restaurant.repository.CustomerRepository;\n",
        "import org.springframework.boot.CommandLineRunner;\n",
        "import org.springframework.boot.SpringApplication;\n",
        "import org.springframework.boot.autoconfigure.SpringBootApplication;\n",
        "import org.springframework.context.annotation.Bean;\n",
        "\n",
        "import java.util.Locale;\n",
        "import java.util.UUID;\n",
        "\n",
        "@SpringBootApplication\n",
        "public class RestaurantVaadinApplication {\n",
        "\n",
        "    public static void main(String[] args) {\n",
        "        SpringApplication.run(RestaurantVaadinApplication.class, args);\n",
        "    }\n",
        "\n",
        "    @Bean\n",
        "    public CommandLineRunner loadData(CustomerRepository customerRepository) {\n",
        "        return args -> {\n",
        "            // Check if the database is empty\n",
        "            if (customerRepository.count() == 0) {\n",
        "                Faker faker = new Faker(new Locale(\"en-US\"));\n",
        "\n",
        "                // Create and save 100 fake customers\n",
        "                for (int i = 0; i < 100; i++) {\n",
        "                    Customer customer = new Customer(\n",
        "                            UUID.randomUUID().toString(),\n",
        "                            faker.name().fullName(),\n",
        "                            faker.internet().emailAddress(),\n",
        "                            faker.phoneNumber().cellPhone()\n",
        "                    );\n",
        "                    customerRepository.save(customer);\n",
        "                }\n",
        "\n",
        "                System.out.println(\"100 fake customers have been\"\n",
        "                + \" created and saved to the database.\");\n",
        "            }\n",
        "        };\n",
        "    }\n",
        "}\n",
        "```\n",
        ":::\n",
        "\n",
        "### Approach #2 static\n",
        "\n",
        "In this approach:\n",
        "\n",
        "1. We've removed theÂ `@Bean`Â annotation and theÂ `CommandLineRunner`.\n",
        "2. We've added a staticÂ `CustomerRepository`Â field withÂ `@Autowired`Â annotation.\n",
        "3. We've created a `static` methodÂ `createFakeCustomers()`Â that contains the logic for creating and saving fake customers.\n",
        "4. In theÂ `main`Â method, we callÂ `createFakeCustomers()`Â <mark>after the Spring application context is initialized.</mark>\n",
        "\n",
        "> There's an important <mark>caveat</mark> with this approach: using <mark>static fields</mark> withÂ `@Autowired`Â is generally **not recommended in Spring** applications.\n",
        "> \n",
        "> It can lead to issues with testing and violates the principle of dependency injection.\n",
        "> \n",
        "> A better approach would be to use anÂ `ApplicationRunner`Â orÂ `CommandLineRunner`Â <mark>bean, which allows for proper dependency injection. </mark>\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "package dev.example.restaurant;\n",
        "\n",
        "import com.github.javafaker.Faker;\n",
        "import dev.example.restaurant.model.Customer;\n",
        "import dev.example.restaurant.repository.CustomerRepository;\n",
        "import org.springframework.beans.factory.annotation.Autowired;\n",
        "import org.springframework.boot.SpringApplication;\n",
        "import org.springframework.boot.autoconfigure.SpringBootApplication;\n",
        "\n",
        "import java.util.Locale;\n",
        "import java.util.UUID;\n",
        "\n",
        "@SpringBootApplication\n",
        "public class RestaurantVaadinApplication {\n",
        "\n",
        "    @Autowired\n",
        "    private static CustomerRepository customerRepository;\n",
        "\n",
        "    public static void main(String[] args) {\n",
        "        SpringApplication.run(RestaurantVaadinApplication.class, args);\n",
        "        createFakeCustomers();\n",
        "    }\n",
        "\n",
        "    public static void createFakeCustomers() {\n",
        "        // Check if the database is empty\n",
        "        if (customerRepository.count() == 0) {\n",
        "            Faker faker = new Faker(new Locale(\"en-US\"));\n",
        "\n",
        "            // Create and save 100 fake customers\n",
        "            for (int i = 0; i < 100; i++) {\n",
        "                Customer customer = new Customer(\n",
        "                        UUID.randomUUID().toString(),\n",
        "                        faker.name().fullName(),\n",
        "                        faker.internet().emailAddress(),\n",
        "                        faker.phoneNumber().cellPhone()\n",
        "                );\n",
        "                customerRepository.save(customer);\n",
        "            }\n",
        "\n",
        "            System.out.println(\"100 fake customers have been\"\n",
        "            + \" created and saved to the database.\");\n",
        "        }\n",
        "    }\n",
        "}\n",
        "```\n",
        ":::\n",
        "\n",
        "### Approach #3\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "package dev.example.restaurant;\n",
        "\n",
        "import com.github.javafaker.Faker;\n",
        "import dev.example.restaurant.model.Customer;\n",
        "import dev.example.restaurant.repository.CustomerRepository;\n",
        "import org.springframework.beans.factory.annotation.Autowired;\n",
        "import org.springframework.boot.ApplicationRunner;\n",
        "import org.springframework.boot.SpringApplication;\n",
        "import org.springframework.boot.autoconfigure.SpringBootApplication;\n",
        "import org.springframework.context.annotation.Bean;\n",
        "\n",
        "import java.util.Locale;\n",
        "import java.util.UUID;\n",
        "\n",
        "@SpringBootApplication\n",
        "public class RestaurantVaadinApplication {\n",
        "\n",
        "    public static void main(String[] args) {\n",
        "        SpringApplication.run(RestaurantVaadinApplication.class, args);\n",
        "    }\n",
        "\n",
        "    @Bean\n",
        "    public ApplicationRunner dataLoader(CustomerRepository customerRepository) {\n",
        "        return args -> createFakeCustomers(customerRepository);\n",
        "    }\n",
        "\n",
        "    private void createFakeCustomers(CustomerRepository customerRepository) {\n",
        "        // Check if the database is empty\n",
        "        if (customerRepository.count() == 0) {\n",
        "            Faker faker = new Faker(new Locale(\"en-US\"));\n",
        "\n",
        "            // Create and save 100 fake customers\n",
        "            for (int i = 0; i < 100; i++) {\n",
        "                Customer customer = new Customer(\n",
        "                        UUID.randomUUID().toString(),\n",
        "                        faker.name().fullName(),\n",
        "                        faker.internet().emailAddress(),\n",
        "                        faker.phoneNumber().cellPhone()\n",
        "                );\n",
        "                customerRepository.save(customer);\n",
        "            }\n",
        "\n",
        "            System.out.println(\"100 fake customers have been created\"\n",
        "            + \" and saved to the database.\");\n",
        "        }\n",
        "    }\n",
        "}\n",
        "```\n",
        ":::\n",
        "\n",
        "\n",
        "This approach **maintains proper dependency injection** and is more in line with Spring best practices for a few key reasons:\n",
        "\n",
        "1. **Proper dependency injection**: By using an `ApplicationRunner` bean, we allow Spring to manage the lifecycle and injection of dependencies. The CustomerRepository is properly injected by Spring, rather than being accessed statically.\n",
        "2. **Separation of concerns**: The data loading logic is separated from the main application class, improving modularity and maintainability.\n",
        "3. **Testability**: This approach makes it easier to unit test the data loading logic in isolation, as dependencies can be easily mocked.\n",
        "4. **Constructor injection**: By passing the CustomerRepository as a parameter to the ApplicationRunner, we're using constructor injection, which is considered a best practice in Spring.\n",
        "5. **Avoiding static dependencies**: Static `@Autowired` fields are generally discouraged as they can lead to issues with testing and violate dependency injection principles.\n",
        "6. **Flexibility**: This approach allows for easier configuration and potential customization of when and how the data loading occurs.\n",
        "7. **Alignment with Spring lifecycle**: Using `ApplicationRunner` ensures the data loading happens at the appropriate time during application startup, after the Spring context is fully initialized.\n",
        "\n",
        "By following these practices, the code becomes more <mark>maintainable, testable, and aligned with Spring's dependency injection principles</mark>.\n",
        "\n",
        "# H2 DB\n",
        "\n",
        "## H2 in RestaurantManager in memory\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-1-h2.png)\n",
        "\n",
        "## Install and create a H2 DB\n",
        "\n",
        "References:\n",
        "\n",
        "- [Spring Boot: H2 DB and Thymeleaf](/springboot/boot-what-create-th-h2.qmd)\n",
        "- [Spring Boot: Rest](/springboot/boot-concepts-rest.qmd)\n",
        "\n",
        "\n",
        "Step-by-step:\n",
        "\n",
        "- Download and install `Java JDK` from the official `Oracle` website.\n",
        "- Download and install Spring Boot from the official `Spring` website.\n",
        "- Download the `H2` database from the official `H2` website.\n",
        "- Extract the downloaded file to a location on your `Linux` machine.\n",
        "- Execute `H2` Desktop app and create a local `H2 DB`.\n",
        "\n",
        "![Create a H2 DB](/images/springboot/LibraryManagementRest-H2-1.png){width=\"60%\"}\n",
        "\n",
        "- [Creation H2 DB step-by-step](/springboot/boot-what-create-th-h2.qmd#h2-db-creation-step-by-step)\n",
        "\n",
        "### H2 local DB creation using CLI\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-3-h2-console.png)\n",
        "\n",
        "\n",
        "Prerequisites:\n",
        "\n",
        "- Java Runtime Environment (JRE) installed\n",
        "- H2 database JAR file downloaded\n",
        "\n",
        "\n",
        "\n",
        "**Download H2 Database**\n",
        "\n",
        "   - Visit the official H2 database website: [https://www.h2database.com](https://www.h2database.com)\n",
        "   - Download the latest version of H2\n",
        "\n",
        "**Extract the H2 JAR File**\n",
        "\n",
        "   - Unzip the downloaded file\n",
        "   - Locate the `h2-x.x.x.jar` file (where x.x.x is the version number)\n",
        "\n",
        "**Open Command Prompt or Terminal**\n",
        "\n",
        "   - Navigate to the directory containing the H2 JAR file\n",
        "\n",
        "**Start H2 Console**\n",
        "\n",
        "   - Run the following command:\n",
        "     ```\n",
        "     java -cp h2-x.x.x.jar org.h2.tools.Console\n",
        "     ```\n",
        "   - Replace `x.x.x` with your actual H2 version number\n",
        "\n",
        "**Connect to the Database**\n",
        "\n",
        "   - In the H2 Console, use the following settings:\n",
        "     - Driver Class: `org.h2.Driver`\n",
        "     - JDBC URL: `jdbc:h2:~/test` (creates a 'test' database in your home directory)\n",
        "     - User Name: `sa` (default)\n",
        "     - Password: (leave blank for default)\n",
        "\n",
        "**Create Tables and Data**\n",
        "\n",
        "   - Use SQL commands to create tables and insert data, for example:\n",
        "  \n",
        "     ```sql\n",
        "     CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(50));\n",
        "     INSERT INTO users VALUES (1, 'John Doe');\n",
        "     ```\n",
        "\n",
        "**Accessing the Database via CLI**\n",
        "\n",
        "   - To access the database directly from the command line:\n",
        "     ```\n",
        "     java -cp h2-x.x.x.jar org.h2.tools.Shell\n",
        "     ```\n",
        "   - Follow the prompts to connect to your database\n",
        "\n",
        "**Stopping the Database**\n",
        "\n",
        "   - Close the H2 Console window\n",
        "   - Or, if running in background, find the Java process and terminate it\n",
        "\n",
        "Remember to replace `x.x.x` with the actual version number of your H2 JAR file in all commands.\n",
        "\n",
        "## Configuring H2 Database in Spring Boot with DDL Auto-generation\n",
        "\n",
        "Dependencies\n",
        "\n",
        "First, ensure you have the necessary dependencies in your `pom.xml` (for Maven) or `build.gradle` (for Gradle):\n",
        "\n",
        "::: {.column-page-right}\n",
        "``` xml\n",
        "<dependency>\n",
        "    <groupId>org.springframework.boot</groupId>\n",
        "    <artifactId>spring-boot-starter-data-jpa</artifactId>\n",
        "</dependency>\n",
        "<dependency>\n",
        "    <groupId>com.h2database</groupId>\n",
        "    <artifactId>h2</artifactId>\n",
        "    <scope>runtime</scope>\n",
        "</dependency>\n",
        "```\n",
        ":::\n",
        "\n",
        "`application Properties`\n",
        "\n",
        "In your `application.properties` file, add the following configurations:\n",
        "\n",
        "\n",
        "::: {.column-page-right}\n",
        "``` yml\n",
        "\n",
        "# H2 Database Configuration\n",
        "spring.datasource.url=jdbc:h2:mem:testdb\n",
        "spring.datasource.driverClassName=org.h2.Driver\n",
        "spring.datasource.username=sa\n",
        "spring.datasource.password=\n",
        "\n",
        "# H2 Console Configuration (optional)\n",
        "spring.h2.console.enabled=true\n",
        "spring.h2.console.path=/h2-console\n",
        "\n",
        "# JPA and Hibernate Configuration\n",
        "spring.jpa.database-platform=org.hibernate.dialect.H2Dialect\n",
        "spring.jpa.hibernate.ddl-auto=update\n",
        "spring.jpa.show-sql=true\n",
        "```\n",
        ":::\n",
        "\n",
        "\n",
        "**Explanation of Properties**\n",
        "\n",
        "- `spring.datasource.url`: Specifies the JDBC URL for H2. `jdbc:h2:mem:testdb` creates an in-memory database named \"testdb\".\n",
        "- `spring.datasource.driverClassName`: Specifies the H2 driver class.\n",
        "- `spring.datasource.username` and `spring.datasource.password`: Set the database credentials.\n",
        "- `spring.h2.console.enabled`: Enables the H2 web console for database management.\n",
        "- `spring.h2.console.path`: Sets the path to access the H2 console.\n",
        "- `spring.jpa.database-platform`: Specifies the Hibernate dialect for H2.\n",
        "- `spring.jpa.hibernate.ddl-auto=update`: This is the key property for DDL auto-generation. It tells Hibernate to automatically create or update the database schema based on your entity classes.\n",
        "- `spring.jpa.show-sql=true`: Enables logging of SQL statements.\n",
        "\n",
        "**DDL Auto-generation Options**\n",
        "\n",
        "The `spring.jpa.hibernate.ddl-auto` property can have the following values:\n",
        "\n",
        "- `create`: Drops and creates the schema at application startup.\n",
        "- `create-drop`: Creates the schema at startup and drops it at shutdown.\n",
        "- `update`: Updates the schema if necessary (recommended for development).\n",
        "- `validate`: Validates the schema but makes no changes.\n",
        "- `none`: Disables DDL handling.\n",
        "\n",
        "`Entity` Classes\n",
        "\n",
        "Create your entity classes with JPA annotations. Hibernate will use these to generate the DDL:\n",
        "\n",
        "```java\n",
        "@Entity\n",
        "public class User {\n",
        "    @Id\n",
        "    @GeneratedValue(strategy = GenerationType.IDENTITY)\n",
        "    private Long id;\n",
        "    \n",
        "    private String name;\n",
        "    \n",
        "    // getters, setters, constructors\n",
        "}\n",
        "```\n",
        "\n",
        "**Accessing the Database**\n",
        "\n",
        "- The H2 console will be available at `http://localhost:8080/h2-console` (assuming default port).\n",
        "- Use the JDBC URL, username, and password specified in your properties to connect.\n",
        "\n",
        "Remember to use `update` or `create-drop` carefully in production environments to avoid data loss.\n",
        "\n",
        "# API Rest & Swagger\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-1-rest-customer.png)\n",
        "\n",
        "- [API rest](/devops/devops-network-rest.qmd){.external target='_blank'}\n",
        "\n",
        "## What is Swagger\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-1-swagger.png)\n",
        "\n",
        "> Swagger is an open-source set of tools for designing, building, documenting, and consuming RESTful web services. It provides a standardized way to describe APIs using JSON or YAML, making it easier for both humans and machines to understand the capabilities of a service without accessing its source code.\n",
        "\n",
        "**Key Components**\n",
        "\n",
        "1. **Swagger Specification**: A format for describing RESTful APIs.\n",
        "2. **Swagger UI**: A web-based UI for exploring and testing APIs.\n",
        "3. **Swagger Codegen**: A tool for generating client libraries and server stubs.\n",
        "\n",
        "**Benefits**\n",
        "\n",
        "- Improves `API` **documentation**\n",
        "- Enables interactive API exploration\n",
        "- Facilitates API-first development\n",
        "- Supports automatic code generation\n",
        "- Enhances collaboration between frontend and backend teams\n",
        "\n",
        "Can be easily integrated with various frameworks, including `Spring Boot`, through libraries like `SpringFox` or `SpringDoc` `OpenAPI`.\n",
        "\n",
        "**Usage**\n",
        "\n",
        "1. Define `API` specifications\n",
        "2. Generate interactive documentation\n",
        "3. Test `API` endpoints directly from the UI\n",
        "4. Generate client SDKs or server stubs\n",
        "\n",
        "`Swagger` (now part of the `OpenAPI` Initiative) has become a de facto standard for `RESTful` API documentation and development.\n",
        "\n",
        "## Maven Dependency\n",
        "\n",
        "Add the `SpringDoc` `OpenAPI` dependency to your `pom.xml` (for `Maven`):\n",
        "\n",
        "```xml\n",
        "<dependency>\n",
        "    <groupId>org.springdoc</groupId>\n",
        "    <artifactId>\n",
        "    springdoc-openapi-starter-webmvc-ui\n",
        "    </artifactId>\n",
        "    <version>2.1.0</version>\n",
        "</dependency>\n",
        "```\n",
        "\n",
        "## Configure in Spring Boot\n",
        "\n",
        "Configure SpringDoc OpenAPI in your `application.properties` or `application.yml`:\n",
        "\n",
        "```yaml\n",
        "springdoc.api-docs.path=/api-docs\n",
        "springdoc.swagger-ui.path=/swagger-ui.html\n",
        "```\n",
        "\n",
        "## Annotate (optional)\n",
        "\n",
        "Annotate your REST controllers and methods with OpenAPI annotations to provide more details:\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "import io.swagger.v3.oas.annotations.Operation;\n",
        "import io.swagger.v3.oas.annotations.Parameter;\n",
        "import io.swagger.v3.oas.annotations.responses.ApiResponse;\n",
        "import io.swagger.v3.oas.annotations.tags.Tag;\n",
        "\n",
        "@RestController\n",
        "@RequestMapping(\"/api\")\n",
        "@Tag(name = \"Example API\", description = \"API for example operations\")\n",
        "public class ExampleController {\n",
        "\n",
        "    @GetMapping(\"/hello\")\n",
        "    @Operation(summary = \"Say hello\", description = \"Returns a greeting message\")\n",
        "    @ApiResponse(responseCode = \"200\", description = \"Successful response\")\n",
        "    public String hello(@Parameter(description = \"Name to greet\") \n",
        "                        @RequestParam(required = false) String name) {\n",
        "        return \"Hello, \" + (name != null ? name : \"World\") + \"!\";\n",
        "    }\n",
        "}\n",
        "```\n",
        ":::\n",
        "\n",
        "## Open url browser\n",
        "\n",
        "Run your `Spring Boot` application and access the `Swagger UI` at:\n",
        "\n",
        "`http://localhost:8080/swagger-ui.html`\n",
        "\n",
        "Understanding ResponseEntity in Spring\n",
        "\n",
        "# `ResponseEntity`\n",
        "\n",
        "`ResponseEntity` is a class in `Spring Framework` that represents the entire `HTTP` response. It allows you to control the following aspects of the `HTTP` response:\n",
        "\n",
        "- Status code\n",
        "- Headers\n",
        "- Body\n",
        "\n",
        "![custom response using springboot  Medium](https://miro.medium.com/v2/resize:fit:1400/1*Z0XmoMjwiC61rdAROwZZ1A.jpeg){width=50%}\n",
        "\n",
        "## Key Features\n",
        "\n",
        "1. **Flexibility**: You can customize every part of the `HTTP` response.\n",
        "2. **Type Safety**: It uses generics to ensure type safety of the response body.\n",
        "3. **Convenience Methods**: It provides static methods for quickly creating responses.\n",
        "\n",
        "In `Java Spring Boot`, when you use `ResponseEntity<>()` with just the name of a class, it's typically referred to as a \"parameterized type\" or \"generic type.\"\n",
        "\n",
        "More specifically, this syntax is using a **generic type parameter**. The class name inside the angle brackets `<>` specifies the type of data that the `ResponseEntity` will contain.\n",
        "\n",
        "For example:\n",
        "\n",
        "```java\n",
        "ResponseEntity<User>\n",
        "```\n",
        "\n",
        "This declares a `ResponseEntity` that will contain a `User` object.\n",
        "\n",
        "```java\n",
        "ResponseEntity<List<Product>>\n",
        "```\n",
        "\n",
        "This declares a `ResponseEntity` that will contain a `List` of `Product` objects.\n",
        "\n",
        "The use of these <mark>parameterized types allows for type safety and helps the compiler ensure that you're working with the correct types of objects</mark> when you're handling the response.\n",
        "\n",
        "\n",
        "## Basic Usage\n",
        "\n",
        "![ResponseEntity in Spring Framework](https://cdn.hashnode.com/res/hashnode/image/upload/v1701526522110/2c2b7ee3-2e37-4d9a-ab10-b647fc751d7b.png?auto=compress,format&format=webp){width=\"60%\"}\n",
        "\n",
        "Here's a simple example of how to use `ResponseEntity`:\n",
        "\n",
        "\n",
        "```java\n",
        "@GetMapping(\"/example\")\n",
        "public ResponseEntity<String> example() {\n",
        "    return ResponseEntity.ok(\"Hello, World!\");\n",
        "}\n",
        "```\n",
        "\n",
        "## Advanced Usage\n",
        "\n",
        "You can set custom status codes, headers, and body:\n",
        "\n",
        "```java\n",
        "@GetMapping(\"/advanced\")\n",
        "public ResponseEntity<MyObject> advanced() {\n",
        "    MyObject body = new MyObject(\"data\");\n",
        "    return ResponseEntity\n",
        "        .status(HttpStatus.CREATED)\n",
        "        .header(\"Custom-Header\", \"value\")\n",
        "        .body(body);\n",
        "}\n",
        "```\n",
        "\n",
        "## Useful Links\n",
        "\n",
        "- [Official Spring Documentation on ResponseEntity](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html)\n",
        "- [Spring.io Guide on Building REST services](https://spring.io/guides/tutorials/rest/)\n",
        "\n",
        "## When to Use ResponseEntity\n",
        "\n",
        "Use `ResponseEntity` when you need fine-grained control over the HTTP response, such as:\n",
        "\n",
        "- Setting custom status codes\n",
        "- Adding or modifying response headers\n",
        "- Conditionally returning different status codes based on some logic\n",
        "- Creating responses with no body (like for DELETE operations)\n",
        "\n",
        "By using `ResponseEntity`, you can create more flexible and powerful RESTful APIs in your Spring applications.\n",
        "\n",
        "## CustomerController\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "import org.springframework.http.HttpStatus;\n",
        "import org.springframework.http.ResponseEntity;\n",
        "import org.springframework.web.bind.annotation.*;\n",
        "import io.swagger.annotations.*;\n",
        "\n",
        "    @RestController\n",
        "    @RequestMapping(\"/api/customers\")\n",
        "    @Api(value = \"Customer Management System\", \n",
        "            description = \"Operations pertaining to customers in the Customer Management System\")\n",
        "    public class CustomerController {\n",
        "\n",
        "        private final CustomerService customerService;\n",
        "\n",
        "        public CustomerController(CustomerService customerService) {\n",
        "            this.customerService = customerService;\n",
        "        }\n",
        "\n",
        "        @ApiOperation(value = \"View a list of available customers\", response = List.class)\n",
        "        @ApiResponses(value = {\n",
        "                @ApiResponse(code = 200, message = \"Successfully retrieved list\"),\n",
        "                @ApiResponse(code = 404, message = \"The resource you were trying to reach is not found\")\n",
        "        })\n",
        "        @GetMapping(\"/allCustomers\")\n",
        "        public ResponseEntity<List<Customer>> getAllCustomers() {\n",
        "            List<Customer> customers = customerService.getAllCustomers();\n",
        "            return new ResponseEntity<>(customers, HttpStatus.OK);\n",
        "        }\n",
        "\n",
        "        @ApiOperation(value = \"Add a new customer\")\n",
        "        @PostMapping\n",
        "        public ResponseEntity<Customer> createCustomer(\n",
        "                @ApiParam(value = \"Customer object store in database table\", \n",
        "                            required = true)\n",
        "                @RequestBody Customer customer) {\n",
        "            Customer createdCustomer = customerService.createCustomer(customer);\n",
        "            return new ResponseEntity<>(createdCustomer, HttpStatus.CREATED);\n",
        "        }\n",
        "\n",
        "        @ApiOperation(value = \"Get a customer by Id\")\n",
        "        @GetMapping(\"/{id}\")\n",
        "        public ResponseEntity<Customer> getCustomerById(\n",
        "                @ApiParam(value = \"Customer id from which customer object will retrieve\",\n",
        "                            required = true)\n",
        "                @PathVariable String id) {\n",
        "            Customer customer = customerService.getCustomerById(id);\n",
        "            return customer != null\n",
        "                    ? new ResponseEntity<>(customer, HttpStatus.OK)\n",
        "                    : new ResponseEntity<>(HttpStatus.NOT_FOUND);\n",
        "        }\n",
        "\n",
        "        @ApiOperation(value = \"Update a customer\")\n",
        "        @PutMapping(\"/{id}\")\n",
        "        public ResponseEntity<Customer> updateCustomer(\n",
        "                @ApiParam(value = \"ID of the customer to be updated\", required = true)\n",
        "                @PathVariable String id,\n",
        "                @ApiParam(value = \"Updated customer object\", required = true)\n",
        "                @RequestBody Customer customerDetails) {\n",
        "            Customer updatedCustomer = customerService.updateCustomer(id, customerDetails);\n",
        "            return updatedCustomer != null\n",
        "                    ? new ResponseEntity<>(updatedCustomer, HttpStatus.OK)\n",
        "                    : new ResponseEntity<>(HttpStatus.NOT_FOUND);\n",
        "        }\n",
        "\n",
        "        @ApiOperation(value = \"Delete a customer\")\n",
        "        @DeleteMapping(\"/{id}\")\n",
        "        public ResponseEntity<Void> deleteCustomer(\n",
        "                @ApiParam(value = \"Customer Id from which customer \n",
        "                                    object will be deleted from database table\", \n",
        "                          required = true)\n",
        "                @PathVariable String id) {\n",
        "            customerService.deleteCustomer(id);\n",
        "            return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n",
        "        }\n",
        "    }\n",
        "```\n",
        ":::\n",
        "\n",
        "\n",
        "# Service and Repository\n",
        "\n",
        "- [Spring Data](/springboot/boot-concepts-data.qmd)\n",
        "- [RestaurantManager customerService](https://github.com/AlbertProfe/restaurantManager/tree/319b94239321dde826d78b7cbe00e29895065b53/src/main/java/dev/example/restaurantManager/service){.external target='_blank'}\n",
        "\n",
        "## `CustomerService` interface and implementation\n",
        "\n",
        "\n",
        "> Why Use `Interfaces` for Services in Spring Boot? Because using `interfaces` for services in Spring Boot is a best practice that offers several advantages from `Loose Coupling` to having a **clear contract**.\n",
        "\n",
        "**Loose Coupling**\n",
        "\n",
        "`Interfaces` promote `loose coupling between components`. The code that depends on the service only knows about the `interface`, not the implementation. This makes it easier to change the implementation without affecting the rest of the application.\n",
        "\n",
        "**Easier Testing**\n",
        "\n",
        "Interfaces facilitate easier unit testing through mocking. You can create mock implementations of the interface for testing purposes, allowing you to isolate the component under test.\n",
        "\n",
        "**Multiple Implementations**\n",
        "\n",
        "`Interfaces` allow for multiple implementations of the same service. This is useful when you need different implementations for different scenarios (e.g., production vs. testing, or different business logic for different clients).\n",
        "\n",
        "**Dependency Injection**\n",
        "\n",
        "`Spring's dependency injection` works well with `interfaces`. You can easily switch implementations by changing the configuration, without modifying the code that uses the service.\n",
        "\n",
        "**Clear Contract**\n",
        "\n",
        "`Interfaces` <mark>serve as a clear contract for what operations a service provides</mark>. This improves <mark>code readability and helps in understanding the system's architecture</mark>.\n",
        "\n",
        "**Aspect-Oriented Programming (AOP)**\n",
        "\n",
        "Spring's AOP features work more smoothly with interfaces, allowing you to add cross-cutting concerns like logging or transaction management more easily.\n",
        "\n",
        "**Design by Contract**\n",
        "\n",
        "`Interfaces` encourage \"`design by contract`\" principles, <mark>where you define what a service does rather than how it does it</mark>, leading to more robust and maintainable code.\n",
        "\n",
        "### `CustomerService`\n",
        "\n",
        "```java\n",
        "package dev.example.restaurantManager.service;\n",
        "\n",
        "import dev.example.restaurantManager.model.Customer;\n",
        "import java.util.List;\n",
        "\n",
        "public interface CustomerService {\n",
        "    List<Customer> getAllCustomers();\n",
        "    Customer createCustomer(Customer customer);\n",
        "    Customer getCustomerById(String id);\n",
        "    Customer updateCustomer(String id, Customer customerDetails);\n",
        "    boolean deleteCustomer(String id);\n",
        "    long countCustomers();\n",
        "}\n",
        "```\n",
        "\n",
        "> By using this interface, you define a clear contract for customer-related operations.\n",
        "\n",
        "## Two impplementations\n",
        "\n",
        "\n",
        "Two very different implementations of the `CustomerService` interface:\n",
        "\n",
        "- One will be a standard implementation using a database,\n",
        "- and the other will be an in-memory implementation for testing or prototyping purposes.\n",
        "\n",
        "### Implementation 1: Database-backed CustomerService\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "package dev.example.restaurantManager.service;\n",
        "\n",
        "import dev.example.restaurantManager.model.Customer;\n",
        "import dev.example.restaurantManager.repository.CustomerRepository;\n",
        "import org.springframework.beans.factory.annotation.Autowired;\n",
        "import org.springframework.stereotype.Service;\n",
        "import java.util.List;\n",
        "import java.util.Optional;\n",
        "\n",
        "@Service\n",
        "public class DatabaseCustomerService implements CustomerService {\n",
        "\n",
        "    @Autowired\n",
        "    private CustomerRepository customerRepository;\n",
        "\n",
        "    @Override\n",
        "    public List<Customer> getAllCustomers() {\n",
        "        return customerRepository.findAll();\n",
        "    }\n",
        "\n",
        "    @Override\n",
        "    public Customer createCustomer(Customer customer) {\n",
        "        return customerRepository.save(customer);\n",
        "    }\n",
        "\n",
        "    @Override\n",
        "    public Customer getCustomerById(String id) {\n",
        "        Optional<Customer> customer = customerRepository.findById(id);\n",
        "        return \n",
        "        customer.orElseThrow(() -> new RuntimeException(\"Customer not found\"));\n",
        "    }\n",
        "\n",
        "    @Override\n",
        "    public Customer updateCustomer(String id, Customer customerDetails) {\n",
        "        Customer customer = getCustomerById(id);\n",
        "        customer.setName(customerDetails.getName());\n",
        "        customer.setEmail(customerDetails.getEmail());\n",
        "        // Update other fields as necessary\n",
        "        return customerRepository.save(customer);\n",
        "    }\n",
        "\n",
        "    @Override\n",
        "    public boolean deleteCustomer(String id) {\n",
        "        if (customerRepository.existsById(id)) {\n",
        "            customerRepository.deleteById(id);\n",
        "            return true;\n",
        "        }\n",
        "        return false;\n",
        "    }\n",
        "}\n",
        "```\n",
        ":::\n",
        "\n",
        "\n",
        "### Implementation 2: In-Memory CustomerService\n",
        "\n",
        "::: {.column-page-right}\n",
        "\n",
        "```java\n",
        "package dev.example.restaurantManager.service;\n",
        "\n",
        "import dev.example.restaurantManager.model.Customer;\n",
        "import org.springframework.stereotype.Service;\n",
        "import java.util.*;\n",
        "import java.util.concurrent.ConcurrentHashMap;\n",
        "import java.util.stream.Collectors;\n",
        "\n",
        "@Service\n",
        "public class InMemoryCustomerService implements CustomerService {\n",
        "\n",
        "    private final Map<String, Customer> customerStore = new ConcurrentHashMap<>();\n",
        "\n",
        "    @Override\n",
        "    public List<Customer> getAllCustomers() {\n",
        "        return new ArrayList<>(customerStore.values());\n",
        "    }\n",
        "\n",
        "    @Override\n",
        "    public Customer createCustomer(Customer customer) {\n",
        "        String id = UUID.randomUUID().toString();\n",
        "        customer.setId(id);\n",
        "        customerStore.put(id, customer);\n",
        "        return customer;\n",
        "    }\n",
        "\n",
        "    @Override\n",
        "    public Customer getCustomerById(String id) {\n",
        "        Customer customer = customerStore.get(id);\n",
        "        if (customer == null) {\n",
        "            throw new RuntimeException(\"Customer not found\");\n",
        "        }\n",
        "        return customer;\n",
        "    }\n",
        "\n",
        "    @Override\n",
        "    public Customer updateCustomer(String id, Customer customerDetails) {\n",
        "        if (!customerStore.containsKey(id)) {\n",
        "            throw new RuntimeException(\"Customer not found\");\n",
        "        }\n",
        "        customerDetails.setId(id);\n",
        "        customerStore.put(id, customerDetails);\n",
        "        return customerDetails;\n",
        "    }\n",
        "\n",
        "    @Override\n",
        "    public boolean deleteCustomer(String id) {\n",
        "        return customerStore.remove(id) != null;\n",
        "    }\n",
        "\n",
        "    // Additional methods for demonstration\n",
        "    public List<Customer> searchCustomersByName(String name) {\n",
        "        return customerStore.values().stream()\n",
        "                .filter(customer -> customer.getName().toLowerCase().contains(name.toLowerCase()))\n",
        "                .collect(Collectors.toList());\n",
        "    }\n",
        "\n",
        "    public void clearAllCustomers() {\n",
        "        customerStore.clear();\n",
        "    }\n",
        "}\n",
        "```\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "These two implementations showcase different approaches:\n",
        "\n",
        "1. **DatabaseCustomerService**: This implementation uses a CustomerRepository, likely backed by a database. It's suitable for production environments where data persistence is required.\n",
        "\n",
        "2. **InMemoryCustomerService**: This implementation stores customers in a ConcurrentHashMap. It's useful for testing, prototyping, or scenarios where a lightweight, non-persistent solution is needed.\n",
        "\n",
        "Both implementations adhere to the CustomerService interface, demonstrating how the same contract can be fulfilled in very different ways. This flexibility is one of the key advantages of using interfaces in Spring Boot services.\n",
        "\n",
        "# Spring Boot JPA Query Methods\n",
        "\n",
        "`Spring Boot and JPA` offer several ways to create queries. Here are the <mark>four most relevant methods:</mark>\n",
        "\n",
        "1. JPA Derived Query Methods\n",
        "2. @Query Annotation\n",
        "3. EntityManager with JPQL\n",
        "4. Native SQL Queries\n",
        "\n",
        "## 1. JPA Derived Query Methods\n",
        "\n",
        "`Spring Data JPA` can automatically create queries <mark>based on method names in your repository interface.</mark>\n",
        "\n",
        "```java\n",
        "public interface UserRepository \n",
        "        extends JpaRepository<User, Long> {\n",
        "    List<User> findByLastNameAndAge(String lastName, int age);\n",
        "}\n",
        "```\n",
        "\n",
        "## 2. @Query Annotation\n",
        "\n",
        "You can use the `@Query` annotation to define <mark>custom JPQL queries.</mark>\n",
        "\n",
        "```java\n",
        "public interface UserRepository \n",
        "        extends JpaRepository<User, Long> {\n",
        "    @Query(\"SELECT u FROM User u WHERE u.emailAddress = ?1\")\n",
        "    User findByEmailAddress(String emailAddress);\n",
        "}\n",
        "```\n",
        "\n",
        "## 3. EntityManager with JPQL\n",
        "\n",
        "For more complex queries, you can use the `EntityManager` directly with <mark>JPQL.</mark>\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "@PersistenceContext\n",
        "private EntityManager entityManager;\n",
        "\n",
        "public List<User> findUsersByAgeRange(int minAge, int maxAge) {\n",
        "    String jpql = \"SELECT u FROM User u WHERE u.age BETWEEN :minAge AND :maxAge\";\n",
        "    return entityManager.createQuery(jpql, User.class)\n",
        "            .setParameter(\"minAge\", minAge)\n",
        "            .setParameter(\"maxAge\", maxAge)\n",
        "            .getResultList();\n",
        "}\n",
        "```\n",
        ":::\n",
        "\n",
        "## 4. Native SQL Queries\n",
        "\n",
        "When you need to use database-specific features, you can write <mark>native SQL queries.</mark>\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "public interface UserRepository extends JpaRepository<User, Long> {\n",
        "    @Query(value = \"SELECT * FROM users WHERE status = ?1\", nativeQuery = true)\n",
        "    List<User> findUsersByStatus(int status);\n",
        "}\n",
        "```\n",
        ":::\n",
        "\n",
        "## JPQL (Java Persistence Query Language)\n",
        "\n",
        "JPQL (Java Persistence Query Language) is an object-oriented query language used to define queries for entities and their relationships in JPA (Java Persistence API). It's similar to SQL but operates on JPA entity objects rather than database tables.\n",
        "\n",
        "### Key Characteristics of JPQL\n",
        "\n",
        "1. Object-Oriented: Works with Java objects and their properties, not database tables and columns.\n",
        "2. Database-Independent: Queries can work across different database systems without modification.\n",
        "3. Supports JPA Relationships: Can easily navigate entity relationships.\n",
        "4. Powerful: Supports complex operations like joins, aggregations, and subqueries.\n",
        "\n",
        "### JPQL vs SQL\n",
        "\n",
        "Here's a comparison between JPQL and SQL:\n",
        "\n",
        "| Aspect | JPQL | SQL |\n",
        "| --- | --- | --- |\n",
        "| Operates on | Entity objects | Database tables |\n",
        "| Case sensitivity | Case-sensitive | Generally case-insensitive |\n",
        "| Portability | Database-independent | May contain database-specific syntax |\n",
        "| Join syntax | Simplified using relationships | Requires explicit join conditions |\n",
        "\n",
        "### JPQL Syntax Examples\n",
        "\n",
        "1. Basic Select Query:\n",
        "\n",
        "```jpql\n",
        "SELECT u FROM User u WHERE u.age > 18\n",
        "```\n",
        "\n",
        "2. Join Query:\n",
        "\n",
        "```jpql\n",
        "SELECT o FROM Order o JOIN o.customer c WHERE c.country = 'USA'\n",
        "```\n",
        "\n",
        "3. Aggregate Function:\n",
        "\n",
        "```jpql\n",
        "SELECT AVG(e.salary) FROM Employee e WHERE e.department.name = 'IT'\n",
        "```\n",
        "\n",
        "4. Subquery:\n",
        "\n",
        "```jpql\n",
        "SELECT e FROM Employee e WHERE e.salary > (SELECT AVG(emp.salary) FROM Employee emp)\n",
        "```\n",
        "\n",
        "### Using JPQL in Spring Data JPA\n",
        "\n",
        "1. With `@Query` annotation:\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "@Query(\"SELECT u FROM User u WHERE u.email = ?1 AND u.active = true\")\n",
        "User findActiveUserByEmail(String email);\n",
        "```\n",
        ":::\n",
        "\n",
        "1. With `EntityManager`:\n",
        "\n",
        "::: {.column-page-right}\n",
        "```java\n",
        "String jpql = \"SELECT p FROM Product p WHERE p.category.name = :categoryName\";\n",
        "List<Product> products = entityManager.createQuery(jpql, Product.class)\n",
        "    .setParameter(\"categoryName\", \"Electronics\")\n",
        "    .getResultList();\n",
        "```\n",
        ":::\n",
        "\n",
        "### Benefits of JPQL\n",
        "\n",
        "1. Type-safety: Works with Java types, reducing runtime errors.\n",
        "2. Abstraction: Shields developers from database-specific details.\n",
        "3. Optimization: JPA providers can optimize JPQL queries for better performance.\n",
        "4. Flexibility: Allows for complex queries while maintaining database independence.\n",
        "\n",
        "## Additional Resources\n",
        "\n",
        "### JPQL\n",
        "\n",
        "- [JPQL - Java Persistence Query Language](https://docs.oracle.com/javaee/6/tutorial/doc/bnbtg.html){.external target='_blank'} </br>\n",
        "- [JPA Query Language](https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm){.external target='_blank'} </br>\n",
        "- [JPQL Reference](https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#hql){.external target='_blank'} </br>\n",
        "- [Spring Data JPA - Query Creation](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation){.external target='_blank'}\n",
        "\n",
        "### JPA Queries\n",
        "\n",
        "For more information on Spring Boot JPA query methods, check out these resources:\n",
        "\n",
        "- [Defining Query Methods](https://docs.spring.io/spring-data/jpa/reference/repositories/query-methods-details.html){.external target='_blank'} </br>\n",
        "- [Query by Example](https://docs.spring.io/spring-data/jpa/reference/repositories/query-by-example.html){.external target='_blank'} </br>\n",
        "- [JPA Query Methods](https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html){.external target='_blank'} </br>\n",
        "- [Spring Boot: JPA & DI](/springboot/boot-concepts-jpa.qmd){.external target='_blank'}\n",
        "\n",
        "# JUnit 5 tests\n",
        "\n",
        "- [JUnit and TDD](/javase/se-concepts-tdd.qmd)\n",
        "\n",
        "\n",
        "# DevOps\n",
        "\n",
        "## Creating a executable .jar\n",
        "\n",
        "The command `mvn clean package` is a Maven command that performs two main phases of the Maven build lifecycle:\n",
        "\n",
        "1. `clean`: This phase removes the target directory and any compiled files from previous builds. It essentially \"cleans\" your project's working directory.\n",
        "  \n",
        "2. `package`: This phase compiles your source code, runs tests, and packages the compiled code into a distributable format, such as a JAR file.\n",
        "  \n",
        "\n",
        "When you run `mvn clean package`, Maven will:\n",
        "\n",
        "1. Delete the `target` directory (clean)\n",
        "2. Compile the source code\n",
        "3. Run unit tests\n",
        "4. Package the compiled code into a JAR/WAR file (depending on your project type)\n",
        "\n",
        "This command is commonly used to ensure a fresh build of your project, starting from a clean state. It's useful when you want to create a new package of your application, especially before deploying or sharing your code.\n",
        "\n",
        "## Working on different environments\n",
        "\n",
        "- [Profiles](https://docs.spring.io/spring-boot/reference/features/profiles.html){.external target='_blank'}\n",
        "\n",
        "> Spring Profiles provide a way to <mark>segregate parts of your application configuration and make it be available only in certain environments</mark>. Any @Component, @Configuration or @ConfigurationProperties can be marked with @Profile to limit when it is loaded, as shown in the following example:\n",
        "\n",
        "\n",
        "``` java\n",
        "import org.springframework.context.annotation.Configuration;\n",
        "import org.springframework.context.annotation.Profile;\n",
        "\n",
        "@Configuration(proxyBeanMethods = false)\n",
        "@Profile(\"production\")\n",
        "public class ProductionConfiguration {\n",
        "\n",
        "\t// ...\n",
        "\n",
        "}\n",
        "```\n",
        "\n",
        "### `application.properties`\n",
        "\n",
        "You can use a` spring.profiles.active` **Environment property** to specify which profiles are active, for example, you could include it in your `application.properties`, as shown in the following example:\n",
        "\n",
        "``` yml\n",
        "spring.profiles.active=prod\n",
        "#---\n",
        "spring.config.activate.on-profile=prod\n",
        "spring.profiles.active=metrics\n",
        "\n",
        "```\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-3-app-properties-1.png)\n",
        "\n",
        "In RestaurantManger we have three `application.properties` docs:\n",
        "\n",
        "1. **Default profile** (`application.properties`)\n",
        "2. **In-memory profile** (`application-memory.properties`)\n",
        "3. **Local profile** (`application-local.properties`)\n",
        "\n",
        "These profiles allow you to run your application in different `environments` with specific configurations.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "**Default Profile (`application.properties`)**\n",
        "\n",
        "This is the base configuration file that sets up common properties for all profiles:\n",
        "\n",
        "- Sets the application name to \"restaurantManager\"\n",
        "- Activates the \"local\" profile by default\n",
        "- Configures H2 database and JPA settings\n",
        "- Sets up Swagger documentation paths\n",
        "- Imports environment variables from a .env file\n",
        "- Configures an endpoint URL for customers\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "``` {yml name=\"application.properties\"}\n",
        "\n",
        "spring.application.name=restaurantManager\n",
        "\n",
        "# application.properties\n",
        "spring.profiles.active=local\n",
        "\n",
        "\n",
        "\n",
        "# H2 DATABASE SERVER\n",
        "spring.datasource.driverClassName=org.h2.Driver\n",
        "spring.jpa.database-platform=org.hibernate.dialect.H2Dialect\n",
        "spring.h2.console.enabled=true\n",
        "\n",
        "# DDL OPTIONS: create-drop, create, update, none, validate\n",
        "#spring.jpa.hibernate.ddl-auto=create-drop\n",
        "\n",
        "\n",
        "# SWAGGER\n",
        "springdoc.api-docs.path=/api-docs\n",
        "springdoc.swagger-ui.path=/swagger-ui.html\n",
        "\n",
        "\n",
        "# ENDPOINTS\n",
        "# Import .env file\n",
        "spring.config.import=optional:file:.env\n",
        "# import from environment variables\n",
        "endpoint.url.customers=${ENDPOINT_URL_CUSTOMERS}\n",
        "#endpoint.url.customers=/api/v1/customers/\n",
        "\n",
        "# Enable debug logging\n",
        "#logging.level.org.springframework=DEBUG\n",
        "#logging.level.dev.example.restaurantManager=DEBUG\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        " **In-Memory Profile (`application-memory.properties`)**\n",
        "\n",
        "This profile is designed for running the application with an in-memory H2 database:\n",
        "\n",
        "- Configures the H2 database to run in-memory\n",
        "- Sets database username and password\n",
        "- Uses \"create-drop\" as the DDL auto option, which is suitable for testing as it recreates the schema each time the application starts\n",
        "- \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "``` {yml name=\"application-memory.properties\"}\n",
        "\n",
        "# H2 IN MEMORY\n",
        "spring.datasource.url=jdbc:h2:mem:testdb\n",
        "spring.datasource.username=sa\n",
        "spring.datasource.password=\n",
        "\n",
        "\n",
        "# DDL OPTIONS: create-drop, create, update, none, validate\n",
        "spring.jpa.hibernate.ddl-auto=create-drop\n",
        "# create ? Hibernate first drops existing tables and then creates new tables.\n",
        "# create-drop ? similar to create, with the addition that\n",
        "# Hibernate will drop the database after all operations are completed;\n",
        "# typically used for unit testing\n",
        "#https://albertprofe.dev/springboot/sblab0-5.html#ddl\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "**Local Profile (`application-local.properties`)**\n",
        "\n",
        "This profile is for running the application with a local H2 database file:\n",
        "\n",
        "- Configures the H2 database to use a file-based storage\n",
        "- Sets database username and password\n",
        "- Uses \"update\" as the DDL auto option, which updates the schema without dropping existing tables\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "``` {yml name=\"application-local.properties\"}\n",
        "\n",
        "# H2 LOCAL DB SERVER\n",
        "spring.datasource.url=jdbc:h2:/home/albert/MyProjects/DataBase/customerdb\n",
        "spring.datasource.username=albert\n",
        "spring.datasource.password=1234\n",
        "\n",
        "# DDL OPTIONS: create-drop, create, update, none, validate\n",
        "spring.jpa.hibernate.ddl-auto=update\n",
        "# create ? Hibernate first drops existing tables and then creates new tables.\n",
        "# update ? The object model created based on the mappings\n",
        "# (annotations or XML) is compared with the existing schema,\n",
        "# and then Hibernate updates the schema according to the diff.\n",
        "# It never deletes the existing tables or columns\n",
        "# even if they are no longer required by the application.\n",
        "# https://albertprofe.dev/springboot/sblab0-5.html#ddl\n",
        "\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### How to Use These Profiles\n",
        "\n",
        "1. **Default Behavior**: By default, the application will use the \"local\" profile as specified in `application.properties`:\n",
        "\n",
        "   ```properties\n",
        "   spring.profiles.active=local\n",
        "   ```\n",
        "\n",
        "2. **Switching Profiles**: To use a different profile, you can:\n",
        "\n",
        "   a. Change the `spring.profiles.active` property in `application.properties`.\n",
        "   \n",
        "   b. Set it as a command-line argument:\n",
        "\n",
        "      ```\n",
        "      java -jar your-app.jar --spring.profiles.active=memory\n",
        "      ```\n",
        "   \n",
        "   c. Set it as an environment variable:\n",
        "\n",
        "      ```\n",
        "      export SPRING_PROFILES_ACTIVE=memory\n",
        "      ```\n",
        "\n",
        "3. **Profile-Specific Properties**: Spring Boot will load properties from `application.properties` and then override/add properties from the active profile-specific file (e.g., `application-memory.properties` or `application-local.properties`).\n",
        "\n",
        "This setup allows you to easily switch between running your application with an in-memory database (useful for testing) and a local file-based database (useful for development or production) without changing your code. It also provides a flexible way to manage different configurations for various environments.\n",
        "\n",
        "#### Precedence\n",
        "\n",
        "When a property like s`pring.jpa.hibernate.ddl-auto` is defined in both `application.properties` and a profile-specific properties file (e.g., `application-dev.properties`), the <mark>value from the active profile will override the one in application.properties</mark>.\n",
        "\n",
        "Therefore, if the profile is active and specifies `ddl-auto=create`, it will take precedence over `ddl-auto=update` in `application.properties`. \n",
        "\n",
        "> The order of execution is determined by the active profiles and their precedence over the default properties.\n",
        "\n",
        "## `.env`\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-3-env.png)\n",
        "\n",
        "\n",
        "``` yml\n",
        "\n",
        "ENDPOINT_URL_CUSTOMERS=/api/v1/customers/\n",
        "\n",
        "```\n",
        "\n",
        "The process loading `environment variables` from a `.env` file into `application.properties`, and then using those variables in your `Spring Boot` application works like this:\n",
        "\n",
        "1. Loading from `.env` file:\n",
        "   In your `application.properties`, you have the following line:\n",
        "\n",
        "   ```properties\n",
        "   spring.config.import=optional:file:.env\n",
        "   ```\n",
        "\n",
        "   This instructs `Spring Boot` to import variables from a `.env` file if it exists. The \"optional:\" prefix means the <mark>application won't fail if the file is missing</mark>.\n",
        "\n",
        "2. Defining the property:\n",
        "   In `application.properties`, you have:\n",
        "\n",
        "   ```properties\n",
        "   endpoint.url.customers=${ENDPOINT_URL_CUSTOMERS}\n",
        "   ```\n",
        "\n",
        "   This sets the `endpoint.url.customers` property to the value of the `ENDPOINT_URL_CUSTOMERS` environment variable.\n",
        "\n",
        "3. Using the property in the **controller**:\n",
        "   In **CustomerController**, we're injecting this property:\n",
        "\n",
        "   ```java\n",
        "   @Value(\"${endpoint.url.customers}\")\n",
        "   private String endpointUrlCustomers;\n",
        "   ```\n",
        "\n",
        "   This injects the value of `endpoint.url.customers` into the `endpointUrlCustomers` variable.\n",
        "\n",
        "4. Accessing the property:\n",
        "   In `showEndpointCustomers()` method, we're returning the value of `endpointUrlCustomers`.\n",
        "\n",
        "Here's how it all comes together:\n",
        "\n",
        "1. When the application starts, it looks for a `.env` file and loads any variables defined there.\n",
        "2. The `ENDPOINT_URL_CUSTOMERS` variable from `.env` (or from the system environment if not in `.env`) is used to set the `endpoint.url.customers` property in application.properties.\n",
        "3. `Spring Boot` <mark>injects this property value into the controller</mark>.\n",
        "4. The `controller` can now use this value, as demonstrated in the `showEndpointCustomers()` method.\n",
        "\n",
        "This approach allows to keep **sensitive or critical environment-specific information** (like API endpoints, passwords, users names, roles, etc) out of source code, making it easier to manage different configurations for various environments (development, staging, production, etc.).\n",
        "\n",
        "\n",
        "#### IntelliJIdea IDE settings 2024\n",
        "\n",
        "![](/images/springboot/labsb08/labsb08-3-env-1.png)\n",
        "\n",
        "![](/images/springboot/labsb08/labsb08-3-env-2.png)\n",
        "\n",
        "\n",
        "![](/images/springboot/labsb08/labsb08-3-env-3.png)\n",
        "\n",
        "![](/images/springboot/labsb08/labsb08-3-env-4.png)\n",
        "\n",
        "\n",
        "Check these settings at `IntelliJIdea IDE`:\n",
        "\n",
        "- Install the correct plugins: Make sure you have both the \"EnvFile\" and \".env files support\" plugins installed16. These plugins provide better support for .env files in IntelliJ IDEA.\n",
        "- Configure file type associations: Go to Settings | Editor | File Types and ensure that both *.env and .env patterns are assigned to the \"DotEnv\" file type3. This will help IntelliJ recognize the file correctly.\n",
        "- Set up run configurations: For each run configuration where you need to use the .env file:\n",
        "Open Run | Edit Configurations\n",
        "  - Select your configuration: Go to the EnvFile tab\n",
        "  - Enable EnvFile support and add your .env file to the list\n",
        "  - Select directory .env\n",
        "- Restart IntelliJ: After making these changes, restart IntelliJ IDEA to ensure all settings are applied correctly.\n",
        "- Check file location: Ensure your .env file is in the correct location, typically the root of your project.\n",
        "- Verify file content: Make sure your .env file is formatted correctly, with each variable on a new line in the format KEY=VALUE.\n",
        "- Use absolute paths: If IntelliJ still can't find your .env file, try using an absolute path in your run configuration\n",
        "\n",
        "\n",
        "# Code\n",
        "\n",
        "![](/images/springboot/labsb08/lab08-1-v0.0.png){width=50%}\n",
        "\n",
        "- [Commits](https://github.com/AlbertProfe/restaurantManager/commits/master/){.external target='_blank'}\n",
        "\n",
        "<!--- navLinks -->\n",
        "<br><br>\n",
        "<div class=row>\n",
        "<br>\n",
        "<div class='column left previous'>\n",
        "<br>\n",
        "[{{< fa solid arrow-left >}} Lab#SB08-2: RestaurantManager ](/springboot/sblab8-2.qmd)\n",
        "<br>\n",
        "</div>\n",
        "<br>\n",
        "<div class='column center'>\n",
        "<br>\n",
        "[{{< fa solid arrow-up >}} top](#top)\n",
        "<br>\n",
        "</div>\n",
        "<br>\n",
        "<div class='column right next'>\n",
        "<br>\n",
        "[Lab#SB08-4: RestaurantManager  {{< fa solid arrow-right >}}](/springboot/sblab8-4.qmd)\n",
        "<br>\n",
        "</div>\n",
        "<br>\n",
        "</div>"
      ],
      "id": "b4de21f5"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}