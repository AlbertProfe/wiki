---
title: "Spring Boot: View"
subtitle: Spring Boot View
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description:  Spring Boot View
categories: [Spring-Boot, View]
toc: true
number-sections: true
format:
  html
---

In Spring Boot, the Model-View-Controller (MVC) pattern is used to separate the application logic into three components: Model - View -Controller

::: {.summary}

ðŸ“˜ **View**

The view is responsible for presenting the data to the user. In Spring Boot, views are typically implemented using template engines such as Thymeleaf or FreeMarker. The view can access the model and use it to generate the HTML, JSON or XML that is sent to the user's browser.

:::

---


## Example

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Home</title>
</head>
<body>
    <h1 th:text="${message}">Hello, World!</h1>
</body>
</html>

```
In this template, the th:text attribute is used to set the text of the ``<h1>`` tag to the value of the message attribute in the model. The expression ${message} evaluates to the value of the message attribute.

Assuming that this template is saved in a file named home.html in your application's templates directory, the HomeController will render a message that says "Welcome to my Spring Boot app!" when you visit the URL /. The value of the message attribute is set in the home() method of the controller.


## Example

Thymeleaf templates that can be used with the hello(), createUser(), and getUserById() methods:

hello.html:

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Hello</title>
</head>
<body>
    <h1 th:text="${message}">Hello, World!</h1>
</body>
</html>

```
In this template, the th:text attribute is used to set the text of the ``<h1>`` tag to the value of the message attribute in the model. The value of message is set in the hello() method of the controller.

user.html:

``` html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>User</title>
</head>
<body>
    <h1 th:text="${user.name}">User</h1>
    <p th:text="${user.email}"></p>
</body>
</html>

```

In this template, the th:text attribute is used to set the text of the ``<h1>`` tag to the value of the name property of the user object in the model. The th:text attribute of the ``<p>`` tag is used to set its text to the value of the email property of the user object in the model.

Assuming that these templates are saved in files named hello.html and user.html, respectively, in your application's templates directory, the hello() method will render a message that says "Hello, World!" when you visit the URL /hello.

The createUser() method doesn't return a view, so it doesn't need a Thymeleaf template.

Finally, the getUserById() method will render a page that displays the details of a user when you visit the URL /users/{id}, where {id} is the ID of the user. The details of the user are passed to the template using the model.addAttribute() method. The th:text attribute is used to set the text of the ``<h1>`` tag to the name of the user, and the th:text attribute of the ``<p>`` tag is used to set its text to the email of the user.

## Example


```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Example</title>
</head>
<body>
    <h1 th:text="'Hello, ' + ${message}">Hello, World!</h1>
</body>
</html>

```

In this template, the th:text attribute is used to set the text of the ``<h1>`` tag to the value of the message attribute in the model. The expression 'Hello, ' + ${message} concatenates the string "Hello, " with the value of the message attribute.

Assuming that this template is saved in a file named hello.html in your application's templates directory, the ExampleController will render a message that says "Hello, {name}!" when you visit the URL /hello?name=John, where {name} is the value of the name parameter in the query string. For example, if you visit the URL /hello?name=John, the message will say "Hello, John!".

<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} Spring Boot: Controller](/springboot/boot-concepts-controller.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[Spring Boot: Model  {{< fa solid arrow-right >}}](/springboot/boot-concepts-model.qmd)
<br>
</div>
<br>
</div>
