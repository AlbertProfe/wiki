---
title: "Spring Boot Lab#SB00-2: CRUD User"
subtitle: Spring Boot Library Management CRUD User
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: Spring Boot
categories: [Spring-Boot, lab]
toc: true
number-sections: true
format:
  html
---

::: {.labs}
ðŸ“˜ **Spring Boot Lab#SB00-2: CRUD User**

``CRUD`` stands for ``Create``, ``Read``, ``Update``, and ``Delete`` - the four basic operations for persistent storage of data.

In the context of a ``LibraryMangement``, ``CRUD`` operations would allow us to create new users, retrieve information about existing users, update user information, and delete users from the system.

:::

</br>

::: {.callout-note}
## We should implement it in **several domains.**

- First, we'll create our User class and annotate it with @Data, @NoArgsConstructor, and @AllArgsConstructor.
- Next, we'll create our ``UserService`` class and annotate it with ``@Service``. This class will use a ``HashMap`` to **store user data**, and will expose methods to create, read, update, and delete users.
- Next, we'll create our ``UserController`` class and annotate it with ``@Controller``. This class will handle requests to view, create, update, and delete users. We'll inject the ``UserService`` into the **controller** using ``@Autowired``.
- Finally, we'll create our ``Thymeleaf`` ``HTML`` **templates**. We'll create an ``index.html`` or ``home.html`` template to display a list of users, a ``createUser.html`` template to allow users to create new users, and an`` editUser.html`` template to allow users to edit existing users.

:::


## Overview

We'll be using a Java class called ``User`` to represent **user data**.

::: {.column-margin}

The ``@Data`` annotation is used to generate getters, setters, equals, hashCode, and toString methods for the class. The ``@NoArgsConstructor`` and ``@AllArgsConstructor`` annotations are used to generate constructors with no arguments and all arguments, respectively.

:::

We'll also be using a ``HashMap`` to **store user data**, with ``userId`` as the key. This will allow us to quickly retrieve user data using the user ID as a **lookup key**.

```java
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data // generates getters, setters, equals, hashCode, and toString methods
@NoArgsConstructor // generates a no-args constructor
@AllArgsConstructor // generates a constructor with all arguments
public class User {
    private String userId;
    private String name;
    private String address;
    private int age;
}
```
We might implement the ``CRUD`` operations for our ``LibraryMangement`` system:

- ``Create``: To create a new user, we'll need to generate a unique user ID and create a new User object with the provided user data. We can then add the new User object to our HashMap using the generated user ID as the key.
- ``Read``: To retrieve information about an existing user, we'll need to look up the User object in our HashMap using the user ID as the key.
- ``Update``: To update user information, we'll need to retrieve the User object from our HashMap using the user ID as the key, and then update the relevant properties of the User object.
- ``Delete``: To delete a user from the system, we'll need to remove the User object from our HashMap using the user ID as the key.

## Reference: Library5

### Repos

- [Lab#SB02-Library5 Code](https://github.com/AlbertProfe/cifojava2022-3/tree/master/library5){.external}
- [Lab#SB02-Library5 Docs](https://github.com/AlbertProfe/cifojava2022-3/wiki/Library5:-ThymeLeaf-Web-Project){.external}

### Java Classes

- [Book](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library5/src/main/java/io/company/library/Book.java){.external}
- [BookService](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library5/src/main/java/io/company/library/BookService.java){.external}
- [LibraryWebController](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library5/src/main/java/io/company/library/LibraryWebController.java){.external}

### Templates Thynmeleaf

- [detailBook](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library5/src/main/resources/templates/detailBook.html){.external}
- [newBook](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library5/src/main/resources/templates/newBook.html){.external}
- [notfound](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library5/src/main/resources/templates/notfound.html){.external}
- [showBooks](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library5/src/main/resources/templates/showBooks.html){.external}
- [updateBook](https://github.com/AlbertProfe/cifojava2022-3/blob/master/library5/src/main/resources/templates/updateBook.html){.external}

## CRUD: read

### LibraryManagement: controllerView

- [controllerView code github](https://github.com/AlbertProfe/CifoJava2023/tree/master/controllerView){.external}

![render html chrome: /home](/images/springboot/viewController1.png){width="60%"}


![render html chrome: /user/users](/images/springboot/viewController2.png){width="60%"}


![render html chrome: /librarian/librarians](/images/springboot/viewController3.png){width="60%"}


## CRUD: create

### Create book

![CRUD: create book](/images/springboot/crud-create.png)



## CRUD: update

## CRUD: delete



<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} Spring Boot: Data](/springboot/boot-concepts-data.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[Lab 2: Spring Boot Projects  {{< fa solid arrow-right >}}](/springboot/sblab2.qmd)
<br>
</div>
<br>
</div>
