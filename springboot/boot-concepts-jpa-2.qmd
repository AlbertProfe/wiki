---
title: "Spring Boot: JPA Mappings"
subtitle: Spring Boot JPA Relationships, Mappings and Queries
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description:  Spring Boot JPA
categories: [Spring-Boot, JPA]
toc: true
number-sections: true
format:
  html
---


::: {.summary}

ðŸ“˜ **JPA Mappings and relationships**

Spring Boot provides an implementation of the Java Persistence ``API`` (``JPA``) to simplify database access: ORM (``Object-Relational Mapping``)

In JPA, entity classes represent tables in the database, and relationships between entities are mapped using annotations.

:::

</br>

## JPA Implementations: ORM

`OpenJPA`, `Hibernate`, and `EclipseLink` are all popular `ORM` (Object-Relational Mapping) frameworks that p**rovide implementations of the Java Persistence API (JPA)**.

These frameworks s**implify database access and management by mapping Java objects to database tables, and they provide features to optimize database performance and reduce the amount of boilerplate code** required to interact with the database.

![ORM implemtations JPA: vendors](/images/springboot/hibernate-jpa-2.png){width="60%"}

- `OpenJPA` is an Apache project that provides a lightweight, high-performance implementation of JPA.
- `Hibernate` is a popular ORM framework that's widely used in Spring Boot applications. It provides a rich set of features and has excellent community support.
- `EclipseLink` is an open-source JPA implementation that's known for its performance and flexibility, and it's frequently used in `Java EE` applications.

## ORM: Hibernate

`Hibernate` is a popular ORM (Object-Relational Mapping) framework that provides a powerful implementation of JPA. It's widely used in Spring Boot applications to simplify database access and management.


::: {.column-margin}
![Hibernate JPA](/images/springboot/hibernate-jpa.png){width="50%"}
:::


`Hibernate` uses annotations and XML configurations to map Java objects to database tables, and it provides several features to simplify `CRUD` (Create, Read, Update, and Delete) operations on the database.

`Hibernate` also provides **support for caching**, **lazy loading**, and **transaction** management, which can help you optimize the performance of your application.

![JPA Hibernate stack](/images/springboot/hibernate-jpa-3.png){width="20%"}

::: {.column-margin}
Spring Boot and `Hibernate` provide a powerful combination of tools for building Java-based web applications that interact with databases.

By using these frameworks together, you can s**implify database access, improve performance**, and focus on building the core functionality of your application.
:::

When you use `Hibernate` in your Spring Boot application, you can define entity classes using JPA annotations, just like you would with the standard `JPA` implementation provided by Spring Boot. `Hibernate` also provides its own set of annotations that can be used to fine-tune the behavior of the `ORM` framework.

For example, you can use the @GeneratedValue annotation to specify how primary keys are generated, or the @Fetch annotation to specify how data is retrieved from the database.

![JPA Hibernate architecture](/images/springboot/hibernate-jpa-4.png){width="40%"}

In addition to its rich set of features, Hibernate is also known for its excellent documentation and community support. You can find plenty of tutorials, sample code, and forums online to help you get started with Hibernate in your Spring Boot application.

- [JPA](https://huimang2.github.io/java/jpa){.external}

## Annotations

| Annotation | Description |
| --- | --- |
| @Entity | Specifies that the class is an entity and will be managed by the EntityManager. |
| @Table | Specifies the database table name for the entity. |
| @Id | Specifies the primary key field of the entity. |
| @GeneratedValue | Specifies how the primary key should be generated. |
| @Column | Specifies the database column name for a field. |
| @JoinColumn | Specifies the join column when using a relationship. |
| @OneToMany | Defines a one-to-many relationship between two entities. |
| @ManyToOne | Defines a many-to-one relationship between two entities. |
| @ManyToMany | Defines a many-to-many relationship between two entities. |
| @JoinTable | Specifies the join table for a many-to-many relationship. |
| @Embedded | Specifies that the field should be mapped as an embedded object. |
| @Transient | Specifies that the field should not be persisted to the database. |
: JPA Annotations {tbl-colwidths="[20,80]"}


## Relationships

Here are some of the most common JPA mappings and relationships used in Spring Boot

### `@OneToMany`


``@OneToMany``: This annotation is used to represent a one-to-many relationship between two entities.

::: {.column-margin}
For example, if a customer can have multiple orders, you can define a @OneToMany relationship between the Customer entity and the Order entity.
:::

::: {.callout-tip}
## Example:

[API Rest Author-Book @OneToMany CRUD with Swagger](/springboot/sblab2.qmd#api-rest-author-book-onetomany-crud-with-swagger)
:::

### `@ManyToOne`


``@ManyToOne``: This annotation is used to represent a many-to-one relationship between two entities.

::: {.column-margin}
For example, if an order belongs to a customer, you can define a @ManyToOne relationship between the Order entity and the Customer entity.
:::
  
::: {.callout-tip}
## Example:

[Library-Book @ManyToMany and @OneToOne CRUD](/springboot/sblab2.qmd#library-book-manytomany-and-onetoone-crud)
:::


### `@ManyToMany`



``@ManyToMany``: This annotation is used to represent a many-to-many relationship between two entities.

::: {.column-margin}
For example, if a book can have multiple authors and an author can have written multiple books, you can define a @ManyToMany relationship between the Book entity and the Author entity.
:::

::: {.callout-tip}
## Example:

[API Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence](/springboot/sblab2.qmd#api-rest-library-book-author-manytomany-onetomany-crud-with-swagger-and-inherence)
:::

## Inherence

Here are some of the most common JPA `inherence cases` used in Spring Boot


::: {.callout-tip}
## Example:

[Spring Boot Projects JPA Inherence strategies](/springboot/sblab0-4.qmd)
:::


## JPQL (Java Persistence Query Language)

JPQL (Java Persistence Query Language) is an object-oriented query language used to define queries for entities and their relationships in JPA (Java Persistence API). It's similar to SQL but operates on JPA entity objects rather than database tables.

### Key Characteristics of JPQL

1. Object-Oriented: Works with Java objects and their properties, not database tables and columns.
2. Database-Independent: Queries can work across different database systems without modification.
3. Supports JPA Relationships: Can easily navigate entity relationships.
4. Powerful: Supports complex operations like joins, aggregations, and subqueries.

### JPQL vs SQL

Here's a comparison between JPQL and SQL:

| Aspect | JPQL | SQL |
| --- | --- | --- |
| Operates on | Entity objects | Database tables |
| Case sensitivity | Case-sensitive | Generally case-insensitive |
| Portability | Database-independent | May contain database-specific syntax |
| Join syntax | Simplified using relationships | Requires explicit join conditions |

### JPQL Syntax Examples

1. Basic Select Query:

```jpql
SELECT u FROM User u WHERE u.age > 18
```

2. Join Query:

```jpql
SELECT o FROM Order o JOIN o.customer c WHERE c.country = 'USA'
```

3. Aggregate Function:

```jpql
SELECT AVG(e.salary) FROM Employee e WHERE e.department.name = 'IT'
```

4. Subquery:

```jpql
SELECT e FROM Employee e WHERE e.salary > (SELECT AVG(emp.salary) FROM Employee emp)
```

### Using JPQL in Spring Data JPA

1. With `@Query` annotation:

::: {.column-page-right}
```java
@Query("SELECT u FROM User u WHERE u.email = ?1 AND u.active = true")
User findActiveUserByEmail(String email);
```
:::

1. With `EntityManager`:

::: {.column-page-right}
```java
String jpql = "SELECT p FROM Product p WHERE p.category.name = :categoryName";
List<Product> products = entityManager.createQuery(jpql, Product.class)
    .setParameter("categoryName", "Electronics")
    .getResultList();
```
:::

### Benefits of JPQL

1. Type-safety: Works with Java types, reducing runtime errors.
2. Abstraction: Shields developers from database-specific details.
3. Optimization: JPA providers can optimize JPQL queries for better performance.
4. Flexibility: Allows for complex queries while maintaining database independence.

## Additional Resources

### JPQL

- [JPQL - Java Persistence Query Language](https://docs.oracle.com/javaee/6/tutorial/doc/bnbtg.html){.external target='_blank'} </br>
- [JPA Query Language](https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm){.external target='_blank'} </br>
- [JPQL Reference](https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#hql){.external target='_blank'} </br>
- [Spring Data JPA - Query Creation](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation){.external target='_blank'}

### JPA Queries

For more information on Spring Boot JPA query methods, check out these resources:

- [Defining Query Methods](https://docs.spring.io/spring-data/jpa/reference/repositories/query-methods-details.html){.external target='_blank'} </br>
- [Query by Example](https://docs.spring.io/spring-data/jpa/reference/repositories/query-by-example.html){.external target='_blank'} </br>
- [JPA Query Methods](https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html){.external target='_blank'} </br>
- [Spring Boot: JPA & DI](/springboot/boot-concepts-jpa.qmd){.external target='_blank'}



<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}}  Spring Boot: JPA ](/springboot/boot-concepts-jpa.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[Lab#SB00-1: Library UML  {{< fa solid arrow-right >}}](/springboot/sblab0-1.qmd)
<br>
</div>
<br>
</div>
