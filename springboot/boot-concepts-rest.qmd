---
title: "Spring Boot: Rest"
subtitle: Spring Boot Rest
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description:  Spring Boot Rest
categories: [Spring-Boot, rest]
toc: true
number-sections: true
format:
  html
---


::: {.summary}

ðŸ“˜ **Rest**

REST stands for Representational State Transfer. It is an architectural style for building web services that are designed to be lightweight, stateless, and easy to scale.

:::

---

In Spring Boot, the Spring MVC framework is used to build RESTful web services. The @RestController annotation is used to define a class as a RESTful web service controller. This annotation is a combination of the @Controller and @ResponseBody annotations, which means that the class is a controller and the methods return the data directly rather than returning the name of a view.

The @RequestMapping annotation is used to map HTTP requests to specific methods in a controller class. This annotation can be used at the class level or the method level to define the path that the method should handle.

In addition to these annotations, Spring Boot also provides a number of other features that make it easy to build RESTful web services, such as support for JSON and XML serialization and deserialization, automatic content negotiation, and built-in exception handling.

In summary, REST stands for Representational State Transfer. In Spring Boot, the Spring MVC framework is used to build RESTful web services, the @RestController and @RequestMapping annotations are used to define a class as a RESTful web service controller and map HTTP requests to specific methods, respectively. Spring Boot provides many features to make building RESTful web services easy, such as support for JSON and XML serialization and deserialization, automatic content negotiation, and built-in exception handling.

## Example

```java
@RestController
@RequestMapping("/api")
public class MyController {
    
    @GetMapping("/hello")
    public String hello() {
        return "Hello, world!";
    }
    
    @PostMapping("/data")
    public ResponseEntity<Void> postData(@RequestBody MyData data) {
        // Process the data...
        return ResponseEntity.ok().build();
    }
}

```

In this example, the @RestController annotation indicates that this class is a controller, and the @RequestMapping("/api") annotation specifies that all routes in this controller should be prefixed with "/api". The hello() method is annotated with @GetMapping("/hello"), which means it will handle GET requests to the "/api/hello" endpoint and return the string "Hello, world!". The postData() method is annotated with @PostMapping("/data"), which means it will handle POST requests to the "/api/data" endpoint and accept a JSON payload in the request body, which will be automatically converted to a MyData object using Spring's request body parsing functionality. The method then returns a ResponseEntity object with an HTTP status code of 200 (OK) and an empty response body.

By defining controllers like this, you can create RESTful APIs and web applications that can handle a wide range of HTTP requests and responses.


<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} Spring Boot: Dependency Injection](/springboot/boot-concepts-injection.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[Spring Boot: Data  {{< fa solid arrow-right >}}](/springboot/boot-concepts-data.qmd)
<br>
</div>
<br>
</div>
