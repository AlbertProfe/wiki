[
  {
    "objectID": "about/about-this-images-credit.html",
    "href": "about/about-this-images-credit.html",
    "title": "About images credit",
    "section": "",
    "text": "About images credit\n\n\n\nImages list\n\nOOP principles: www.nerd.vision1\nJava Programming Tutorial Object-oriented Programming (OOP) Basics: www3.ntu.edu.sg2\nSingleton Design Pattern: Singleton Design Pattern3\nGet Java for desktop applications: Java / Download Java / What is Java technology and why do I need it?4\nDriving Augmented Intelligence Test Driven Development (TDD) Tools and Agile Process5\nBash Logo Media Assets: Bash logo6\nOne of the most important reasons for holding a meeting is to make decisions. How to Prevent the Opinion Wars That Derail Decision Making7\nresellerclub What is server virtualization?8\nYet Another Software Engineer Maven — Lifecycle, Phases, Plugins and Goals9\nChiradeep BasuMallick Technical Writer, from spiceworks What Is OOP (Object Oriented Programming)? Meaning, Concepts, and Benefits10\nEmmanuel Morales, Medium React flow data to components child by props11\nGethyl George Kurian, How Virtual-DOM and diffing works in React12\nFutures and Promises, BY KISALAYA PRASAD, AVANTI PATIL, AND HEATHER MILLER Futures and Promises13\nUday Yadav React Hooks for Beginners14\nDreams the art through programming, Programming Artist, DeKu React Context API15\nWelcome to CS Awesome! It’s time to start your journey to learn how to program with Java: AP CS A Java Course16\nFasrin Aleem Let’s Understand Java17\nWe (https://introcs.cs.princeton.edu/) summarize the most commonly used Java language features and APIs in the textbook. Java Programming Cheatsheet18\n\nHow to write notes with .qmd Quarto Markdown  \n\n\n\n  About this site \n\n\n\n  top \n\n\n\n Home  \n\n\n\n\n\n\n\n\nFootnotes\n\n\nrandom web, just crediting the image↩︎\nvery useful and recommended resource↩︎\nrandom web, just crediting the image↩︎\ninteresting web↩︎\ninteresting web↩︎\nrandom web, just crediting the image↩︎\nrandom web, just crediting the image↩︎\nrandom web, just crediting the image↩︎\nrandom web, just crediting the image↩︎\ninteresting web↩︎\ninteresting web↩︎\nvery useful and recommended resource↩︎\ninteresting web↩︎\ninteresting web↩︎\ninteresting web↩︎\nvery useful and recommended resource↩︎\nrandom web, just crediting the image↩︎\nrandom web, just crediting the image↩︎"
  },
  {
    "objectID": "about/about-this-me.html",
    "href": "about/about-this-me.html",
    "title": "About me",
    "section": "",
    "text": "About"
  },
  {
    "objectID": "about/about-this-me.html#introduction",
    "href": "about/about-this-me.html#introduction",
    "title": "About me",
    "section": "Introduction",
    "text": "Introduction\nHi, this is alberprofe speaking! My fields of expertise are … let’s OpenAI introduce them:\n\nA software architect is a person who is responsible for the overall design and architecture of a software system. They are responsible for creating a high-level design that defines the structure and behavior of the system, as well as for ensuring that the system meets the needs and requirements of the user or client.\n\n\nA team leader is a person who is responsible for leading and managing a team of individuals. They are responsible for setting goals and objectives for the team, as well as for providing guidance and support to team members. A team leader may also be responsible for coordinating the work of the team, monitoring progress, and providing feedback to team members.\n\n\nA professor is an individual who teaches at a college or university. They typically have advanced degrees in their field of expertise and are responsible for designing and delivering courses, conducting research, and providing academic guidance to students.\n\n\nAn entrepreneur is a person who starts and runs their own business. They are responsible for identifying a business opportunity, developing a business plan, and managing the day-to-day operations of the business. An entrepreneur is typically focused on growing the business and generating profits, and they may also be involved in product development, marketing, and other aspects of the business.\n\n\nThese four roles are all different and may be held by different individuals. A software architect is focused on the technical design and implementation of a software system, a team leader is focused on managing and coordinating the work of a team, a professor is focused on teaching and research in a particular field of study, and an entrepreneur is focused on starting and running a business.\n\n\nContact\n\nprofessor:  professor (albertprofe at gmail dot com)\nprofessional:  professinal (ayarza at inspiratgames dot com)\n\n\n\nLinkedin\nhttps://www.linkedin.com/in/albert-yarza-demur/  \n\n\n\n  IFCD0210 Projects Backlog \n\n\n\n  top \n\n\n\n About this site"
  },
  {
    "objectID": "about/about-this-site.html",
    "href": "about/about-this-site.html",
    "title": "About this site",
    "section": "",
    "text": "About"
  },
  {
    "objectID": "about/about-this-site.html#introduction",
    "href": "about/about-this-site.html#introduction",
    "title": "About this site",
    "section": "Introduction",
    "text": "Introduction\nThis site has been done and been mantaining with four tools and several content sources:\n\nTools\n\nQuarto\nMarkdown\nGit / GitHub.com / Git Pages\nVisual Code IDE\n\n\n\nContent Sources\n\nOpenAI Chat\nBooks, authors, websites or online resources are cited as detailed as possible (minimum Author, site and link)\nDocumentation of my own: albertprofe sites and repositories\n\nGitHub repository albertprofe\nWeb SCRUM\nWeb DevOps"
  },
  {
    "objectID": "about/about-this-site.html#diagram",
    "href": "about/about-this-site.html#diagram",
    "title": "About this site",
    "section": "Diagram",
    "text": "Diagram\n\n\n\nHow to create a website with Quarto engine, written in MarkDown and deployed/hosted/published by GitHub-pages\n\n\nGo to Markdown Lab1 to check the details"
  },
  {
    "objectID": "about/about-this-site.html#tools-1",
    "href": "about/about-this-site.html#tools-1",
    "title": "About this site",
    "section": "Tools",
    "text": "Tools\n\nBasic tools\nQuarto is an open-source scientific and technical publishing system built on Pandoc. To learn more about Quarto websites visit quarto.org.\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. It is commonly used on the web to format blog posts and other types of content.\nVisualCode is an integrated development environment (IDE) that is used to write and debug code.\nGitHub Pages is a service offered by the popular version control platform GitHub. It allows users to create and host websites using the files that are stored in their GitHub repositories. It can be used to create personal, organization, or project-based websites.\n\n\nGit\nGit is a version control system that is used for tracking changes to files, such as source code or documents. It is commonly used by software developers to manage their codebase, but it can also be used for other types of files.\n\nGit allows users to create a repository, which is a collection of files that are managed by Git. Each time a change is made to a file in the repository, Git records the change in a new version of the file. This allows users to easily undo changes, compare different versions of a file, and collaborate with others on the same files.\n\nGit also provides tools for managing and merging changes made by different users. This makes it possible for multiple people to work on the same files at the same time without overwriting each other’s changes.\nOverall, Git is a powerful and widely-used tool that is essential for anyone working on large or complex projects with multiple collaborators. It allows users to easily track, manage, and share changes to their files, making it easier to develop and maintain software projects."
  },
  {
    "objectID": "about/about-this-site.html#install-tools",
    "href": "about/about-this-site.html#install-tools",
    "title": "About this site",
    "section": "Install tools",
    "text": "Install tools\nIf you want to use VisualCode and GitHub together, you can follow these steps:\n\nInstall VisualCode on your computer.\nCreate a new project in VisualCode by selecting “File > New Project” from the menu.\nInitialize a Git repository in your project by opening the terminal in VisualCode and running the git init command.\nUse VisualCode to write and save your code files in the project directory.\nStage and commit your changes to the Git repository using the git add and git commit commands.\nCreate a new repository on GitHub and follow the instructions to push your local repository to the remote repository on GitHub.\n\nOnce your code is on GitHub, you can use GitHub Pages to create a website for your project. To do this, follow these steps:\n\nOpen the repository on GitHub and go to the “Settings” tab.\nScroll down to the “GitHub Pages” section and select the “master branch” as the source for your website.\nGitHub will automatically build and publish your website, and it will provide a URL where you can view it.\n\n\n\n\n\n\n\nBe careful: these instructions are just a general overview\n\n\n\n\n\nNote that these instructions are just a general overview of how to use VisualCode and GitHub together. There are many other features and options that you can use to customize your workflow. For more detailed information, you can consult the documentation for VisualCode and GitHub.\n\n\n\n\nMarkdown examples\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. It is commonly used on the web to format blog posts and other types of content.\nTo format text using Markdown, you use special characters and symbols to indicate the formatting that you want to apply. For example, to create a heading, you can use the # symbol followed by the text of the heading. To create a bullet list, you can use the - symbol at the beginning of each list item.\nHere is an example of how Markdown can be used to format a simple document, when this Markdown code is rendered, it will look like this::\n\nHeading 5\nThis is a paragraph of text. It can include italicized or bold text, and you can create links to other web pages.\n\nThis is a bullet list\nEach item in the list begins with a dash\nYou can nest lists by indenting the items\n\n\nThis is a blockquote To create a blockquote, you use the > symbol at the beginning of each line\n\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <img className=\"Avatar\"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\nThere are many other features and options available in Markdown, and you can use it to format your text in a variety of ways. For more information, you can consult the documentation for the specific implementation of Markdown that you are using."
  },
  {
    "objectID": "about/about-this-site.html#openai-chat",
    "href": "about/about-this-site.html#openai-chat",
    "title": "About this site",
    "section": "OpenAI Chat",
    "text": "OpenAI Chat\n\nWhat are you?\n\n\nI am an AI assistant trained by OpenAI. I am not a human, but I am designed to answer questions and provide information on a wide range of topics. I do not have feelings, thoughts, or opinions of my own, and I exist solely to assist users in finding the information that they need. I am not affiliated with quarto.org or any other website or organization. I am a virtual entity that exists only in the digital realm.\n\n\nChatGPT\n\n\n\n\n\n\nChatGPT 3.5 is testing\n\n\n\n\n\nChatGPT: Optimizing Language Models for Dialogue. ChatGPT interacts in a conversational way. The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests.\nChatGPT is a sibling model to InstructGPT, which is trained to follow an instruction in a prompt and provide a detailed response.\n\n\n\nChatGPT\n\n top  \n\n\n\n  About me \n\n\n\n  top \n\n\n\n About images credit"
  },
  {
    "objectID": "books/antifragile.html#more-info",
    "href": "books/antifragile.html#more-info",
    "title": "Antifragile",
    "section": "More info",
    "text": "More info\n\nAntifragile: Things That Gain from Disorder (Incerto)"
  },
  {
    "objectID": "books/atomicHabits.html#more-info",
    "href": "books/atomicHabits.html#more-info",
    "title": "Atomic Habits",
    "section": "More info",
    "text": "More info\n\nAtomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones"
  },
  {
    "objectID": "books/awekenings.html#more-info",
    "href": "books/awekenings.html#more-info",
    "title": "Awekenings",
    "section": "More info",
    "text": "More info\nAwakenings–which inspired the major motion picture–is the remarkable story of a group of patients who contracted sleeping-sickness during the great epidemic just after World War I. Frozen for decades in a trance-like state, these men and women were given up as hopeless until 1969, when Dr. Oliver Sacks gave them the then-new drug L-DOPA, which had an astonishing, explosive, “awakening” effect. Dr. Sacks recounts the moving case histories of his patients, their lives, and the extraordinary transformations which went with their reintroduction to a changed world.\n\nAwakenings"
  },
  {
    "objectID": "books/budddhaandBadasss.html#more-info",
    "href": "books/budddhaandBadasss.html#more-info",
    "title": "The Buddha and the Badass",
    "section": "More info",
    "text": "More info\nIf you’re the average person in the developed world, you spend 70 percent of your waking hours at work. And if you’re the average person, you’re miserable for most of those hours. This is simply not an acceptable state of affairs for your one shot at life. No matter your station, you possess incredible unique powers. It’s a modern myth that hard work and hustle are the paths to success. Inside you is a soul. And once you unleash it fully into the domain of work, magic happens. Awakening the Buddha and the Badass inside you is a process that will disrupt the way you work altogether. You’ll gain access to tools that bend the very rules of reality.\n\nThe Buddha is the archetype of the spiritual master. The person who can live in this world but also move with an ease, grace, and flow that comes from inner awareness and alignment.\nThe Badass is the archetype of the changemaker. This is the person who is out there creating change, building, coding, writing, inventing, leading. The badass represents the benevolent disruptor—the person challenging the norms so we can be better as a species.\n\nOnce you integrate the skill sets of both archetypes, you will experience life at a different level from most people. You will operate from a space of bliss, ease, inspiration, and abundance. The Buddha and the Badass: The Secret Spiritual Art of Succeeding at Work will show you how. Author of the New York Times bestseller The Code of the Extraordinary Mind and founder of Mindvalley, Vishen Lakhiani has turned his own life and company into his research lab. He’s codified everything he’s learned into the how-to steps in this book. The Buddha and the Badass teaches you how to master your work and your life.\n\nThe Buddha and the Badass: The Secret Spiritual Art of Succeeding at Work"
  },
  {
    "objectID": "books/BuildingaSecondBrain.html#more-info",
    "href": "books/BuildingaSecondBrain.html#more-info",
    "title": "Building a Second Brain",
    "section": "More info",
    "text": "More info\n\nBuilding a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential"
  },
  {
    "objectID": "books/burnout.html#more-info",
    "href": "books/burnout.html#more-info",
    "title": "Burnout",
    "section": "More info",
    "text": "More info\nHerbert Freudenberger’s Burnout: The High Cost of High Achievement was published in 1980 and explores the concept of burnout, a state of physical, emotional, and mental exhaustion that results from chronic stress.\n\n\n\n\n\n\nNote\n\n\n\nIn the book, Freudenberger identifies several key characteristics of burnout, including feelings of cynicism and detachment, decreased personal accomplishment, and increased physical symptoms such as fatigue, headaches, and insomnia.\n\n\nHe also highlights the importance of recognizing the signs of burnout and taking steps to prevent or overcome it.\nSome of the key vocabulary used in the book include:\n\nBurnout: A state of physical, emotional, and mental exhaustion caused by chronic stress\nCynicism: A distrustful attitude towards others or the world in general\nDetachment: A feeling of emotional distance or disconnection\nPersonal accomplishment: A sense of achievement or satisfaction in one’s work or life\nFatigue: A state of exhaustion or tiredness\nHeadaches: Pain in the head or upper neck\nInsomnia: Difficulty sleeping or staying asleep\n\n\nBurnout: The High Cost of High Achievement serves as an important reminder of the negative effects of chronic stress and the importance of maintaining balance and self-care in order to prevent burnout."
  },
  {
    "objectID": "books/burnout.html#descision-making",
    "href": "books/burnout.html#descision-making",
    "title": "Burnout",
    "section": "Descision-Making",
    "text": "Descision-Making\nIn Burnout: The High Cost of High Achievement, Herbert Freudenberger explains that people often get burned out without realizing it. This is because burnout can develop gradually over time as a result of chronic stress.\n\nPeople may start to feel overwhelmed and exhausted, but they often attribute these feelings to other factors such as a demanding job or family responsibilities.\n\nFreudenberger also emphasizes the importance of** decision-making in stopping stress and preventing burnout. He notes that people who are at risk of burnout are often those who are highly driven, work-focused, and driven by their desire to achieve.\nHowever, they may also be prone to neglecting their own well-being and making decisions that increase their stress levels."
  },
  {
    "objectID": "books/burnout.html#prevent",
    "href": "books/burnout.html#prevent",
    "title": "Burnout",
    "section": "Prevent",
    "text": "Prevent\nIn order to prevent burnout, it is important for individuals to take an active role in managing their stress levels and making decisions that prioritize their physical, emotional, and mental well-being.\nThis may include setting boundaries and learning to say no to additional demands, taking time for self-care, and seeking support from friends, family, or a mental health professional.\n\nThe prevent in the decision-making process is critical in preventing burnout. By making conscious choices that support their well-being, individuals can avoid the high cost of high achievement and maintain a healthy work-life balance."
  },
  {
    "objectID": "books/c.html#more-info",
    "href": "books/c.html#more-info",
    "title": "C",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/chimpanzeePolitics.html#more-info",
    "href": "books/chimpanzeePolitics.html#more-info",
    "title": "Chimpanzee Politics",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/CleanCode.html#more-info",
    "href": "books/CleanCode.html#more-info",
    "title": "Clean Code",
    "section": "More info",
    "text": "More info\n\nClean Code: A Handbook of Agile Software Craftsmanship"
  },
  {
    "objectID": "books/CollectiveIllusions.html#more-info",
    "href": "books/CollectiveIllusions.html#more-info",
    "title": "Collective Illusions",
    "section": "More info",
    "text": "More info\n\nCollective Illusions"
  },
  {
    "objectID": "books/communicationbook44.html#more-info",
    "href": "books/communicationbook44.html#more-info",
    "title": "The Communication Book",
    "section": "More info",
    "text": "More info\n\nThe Communication Book: 44 Ideas for Better Conversations Every Day"
  },
  {
    "objectID": "books/ConsciousnessExplained.html#more-info",
    "href": "books/ConsciousnessExplained.html#more-info",
    "title": "Consciousness Explained",
    "section": "More info",
    "text": "More info\n\nConsciousness Explained\nConsciousness Explained"
  },
  {
    "objectID": "books/consilience.html#more-info",
    "href": "books/consilience.html#more-info",
    "title": "Consilience",
    "section": "More info",
    "text": "More info\n\nConsilience: The Unity of Knowledge"
  },
  {
    "objectID": "books/dataScienceAtCommandLine.html#more-info",
    "href": "books/dataScienceAtCommandLine.html#more-info",
    "title": "Data Science at the Command Line",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/Desanimdelucre.html#more-info",
    "href": "books/Desanimdelucre.html#more-info",
    "title": "Desànim de lucre",
    "section": "More info",
    "text": "More info\nEn aquest assaig de perspectiva europea, Abel Cutillas explica com des de la Segona Guerra Mundial tots els discursos a Occident estan pensats per explotar la feblesa i frenar la història.\nGairebé un segle després de la profecia d’Adorno segons la qual la cultura quedaria subjugada al mercat, la indústria cultural governa i la banalitat regna.\nLes idees, però, es mantenen intactes, i les biblioteques segueixen obertes: “Els homes continuen pensant. La vida continua”.\n\nDesànim de lucre"
  },
  {
    "objectID": "books/descartesError.html#more-info",
    "href": "books/descartesError.html#more-info",
    "title": "Descartes’ Error",
    "section": "More info",
    "text": "More info\n\nDescartes’ Error: Emotion, Reason, and the Human Brain"
  },
  {
    "objectID": "books/designPatterns.html#more-info",
    "href": "books/designPatterns.html#more-info",
    "title": "Design Patterns",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/devops_with_openshift_oreilly.html#more-info",
    "href": "books/devops_with_openshift_oreilly.html#more-info",
    "title": "DevOps with OpenShift",
    "section": "More info",
    "text": "More info\n\nDevOps with OpenShift RedHat pdf\nDevOps with OpenShift pdf"
  },
  {
    "objectID": "books/devops_with_openshift_oreilly.html#what-is-openshift",
    "href": "books/devops_with_openshift_oreilly.html#what-is-openshift",
    "title": "DevOps with OpenShift",
    "section": "What is OpenShift?",
    "text": "What is OpenShift?\nOpenShift is a family of containerization software offerings created by open-source software provider Red Hat. According to the company, Kubernetes is the kernel of distributed systems, while OpenShift is the distribution.\n\nAt its core, OpenShift is a cloud-based Kubernetes container platform that’s considered both containerization software and a platform-as-a-service (PaaS).\n\n\nIt’s also partly built on Docker, another popular containerization platform.\n\nOpenShift offers consistent security, built-in monitoring, centralized policy management, and compatibility with Kubernetes container workloads. It’s fast, enables self-service provisioning, and integrates with a variety of tools. In other words, there’s no vendor lock-in.\nPreviously known as Origin, the open-source platform, OpenShift OKD lets developers create, test, and deploy applications on the cloud. It also supports several programming languages, including Go, Node.js, Ruby, Python, PHP, Perl, and Java."
  },
  {
    "objectID": "books/diveIntoDesignPatterns.html#more-info",
    "href": "books/diveIntoDesignPatterns.html#more-info",
    "title": "Dive Into DESIGN PATTERNS",
    "section": "More info",
    "text": "More info\n\nAlexander Shvets, 2022, Dive Into DESIGN PATTERNS: An ebook on design patterns and the principles behind them\nAlexander Shvets Design Patterns Explained Simply.pdf\nPatterns github"
  },
  {
    "objectID": "books/domaindrivendesign.html#more-info",
    "href": "books/domaindrivendesign.html#more-info",
    "title": "Domain Driven Design",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/DoNotBelieveEverythingYouThink.html#more-info",
    "href": "books/DoNotBelieveEverythingYouThink.html#more-info",
    "title": "Don’t Believe Everything You Think",
    "section": "More info",
    "text": "More info\n\nDon’t Believe Everything You Think: Why Your Thinking Is The Beginning & End Of Suffering (Beyond Suffering)"
  },
  {
    "objectID": "books/elements_style.html#more-info",
    "href": "books/elements_style.html#more-info",
    "title": "Elements of Style",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/execution.html#more-info",
    "href": "books/execution.html#more-info",
    "title": "Execution",
    "section": "More info",
    "text": "More info\nWhen Execution was first published, it changed the way we did our jobs by focusing on the critical importance of the discipline of execution the ability to make the final leap to success by actually getting things done.\nLarry Bossidy and Ram Charan now reframe their message for a world in which the old rules have been shattered, radical change is becoming routine, and the ability to execute is more important than ever. Now and for the foreseeable future:\n\nGrowth will be slower. But the company that executes well will have the confidence, speed, and resources to move fast as new opportunities emerge.\nCompetition will be fiercer, with companies searching for any possible advantage in every area from products and technologies to location and management.\nGovernments will take on new roles in their national economies, some as partners to business, others imposing constraints. Companies that execute well will be more attractive to government entities as partners and suppliers and better prepared to adapt to a new wave of regulation.\nRisk management will become a top priority for every leader. Execution gives you an edge in detecting new internal and external threats and in weathering crises that can never be fully predicted.\n\nExecution shows how to link together people, strategy, and operations, the three core processes of every business. Leading these processes is the real job of running a business, not formulating a “vision” and leaving the work of carrying it out to others.\nBossidy and Charan show the importance of being deeply and passionately engaged in an organization and why robust dialogues about people, strategy, and operations result in a business based on intellectual honesty and realism."
  },
  {
    "objectID": "books/execution.html#execution",
    "href": "books/execution.html#execution",
    "title": "Execution",
    "section": "Execution",
    "text": "Execution\nExecution is often thought about as doing things more effectively, more carefully, or with more attention to the details:\n\nExecution is a discipline, and integral to strategy.\nExecution is the major job of the business leader.\nExecution must be a core element of an organization’s culture.\n\nThe core processes are tightly linked together and need to be connected to the everyday realities of the business by creating a discipline of execution around:\n\nPeople\nStrategy\nBudgeting/Operations"
  },
  {
    "objectID": "books/execution.html#key-elements-of-core-processes",
    "href": "books/execution.html#key-elements-of-core-processes",
    "title": "Execution",
    "section": "Key elements of core processes",
    "text": "Key elements of core processes\nThe leader must be in charge of getting things done by running the three core processes: 1) by picking other leaders, 2) setting the strategic direction, and 3) conducting operations. Businesses that execute prosecute these core processes with rigor, intensity, and depth. But leading for execution is not about micromanaging or being “hands on,” it’s about active involvement and doing the things that leaders should be doing.\n\nPeople\n\nDefines who’s going to achieve the strategy. If you don’t get the people process right, you will never fulfill the potential of your business. roles\nUse leadership messaging to guide the culture, clarify the goals and issues, and to change employees’ attitudes. scrumMaster and productOwner\nBehaviors are beliefs turned into action, and behaviors deliver the results. habits\nFocus on how people execute, not merely the outcomes. metrics\nCoach others and help them learn how to execute. scrumMaster\nHold people** accountable and provide constant feedback** on progress. dailyScrum\nA big shortcoming is to be backward-looking; focused on evaluating the jobs people are doing today. Instead, focus on whether individuals can handle the jobs of tomorrow. who-will-you-be-5yfn\n\n\n\nStrategy\n\nDefines where the business wants to go. productBacklog\nCorporate-level strategy is the vehicle for allocating resources among all of the business units. time and mental-energy\nIn shaping the plan, involve all of the people who are responsible for the strategic plan’s outcome. scrum\nSet goals based on the organization’s capabilities for delivering results. An astonishing number of strategies fail because leaders don’t make a realistic assessment of whether the organization can execute the plan. sprint\nSet milestones for the progress of the plan (they bring reality to the plan). sprint-goal\n\n\n\nBudgeting/Operations\n\nThe operating plan provides the** path for people to execute** the plan. kanban\nSet contingency plans to deal with the unexpected. pavo-land\nBudgets often have little to do with the reality of execution because they’re merely numbers and gaming exercises. spaceX-rule1\nDebating the assumptions is one of the most critical parts of any operation plan and review. spaceX-rule1\n\nIf you have leaders with the right behavior, a culture that rewards execution, and a consistent system for getting the right people in the right jobs, the foundation is in place for operating and managing each of the core processes effectively. leadership-by-action"
  },
  {
    "objectID": "books/execution.html#essential-behaviors",
    "href": "books/execution.html#essential-behaviors",
    "title": "Execution",
    "section": "7 essential behaviors",
    "text": "7 essential behaviors\n\nKnow your people and your business\n\nLeaders have to “live” their businesses and be in touch with the day-to-day realities.\nSearch for people with an enormous drive for winning; with energy and enthusiasm for execution. These people get their satisfaction from getting things done.\n\nInsist on realism\n\nRealism is the heart of execution but many organizations are full of people who are trying to avoid or shade reality.\nYou cannot have an execution culture without robust dialogue, which starts when people go in with open minds.\nHarmony can be the enemy of truth. A good motto is to observe “Truth over harmony.”\n\nSet clear goals and priorities\n\nLeaders who execute focus on very few clear priorities; ones that everyone can grasp.\nGetting things done through others is a fundamental leadership skill.\n\nFollow through\n\nThe failure to follow through is widespread in business and a major cause of poor execution.\nFollow-through is a cornerstone of execution; ensuring that people are doing the things they committed to do.\n\nReward the doers\n\nMany companies do such as poor job of linking rewards to performance that there’s little correlation at all.\nReward not just strong achievements on numbers but also the desirable behaviors that people actually adopt.\n\nExpand people’s capabilities\n\nCoaching is the single most important part of expanding others’ capabilities, and the most effective way to coach is to observe a person in action and then provide specific useful feedback.\n\nKnow yourself\n\nIt takes emotional fortitude to be open to whatever information you need, whether it’s what you like to hear or not. The four core qualities that make up emotional fortitude are authenticity, self-awareness, self-mastery, and humility."
  },
  {
    "objectID": "books/execution.html#links",
    "href": "books/execution.html#links",
    "title": "Execution",
    "section": "Links",
    "text": "Links\n\nBook summary: Exection The Discipline of Getting Things Done by BOSSIDY, CHARAN\nExecution — The Discipline of Getting Things Done — Book Summary"
  },
  {
    "objectID": "books/fooledByRandomness.html#more-info",
    "href": "books/fooledByRandomness.html#more-info",
    "title": "Fooled by Randomness",
    "section": "More info",
    "text": "More info\n\nFooled by Randomness: The Hidden Role of Chance in Life and in the Markets (Incerto)"
  },
  {
    "objectID": "books/gettingthingsdone.html#more-info",
    "href": "books/gettingthingsdone.html#more-info",
    "title": "Getting Things Done",
    "section": "More info",
    "text": "More info\nIn today’s world, yesterday’s methods just don’t work. In Getting Things Done, veteran coach and management consultant David Allen shares the breakthrough methods for stress-free performance.\n\n\n\n\n\n\nPlease, relax\n\n\n\nAllen’s premise is simple: our productivity is directly proportional to our ability to relax.\nOnly when our minds are clear and our thoughts are organized can we achieve effective productivity and unleash our creative potential.\n\n\nThe primary reason for organizing is to reduce cognitive load: to eliminate the need to constantly be thinking, What do I need to do about this?"
  },
  {
    "objectID": "books/gettingthingsdone.html#overview",
    "href": "books/gettingthingsdone.html#overview",
    "title": "Getting Things Done",
    "section": "Overview",
    "text": "Overview\n\nIf we don’t appropriately manage the open loops in our life, our attention will get pulled.\nOverwhelm comes from:\n\nnot clarifying what your intended outcome is,\nnot deciding what the very next action is, and\nnot being aware of your outcome and next-previous-action.\n\nYou need to transform all the stuff you attract and accumulate into a clear inventory."
  },
  {
    "objectID": "books/gettingthingsdone.html#structure",
    "href": "books/gettingthingsdone.html#structure",
    "title": "Getting Things Done",
    "section": "Structure",
    "text": "Structure\nGetting things done requires two basic components:\n\nOutcome: Defining what “done” means\nAction: What “doing” looks like\n\n\n\n\n\n\n\nRelevance of metrics\n\n\n\nWe need some real metrics to feed our decision-making and be aware to where we are going.\n\n\nYou need to control commitments, projects, and actions in two ways:\n\nHorizontally. Maintaining coherence across all the activities in which you are involved\nVertically. Managing thinking, development, and coordination of individual topics and projects."
  },
  {
    "objectID": "books/gettingthingsdone.html#five-tips",
    "href": "books/gettingthingsdone.html#five-tips",
    "title": "Getting Things Done",
    "section": "Five tips",
    "text": "Five tips\nHere are a few takeaways and tactics:\n\nDone\nGetting things done requires defining what done means and what doing looks like.\n\nWhat is done? What is doing?\n\n\nWe need to transform all the ‘stuff’ we attract and accumulate into a clear inventory of meaningful actions, projects, and usable information.\n\n\n\nAttention\nMastering your workflow involves capturing what has your attention, clarifying what it means, putting it where it belongs, reviewing it frequently, and engaging with it.\n\nHow de you see the world? What is your narrative?\n\n\nYou must use your mind to get things off your mind and focus, if not: confussion and with confussion comes very bad decision-making.\n\n\nUntil your thoughts have been clarified and decisions have been made (and create a pointer) your brain can’t give up the job.\n\n\n\npointer: decision, processes, targets, outocmes are data, information. The resulting data must be stored in a system that you absolutely know you will access and think about when you need to.\n\n\nNow!\nIf an action will take less than two minutes, it should be done at the moment it is defined.\n\nSave energy, do it now!\n\n\n\nAnxiety\nAnxiety and guilt don’t come from having too much to do; it comes from breaking agreements with yourself.\n\nYour mind is for having ideas, not for holding them.\n\n\nIt’s a waste of time and energy to keep thinking about something that you make no progress on."
  },
  {
    "objectID": "books/gettingthingsdone.html#more-info-1",
    "href": "books/gettingthingsdone.html#more-info-1",
    "title": "Getting Things Done",
    "section": "More info",
    "text": "More info\n\nGetting Things Done Summary\n\n\n\n\nGetting Things Done Workflow Chart"
  },
  {
    "objectID": "books/HowtoCreateaMind.html#more-info",
    "href": "books/HowtoCreateaMind.html#more-info",
    "title": "How to Create a Mind",
    "section": "More info",
    "text": "More info\n\nHow to Create a Mind: The Secret of Human Thought Revealed"
  },
  {
    "objectID": "books/HowtoFailatAlmostEverything.html#more-info",
    "href": "books/HowtoFailatAlmostEverything.html#more-info",
    "title": "How to Fail at Almost Everything and Still Win Big",
    "section": "More info",
    "text": "More info\nDilbert creator Scott Adams’ funny memoir about his many failures and what they eventually taught him about success”\n\nHow to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life"
  },
  {
    "objectID": "books/howToMeasureAnyThing.html#more-info",
    "href": "books/howToMeasureAnyThing.html#more-info",
    "title": "How to Measure Anything",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/Ikigai.html#more-info",
    "href": "books/Ikigai.html#more-info",
    "title": "Ikigai",
    "section": "More info",
    "text": "More info\nThe people of Japan believe that everyone has an ikigai – a reason to jump out of bed each morning. And according to the residents of the Japanese island of Okinawa – the world’s longest-living people – finding it is the key to a longer and more fulfilled life. Inspiring and comforting, this book will give you the life-changing tools to uncover your personal ikigai. It will show you how to leave urgency behind, find your purpose, nurture friendships and throw yourself into your passions.\n\nIkigai: The Japanese Secret to a Long and Happy Life"
  },
  {
    "objectID": "books/incerto.html#more-info",
    "href": "books/incerto.html#more-info",
    "title": "Incerto",
    "section": "More info",
    "text": "More info\nIncerto 4-Book Bundle:\n\nAntifragile,\nThe Black Swan,\nFooled by Randomness,\nThe Bed of Procrustes\n\nNassim Nicholas Taleb’s landmark Incerto series is an investigation of luck, uncertainty, probability, opacity, human error, risk, disorder, and decision-making in a world we don’t understand, in nonoverlapping and standalone books. All four volumes—Antifragile, The Black Swan, Fooled by Randomness, and the special expanded edition of The Bed of Procrustes, updated with more than 50 percent new material—are now together in one ebook bundle."
  },
  {
    "objectID": "books/Kubernetes_Native_Microservices.html#more-info",
    "href": "books/Kubernetes_Native_Microservices.html#more-info",
    "title": "Kubernetes Native Microservices",
    "section": "More info",
    "text": "More info\n\n\n\nBank app architecture\n\n\n\nKubernetes Native Microservices ebook\nKubernetes Native Microservices github"
  },
  {
    "objectID": "books/ManSearchForMeaning.html#more-info",
    "href": "books/ManSearchForMeaning.html#more-info",
    "title": "Man’s Search for Meaning",
    "section": "More info",
    "text": "More info\nA prominent Viennese psychiatrist before the war, Viktor Frankl was uniquely able to observe the way that both he and others in Auschwitz coped (or didn’t) with the experience. He noticed that it was the men who comforted others and who gave away their last piece of bread who survived the longest - and who offered proof that everything can be taken away from us except the ability to choose our attitude in any given set of circumstances. The sort of person the concentration camp prisoner became was the result of an inner decision and not of camp influences alone. Only those who allowed their inner hold on their moral and spiritual selves to subside eventually fell victim to the camp’s degenerating influence - while those who made a victory of those experiences turned them into an inner triumph. Frankl came to believe man’s deepest desire is to search for meaning and purpose.\n\nMan’s Search for Meaning"
  },
  {
    "objectID": "books/MapsOfMeaning.html#more-info",
    "href": "books/MapsOfMeaning.html#more-info",
    "title": "Maps of Meaning",
    "section": "More info",
    "text": "More info\n\nMaps of Meaning: The Architecture of Belief"
  },
  {
    "objectID": "books/microservices-for-java-developers.html#more-info",
    "href": "books/microservices-for-java-developers.html#more-info",
    "title": "Microservices for Java Developers",
    "section": "More info",
    "text": "More info\nMicroservices for Java Developers: A Hands-On Introduction to Frameworks and Containers - Java Developers\nMicroservices for Java Developers: A Hands-On Introduction to Frameworks and Containers - Java Developers\nThe Microservice architectural approach is more than just about technology. It reaches into the foundation of your organization to allow you to build truly scalable, adaptive, complex systems that help a business adapt to rapidly changing competitive markets. Using a hands-on approach to three useful Java frameworks for building Microservices: Spring Boot, Dropwizard, and WildFly Swarm you can compare and contrast them through a handful of familiar patterns, including:\n\nExposing a service\nConfiguration at runtime\nExposing metrics/insight\nCalling downstream services in a safe manner\n\nExplore concepts like immutable delivery and how Linux Containers and Kubernetes can be used to deploy and manage Microservices."
  },
  {
    "objectID": "books/MicroservicesPatterns.html#more-info",
    "href": "books/MicroservicesPatterns.html#more-info",
    "title": "Microservices Patterns",
    "section": "More info",
    "text": "More info\n\n\n\nMicroservices Example ftgo\n\n\n\nMicroservices Patterns\nMicroservices Patterns GitHub\nMicroservices Patterns e-book\n\nThis book teaches enterprise developers and architects how to build applications with the microservice architecture. Rather than simply advocating for the use the microservice architecture, this clearly-written guide takes a balanced, pragmatic approach, exploring both the benefits and drawbacks.\nMicroservices.io is brought to you by Chris Richardson. Experienced software architect, author of POJOs in Action, the creator of the original CloudFoundry.com, and the author of Microservices patterns.\nChris helps clients around the world adopt the microservice architecture through consulting engagements, and training workshops."
  },
  {
    "objectID": "books/MindManagementNotTimeManagement.html#more-info",
    "href": "books/MindManagementNotTimeManagement.html#more-info",
    "title": "Mind Management Not Time Management",
    "section": "More info",
    "text": "More info\n\nMind Management, Not Time Management (epub/mobi ebook)\nMind Management (Not Time Management)\nHow the Seven Mental States of Creative Work guide your art through The Four Stages of Control\nArrange your time and tasks according to these seven mental states, and you’ll be a creativity machine\nDavid Kadavy\n\n\nYou have the time. Do you have the energy? Do you have the proper mental approach for the moment?\n\nYou’ve done everything you can to save time. Every productivity tip, every “life hack,” every time management technique.\nBut the more time you save, the less time you have. The more overwhelmed, stressed, exhausted you feel.\n“Time management” is squeezing blood from a stone."
  },
  {
    "objectID": "books/MindManagementNotTimeManagement.html#three-important-questions",
    "href": "books/MindManagementNotTimeManagement.html#three-important-questions",
    "title": "Mind Management Not Time Management",
    "section": "Three Important Questions",
    "text": "Three Important Questions\n\nWhat kind of work do I need to do right now? Is there anything extremely pressing, or can I let my mental state guide the work that I decide to do right now?\n\n\nWhat kind of mental state am I in right now? Am I in the mood for draft writing, outlining, researching, exploring, or polishing?\n\n\nIs there something I can do to get myself into the right mental state? There are different “hacks” or rituals that would help me switch mental states: exercising, massages, different types of music, different types of teas, epsom salt baths, and neurotransmitter-supporting amino acids all eventually served their own purposes."
  },
  {
    "objectID": "books/MindManagementNotTimeManagement.html#four-tips",
    "href": "books/MindManagementNotTimeManagement.html#four-tips",
    "title": "Mind Management Not Time Management",
    "section": "Four tips",
    "text": "Four tips\nHere are a few takeaways and tactics:\n\nYour brain is plastic\nEvery time your neurons fire, it makes it easier for those same pathways to fire again. It used to believed that the brain was a static organ once you reached adulthood, but now we know that the brain changes throughout life.\n\nIntertia Law\nEach time you perform a thought or action, you make it easier for your brain to reproduce that thought or action.\n\nThis has some pretty clear implications for positive vs. negative thoughts, and explains why meditation is so powerful (which I’ll get to in a bit).\n\n\nLove your prefrontal cortex\nYour prefrontal cortex is the “newest” (in terms of evolution) part of your brain. Your prefrontal cortex is in charge of things like prioritization, planning, and suppressing urges. But, your prefrontal cortex is small, but energy-hungry. So when it gets tired, it’s hard for you to think about the overarching purpose of what it is you’re doing right now, or to keep yourself from checking Facebook and Twitter every 2 minutes.\n\nRest\nIt’s important to get mental rest to keep your prefrontal cortex working well, and to set aside special time dedicated only to prioritization.\n\n\n\nFight your amygdala\nYour amygdala is the oldest one of the older (in terms of evolution) parts of your brain. Your amygdala is extremely fear-driven, and is programmed to save you from danger. The really tough part is that your amygdala communicates with your body even before the rest of your brain (which can handle much more complex thinking).\n\nSurvivor’s mindset\nYour amygdala always wants you take the “safe” route, and will stifle your creativity, so you have to be wary of its power and be aware how she disconects you from your prefrontal cortex.\n\n\n\nRestorative things are productive\nGiven this struggle between your prefrontal cortex and amygdala, and the fact that your prefrontal cortex is so easily fatigued, it shoustruggle between your prefrontal cortex and amygdala,ld be no surprise that rest is important to using your mind effectively.\nIf you think you’re getting more work done by working until you collapse every night, I’d argue that you probably aren’t. You’re probably depleting your prefrontal cortex, and instead of thinking strategically, are filling up the time with reactionary, fear-driven (amygdala-driven) “work.”\n\nFeed your soul\nRestorative activities, such as exercising, sleeping, and spending time with loved ones help your brain reorganize. If you’re skeptical, there’s research showing that positive mood and sleep encourage insightful thinking, and that close relationships strongly affect happiness."
  },
  {
    "objectID": "books/mindset.html#more-info",
    "href": "books/mindset.html#more-info",
    "title": "Mindset",
    "section": "More info",
    "text": "More info\nFrom the renowned psychologist who introduced the world to “growth mindset” comes this updated edition of the million-copy bestseller—featuring transformative insights into redefining success, building lifelong resilience, and supercharging self-improvement.\n“Through clever research studies and engaging writing, Dweck illuminates how our beliefs about our capabilities exert tremendous influence on how we learn and which paths we take in life.”—Bill Gates, GatesNotes\n“It’s not always the people who start out the smartest who end up the smartest.”\nAfter decades of research, world-renowned Stanford University psychologist Carol S. Dweck, Ph.D., discovered a simple but groundbreaking idea: the power of mindset. In this brilliant book, she shows how success in school, work, sports, the arts, and almost every area of human endeavor can be dramatically influenced by how we think about our talents and abilities. People with a fixed mindset—those who believe that abilities are fixed—are less likely to flourish than those with a growth mindset—those who believe that abilities can be developed. Mindset reveals how great parents, teachers, managers, and athletes can put this idea to use to foster outstanding accomplishment.\nIn this edition, Dweck offers new insights into her now famous and broadly embraced concept. She introduces a phenomenon she calls false growth mindset and guides people toward adopting a deeper, truer growth mindset. She also expands the mindset concept beyond the individual, applying it to the cultures of groups and organizations. With the right mindset, you can motivate those you lead, teach, and love—to transform their lives and your own."
  },
  {
    "objectID": "books/modern-java-ee-design-patterns.html#more-info",
    "href": "books/modern-java-ee-design-patterns.html#more-info",
    "title": "Modern Java EE Design Patterns",
    "section": "More info",
    "text": "More info\n\nModern Java EE Design Patterns PDF\nModern Java EE Design Patterns\n\n\nCreating Distributed Java EE Architecture\nWith the ascent of DevOps, microservices, containers, and cloud-based development platforms, the gap between state-of-the-art solutions and the technology that enterprises typically support has greatly increased.\nCan it be done? Is it even a good idea? This report thoroughly explores the possibility and provides savvy advice for enterprises that want to move ahead.\n\nThe issue is complex: Java EE wasn’t built with the distributed application approach in mind, but rather as one monolithic server runtime or cluster hosting many different applications.\n\nIf you’re part of an enterprise development team investigating the use of microservices with Java EE, there are several items to consider:\n\nUnderstand the challenges of starting a greenfield development vs tearing apart an existing brownfield application into services\nExamine your business domain to see if microservices would be a good fit\nExplore best practices for automation, high availability, data separation, and performance\nAlign your development teams around business capabilities and responsibilities\nInspect design patterns such as aggregator, proxy, pipeline, or shared resources to model service interactions"
  },
  {
    "objectID": "books/MyLifeasQuant.html#more-info",
    "href": "books/MyLifeasQuant.html#more-info",
    "title": "My Life as Quant",
    "section": "More info",
    "text": "More info\nIn My Life as a Quant, Emanuel Derman relives his exciting journey as one of the first high-energy particle physicists to migrate to Wall Street. Page by page, Derman details his adventures in this field–analyzing the incompatible personas of traders and quants, and discussing the dissimilar nature of knowledge in physics and finance. Throughout this tale, he also reflects on the appropriate way to apply the refined methods of physics to the hurly-burly world of markets.\n\nMy Life as Quant"
  },
  {
    "objectID": "books/MyStrokeofInsight.html#more-info",
    "href": "books/MyStrokeofInsight.html#more-info",
    "title": "My Stroke of Insight",
    "section": "More info",
    "text": "More info\nOn December 10, 1996, Jill Bolte Taylor, a thirty-seven- year-old Harvard-trained brain scientist experienced a massive stroke in the left hemisphere of her brain.\nAs she observed her mind deteriorate to the point that she could not walk, talk, read, write, or recall any of her life-all within four hours-Taylor alternated between the euphoria of the intuitive and kinesthetic right brain, in which she felt a sense of complete well-being and peace, and the logical, sequential left brain, which recognized she was having a stroke and enabled her to seek help before she was completely lost.\nIt would take her eight years to fully recover.\n\nMy Stroke of Insight: A Brain Scientist’s Personal Journey"
  },
  {
    "objectID": "books/quarkusCookBook.html#more-info",
    "href": "books/quarkusCookBook.html#more-info",
    "title": "Quarkus Cookbook",
    "section": "More info",
    "text": "More info\nThe recipes in this book show mid-level to senior developers familiar with Java enterprise application development how to get started with Quarkus quickly. You’ll become familiar with how Quarkus works with the wider Java ecosystem and discover ways to adapt this framework to your particular needs.\n\nWe said that Quarkus is meant to run within Kubernetes. That sounds great, but we know lots of things can run within Kubernetes. Throw your application in a Docker container, and it will run on Kubernetes. While this is true, there are a number of things that traditionally have to be done to properly tune, size, and configure your application to run efficiently within Kubernetes. You also have to pull out your text editor of choice and craft multiple YAML files—and let’s be honest, no one really enjoys doing all that."
  },
  {
    "objectID": "books/quarkusSpringDevelopers.html#more-info",
    "href": "books/quarkusSpringDevelopers.html#more-info",
    "title": "Quarkus for Spring Developers",
    "section": "More info",
    "text": "More info\n\nQuarkus for Spring Developers\nQuarkus for Spring Developers GitHub\nQuarkus for Spring Developers Book\n\n\nFor me, the paradigm that Quarkus brings is a major one for Java. This is one of these moments in your career when you should take stock and explore a new technology in-depth! This book makes it easy to do that, providing like-for-like examples of your favorite Spring development patterns mapped to their Quarkus equivalents (don’t panic, there are many similarities) and giving you an understanding of the fundamentals at play under the hood.\n\n—Martijn Verburg (aka “The Diabolical Developer”) Principal Group Manager (Java), Microsoft Eclipse Adoptium Steering Committee member"
  },
  {
    "objectID": "books/relaxationrevolution.html#more-info",
    "href": "books/relaxationrevolution.html#more-info",
    "title": "The Relaxation Revolution",
    "section": "More info",
    "text": "More info\n\nThe Relaxation Response\nBriefly stated, the relaxation response is defined as the response that is the opposite of the fight-or-flight or stress response. It is characterized by the following: decreased metabolism, heart rate, blood pressure, and rate of breathing; a decrease or “calming” in brain activity; an increase in attention and decision-making functions of the brain; and changes in gene activity that are the opposite of those associated with stress.”\nThe relaxation response. As Benson says above, it’s basically the opposite of the fight-or-flight response that most of us spend way too much of our time in these days. Our bodies are brilliantly architected in such a way that, when faced with a life-threatening danger, all systems necessary for our survival are activated: from our hearts pumping blood to our legs so we can make a quick exit to adrenalin flooding our system so we’re as strong as possible for a potential fight.\nNow, back in the day when we needed to worry about saber-tooth tigers having us for lunch, that fight-or-flight response mechanism was pretty sweet. Unfortunately, our body’s evolution hasn’t quite kept up with our mind’s evolution and now a sideways glance from our boss or someone cutting us off in traffic often elicits the same response. All. Day. Long. That constant barrage takes a significant toll on our well-being. And, researchers have discovered that our ability to induce its opposite relaxation response is huge.\n\n\nSummary\nEnhancing Your Personal Health Through the Science and Genetics of Mind Body Healing\n\nSummary by Philosophers Notes Brian Johnson"
  },
  {
    "objectID": "books/scrum.html#more-info",
    "href": "books/scrum.html#more-info",
    "title": "Scrum",
    "section": "More info",
    "text": "More info\n\nScrum: The Art of Doing Twice the Work in Half the Time\n\n\nThe definitive book on the Scrum methodology from its co-creator and the CEO of Scrum, Inc., Jeff Sutherland.\nScrum is the revolutionary approach to project management and team building that has helped to transform everything from software companies to the US military to healthcare in major American hospitals. In this major new book its originator, Jeff Sutherland, explains precisely and step by step how it operates - and how it can be made to work for anyone, anywhere. Take the FBI attempt to digitize its records, for example. As with so many software projects the first attempt failed, having taken four years and cost over $400 million.Then the FBI turned to Scrum, and just over a year later unveiled a functioning system that cost less than a tenth of the first project and employed a tenth of the staff. And it’s not just grand projects that Scrum can help with.\nEvery organisation, whatever its size, constantly has to come to grips with delivering a product or service on time and on budget. Scrum shows you how. It explains how to define precisely what it is that you are seeking to achieve, how to set up the team to achieve it, and how to monitor progress until the project is successfully completed. Filled with practical examples drawn from all types and organisation it will make you rethink the fundamentals of successful management - and show you how to get things done however everyday or ambitious, however small or large your organisation."
  },
  {
    "objectID": "books/skinInTheGame.html#more-info",
    "href": "books/skinInTheGame.html#more-info",
    "title": "Skin in the Game",
    "section": "More info",
    "text": "More info\n\nSkin in the Game: Hidden Asymmetries in Daily Life (Incerto)"
  },
  {
    "objectID": "books/sre.html#more-info",
    "href": "books/sre.html#more-info",
    "title": "Site Reliability Engineering",
    "section": "More info",
    "text": "More info\n\nSRE site: books\nSRE site: Site Reliability Engineering: How Google Runs Production Systems\nGoogle books: Site Reliability Engineering: How Google Runs Production Systems\n\n\nHope is not a strategy. - Traditional SRE saying\n\n\nIf a human operator needs to touch your system during normal operations, you have a bug. The definition of normal changes as your systems grow. - Carla Geisser, Google SRE\n\n\nThe price of reliability is the pursuit of the utmost simplicity. - C.A.R. Hoare, Turing Award lecture"
  },
  {
    "objectID": "books/sre.html#devops-or-sre",
    "href": "books/sre.html#devops-or-sre",
    "title": "Site Reliability Engineering",
    "section": "DevOps or SRE?",
    "text": "DevOps or SRE?\nThe term “DevOps” emerged in industry in late 2008 and as of this writing (early 2016) is still in a state of flux. Its core principles—involvement of the IT function in each phase of a system’s design and development, heavy reliance on automation versus human effort, the application of engineering practices and tools to operations tasks—are consistent with many of SRE’s principles and practices. One could view DevOps as a generalization of several core SRE principles to a wider range of organizations, management structures, and personnel. One could equivalently view SRE as a specific implementation of DevOps with some idiosyncratic extensions.\nSRE and DevOps ask two different but equally valuable questions:\n\nDevOps asks what needs to be done.\nSRE asks how that can be done."
  },
  {
    "objectID": "books/sre.html#site-reliability-engineers-day-to-day",
    "href": "books/sre.html#site-reliability-engineers-day-to-day",
    "title": "Site Reliability Engineering",
    "section": "Site reliability engineers day to day",
    "text": "Site reliability engineers day to day\nSite reliability engineers measure service level indicators (SLIs) and service level objectives (SLOs), while DevOps teams measure the failure rate plus the success rate over time. SREs share responsibilities related to the following DevOps pillars of infrastructural improvement:\n\nReduce organizational silos SREs don’t discuss how many silos exist in company, but they encourage everyone else to discuss the issue. This discussion is accomplished by using the tools and techniques across the company, helping to spread ownership across all employees.\n\n\nAccept failure as normal SREs need to make sure that there aren’t too many errors or failures. To do so, they use a formula composed of SLI and SLO scores. SLIs count failures per request, by calculating request latency, throughput of requests per second, or failures per request per time. SLOs are derived from threshold and percentage, and represent the success of SLIs over a certain amount of time.\n\n\nImplement gradual change SREs are all in for change, but in a slow, methodical way. Because companies want to move faster, they demand frequent releases, continually updating the product. So DevOps and SREs must respond quickly but maintain a steady, controlled pace.\n\n\nLeverage tooling and automation Automate as long as it provides value to developers and operations by removing manual tasks.\n\n\nMeasure everything SRE teams need to know that everything is moving in the right direction. This can be accomplished by setting up alerts for various scenarios, embracing peer code review, and/or using unit tests."
  },
  {
    "objectID": "books/sre.html#references",
    "href": "books/sre.html#references",
    "title": "Site Reliability Engineering",
    "section": "References",
    "text": "References\n\nWhat is site reliability engineering (SRE)?"
  },
  {
    "objectID": "books/statusGame.html#more-info",
    "href": "books/statusGame.html#more-info",
    "title": "The Status Game",
    "section": "More info",
    "text": "More info\nThe Status Game: On Social Position and How We Use It - Review\nFor centuries, philosophers and scholars have described human behaviour in terms of sex, power and money. In The Status Game, bestselling author Will Storr radically turns this thinking on its head by arguing that it is our irrepressible craving for status that ultimately defines who we are.\nFrom the era of the hunter-gatherer to today, when we exist as workers in the globalised economy and citizens of online worlds, the need for status has always been wired into us. A wealth of research shows that how much of it we possess dramatically affects not only our happiness and wellbeing but also our physical health – and without sufficient status, we become more ill, and live shorter lives. It’s an unconscious obsession that drives the best and worst of us: our innovation, arts and civilisation as well as our murders, wars and genocides. But why is status such an all-consuming prize? What happens if it’s taken away from us? And how can our unquenchable thirst for it explain cults, moral panics, conspiracy theories, the rise of social media and the ‘culture wars’ of today?\nOn a breathtaking journey through time and culture, The Status Game offers a sweeping rethink of human psychology that will change how you see others – and how you see yourself"
  },
  {
    "objectID": "books/stratospheric.html#more-info",
    "href": "books/stratospheric.html#more-info",
    "title": "Stratospheric",
    "section": "More info",
    "text": "More info\n\n\n\nStratospheric\n\n\n\nFrom Zero to Production with Spring Boot and AWS\n\n\nSummary\nStratospheric: From Zero to Production with Spring Boot and AWS\nAll you need to know to get a Spring Boot application into production with AWS.\n\nWhat’s covered? Develop a production-ready Spring Boot application and deploy it to AWS while integrating several AWS services.\n\n\nInfrastructure as code Learn how to use the AWS CDK (Cloud Development Kit) to define the entire infrastructure with Java code\n\n\nIntegrate AWS services Get familiar with powerful AWS services by implementing features for the sample application\n\n\nDeployment Automate the CI/CD pipeline to get changes deployed to production in a matter of minutes using GitHub Actions\n\n\nOperations Effectively monitor and operate a Spring Boot application in production"
  },
  {
    "objectID": "books/SwimmingwithSharks.html#more-info",
    "href": "books/SwimmingwithSharks.html#more-info",
    "title": "Swimming with Sharks",
    "section": "More info",
    "text": "More info\n\nSwimming with Sharks: My Journey into the World of the Bankers"
  },
  {
    "objectID": "books/theartofagiledevelopment.html#more-info",
    "href": "books/theartofagiledevelopment.html#more-info",
    "title": "The Art of Agile Development",
    "section": "More info",
    "text": "More info\nThe Art of Agile Development contains practical guidance for anyone considering or applying agile development for building valuable software. Plenty of books describe what agile development is or why it helps software projects succeed, but very few combine information for developers, managers, testers, and customers into a single package that they can apply directly. This book provides no-nonsense advice on agile planning, development, delivery, and management taken from the authors’ many years of experience with Extreme Programming (Xp).\nYou get a gestalt view of the agile development process, including comprehensive guidance for non-technical readers and hands-on technical practices for developers and testers. The Art of Agile Development gives you clear answers to questions such as:\nHow can we adopt agile development? Do we really need to pair program? What metrics should we report? What if I can’t get my customer to participate? How much documentation should we write? When do we design and architect? As a non-developer, how should I work with my agile team? Where is my product roadmap? How does Qa fit in?\nThe book teaches you how to adopt Xp practices, describes each practice in detail, then discusses principles that will allow you to modify Xp and create your own agile method.\nIn particular, this book tackles the difficult aspects of agile development: the need for cooperation and trust among team members. Whether you’re currently part of an agile team, working with an agile team, or interested in agile development, this book provides the practical tips you need to start practicing agile development. As your experience grows, the book will grow with you, providing exercises and information that will teach you first to understand the rules of agile development, break them, and ultimately abandon rules altogether as you master the art of agile development. “Jim Shore and Shane Warden expertly explain the pract\n\nThe Art of Agile Development"
  },
  {
    "objectID": "books/theBedOfProcrustes.html#more-info",
    "href": "books/theBedOfProcrustes.html#more-info",
    "title": "The Bed of Procrustes",
    "section": "More info",
    "text": "More info\n\nThe Bed of Procrustes: Philosophical and Practical Aphorisms (Incerto)"
  },
  {
    "objectID": "books/theBlackSwan.html#more-info",
    "href": "books/theBlackSwan.html#more-info",
    "title": "The Black Swan",
    "section": "More info",
    "text": "More info\n\nThe Black Swan: The Impact of the Highly Improbable (Incerto)"
  },
  {
    "objectID": "books/TheChangingWorldOrder.html#more-info",
    "href": "books/TheChangingWorldOrder.html#more-info",
    "title": "The Changing World Order",
    "section": "More info",
    "text": "More info\nA few years ago, Ray Dalio noticed a confluence of political and economic conditions he hadn’t encountered before. They included huge debts and zero or near-zero interest rates that led to massive printing of money in the world’s three major reserve currencies; big political and social conflicts within countries, especially the US, due to the largest wealth, political, and values disparities in more than 100 years; and the rising of a world power (China) to challenge the existing world power (US) and the existing world order. The last time that this confluence occurred was between 1930 and 1945. This realization sent Dalio on a search for the repeating patterns and cause/effect relationships underlying all major changes in wealth and power over the last 500 years.\n\nThe Changing World Order: Why Nations Succeed and Fail\nPRINCIPLES: YOUR GUIDED JOURNAL CREATE YOUR OWN PRINCIPLES TO GET THE WORK AND LIFE YOU WANT"
  },
  {
    "objectID": "books/theCompoundEffect.html#more-info",
    "href": "books/theCompoundEffect.html#more-info",
    "title": "The Compound Effect",
    "section": "More info",
    "text": "More info\n\nThe Compound Effect: Jumpstart Your Income, Your Life, Your Success"
  },
  {
    "objectID": "books/TheCreativeHabit.html#more-info",
    "href": "books/TheCreativeHabit.html#more-info",
    "title": "The Creative Habit",
    "section": "More info",
    "text": "More info\nWhat makes someone creative? How does someone face the empty page, the empty stage and making something where nothing existed before? Not just a dilemma for the artist, it is something everyone faces everyday. What will I cook that isn’t boring? How can I make that memo persuasive? What sales pitch will increase the order, get me the job, lock in that bonus? These too, are creative acts, and they all share a common need: proper preparation. For Twyla Tharp, creativity is no mystery; it’s the product of hard work and preparation, of knowing one’s aims and one’s subject, of learning from approaches taken in the past. It’s a process undertaken every day. It’s a habit. The Creative Habit is not merely a look inside the mind of a remarkable woman with remarkable skills, but a programmatic, inspiring, encouraging guide to help each of us achieve our fullest creative potential.\n\nThe Creative Habit: Learn It"
  },
  {
    "objectID": "books/thefivedisfunctionteam.html#more-info",
    "href": "books/thefivedisfunctionteam.html#more-info",
    "title": "The five disfunctions of a team",
    "section": "More info",
    "text": "More info\n\nThe five disfunctions of a team"
  },
  {
    "objectID": "books/theIntellingenceTrap.html#more-info",
    "href": "books/theIntellingenceTrap.html#more-info",
    "title": "The Intelligence Trap",
    "section": "More info",
    "text": "More info\nA “startling, provocative and potently useful” (James McConnachie, Times UK) examination of the stupid things intelligent people do.\nThe Intelligence Trap explores cutting-edge ideas in our understanding of intelligence and expertise, including “motivated reasoning,” “meta-forgetfulness,” and “functional stupidity.” David Robson reveals the surprising ways that even the brightest minds and most talented organizations can go wrong?from some of Thomas Edison’s worst ideas to failures at NASA—while offering practical advice to avoid mistakes based on the timeless lessons of Benjamin Franklin, Richard Feynman, and Daniel Kahneman."
  },
  {
    "objectID": "books/TheJoyofLiving.html#more-info",
    "href": "books/TheJoyofLiving.html#more-info",
    "title": "The Joy of Living",
    "section": "More info",
    "text": "More info\n\n[The Joy of Living: Unlocking the Secret and Science of Happiness][(https://www.example.com/book/the-joy-of-living](https://www.amazon.es/Joy-Living-Unlocking-Science-Happiness/dp/0307347311){.external}"
  },
  {
    "objectID": "books/TheLinuxcommandline.html#more-info",
    "href": "books/TheLinuxcommandline.html#more-info",
    "title": "The Linux command line",
    "section": "More info",
    "text": "More info\nDesigned for the new command line user, this 555-page volume covers the same material as LinuxCommand.org but in much greater detail. In addition to the basics of command line use and shell scripting, The Linux Command Line includes chapters on many common programs used on the command line, as well as more advanced topics.\n\nThe Linux command line"
  },
  {
    "objectID": "books/theMasterAndHisEmissary.html#more-info",
    "href": "books/theMasterAndHisEmissary.html#more-info",
    "title": "The Master and His Emissary",
    "section": "More info",
    "text": "More info\nSummary"
  },
  {
    "objectID": "books/theMasterAndHisEmissary.html#why-is-the-brain-divided",
    "href": "books/theMasterAndHisEmissary.html#why-is-the-brain-divided",
    "title": "The Master and His Emissary",
    "section": "Why is the brain divided?",
    "text": "Why is the brain divided?\nThe difference between right and left hemispheres has been puzzled over for centuries. Drawing upon a vast body of brain research, the renowned psychiatrist, author, and thinker Iain McGilchrist reveals that the difference between the two sides is profound―two whole, coherent, but incompatible ways of experiencing the world.\n\nThe detail-oriented left hemisphere prefers mechanisms to living things and is inclined to self-interest, while the right hemisphere has greater breadth, flexibility, and generosity.\n\nMcGilchrist takes the reader on a journey through the history of Western culture, illustrating the tension between these two worlds as revealed in the thought and belief of thinkers and artists from the ancient to the modern, from Aeschylus to Magritte.\nHe ultimately argues that, despite its inferior grasp of reality, the left hemisphere is increasingly taking precedence in today’s world―with potentially disastrous consequences."
  },
  {
    "objectID": "books/theMasterAndHisEmissary.html#key-ideas",
    "href": "books/theMasterAndHisEmissary.html#key-ideas",
    "title": "The Master and His Emissary",
    "section": "Key-ideas",
    "text": "Key-ideas\n\nThe different functions of the two hemispheres of your brain and what this means for how you experience the world.\nHow language and categorisation can stifle and give the false illusion of understanding our own reality.\nHow the types of attention we pay to the world dramatically impact the way we perceive the world."
  },
  {
    "objectID": "books/theMasterAndHisEmissary.html#brain-modes-cycle",
    "href": "books/theMasterAndHisEmissary.html#brain-modes-cycle",
    "title": "The Master and His Emissary",
    "section": "Brain modes cycle",
    "text": "Brain modes cycle\nWhich tool are we looking for?\n\nIntuition, imagination\nAnalysis, reason, science\nAha, Eureka, Fit in?, I see it!\n\nHow do you approach it?\n\nPicnic\nBuilder job\nRabbit hole, let it go, wait & see\n\nHow does it work?\n\nContext, directions, flow, connections, whole, dynamic, meaning\nParts, categories, black or white, static, mechanics. just isolated elements.\nMaps of meaning, deep understanding."
  },
  {
    "objectID": "books/TheMatterWithThings.html#more-info",
    "href": "books/TheMatterWithThings.html#more-info",
    "title": "The Matter With Things",
    "section": "More info",
    "text": "More info\nThe Matter with Things, the new 2-volume book from the author of the widely acclaimed The Master and his Emissary: The Divided Brain and the Making of the Western World (over 100,000 copies sold worldwide).\nIs the world essentially inert and mechanical – nothing but a collection of things for us to use? Are we ourselves nothing but the playthings of chance, embroiled in a war of all against all? Why, indeed, are we engaged in destroying everything that is valuable to us? In this landmark new book, Iain McGilchrist addresses some of the oldest and hardest questions humanity faces – ones that, however, have a practical urgency for all of us today:\nWho are we? What is the world? How can we understand consciousness, matter, space and time? Is the cosmos without purpose or value? Can we really neglect the sacred and divine? In doing so, he argues that we have become enslaved to an account of things dominated by the brain’s left hemisphere, one that blinds us to an awe-inspiring reality that is all around us, had we but eyes to see it. He suggests that in order to understand ourselves and the world we need science and intuition, reason and imagination, not just one or two; that they are in any case far from being in conflict; and that the brain’s right hemisphere plays the most important part in each. And he shows us how to recognise the ‘signature’ of the left hemisphere in our thinking, so as to avoid making decisions that bring disaster in their wake.\nFollowing the paths of cutting-edge neurology, philosophy and physics, he reveals how each leads us to a similar vision of the world, one that is both profound and beautiful – and happens to be in line with the deepest traditions of human wisdom.\nIt is a vision that returns the world to life, and us to a better way of living in it: one we must embrace if we are to survive\n\nThe Matter With Things: Our Brains, Our Delusions, and the Unmaking of the World"
  },
  {
    "objectID": "books/TheMoleculeofMore.html#more-info",
    "href": "books/TheMoleculeofMore.html#more-info",
    "title": "The Molecule of More",
    "section": "More info",
    "text": "More info\nWhy are we obsessed with the things we want only to be bored when we get them?\nWhy is addiction perfectly logical to an addict?\nWhy does love change so quickly from passion to indifference?\nWhy are some people die-hard liberals and others hardcore conservatives?\nWhy are we always hopeful for solutions even in the darkest times―and so good at figuring them out?\n\nThe Molecule of More"
  },
  {
    "objectID": "books/theMomTest.html#more-info",
    "href": "books/theMomTest.html#more-info",
    "title": "The mom test",
    "section": "More info",
    "text": "More info\n\nEl Mom Test\nThe Mom Test"
  },
  {
    "objectID": "books/ThePsychologyofMoney.html#more-info",
    "href": "books/ThePsychologyofMoney.html#more-info",
    "title": "The Psychology of Money",
    "section": "More info",
    "text": "More info\n\nThe Psychology of Money: Timeless lessons on wealth, greed, and happiness"
  },
  {
    "objectID": "books/theRighteousMind.html#more-info",
    "href": "books/theRighteousMind.html#more-info",
    "title": "The Righteous Mind",
    "section": "More info",
    "text": "More info\nThe Righteous Mind\nThe Righteous Mind is about one of the hottest topics in the sciences: morality. It’s about how we evolved to live in moral “matrices,” which bind us together around sacred values and then blind us to the truth. It’s about righteousness, moral diversity, politics and religion."
  },
  {
    "objectID": "books/theRighteousMind.html#book-introduction",
    "href": "books/theRighteousMind.html#book-introduction",
    "title": "The Righteous Mind",
    "section": "Book Introduction",
    "text": "Book Introduction\n“Can we all get along?” That appeal was made famous on May 1, 1992, by Rodney King, a black man who had been beaten nearly to death by four Los Angeles police officers a year earlier. The entire nation had seen a videotape of the beating, so when a jury failed to convict the officers, their acquittal triggered widespread outrage and six days of rioting in Los Angeles. Fifty three people were killed and more than seven thousand buildings were torched. Much of the mayhem was carried live by news cameras from helicopters circling overhead. After a particularly horrific act of violence against a white truck driver, King was moved to make his appeal for peace.\nKing’s appeal is now so overused that it has become cultural kitsch, a catch phrase more often said for laughs then as a serious plea for mutual understanding. I therefore hesitated to use King’s words as the opening line of this book, but I decided to go ahead, for two reasons. First, because most Americans nowadays are asking King’s question, not about race relations but about political relations and the collapse of cooperation across party lines. Many Americans feel as though the nightly news from Washington is sent to us from helicopters circling over the city–dispatches from the war zone.\nThe second reason I decided to open this book with an overused phrase is because King followed it up with something lovely, something rarely quoted. As he stumbled through his television interview, fighting back tears and often repeating himself, he found these words: “Please, we can get along here. We all can get along. I mean, we’re all stuck here for a while. Let’s try to work it out.”\nThis book is about why it’s so hard for us to get along. We are indeed all stuck here for a while, so while we’re waiting, let’s at least try to understand why we are so easily divided into hostile groups, each one certain of its righteousness."
  },
  {
    "objectID": "books/TheRudestBookEver.html#more-info",
    "href": "books/TheRudestBookEver.html#more-info",
    "title": "The Rudest Book Ever",
    "section": "More info",
    "text": "More info\nShwetabh Gangwar is a professional problem-solver—and he’s ace at it. For the past five years, people from all over the world have contacted him with their troubles and he’s worked these out for them.\nIn the process, he has picked up on a simple pattern: people need a set of principles and perspectives to protect them from all the unnecessary bullshit they go through. Codes to live by, essentially.\nBut be warned: Gangwar has no desire to spare your feelings. What you will find in this straight-forward, straight-talking, no-craps-given guide, is:\nHow to deal with rejections of all kinds\nHow to change your perceptions of people so you don’t end up screwed\nWhy a society that sees people as ‘good and bad’ is dumb\nHow the search for happiness screws us over\nHow seeking approval and acceptance kills our individuality\nThe truth about social media influencers\nWhy we should be taught ‘how to think’, instead of ‘what to think’\n\nThe Rudest Book Ever"
  },
  {
    "objectID": "books/TheSecondBrain.html#more-info",
    "href": "books/TheSecondBrain.html#more-info",
    "title": "The Second Brain",
    "section": "More info",
    "text": "More info\nDr. Michael Gershon has devoted his career to understanding the human bowel (the stomach, esophagus, small intestine, and colon). His thirty years of research have led to an extraordinary rediscovery: nerve cells in the gut that act as a brain. This “second brain” can control our gut all by itself. Our two brains the one in our head and the one in our bowel must cooperate. If they do not, then there is chaos in the gut and misery in the head everything from “butterflies” to cramps, from diarrhea to constipation. Dr. Gershon’s work has led to radical new understandings about a wide range of gastrointestinal problems including gastroenteritis, nervous stomach, and irritable bowel syndrome.\n\nThe Second Brain: A Groundbreaking New Understanding Of Nervous Disorders Of The Stomach And Intestine"
  },
  {
    "objectID": "books/thinkInJava.html#more-info",
    "href": "books/thinkInJava.html#more-info",
    "title": "Thinking in Java",
    "section": "More info",
    "text": "More info\n\nThinking in Java\n\nBruce Eckel is president of MindView, Inc. (www.MindView.net), which provides public and private training seminars, consulting, mentoring, and design reviews in object-oriented technology and design patterns. He is the author of several books, has written more than fifty articles, and has given lectures and seminars throughout the world for more than twenty years. Bruce has served as a voting member of the C++ Standards Committee. He holds a B.S. in applied physics and an M.S. in computer engineering.\n2003 Java Developer’s Journal Reader’s Choice Award for Best Book 2001 JavaWorld Editor’s Choice Award for Best Book 2000 JavaWorld Reader’s Choice Award for Best Book 1999 Software Development Magazine Productivity Award 1998 Java Developer’s Journal Editor’s Choice Award for Best Book"
  },
  {
    "objectID": "books/writeTight.html#more-info",
    "href": "books/writeTight.html#more-info",
    "title": "Write Tight",
    "section": "More info",
    "text": "More info\n\nWrite Tight: Say Exactly What You Mean with Precision and Power"
  },
  {
    "objectID": "books/YourNextFiveMoves.html#more-info",
    "href": "books/YourNextFiveMoves.html#more-info",
    "title": "Your Next Five Moves",
    "section": "More info",
    "text": "More info\n\nYour Next Five Moves: Master the Art of Business Strategy"
  },
  {
    "objectID": "devops/devops-doc-quarto.html",
    "href": "devops/devops-doc-quarto.html",
    "title": "How to document: Quarto and Obsidian",
    "section": "",
    "text": "Quarto Intro-Basics\nQuarto Create Project\nQuarto Publish\nQuarto Code\n\nmore info on: tip-a-day"
  },
  {
    "objectID": "devops/devops-doc-quarto.html#obsidian",
    "href": "devops/devops-doc-quarto.html#obsidian",
    "title": "How to document: Quarto and Obsidian",
    "section": "2 Obsidian",
    "text": "2 Obsidian\nObsidian\nObsidian is both a Markdown editor and a knowledge base app.\nUsed in the most basic way, you can edit and preview Markdown files. But its true power lies in managing a densely networked knowledge base.  \n\n\n\n  Immutable Infrastructure \n\n\n\n  top \n\n\n\n Git"
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html",
    "href": "devops/devops-ide-intelljidea.html",
    "title": "IDE: IntellJIdea",
    "section": "",
    "text": "link: Check out the most useful and popular topics to get you started with IntelliJ IDEA."
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#create-your-first-java-application",
    "href": "devops/devops-ide-intelljidea.html#create-your-first-java-application",
    "title": "IDE: IntellJIdea",
    "section": "1 Create your first Java application",
    "text": "1 Create your first Java application\n\n\n\nIn IntelliJ IDEA, a project helps you organize your source code, tests, libraries that you use, build instructions, and your personal settings in a single unit.\n\n\nCreate your first Java application"
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#projects",
    "href": "devops/devops-ide-intelljidea.html#projects",
    "title": "IDE: IntellJIdea",
    "section": "2 Projects",
    "text": "2 Projects\n\n\n\nIn IntelliJ IDEA, projects help you to organize your source code, tests, libraries that you use, build instructions, and your personal settings in a single unit.\n\n\nProjects"
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#code-completion",
    "href": "devops/devops-ide-intelljidea.html#code-completion",
    "title": "IDE: IntellJIdea",
    "section": "3 Code Completion",
    "text": "3 Code Completion\nCall the println() method using code completion"
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#pro-tips",
    "href": "devops/devops-ide-intelljidea.html#pro-tips",
    "title": "IDE: IntellJIdea",
    "section": "4 Pro tips",
    "text": "4 Pro tips\n\n\n\nAlt text\n\n\nPro tips"
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#intellij-idea-keyboard-shortcuts",
    "href": "devops/devops-ide-intelljidea.html#intellij-idea-keyboard-shortcuts",
    "title": "IDE: IntellJIdea",
    "section": "5 IntelliJ IDEA keyboard shortcuts",
    "text": "5 IntelliJ IDEA keyboard shortcuts\nIntelliJ IDEA keyboard shortcuts\n\n\n\nShortcut\nAction\n\n\n\n\nDouble Shift\nSearch EverywhereQuickly find any file, action, symbol, tool window, or setting in IntelliJ IDEA, in your project, and in the current Git repository.\n\n\n—\n—\n\n\nCtrl+Shift+A\nFind ActionFind a command and execute it, open a tool window, or search for a setting.\n\n\nAlt+Enter\nShow Context ActionsQuick-fixes for highlighted errors and warnings, intention actions for improving and optimizing your code.\n\n\nF2``Shift+F2\nNavigate between code issuesJump to the next or previous highlighted error.\n\n\nCtrl+E\nView recent filesSelect a recently opened file from the list.\n\n\nCtrl+Shift+Enter\nComplete Current StatementInsert any necessary trailing symbols and put the caret where you can start typing the next statement.\n\n\nCtrl+Alt+L\nReformat CodeReformat the whole file or the selected fragment according to the current code style settings.\n\n\nCtrl+Alt+Shift+T\nInvoke refactoringRefactor the element under the caret, for example, safe delete, copy, move, rename, and so on.\n\n\nCtrl+W``Ctrl+Shift+W\nExtend or shrink selectionIncrease or decrease the scope of selection according to specific code constructs.\n\n\nCtrl+/``Ctrl+Shift+/\nAdd/remove line or block commentComment out a line or block of code.\n\n\nCtrl+B\nGo To DeclarationNavigate to the initial declaration of the instantiated class, called method, or field.\n\n\nAlt+F7\nFind UsagesShow all places where a code element is used across your project.\n\n\nAlt+1\nFocus the Project tool window\n\n\nEscape\nFocus the editor"
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#maven-helper",
    "href": "devops/devops-ide-intelljidea.html#maven-helper",
    "title": "IDE: IntellJIdea",
    "section": "6 Maven Helper",
    "text": "6 Maven Helper\n\n\n\nMaven Helper\n\n\nA must have plugin for working with Maven. - easy way for analyzing and excluding conflicting dependencies - actions to run/debug maven goals for a module that contains the current file or on the root module - action to open terminal at the current maven module path - actions to run/debug the current test file.\nMaven Helper"
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#top-10-plugins-for-intellij-idea-you-dont-want-to-miss",
    "href": "devops/devops-ide-intelljidea.html#top-10-plugins-for-intellij-idea-you-dont-want-to-miss",
    "title": "IDE: IntellJIdea",
    "section": "7 Top 10 Plugins for IntelliJ IDEA You Don’t Want to Miss",
    "text": "7 Top 10 Plugins for IntelliJ IDEA You Don’t Want to Miss\nTop 10 Plugins for IntelliJ IDEA You Don’t Want to Miss  \n\n\n\n  IDE: Visual Code \n\n\n\n  top \n\n\n\n Aamanzon Web Sevices AWS"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html",
    "href": "devops/devops-ide-visualcode.html",
    "title": "IDE: Visual Code",
    "section": "",
    "text": "Visual Code User Interface\nAt its heart, Visual Studio Code is a code editor. Like many other code editors, VS Code adopts a common user interface and layout of an explorer on the left, showing all of the files and folders you have access to, and an editor on the right, showing the content of the files you have opened.\nUser Interface"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#react",
    "href": "devops/devops-ide-visualcode.html#react",
    "title": "IDE: Visual Code",
    "section": "1 React",
    "text": "1 React\n\n\n\nUsing React in Visual Studio Code\n\n\nReact is a popular JavaScript library developed by Facebook for building user interfaces. The Visual Studio Code editor supports React.js IntelliSense and code navigation out of the box\nReact in visual code"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#intellisense",
    "href": "devops/devops-ide-visualcode.html#intellisense",
    "title": "IDE: Visual Code",
    "section": "2 IntelliSense",
    "text": "2 IntelliSense\n\n\n\nIntelliSense\n\n\nIntelliSense is a general term for various code editing features including: code completion, parameter info, quick info, and member lists. IntelliSense features are sometimes called by other names such as “code completion”, “content assist”, and “code hinting.”\nIntelliSense"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#quick-file-navigation",
    "href": "devops/devops-ide-visualcode.html#quick-file-navigation",
    "title": "IDE: Visual Code",
    "section": "3 Quick file navigation",
    "text": "3 Quick file navigation\n\n\n\nAlt text\n\n\n\n\n\n\n\n\nNote\n\n\n\nTip: You can open any file by its name when you type Ctrl+P (Quick Open).\n\n\nQuick file navigation"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#refactoring",
    "href": "devops/devops-ide-visualcode.html#refactoring",
    "title": "IDE: Visual Code",
    "section": "4 Refactoring",
    "text": "4 Refactoring\n\n\n\nrefactoring\n\n\nRefactoring"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#using-git-source-control-in-vs-code",
    "href": "devops/devops-ide-visualcode.html#using-git-source-control-in-vs-code",
    "title": "IDE: Visual Code",
    "section": "5 Using Git source control in VS Code",
    "text": "5 Using Git source control in VS Code\n\n\n\nUsing Git source control in VS Code\n\n\nUsing Git source control in VS Code"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#keyboard-shortcuts-reference",
    "href": "devops/devops-ide-visualcode.html#keyboard-shortcuts-reference",
    "title": "IDE: Visual Code",
    "section": "6 Keyboard Shortcuts Reference",
    "text": "6 Keyboard Shortcuts Reference\n\n\n\nKeyboard Shortcuts Reference\n\n\nKeyboard Shortcuts Reference"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#auto-close-tag",
    "href": "devops/devops-ide-visualcode.html#auto-close-tag",
    "title": "IDE: Visual Code",
    "section": "7 Auto Close Tag",
    "text": "7 Auto Close Tag\n\n\n\nAuto Close Tag\n\n\nAuto Close Tag"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#settings-sync",
    "href": "devops/devops-ide-visualcode.html#settings-sync",
    "title": "IDE: Visual Code",
    "section": "8 Settings Sync",
    "text": "8 Settings Sync\n\n\n\nSettings Sync\n\n\nType Sync in command Palette in order to view all commands.\nSettings Sync"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#prettier-code-formatter",
    "href": "devops/devops-ide-visualcode.html#prettier-code-formatter",
    "title": "IDE: Visual Code",
    "section": "9 Prettier – Code formatter",
    "text": "9 Prettier – Code formatter\n\n\n\nPrettier\n\n\nPrettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.\nhttps://prettier.io/\nPrettier – Code formatter"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#css-peek",
    "href": "devops/devops-ide-visualcode.html#css-peek",
    "title": "IDE: Visual Code",
    "section": "10 CSS Peek",
    "text": "10 CSS Peek\n\n\n\nCSS Peek\n\n\nCSS Peek"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#polacode",
    "href": "devops/devops-ide-visualcode.html#polacode",
    "title": "IDE: Visual Code",
    "section": "11 Polacode",
    "text": "11 Polacode\n\n\n\nPolacode\n\n\nYou have spent countless hours finding the perfect JavaScript grammar, matching it with a sleek-looking VS Code theme, trying out all the best programming fonts.\nPolacode"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#gitlens",
    "href": "devops/devops-ide-visualcode.html#gitlens",
    "title": "IDE: Visual Code",
    "section": "12 GitLens",
    "text": "12 GitLens\n\n\n\nGitLens\n\n\nGitLens supercharges Git inside VS Code and unlocks untapped knowledge within each repository. It helps you to visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more.\nGitLens"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#import-cost",
    "href": "devops/devops-ide-visualcode.html#import-cost",
    "title": "IDE: Visual Code",
    "section": "13 Import cost",
    "text": "13 Import cost\n\n\n\nImport cost\n\n\nThis extension will display inline in the editor the size of the imported package. The extension utilizes webpack in order to detect the imported size.\nImport cost"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#eslint",
    "href": "devops/devops-ide-visualcode.html#eslint",
    "title": "IDE: Visual Code",
    "section": "14 ESLint",
    "text": "14 ESLint\n\n\n\nESLint\n\n\nThe extension uses the ESLint library installed in the opened workspace folder. If the folder doesn’t provide one the extension looks for a global install version. If you haven’t installed ESLint either locally or globally do so by running npm install eslint in the workspace folder for a local install or npm install -g eslint for a global install.\nESLint"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#github-copilot",
    "href": "devops/devops-ide-visualcode.html#github-copilot",
    "title": "IDE: Visual Code",
    "section": "15 Github Copilot",
    "text": "15 Github Copilot\n\n\n\nGithub Copilot\n\n\nGitHub Codespaces provides cloud-hosted development environments for any activity - whether it’s a long-term project, or a short-term task like reviewing a pull request. You can connect to Codespaces from Visual Studio Code or a browser-based editor that’s accessible anywhere.\nGithub Copilot"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#live-share",
    "href": "devops/devops-ide-visualcode.html#live-share",
    "title": "IDE: Visual Code",
    "section": "16 Live share",
    "text": "16 Live share\n\n\n\nLive share\n\n\nVisual Studio Live Share enables you to collaboratively edit and debug with others in real time, regardless what programming languages you’re using or app types you’re building. It allows you to instantly (and securely) share your current project, and then as needed, share debugging sessions, terminal instances, localhost web apps, voice calls, and more! Developers that join your sessions receive all of their editor context from your environment (e.g. language services, debugging), which ensures they can start productively collaborating immediately, without needing to clone any repos or install any SDKs.\nLive share"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#thunder-client",
    "href": "devops/devops-ide-visualcode.html#thunder-client",
    "title": "IDE: Visual Code",
    "section": "17 Thunder Client",
    "text": "17 Thunder Client\n\n\n\nThunder Client\n\n\nThunder Client"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#path-intellisense",
    "href": "devops/devops-ide-visualcode.html#path-intellisense",
    "title": "IDE: Visual Code",
    "section": "18 Path Intellisense",
    "text": "18 Path Intellisense\n\n\n\nPath Intellisense\n\n\nPath Intellisense"
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#quokka",
    "href": "devops/devops-ide-visualcode.html#quokka",
    "title": "IDE: Visual Code",
    "section": "19 Quokka",
    "text": "19 Quokka\n\n\n\nQuokka\n\n\nQuokka \n\n\n\n  GitHub \n\n\n\n  top \n\n\n\n IDE: IntellJIdea"
  },
  {
    "objectID": "devops/devops-lab-chatapp.html",
    "href": "devops/devops-lab-chatapp.html",
    "title": "Lab 1: chat App",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back https://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back/api-gateway-chat https://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back/dynamodb\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front https://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front/react-chat-heroku https://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front/react-chat-amplify \n\n\n\n  Howto install Maven \n\n\n\n  top \n\n\n\n Lab 2: Spring Boot Intro"
  },
  {
    "objectID": "devops/devops-lab-k8sdigitalocean.html",
    "href": "devops/devops-lab-k8sdigitalocean.html",
    "title": "Lab 5: k8s on Digital Ocean",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/5-k8s-docean\n\n\n\n\n\n  Lab 4: Spring Boot and Docker \n\n\n\n  top \n\n\n\n DevOps Resources"
  },
  {
    "objectID": "devops/devops-lab-springbooksdocker.html",
    "href": "devops/devops-lab-springbooksdocker.html",
    "title": "Lab 4: Spring Boot and Docker",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/3-springb-books-s3 https://sites.google.com/view/devopscifo/labs/4-springb-books-docker/test3_build20_error https://sites.google.com/view/devopscifo/labs/4-springb-books-docker/test3_build23 \n\n\n\n  Lab 3: Spring Boot and AWS S3 \n\n\n\n  top \n\n\n\n Lab 5: k8s on Digital Ocean"
  },
  {
    "objectID": "devops/devops-lab-springbooksintro.html",
    "href": "devops/devops-lab-springbooksintro.html",
    "title": "Lab 2: Spring Boot Intro",
    "section": "",
    "text": "About this site: do-do\nhttps://sites.google.com/view/devopscifo/labs/2-springb-books-intro \n\n\n\n  Lab 1: chat App \n\n\n\n  top \n\n\n\n Lab 3: Spring Boot and AWS S3"
  },
  {
    "objectID": "devops/devops-lab-springbookss3.html",
    "href": "devops/devops-lab-springbookss3.html",
    "title": "Lab 3: Spring Boot and AWS S3",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/3-springb-books-s3 \n\n\n\n  Lab 2: Spring Boot Intro \n\n\n\n  top \n\n\n\n Lab 4: Spring Boot and Docker"
  },
  {
    "objectID": "devops/devops-tools-aws.html",
    "href": "devops/devops-tools-aws.html",
    "title": "Aamanzon Web Sevices AWS",
    "section": "",
    "text": "About this site: to-do \n\n\n\n  IDE: IntellJIdea \n\n\n\n  top \n\n\n\n Docker"
  },
  {
    "objectID": "devops/devops-tools-digitalocean.html",
    "href": "devops/devops-tools-digitalocean.html",
    "title": "Digital Ocean",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/digital-ocean \n\n\n\n  Kubernetes k8s \n\n\n\n  top \n\n\n\n Howto install Jenkins"
  },
  {
    "objectID": "devops/devops-tools-docker.html",
    "href": "devops/devops-tools-docker.html",
    "title": "Docker",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/docker \n\n\n\n  Aamanzon Web Sevices AWS \n\n\n\n  top \n\n\n\n Jenkins pipelines"
  },
  {
    "objectID": "devops/devops-tools-installjenkins.html",
    "href": "devops/devops-tools-installjenkins.html",
    "title": "Howto install Jenkins",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/install-jenkins \n\n\n\n  Digital Ocean \n\n\n\n  top \n\n\n\n Howto install Maven"
  },
  {
    "objectID": "devops/devops-tools-installmaven.html",
    "href": "devops/devops-tools-installmaven.html",
    "title": "Howto install Maven",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/install-maven \n\n\n\n  Howto install Jenkins \n\n\n\n  top \n\n\n\n Lab 1: chat App"
  },
  {
    "objectID": "devops/devops-tools-jenkins.html",
    "href": "devops/devops-tools-jenkins.html",
    "title": "Jenkins pipelines",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/docker \n\n\n\n  Docker \n\n\n\n  top \n\n\n\n Kubernetes k8s"
  },
  {
    "objectID": "devops/devops-tools-k8s.html",
    "href": "devops/devops-tools-k8s.html",
    "title": "Kubernetes k8s",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/k8s \n\n\n\n  Jenkins pipelines \n\n\n\n  top \n\n\n\n Digital Ocean"
  },
  {
    "objectID": "devops/devops-vc-git.html",
    "href": "devops/devops-vc-git.html",
    "title": "Git",
    "section": "",
    "text": "Git logo"
  },
  {
    "objectID": "devops/devops-vc-git.html#what-is-git",
    "href": "devops/devops-vc-git.html#what-is-git",
    "title": "Git",
    "section": "1 What is Git",
    "text": "1 What is Git\n\nwhat? git is a version control system (The git official repo)\nfor what? git is used for source code management\n\nhow? commits are snapshots, not diffs! (The Git Object Model) and (Git Internals - Git Objects)\nwhere? git is a key-value store (Key Value Store Concept)\n\n\n\n\n\n\n\nLinux Torwalds\n\n\n\nIn many ways you can just see git as a filesystem—it’s content-addressable, and it has a notion of versioning, but I really designed it coming at the problem from the viewpoint of a filesystem person (hey, kernels is what I do), and I actually have absolutely zero interest in creating a traditional SCM system.\n\n\n\n📘 Git Git is a version control system (also called a source control system) that allows programmers and other people working with text files to coordinate changes while working independently.\nGit also supports binary assets such as pictures, but those formats don’t support the line-by-line version management that makes version control really powerful."
  },
  {
    "objectID": "devops/devops-vc-git.html#key-ideas",
    "href": "devops/devops-vc-git.html#key-ideas",
    "title": "Git",
    "section": "2 Key-ideas",
    "text": "2 Key-ideas\n\nGit stores unique content and no duplicates\nEach key-value pair entry contains a unique hash as a key: SHA-ID.\nThere are only three types of values:\n\nblobs for files\ntree for directories\ncommit for commit messages\n\n commit message\nauthor, including a timestamp\ncommitter, including a timestamp\nreference to parent commit\n\n\n\nmore info on"
  },
  {
    "objectID": "devops/devops-vc-git.html#install-git-linux",
    "href": "devops/devops-vc-git.html#install-git-linux",
    "title": "Git",
    "section": "3 Install git linux",
    "text": "3 Install git linux\nDebian / Ubuntu / Mint apt-get\nGit packages are available via apt, go to terminal and from your shell, install Git using apt-get:\n$ sudo apt-get update\n$ sudo apt-get install git\nVerify the installation was successful by typing git –version:\n$ git --version\ngit version 2.9.2\nConfigure your Git username and email using the following commands, replacing Emma’s name with your own. These details will be associated with any commits that you create:\n$ git config --global user.name \"Emma Paris\"\n$ git config --global user.email \"eparis@atlassian.com\""
  },
  {
    "objectID": "devops/devops-vc-git.html#git-use",
    "href": "devops/devops-vc-git.html#git-use",
    "title": "Git",
    "section": "4 Git use",
    "text": "4 Git use\n\n\n\nDiagram showing some common Git operations by Daniel Kinzler wikicommons\n\n\n\ngit init: creates or converts an existing into a new Git repository.\ngit pull: fetches remote changes into the local clone, and merges them into the current working files.\ngit checkout: replaces the current working files with files from a branch.\ngit checkout --track: creates a local branch from a remote branch, links them, and replaces the current working files with files from that branch.\ngit fetch: downloads changes from a remote repository into the local clone\ngit reset: makes the current branch point to some specific revision or branch.\ngit reset --hard: makes the current branch point to some specific revision or branch, and replaces the current working files with the files from that branch.\ngit merge: merges files from a given branch into the current branch.\ngit push: uploads changes from local branches to the respective remote repositories.\ngit add: puts current working files into the stage (aka index or cache)\ngit commit: commits staged changes to a local branch\ngit commit -a: commits all modified files to a local branch (shorthand for “git add” and “git commit”)"
  },
  {
    "objectID": "devops/devops-vc-git.html#git-cheat-sheet",
    "href": "devops/devops-vc-git.html#git-cheat-sheet",
    "title": "Git",
    "section": "5 Git cheat-sheet",
    "text": "5 Git cheat-sheet\nGit-cheat-sheet-Red-Hat-Developer\nDownload Git Cheat-sheet Altassian\n  \n\n\n\n  How to document: Quarto and Obsidian \n\n\n\n  top \n\n\n\n GitHub"
  },
  {
    "objectID": "devops/devops-vc-github.html",
    "href": "devops/devops-vc-github.html",
    "title": "GitHub",
    "section": "",
    "text": "GitHub logo"
  },
  {
    "objectID": "devops/devops-vc-github.html#overview",
    "href": "devops/devops-vc-github.html#overview",
    "title": "GitHub",
    "section": "1 Overview",
    "text": "1 Overview\nGitHub is a software development platform in the cloud. It’s used for storing, tracking, and collaborating on software projects.\nGitHub users create accounts, upload files, and create coding projects. But the real work of GitHub happens when users begin to collaborate."
  },
  {
    "objectID": "devops/devops-vc-github.html#install-cli-gh",
    "href": "devops/devops-vc-github.html#install-cli-gh",
    "title": "GitHub",
    "section": "2 Install CLI gh",
    "text": "2 Install CLI gh\nInstalling gh on Linux and BSD\ntype -p curl >/dev/null || sudo apt install curl -y\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&& sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&& echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \\\n&& sudo apt update \\\n&& sudo apt install gh -y\nif for some reasson gh does not install, try it another time:\nsudo apt update\nsudo apt install gh\nGitHub CLI manual"
  },
  {
    "objectID": "devops/devops-vc-github.html#login-and-logout-to-github.com-from-cli-gh-on-linux",
    "href": "devops/devops-vc-github.html#login-and-logout-to-github.com-from-cli-gh-on-linux",
    "title": "GitHub",
    "section": "3 Login and logout to GitHub.com from CLI gh on linux",
    "text": "3 Login and logout to GitHub.com from CLI gh on linux\n\n3.1 Global variables\nCreating global credential, if working in a VM\nGitHub tasks:\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n$git config --global user.name \"Mona Lisa\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.paasword \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\n\n\n3.2 CLI gh\n\n\n\nLog in CLI set-up\n\n\n\n\n\nRedirection to browser and input code\n\n\n\n\n\nLogin succesfull\n\n\n\n\n\nLog out\n\n\n\nmore info on\n\n\n3.3 Register an existing account with a token with IntelliJ IDEA 2022.3\nIntelliJ IDEA lets you manage Git projects hosted on GitHub directly from the IDE: clone repositories, share your projects, create forks, share code through gists, create pull requests and review incoming pull requests.\nRegister an existing account with a token  \n\n\n\n  Git \n\n\n\n  top \n\n\n\n IDE: Visual Code"
  },
  {
    "objectID": "devops/devops-what-immutable.html",
    "href": "devops/devops-what-immutable.html",
    "title": "Immutable Infrastructure",
    "section": "",
    "text": "Immutable infrastructure is an approach to managing services and software deployments on IT resources wherein components are replaced rather than changed. An application or service is effectively redeployed each time any change occurs.\n\n\n\nThere are no server updates which can be problematic at times. That means lower IT complexity and failures.\nReduces support calls: it resolves the issues by deleting the instance that causes the problem.\nImproves security and incident resolution: incident becomes an exception. The exception problem is solved by machine learning (Weka)from manual rules to automatic.\nCost savings by encouraging reduced hardware usage.\nConfiguration management can run faster than manual system.\nLess dependency on third party resources at deployment.\nRequires a learning curve due to new tools.\n\n\n\n\nBelow are some examples of using the tools and services for accomplishing immutable infrastructure. However, the list only includes a few. There are many more.\n\nGit commits\nPuppet\nDocker\nAnsible\nJenkins\nTerraform server\n\n\n\n\nDevOps adopt this infrastructure concept as it makes creating new servers affordable and accessible. If there is a requirement for improvements or updates, you have to replace the entire server and not change a part of it.\nImmutable infrastructure is very much in tune with the idea of infrastructure as a code. You can do all the planning of components like networking, instances, and security with infrastructure as a code. Once done, you can push it into your dev ecosystem. It becomes easy to test and prod as you promote them in the dev environment and consistently repeat these steps.\nDevOps tools and culture are to work together to achieve supply development with continuous delivery. And you know continuous delivery drives immutable infrastructure.\nmore info on  \n\n\n\n  DevOps: agile and microservices \n\n\n\n  top \n\n\n\n How to document: Quarto and Obsidian"
  },
  {
    "objectID": "devops/devops-what-intro.html",
    "href": "devops/devops-what-intro.html",
    "title": "DevOps: Introduction",
    "section": "",
    "text": "📘 DevOps\nDevOps is a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale."
  },
  {
    "objectID": "devops/devops-what-intro.html#what-devops-isnt",
    "href": "devops/devops-what-intro.html#what-devops-isnt",
    "title": "DevOps: Introduction",
    "section": "2 What DevOps Isn’t",
    "text": "2 What DevOps Isn’t\nGiven that DevOps is a philosophy… a management approach… and the combination of multiple IT disciplines… it might be easier to quickly look at some of what it isn’t.\n\nDevOps is not Agile. That said, your teams might indeed use Agile as a development methodology within an overall DevOps-style approach. Agile is certainly DevOps-compatible, and, like DevOps, values short, continual improvement.\nDevOps is not Continuous Integration. That said, CI is often a part of DevOps-style behavior. The two can be really closely related, in fact - so closely that it’s hard to tell the difference. I suppose you could argue that it’s difficult to practice the DevOps philosophy without using CI as an enabling implementation, but you can definitely have CI without behaving like a DevOps organization, so the two aren’t exactly the same thing.\nDevOps isn’t “the developers running Operations.” If anything, it’s Operations automating things to the point where Operations runs itself in response to authorized actions taken by other roles, including developers.\nDevOps isn’t a software development methodology. See the first bullet, above. DevOps is what happens while software development is happening, and largely what happens when software development (or a cycle of it), is done. You still need to manage your software development - you just need to use a methodology that’s DevOps-compatible.\nDevOps is not automation. However, you can’t have DevOps without automation. Automation is perhaps the biggest thing that Operations brings to the DevOps table, in fact.\n\n\nFurther, it actually seems to be an unstated goal of many DevOps champions to avoid the creation of any kind of trademarked, rigid, rulebook of “how to do DevOps,” as ITIL or TQM or something. This book certainly doesn’t attempt to provide “rules;” the goal here is to provide some understanding of what DevOps’ broad goals are.\n\nDevOps by DevOps Training"
  },
  {
    "objectID": "devops/devops-what-intro.html#what-is-devops-2",
    "href": "devops/devops-what-intro.html#what-is-devops-2",
    "title": "DevOps: Introduction",
    "section": "3 What Is DevOps? (2)",
    "text": "3 What Is DevOps? (2)\nDevOps is a new term emerging from the collision of two major related trends. The first was also called “agile infrastructure” or “agile operations”; it sprang from applying Agile and Lean approaches to operations work. The second is a much expanded understanding of the value of collaboration between development and operations staff throughout all stages of the development lifecycle when creating and operating a service, and how important operations has become in our increasingly service-oriented world (cf. Operations: The New Secret Sauce).\n\nOne definition Jez Humble proposed to me is that DevOps is “a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.”\n\nWhat Is DevOps by the agile admin\n\n\n\n\n\n  Linux Resources \n\n\n\n  top \n\n\n\n DevOps: agile and microservices"
  },
  {
    "objectID": "devops/devops-what-overview.html",
    "href": "devops/devops-what-overview.html",
    "title": "DevOps: agile and microservices",
    "section": "",
    "text": "DevOps is anevolving philosophy and frameworkthat encourages:\n\nreliable development\nbetter integration between devs and ops, and\nfaster release of new or revised software features or products to customers.\n\nThe practice of DevOps encourages:\n\nsmoother, continuous communication and collaboration,\nvisibility and iteration,\nand transparency between application development teams (Dev) and their IT operations team (Ops) counterparts.\n\nThis closer relationship between “Dev” and “Ops” permeates every phase of the DevOps lifecycle: from initial software planning to code, build, test, and release phases and on to deployment, operations, and ongoing monitoring. \nSome people group DevOps goals into four categories: culture, automation, measurement, and sharing (CAMS), and DevOps tools can aid in these areas. These tools can make development and operations workflows more streamlined and collaborative, automating previously time-consuming, manual, or static tasks involved in integration, development, testing, deployment, or monitoring."
  },
  {
    "objectID": "devops/devops-what-overview.html#agile-devops",
    "href": "devops/devops-what-overview.html#agile-devops",
    "title": "DevOps: agile and microservices",
    "section": "2 Agile DevOps",
    "text": "2 Agile DevOps\nAgile DevOps is a methodology that combines agile software development with devops practices to help organizations deliver features and updates faster and more efficiently. \nThe main goal of Agile DevOps is to shorten the feedback loop between developers and operations teams so that changes can be made quickly and efficiently.\nMicroservices describe the architectural process of building a distributed application from separately deployable services that perform specific business functions and communicate over web interfaces. \nDevOps teams enclose individual pieces of functionality in microservices and build larger systems by combining the microservices like building blocks."
  },
  {
    "objectID": "devops/devops-what-overview.html#microservices",
    "href": "devops/devops-what-overview.html#microservices",
    "title": "DevOps: agile and microservices",
    "section": "3 Microservices",
    "text": "3 Microservices\nMicroservices apply an example of the open/closed principle:\n\nThey’re open for extension (using the interfaces they expose)\nThey’re closed for modification (each is implemented and versioned independently) Microservices provide many benefits over monolithic architectures:\nThey can remove single points of failure (SPOFs) by ensuring issues in one service don’t crash or affect other parts of an application.\nIndividual microservices can be scaled out independently to provide extra availability and capacity.\nDevOps teams can extend functionality by adding new microservices without unnecessarily affecting other parts of the application.\n\nUsing microservices can increase team velocity. DevOps practices, such as Continuous Integration and Continuous Delivery, are used to drive microservice deployments.\nMicroservices nicely complement cloud-based application architectures by allowing software development teams to take advantage of scenarios such as event-driven programming and autoscale. The microservice components expose APIs (application programming interfaces), typically over REST protocols, for communicating with other services.\nAn increasingly common practice is to use container clusters to implement microservices. Containers allow for the isolation, packaging, and deployment of microservices, while orchestration scales out a group of containers into an application.\nmore info on \n\n\n\n  DevOps: Introduction \n\n\n\n  top \n\n\n\n Immutable Infrastructure"
  },
  {
    "objectID": "devops/resources.html",
    "href": "devops/resources.html",
    "title": "DevOps Resources",
    "section": "",
    "text": "DevOps Resources\n\n\n\n1 Resources\n\ndevopscifo\nntu.edu\ngetting-gitops-practical-platform-openshift-argo-cd-and-tekton\n\nGit-cheat-sheet-Red-Hat-Developer\n\n\n\n\n\n  Lab 5: k8s on Digital Ocean \n\n\n\n  top \n\n\n\n Introduction Markup"
  },
  {
    "objectID": "ifcd0210/ifcd0210.html",
    "href": "ifcd0210/ifcd0210.html",
    "title": "IFCD0210 Official Docs",
    "section": "",
    "text": "Denominació: Desenvolupament d’aplicacions amb tecnologies web\nCodi: IFCD0210\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 3\nQualificació professional de referència: IFC154_3 - Desenvolupament d’aplicacions amb tecnologies web\n\n\n\n\nIFCD0210 fitxa\n\n\n\nIFCD0210 fitxa-es .pdf\nIFCD0210 fitxa-cat .pdf"
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "href": "ifcd0210/ifcd0210.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "title": "IFCD0210 Official Docs",
    "section": "Relació d’unitats de competència que configuren el certificat de professionalitat",
    "text": "Relació d’unitats de competència que configuren el certificat de professionalitat\n\nUC0491_3: Desenvolupar elements de programari en l’entorn client.\nUC0492_3: Desenvolupar elements de programari en l’entorn servidor.\nUC0493_3: Implementar, verificar i documentar aplicacions web en entorns internet, intranet i extranet."
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#competència-general",
    "href": "ifcd0210/ifcd0210.html#competència-general",
    "title": "IFCD0210 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDesenvolupar documents i components de programari que constitueixin aplicacions informàtiques en entorns distribuïts utilitzant tecnologies web, partint d’un disseny tècnic ja elaborat, i duent a terme la seva verificació, documentació i implantació. IFCD0210 official document\n\n\n\n\n\n\n  Articles cards \n\n\n\n  top \n\n\n\n IFCD0210 Init Mail"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html",
    "href": "ifcd0210/ifcd0210backlog-product.html",
    "title": "IFCD0210 Product Backlog",
    "section": "",
    "text": "Backlog course"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#december-2022",
    "href": "ifcd0210/ifcd0210backlog-product.html#december-2022",
    "title": "IFCD0210 Product Backlog",
    "section": "December 2022",
    "text": "December 2022\n\nBacklog course December 2022 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#1\n1\n12/12/2022\n- Introduction to course IFCD0210 - Setting of all tools we are going to need\n-\n\n\n\n2\n13/12/2022\n- Quarto create and Publish in GitHub - Create VM and IDEs - Accounts - MOOC\n-\n\n\n\n3\n14/12/2022\n- Linux VM VirtualBox over Windows - What is a Dependency Management, Maven\n-\n\n\n\n4\n15/12/2022\n- Quarto create and Publish in GitHub with adavnced tools\n-\n\n\n\n5\n16/12/2022\n- Create Java Maven Project: JUnit - What is Java SE, EE and Spring MVC, Boot - Create classes\n-\n\n\n#2\n6\n19/12/2022\nCreate Java Maven Project: Git - Why scope is so important in Java\n-\n\n\n\n7\n20/12/2022\n- Introduction to MVC Pattern\n-\n\n\n\n8\n21/12/2022\n- Create Java Maven Project: Classes - Tag & Little-Cube are our dear friends\n-\n\n\n\n9\n22/12/2022\n- Introduction to React JS Framework\n-"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#january-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#january-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "January 2023",
    "text": "January 2023\n\nBacklog course January 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#3\n10\n09/01\n- Different approaches to complex problems are crucial to solve it- How to manage large volumes: quarto- How to stay in class: ask, interrupt, explain new ideas, detect mistakes, connect\nBash, PipesLearn\n\n\n\n11\n10/01\n- How to create a Maven Java Project with TDD in Mind - What could go wrong when create a Maven Project\nTDD, JUnit Maven JavaLab#SE01-1\n\n\n\n12\n11/01\n- What is Model in Java - Why model is so important - All begins in Model - How to create a model (1) Class Candidates (2) Validated Class (3) Relationships\nJava Classes and ObjectsPattern UML\n\n\n\n13\n12/01\n- Coupling and DD defines from first line even to Deploy - Plan a Project: sprint 0 and SCRUM - Even name a variable is important\nCouplingLab#SE02-4\n\n\n\n14\n13/01\n- Time Management - Object Creation: new and @Test - Nested objects in Java are not easy - Tags & Little-cube are our friends\nLab#SE02-1Time ManagemntMaven Project to GitHub: git init\n\n\n#4\n15\n16/01\n+ Object Creation: nested Objects in Java + Movie-Reviews-Review-Critic+ @Test and debug - Java Principles ++ Within which scope (1) creation object: new, (2) operations and methods and (3) sending-parameters by callings there must be?\nLab#SE02-1Markdown in IntellJIdea Mermaid & Mermaid Principles / Objects and classMovieManager Code\n\n\n\n16\n17/01\n+ MovieManager static or non-static - How to send data within Java + Movie-Reviews-Review-Critic + Java Principles  - Project structure: .gitignore, readme.md, uml.md ++ Decision making at Model: (1) Composition? (2) Inherence? (3) Use? (4) Is Class? sure? (5) static/non-static? (6) Domains? (7) Coupling? (8) Interface/Abstract (9) Multiplicity (10) Packages ++ How to write a comment: What? For what? How?\nLab#SE02-2.gitignore / .gitignore not workingObjects and class / staticMovieManager Code\n\n\n\n17\n18/01\n+ Relationships and Multiplicity: onetoone, onetomany, manytomany - Model First: customer/product - Project structure: .gitignore, readme.md, uml.md  ++ Why Multiplicity? (1) People at same page (2) Identify killing problems: pavoland (3) avoid future problems and correct them before code (4) Huge improvement on understanding THE problem (5) documentation\nMultiplicityMermaid Class Diagram UML Customer/Product example Get your team on the same page\n\n\n\n18\n19/01\n+ 1:n / onetomany / @OneToMany + Example (1) oneToMany: Director/Movie + Project structure: .gitignore, readme.md, uml.md ++ Intro Albertus’ dylemma\nJava Persistence MovieManager Code Domain Driven Design — method and process agnostic\n\n\n\n19\n20/01\n+ How to approach a complex software architecture (software lifecycle meta-domains): (1) project (2) domains-DDD (3) UML (4) coding  + Decision-making & Albertus’ dylema+ SCRUM Projects: (1) Management (2) Meetings Rules (3) Mistakes (4) Roles (5) Iterations + spaceX: all requirements are dumb\nSoftware lifecycle SCRUM All requirements are dumb SpaceX’s first Starship SN5 150m hop test\n\n\n#5\n20\n23/01\n+ Top/Down or Down/Top project approach and build-up + Project/Domain-DDD/UML/microProgramming + MovieManager Domains & Packages, connecting classes: general plan (1/3) - Test interactivity\nPackages Movie Manager (with errors: very unusual and not clean) Top-down and bottom-up design\n\n\n\n21\n24/01\n+ MovieManager Domains & Packages, connecting classes: static/non-static and reusable method/class (2/3) + Hashmap + Try and Catch + Test interactivity\nMovie Manager HashMap w3school Lab#SE02-5 Test Input Console Lab#SE02-4 Try and Catch\n\n\n\n22\n25/01\n++ How to code: (1) User-story (2) New Feature (How it fits with existing UML) (3) pseudo-code (4) code acutal typing + MovieManager Domains & Packages, connecting classes (3/3): (1) HashMap movies and CRUD operations, (2) createAndAddMovieToStore, (3) HashMap testMovies  (4) testCreateAndAddMovieToStoreInputConsole\nMovie Manager Simulate Input by console\n\n\n\n23\n26/01\n+ MovieManager, Test and CRUD (1/2) (1) HashMap Movies CRUD (2) implement test by a simulated console: createMovie and deleteMovie tests (3) document test with html (4) manager CRUD implement + Inherence / Interface / Abstract Class - git\nMovie Manager Simulate input (1/2) Class Test Create Movie Movie Manager Simulate input (2/2) Class Test Delete Movie\n\n\n\n24\n27/01\n+ MovieManager, CRUD & update (2/2) + SCRUM + Vocabulary (writting) + Book: SRE\nMovie Manager Update CRUD Class MovieManager Update Movie SRE \n\n\n#6\n25\n30/01\n+ Intro to CSS, OJS, Engines and tools + Example (3) manyToMany: memberLibrary/Book, Customer/Product, Director/Movie\nmanytomany CSS and Engines Resources\n\n\n\n26\n31/01\n+ Library Model Basic/Large + Reuse Movie/Review as a Template  + Start with LibraryProject: lombok (create 100 users/books), use-case, refactor, maven, dependencies, DDD, UML and core classes, borrow core-operation, managers, test, mockup, git, common lenguage \nLab#SE00-3 Basic Lab#SE00-3 Large  LibraryProject \n\n\n\n27\n01/02\n+ LibraryProject: (1) define priorities: tasks and kanban (2) code Faker create Users  (3) code test Borrow a book from console  (4) UUID method \nLab#SE03-1 UML  Lab#SE03-2 Sprint Zero    LibraryProject \n\n\n\n28\n02/02\n+ MVC: Api Rest + Quarto: using API Rest with D3.js + git\nQuarto API REST D3.js  Observable JavaScript\n\n\n\n29\n03/02\n+ SCRUM: delete (step 2 spaceX) + Vocabulary + Four-Hats: Project/DDD/UML/code+ Cifo Java AppWeb Service Infrastructure: servers, services, network, URL\nCifo JAVA AppWeb Infrastructure Prioritize When You Wear Multiple Hats"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#february-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#february-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "February 2023",
    "text": "February 2023\n\nBacklog course February 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#7\n30\n06/02\n-\n-\n\n\n\n31\n07/02\n-\n-\n\n\n\n32\n08/02\n+ LibraryProject: (1) create GitHub Projects and Kanban (2) create tasks Sprint 1  (3) discuss about how to make user/book/borrow interface management  (4) discuss Borrow object test\nLibraryProject\n\n\n\n33\n09/02\n+ Library Model Basic/Large + Example (3) manyToMany: memberLibrary/Book, Customer/Product, Director/Movie + LibraryProject - Inherence / Interface / Abstract Class  ++ Optional\nLab#SE00-4  Inherence Lab#SE00-3 Basic Lab#SE00-3 Large  LibraryProject Optional \n\n\n\n34\n10/02\n+ LibraryProject: sprint 1 - Spring Boot Intro - Spring Rest and Web - Thymeleaf  ++ Albertu’s Dylemma  + Inherence / Interface / Abstract Class\nLibraryProject Generic Types  Interface  Interface w3 schools\n\n\n#8\n35\n13/02\n+ Sprint2: pick up tasks from Product Backlog + LibraryProject: (1) testBorrowUI  (2) bookManager  (3) returns  (4) storage  + Spring Boot:  (1) Intro & project structure/folder tree (2) Spring Rest and Web (3) Thymeleaf  (4) Resources: books and webs \nLibraryProject  MyFirstSpring  Spring Boot: create a Maven Project  \n\n\n\n36\n14/02\n+ LibraryProject: (1) borrowManager: list and get statusBorrow  (2) returnBook: pseudo-code ++ use-story > use-case > functional-diagram > pseudo-code > code\nLibraryProject Approach 1  LibraryProject Approach 1 with several methods \n\n\n\n37\n15/02\n+ LibraryProject: (1) returnBook: code branch-pattern (to-do) (2) returnBook: codee branch-moreHashmaps (to-do) (3) returnBook: code branch-bidirectional (to-do) (3) returnBook: code branch-handlerOptions ++ Make a brief study of the main efficient/relevant (three or four?) solutions and approaches to our problem in order to understand it, find out the optimus solution, solve it and eventually code it.  ++ Create one branch for attempt/aproach (to-do)\nLibraryProject branch-handlerOptions pseudo  LibraryProject branch-handlerOptions finished  \n\n\n\n38\n16/02\n- LibraryProject: (1) Inherence Person,Publication  (2) createBorrows (fake)  (3) pickBorrowByUser (basic-polish bookReturn)  (4) findBorrowsByUser  (5) switch (book, user, borrow) \nLibraryProject branch-handlerOptions fakeBorrows  Java 8  2, 3, 4, 5\n\n\n\n39\n17/02\n- LibraryProject:  (1) core-functional return-book use-case - SCRUM:  (1) Albertus’ Dylemma: burnout flag  (2) Why execution is so difficult? (3) Writting  (4) SpaceX: step 2 and further  (5) Motivation or Purpose \nDiscussion: use case return a book  Burn out and Relaxation Execution: The Discipline of Getting Things Done Motivation? vs. Less Wrong  dukkha\n\n\n#9\n40\n20/01\n+ LibraryProject: (0) plan Sprint  (1) brief-study returnBook  (2) branch returnBook  (3) Inherence Person  + Git:  (1) Remote/Local (just one user) (2) Basic Operations: push, pull, commit, add, clone  (3) watchdog: writting commits, location, document, time\nLibraryProject  Learn Git  \n\n\n\n41\n21/01\n+ LibraryProject: (1) Inherence: Member and/or LibraryMember  (2) Is Author a Member?  (3) Member is Abstract/Interface/Regular class?  (4) How will we call Managers?  - Quarto \ncore-General UML Proposal  \n\n\n\n42\n22/02\n+ Spring Boot:  (1) Book @Controller  (2) Book @Service  (3) Book CRUD  (4) HTML Thymeleaf  (5) H2 DataBase Local Source and Application.properties - Git \nLab#SB02-Library5 Code  Lab#SB02-Library5 Docs  Create H2 DB Spring Boot  Create Spring Boot \n\n\n\n43\n23/02\n- LibraryProject:  (1) finish core use-cases  (2) finish main UML ++ LibraryManagement:  (1) What is Spring Boot?  (2) How does it works?  (3) What are the main elements of Spring Boot?  (4) What is Thymeleaf?  (5) What are server-renders and template engines?  ++ Deliveries MF01 \nThymeleaf  H2 DB  Spring Boot Reference Documentation Spring init  Building an App with Spring Boot  Create Spring Boot  Create Spring Boot H2 DB and TH Lab#SB00-1  \n\n\n\n44\n24/02\n- Deliveries MF01 - Quarto  - Spring Boot:  (1) Summary week  - SCRUM:  (1) Motivation/Purpose 2  (2) Burn Out multitasking, several hats  (3) spaceX beyond Scrum\n-\n\n\n#10\n45\n27/02\n+ LibraryManagement:  (0) Mock-up  (1) Tree-Folder: packages   (2) Book: @Entity, @Repository, @Controller, @Service  (3) Thymelaf  + Spring Boot: request-response Cycle\nSpring Boot H2DB TH Spring Boot: cycle  Lab#SB00-1  Auto-reload compiler:  \n\n\n\n46\n28/02\n+ View-Controller  (1) Controller  (2) View  (3) Example\nController - View  Auto-reload compiler  Tutorial: Using Thymeleaf\n\n\n\n47\n01/03\n+ View-Controller  (1) @Service and Dependency Injection (2) HashMap fake @Repository (3) request-response scope  (4) redirect:  (5) messages.properties  (6) CRUD operations draft and pseudo-code LibraryProject:  (1) finish core use-cases  (2) finish main UML\ncontrollerView Project  render controllerView  resources messages.properties\n\n\n\n48\n02/03\n+ View-Controller  (1) Mock-up user-librarian HTML  (2) Tree-Folder: packages  (3) User: Java Lombok Class and @UserController  (4) User: fake @Repository (HashMap) and @Service  (5) CRUD Operations User and draft Librarian  - Spring Timeline \nLab#SB00-2  Lab#SB02-Library5 Code  Lab#SB02-Library5 Docs  controllerView\n\n\n\n49\n03/03\n+ Deliveries MF01 + Spring Boot:  (1) Summary week  ++ How to Connect Domains  (1) URL+ paths: localhost: 8080/home  (2) annotations: @Controller, @RequestMapping, @RequestParam  (3) Dependency Injection @Autowired UserService userService  + SCRUM:  (1) Motivation/Purpose 2  (2) Order and How we see the world  (3) spaceX beyond Scrum \ncontrollerView  Neuroscience: You Will Never Lack Motivation Again"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#march-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#march-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "March 2023",
    "text": "March 2023\n\nBacklog course March 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#11\n50\n06/03\n- controllerView:  (1) CRUD: create User  (2) CRUD: delete User  (3) CRUD: Librarian  ++ Renfe use-case RedSys error  ++ Time Mangement is Mind Management\nPJG-1 - PJG-2 - PJG-3 - PJG-4  Screenshoot origin  Renfe error log  Time management  LibraryManagement\n\n\n\n51\n07/03\n+ controllerView:  (1) CRUD: create User\nCRUD: create  userController: create\n\n\n\n52\n08/03\n+ controllerView:  (1) CRUD: update User draft  (2) CRUD: delete User draft\n-\n\n\n\n53\n09/03\n+ controllerView:  (1) CRUD: update User  (2) CRUD: delete User\nCRUD: update  controllerView: update \n\n\n\n54\n10/03\n+ SCRUM:  (1) Motivation/Purpose 2  + How we see the world:  (1) noise (2) how it works (no-negotation)  (3) order  (4) time management + Decision-making:  (1) execution: Albertu’s dylemma - Vocabulary:  (1) Spring Boot \ncontrollerView: deleteMind Management - Article Mind Mangement - Book  Why the Mental Health of Liberal Girls Sank First and FastestHappy families are all alike; every unhappy family is unhappy in its own way\n\n\n#12\n55\n13/03\n+ LibraryManagement:  (1) refactor variables and packages  (2) Project > Management  (3) userController > Management (4) Library5 > Management\nCRUD: delete  userController: delete  userController: detail & createFakeUsers \n\n\n\n56\n14/03\n+ LibraryManagement:  (1) Borrow Domain: select books  + LibraryProject:  (1) finish core use-cases v.0 (2) finish main UML v.0\nLab#SB00-3 LibraryManagement: integration project  LibraryManagement: select books    RequestMapping\n\n\n\n57\n15/03\n+ LibraryManagement:  (1) Borrow Domain: Borrow class (2) Filter table  (3) session/httpServeletRequest creation + Spring Session + Spring HttpServletRequest \nHttpSession with JDBC  HTTP Session State Caching with Spring Filter table JS Client   LibraryManagement: session\n\n\n\n58\n16/03\n++ LibraryManagement:  (1) Fake login and select option (2) Conditional render (3) Debbuging session  - Git - Spring Boot Rest  - ThymeLeaf:  (1) Fragments  \nLibrayManagement: session and fake login  Handling Form Submission\n\n\n\n59\n17/03\n- SCRUM:  (0) Less Wrong (1) Time management  (2) Getting things done  - The three great untruths 2023:  (1) What doesn’t kill you makes you weaker  (2) Always trust your feelings (motivation?)  (3) Life is a battle between good people and evil people\nHappy SCRUM groups are all alike..  Getting the things done Why the Mental Health of Liberal Girls Sank First and Fastest Frakfurt School  End of history  Ikigai\n\n\n#13\n60\n20/03\n+ Week planning:  (1) goal: practicing decision-making and attention-FUDA (focus, execute now!), rest and feed your soul, open-lops, inertia law  (2) tools: doing, done, taks, energies  (3) ultimate goal: metrics > know speed delivering > get closer to optimus (4) plan week: 15 blocks  + LibraryManagement:  (1) fake Login and logout: refreshing  (2) fakeBorrows & borrowsByUser (pagination) \n FUD & Anxiety    Library Management 0.3\n\n\n\n61\n21/03\n- LibraryManagement:  (1) make user borrow (by Librarian)  (2) return book  + LibraryManagement:  (1) fake Login and logout: functional diagram \n  Library Management 0.4  Library Management 0.5\n\n\n\n62\n22/03\n+ LibraryManagement:  (1) make user borrow (by Librarian)  (2) make borrow (by Librarian at borrow domain)  (3) return book\nLibrary Management 0.6  Library Management 0.7 \n\n\n\n63\n23/03\n+ LibraryManagement  (1) API Rest: introduction (2) API Rest: Postman & Swagger  (3) API Rest @EntityResponse  (4) fragments  ++ LibraryManagement API rest\nPostman Swagger Wikipedia API Rest endpoints Wikipedia API Rest: nasa example Library Management 0.8 : BookRestController \n\n\n\n64\n24/03\n+ SCRUM:  + Getting things done  (1) overload, overthink, overdesire  (2) fail fast, and yes, hunt your ghosts  (3) down your cognitive laod  (4) fuda  (5) is motivation a unicorn ? \nGetting Things done\n\n\n#14\n65\n27/03\n+ API Rest:  (1) CRUD: create, delete, update  (2) Postman  (3) @EntityResponse intro\nLibrary1: API Rest CRUD reference docs Library1: API Rest CRUD RestController java class Library Management Rest 0.1  Lab#SB00-4\n\n\n\n66\n28/02\n+ API Rest  (1) CRUD: update, create Book  (2) CRUD: Borrow  (3) Swagger intro  (4) Mockito & JUnit test for Rest intro \nLibraryManagementRest 0.2  Lab#SB00-4\n\n\n\n67\n29/03\n+ API Rest  (1) @EntityResponse (2) CRUD: update  (3) upate book: generic object, array of fields and stream, filter\nJava SE: Java 8  Lab#SB00-4  Library Management Rest 0.3  Library Management Rest 0.4\n\n\n\n68\n30/03\n+ NoSQL: what is NoSQL and SQL H2 JPA  + MongoDB / dynamoDB\nSpring Boot Data  -  Google sheet Employee template\n\n\n\n69\n31/03\n+ SCRUM Time (mind) management:  (1) execution: getting things done  (2) good & fresh decisions qty  (3) pavolands avoided qty  (4) did u learn something new and really useful?  (5) how does good planification mean?  + Vocabulary \n-"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#april-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#april-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "April 2023",
    "text": "April 2023\n\nBacklog course April 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#15\n70\n03/04\n+ LibraryManagementRest  (1) Install, create and set H2 DB  (2) JPA H2 DB Book and User entities\nLibrary Management Rest H2 0.0  Spring Boot: H2 DB and Thymeleaf  Spring Boot: Rest  Lab#SB00-5\n\n\n\n71\n04/04\n+ LibraryManagementRest  (1) API Rest @ResponseEntity  (2) JPA H2 DB: optional  (3) JPA H2 DB: refactor HashMap to H2 DB: User  (4) JPA H2 DB: refactor HashMap to H2 DB: Book\nLibrary Management Rest H2 0.1  Library Management Rest H2 0.2\n\n\n\n72\n05/04\n+ LibraryManagementRest  (1) JPA H2 DB: populate Borrow table  (2) JPA H2 DB: create Borrow with foreign Ids (keys)  (3) JPA H2 DB: return Borrow with borrowId\nLibrary Management Rest H2 0.3  Library Management Rest H2 0.4 \n\n\n\n73\n06/04\n+ LibraryManagement  (1) JPA H2 DB: borrowIds in user  (2) JPA H2 DB: @OneToMany intro  (3) JPA H2 DB: @ManyToMany intro \nLibrary Management Rest H2 0.5\n\n\n#16\n74\n11/04\n+ NoSQL: what is NoSQL and SQL H2 JPA  + MongoDB / dynamoDB  + Render 3D: Nerf / TouchDesigner \n#15 68 30/03  employeeCourse   NeRF 3D - Nerf example: water reflections - TouchDesigner Curriculum - Nerf -\n\n\n\n75\n12/04\n+ LibraryManagement  (1) MongoDB: API Rest CRUD  (2) MongoDB: API Rest Image and @RestController\nSpring Boot Data  Accessing Data with MongoDB  Spring Boot Integration with MongoDB Tutorial  Java - Mapping POJOs  MongoDB Atlas  Library7  Lab#SB00-6: Rest & MongoDB  Library Management Rest MongoDB 0.0\n\n\n\n76\n13/04\n+ LibraryManagement  (1) MongoDB: Images CRUD  (2) MongoDB: Images id to List books from book\nLab#SB00-6: Rest & MongoDB  Library Management Rest MongoDB 0.1  Library Management Rest MongoDB 0.2\n\n\n\n77\n14/04\n+ LibraryManagement  (1) MongoDB: encrypted data   (2) Review - Vocabulary  + Sprint Retrospective:  (1) mental fatigue, pavoland, wells?  (2) optimus, joy the victory, what did u learn?  (3) what about decision-making?  + Pràctiques \nSpring Boot API REST & H2-Mongo DataBase: securityDemo2 - securityDemo2 code  bcrypt\n\n\n#17\n78\n17/04\n+ React:  (1) Intro  (2) nodejs and npm  (3) Create React Project npx\nCreate React app  Principles  Code sandbox  nodejs - npm  Lab#RE00-1\n\n\n\n79\n18/04\n+ React:  (1) Components  (2) JSX .jsx\nWhat is component What is JSX  var, let and const  Git Code: hola & hola2\n\n\n\n80\n19/04\n+ React:  (1) css  (2) semantic\nSemantic React  Material React\n\n\n\n81\n20/04\n+ React:  (1) Props and States  (2) React is immutable\nProps and states  What is immutability in React hola3: semantic Cards  semantic installation\n\n\n\n82\n21/04\n+ SCRUM  (1) Week retrospective  + Vocabulary  + Pràctiques \nhola4  Map mdn\n\n\n#18\n83\n24/04\n+ React:  (0) roadmap  (1) props  (2) update/render cycle  (3) userState: intro  (4) project structure: tree-folder \nRoadmap  useState  React project structure  route example\n\n\n\n84\n25/04\n+ React:  (1) route  (2) JS ES6: spread operator  (3) userEffect: intro  (4) update/render cycle: pure component  - <Pràctiques\napp route  spread operator Keep components pure  ex1 - ex2 - ex3 -\n\n\n\n85\n26/04\n+ React:  (1) intro: userReducer / userEffect  (2) JS ES6: destructuring  (3) conditional render\nuseReducer  useEffect  Conditional Render  hola5 - 0.0\n\n\n\n86\n27/04\n+ React:  (1) userReducer  (2) JS ES6: import/export  + Pràctiques: entrevistes\nLab#RE02-1  codesandbox with handlers functions  codesandbox dispatcher onChange, onClick  React reference manual: useReducer\n\n\n\n87\n28/04\n+ SCRUM:  (1) Retrospecive  (2) Lateralization  * Pràctiques  + Vocabulary \n-"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#may-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#may-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "May 2023",
    "text": "May 2023\n\nBacklog course May 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#19\n88\n02/05\n+ useReducer:  (1) hola5.personProfile  ++ Intro to Matter with Things by Iain McGilchrist\nhola5 0.1  Lab#RE02-1\n\n\n\n89\n03/05\n+ useReducer, useRef, useEffect:  (1) hola5.clock  + useContext  + useEffect  + Maps of meaning\nhola5 0.2  Lab#RE02-1 clock  useContext  useEffect  Rules of Hooks  Maps of meaning - Book .pdf\n\n\n\n90\n04/05\n+ useEffect, useRef, useReducer:  (1) hola5.clock\nLab#RE02-1 clock \n\n\n\n91\n05/05\n+ useEffect:  (1) hola5.apiRest  - useReducer, useRef, useEffect, useContext:  (1) to-do   + Debbug React  + SCRUM  (1) attention: the portal to reality (science, reason, imagination, intuition)  (2) well types: pareto,approach mode, time management, forget order, decision making, lost.  (3) Hemispheres modes: apprehend-compprehend   - Vocabulary   + Retrospective\nLab#RE02-1 apiRest  Lab#RE03-1: to-do  How to debbug React  Can the divided brain tell us anything about the ultimate nature of reality?  Brain leraning cycle\n\n\n#20\n92\n08/05\n- useEffect, useRef, useReducer:  (1) hola5.clock  (2) cleanup function  + useContext:  (1) hola5.login  + semantic table hola5.home  ++ books listing new categories\nuseContext  Lab#RE02-1 clock  Lab#RE02-1 login  books listing new categories and books  Semantic React Table\n\n\n\n93\n09/05\n+ useEffect, useRef, useReducer:  (1) hola5.clock  (2) cleanup function  + useRef, useReducer, useContext:  (1) to-do: useCase, use story & mockup  + async  + Pràctiques\nLab#RE03-1  async  todoApp\n\n\n\n94\n10/05\n+ useRef, useReducer, useContext:  (1) to-do: reducer, create new todo  (2) to-do: highCharts and semantic \nLab#RE03-1  HighCharts  todoApp 0.1\n\n\n\n95\n11/05\n+ useRef, useReducer, useContext:  (1) useContext  (2) to-do: reducer, read, delete todo \ntodoApp 0.2\n\n\n\n96\n12/05\n+ useRef, useReducer, useContext:  (1) to-do: reducer, uupdate todo  + SCRUM:  (1) how did you manage attention?  + Retrospective  + Delivereries & Tests\n-\n\n\n#21\n97\n15/05\n+ axios, fetch  (1) api rest mockapi  + useRef, useReducer, useContext:  (1) to-do: context API \nLab#RE03-3  codesandbox api rest todo cards  deployed api rest todo cards  mock api \n\n\n\n98\n16/05\n+ highcharts:  (1) to-do: visualisation data  (2) import data json  (3) function calculate  + styling\nLab#RE03-2  codesanbox highcharts: todo-app-3  styling \n\n\n\n99\n17/05\n+ axios, fetch  (1) to-do: api rest consume data  (2) to-do: async \nLab#RE03-3  codesanbox rest axios/fetch: todo-app-4  async - async docs mozilla  You Might Not Need an Effect \n\n\n\n100\n18/05\n- store  (1) redux/reducer  local storage  + axios, fetch  (1) to-do: api rest consume data  (2) to-do: async  + React paradigm-core:  (1) immutable/mutable  (2) sync/async  (3) scope (API Context/useContext/Providers)  (4) render cycle: trigger/render/paint \nFetching data\n\n\n\n101\n19/05\n+ SCRUM:  (0) How rich (abundance/scarcity) is created?  (1) Why just left mode is wrong?  (2) The map is no the territory: fishing factory  (3) Right mode: living in the ambiguity (4) Taleb/McGilchrist: Simple/Complicated/Complex  (5) What is a problem? Why science is losing prestige?  (6) Mountain Manifesto  + Retrospective\nAl Pacino best speech - Any Given Sunday - 1080p HD  Mountain Manifesto  The world is not a problem - Iain McGilchrist and Dougald Hine\n\n\n#22\n102\n22/05\n-\n-\n\n\n\n103\n23/05\n-\n-\n\n\n\n104\n24/05\n-\n-\n\n\n\n105\n25/05\n-\n-\n\n\n\n106\n26/05\n-\n-\n\n\n#23\n107\n29/05\n-\n-\n\n\n\n108\n30/05\n-\n-\n\n\n\n109\n31/05\n-\n-\n\n\n\n110\n01/06\n-\n-\n\n\n\n111\n02/06\n-\n-"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#june-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#june-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "June 2023",
    "text": "June 2023\n\nBacklog course June 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#24\n112\n06/06\n-\n-\n\n\n\n113\n07/06\n-\n-\n\n\n\n114\n08/06\n-\n-\n\n\n\n115\n09/06\n-\n-"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#july-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#july-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "July 2023",
    "text": "July 2023"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-projects.html",
    "href": "ifcd0210/ifcd0210backlog-projects.html",
    "title": "IFCD0210 Projects Backlog",
    "section": "",
    "text": "Backlog course"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-projects.html#projects",
    "href": "ifcd0210/ifcd0210backlog-projects.html#projects",
    "title": "IFCD0210 Projects Backlog",
    "section": "Projects",
    "text": "Projects\nWork-in-progress\n\nBacklog Projects\n\n\n\n\n\n\n\n\n\n\n#Project\nAuthor\nSite\nMF01\nMF02\nMF03\n\n\n\n\n#1\nMarc\nCIFO - Web Applications, DevOps Training Projects\n++\n-\n-\n\n\n#2\nRafa\nApp with web tecnologies\n++\n-\n-\n\n\n#3\nLis\nWikilis\n++\n-\n-\n\n\n#4\nCruz\nBlog Fabrizio, Welcome ComboBackend\n++\n-\n-\n\n\n#5\nAitor\nAitor wiki\n-\n-\n-\n\n\n#6\nVictor\nmywebsite\n++\n-\n-\n\n\n#7\nAlbertus\nCurso Cifo DAW\n++\n-\n-\n\n\n#8\nRuben\nmiweb\n++\n-\n-\n\n\n#9\nAlbert\nWiki\n++\n-\n-\n\n\n#10\nCarla\nLabs Carla\n++\n-\n-\n\n\n#11\nPomodoro\nDavid Pomodoro, el hacher\n++\n-\n-\n\n\n#12\nDavid\nDocumentacion\n++\n-\n-\n\n\n#13\nAlex\nAlex quarto project\n-\n-\n-\n\n\n#14\nSergi\naznale_docs\n-\n-\n-\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n- delivery pending\n+ delivery done\n++ delivery pass\n-- need to re-delivery\n\n\n\n\n\n\n\n\n  IFCD0210 Product Backlog \n\n\n\n  top \n\n\n\n About me"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-sprint.html",
    "href": "ifcd0210/ifcd0210backlog-sprint.html",
    "title": "IFCD0210 Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-sprint.html#sprint20-may",
    "href": "ifcd0210/ifcd0210backlog-sprint.html#sprint20-may",
    "title": "IFCD0210 Sprint Backlog",
    "section": "Sprint#20 (May)",
    "text": "Sprint#20 (May)\n\n\nBacklog Sprint#21 May 2023\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#21\n97\n15/05\n-\n-\n\n\n\n98\n16/05\n-\n-\n\n\n\n99\n17/05\n-\n-\n\n\n\n100\n18/05\n-\n-\n\n\n\n101\n19/05\n-\n-\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n- topic planned or pending\n+ topic done in class\n++ new topic not planned\n\n\n\n\n\n\n\n\n  IFCD0210 Calendar \n\n\n\n  top \n\n\n\n IFCD0210 Product Backlog"
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html",
    "href": "ifcd0210/ifcd0210calendar.html",
    "title": "IFCD0210 Calendar",
    "section": "",
    "text": "Time Management, categories and time distribution\n\n\n\n\n\n\n\n\n\nTeacher\nStudent\nTeam\nTag\nDescription\n\n\n\n\n50%\n50%\n-\nClass\ndebate, concepts, code-screen, vocabulary\n\n\n-\n100%\n-\nLab\nLabs, MOOC, Java, Spring, React etc\n\n\n20%\n60%\n20%\nProject\nSCRUM, Lifecycle code from plan to devOps\n\n\n20%\n60%\n20%\nItinerary\nThree kinds: MOOC, model, devOps\n\n\n-\n100%\n-\nPersonal\nTake notes, time management"
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#timetable",
    "href": "ifcd0210/ifcd0210calendar.html#timetable",
    "title": "IFCD0210 Calendar",
    "section": "Timetable",
    "text": "Timetable\n\n\n\nFrom\nTo\nDescription\nBlocks\n\n\n\n\n9:00\n9:15\nDailyScrum\n-\n\n\n9:15\n9:45\nStudent Block - Before Break\n1/2\n\n\n9:45\n10:15\nStudent Block - Before Break\n2/2\n\n\n10:15\n11:00\nTeacher Block\n1/2\n\n\n11:00\n11:20\nBreak\n-\n\n\n11:20\n12:00\nTeacher Block\n2/2\n\n\n12:00\n12:30\nStudent Block - After Break\n1/3\n\n\n12:30\n12:00\nStudent Block - After Break\n2/3\n\n\n13:00\n13:30\nStudent Block - After Break\n3/3\n\n\n\n\n\n\nTimetable class: first iteration"
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#forecast-semester",
    "href": "ifcd0210/ifcd0210calendar.html#forecast-semester",
    "title": "IFCD0210 Calendar",
    "section": "Forecast semester",
    "text": "Forecast semester\nIFCD0210 Cifo Web 2022-2023"
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#calendar",
    "href": "ifcd0210/ifcd0210calendar.html#calendar",
    "title": "IFCD0210 Calendar",
    "section": "Calendar",
    "text": "Calendar\n\n\n\nCalendar 2023\n\n\n\n\n\n\n\n  IFCD0210 Deliveries \n\n\n\n  top \n\n\n\n IFCD0210 Sprint Backlog"
  },
  {
    "objectID": "ifcd0210/ifcd0210deliveries.html",
    "href": "ifcd0210/ifcd0210deliveries.html",
    "title": "IFCD0210 Deliveries",
    "section": "",
    "text": "Backlog course\n\n\nAlways in Quarto-Markdown format and code in GitHub repositories or Organitzations.\nDeliveries via github:\n\nDeliveries table\n\n\n\n\n\n\n\nCode\nDate\nDescription\n\n\n\n\nMF01-0491\n12/12/2022\nFront-end\n\n\nUF01-1841\n13/01/2023\nPrototip WebApp Quarto: web multipage, markdwon/HTML, with github repository and gh-pages deployement\n\n\nUF02-1842\n10/02/2023\nWebApp Quarto amb advanced features: markdown basics, figures, tables, Mermaid Diagrams, callout, cross-references, code highlighted\n\n\nUF03-1843\n20/02/2023\nWebApp Quarto amb Document Listings\n\n\nMF01-0492\n21/02/2023\nProva objectiva i prova pràctica - WebApp Quarto amb Api REST call to server and render the data from JSON, from cloud-external server or Spring Boot local server  - WebApp Quarto amb a Observable JS script cell\n\n\nMF02-0492\n21/02/2022\nBack-end\n\n\nUF01-1844\n20/03/2023\nLaboratori app MVC amb Spring Boot Thyemeleaf (alternatiu Rest) un objecte amb totes les operacions CRUD\n\n\nUF02-1845\n19/04/2023\nLaboratori app Spring Boot Thyemeleaf (opcional Rest) amb H2 JPA (alternatiu objectes amb Composition/Inherence)\n\n\nUF03-1846\n09/05/2023\nLaboratori app web amb React Hooks\n\n\nMF02-0492\n10/05/2023\nProva objectiva i prova pràctica (triar una opció) - Laboratori app Spring Boot amb React  - Laboratori Spring Boot Server-Data API Rest amb Spring Boot Client-Web-Thymeleaf  - Laboratori app Spring Boot Thynmeleaf deployat a AWS  - Laboratori app web amb React Hooks amb Data API Rest\n\n\nMF03-0493\n10/05/2022\nProject\n\n\nUF01\n08/06/2023\nCrear app web CRUD amb db en servidor remot Spring Boot i gestió de dades amb API fetch (opcional altres tech) JS React\n\n\nMF03-0493\n08/06/2023\nProva objectiva i prova pràctica\n\n\n\n\n\n\n\n\n  IFCD0210 Init Mail \n\n\n\n  top \n\n\n\n IFCD0210 Calendar"
  },
  {
    "objectID": "ifcd0210/ifcd0210initemail.html",
    "href": "ifcd0210/ifcd0210initemail.html",
    "title": "IFCD0210 Init Mail",
    "section": "",
    "text": "Initial email"
  },
  {
    "objectID": "ifcd0210/ifcd0210initemail.html#content",
    "href": "ifcd0210/ifcd0210initemail.html#content",
    "title": "IFCD0210 Init Mail",
    "section": "Content",
    "text": "Content\n\nNo és un curs llarg, ni de broma, des del primer dia, a treballar.\nMooc Helsinki Java\n\nhttps://java-programming.mooc.fi/,\nla primera part Java Programming I, és fonamental fer-la aquesta setmana o durant aquestes dos primeres setmanes de curss o màxim, màxim durant les vacances de Nadal.\nja sabeu: algoritmica bàsica i POO\n\nLa nostra web: https://albertprofe.github.io/web/\n\nja la podeu putijejar\nencara no te domini propi: ho tindrà\nfeta amb quarto/markdown/github-pages: https://albertprofe.github.io/web/about/aboutthissite.html (ja ho explicaré a classe)\n\nComptes que necessitareu:\n\nGitHub\nOracle (per descarregar Java)\nMongoDB\nAWS (demana credit card)\n\nIDEs:\n\nVisual Code per ReactJS\nIntellJIdea per Java Spring Boot\nSublime\n\nOS, linux virtual machine? dual? ho parlem però mireu-vos això\n\nhttps://neverinstall.com/ (i feu-vos un compte)\n\nper qui no pugui vindre dilluns vinent, URL del jit si meet:\n\nhttps://meet.jit.si/cifoweb\nhttps://meet.jit.si/cifowebboard\n\n\n\n\n\n\n\n  IFCD0210 Official Docs \n\n\n\n  top \n\n\n\n IFCD0210 Deliveries"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Technologies programmed and studied in this site"
  },
  {
    "objectID": "index.html#skills-needed-as-a-developer-2022",
    "href": "index.html#skills-needed-as-a-developer-2022",
    "title": "Home",
    "section": "Skills needed as a developer (2022)",
    "text": "Skills needed as a developer (2022)\n\n📘 Developer skills summary\n\nAlgorithmic, OOP, COP\nArchitecture in mind - Systems Design\nControl Version Systems\nDevOps\nSCRUM\n\n\n\nThis wiki is focused in Web App development and the skills set needed. Nowadays a developer (not a coder) must have this skills set:\n\nAlgorithmic, (let’s say micro-development vs. architecture and macro-development skills). That is, for example the current most used and modern paradigms:\n\nScripting: BASH\nStructured and Procedural: C\nOOP (Object-Oriented Programming): Java SE\nCOP (Components-Oriented Programming): React JS and React TS\n\nArchitecture in mind: that it, System Design and Design-Patterns\n\nDDD: Domain-driven design and microservices\nSpring Boot\nCloud: AWS\n\nProject Management and Team Work:\n\nSCRUM and beyond SCRUM\n\nControl Version Systems:\n\nGit / GitHub / GitLab\nSubversion\n\nDevOps, from Test to Deploy, through Documentation\n\nabout this site, for documentation example.\nJUnit for Spring Boot\nJest for JS React\nDeploy on Heroku, Netlify, AWS Amplify\nJenkins, Docker and k8s"
  },
  {
    "objectID": "index.html#lifecycle-software-2022",
    "href": "index.html#lifecycle-software-2022",
    "title": "Home",
    "section": "Lifecycle software (2022)",
    "text": "Lifecycle software (2022)\nAnd a developer needs such a set skill due to the wide and integral software lifecycle that allows to build apps.\n\n\n\n\n\nThe software development lifecycle (SDLC) is a process that describes the stages involved in creating and deploying software. It typically includes the following six steps:\n\nPlanning: This stage involves identifying the goals and objectives of the software, as well as determining the resources and timelines required to develop it.\nDesign: In this stage, the software’s architecture and user interface are created, and the functional and non-functional requirements are defined.\nTest: This stage involves the implementation of test-driven development (TDD). It starts by writing automated test cases based on the requirements and design of the software. The developer then writes the minimum amount of code needed to pass the test, and repeat this process until all the requirements are met.\nDevelop: The actual coding of the software takes place during this stage. This may involve writing code in a specific programming language or using certain development tools.\nMaintain: Once the software is tested and developed, it will be integrated into the primary source code through developer efforts, usually by leveraging training environments to detect further errors or defects.\nDeploy: The final stage is deployment, where the software is made available to users. This may involve installing the software on individual computers or deploying it to a server for multiple users to access."
  },
  {
    "objectID": "index.html#what-is-a-programmer-2022-openai",
    "href": "index.html#what-is-a-programmer-2022-openai",
    "title": "Home",
    "section": "What is a programmer (2022 OpenAI)",
    "text": "What is a programmer (2022 OpenAI)\nA programmer, also known as a software developer, needs a wide range of skills in order to be successful in their role. Some of the most important skills for a programmer include:\n\nStrong problem-solving skills: A programmer needs to be able to analyze complex problems and develop effective solutions using code. Logical thinking: Programming involves creating logical structures and processes that a computer can follow, so a programmer needs to have strong logical and analytical skills.\nKnowledge of programming languages and technologies: A programmer needs to have a deep understanding of the programming languages and technologies that they use, as well as the ability to learn new languages and technologies as needed.\nAttention to detail: Programming involves working with complex systems and large amounts of data, so a programmer needs to have a keen eye for detail and the ability to spot errors and inconsistencies.\nCommunication skills: A programmer often works as part of a team, so they need to be able to communicate effectively with other developers and stakeholders.\nTime management and organizational skills: A programmer typically has multiple tasks and deadlines to manage, so they need to be able to prioritize their work and stay organized.\n\nIn addition to these core skills, a programmer may also benefit from having knowledge of software development methodologies, such as Agile or Waterfall, as well as experience with version control systems and other tools commonly used in software development."
  },
  {
    "objectID": "index.html#how-can-we-get-it",
    "href": "index.html#how-can-we-get-it",
    "title": "Home",
    "section": "How can we get it?",
    "text": "How can we get it?\nTo be a good programmer, you need to have a strong foundation in computer science and software development principles, as well as the ability to learn and adapt to new technologies and languages. Some specific ways that you can improve your skills as a programmer include:\n\nPractice regularly: The best way to improve your programming skills is to write code regularly and work on a variety of projects. This will help you develop your problem-solving skills and build your knowledge of different languages and technologies.\nLearn from others: There are many resources available online, such as tutorials, blogs, and forums, where you can learn from experienced programmers and ask questions. You can also learn by working on open-source projects and collaborating with other developers.\nStay up-to-date: The field of software development is constantly evolving, so it is important to stay up-to-date with the latest technologies and best practices. This can help you stay ahead of the curve and keep your skills relevant.\nTake on new challenges: To continue growing as a programmer, you should strive to take on new and challenging projects that push you to learn and improve. This can help you develop new skills and broaden your expertise.\nSeek feedback: It can be helpful to seek feedback from experienced programmers, mentors, or peers on your work. This can help you identify areas for improvement and learn from others who have more experience.\n\nIn general, being a good programmer requires a combination of technical skills, problem-solving abilities, and a willingness to learn and grow. By focusing on these areas and continually striving to improve, you can become a successful and effective programmer."
  },
  {
    "objectID": "index.html#and-reading-books",
    "href": "index.html#and-reading-books",
    "title": "Home",
    "section": "And reading books?",
    "text": "And reading books?\nReading books can help improve your skills as a programmer in several ways. Some specific benefits of reading books for programmers include:\n\nExpanding your knowledge: Books can provide a wealth of information on a wide range of topics related to programming. By reading books, you can learn about new technologies, programming languages, and best practices that you may not have been aware of before.\nImproving your problem-solving skills: Many books on programming include examples and exercises that you can use to practice your problem-solving skills. By working through these exercises, you can improve your ability to analyze complex problems and develop effective solutions using code.\nBroadening your perspective: Reading books written by other programmers can provide valuable insights into how they approach problems and solve them. This can help you learn new techniques and strategies that you can apply to your own work.\nBuilding your vocabulary: Many technical books on programming include specialized terminology and concepts that you may not be familiar with. By reading these books, you can expand your vocabulary and become more fluent in the language of programming.\nStaying up-to-date: Reading books can help you keep up with the latest trends and developments in the field of software development. This can help you stay ahead of the curve and ensure that your skills remain relevant and in-demand.\n\nOverall, reading books can be a valuable way to improve your skills as a programmer. By reading books written by experienced programmers, you can learn new techniques and strategies, expand your knowledge, and stay up-to-date with the latest developments in the field.\n\n\n\n\n\n  About images credit \n\n\n\n  top \n\n\n\n Linux: basic concepts"
  },
  {
    "objectID": "javase/resources.html",
    "href": "javase/resources.html",
    "title": "Java SE Resources",
    "section": "",
    "text": "Java SE Resources"
  },
  {
    "objectID": "javase/resources.html#object-oriented-programming-with-java-part-i",
    "href": "javase/resources.html#object-oriented-programming-with-java-part-i",
    "title": "Java SE Resources",
    "section": "1 Object-Oriented Programming with Java, part I",
    "text": "1 Object-Oriented Programming with Java, part I\n\n\n\n\n\n\n\nObject-Oriented Programming with Java, part I Week 1\nObject-Oriented Programming with Java, part I Week 2\nObject-Oriented Programming with Java, part I Week 3\nObject-Oriented Programming with Java, part I Week 4\nObject-Oriented Programming with Java, part I Week 5\nObject-Oriented Programming with Java, part I Week 6"
  },
  {
    "objectID": "javase/resources.html#books",
    "href": "javase/resources.html#books",
    "title": "Java SE Resources",
    "section": "2 Books",
    "text": "2 Books\n\nDesign Patterns: Elements of Reusable Object-Oriented Software Erich Gamma; Richard Helm; Ralph Johnson; John Vlissides"
  },
  {
    "objectID": "javase/resources.html#web",
    "href": "javase/resources.html#web",
    "title": "Java SE Resources",
    "section": "3 Web",
    "text": "3 Web\n\nJava Programming Tutorial Object-oriented Programming (OOP) Basics: www3.ntu.edu.sg\nJava Oracle Official Documentation The Java™ Tutorials\nStackOverFlow Is Java “pass-by-reference” or “pass-by-value”?\nJHipster is a development platform to quickly generate, develop, & deploy modern web applications & microservice architectures: JHipster\nMermaid The class diagram is the main building block of object-oriented modeling.\nJava Persistence, a book relating to the Java programming language. Java Persistence"
  },
  {
    "objectID": "javase/resources.html#presentations",
    "href": "javase/resources.html#presentations",
    "title": "Java SE Resources",
    "section": "4 Presentations",
    "text": "4 Presentations\n\nJava SE Presentations\n\n\n4.1 Student recommmendations\nby Victor C.\n\nTutorials de git y github: Git and GitHub\nTutorials java desde 0: Java tutorials\n\n\n\n\n\n\n  Lab#SE03-3: Library/Book, Expand Model \n\n\n\n  top \n\n\n\n Spring Framework"
  },
  {
    "objectID": "javase/se-concepts-coupling.html",
    "href": "javase/se-concepts-coupling.html",
    "title": "Java SE: Coupling and DDD",
    "section": "",
    "text": "📘 Coupling/coherence\nCoupling refers to the degree to which one class or module depends on another class or module.\nHigh/tight coupling means that one class or module depends heavily on another class or module, while low/loose coupling means that one class or module has minimal dependencies on other classes or modules.\nCoupling refers to the degree of dependence, decoupling, on the other hand, refers to the process of reducing the degree of coupling between different classes or modules in a system. By decoupling classes or modules, you can make the system more modular, scalable, flexible, and maintainable."
  },
  {
    "objectID": "javase/se-concepts-coupling.html#key-concept",
    "href": "javase/se-concepts-coupling.html#key-concept",
    "title": "Java SE: Coupling and DDD",
    "section": "1 Key-concept",
    "text": "1 Key-concept\nThe importance of decoupling in Java lies in its ability to improve the modularity, flexibility, and maintainability of a system. When classes or modules are highly coupled, changes to one class or module can have a cascading effect on other classes or modules, which can make the system difficult to modify and maintain. By decoupling classes or modules, you can reduce the dependencies between them, which can make the system more modular and easier to modify and maintain.\n\n\n\nCoupling and cohesion by Евгений Мирошниченко, CC0, via Wikimedia Common\n\n\nAdditionally, decoupling can help to improve the reusability of classes or modules. When classes or modules are highly coupled, it can be difficult to reuse them in other contexts or situations. By decoupling classes or modules, you can make them more self-contained and independent, which can make them more easily reusable in other contexts."
  },
  {
    "objectID": "javase/se-concepts-coupling.html#what-is-the-domain-ddd",
    "href": "javase/se-concepts-coupling.html#what-is-the-domain-ddd",
    "title": "Java SE: Coupling and DDD",
    "section": "2 What is the Domain? DDD?",
    "text": "2 What is the Domain? DDD?\nTo define domain-driven design, we should first establish what we mean by domain in this context (and in development in general).\nThe standard dictionary definition of domain is: “A sphere of knowledge or activity.” Drilling down a bit from that, the domain in software engineering commonly refers to the subject area on which the application is intended to apply.\nIn other words, during application development, the domain is the sphere of knowledge and activity around which the application logic revolves.\n\n\n\n\n\n\nDomain-Driven Design: worth reading!\n\n\n\nCoupling degree in a project is highly related to the project desing stage. Using a Domain-Driven Design strategy can reduce the coupling between the different entities, value objects, domain events, etc…\n\n\n\n2.1 Ubiquitous Language\nUbiquitous Language is the term Eric Evans uses in Domain Driven Design for the practice of building up a common, rigorous language between developers and users.\nThis language should be based on the Domain Model used in the software - hence the need for it to be rigorous, since software doesn’t cope well with ambiguity.\n\n\n2.2 Extreme Programming (XP)\nExtreme Programming (XP) is a software development methodology developed primarily by Kent Beck.\nXP was one of the first agile methods, indeed XP was the dominant agile method in the late 90s and early 00s before Scrum became dominant as the noughties passed: XP was the primary catalyst that got attention to agile methods.\n\n\n2.3 Technical debt\nSoftware systems are prone to the build up of cruft - deficiencies in internal quality that make it harder than it would ideally be to modify and extend the system further.\n\n\n2.4 Building Blocks\nDomain Driven Design also defines several high-level concepts that can be used in conjunction with one another to create and modify domain models:\n\nEntity\nValue Object\nDomain Event\nAggregate\nService\nRepository\nFactories\nController\nTest\nManager"
  },
  {
    "objectID": "javase/se-concepts-coupling.html#example-carfactory",
    "href": "javase/se-concepts-coupling.html#example-carfactory",
    "title": "Java SE: Coupling and DDD",
    "section": "3 Example: CarFactory",
    "text": "3 Example: CarFactory\nHere is an example of decoupling in Java, using a CarFactory class to create different types of cars:\n\n\nCarFactory.java\n\npublic class CarFactory {\n    // Private constructor to prevent instantiation\n    private CarFactory() { }\n\n    // Factory method for creating cars\n    public static Car createCar(String type) {\n        switch (type) {\n            case \"sedan\":\n                return new Sedan(\"Toyota\", \"Camry\", 2019);\n            case \"hatchback\":\n                return new Hatchback(\"Honda\", \"Fit\", 2019);\n            case \"suv\":\n                return new SUV(\"Jeep\", \"Grand Cherokee\", 2019);\n            default:\n                throw new IllegalArgumentException(\"Invalid car type: \" + type);\n        }\n    }\n}\n\n\n\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type. The createCar() method takes a type parameter, which specifies the type of car to create, and returns an instance of the appropriate concrete class.\nBy decoupling the CarFactory class from the code that uses the cars, you can make the code that uses the cars more flexible and reusable. For example, you could define a CarDriver class that takes a Car object as a parameter, and uses the Car object to drive the car. Because the CarDriver class doesn’t depend on the CarFactory class, you can use the CarDriver class to drive any type of car, regardless of how the car was created.\nAdditionally, by decoupling the CarFactory class from the code that uses the cars, you can make the logic for creating the cars more modular and maintainable. For example, if you want to add a new type of car, such as a truck, you can simply add a new Truck class that extends the Car class, and then update the CarFactory class to include logic for creating instances of the Truck class. Because the CarFactory class is decoupled from the code that uses the cars, you don’t have to change any other code in the system in order to add the new car type."
  },
  {
    "objectID": "javase/se-concepts-coupling.html#conclusion",
    "href": "javase/se-concepts-coupling.html#conclusion",
    "title": "Java SE: Coupling and DDD",
    "section": "4 Conclusion",
    "text": "4 Conclusion\nOverall, decoupling is an important concept in Java programming, and can help to improve the modularity, flexibility, and maintainability of a system.\n\n\n\n\n\n\nTip\n\n\n\nBy reducing the dependencies between classes or modules, you can make the system more modular and easier to modify and maintain, and you can improve the reusability of individual classes or modules.\n\n\n\n\n\n\n\n  Java SE: static modifier \n\n\n\n  top \n\n\n\n Java SE: Packages"
  },
  {
    "objectID": "javase/se-concepts-createproject.html",
    "href": "javase/se-concepts-createproject.html",
    "title": "Java SE: Create Maven Project",
    "section": "",
    "text": "To create a Maven project with a standard directory structure using IntelliJ IDEA, you can follow these steps:\n\nInstall the Maven plugin in IntelliJ IDEA.\nOpen IntelliJ IDEA and navigate to the Plugins settings.\nSearch for Maven and install the plugin.\nIn IntelliJ IDEA, click Create New Project.\nIn the New Project dialog, select Maven Archetype from the list of Generators.\nSelect the maven-archetype-quickstart archetype. This archetype creates a standard Maven project with a directory structure for source code and unit tests.\nClick Advanced Settings and enter the GroupId and ArtifactId for your project. These are used to identify your project uniquely across all projects.\nClick Create to create the project.\n\nYour project will be created with the following directory structure:\nmy-project\n├── pom.xml\n└── src\n    ├── main\n    │   └── Person.java\n    │       Account.java\n    │       AccountManager.java    \n    └── test\n        └── AccountManagerTest.java\nThe src/main/java directory is where you should put your Java source code, and the src/test/java directory is where you should put your unit tests.\n\n\n\nMaven project folder-tree\n\n\nTo specify the version of Maven to use, you can edit the pom.xml file and add a  element to the  element. For example:\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example</groupId>\n  <artifactId>my-project</artifactId>\n  <version>3.6.3</version>\n  ...\n</project>\nThis will use version 3.6.3 of Maven for the project."
  },
  {
    "objectID": "javase/se-concepts-createproject.html#step-by-step-screenshots-2022-12-14",
    "href": "javase/se-concepts-createproject.html#step-by-step-screenshots-2022-12-14",
    "title": "Java SE: Create Maven Project",
    "section": "2 Step-by-step screenshots (2022-12-14)",
    "text": "2 Step-by-step screenshots (2022-12-14)\nSlider-presentation Create project Java SE Maven"
  },
  {
    "objectID": "javase/se-concepts-createproject.html#what-did-we-create",
    "href": "javase/se-concepts-createproject.html#what-did-we-create",
    "title": "Java SE: Create Maven Project",
    "section": "3 What did we create?",
    "text": "3 What did we create?\n\n\n\nAnatomy of our first Class\n\n\n\n\n\n\n\n  Java SE: Maven \n\n\n\n  top \n\n\n\n Java SE: Project push GitHub"
  },
  {
    "objectID": "javase/se-concepts-interface.html",
    "href": "javase/se-concepts-interface.html",
    "title": "Java SE: Abstract/Interface",
    "section": "",
    "text": "📘 Abstract/Interface\nAbstraction and particulary Interfaces provide a way for multiple classes to share a common set of methods or properties, without inheriting from a common base class.\nInterfaces are the tool when the code needs order, be clear and be easly readable."
  },
  {
    "objectID": "javase/se-concepts-interface.html#abstractinterface",
    "href": "javase/se-concepts-interface.html#abstractinterface",
    "title": "Java SE: Abstract/Interface",
    "section": "1 Abstract/Interface",
    "text": "1 Abstract/Interface\nData abstraction is the process of hiding certain details and showing only essential information to the user.\nAbstraction can be achieved with either:\n\nabstract classes or\ninterfaces\n\n\n\n\nFrom regular class to Interface passing by Abstract class\n\n\nAn interface is a completely “abstract class” that is used to group related methods with empty bodies\n\n1.1 Abstract class\nThe abstract keyword is a non-access modifier, used for classes and methods:\n\nAbstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).\nAbstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).\n\n\n\nmoviemodel.java\n\n// Abstract class\nabstract class Animal {\n  // Abstract method (does not have a body)\n  public abstract void animalSound();\n  // Regular method\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\n\n// Subclass (inherit from Animal)\nclass Pig extends Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\n\n\n1.2 Interface\nTo access the interface methods, the interface must be “implemented” (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the “implement” class:\n\n\nmoviemodel.java\n\n// Interface\ninterface Animal {\n  public void animalSound(); // interface method (does not have a body)\n  public void sleep(); // interface method (does not have a body)\n}\n\n// Pig \"implements\" the Animal interface\nclass Pig implements Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n  public void sleep() {\n    // The body of sleep() is provided here\n    System.out.println(\"Zzz\");\n  }\n}\n\n\n\n\n\n\n\nNote\n\n\n\n\nLike abstract classes, interfaces cannot be used to create objects\nInterface methods do not have a body - the body is provided by the “implement” class\nOn implementation of an interface, you** must override all of its methods**\nInterface methods are by default abstract and public\nInterface attributes are by default public, static and final\nAn interface cannot contain a constructor (as it cannot be used to create objects)"
  },
  {
    "objectID": "javase/se-concepts-interface.html#pros-cons-of-interfaces",
    "href": "javase/se-concepts-interface.html#pros-cons-of-interfaces",
    "title": "Java SE: Abstract/Interface",
    "section": "2 Pros & cons of interfaces",
    "text": "2 Pros & cons of interfaces\n\n2.1 Pros of using interfaces:\n\nInterfaces provide a way to define a contract that classes must implement, ensuring that certain methods or properties are present. Interfaces allow for multiple inheritance, allowing a class to implement multiple interfaces.\nInterfaces promote code reuse by allowing multiple classes to share a common set of methods or properties.\nJava’s support for default methods in interfaces allows for the addition of new methods to an interface without breaking existing code that implements the interface.\nInterfaces can be used to define a common API for different implementations of a specific functionality.\n\n\n\n2.2 Cons of using interfaces:\n\nAn interface does not provide any implementation for its methods or properties, so classes that implement an interface must provide their own implementation.\nInterfaces can lead to more complex code, as it may require more effort to understand how the different classes and interfaces relate to each other.\nInterfaces can make it more difficult to understand the relationships between classes, as it may not be immediately clear which classes implement a specific interface.\nInterfaces can lead to a proliferation of small, highly-specialized interfaces, which may make the codebase harder to understand and maintain.\n\n\n\n\n\n\n\nImportant\n\n\n\nJava does not support “multiple inheritance” (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces.\n\n\n\n\n\n\n\n  Java SE: Packages \n\n\n\n  top \n\n\n\n Java SE: Java 8"
  },
  {
    "objectID": "javase/se-concepts-java8.html",
    "href": "javase/se-concepts-java8.html",
    "title": "Java SE: Java 8",
    "section": "",
    "text": "📘 Java 8\nJava 8 is a revolutionary release of the development platform.\nIt includes a huge upgrade to the Java programming model and a coordinated evolution of the JVM, Java language, and libraries.\nJava 8 includes features for productivity, ease of use, improved programming technique in java, security and improved performance."
  },
  {
    "objectID": "javase/se-concepts-java8.html#overview",
    "href": "javase/se-concepts-java8.html#overview",
    "title": "Java SE: Java 8",
    "section": "1 Overview",
    "text": "1 Overview\nJava 8 includes the following:\n\nLambda expressions\nMethod references\nDefault Methods (Defender methods)\nA new Stream API.\nOptional\nA new Date/Time API.\nNashorn, the new JavaScript engine\nRemoval of the Permanent Generation"
  },
  {
    "objectID": "javase/se-concepts-java8.html#main-features",
    "href": "javase/se-concepts-java8.html#main-features",
    "title": "Java SE: Java 8",
    "section": "2 Main features",
    "text": "2 Main features\nJava 8 introduced several new features to the language, including Streams, Optional, Lambda expressions, and Method references. Here’s a brief definition of each of these features:\n\nStreams Streams provide a way to process collections of data in a declarative and functional way. Streams allow you to express complex data manipulations in a simple, concise way.\n\n\n\nWith streams, you can filter, map, reduce, and collect data in a highly readable and maintainable way.\n\nOptional Optional is a container object that may or may not contain a non-null value. It is designed to reduce the number of null checks in your code and to provide a more elegant way of handling null values.\n\n\n\nOptional can be used to wrap any object, and it provides methods for safely accessing the wrapped object or handling the case when the object is null.\n\nLambda expressions Lambda expressions provide a way to write code in a functional style. They allow you to pass behavior as an argument to a method, which is a powerful technique for writing more modular and reusable code.\n\n\n\nLambda expressions can be used in place of anonymous inner classes and are highly concise and readable.\n\nMethod references Method references provide a way to pass a method as an argument to another method. They provide a concise and expressive way to write code, and can be used in place of lambda expressions in certain situations.\n\n\n\nMethod references are highly readable and can make code more modular and reusable."
  },
  {
    "objectID": "javase/se-concepts-java8.html#example-of-functional-style-in-java-8",
    "href": "javase/se-concepts-java8.html#example-of-functional-style-in-java-8",
    "title": "Java SE: Java 8",
    "section": "3 Example of functional-style in Java 8",
    "text": "3 Example of functional-style in Java 8\nSuppose you have a list of integers and you want to filter out the even numbers and then calculate the sum of the remaining odd numbers.\nIn Java 8 and later, you can use a combination of lambda expressions and the Stream API to express this computation in a functional-style:\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\nint sum = numbers.stream()               // create a stream of the list of numbers\n                .filter(n -> n % 2 != 0) // filter out the even numbers\n                .mapToInt(Integer::intValue) // convert the stream to an IntStream\n                .sum();                 // calculate the sum of the remaining odd numbers\n\nSystem.out.println(\"Sum of odd numbers: \" + sum);\n\n\nThe lambda expression n -> n % 2 != 0 passed to the filter() method tests each number to see if it is odd by checking if the remainder after division by 2 is not equal to 0.\nIn this code, we first create a stream of the list of numbers using the stream() method.\nWe then use the filter() method to remove all the even numbers from the stream, and the mapToInt() method to convert the stream to an IntStream, which has a sum() method that we can use to calculate the sum of the remaining odd numbers.\nThis example demonstrates how functional-style programming in Java can be used to express computations in a more concise and readable way by using higher-order functions, lambda expressions, and the Stream API.\nInstead, using imperative and modern Java 8:\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\nint sum = 0;\nfor (int number : numbers) {\n    if (number % 2 != 0) {  // filter out even numbers\n        sum += number;      // accumulate odd numbers\n    }\n}\n\nSystem.out.println(\"Sum of odd numbers: \" + sum);\n\n\nIn this code, we iterate over the list of numbers using a for-each loop, and filter out even numbers using an if-statement. We then accumulate the odd numbers in the sum variable using the += operator. Finally, we print the result using System.out.println()."
  },
  {
    "objectID": "javase/se-concepts-java8.html#streams",
    "href": "javase/se-concepts-java8.html#streams",
    "title": "Java SE: Java 8",
    "section": "4 Streams",
    "text": "4 Streams\n\nFirst of all, Java 8 Streams should not be confused with Java I/O streams (ex: FileInputStream etc).\nSimply put, streams are wrappers around a data source, allowing us to operate with that data source and making bulk processing convenient and fast by lazy and terminal operations.\nA stream does not store data and, in that sense, is not a data structure. It also never modifies the underlying data source.\nThis functionality java.util.stream supports functional-style operations on streams of elements.\n\n\n\n\n\nStreams allow you to express complex data manipulations in a simple, concise way. With streams, you can filter, map, reduce, and collect data in a highly readable and maintainable way.\n\n\n\n4.1 Example\nHere’s an example of how lazy evaluation, wrapping the data and intermediate/terminal operations work in Java streams:\nList<String> words = Arrays.asList(\"hello\", \"world\", \"how\", \"are\", \"you\");\n\n// create a stream and apply intermediate operations to filter and map the data\nStream<String> stream = words.stream()\n    .filter(w -> w.length() > 3)\n    .map(String::toUpperCase);\n\n// call a terminal operation to evaluate the stream and produce a result\nString result = stream.findFirst().orElse(\"\");\n\nSystem.out.println(result);\n\n\nIn this example, we start by creating a list of strings and then create a stream from the list using the stream() method and wrapping them around.\nWe then apply two intermediate operations, filter() and map(), to filter the words that have a length greater than 3 and convert them to uppercase, respectively.\nAt this point, no computation has been performed on the data. Instead, the operations on the stream have created a new stream with the modified data.\nNext, we call a terminal operation, findFirst(), to find the first element in the stream that matches the specified condition.\nThis operation triggers the computation of the stream and produces a result, which in this case is the first word in the stream that has a length greater than 3 and is in uppercase.\nBecause of lazy evaluation, only the elements that are necessary to produce the result are processed. In this example, only the first element that matches the condition is processed, and the remaining elements are not processed.\nFinally, we print the result to the console, which is the first word in the stream that matches the condition. In this case, the result is the string “WORLD”."
  },
  {
    "objectID": "javase/se-concepts-java8.html#optional",
    "href": "javase/se-concepts-java8.html#optional",
    "title": "Java SE: Java 8",
    "section": "5 Optional",
    "text": "5 Optional\n\nOptional is a container object that may or may not contain a non-null value. It is a way to represent a value that may or may not be present, without using null references.\n\n\nAn Optional object can either contain a non-null value, or be empty. When an Optional object contains a value, it provides a way to safely access that value without risking a NullPointerException. On the other hand, when an Optional object is empty, it indicates that there is no value present.\nTo create an Optional object, you can call the staticof() method and pass in a non-null value, or you can call the static empty() method to create an empty Optional object.\n\n\n\nOptional\n\n\nTo access the value of an Optional object, you can call the get() method, but it is recommended to first check if the value is present using the isPresent() method. If the value is not present, you can provide a default value using the orElse() or orElseGet() methods.\n\n\n\n\n\n\nNote\n\n\n\nOptional is often used as a return type for methods that may or may not return a value, as a way to indicate that the method may return no value, and to avoid returning null references. It is also used in the Stream API to represent the possibility of an empty result set.\n\n\n\n5.1 Example\nimport java.util.Optional;\n\npublic class OptionalExample {\n    public static void main(String[] args) {\n        String name = \"John Doe\";\n        Optional<String> optionalName = Optional.of(name); // Create an Optional object with a non-null value\n        System.out.println(optionalName.isPresent()); // true\n        System.out.println(optionalName.get()); // \"John Doe\"\n\n        String nullName = null;\n        Optional<String> optionalNullName = Optional.ofNullable(nullName); // Create an Optional object with a null value\n        System.out.println(optionalNullName.isPresent()); // false\n\n        String defaultName = \"Jane Doe\";\n        String finalName = optionalNullName.orElse(defaultName); // Use the default value when the Optional is empty\n        System.out.println(finalName); // \"Jane Doe\"\n    }\n}\n\n\n\nIn this example, we create two Optional objects: optionalName, which contains a non-null value, and optionalNullName, which contains a null value.\nWe use the isPresent() method to check if the Optional objects contain a value, and the get() method to access the values. When optionalNullName is empty, we use the orElse() method to provide a default value."
  },
  {
    "objectID": "javase/se-concepts-java8.html#lambda",
    "href": "javase/se-concepts-java8.html#lambda",
    "title": "Java SE: Java 8",
    "section": "6 Lambda",
    "text": "6 Lambda\n\nLambda expressions support functional programming style, which emphasizes writing code in terms of functions that take inputs and produce outputs, without relying on mutable state or side effects.\nThey allow to express a behavior as a function object, which can be passed around and executed later.\n\n\nA lambda expression is composed of three parts:\n\nthe argument list,\nthe arrow token (->),\nand the body.\n\nThe argument list specifies the inputs to the function, and can be empty or have one or more parameters. The arrow token separates the argument list from the body. The body contains the code that implements the behavior of the lambda expression.\n\n\n\nLambda\n\n\n\n6.1 Example\nHere’s an example of a lambda expression that adds two numbers:\n(int a, int b) -> a + b\n\n\n\nThis lambda expression takes** two int arguments and returns their sum. The argument list (int a, int b) specifies the inputs** to the function, and the body a + b contains the code that implements the behavior.\nLambda expressions can be used in many places in Java, such as the Stream API, the Comparator interface, and the Runnable and Callable interfaces. They are a powerful tool for writing concise, expressive code that is easy to read and maintain."
  },
  {
    "objectID": "javase/se-concepts-java8.html#method-references",
    "href": "javase/se-concepts-java8.html#method-references",
    "title": "Java SE: Java 8",
    "section": "7 Method references",
    "text": "7 Method references\n\nMethod references are special types of lambda expressions that execute only one method.\nMethod reference is a shorthand syntax for referring to an existing method or constructor, without having to provide a full method implementation.\nIt is a way to pass a method as a parameter to another method or to create a functional interface instance.\n\n\n\nA comprehensive guide to Java 8 method reference\nQuickly writing Java lambdas and method references\n\nThey allow you to refer to a method by its name and optionally specify the object on which the method is invoked.\n\n\n\nMethod references\n\n\nThere are four types of method references:\n\nReference to a static method\nReference to an instance method of an object of a particular type\nReference to an instance method of an existing object\nReference to a constructor\n\n\n7.1 Example names print\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n\n// Using lambda expression\nnames.forEach(name -> System.out.println(name));\n\n// Using method reference\nnames.forEach(System.out::println);\nIn this example, we have a list of names and we want to print them to the console. We can achieve this using a forEach method that accepts a Consumer interface implementation. The Consumer interface has a single abstract method accept that takes an input and performs an operation on it.\nWe can pass a lambda expression or a method reference to the forEach method to define the Consumer implementation. In the lambda expression version, we define an anonymous function that takes a name parameter and prints it to the console using System.out.println(name).\nIn the method reference version, we refer to the println method of the System.out object using the syntax System.out::println. This is equivalent to passing a lambda expression that calls System.out.println(name) with the name parameter.\nBoth versions of the code produce the same output, but the method reference version is more concise and easier to read.\n\n\n7.2 Example names compareTo\nList<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n\n// Using lambda expression\nCollections.sort(names, (name1, name2) -> name1.compareTo(name2));\n\n// Using method reference\nCollections.sort(names, String::compareTo);\nIn this example, we have a list of names and we want to sort them in ascending order. We can achieve this using the sort method of the Collections class, which accepts a list and a Comparator implementation to define the sort order.\nWe can pass a lambda expression or a method reference to the sort method to define the Comparator implementation. In the lambda expression version, we define an anonymous function that takes two String parameters name1 and name2, and compares them using the compareTo method of String class.\nIn the method reference version, we refer to the compareTo method of the String class using the syntax String::compareTo. This is equivalent to passing a lambda expression that calls name1.compareTo(name2).\nBoth versions of the code produce the same output, but the method reference version is more concise and easier to read.\n\n\n\n\n\n  Java SE: Abstract/Interface \n\n\n\n  top \n\n\n\n Java SE: Encapsulation"
  },
  {
    "objectID": "javase/se-concepts-maven.html",
    "href": "javase/se-concepts-maven.html",
    "title": "Java SE: Maven",
    "section": "",
    "text": "📘 Dependency Management: Maven\nApache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information.\nThese tools allow developers to specify the dependencies for their project in a file, and then automatically handle the process of downloading and installing those dependencies. This can save a lot of time and effort for developers, and helps ensure that all of the necessary dependencies are present and up-to-date in a project."
  },
  {
    "objectID": "javase/se-concepts-maven.html#maven",
    "href": "javase/se-concepts-maven.html#maven",
    "title": "Java SE: Maven",
    "section": "1 Maven",
    "text": "1 Maven\nMaven is a build automation tool used primarily for Java projects.\nMaven can also be used to build and manage projects written in C#, Ruby, Scala, and other languages. The Maven project is hosted by the Apache Software Foundation, where it was formerly part of the Jakarta Project.\nMaven addresses two aspects of building software: - how software is built and - its dependencies"
  },
  {
    "objectID": "javase/se-concepts-maven.html#maven-central-repository",
    "href": "javase/se-concepts-maven.html#maven-central-repository",
    "title": "Java SE: Maven",
    "section": "2 Maven Central Repository",
    "text": "2 Maven Central Repository\nLink: Maven Central Repository\nMaven repository is a directory where all the dependencies such as jars, library files, plugins, or other artifacts that will be required by the projects are stored.\nThese repositories help us to store and maintain useful resources so that they can be used in our maven projects while building and deploying the artifacts.\nAll the layout and structure of the underlying repositories of maven of any type are completely hidden for maven users."
  },
  {
    "objectID": "javase/se-concepts-maven.html#maven-lifecycle",
    "href": "javase/se-concepts-maven.html#maven-lifecycle",
    "title": "Java SE: Maven",
    "section": "3 Maven Lifecycle",
    "text": "3 Maven Lifecycle\nMaven is a build automation tool for Java projects. It is used to manage the build, reporting, and documentation of a project. Maven has a defined lifecycle that outlines the steps required to build and distribute a project.\n\n\n\nMaven lifecycle\n\n\nThe Maven lifecycle has three main phases:\n\nclean: This phase is used to clean up any previous build artifacts.\ndefault: This is the main phase of the lifecycle, where the project is built, tested, and packaged.\nsite: This phase is used to generate the project’s documentation and site information.\n\nEach phase of the Maven lifecycle consists of a set of build phases, which are executed in a specific order.\nFor example, the default phase consists of the following build phases:\n\n\nEach build phase consists of a set of build goals, which are the specific tasks that are executed to accomplish the phase’s objectives. For example, the compile phase has a build goal called compiler:compile that is responsible for compiling the project’s source code.\n\nvalidate: Validate the project’s configuration and dependencies.\ncompile: Compile the project’s source code.\ntest: Run the project’s tests.\npackage: Package the compiled code into a distributable format (e.g., a JAR file).\ninstall: Install the packaged code into the local repository.\ndeploy: Deploy the packaged code to a remote repository for others to use.\n\nBy following the defined Maven lifecycle, developers can easily build, test, and distribute their Java projects in a consistent and repeatable manner."
  },
  {
    "objectID": "javase/se-concepts-maven.html#archetype-groupid-artifactid",
    "href": "javase/se-concepts-maven.html#archetype-groupid-artifactid",
    "title": "Java SE: Maven",
    "section": "4 Archetype, GroupId, ArtifactId",
    "text": "4 Archetype, GroupId, ArtifactId\n\n\n\n\n\n\nNote\n\n\n\nAn archetype is a template for a project. It provides a predefined structure and files for a project, so that you don’t have to create them manually.\n\n\nGroupId and artifactId are two important elements of a Maven project.\n\nThe groupId is a unique identifier for a project, and is typically used to group related projects together.\nThe artifactId is the unique identifier for a specific project, and is used to identify the project within the group.\n\nTogether, the groupId and artifactId help to uniquely identify a project within the Maven ecosystem.\n\n\n\n\n\n  Java MOOC Helsinki \n\n\n\n  top \n\n\n\n Java SE: Create Maven Project"
  },
  {
    "objectID": "javase/se-concepts-objects.html",
    "href": "javase/se-concepts-objects.html",
    "title": "Java SE: Class and Objects",
    "section": "",
    "text": "📘 What is a Java Class\nA Java class is a template for creating objects, defining object data types and methods. A class is a blueprint for objects, and an object is an instance of a class.\nIn other words, a class def>ines the properties and behaviors that objects created from the class will have.\nFor example, if you have a class called “Dog,” objects created from that class might have properties like “breed” and “age,” as well as behaviors like “bark” and “fetch.” Classes are an important concept in object-oriented programming, and are a fundamental building block of Java programs"
  },
  {
    "objectID": "javase/se-concepts-objects.html#class",
    "href": "javase/se-concepts-objects.html#class",
    "title": "Java SE: Class and Objects",
    "section": "1 Class",
    "text": "1 Class\nLet’s create a class called Person.\nWhat would we want to know about a person? What we want to know depends on what problem we are trying to solve. In one situation, perhaps when creating an address book, we might want to know the person’s name and phone number and email.\nHere’s a possible Person class with **instance variables, constructor, and methods.**\n\n\n\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\n\n\nPerson.java\n\npublic class Person {\n  //fields  \n  private int age;\n  private String name;\n  private String address;\n  private double salary;\n  private String phoneNumber;\n  private String email; \n  \n  //constructor\n  public Person(int age, String name, String address, double salary) {\n    this.age = age;\n    this.name = name;\n    this.address = address;\n    this.salary = salary;\n    this.email = email;\n    this.phoneNumber = phoneNumber;\n  }\n\n    //constructor\n  public Person(int age, String name, String email, String phoneNumber) {\n    this.age = age;\n    this.name = name;\n    this.address = address;\n    this.salary = salary;\n    this.email = email;\n    this.phoneNumber = phoneNumber;\n  }\n  \n  //methods\n  public int getAge() {\n    return age;\n  }\n  \n  public void setAge(int age) {\n    this.age = age;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String name) {\n    this.name = name;\n  }\n  \n  public String getAddress() {\n    return address;\n  }\n  \n  public void setAddress(String address) {\n    this.address = address;\n  }\n  \n  public double getSalary() {\n    return salary;\n  }\n  \n  public void setSalary(double salary) {\n    this.salary = salary;\n  }\n  \n  public void study() {\n    // Do some work here\n  }\n  \n  public void receivePaycheck() {\n    // Process salary and distribute paychecks\n  }\n\n  public void getOlder() {\n    this.age++;\n  }\n}"
  },
  {
    "objectID": "javase/se-concepts-objects.html#objects",
    "href": "javase/se-concepts-objects.html#objects",
    "title": "Java SE: Class and Objects",
    "section": "2 Objects",
    "text": "2 Objects\nEach object has its own unique identity, and it maintains its own state by storing the values of its attributes. The object’s behavior is defined by the methods that operate on its attributes, and these methods can be invoked by other code to ask the object to perform a specific action.\n\n\n\nJava SE Basic Principles OOP Class and Object\n\n\n\n\nObjects are an essential concept in object-oriented programming, and they are used to model real-world entities in a program. For example, you could create an object to represent a particular person, with attributes such as name, age, and address, and methods that operate on these attributes, such as a method to calculate their age in a particular year.\nIn Java, you can create objects by using the new keyword and the class constructor to allocate memory for the object, and then you can access the object’s attributes and methods by using the . (dot) operator. For example, if you have a class called Person, you could create an object of that class like this:\nPerson carla = new Person();\nAnd then you could access the object’s attributes and methods like this:\ncarla.name = \"Carla Whitesand\";\ncarla.setAddress(\"123 Main Street\");\nint age = carla.calc>ulateAge(2022);\n\n\nIn this example, name and setAddress() are attributes and methods of the Person class, and person is an object of that class. You can use this object to store and manipulate data according to the rules defined by the class."
  },
  {
    "objectID": "javase/se-concepts-objects.html#creating-objects",
    "href": "javase/se-concepts-objects.html#creating-objects",
    "title": "Java SE: Class and Objects",
    "section": "3 Creating Objects",
    "text": "3 Creating Objects\nfrom The Java™ Tutorials\nAs you know, a class provides the blueprint for objects; you create an object from a class. Each of the following statements taken from the CreateObjectDemo program creates an object and assigns it to a variable:\nPoint originOne = new Point(23, 94);\nRectangle rectOne = new Rectangle(originOne, 100, 200);\nRectangle rectTwo = new Rectangle(50, 100);\nThe first line creates an object of the Point class, and the second and third lines each create an object of the Rectangle class.\nEach of these statements has three parts (discussed in detail below):\n\nDeclaration: The code set in bold are all variable declarations that associate a variable name with an object type.\nInstantiation: The new keyword is a Java operator that creates the object.\nInitialization: The new operator is followed by a call to a constructor, which initializes the new object.\n\n\n3.1 Declaring a Variable to Refer to an Object\nPreviously, you learned that to declare a variable, you write:\ntype name;\nThis notifies the compiler that you will use name to refer to data whose type is type. With a primitive variable, this declaration also reserves the proper amount of memory for the variable.\nYou can also declare a reference variable on its own line. For example:\nPoint originOne;\n\n\n\n\n\n\nJust a reference variable: is empty\n\n\n\nIf you declare originOne like this, its value will be undetermined until an object is actually created and assigned to it. Simply declaring a reference variable does not create an object.\n\n\nFor that, you need to use the new operator, as described in the next section. You must assign an object to originOne before you use it in your code. Otherwise, you will get a compiler error.\nA variable in this state, which currently references no object, can be illustrated as follows (the variable name, originOne, plus a reference pointing to nothing):\noriginOne –> null\n\n\n\n“originOne –> null” figure part 1"
  },
  {
    "objectID": "javase/se-concepts-objects.html#instantiating-a-class",
    "href": "javase/se-concepts-objects.html#instantiating-a-class",
    "title": "Java SE: Class and Objects",
    "section": "4 Instantiating a Class",
    "text": "4 Instantiating a Class\n\n📘 Instantiating a Class\nThe new operator instantiates a class by allocating memory for a new object and returning a reference to that memory. The new operator also invokes the object constructor.\n\n\n\n\n\n\n\nInstantiating a class\n\n\n\nThe phrase “instantiating a class” means the same thing as “creating an object.” When you create an object, you are creating an “instance” of a class, therefore “instantiating” a class.\nThe new operator requires a single, postfix argument: a call to a constructor. The name of the constructor provides the name of the class to instantiate.\n\n\nThe new operator returns a reference to the object it created. This reference is usually assigned to a variable of the appropriate type, like:\nPoint originOne = new Point(23, 94);\noriginOne –> Point object\n\n\n\n“originOne –> Point object” figure part 2\n\n\nThe reference returned by the new operator does not have to be assigned to a variable. It can also be used directly in an expression. For example:\nint height = new Rectangle().height;\nThis statement will be discussed in the next section or you can go here.\n\n4.1 Initializing an Object\nHere’s the code for the Point class:\npublic class Point {\n    public int x = 0;\n    public int y = 0;\n    //constructor\n    public Point(int a, int b) {\n        x = a;\n        y = b;\n    }\n}\nThis class contains a single constructor. You can recognize a constructor because its declaration uses the same name as the class and it has no return type.\nThe constructor in the Point class takes two integer arguments, as declared by the code (int a, int b). The following statement provides 23 and 94 as values for those arguments: Linux Lab#LI01-1: Export env user with grep and pipe\nPoint originOne = new Point(23, 94);\n\n\n4.2 Example UML: class and object\n\n\n\nThe class body may contain member variables, constructors, public methods, private helper methods and others."
  },
  {
    "objectID": "javase/se-concepts-objects.html#ways-to-create-an-object",
    "href": "javase/se-concepts-objects.html#ways-to-create-an-object",
    "title": "Java SE: Class and Objects",
    "section": "5 Ways to create an object",
    "text": "5 Ways to create an object\nThere are several ways to create objects in Java:\n\nUsing the new operator: this is the most common way to create an object in Java. It involves using the new operator followed by the class name and constructor arguments. For example:Implicit casting\n\nPerson carla = new Person(\"Carla\", 30, \"123 Main St.\");\n\nUsing the clone() method: if you want to create a copy of an existing object, you can use the clone() method.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThis method is defined in the java.lang.Object class, which is the superclass of all Java classes. To use the clone() method, you’ll need to implement the Cloneable interface in your class and override the clone() method.\n\n\n\n\nUsing factory methods: A factory method is a static method that returns an instance of a class. Factory methods are often used to create objects when you need more flexibility or control over the object creation process.\nUsing reflection: Reflection is a feature of the Java language that allows you to inspect and manipulate the structure of a class at runtime.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can use reflection to create objects by invoking the newInstance() method on the Constructor object for a particular class.\n\n\n\n\nUsing object deserialization: You can use object deserialization to create an object from its serialized form, which is a stream of bytes that represents the object’s state.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nTo do this, you’ll need to implement the Serializable interface in your class and use the ObjectInputStream and ObjectOutputStream classes to serialize and deserialize the object."
  },
  {
    "objectID": "javase/se-concepts-objects.html#casting-typecasting",
    "href": "javase/se-concepts-objects.html#casting-typecasting",
    "title": "Java SE: Class and Objects",
    "section": "6 Casting (typecasting)",
    "text": "6 Casting (typecasting)\nCasting is the process of converting one type of data to another type. There are two types of casting: explicit and implicit.\n\n6.1 Explicit casting\nExplicit casting is when you specify the type you want the data to be converted to. An example of explicit casting is:\nint x = (int) 3.14;\nIn this case, the double value of 3.14 is being explicitly cast to an int.\n\n\n6.2 Implicit casting\nImplicit casting, also known as widening, is when the conversion happens automatically without the need for a specific type to be specified. An example of implicit casting is:\ndouble x = 3;\n\n\nIt’s important to note that casting can cause data loss if the type being converted to cannot hold the value of the original type. For example, casting a large double value to an int would result in the decimal places being truncated and lost.\nIn this case, the int value of 3 is being implicitly cast to a double.\n\n\n6.3 Casting in compilation/execution time\n\n\n\n\n\n\nNote\n\n\n\nIt is important to consider the class of the object and the type of its reference variable when casting, as it can affect both the compilation time and execution time of a program.\n\n\n\nDuring compilation, the compiler checks the source code for any type errors and other issues related to casting, such as trying to cast an object to a class that it is not compatible with. If any errors are found, the compiler will display them and the program will not be able to run until they are fixed. This means that understanding the class of an object and the type of its reference variable is crucial for avoiding casting errors during compilation.\n\n\n\nCompilation time refers to the period of time during which the source code of a program is translated into machine code by a compiler. This is the initial phase of program execution.\n\nAt execution time, casting can also have an impact on the performance and behavior of a program. For example, if a program tries to cast an object to a type that is not compatible with its class, a runtime exception will be thrown, causing the program to crash.\n\n\n\nExecution time refers to the period of time during which the compiled program runs and performs its intended operations. This is the phase of the program when it’s executed by the CPU and its instructions are executed.\nOn the other hand, if the casting is done properly and the object is compatible with the target type, it can improve the performance and efficiency of the program.\n\n\n\n\n\n\nImportant\n\n\n\nKnowing the class of an object and the type of its reference variable is also important for making sure the program is using the right methods and properties of the object, and for avoiding unexpected behavior.\n\n\n\n\n6.4 Upcasting and downcasting\nBefore reading this section you must read and understand how does inherence work\n\n\n\nA process of converting one data type to another is known as Casting (typecasting) and Upcasting and Downcasting defines weather it is up or down in a inherence relationship\n\n\n\n\n6.5 Upcasting\nUpcasting is casting a subtype to a supertype, upward to the inheritance tree. Upcasting happens automatically and we don’t have to explicitly do anything.\n\n\nTypeCasrting.java\n\n// Base Class\npublic class Animal\n{\n    public void talk() { System.out.println(\"I am talking\"); }\n}\n// Inherited class\nclass Cat extends Animal\n{\n    // This method overrides show() of Parent\n    @Override\n    public void talk() { System.out.println(\"Miauuu, miauuuu, miauuu!!!\"); }\n}\n \npublic class Test\n{\n    public void testUpCasting(){\n    \n        Animal cat = new Cat();\n        cat.talk();\n        // output: Miauuu, miauuuu, miauuu!!!)\n    }\n}\n\n\n\n6.6 Downcasting\nWhen Subclass type refers to the object of Parent class, it is known as downcasting. If we perform it directly, compiler gives Compilation error. If you perform it by typecasting, ClassCastException is thrown at runtime (sometimes we may use instanceof operator, then downcasting is possible)\n\n\nTypeCasrting.java\n\n// Base Class\npublic class Animal\n{\n    public void talk() { System.out.println(\"I am talking\"); }\n}\n// Inherited class\nclass Cat extends Animal\n{\n    // This method overrides show() of Parent\n    @Override\n    public void talk() { System.out.println(\"Miauuu, miauuuu, miauuu!!!\"); }\n}\n \npublic class Test\n{\n    public void testDownCasting(){\n\n        Cat cat = new Animal();\n        // compiling time error, try to cast but it can not\n        Animal animal = new Animal();\n        // creatng an object of the superclass is ok\n        Cat cat = (Cat) animal;\n        // downcasting\n        cat.talk();\n        // output: Miauuu, miauuuu, miauuu!!!)\n    }\n}\n\n\n\n\n\n\n  Java SE: JUnit and TDD \n\n\n\n  top \n\n\n\n Java SE: Scope"
  },
  {
    "objectID": "javase/se-concepts-package.html",
    "href": "javase/se-concepts-package.html",
    "title": "Java SE: Packages",
    "section": "",
    "text": "📘 Design-patterns\nIn Java, a package is a collection of related classes and interfaces that provide a higher-level abstraction for organizing and modularizing your code.\nPackages allow you to group similar classes and interfaces together, and to provide a convenient namespace for accessing those classes and interfaces from other parts of your program.\n\n\nWhen you create a new class or interface in Java, you can place it in a package by using the package keyword at the top of the file, followed by the name of the package.\n\n\nExample.java\n\npackage com.example;\n\npublic class Example {\n    // Class code goes here...\n}\n\n\n\nFor example, the following code shows how to create a new class called Example and place it in the com.example package\nBy placing the Example class in the com.example package, you can access the class from other parts of your program by using the fully-qualified class name, which includes the package name as well as the class name.\nFor example, the following code shows how to use the Example class from within another class called Main:\n\n\nMain.java\n\npublic class Main {\n    public static void main(String[] args) {\n        // Use fully-qualified class name to access Example class\n        com.example.Example example = new com.example.Example();\n    }\n}\n\n\n\nIn this example, the Main class uses the com.example.Example class by specifying the fully-qualified class name, which includes the package name as well as the class name. This allows the Main class to access the Example class from within the com.example package."
  },
  {
    "objectID": "javase/se-concepts-package.html#package-in-java-se-or-java-ee-is-not-similiar",
    "href": "javase/se-concepts-package.html#package-in-java-se-or-java-ee-is-not-similiar",
    "title": "Java SE: Packages",
    "section": "2 Package in Java SE or Java EE is not similiar",
    "text": "2 Package in Java SE or Java EE is not similiar\n\n\n\n\n\n\nImportant\n\n\n\nThe package that a class is placed in can be an important factor in how the framework resolves requests. This is because the Spring Framework uses the package structure of a project to help determine the path of a request, and to map the request to the appropriate controller or handler.\n\n\nFor example, consider a Spring MVC application that contains a com.example.web package, which contains a HomeController class that is used to handle requests to the application’s home page. In this case, the HomeController class is placed in the com.example.web package, which means that the path of a request to the home page would include the package name as part of the URL.\nFor instance, if the application’s base URL is http://localhost:8080, then a request to the home page might have a URL like the following:\nhttp://localhost:8080/com.example.web/home\nIn this case, the com.example.web package is part of the path that resolves the request to the HomeController class, which is responsible for handling the request and generating a response."
  },
  {
    "objectID": "javase/se-concepts-package.html#conclusion",
    "href": "javase/se-concepts-package.html#conclusion",
    "title": "Java SE: Packages",
    "section": "3 Conclusion",
    "text": "3 Conclusion\nOverall, packages are an important concept in Java, and can help to improve the modularity, organization, and maintainability of your code. By grouping related classes and interfaces together into packages, you can provide a convenient namespace for accessing those classes and interfaces, and you can better manage the dependencies between different parts of your program.\n\n\n\n\n\n  Java SE: Coupling and DDD \n\n\n\n  top \n\n\n\n Java SE: Abstract/Interface"
  },
  {
    "objectID": "javase/se-concepts-projectgit.html",
    "href": "javase/se-concepts-projectgit.html",
    "title": "Java SE: Project push GitHub",
    "section": "",
    "text": "4 ways to sync local project on local repo to remote repo on GitHub:\n\nMaven Project push to GitHub: CLI gh & clone\nMaven Project push to GitHub: from IntelliJ IDEA VCS\nMaven Project shortest way: from IntelliJ IDEA git init\nMaven Project push to GitHub: CLI git"
  },
  {
    "objectID": "javase/se-concepts-projectgit.html#maven-project-push-to-github-cli-gh-clone",
    "href": "javase/se-concepts-projectgit.html#maven-project-push-to-github-cli-gh-clone",
    "title": "Java SE: Project push GitHub",
    "section": "1 Maven Project push to GitHub: CLI gh & clone",
    "text": "1 Maven Project push to GitHub: CLI gh & clone\nTo connect a local project on IntelliJ IDEA to GitHub.com, you will need to create a repository on GitHub and then push your local project to the repository. Here’s a step-by-step guide:\nFrom CLI gh:\n\nGo to browser and create an account on GitHub.com\nOpen on your terminal and install git: install git\nOpen your terminal and install cli gh: install CLI gh and log in to GitHub.com\nCreate repository on GitHub.com: Create a repo\nAt the top of your GitHub repository’s Quick Setup page, click the clipboard icon to copy clone GitHub CLI: gh repo clone AlbertProfe/wiki. This will initialize the local directory as a Git repository with a copy of remote repository.\nCreate Maven Project within that directory/repository local git: create Maven Project\nUpload/sync/push: git commit and push from CLI or from IntelliJ IDEA: Commit and push changes to Git repository\n\n\n1.1 Screen-shoots step-by-step after installing git and github (2022-12-19)\nFirst, install git and CLI gh and create a GitHub.con account.\n\n\n\nLog in via CLI gh to GitHub.com, in this case using a browser where you are logged in GitHub.com\n\n\n\n\n\nCreate a repo at GitHub.com: button new\n\n\n\n\n\nCreate a repo at GitHub.com: name and configuration\n\n\n\n\n\nCreate a repo at GitHub.com: created\n\n\n\n\n\nGet the code to clone the repo: copy\n\n\n\n\n\nCreate/select a folder where the repo will be created\n\n\n\n\n\nGo to the terminal and paste it\n\n\n\n\n\nCreate maven project: create\n\n\n\n\n\nCreate maven project: created and structure checked\n\n\n\n\n\nLet’s add and commit this project\n\n\n\n\n\n8 added files\n\n\n\n\n\nNow it is time to commit, first write it\n\n\n\n\n\nVisual Code and git making the commit\n\n\n\n\n\nCommit done, now, the push to remote repo\n\n\n\n\n\nAfter push button Visual Code demands confirmation\n\n\n\n\n\nPushing …. and pushed\n\n\n\n\n\nCheck GitHub.com repo has got the project pushed"
  },
  {
    "objectID": "javase/se-concepts-projectgit.html#maven-project-push-to-github-from-intellij-idea-vcs",
    "href": "javase/se-concepts-projectgit.html#maven-project-push-to-github-from-intellij-idea-vcs",
    "title": "Java SE: Project push GitHub",
    "section": "2 Maven Project push to GitHub: from IntelliJ IDEA VCS",
    "text": "2 Maven Project push to GitHub: from IntelliJ IDEA VCS\n\n\n\nIntellJIdea Main Menu\n\n\n\n\n\nIntellJIdea Main Menu\n\n\n\nOpen your IntelliJ IDEA project.\nIn the VCS menu, select the option to enable version control integration.\nSelect Git as the version control system.\nAdd the files in your new local repository. This stages them for the first commit.\nCommit the files that you’ve staged in your local repository.\nIn the VCS menu, select the option to create a new repository.\nChoose the location for the repository and click the Create button.\nIn the VCS menu, select the option to push changes.\nEnter your GitHub login credentials and click the Push button.\n\nNow your local project is connected to the repository on GitHub and any changes you make locally will be reflected in the repository on GitHub."
  },
  {
    "objectID": "javase/se-concepts-projectgit.html#maven-project-shortest-way-from-intellij-idea-git-init",
    "href": "javase/se-concepts-projectgit.html#maven-project-shortest-way-from-intellij-idea-git-init",
    "title": "Java SE: Project push GitHub",
    "section": "3 Maven Project shortest way: from IntelliJ IDEA git init",
    "text": "3 Maven Project shortest way: from IntelliJ IDEA git init\n\nVersion Control > Create Git Repository\n\n\n\n\nVersion Control > Create Git Repository\n\n\n\n\n\nSelect local directory to git init\n\n\n\n\n\nLocal Directory Maven Project\n\n\n\nCreate Remote Repo on GitHub.com and copy HHTPS direction\n\n\n\n\nIntellJIdea Main Menu\n\n\n\n\n\ncopy HHTPS direction 1/2\n\n\n\n\n\ncopy HHTPS direction 2/2\n\n\n\nCommit and Push and when IntellJIdea ask for Remote Repo Direcion paste it\n\n\n\n\nSelect all files: git add. and Commit and push 1/2\n\n\n\n\n\nCommit and push 2/2\n\n\n\n\n\nPush Command to MovieManager: master > define remote\n\n\n\n\n\npaste URL 1/2\n\n\n\n\n\npaste URL 2/2"
  },
  {
    "objectID": "javase/se-concepts-projectgit.html#maven-project-push-to-github-cli-git",
    "href": "javase/se-concepts-projectgit.html#maven-project-push-to-github-cli-git",
    "title": "Java SE: Project push GitHub",
    "section": "4 Maven Project push to GitHub: CLI git",
    "text": "4 Maven Project push to GitHub: CLI git\nto-do\n\n\n\n\n\n  Java SE: Create Maven Project \n\n\n\n  top \n\n\n\n Java SE: JUnit and TDD"
  },
  {
    "objectID": "javase/se-concepts-scope.html",
    "href": "javase/se-concepts-scope.html",
    "title": "Java SE: Scope",
    "section": "",
    "text": "In Java, the scope of a variable refers to the parts of the program where the variable is accessible. A variable has a certain scope based on where it is declared, and the scope of a variable determines where in the program the variable can be used and accessed.\n\n\n\nScope and Access\n\n\nThere are three main types of scope in Java:\n\nClass scope: A variable that is declared within a class, but outside of any method, has class scope, which means that it can be accessed and used by any method within the class.\nMethod scope: A variable that is declared within a method has method scope, which means that it can only be accessed and used within that method.\nLocal scope: A variable that is declared within a block of code, such as within a loop or an if statement, has local scope, which means that it can only be accessed and used within that block of code."
  },
  {
    "objectID": "javase/se-concepts-scope.html#global-scope-in-java",
    "href": "javase/se-concepts-scope.html#global-scope-in-java",
    "title": "Java SE: Scope",
    "section": "2 Global scope in Java?",
    "text": "2 Global scope in Java?\nIn Java, there is no concept of global variable, and the idea of global scope differs from the traditional sense.\nIn other programming languages, global variables are variables that are declared outside of any function or class, and are accessible and usable by any part of the program.\nIn Java, however, there is no way to declare a variable outside of a class or method, so there are no global variables in the strict sense of the term.\nHere is an example of class scope in Java:\n\n\nExample.java\n\npublic class Example {\n    // Class variable\n    static int classVariable = 1;\n\n    public static void main(String[] args) {\n        // Print class variable\n        System.out.println(classVariable); // Output: 1\n\n        // Call method\n        someMethod();\n    }\n\n    public static void someMethod() {\n        // Print class variable\n        System.out.println(classVariable); // Output: 1\n    }\n}\n\n\n\nInstead, in Java, the closest equivalent to global scope is class scope. In Java, a variable that is declared within a class, but outside of any method, has class scope, which means that it can be accessed and used by any method within the class.\nIn this example, the classVariable variable is declared within the Example class, but outside of any method, so it has class scope. This means that the classVariable variable can be accessed and used by any method within the Example class, including the main method and the someMethod method.\nWhile Java doesn’t have a concept of global scope in the traditional sense, class scope provides a similar level of accessibility and usability for variables. By declaring variables within a class, but outside of any method, you can make those variables accessible and usable by any method within the class, which can be useful for sharing data and state between different parts of your program."
  },
  {
    "objectID": "javase/se-concepts-scope.html#key-concept-curly-brackets",
    "href": "javase/se-concepts-scope.html#key-concept-curly-brackets",
    "title": "Java SE: Scope",
    "section": "3 Key-concept: curly brackets",
    "text": "3 Key-concept: curly brackets\n\n📘 Curly brackets are the key\nIn Java, the scope of a variable is determined by the position of the variable’s declaration within the code, and specifically by the presence or absence of curly braces {}.\n\n\n\nA variable that is declared outside of any curly braces has global or class scope, depending on where it is declared.\nA variable that is declared within a pair of curly braces has local scope, which means that it can only be accessed and used within those curly braces.\n\nHere is an example of how scope works in Java based on the position of the variable’s declaration within curly braces:\n\n\nExample.java\n\npublic class Example {\n    // Global or class scope\n    static int globalOrClassVariable = 1;\n\n    public static void main(String[] args) {\n        // Local scope\n        {\n            int localVariable = 2;\n\n            // Print local variable\n            System.out.println(localVariable); // Output: 2\n        }\n\n        // Print global or class variable\n        System.out.println(globalOrClassVariable); // Output: 1\n\n        // Print local variable (not accessible outside of curly braces)\n        // System.out.println(localVariable); // Error: localVariable cannot be resolved\n    }\n}\n\nIn this example, the globalOrClassVariable variable is declared outside of any curly braces, so it has global or class scope, depending on where it is declared. The localVariable variable, on the other hand, is declared within a pair of curly braces, so it has local scope and can only be accessed and used within those curly braces.\nAs this example illustrates, the position of a variable’s declaration within curly braces is a key factor in determining the variable’s scope in Java."
  },
  {
    "objectID": "javase/se-concepts-scope.html#conclusion",
    "href": "javase/se-concepts-scope.html#conclusion",
    "title": "Java SE: Scope",
    "section": "4 Conclusion",
    "text": "4 Conclusion\nBy understanding how scope works in Java, you can effectively manage the visibility and accessibility of your variables, and avoid common pitfalls such as variable shadowing and scope-related errors.\n\n\n\n\n\n  Java SE: Class and Objects \n\n\n\n  top \n\n\n\n Java SE: static modifier"
  },
  {
    "objectID": "javase/se-concepts-static.html",
    "href": "javase/se-concepts-static.html",
    "title": "Java SE: static modifier",
    "section": "",
    "text": "📘 static modifier\nIn Java, the static modifier is used to indicate that a class or class member belongs to the class itself, rather than to an instance of the class.\nIn other words, the static modifier indicates that the class or class member is associated with the class as a whole, rather than with a specific instance of the class.\n\n\nClassical use and basic exmaple of static method, we call within the class our static method just using the name of the method printArea():\n\n\n\nTwo static methods with parameters. Parameters are the variables we use in the method definition whereas arguments are the values we pass in the method call. These two terms are often used interchangeably\n\n\nThe static modifier has several different uses in Java, depending on where it is applied. Here are some examples of how the static modifier can be used in Java."
  },
  {
    "objectID": "javase/se-concepts-static.html#static-code-block",
    "href": "javase/se-concepts-static.html#static-code-block",
    "title": "Java SE: static modifier",
    "section": "2 static code block",
    "text": "2 static code block\nIn Java, we have a special block known as aStatic Initialization Block. A Static Initialization Block is executed before the main() method, it will execute once. This block will not return anything and we can not use the this keyword since it does not have any instance.\nFor example:\n\n\nMovieManager.java\n\nstatic {            \n    int count = 0;\n    String name =\"Alien\";\n    double priceMovie = 45.50;\n};"
  },
  {
    "objectID": "javase/se-concepts-static.html#static-field",
    "href": "javase/se-concepts-static.html#static-field",
    "title": "Java SE: static modifier",
    "section": "3 static field",
    "text": "3 static field\nWhen applied to a field, the static modifier indicates that the field belongs to the class itself, rather than to an instance of the class. This means that all instances of the class share the same value for the static field.\nFor example:\n\n\nCounter.java\n\npublic class Counter {\n    // Static field\n    private static int count = 0;\n\n    // Constructor\n    public Counter() {\n        count++;\n    }\n\n    // Getter method for the count field\n    public static int getCount() {\n        return count;\n    }\n}\n\n\n\nIn this example, the count field is marked as static, which means that all instances of the Counter class share the same value for the count field. When a new instance of the Counter class is created, the count field is incremented, and the new value is shared by all instances of the class.\nAnother example:\n\n\nAccount.java\n\npublic class Account {\n    // Static field\n    private static int nextAccountNumber = 1;\n\n    // Private instance variables\n    private int accountNumber;\n    private String name;\n    private double balance;\n\n    // Constructor\n    public Account(String name, double balance) {\n        this.accountNumber = nextAccountNumber++;\n        this.name = name;\n        this.balance = balance;\n    }\n\n    // Getter method for the accountNumber field\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    // Getter method for the name field\n    public String getName() {\n        return name;\n    }\n\n    // Getter method for the balance field\n    public double getBalance() {\n        return balance;\n    }\n\n    // Method for depositing money into the account\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    // Method for withdrawing money from the account\n    public void withdraw(double amount) {\n        balance -= amount;\n    }\n}\n\n\n\nIn this example, the Account class defines a nextAccountNumber field that is marked as static. This means that the nextAccountNumber field belongs to the Account class itself, rather than to an instance of the Account class. This means that all instances of the Account class share the same value for the nextAccountNumber field.\nWhen a new instance of the Account class is created, the nextAccountNumber field is incremented, and the new value is shared by all instances of the class. This allows each instance of the Account class to have a unique accountNumber field, which is generated automatically using the nextAccountNumber field."
  },
  {
    "objectID": "javase/se-concepts-static.html#static-method",
    "href": "javase/se-concepts-static.html#static-method",
    "title": "Java SE: static modifier",
    "section": "4 static method",
    "text": "4 static method\nWhen applied to a method, the static modifier indicates that the method belongs to the class itself, rather than to an instance of the class. This means that the static method can be called on the class itself, rather than on an instance of the class.\nFor example:\n\n\nMathUtils.java\n\npublic class MathUtils {\n    // Static method\n    public static double squareRoot(double number) {\n        return Math.sqrt(number);\n    }\n}\n\n\n\nIn this example, the squareRoot() method is marked as static, which means that it can be called on the MathUtils class itself, rather than on an instance of the MathUtils class. This allows the squareRoot() method to be called without creating an instance of the MathUtils class, which can be useful in some situations.\nFor example:\n\n\nMovieManager.java\n\npublic class MovieManager {\n\n    // Static method\n    public static boolean createMovie(Movie movie) {\n        boolean result = false;\n        // to-do algorithmic to solve this method\n        return result;\n    }\n\n    // Static method\n    public static boolean deleteMovie(String idMovie) {\n        boolean result = false;\n        // to-do algorithmic to solve this method\n        return result;\n    }\n\n    // Static method\n    public static boolean updateMovie(Movie movie) {\n        boolean result = false;\n        // to-do algorithmic to solve this method\n        return result;\n    }\n\n    // Static method\n    public static List<Movie> getAllMovies() {\n        List<Movie> movies = new ArrayList<>();\n        // to-do algorithmic to solve this method\n        return movies;\n    }\n\n    // Static method\n    public static List<Movie> findMovie(String title) {\n        List<Movie> movies = new ArrayList<>();\n        // to-do algorithmic to solve this method\n        return movies;\n    }\n    \n}\n\n\n\n\n\n\nclassDiagram\n  class Movie {\n    -title: String\n    -reviews: List<Review>\n    -director: Director\n  }\n  \n  class Critic {\n    -publications: int\n  }\n  \n  class Director {\n    -oscars: int\n  }\n  class Review {\n    -rating: int\n    -comment: String\n    -critic: Critic\n  }\n  class Person {\n    -name: String\n  }\n  \n  class MovieManager {\n    -static boolean deleteMovie(id)$\n    -static boolean createMovie(id)$\n    -static boolean updateMovie(id)$\n    -getAllMovies()$ List~Movie~\n    -findMovie(id)$ List~Movie\n  }\n\n  MovieManager -- Movie\n  Movie *-- Review\n  Movie *-- Director\n  Review o-- Critic\n  Person <-- Director\n  Person <-- Critic"
  },
  {
    "objectID": "javase/se-concepts-static.html#static-class",
    "href": "javase/se-concepts-static.html#static-class",
    "title": "Java SE: static modifier",
    "section": "5 static class",
    "text": "5 static class\nWhen applied to a class, the static modifier indicates that the class is a nested class. In other words, the static class is defined inside another class, and is associated with the outer class.\n\n\nAccount.java\n\npublic class Account {\n    // Static field\n    private static int nextAccountNumber = 1;\n\n    // Private instance variables\n    private int accountNumber;\n    private String name;\n    private double balance;\n\n    // Static nested class\n    public static class Transaction {\n        // Private instance variables\n        private int transactionNumber;\n        private double amount;\n        private String type;\n\n        // Constructor\n        public Transaction(double amount, String type) {\n            this.transactionNumber = nextAccountNumber++;\n            this.amount = amount;\n            this.type = type;\n        }\n\n        // Getter method for the transactionNumber field\n        public int getTransactionNumber() {\n            return transactionNumber;\n        }\n\n        // Getter method for the amount field\n        public double getAmount() {\n            return amount;\n        }\n\n        // Getter method for the type field\n        public String getType() {\n            return type;\n        }\n    }\n\n    // Constructor\n    public Account(String name, double balance) {\n        this.accountNumber = nextAccountNumber++;\n        this.name = name;\n        this.balance = balance;\n    }\n\n    // Getter method for the accountNumber field\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    // Getter method for the name field\n    public String getName() {\n        return name;\n    }\n\n    // Getter method for the balance field\n    public double getBalance() {\n        return balance;\n    }\n\n}\n\n\n\nHere is an example of how the static modifier can be used when applied to a class in Java, using an Account class and a nested Transaction class as examples:"
  },
  {
    "objectID": "javase/se-concepts-static.html#static-vs.-non-static",
    "href": "javase/se-concepts-static.html#static-vs.-non-static",
    "title": "Java SE: static modifier",
    "section": "6 static vs. non-static",
    "text": "6 static vs. non-static\n\n6.1 Pros & cons usage static methods\n\n\n\n\n\n\n\nPros of making a method static\nCons of making a method static\n\n\n\n\nCan be called directly on the class, without needing to create an instance\nCannot access non-static fields and methods of the class\n\n\nCan be used as utility methods that don’t depend on the state of an object\nCan only work with the parameters passed to it and not use information unique to each object or instance\n\n\nCan be used to access only static variables and methods, making it more efficient\nCan be challenging to make sure all instances of a class are modified consistently when using static methods\n\n\n\n\n\n6.2 Pros & cons usage non-static methods\n\n\n\n\n\n\n\nPros of making a method non-static\nCons of making a method non-static\n\n\n\n\nCan access both static and non-static fields and methods of the class, allowing it to use the state of an object to determine its behavior\nCan only be called on an instance of the class, so you need to create an object of a class before using the method\n\n\nAre associated with an instance of the class, so they can use the information that is unique to each object\nCan cause confusion when working with non-static methods because it could be called on different instances, which could cause unexpected behavior\n\n\nObject-oriented design principles promote the use of non-static methods because they can be overridden by subclasses to change their behavior\n\n\n\n\n\n\n\n\n\n  Java SE: Scope \n\n\n\n  top \n\n\n\n Java SE: Coupling and DDD"
  },
  {
    "objectID": "javase/se-concepts-tdd.html",
    "href": "javase/se-concepts-tdd.html",
    "title": "Java SE: JUnit and TDD",
    "section": "",
    "text": "📘 JUnit\nJUnit is a unit testing framework for the Java programming language. It is used to write and run repeatable tests for Java code. JUnit provides a set of annotations and assertions that make it easy to write and run tests, as well as a simple framework for organizing and running tests."
  },
  {
    "objectID": "javase/se-concepts-tdd.html#junit-unit-test",
    "href": "javase/se-concepts-tdd.html#junit-unit-test",
    "title": "Java SE: JUnit and TDD",
    "section": "1 JUnit: unit test",
    "text": "1 JUnit: unit test\n\n\n\nJUnit 5\n\n\nUnit tests are the smallest elements in the test automation process. With the help of unit tests, the developer can check the business logic of any class. So JUnit plays a vital role in the development of a test-driven development framework.\n\n\nLink: Junit and User guide\n\n\nMyFirstJUnitJupiterTests.java\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport example.util.Calculator;\nimport org.junit.jupiter.api.Test;\n\nclass MyFirstJUnitJupiterTests {\n\n    private final Calculator calculator = new Calculator();\n\n    @Test\n    void addition() {\n        assertEquals(2, calculator.add(1, 1));\n    }\n\n}\n\n\n\nThe following example provides a glimpse at the minimum requirements for writing a test in JUnit Jupiter. Subsequent sections of this chapter will provide further details on all available features."
  },
  {
    "objectID": "javase/se-concepts-tdd.html#tdd",
    "href": "javase/se-concepts-tdd.html#tdd",
    "title": "Java SE: JUnit and TDD",
    "section": "2 TDD",
    "text": "2 TDD\nTest-driven development is a development technique where the developer must first write a test that fails before writing a new functional code<. It ensures a proven way to ensure effective unit testing; however, it does not replace traditional testing. We believe that TDD is an excellent practice that all software developers should consider during the development process.\nSteps for the same are given below:\n\nFirstly, add a test.\nRun all the tests and see if any new test fails.\nUpdate the code to make it pass the new tests.\nRerun the test and if they fail, then debug the code again and fix any related error. Rinse and repeat."
  },
  {
    "objectID": "javase/se-concepts-tdd.html#static-vs.-non-static",
    "href": "javase/se-concepts-tdd.html#static-vs.-non-static",
    "title": "Java SE: JUnit and TDD",
    "section": "3 static vs. non-static",
    "text": "3 static vs. non-static\n\n3.1 Pros & cons usage static methods\n\n\n\n\n\n\n\nPros of making a method static\nCons of making a method static\n\n\n\n\nCan be called directly on the class, without needing to create an instance\nCannot access non-static fields and methods of the class\n\n\nCan be used as utility methods that don’t depend on the state of an object\nCan only work with the parameters passed to it and not use information unique to each object or instance\n\n\nCan be used to access only static variables and methods, making it more efficient\nCan be challenging to make sure all instances of a class are modified consistently when using static methods\n\n\n\n\n\n3.2 Pros & cons usage non-static methods\n\n\n\n\n\n\n\nPros of making a method non-static\nCons of making a method non-static\n\n\n\n\nCan access both static and non-static fields and methods of the class, allowing it to use the state of an object to determine its behavior\nCan only be called on an instance of the class, so you need to create an object of a class before using the method\n\n\nAre associated with an instance of the class, so they can use the information that is unique to each object\nCan cause confusion when working with non-static methods because it could be called on different instances, which could cause unexpected behavior\n\n\nObject-oriented design principles promote the use of non-static methods because they can be overridden by subclasses to change their behavior"
  },
  {
    "objectID": "javase/se-concepts-tdd.html#example-test",
    "href": "javase/se-concepts-tdd.html#example-test",
    "title": "Java SE: JUnit and TDD",
    "section": "4 Example: @Test",
    "text": "4 Example: @Test\nFirst, to configure support for JUnit Jupiter based tests, configure test scoped dependencies on theJUnit Jupiter API and the JUnit Jupiter TestEngine implementation similar to the following.\n\n\npom.xml\n\n<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-engine</artifactId>\n      <version>5.9.1</version>\n      <scope>test</scope>\n    </dependency>\n\n\n\nUnlike previous versions of JUnit, JUnit 5 is composed of several different modules from three different sub-projects.\nJUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage\n\nJUnit 5 requires Java 8 (or higher) at runtime. However, you can still test code that has been compiled with previous versions of the JDK.\n\nSecond, we would write a test for the add method, which should take two numbers as arguments and return their sum. Here is an example of how this test might look using JUnit:\n\n\nMyFirstJUnitJupiterTests.java\n\nimport org.junit.jupiter.api.Test;\npublic class CalculatorTest {\n\n  @Test\n  public void testAdd() {\n    Calculator calc = new Calculator();\n    double result = calc.add(2, 3);\n    assertEquals(5, result, 0);\n  }\n\n}\n\n\n\nHere is an example of how TDD could be applied in a Java project using JUnit. Let’s say we are building a class that represents a simple calculator.\nNext, we would run the test to see if it fails. Since we have not yet implemented the add method, the test should fail with a message indicating that the add method is not yet implemented.\nNext, we would write the code for the add method. Here is an example of how this method might look:\n\n\nMyFirstJUnitJupiterTests.java\n\npublic class Calculator {\n\n  public double add(double a, double b) {\n    return a + b;\n  }\n\n}\n\n\n\nWe want the calculator to have methods for adding, subtracting, multiplying, and dividing two numbers.\nFinally, we would run the test again to ensure that it passes. If the test passes, we know that the add method is working correctly and we can move on to the next feature. We would repeat this process for each of the calculator’s methods, writing a test for each one, implementing the code, and then running the test to ensure it passes.\nThis is just one example of how TDD can be applied in a Java project using JUnit. There are many other ways to approach TDD, and the specific steps and details will vary depending on the project and the requirements."
  },
  {
    "objectID": "javase/se-concepts-tdd.html#most-popular-asserts",
    "href": "javase/se-concepts-tdd.html#most-popular-asserts",
    "title": "Java SE: JUnit and TDD",
    "section": "5 Most popular asserts",
    "text": "5 Most popular asserts\nAssertions is a collection of utility methods that support asserting conditions in tests.\n\n\nUnless otherwise noted, a failed assertion will throw an AssertionFailedError or a subclass thereof.\n\n\nMyFirstJUnitJupiterTests.java\n\n@API(status=STABLE, since=\"5.0\")\npublic final class Assertions\nextends Object\n\nAssertions 5.8.2\n\nMost Pouplar Asserts: description\n\n\n\n\n\n\n\nNumber\nAssert\nDescription\n\n\n\n\n1\nassertEquals(expected, actual)\nTests that two values are equal.\n\n\n2\nassertTrue(condition)\nTests that a condition is true.\n\n\n3\nassertFalse(condition)\nTests that a condition is false.\n\n\n4\nassertNotNull(object)\nTests that an object is not null.\n\n\n5\nassertNull(object)\nTests that an object is null.\n\n\n6\nassertArrayEquals(expected, actual)\nTests that two arrays are equal.\n\n\n7\nassertSame(expected, actual)\nTests that two references refer to the same object.\n\n\n8\nassertNotSame(expected, actual)\nTests that two references don’t refer to the same object.\n\n\n9\nassertAll(executables)\nAllows to group several assertions and execute them all.\n\n\n10\nassertThrows(exceptionType, executable)\nTests that a specific exception is thrown.\n\n\n\n\n\nMost Pouplar Asserts: code\n\n\n\n\n\n\nNumber\nExample Code\n\n\n\n\n1\nassertEquals(5, add(2,3));\n\n\n2\nassertTrue(checkRole(\"admin\"));\n\n\n3\nassertFalse(checkRole(\"user\"));\n\n\n4\nassertNotNull(new Object());\n\n\n5\nassertNull(null);\n\n\n6\nassertArrayEquals(new int[]{1,2,3}, new int[]{1,2,3});\n\n\n7\nObject obj = new Object(); assertSame(obj, obj);\n\n\n8\nObject obj1 = new Object(); Object obj2 = new Object(); assertNotSame(obj1, obj2);\n\n\n9\nassertAll(\"Person properties\", () -> assertEquals(\"John\", person.getFirstName()), () -> assertEquals(\"Doe\", person.getLastName()));\n\n\n10\nassertThrows(IllegalArgumentException.class, () -> { Integer.parseInt(\"Not a number\"); });"
  },
  {
    "objectID": "javase/se-concepts-tdd.html#naming-the-test-class",
    "href": "javase/se-concepts-tdd.html#naming-the-test-class",
    "title": "Java SE: JUnit and TDD",
    "section": "6 Naming the test class",
    "text": "6 Naming the test class\nWe use common conventions in naming the test class. Let’s start with the name of the class which is being tested and assume the name of that class is Student. In that case, the name of the test class should be StudentTest. We have to append Test to it. The same naming convention is used in the case of methods. If there is a method DisplayStudentAddress(), then the name of the method in testing should be testDisplayStudentAddress().\n\n\n\nNaming in Production\nNaming in Testing\n\n\n\n\nStudent\nStudentTest\n\n\nDisplayStudentAddress()\ntestDisplayStudentAddress()\n\n\n\n\n\n\n\n\n  Java SE: Project push GitHub \n\n\n\n  top \n\n\n\n Java SE: Class and Objects"
  },
  {
    "objectID": "javase/se-pattern-abstractfactory.html",
    "href": "javase/se-pattern-abstractfactory.html",
    "title": "Abstract Factory",
    "section": "",
    "text": "About this site\n\n\n\n\n\n  Factory \n\n\n\n  top \n\n\n\n Builder"
  },
  {
    "objectID": "javase/se-pattern-bridge.html",
    "href": "javase/se-pattern-bridge.html",
    "title": "Bridge",
    "section": "",
    "text": "The bridge pattern is a design pattern in computer programming and Java that is used to decoumple abstraction from implemetation, allowing them to change independently..\n\n\nThe Bridge pattern is a way to separate the idea of what something does from how it does it, so that both can evolve independently.\nImagine you want to draw different shapes, like circles, but in different colors. You could create a class for each shape and color combination, but that would be a lot of classes. Instead, the Bridge pattern separates the “what” (the shape) from the “how” (the color) and combines them when needed. This way, you can have different classes for the shapes and different classes for the colors, and they can be combined in different ways without having to change either."
  },
  {
    "objectID": "javase/se-pattern-bridge.html#example-building-a-drawapi",
    "href": "javase/se-pattern-bridge.html#example-building-a-drawapi",
    "title": "Bridge",
    "section": "2 Example: Building a DrawAPI",
    "text": "2 Example: Building a DrawAPI\nHere’s an example of the explanation above:\n\nCreate an interface DrawAPI with a method to draw a circle.\n\ninterface DrawAPI {\n   void drawCircle(int radius, int x, int y);\n}\n\nImplement the DrawAPI interface.\n\nclass RedCircle implements DrawAPI {\n   @Override\n   public void drawCircle(int radius, int x, int y) {\n      System.out.println(\"Drawing Circle[ color: red, radius: \" + radius + \", x: \" + x + \", \" + y + \"]\");\n   }\n}\n\nclass GreenCircle implements DrawAPI {\n   @Override\n   public void drawCircle(int radius, int x, int y) {\n      System.out.println(\"Drawing Circle[ color: green, radius: \" + radius + \", x: \" + x + \", \" + y + \"]\");\n   }\n}\n\nCreate an abstract class Shape with a field of type DrawAPI:\n\nabstract class Shape {\n   protected DrawAPI drawAPI;\n   \n   protected Shape(DrawAPI drawAPI){\n      this.drawAPI = drawAPI;\n   }\n   public abstract void draw();\n}\n\nCreate concrete classes that extend the Shape class and use the drawAPI to draw a circle.\n\nclass Circle extends Shape {\n   private int x, y, radius;\n\n   public Circle(int x, int y, int radius, DrawAPI drawAPI) {\n      super(drawAPI);\n      this.x = x;  \n      this.y = y;  \n      this.radius = radius;\n   }\n\n   public void draw() {\n      drawAPI.drawCircle(radius,x,y);\n   }\n}\n\nUse the Shape and DrawAPI classes to draw different colored circles.\n\npublic class BridgePattern {\n   public static void main(String[] args) {\n      Shape redCircle = new Circle(100,100, 10, new RedCircle());\n      Shape greenCircle = new Circle(100,100, 10, new GreenCircle());\n\n      redCircle.draw();\n      greenCircle.draw();\n   }\n}\nOutput:\nDrawing Circle[ color: red, radius: 10, x: 100, 100]\nDrawing Circle[ color: green, radius: 10, x: 100, 100]\nAbout this site\n\n\n\n\n\n  Facade \n\n\n\n  top \n\n\n\n Decorator"
  },
  {
    "objectID": "javase/se-pattern-builder.html",
    "href": "javase/se-pattern-builder.html",
    "title": "Builder",
    "section": "",
    "text": "The builder pattern is a design pattern in computer programming and Java that is used to separate complex object construction from its representation..\n\n\nThe Builder design pattern is a software design pattern in which the construction of a complex object is separated from its representation, so that the same construction process can create different representations.\nThe Builder design pattern is used in cases where a class has several attributes and the creation of an instance of that class can be complex. By using the Builder pattern, the construction process of the complex class is separated into several steps, each of which is performed by a specific method of the Builder object. This allows the construction process to be more flexible and easier to understand, as each step is performed independently.\nThis pattern is very useful in cases where the class has many configuration options and you want to avoid using a constructor with many parameters or when you want the construction process to be independent of the built object."
  },
  {
    "objectID": "javase/se-pattern-builder.html#example-building-a-house",
    "href": "javase/se-pattern-builder.html#example-building-a-house",
    "title": "Builder",
    "section": "2 Example: Building a House",
    "text": "2 Example: Building a House\nHere’s an example of building a house using the Builder pattern in Java step by step:\n\nCreate a House class with various fields such as walls, roof, doors, etc.:\n\npublic class House {\n    private String walls;\n    private String roof;\n    private String doors;\n    // getters and setters for each field\n}\n\nCreate a ConcreteHouseBuilder class that builds each part of the house:\n\npublic class ConcreteHouseBuilder {\n    private House house;\n\n    public ConcreteHouseBuilder() {\n        this.house = new House();\n    }\n\n    public void buildWalls() {\n        house.setWalls(\"concrete walls\");\n    }\n\n    public void buildRoof() {\n        house.setRoof(\"concrete roof\");\n    }\n\n    public void buildDoors() {\n        house.setDoors(\"wooden doors\");\n    }\n\n    public House getHouse() {\n        return this.house;\n    }\n}\n\nCreate a HouseDirector class that controls the building process using the ConcreteHouseBuilder class:\n\npublic class HouseDirector {\n    private ConcreteHouseBuilder builder;\n\n    public HouseDirector() {\n        this.builder = new ConcreteHouseBuilder();\n    }\n\n    public void buildHouse() {\n        builder.buildWalls();\n        builder.buildRoof();\n        builder.buildDoors();\n    }\n    public House getHouse(){\n        return builder.getHouse();\n    }\n}\n\nIn the main method, we can create an instance of the HouseDirector, and use the Director to build the house:\n\n    public static void main(String[] args) {\n        HouseDirector director = new HouseDirector();\n        director.buildHouse();\n        House house = director.getHouse();\n    }\nIn this example, the House class represents the complex object that we want to build, the ConcreteHouseBuilder class implements the steps for building the house and the HouseDirector class controls the building process using the ConcreteHouseBuilder class.\n\n\n\n\n\n  Abstract Factory \n\n\n\n  top \n\n\n\n Facade"
  },
  {
    "objectID": "javase/se-pattern-commander.html",
    "href": "javase/se-pattern-commander.html",
    "title": "Commander",
    "section": "",
    "text": "State \n\n\n\n  top \n\n\n\n Lab#SE00-1: Maven Person"
  },
  {
    "objectID": "javase/se-pattern-composite.html",
    "href": "javase/se-pattern-composite.html",
    "title": "Composite",
    "section": "",
    "text": "Decorator \n\n\n\n  top \n\n\n\n Observer"
  },
  {
    "objectID": "javase/se-pattern-decorator.html",
    "href": "javase/se-pattern-decorator.html",
    "title": "Decorator",
    "section": "",
    "text": "The decoartor pattern is a structural design pattern that lets you attach new functionality to the object by wrapping these objects inside special wrapper objects that contain the behaviours.\nThe Decorator design pattern is a structural pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. This provides a flexible alternative to using inheritance to modify behavior.\nIn the decorator pattern, a decorator class is used to wrap concrete components. The decorator class implements the same interface as the components it decorates and adds additional behavior by invoking the component methods. The result is that the client code can work with the decorated objects in the same way as it would work with the original components."
  },
  {
    "objectID": "javase/se-pattern-decorator.html#example-coffee-shop",
    "href": "javase/se-pattern-decorator.html#example-coffee-shop",
    "title": "Decorator",
    "section": "1 Example: Coffee shop",
    "text": "1 Example: Coffee shop\nHere’s an example of how the Decorator pattern can be used:\n\nCreate the Component Interface: First, create an interface Beverage that defines the methods that all beverages must have.:\n\npublic interface Beverage {\n  double cost();\n  String getDescription();\n}\n\nCreate Concrete Components: Next, create concrete components that implement the Beverage interface. In this case, Espresso, DarkRoast, HouseBlend, etc.:\n\npublic class Espresso implements Beverage {\n  @Override\n  public double cost() {\n    return 1.99;\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Espresso\";\n  }\n}\n\npublic class DarkRoast implements Beverage {\n  @Override\n  public double cost() {\n    return 2.99;\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Dark Roast\";\n  }\n}\n\npublic class HouseBlend implements Beverage {\n  @Override\n  public double cost() {\n    return 3.49;\n  }\n\n  @Override\n  public String getDescription() {\n    return \"House Blend\";\n  }\n}\n\nCreate the Decorator Class: Create a CondimentDecorator abstract class that implements the Beverage interface and has a reference to a Beverage object:\n\npublic abstract class CondimentDecorator implements Beverage {\n  protected Beverage beverage;\n\n  public CondimentDecorator(Beverage beverage) {\n    this.beverage = beverage;\n  }\n\n  public abstract double cost();\n  public abstract String getDescription();\n}\n\nCreate Concrete Decorators: Create concrete decorator classes that add behavior to the components. In this case, Milk, Sugar, and Syrup decorators.\n\npublic class Milk extends CondimentDecorator {\n  public Milk(Beverage beverage) {\n    super(beverage);\n  }\n\n  @Override\n  public double cost() {\n    return 0.10 + beverage.cost();\n  }\n\n  @Override\n  public String getDescription() {\n    return beverage.getDescription() + \", Milk\";\n  }\n}\n\npublic class Sugar extends CondimentDecorator {\n  public Sugar(Beverage beverage) {\n    super(beverage);\n  }\n\n  @Override\n  public double cost() {\n    return 0.15 + beverage.cost();\n  }\n\n  @Override\n  public String getDescription() {\n    return beverage.getDescription() + \", Sugar\";\n  }\n}\n\npublic class Syrup extends CondimentDecorator {\n  public Syrup(Beverage beverage) {\n    super(beverage);\n  }\n\n  @Override\n  public double cost() {\n    return 0.25 + beverage.cost();\n  }\n\n  @Override\n  public String getDescription() {\n    return beverage.getDescription() + \", Syrup\";\n\nUse the Decorator: In the client code, create a Beverage object and wrap it with multiple decorators to add desired ingredients.\n\nBeverage espresso = new Espresso();\nSystem.out.println(espresso.getDescription() + \" $\" + espresso.cost());\n\nBeverage darkRoast = new DarkRoast();\ndarkRoast = new Milk(darkRoast);\ndarkRoast = new Sugar(darkRoast);\nSystem.out.println(darkRoast.getDescription() + \" $\" + darkRoast.cost());\n\nBeverage houseBlend = new HouseBlend();\nhouseBlend = new Syrup(houseBlend);\nhouseBlend = new Milk(houseBlend);\nSystem.out.println(houseBlend.getDescription() + \" $\" + houseBlend.cost());\n\nOutput: The output of the above code will show the description and cost of the beverages, including the added ingredients.\n\nEspresso $1.99\nDark Roast, Milk, Sugar $3.74\nHouse Blend, Syrup, Milk $4.24\nThis example demonstrates how the Decorator pattern can be used to add behavior to objects dynamically, without affecting the behavior of other objects from the same class.\n\n\n\n\n\n\n\ne3f6b450685662abb959fe6dc77071b7dc9be0c2\n\n\n\n\n\n\n\n\n\n\n\n\n  Bridge \n\n\n\n  top \n\n\n\n Composite"
  },
  {
    "objectID": "javase/se-pattern-facade.html",
    "href": "javase/se-pattern-facade.html",
    "title": "Facade",
    "section": "",
    "text": "The facade pattern is a design pattern in computer programming and Java that is used to provide a simple interface to access complex systems.\nThe facade design pattern is like a simplified front door to a complex building. The building has many rooms, levels, and systems, but from the outside, all you see is the front door. The facade pattern provides a simple, unified interface to the complex building, so you only have to worry about interacting with the door, rather than navigating the entire building.\nSimilarly, in software development, the facade pattern provides a simple interface to a complex system, so that client code can interact with the system without having to understand all of its complexities. The facade acts as an intermediary, handling the interaction with the underlying components, and providing a cleaner, easier-to-use interface to the client code. This can make the code easier to maintain and test, and allow developers to change the implementation of the complex system without affecting the client code."
  },
  {
    "objectID": "javase/se-pattern-facade.html#example-building-a-bank-account",
    "href": "javase/se-pattern-facade.html#example-building-a-bank-account",
    "title": "Facade",
    "section": "1 Example: Building a Bank account",
    "text": "1 Example: Building a Bank account\n\nIdentify the complex system: Let’s say we have a complex system that provides functionality for making a payment, checking the balance of an account, and sending a confirmation email.\nCreate the facade class: We create a class named “PaymentSystemFacade” that acts as the facade for the complex system. This class will have methods for making a payment, checking the balance, and sending a confirmation email.\n\nclass PaymentSystemFacade {\n  private Payment payment;\n  private Account account;\n  private Email email;\n  \n  public PaymentSystemFacade() {\n    payment = new Payment();\n    account = new Account();\n    email = new Email();\n  }\n  \n  public void makePayment(double amount) {\n    if (account.checkBalance(amount)) {\n      payment.makePayment(amount);\n      email.sendConfirmation();\n    }\n  }\n  \n  public double checkBalance() {\n    return account.checkBalance();\n  }\n}\n\nImplement the underlying components: We implement the classes “Payment”, “Account”, and “Email” that represent the underlying components of the complex system.\n\nclass Payment {\n  public void makePayment(double amount) {\n    // Code for making a payment\n  }\n}\n\nclass Account {\n  public boolean checkBalance(double amount) {\n    // Code for checking balance\n  }\n  \n  public double checkBalance() {\n    // Code for checking balance\n  }\n}\n\nclass Email {\n  public void sendConfirmation() {\n    // Code for sending confirmation email\n  }\n}\n\nUse the facade: Finally, we use the facade by creating an instance of the PaymentSystemFacade class and calling its methods.\n\nPaymentSystemFacade facade = new PaymentSystemFacade();\nfacade.makePayment(100.0);\ndouble balance = facade.checkBalance();\nThis is a simple example of how you can use the facade pattern to simplify the interaction with a complex system in Java. The facade provides a unified interface to the complex system, making it easier to use and understand, and reducing the impact of changes to the underlying components on the client code.\n\n\n\n\n\n  Builder \n\n\n\n  top \n\n\n\n Bridge"
  },
  {
    "objectID": "javase/se-pattern-factory.html",
    "href": "javase/se-pattern-factory.html",
    "title": "Factory",
    "section": "",
    "text": "The factory pattern is a design pattern that is used to create objects in a structured and standardized way. The factory pattern defines a factory method, which is a method that is responsible for creating objects of a specific type.\n\nThe factory pattern is useful when you want to centralize the logic for creating objects, and to provide a consistent and standard way of creating objects of different types. This can help to reduce duplication of code, and to make the code more maintainable and extensible.\nIn the context of the factory pattern, decoupling refers to the idea of separating the logic for creating objects from the code that uses those objects. By decoupling these two aspects of the system, you can make the code that uses the objects more flexible and reusable, and you can make the logic for creating the objects more modular and maintainable."
  },
  {
    "objectID": "javase/se-pattern-factory.html#example-carfactory",
    "href": "javase/se-pattern-factory.html#example-carfactory",
    "title": "Factory",
    "section": "2 Example CarFactory",
    "text": "2 Example CarFactory\nHere is an example of how to implement the factory pattern in Java, using a CarFactory class to create different types of cars:\npublic class CarFactory {\n    // Private constructor to prevent instantiation\n    private CarFactory() { }\n\n    // Factory method for creating cars\n    public static Car createCar(String type) {\n        switch (type) {\n            case \"sedan\":\n                return new Sedan(\"Toyota\", \"Camry\", 2019);\n            case \"hatchback\":\n                return new Hatchback(\"Honda\", \"Fit\", 2019);\n            case \"suv\":\n                return new SUV(\"Jeep\", \"Grand Cherokee\", 2019);\n            default:\n                throw new IllegalArgumentException(\"Invalid car type: \" + type);\n        }\n    }\n}\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type.\nThe createCar() method takes a type parameter, which specifies the type of car to create. Depending on the value of the type parameter, the createCar() method creates and returns an instance of the Sedan, Hatchback, or SUV class.\nTo use the CarFactory class, you would call the createCar() method, passing in the type of car.\nUsing the @Data annotation from the Lombok library to automatically generate getters, setters, and constructors for the Sedan, Hatchback, and SUV classes:\n // Sedan class\n    @Data\n    public static class Sedan implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\n// Hatchback class\n    @Data\n    public static class Hatchback implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\n// SUV class\n    @Data\n    public static class SUV implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type.\nThe createCar() method takes a type parameter, which specifies the type of car to create. Depending on the value of the type parameter, the createCar() method creates and returns an instance of the Sedan, Hatchback, or SUV class.\nThe Sedan, Hatchback, and SUV classes are nested classes inside the CarFactory class. Each of these classes is marked with the @Data annotation from the Lombok library, which generates the appropriate getters, setters, and constructors for the class. This means that you don’t have to write these methods manually, which can save a lot of time and effort.\nTo use the CarFactory class, you would call the createCar() method, passing in the type of car you want to create. For example:\nCar sedan = CarFactory.createCar(\"sedan\");\nThis code would create and return an instance of the Sedan class, with the specified make, model, and year."
  },
  {
    "objectID": "javase/se-pattern-factory.html#carfactory-decoupling",
    "href": "javase/se-pattern-factory.html#carfactory-decoupling",
    "title": "Factory",
    "section": "3 CarFactory decoupling",
    "text": "3 CarFactory decoupling\nThe factory pattern is often used in conjunction with the concept of decoupling, which is the idea of separating different components or aspects of a system in order to make the system more modular, flexible, and maintainable.\nBy decoupling the CarFactory class from the code that uses the cars, you can make the code that uses the cars more flexible and reusable. For example, you could define a CarDriver class that takes a Car object as a parameter, and uses the `  \n\n\n\n  Singleton \n\n\n\n  top \n\n\n\n Abstract Factory"
  },
  {
    "objectID": "javase/se-pattern-intro.html",
    "href": "javase/se-pattern-intro.html",
    "title": "Java Patterns: Types",
    "section": "",
    "text": "📘 Design-patterns\nIn Java, a design pattern is a general repeatable solution to a commonly occurring problem in software design.\nA design pattern is not a finished design that can be transformed directly into code, but rather it is a description or template that can be used to solve a problem that is commonly encountered in software development."
  },
  {
    "objectID": "javase/se-pattern-intro.html#design-patterns",
    "href": "javase/se-pattern-intro.html#design-patterns",
    "title": "Java Patterns: Types",
    "section": "2 Design Patterns",
    "text": "2 Design Patterns\nThere are many different design patterns that have been identified and documented, and each pattern provides a different solution to a specific problem.\nSome of the most important design patterns in Java include:\n\nthe singleton,\nthe factory,\nthe abstract factory\nthe observer,\nand the builder.\n\nThese patterns are commonly used in Java because they provide solutions to common problems that are encountered in software development, and they can help to make your code more efficient, reusable, and maintainable.\n\n\n\n\n\n\nPatterns are NOT a gurantee\n\n\n\nDesign patterns do not guarantee an absolute solution to a problem.\nThey provide clarity to the system architecture and the possibility of building a better system."
  },
  {
    "objectID": "javase/se-pattern-intro.html#design-pattern-classification",
    "href": "javase/se-pattern-intro.html#design-pattern-classification",
    "title": "Java Patterns: Types",
    "section": "3 Design Pattern Classification",
    "text": "3 Design Pattern Classification\nWe have 3 main types of Design Patterns:\n\n3.1 Creational\nIt deals with the creation of objects and classes. They provide a way to create objects while hiding the complexity of the actual creation process. Some creational design patterns are:\n\nSingleton\nFactory\nAbstract Factory\nBuilder\n\n\n\n3.2 Structural\nIt deals with object composition. They provide a way to compose objects and classes in a way that is flexible and efficient. Some structural design patterns are:\n\nFacade\nBridge\nDecorator\nComposite\n\n\n\n3.3 Behavioral\nIt deals with communication between objects and classes. They provide a way to define the communication between objects in a way that is decoupled from the actual objects that are communicating. Some examples of behavioural patterns are:\n\nObserver\nStrategy\nState\nCommander"
  },
  {
    "objectID": "javase/se-pattern-intro.html#advantage-of-design-patterns",
    "href": "javase/se-pattern-intro.html#advantage-of-design-patterns",
    "title": "Java Patterns: Types",
    "section": "4 Advantage of design patterns",
    "text": "4 Advantage of design patterns\n\nThey are reusable in multiple projects.\nThey provide the solutions that help to define the system architecture.\nThey capture the software engineering experiences.\nThey provide transparency to the design of an application.\nThey are well-proved and testified solutions since they have been built upon the knowledge and experience of expert software developers.\n\n\n\n\n\n\n\nWhen should we use the design patterns?\n\n\n\nWe must use the design patterns during the analysis and requirement phase of SDLC(Software Development Life Cycle).\nDesign patterns ease the analysis and requirement phase of SDLC by providing information based on prior hands-on experiences."
  },
  {
    "objectID": "javase/se-pattern-intro.html#design-patterns-cheat-sheet",
    "href": "javase/se-pattern-intro.html#design-patterns-cheat-sheet",
    "title": "Java Patterns: Types",
    "section": "5 Design Patterns Cheat-sheet",
    "text": "5 Design Patterns Cheat-sheet\n  \n\n\n\n  Java Patterns: UML \n\n\n\n  top \n\n\n\n Singleton"
  },
  {
    "objectID": "javase/se-pattern-observer.html",
    "href": "javase/se-pattern-observer.html",
    "title": "Observer",
    "section": "",
    "text": "The observer pattern is a design pattern in computer programming and Java that is used to notify one or mutiple objects of changes to another object.\n\n\nThis pattern is useful when you have a one-to-many relationship and when the state of “the one” object has to be notified in the clases that conform “the many” objects. Each object of “the many” part will be notified of changes to “the one” object.\nThe observer pattern is usually implemented by creating an interface or an abstract class:\n\n\n\nObserver Pattern UML"
  },
  {
    "objectID": "javase/se-pattern-observer.html#example-weather",
    "href": "javase/se-pattern-observer.html#example-weather",
    "title": "Observer",
    "section": "2 Example: Weather",
    "text": "2 Example: Weather\nHere is an example of implementation of the observer pattern step by step:\n\nCreate the interface Observer:\n\npublic interface Observer {\n    void update();\n}\n\nCreate the interface Subject:\n\npublic interface Subject {\n    void attach(Observer observer);\n    void detach(Observer observer);\n    void notifyObservers();\n}\n\nCreate a class WeatherData which implements the Subject interface:\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class WeatherData implements Subject {\n    private List<Observer> observers = new ArrayList<>();\n    private double temperature;\n\n    public void attach(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void detach(Observer observer) {\n        observers.remove(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n    public void setTemperature(double temperature) {\n        this.temperature = temperature;\n        this.notifyObservers();\n    }\n\n    public double getTemperature() {\n        return temperature;\n    }\n}\n\nCreate the TemperatureDisplay class which implements the Observer interface:\n\npublic class TemperatureDisplay implements Observer {\n    private WeatherData weatherData;\n\n    public TemperatureDisplay(WeatherData weatherData) {\n        this.weatherData = weatherData;\n        weatherData.attach(this);\n    }\n\n    public void update() {\n        System.out.println(\"Temperature: \" + weatherData.getTemperature());\n    }\n}\n\nUse the WeatherData class to notify the Observers:\n\nWeatherData weatherData = new WeatherData();\nTemperatureDisplay temperatureDisplay = new TemperatureDisplay(weatherData);\n\nweatherData.setTemperature(27.5);\nThe example demonstrates how to implement the Observer pattern in Java, where the WeatherData class acts as the Subject and the TemperatureDisplay class acts as the Observer.\nThe WeatherData class maintains a list of Observers and provides methods for attaching and detaching Observers, as well as for notifying Observers when the temperature changes. The TemperatureDisplay class receives updates from the WeatherData class and displays the temperature on the console.\nWhen the temperature is set in the WeatherData class, it calls the notifyObservers() method which in turns calls the update() method of all the Observers. The TemperatureDisplay class receives the update and retrieves the temperature from the WeatherData instance and displays it on the console.\nThis pattern allows for a loosely coupled system, where the WeatherData class does not need to be aware of the existence of the TemperatureDisplay class and vice versa. The TemperatureDisplay class can be added or removed from the observer list without affecting the behavior of the WeatherData class.\n\nAbout this site \n\n\n\n  Composite \n\n\n\n  top \n\n\n\n Strategy"
  },
  {
    "objectID": "javase/se-pattern-singleton.html",
    "href": "javase/se-pattern-singleton.html",
    "title": "Singleton",
    "section": "",
    "text": "The singleton pattern is a design pattern in computer programming and Java that is used to restrict the instantiation of a class to one “single” instance.\n\n\nThis is useful when you want to make sure that only one object of a particular class is created, because this can be helpful for managing resources and ensuring that your program is running as efficiently as possible.\nIn Java, the singleton pattern can be implemented by creating a private constructor for the class, which prevents other objects from creating instances of the class.\nThe class also typically provides a static method that allows other classes to access the single instance of the class, which is created the first time the static method is called. This ensures that only one instance of the class is created, and that all other classes can access this instance easily.\n\n\n\nSingleton Pattern"
  },
  {
    "objectID": "javase/se-pattern-singleton.html#example-logger",
    "href": "javase/se-pattern-singleton.html#example-logger",
    "title": "Singleton",
    "section": "2 Example: Logger",
    "text": "2 Example: Logger\nHere is an example of a singleton class in Java, using a Logger class as an example:\npublic class Logger {\n    // Private static instance of the class\n    private static Logger instance = null;\n\n    // Private instance variable\n    private PrintWriter writer;\n\n    // Private constructor\n    private Logger() {\n        try {\n            writer = new PrintWriter(\"log.txt\", \"UTF-8\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Public static method for accessing the instance\n    public static Logger getInstance() {\n        if (instance == null) {\n            instance = new Logger();\n        }\n        return instance;\n    }\n\n    // Public method for logging a message\n    public void log(String message) {\n        writer.println(message);\n    }\n\n    // Public method for closing the log file\n    public void close() {\n        writer.close();\n    }\n}\nIn this example, the Logger class defines a Logger() constructor that is private. This means that instances of the Logger class can only be created from within the Logger class itself.\nThe Logger class also defines a getInstance() method, which is marked as public and static. This method is used to access the instance of the Logger class, and to create the instance if it does not already exist.\nBecause the Logger class is a singleton, there can only be one instance of the class at any given time. This means that all instances of the Logger class share the same instance of the writer field, which is used to write messages to the log file.\nOverall, this example shows how the singleton pattern can be used to implement a Logger class in Java, which ensures that there is only one instance of the Logger class, and provides a global point of access to that instance. This allows the Logger class to manage shared resources, such as the log file, in a more efficient and effective way."
  },
  {
    "objectID": "javase/se-pattern-singleton.html#example-configurationmanager",
    "href": "javase/se-pattern-singleton.html#example-configurationmanager",
    "title": "Singleton",
    "section": "3 Example: ConfigurationManager",
    "text": "3 Example: ConfigurationManager\nHere is another example of a singleton class in Java, using a ConfigurationManager class as an example:\npublic class ConfigurationManager {\n    // Private static instance of the class\n    private static ConfigurationManager instance = null;\n\n    // Private instance variables\n    private Properties config;\n\n    // Private constructor\n    private ConfigurationManager() {\n        try {\n            config = new Properties();\n            config.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Public static method for accessing the instance\n    public static ConfigurationManager getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManager();\n        }\n        return instance;\n    }\n\n    // Public method for getting a configuration property\n    public String getProperty(String key) {\n        return config.getProperty(key);\n    }\n}\nIn this example, the ConfigurationManager class defines a ConfigurationManager() constructor that is private. This means that instances of the ConfigurationManager class can only be created from within the ConfigurationManager class itself.\nThe ConfigurationManager class also defines a getInstance() method, which is marked as public and static. This method is used to access the instance of the ConfigurationManager class, and to create the instance if it does not already exist.\nBecause the ConfigurationManager class is a singleton, there can only be one instance of the class at any given time. This means that all instances of the ConfigurationManager class share the same instance of the config field, which is used to store the configuration properties.\nOverall, this example shows how the singleton pattern can be used to implement a ConfigurationManager class in Java, which ensures that there is only one instance of the ConfigurationManager class, and provides a global point of access to that instance. This allows the ConfigurationManager class to manage shared resources, such as the configuration properties, in a more efficient and effective way. \n\n\n\n  Java Patterns: Types \n\n\n\n  top \n\n\n\n Factory"
  },
  {
    "objectID": "javase/se-pattern-state.html",
    "href": "javase/se-pattern-state.html",
    "title": "State",
    "section": "",
    "text": "The state pattern is a behavioral design pattern that allows objects to dynamically alter their behavior based on internal state changes.\nThe State design pattern is a behavioral design pattern that allows an object to change its behavior when its internal state changes. It provides a way to define a set of states and behaviors for a particular object, and allows the object to change its state at runtime. The State pattern is based on the idea of separating the behavior of an object from its state, which results in a more modular and flexible design.\nThe State pattern involves two main components: a Context and a State. The Context is the object whose behavior changes based on its internal state. The State is an interface or abstract class that defines the behavior associated with a particular state of the Context. The State objects are concrete classes that implement the State interface or extend the State abstract class, and define the behavior associated with each state.\nThe State pattern enables the Context object to change its behavior dynamically by delegating to the appropriate State object. When the internal state of the Context changes, the Context delegates to a different State object to handle the behavior associated with the new state. This allows the Context to appear to change its behavior at runtime, without changing its class or modifying its existing behavior.\nThe State pattern provides a way to encapsulate state-specific behavior into separate classes, which can be easily added, removed, or modified as needed. This makes it easier to add new states and behaviors to the object, and can result in a more maintainable and extensible codebase.\nOverall, the State pattern is useful in situations where the behavior of an object needs to change based on its internal state, and where it’s impractical to have a single class with conditional statements for each possible state. By encapsulating state-specific behavior into separate classes, the State pattern provides a flexible and modular way to handle state changes."
  },
  {
    "objectID": "javase/se-pattern-state.html#example-vending-machine",
    "href": "javase/se-pattern-state.html#example-vending-machine",
    "title": "State",
    "section": "1 Example: Vending machine",
    "text": "1 Example: Vending machine\nHere’s an example step by step implementation of the State pattern:\n\nDefine the Context class: This is the class whose behavior changes depending on its internal state. In this example, we’ll create a vending machine class that dispenses different items based on its current state:\n\npublic class VendingMachine {\n    private State currentState;\n\n    public VendingMachine() {\n        // initialize the vending machine to the out of stock state\n        currentState = new OutOfStockState();\n    }\n\n    public void setCurrentState(State state) {\n        currentState = state;\n    }\n\n    public void dispenseItem() {\n        currentState.dispenseItem(this);\n    }\n}\n\nDefine the State interface: This is the interface that defines the behavior associated with a particular state of the Context. In this example, we’ll create a State`` interface with a method for dispensing an item from the vending machine:\n\npublic interface State {\n    void dispenseItem(VendingMachine vendingMachine);\n}\n\nCreate concrete state classes: These are the classes that implement the State interface or extend the State abstract class, and define the behavior associated with each state. In this example, we’ll create three concrete state classes: OutOfStockState, PaymentReceivedState, and ItemDispensedState:\n\npublic class OutOfStockState implements State {\n    public void dispenseItem(VendingMachine vendingMachine) {\n        System.out.println(\"Out of stock, please come back later\");\n    }\n}\n\npublic class PaymentReceivedState implements State {\n    public void dispenseItem(VendingMachine vendingMachine) {\n        System.out.println(\"Item dispensed\");\n        vendingMachine.setCurrentState(new ItemDispensedState());\n    }\n}\n\npublic class ItemDispensedState implements State {\n    public void dispenseItem(VendingMachine vendingMachine) {\n        System.out.println(\"Item already dispensed\");\n    }\n}\n\nUse the State pattern in the Context class: In the VendingMachine class, we’ll use the State pattern to change the behavior of the vending machine based on its internal state.\n\npublic class VendingMachine {\n    private State currentState;\n\n    public VendingMachine() {\n        // initialize the vending machine to the out of stock state\n        currentState = new OutOfStockState();\n    }\n\n    public void setCurrentState(State state) {\n        currentState = state;\n    }\n\n    public void dispenseItem() {\n        currentState.dispenseItem(this);\n    }\n\n    // other methods for handling payment, restocking items, etc.\n}\n\nTest the State pattern implementation: In the main method, we’ll create a new vending machine and test its behavior in different states:\n\npublic static void main(String[] args) {\n    VendingMachine vendingMachine = new VendingMachine();\n\n    // test the out of stock state\n    vendingMachine.dispenseItem(); // should print \"Out of stock, please come back later\"\n\n    // test the payment received state\n    vendingMachine.setCurrentState(new PaymentReceivedState());\n    vendingMachine.dispenseItem(); // should print \"Item dispensed\"\n\n    // test the item dispensed state\n    vendingMachine.dispenseItem(); // should print \"Item already dispensed\"\n}\nThat’s a basic example of how to implement the State pattern in Java. In a real-world application, there would likely be more states and behaviors to handle, but the basic principles of the pattern would remain the same.\n\n\n\n\n\n  Strategy \n\n\n\n  top \n\n\n\n Commander"
  },
  {
    "objectID": "javase/se-pattern-strategy.html",
    "href": "javase/se-pattern-strategy.html",
    "title": "Strategy",
    "section": "",
    "text": "The strategy pattern is a behavioral design pattern that allows for flexible behavior by encapsulating algorithms into separate classes for interchangeability and modularity.\nThe Strategy design pattern is a behavioral design pattern that allows for flexible behavior implementation by encapsulating algorithms into separate classes. This pattern is based on the principle of “composition over inheritance,” which means that it’s better to use composition and interfaces rather than inheritance to achieve flexibility and modularity.\nIn a typical implementation of the Strategy pattern, an interface or abstract class defines a set of methods that encapsulate a specific behavior or algorithm. Concrete classes implement these methods with their own specific implementation of the behavior. The context object that needs to use the behavior holds a reference to the abstract class or interface, and at runtime, the concrete implementation is chosen based on the current context.\nThe advantage of using the Strategy pattern is that it allows for interchangeable behavior implementation. By encapsulating the algorithms into separate classes, it’s easy to swap out one implementation for another at runtime, without changing the code of the context object. This makes the code more flexible, maintainable, and extensible."
  },
  {
    "objectID": "javase/se-pattern-strategy.html#example-sorting",
    "href": "javase/se-pattern-strategy.html#example-sorting",
    "title": "Strategy",
    "section": "1 Example: Sorting",
    "text": "1 Example: Sorting\nHere’s an example of implementing the Strategy design pattern in Java step by step:\n\nDefine the Strategy Interface:\n\npublic interface SortingStrategy {\n    public void sort(int[] data);\n}\nThis interface defines the behavior for the sorting strategy, which can be implemented by multiple concrete classes.\n\nImplement the Concrete Strategies\n\npublic class BubbleSort implements SortingStrategy {\n    public void sort(int[] data) {\n        // Implement the bubble sort algorithm here\n    }\n}\n\npublic class QuickSort implements SortingStrategy {\n    public void sort(int[] data) {\n        // Implement the quick sort algorithm here\n    }\n}\nThese classes implement the SortingStrategy interface and provide specific implementations of the sorting algorithms.\n\nImplement the Context Class:\n\npublic class Sorter {\n    private SortingStrategy sortingStrategy;\n    \n    public Sorter(SortingStrategy sortingStrategy) {\n        this.sortingStrategy = sortingStrategy;\n    }\n    \n    public void sort(int[] data) {\n        sortingStrategy.sort(data);\n    }\n}\nThis class represents the context in which the sorting behavior will be used. It holds a reference to a SortingStrategy object and delegates the sorting operation to it.\n\nUse the Context Class with Different Strategies\n\nint[] data = {4, 2, 1, 5, 3};\nSorter sorter = new Sorter(new BubbleSort());\nsorter.sort(data); // Sort using bubble sort\n\nSorter sorter2 = new Sorter(new QuickSort());\nsorter2.sort(data); // Sort using quick sort\nThis code creates two instances of the Sorter class, one with a BubbleSort object and another with a QuickSort object. It then calls the sort() method on each instance, which delegates the sorting operation to the respective strategy object.\nBy using the Strategy pattern in this way, the behavior of the sorting operation can be easily changed by creating a new concrete strategy object and passing it to the Sorter object. This makes the code more flexible and easy to maintain, as changes to the sorting behavior can be made without modifying the Sorter class itself.\n\n\n\n\n\n  Observer \n\n\n\n  top \n\n\n\n State"
  },
  {
    "objectID": "javase/se-pattern-uml.html",
    "href": "javase/se-pattern-uml.html",
    "title": "Java Patterns: UML",
    "section": "",
    "text": "UML stands for Unified Modeling Language. It is a standardized visual language for specifying, constructing, visualizing, and documenting the artifacts of software systems, as well as for business modeling and other non-software systems.\n\n\nUML is used by software developers, business analysts, and systems engineers to model the design of a system and communicate that design to others. It provides a common language that allows people from different disciplines to understand and discuss system design in a consistent and precise way.\nUML is a powerful tool that can help teams design and develop software and other systems more efficiently and effectively."
  },
  {
    "objectID": "javase/se-pattern-uml.html#class-diagram-and-relationships",
    "href": "javase/se-pattern-uml.html#class-diagram-and-relationships",
    "title": "Java Patterns: UML",
    "section": "2 Class diagram and relationships",
    "text": "2 Class diagram and relationships\n\n\n\nExample of UML class-diagram\n\n\nIn UML, there are several types of relationships that can be used to model the relationships between elements in a system. Here is a brief overview of some of the most common types of relationships:\n\nInheritance: Inheritance is a relationship between classes, where one class is a subclass of another class and inherits the properties and behavior of the superclass. This is represented in UML by a solid line with a closed, filled arrowhead pointing from the subclass to the superclass.\nComposition: Composition is a strong type of association that represents a whole-part relationship between two classes, where the parts cannot exist independently of the whole. This is represented in UML by a solid line with a closed diamond shape pointing from the whole to the part.\nAggregation: Aggregation is a weaker type of association that represents a whole-part relationship between two classes, where the parts can exist independently of the whole. This is represented in UML by a solid line with an open diamond shape pointing from the whole to the part.\nAssociation: Association is a relationship between two classes that represents a connection or relationship between them. This is represented in UML by a solid line with an open arrowhead pointing from one class to the other.\nDependency: Dependency is a relationship between two classes that indicates that one class depends on the other for its functionality. This is represented in UML by a dashed line with an open arrowhead pointing from the dependent class to the class it depends on.\nUse: Use is a relationship between two classes that indicates that one class uses the other in some way. This is represented in UML by a dashed line with an open, unfilled arrowhead pointing from the using class to the class being used."
  },
  {
    "objectID": "javase/se-pattern-uml.html#example-class-and-object-diagram",
    "href": "javase/se-pattern-uml.html#example-class-and-object-diagram",
    "title": "Java Patterns: UML",
    "section": "3 Example: class and object diagram",
    "text": "3 Example: class and object diagram\n`"
  },
  {
    "objectID": "javase/se-pattern-uml.html#entity-relationship-types-multiplicity",
    "href": "javase/se-pattern-uml.html#entity-relationship-types-multiplicity",
    "title": "Java Patterns: UML",
    "section": "4 Entity relationship types: multiplicity",
    "text": "4 Entity relationship types: multiplicity\n\n4.1 One-to-One (1:1)\nA one-to-one relationship is a relationship between two entities where one entity is related to exactly one instance of the other entity.\n\n\n\n\n\nclassDiagram\ndirection LR\nclass Person {\n    -name: String\n}\n\nclass Passport {\n    -passportNumber: String\n}\n\nPerson  \"1\" *-- \"1\"  Passport: Owns\n\n\n\n\n\n\n\n\n\n\n\nFor example, a person can have only one passport, and a passport can belong to only one person. In this case, the person entity and the passport entity have a one-to-one relationship.\n\n\n4.2 One-to-Many (1:n)\nA one-to-many relationship is a relationship between two entities where one entity is related to many instances of the other entity.\n\n\n\n\n\nclassDiagram\ndirection LR\nclass Author {\n    -name: String\n}\n\nclass Book {\n    -title: String\n}\n\nAuthor  \"1\" *-- \"*\"  Book: Writes\n\n\n\n\n\n\n\n\n\n\n\nFor example, one author can write many books, and a book can have only one author. In this case, the author entity and the book entity have a one-to-many relationship.\n\n\n4.3 Many-to-Many (n:m)\nA many-to-many relationship is a relationship between two entities where many instances of one entity are related to many instances of the other entity.\n\n\n\n\n\nclassDiagram\ndirection LR\nclass Student {\n    -name: String\n}\n\nclass Course {\n    -title: String\n}\n\nStudent  \"*\" *--* \"*\"  Course: Enrolls\n\n\n\n\n\n\n\n\n\n\n\nFor example, many students can be enrolled in many courses, and many courses can have many students. In this case, the student entity and the course entity have a many-to-many relationship."
  },
  {
    "objectID": "javase/se-pattern-uml.html#example-customer-product",
    "href": "javase/se-pattern-uml.html#example-customer-product",
    "title": "Java Patterns: UML",
    "section": "5 Example: Customer-Product",
    "text": "5 Example: Customer-Product\n\n5.1 Customer-Product relationship\nThe model of the relationships between Customer, Order and Product is not enough.\n\n\n\n\n\nclassDiagram\ndirection LR\nclass Customer {\n    -name: String\n}\n\nclass Order {\n    -idOrder: String\n}\n\nclass Product {\n    -productName: String\n}\n\n\nCustomer \"1\" *-- \"*\" Order: Places\nOrder \"*\" *--* \"*\" Product: Contains\n\n\n\n\n\n\n\n\n\n\n\n5.2 Defining the Customer-Product relationship\nThe model of the relationships between Customer, Order and OrderDetail and Product.\nThere is a one-to-many association between Customer and Order, but how should we represent Order / OrderDetail / Product? We have chosen to map OrderDetail as an association class representing the many-to-many association between Order and Product.\n\n\n\n\n\n\nclassDiagram\nclass Customer {\n    -name: String\n}\n\nclass Order {\n    -idOrd: String\n}\n\nclass OrderDetail {\n    -idOrdD: String\n}\n\nclass Product {\n    -idPro: String\n}\n\n\nCustomer \"1\" *-- \"*\" Order: Places\nOrder \"1\" *-- \"*\" OrderDetail: Contains\nOrderDetail \"*\" --* \"1\" Product: Contains\n\n\n\n\n\n\n\n\n\n\n\n\n5.3 Reference\n\nClass diagrams Mermaid\nJava Persistence\nMultiplicityNotCardinality\n\n\n\n\nDesign pattern: many-to-many (order entry)\n\n\n\n\n\n\n\n  Java SE: Polymorphism \n\n\n\n  top \n\n\n\n Java Patterns: Types"
  },
  {
    "objectID": "javase/se-principles-abstraction.html",
    "href": "javase/se-principles-abstraction.html",
    "title": "Java SE: Abstraction",
    "section": "",
    "text": "📘 Abstraction\nAbstraction is the process of focusing on the essential characteristics of an object, while ignoring the non-essential details.\n\n\nOne of the OOP concepts in Java is abstraction, which is the act of representing key features without including supporting information.\nIt is a method for developing a brand-new data type appropriate for a particular application.\nIt avoids providing extraneous or pointless facts and only displays the precise portion the user has requested. It is crucial since it prevents you from performing the same task more than once.\n\n\n\nJava SE Basic Principles OOP Abstraction\n\n\nHere is an example of abstraction in Java:\npublic abstract class Account {\n    // This is an abstract class because it has an abstract method\n\n    public abstract void withdraw(double amount);\n\n    // Non-abstract methods\n    public void deposit(double amount) {\n        // Code for depositing money\n    }\n\n    public void checkBalance() {\n        // Code for checking account balance\n    }\n}\nIn this example, the Account class is an abstract class because it contains an abstract method called withdraw(). An abstract method is a method that is declared but not implemented. This means that subclasses of the Account class must implement the withdraw() method in order to use it."
  },
  {
    "objectID": "javase/se-principles-abstraction.html#abstract-class-and-interface",
    "href": "javase/se-principles-abstraction.html#abstract-class-and-interface",
    "title": "Java SE: Abstraction",
    "section": "2 Abstract class and Interface",
    "text": "2 Abstract class and Interface\nAbstraction is an important concept in object-oriented programming because it allows developers to create complex systems by building upon simpler components.\nThis makes it possible to manage large and complex code bases without becoming overwhelmed by the details.\nIn other words, abstraction means representing the essential features of an object without including the non-essential details. In Java, abstraction is achieved through the use of abstract classes and interfaces.\n\n\n\n\n\n\nNote\n\n\n\n📘 How abstraction is done\nIn Java, abstraction is achieved through the use of abstract classes and interfaces.\n\n\n\nAn abstract class is a class that contains one or more abstract methods. An abstract method is a method that is declared but not implemented. This means that subclasses of the abstract class must implement the abstract methods in order to use them.\nHere is an example of an abstract class in Java:\npublic abstract class Shape {\n    // This is an abstract class because it has an abstract method\n\n    public abstract double getArea();\n\n    // Non-abstract methods\n    public void draw() {\n        // Code for drawing the shape\n    }\n\n    public void move(int x, int y) {\n        // Code for moving the shape\n    }\n}\nIn this example, the Shape class is an abstract class because it contains an abstract method called getArea(). Subclasses of the Shape class, such as Circle or Rectangle, must implement the getArea() method in order to use it. This allows each subclass to provide its own implementation of the getArea() method, based on its specific characteristics.\nInterfaces are another way to achieve abstraction in Java. An interface is a collection of abstract methods and constant variables. A class that implements an interface must implement all of the abstract methods and constant variables defined in the interface.\nHere is an example of an interface in Java:\npublic interface Shape {\n    // This is an interface because it has only abstract methods\n\n    double getArea();\n\n    void draw();\n\n    void move(int x, int y);\n\n    // Constant variable\n    int MAX_SIZE = 100;\n}\nIn this example, the Shape interface defines three abstract methods and one constant variable. Any class that implements the Shape interface must implement all of the abstract methods and provide a value for the constant variable. This allows the class to define its own implementation of the abstract methods, based on its specific characteristics.\nHere is an example of how to implement the Shape interface in Java with Circle class:\npublic class Circle implements Shape {\n    // Private instance variable\n    private double radius;\n\n    // Constructor\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public double getArea() {\n        return Math.PI * radius * radius;\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public void draw() {\n        // Code for drawing the circle\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public void move(int x, int y) {\n        // Code for moving the circle\n    }\n}\nIn this example, the Circle class implements the Shape interface. This means that the Circle class must implement all of the abstract methods defined in the Shape interface. The Circle class also has a private instance variable called radius, which is used to store the radius of the circle.\nThe Circle class provides its own implementation of the getArea() method, which calculates the area of the circle based on its radius. It also provides its own implementation of the draw() and move() methods, which are used to draw and move the circle on the screen.\nOverall, this example shows how to implement an interface in Java. By implementing the Shape interface, the Circle class can provide its own implementation of the abstract methods defined in the interface, based on its specific characteristics."
  },
  {
    "objectID": "javase/se-principles-abstraction.html#conclusion",
    "href": "javase/se-principles-abstraction.html#conclusion",
    "title": "Java SE: Abstraction",
    "section": "3 Conclusion",
    "text": "3 Conclusion\nOverall, abstraction is a powerful concept that allows developers to create complex systems by building upon simpler components. It helps to manage the complexity of large code bases by focusing on the essential features of objects, while ignoring the non-essential details.\n\n\n\n\n\n  Java SE: Encapsulation \n\n\n\n  top \n\n\n\n Java SE: Inherence"
  },
  {
    "objectID": "javase/se-principles-encapsulation.html",
    "href": "javase/se-principles-encapsulation.html",
    "title": "Java SE: Encapsulation",
    "section": "",
    "text": "📘 Encapsulation\nEncapsulation is the process of wrapping data and methods that operate on that data into a single unit. In other words, it is the process of hiding the implementation details of an object from the outside world.\nIn Java, encapsulation is achieved through the use of access modifiers like private, public, and protected.\n\n\nEncapsulation is the process of grouping functions and data into a single entity. To access these data members, the member function’s scope must be set to public, while the data members’ scope must be set to private.\nAccording to this theory, an item contains all important information; only a small subset is made available to the outside world. Each object has a private class that contains its implementation and state.\n\n\n\nJava SE Basic Principles OOP Encapsulation\n\n\nHere is an example of encapsulation in Java:\npublic class Account {\n    // Private instance variables\n    private double balance;\n\n    // Public methods\n    public void deposit(double amount) {\n        // Code for depositing money\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        // Code for withdrawing money\n        balance -= amount;\n    }\n\n    public void checkBalance() {\n        // Code for checking account balance\n        System.out.println(\"Current balance: \" + balance);\n    }\n}\n\nIn this example, the Account class has private instance variables and public methods. The balance variable is private, which means that it can only be accessed within the Account class. The deposit(), withdraw(), and checkBalance() methods are public, which means that they can be called from outside the Account class. This ensures that the implementation details of the Account class are hidden from the outside world.  \n\n\n\n  Java SE: Java 8 \n\n\n\n  top \n\n\n\n Java SE: Abstraction"
  },
  {
    "objectID": "javase/se-principles-inheritance.html",
    "href": "javase/se-principles-inheritance.html",
    "title": "Java SE: Inherence",
    "section": "",
    "text": "📘 Inheritance\nInheritance is a fundamental concept in object-oriented programming. It is the process of creating new classes from existing classes.\nIn other words, it is the process of deriving new classes from existing classes, which allows developers to reuse and extend the functionality of existing classes.\n\n\nIn Java, inheritance is achieved through the use of the extends keyword. A class that extends another class is called a subclass, and the class it extends is called the superclass.\nThe subclass inherits all of the methods and fields of the superclass, and can also define its own methods and fields.\n\n\n\nJava SE Basic Principles OOP Inherence"
  },
  {
    "objectID": "javase/se-principles-inheritance.html#inherence-reserved-words",
    "href": "javase/se-principles-inheritance.html#inherence-reserved-words",
    "title": "Java SE: Inherence",
    "section": "2 Inherence Reserved words",
    "text": "2 Inherence Reserved words\n\nextends is used to indicate that a class is a subclass of another class.\nsuper is used to refer to the immediate parent class of the current class. It is commonly used to access methods or fields of the parent class that have been overridden in the current class.\n\n\n2.1 Final\n\nfinal is a keyword in Java that can be used to indicate that a class, method, or variable cannot be overridden or modified. A final class cannot be extended, a final method cannot be overridden and a final variable is a constant and its value cannot be modified."
  },
  {
    "objectID": "javase/se-principles-inheritance.html#example1",
    "href": "javase/se-principles-inheritance.html#example1",
    "title": "Java SE: Inherence",
    "section": "3 Example1",
    "text": "3 Example1\nHere is an example of inheritance in Java:\npublic class Animal {\n    // Private instance variable\n    private String name;\n\n    // Constructor\n    public Animal(String name) {\n        this.name = name;\n    }\n\n    // Getter method for the name variable\n    public String getName() {\n        return name;\n    }\n\n    // Method for making the animal make a noise\n    public void makeNoise() {\n        // Code for making the animal make a noise\n    }\n}\n\npublic class Dog extends Animal {\n    // Private instance variable\n    private int age;\n\n    // Constructor\n    public Dog(String name, int age) {\n        super(name);\n        this.age = age;\n    }\n\n    // Getter method for the age variable\n    public int getAge() {\n        return age;\n    }\n\n    // Method for making the dog bark\n    @Override\n    public void makeNoise() {\n        System.out.println(\"Woof!\");\n    }\n}\n\n\nTthis example shows how to use inheritance in Java. By extending the Animal class, the Dog class is able to reuse and extend the functionality of the Animal class, and define its own methods and fields. This allows the Dog class to inherit the characteristics of the Animal class, and add its own unique characteristics as well.\nIn this example, the Animal class is a superclass, and the Dog class is a subclass that extends the Animal class. The Dog class inherits all of the methods and fields of the Animal class, including the name field and the makeNoise() method.\nThe Dog class also has its own age field, which is not defined in the Animal class. It also provides its own implementation of the makeNoise() method, which overrides the implementation in the Animal class. This allows the Dog class to define its own behavior for the makeNoise() method, based on its specific characteristics."
  },
  {
    "objectID": "javase/se-principles-inheritance.html#example2",
    "href": "javase/se-principles-inheritance.html#example2",
    "title": "Java SE: Inherence",
    "section": "4 Example2",
    "text": "4 Example2\nHere is an example of how to create a Cat class in Java that extends the Animal class from the previous example:\npublic class Cat extends Animal {\n    // Private instance variable\n    private int age;\n\n    // Constructor\n    public Cat(String name, int age) {\n        super(name);\n        this.age = age;\n    }\n\n    // Getter method for the age variable\n    public int getAge() {\n        return age;\n    }\n\n    // Method for making the cat meow\n    @Override\n    public void makeNoise() {\n        System.out.println(\"Meow!\");\n    }\n}\nThe Cat class also has its own age field, which is not defined in the Animal class. It also provides its own implementation of the makeNoise() method, which overrides the implementation in the Animal class. This allows the Cat class to define its own behavior for the makeNoise() method, based on its specific characteristics.\n\n\n\n\n\n  Java SE: Abstraction \n\n\n\n  top \n\n\n\n Java SE: Polymorphism"
  },
  {
    "objectID": "javase/se-principles-polymorphism.html",
    "href": "javase/se-principles-polymorphism.html",
    "title": "Java SE: Polymorphism",
    "section": "",
    "text": "📘 Polymorphism\nPolymorphism is a fundamental concept in object-oriented programming. It is the ability of an object to take on different forms.\nIn other words, it is the ability of a single object to behave differently in different contexts.\n\n\nPolymorphism is an important concept in object-oriented programming because it allows developers to write code that is more flexible and reusable. By using polymorphism, developers can write code that can operate on objects of different types, without knowing the specific type of the object in advance.\n\n\n\nJava SE Basic Principles OOP Polymorphishm\n\n\nIn Java, polymorphism is achieved through the use of inheritance and interfaces. A subclass can implement multiple interfaces, and an interface can be implemented by multiple classes. This allows objects of different types to share a common set of methods, which can be called on the objects without knowing their specific type.\nHere is an example of polymorphism in Java using the Animal, Dog, and Cat classes from the previous examples:\npublic class Main {\n    public static void main(String[] args) {\n        // Create a Dog object\n        Dog dog = new Dog(\"Buddy\", 5);\n\n        // Create a Cat object\n        Cat cat = new Cat(\"Whiskers\", 3);\n\n        // Call the makeNoise() method on the Dog object\n        dog.makeNoise();\n\n        // Call the makeNoise() method on the Cat object\n        cat.makeNoise();\n    }\n}\nIn this example, the Dog class and the Cat class both implement the Animal class, which defines the makeNoise() method. This means that the Dog and Cat classes both have their own implementations of the makeNoise() method.\nWhen the makeNoise() method is called on the dog object, it executes the implementation in the Dog class, which prints the “Woof!” message to the console. When the makeNoise() method is called on the cat object, it executes the implementation in the Cat class, which prints the “Meow!” message to the console."
  },
  {
    "objectID": "javase/se-principles-polymorphism.html#conclusion",
    "href": "javase/se-principles-polymorphism.html#conclusion",
    "title": "Java SE: Polymorphism",
    "section": "2 Conclusion",
    "text": "2 Conclusion\nOverall, this example shows how polymorphism allows objects of different types to share a common set of methods, and to execute different implementations of those methods based on their specific type. This allows the code to be more flexible and reusable, because it can operate on objects of different types without knowing their specific type in advance. \n\n\n\n  Java SE: Inherence \n\n\n\n  top \n\n\n\n Java Patterns: UML"
  },
  {
    "objectID": "javase/se-what-basics.html",
    "href": "javase/se-what-basics.html",
    "title": "Java Standard Edition: Basics",
    "section": "",
    "text": "📘 Java SE\nJava is a high-level, class-based, object-oriented and general-purpose programming language and computing platform intended to let programmers write once, run anywhere (WORA). The type system is static, strong and safe.\nIt is widely used for developing applications for web, mobile, and desktop environments. Java is known for its reliability and security, making it a perfect choice for developing enterprise-level applications, that is JEE (Java Enterprise Edition)."
  },
  {
    "objectID": "javase/se-what-basics.html#java-se",
    "href": "javase/se-what-basics.html#java-se",
    "title": "Java Standard Edition: Basics",
    "section": "2 Java SE",
    "text": "2 Java SE\nJava SE (Java Platform, Standard Edition) is a set of libraries, tools, and technologies that provide a complete environment for developing and deploying Java-based applications. Java SE includes the:\n\nJava Development Kit (JDK), which contains the tools and libraries necessary for developing and running Java programs,\nas well as the Java Runtime Environment (JRE), which is used to run Java programs on a computer.\n\n\n\n\n\n\nJava SE and Java EE - Sergelucas, CC BY-SA 3.0, via Wikimedia Commons\n\n\nJava SE is the core platform for Java-based software development, and is used by millions of developers around the world to create a wide variety of applications, from desktop and mobile applications to enterprise-level systems.\n\n\nJava SE also includes a set of standard libraries, which provide a wide range of functionality, including basic input/output, networking, security, and graphical user interface (GUI) components."
  },
  {
    "objectID": "javase/se-what-basics.html#programming-steps",
    "href": "javase/se-what-basics.html#programming-steps",
    "title": "Java Standard Edition: Basics",
    "section": "3 Programming steps",
    "text": "3 Programming steps\n\n\n\nJava Programming Steps\n\n\nhe steps in writing a Java program is illustrated as above:\n\nWrite the source code Person.java.\nCompile the source code Person.java into Java portable bytecode (or machine code) Person.class using the JDK’s Java compiler by issuing the command javac Person.java.\nRun the compiled bytecode Person.class, using the JDK’s Java Runtime by issuing the command java Person.."
  },
  {
    "objectID": "javase/se-what-basics.html#type-system",
    "href": "javase/se-what-basics.html#type-system",
    "title": "Java Standard Edition: Basics",
    "section": "4 Type system",
    "text": "4 Type system\n\nSafe: Java’s type system helps to prevent errors by ensuring that values stored in variables are always of the correct type. This helps to avoid type-related runtime errors and makes Java programs more reliable.\nStatic: Java is a statically-typed language, which means that the type of a variable is determined at compile time, rather than at runtime. This allows the Java compiler to catch type errors before the program is executed, making it easier to find and fix errors in your code.\nStrong: Java has a strong type system, which means that type conversions (also known as typecasting) between different types are not allowed unless they are explicitly specified by the programmer. This helps to prevent unintended type errors and makes Java programs more predictable and easier to understand."
  },
  {
    "objectID": "javase/se-what-basics.html#and-..-what-is-jee",
    "href": "javase/se-what-basics.html#and-..-what-is-jee",
    "title": "Java Standard Edition: Basics",
    "section": "5 And .. what is JEE?",
    "text": "5 And .. what is JEE?\n\n\n\n\n\n\nJava EE\n\n\n\nJEE (Java Platform, Enterprise Edition) is a collection of technologies and standards for building enterprise-level applications using the Java programming language.\n\n\nEE provides a set of APIs and tools for developing distributed, transactional, and secure Java applications that can run on a variety of devices and environments, including web and mobile.\nJEE is often used for building large-scale, complex, and mission-critical applications in industries such as finance, healthcare, and e-commerce.\nJava Vocabulary\n\n\n\n\n\n  MarkUp Languages Resources \n\n\n\n  top \n\n\n\n Java Standard Edition: Principles"
  },
  {
    "objectID": "javase/se-what-moochelsinki.html",
    "href": "javase/se-what-moochelsinki.html",
    "title": "Java MOOC Helsinki",
    "section": "",
    "text": "Java MOOC Programming University of Helsinki\n\n\nWelcome to the University of Helsinki’s free massive open online course (MOOC) on programming! This is an updated version of our popular course Object-Oriented Programming with Java.\nDuring this course, you will learn the basics of computer programming, along with algorithms and object-oriented programming through the Java programming language. The course includes comprehensive materials and plenty of programming exercises - all of which are tested using our automatic testing service Test My Code."
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#target",
    "href": "javase/se-what-moochelsinki.html#target",
    "title": "Java MOOC Helsinki",
    "section": "2 Target",
    "text": "2 Target\nAnyone can join - no previous programming knowledge is required.\nUnlike many programming courses found online, ours is completely unabridged; the course’s scope and material are identical to our CS1 Introduction to Programming and Advanced Programming courses.\n\n\nThis is the first course in our computer science learning track, and we use industry-grade tooling from day one. As such, the course is about programming in a real integrated development environment (IDE) instead of a browser or an educational IDE.\nThe course does not require separate registration. You can simply dive into the first part of the course found over here."
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#course-contents",
    "href": "javase/se-what-moochelsinki.html#course-contents",
    "title": "Java MOOC Helsinki",
    "section": "3 Course Contents",
    "text": "3 Course Contents\nThe course is split up into two individual courses:\n\nJava Programming I\nand Java Programming II\n\nEach course consists of seven parts, each with its own exercise set. Completing a single part takes approximately 5-20 hours, and we recommend reserving at least 10 hours per part, depending on prior skills with computers. \n\n\n\n  Java Standard Edition: Principles \n\n\n\n  top \n\n\n\n Java SE: Maven"
  },
  {
    "objectID": "javase/se-what-principles.html",
    "href": "javase/se-what-principles.html",
    "title": "Java Standard Edition: Principles",
    "section": "",
    "text": "Object-oriented programming (OOP) is a programming paradigm that is based on the concepts of objects and classes, which can contain data and code that manipulates that data. OOP is based on several key principles, including the following:\n\n\n\n\nJava SE Basic Principles OOP\n\n\nEncapsulation: Encapsulation refers to the idea of combining data and the code that manipulates that data into a single unit, or object. This allows for better organization and modularity of code, and helps to hide the internal details of an object from other parts of the program.\nAbstraction: Abstraction is the process of representing essential features without including the details. In OOP, abstraction is often achieved through the use of interfaces or abstract classes, which define a set of common methods that can be implemented by different classes in different ways. This allows for greater flexibility and reusability of code.\nInheritance: Inheritance is the ability of a class to inherit the attributes and behaviors of another class. In OOP, a class can inherit from a parent class, also known as a superclass, and can override or extend the methods of the parent class to add new functionality. This allows for code reuse and makes it easier to create hierarchies of classes.\nPolymorphism: Polymorphism is the ability of an object to take on multiple forms. In OOP, polymorphism allows for the use of a single interface to refer to objects of different types. This allows for greater flexibility and code reuse, as the same method can be used on objects of different types and the appropriate implementation will be called based on the type of the object.\n\nOverall, the principles of encapsulation, abstraction, inheritance, and polymorphism are fundamental to OOP and form the basis for many of its benefits, such as modularity, flexibility, code reuse, and ease of maintenance.\n\n\nObjects can interact with each other by sending and receiving messages, or method calls, to access and modify their data.\nObjects are created from classes, which are templates that define the structure and behavior of objects.\n\n\n\nExample object in Java\n\n\n\n📘 Object-oriented programming (OOP)\nIn object-oriented programming (OOP), an object is a self-contained unit that combines data and the code that manipulates that data.\nAn object is a data structure that contains:\n\nattributes, or properties, that describe the object, defines the state’s object\nand methods, or functions, that define the behavior of the object.\n\n\n\nIn Java, objects are created using the new keyword, and their attributes and methods can be accessed using the dot (.) operator. Objects are an important concept in OOP and are central to many of its benefits, such as modularity, code reuse, and flexibility.\n\nPerson carla = new Person(\"Carla\", 21, \"red hair\", 45.000);\n\n\n\nIn object-oriented programming (OOP):\n\nThe constructor is a special type of method that is used to create and initialize an object. In Java, a constructor is a method that has the same name as the class and is used to create an instance of the class. A constructor can take arguments, which are used to initialize the object’s attributes, or properties.\nThe state of an object refers to the values of its attributes at a given moment in time.\nThe behavior of an object refers to the actions or operations that it can perform. In Java, the behavior of an object is defined by its methods, which are functions that are associated with the object and can be called to perform actions on the object.\n\nOverall, a constructor, state, and behavior are important concepts in OOP and are closely related.\nA constructor is used to create and initialize an object, and its state and behavior are defined by its attributes and methods, respectively. In Java SE, these concepts are central to the creation and use of objects, and are fundamental to the flexibility and power of the Java language.\n\n\n\n\n\n  Java Standard Edition: Basics \n\n\n\n  top \n\n\n\n Java MOOC Helsinki"
  },
  {
    "objectID": "javase/selab0-1.html",
    "href": "javase/selab0-1.html",
    "title": "Lab#SE00-1: Maven Person",
    "section": "",
    "text": "📘 Linux Lab#SE00-1: Person\n\nCreate a Maven/Gradle Java SE Project with the UML and classes defined below.\nAdd Lombok, JUnit and Faker dependencies\nRefactor: remove boilerplate code (getters, setters and so on) and work with Lombok\nCreate Junit tests to test objects. Use Faker to create objects:\n\nTest createPerson: check whether the object Person creation works properly.\nTest createCar: check whether the object Car creation works properly.\nTest createBook: check whether the object Book creation works properly.\nTest createStudent: check whether the object Student creation works properly\nWithout composition: a Student object without car and books.\nWith composition: a Student object with Car object and Book List objects\n\nCreate Junit tests to test operations:\n\nTest methodsPerson: check that Person methods work properly: becomeOlder(), killVampire(), withFirstName()\n\nImprove Car, Book and Author classes with two methods each."
  },
  {
    "objectID": "javase/selab0-1.html#uml",
    "href": "javase/selab0-1.html#uml",
    "title": "Lab#SE00-1: Maven Person",
    "section": "1 UML",
    "text": "1 UML\n\n\n\n\n\nclassDiagram\nclass Person {\n  -firstname: String\n  -lastname: String\n  -age: int\n}\n\nclass Student {\n  -university: String\n}\n\nclass Author {\n  -genre: String\n}\n\n\nPerson --|> Student: Inheritance\nPerson --|> Author: Inheritance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\n\nclass Student {\n  -university: String\n  -car: Car\n  -books: ArrayList~Book~\n}\n\nclass Author {\n  -genre: String\n  -book: Book\n}\n\nclass Book {\n  -title: String\n  -ISBN: String\n  -pages: int\n  -author: Author\n}\n\nclass Car {\n     -places: int\n     -color: String\n}\n\nStudent *-- Book: Composition\nBook *-- Author: Composition\nStudent *-- Car: Composition\nAuthor *-- Book: Composition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\nclass Person {\n  -firstname: String\n  -lastname: String\n  -age: int\n}\n\nclass Student {\n  -university: String\n  -car: Car\n  -books: ArrayList~Book~\n}\n\nclass Author {\n  -genre: String\n  -book: Book\n}\n\nclass Book {\n  -title: String\n  -ISBN: String\n  -pages: int\n  -author: Author\n}\n\nclass Car {\n     -places: int\n     -color: String\n}\n\nPerson --|> Student: Inheritance\nPerson --|> Author: Inheritance\n\nStudent *-- Book: Composition\nBook *-- Author: Composition\nStudent *-- Car: Composition\nAuthor *-- Book: Composition"
  },
  {
    "objectID": "javase/selab0-1.html#base-classes",
    "href": "javase/selab0-1.html#base-classes",
    "title": "Lab#SE00-1: Maven Person",
    "section": "2 Base Classes",
    "text": "2 Base Classes\n\n2.1 Person Class\nHere, the Person class represents a person with a name, address and others.\n\n\n\nCode Person\n\n\n\nPerson.java\n\n\n  package exemple1;\n\n  public class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n\n    //private boolean vampireState= true;\n\n    public Person(String firstName, String lastName) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.age = 189;\n\n    }\n\n    public Person(String firstName, String lastName, int newAge) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.age = newAge;\n\n    }\n\n    public void becomeOlder() {\n      age = age + 5;\n\n    }\n    \n    public void killVampire () {\n      \n      age = -150;\n    }\n   \n    public String getFirstName() {\n      return firstName;\n    }\n\n    public String getLastName() {\n      return lastName;\n    }\n\n    public Person withFirstName(String firstName) {\n      return new Person(firstName, lastName);\n    }\n\n    public Person withLastName(String lastName) {\n      return new Person(firstName, lastName);\n    }\n\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Person person = (Person) o;\n      if (firstName != null ? !firstName.equals(person.firstName) : person.firstName != null) {\n        return false;\n      }\n      if (lastName != null ? !lastName.equals(person.lastName) : person.lastName != null) {\n        return false;\n      }\n      return true;\n    }\n\n    public int hashCode() {\n      int result = firstName != null ? firstName.hashCode() : 0;\n      result = 31 * result + (lastName != null ? lastName.hashCode() : 0);\n      return result;\n    }\n\n    \n}\n\n\n\n\n\n2.2 Book Class\nHere, the Book class represents a book with a title, pages and others.\n\n\n\nCode Book\n\n\n\nBook.java\n\n\n  package exemple1;\n\npublic class Book {\n\n    private String title;\n    private int pages;\n    private String ISBN;\n    private Author author;\n\n    public Book(String title, int pages, String iSBN, Author author) {\n        // super();\n        this.title = title;\n        this.pages = pages;\n        ISBN = iSBN;\n        this.author = author;\n    }\n\n    public int getPages() {\n        return pages;\n    }\n\n    public void setPages(int pages) {\n        this.pages = pages;\n    }\n\n    public Author getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(Author author) {\n        this.author = author;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book [title=\" + title + \", pages=\" + pages + \", ISBN=\" + ISBN + \"]\";\n    }\n\n}\n\n\n\n\n\n2.3 Student Class\nHere, the Student class represents a student with a name, age and others.\n\n\n\nCode Student\n\n\n\nStudent.java\n\npackage exemple1;\n\nimport java.util.ArrayList;\n\npublic class Student extends Person {\n\n    public String university;\n    public Car car;\n    public ArrayList<Book> books;\n    //1\n    //public ArrayList<Book> books = new ArrayList<Book>();\n    public Student(String firstName, String lastName, int age, String university) {\n        super(firstName, lastName, age);\n        this.books = new ArrayList<Book>();\n    }\n\n    public void addBook (Book booktoaddtoarray) {\n        this.books.add(booktoaddtoarray);       \n    }\n\n\n    public ArrayList<Book> getBooks() {\n        return books;\n    }\n\n    public void setBooks(ArrayList<Book> books) {\n        this.books = books;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override@Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        Student other = (Student) obj;\n        if (age != other.age)\n            return false;\n        if (name == null) {\n            if (other.name != null)\n                return false;\n        } else if (!name.equals(other.name))\n            return false;\n        return true;\n    }\n        result = prime * result + age;\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        return result;\n    }\n\n}\n\n\n\n\n\n2.4 Car Class\nHere, the Car class represents a car with doors, places and other attributes.\n\n\n\nCode Car\n\n\n\nCar.java\n\npackage exemple1;\n\npublic class Car {\n    \n    public int doors;\n    public int seats;\n    public String color;\n        \n    public Car(int doors, int places, String color) {\n        this.doors = doors;\n        this.seats = seats;\n        this.color = color;\n    }\n\n    @Override\n    public String toString() {\n        //return \"Car [toString()=\" + super.toString() + \"]\";\n        return \"Car [doors=\" + this.doors + \", seats=\" + this.seats + \", color=\" + this.color + \"]\"\n    }\n}\n\n\n\n\n\n2.5 Author Class\nHere, the Author class represents an author with a … and others.\n\n\n\nCode Author\n\n\n\nAuthor.java\n\n\npackage exemple1;\n\npublic class Author extends Person {\n\n    public Author(String firstName, String lastName, int age, String genre) {\n        super(firstName, lastName, age);\n        public String genre;\n        // TODO Auto-generated constructor stub\n    }\n\n}"
  },
  {
    "objectID": "javase/selab0-1.html#eclipse-ide-uml",
    "href": "javase/selab0-1.html#eclipse-ide-uml",
    "title": "Lab#SE00-1: Maven Person",
    "section": "3 Eclipse IDE UML",
    "text": "3 Eclipse IDE UML\n\n\n\nUML Person - Student - Author and Car\n\n\n\n\n\n\n\n  Commander \n\n\n\n  top \n\n\n\n Lab#SE00-2: Maven Clinic"
  },
  {
    "objectID": "javase/selab0-2.html",
    "href": "javase/selab0-2.html",
    "title": "Lab#SE00-2: Maven Clinic",
    "section": "",
    "text": "📘 Linux Lab#SE00-2: Maven Clinic\n\nCreate a Maven/Gradle Java SE Project with the UML and classes defined below.\nAdd Lombok, JUnit and Faker dependencies\nRefactor: remove boilerplate code (getters, setters and so on) and work with Lombok from Person, MyDate and Clinic\nCreate Junit tests to test objects. Use Faker to create objects:\n\nTest createPerson: check weather the object Person creation works properly.\nTest createMyDate: check weather the object Car creation works properly.\nTest createClinic: check weather the object Book creation works properly.\n\nComplete these mehtods within Clinic class:\n\npublic boolean isAccepted(Person person) {}: return true when weightIndex() < lowestWeightIndex\npublic void addAsMember(Person person) {}: add as a member if member isAccepted(Person person)\npublic Person personWithHighestWeightIndex() {}: return Person object with the highest WeightIndex()\n\nCreate Junit tests to test the previous three new methods created at Clinic class."
  },
  {
    "objectID": "javase/selab0-2.html#uml",
    "href": "javase/selab0-2.html#uml",
    "title": "Lab#SE00-2: Maven Clinic",
    "section": "1 UML",
    "text": "1 UML\n\nThe class diagram represents three classes, Person, MyDate, and Clinic.\n\nThe Person class has four private fields name, age, height, and weight and one field birthMyDate of type MyDate .\nThe MyDate class has three private fields day, month, and year.\nThe Clinic class has two private fields lowestWeightIndex and name, and a field members which is an ArrayList of Person objects.\n\nThe relationship between Person and MyDate is a Composition relationship, where as the relationship between Clinic and Person is also a Composition relationship but trough an ArraList.\n\n\n\n\n\n\nclassDiagram\nclass Person {\n  -name: String\n  -age: int\n  -height: int\n  -weight: int\n  -birthMyDate: MyDate\n}\n\nclass MyDate {\n  -day: int\n  -month: int\n  -year: int\n}\n\nclass Clinic {\n  -lowestWeightIndex: double\n  -name: String\n  -members: ArrayList~Person~\n}\n\nPerson *-- MyDate: Composition\nClinic *-- Person: Composition"
  },
  {
    "objectID": "javase/selab0-2.html#base-classes",
    "href": "javase/selab0-2.html#base-classes",
    "title": "Lab#SE00-2: Maven Clinic",
    "section": "2 Base Classes",
    "text": "2 Base Classes\n\n2.1 Person Class\nHere, the Person class represents a person with a name, address and others.\n\n\n\nCode Person\n\n\n\nPerson.java\n\n\n  package exemple3;\n\npublic class Person {\n\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n    //composition relationship\n    private MyDate birthMyDate;\n\n    public Person(String name) {\n        this(name, 0); // run here the other constructor's code and set the age parameter to 0\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.weight = 0;\n        this.height = 0;\n    }\n    \n    public Person(String name, int height, int weigth) {\n        this.name = name;\n        this.age = 0;\n        this.weight = weigth;\n        this.height = height;\n    }\n\n    public Person(String name, int day, int month, int year) {\n        this.name = name;\n        this.weight = 0;\n        this.height = 0;\n        this.birthMyDate = new MyDate(day, month, year);\n    }\n    \n    public Person(String name, int age, int day, int month, int year) {\n        this.name = name;\n        this.age = age;\n        this.weight = 0;\n        this.height = 0;\n        this.birthMyDate = new MyDate(day, month, year);\n    }\n\n    public void printPerson() {\n        System.out.println(this.name + \" I am \" + this.age + \" years old\");\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public void becomeOlder(int years) {\n        this.age = this.age + years;\n    }\n\n    public boolean isAdult() {\n        if (this.age < 18) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public double weightIndex() {\n        double heightInMeters = this.height / 100.0;\n\n        return this.weight / (heightInMeters * heightInMeters);\n    }\n    \n    public boolean olderThan(Person compared) {\n        if (this.age > compared.getAge()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public String toString() {\n        return this.name + \" I am \" + this.age + \" years old, my weight index is \" + this.weightIndex() + \", born \"\n                + this.birthMyDate;\n    }\n\n    //setters and getters\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    public int getHeight() {\n        return this.height;\n    }\n\n    public int getWeight() {\n        return this.weight;\n    }\n\n    public void setWeight(int weight) {\n        this.weight = weight;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n    \n    public int getAge() {\n        return this.age;\n    }\n}\n\n\n\n\n\n2.2 MyDate Class\nHere, the MyDate class represents a date with a day, month and year.\n\n\n\nCode MyDate\n\n\n\nMyDate.java\n\n\npackage exemple3;\n\npublic class MyDate {\n    private int day;\n    private int month;\n    private int year;\n\n    public MyDate(int day, int month, int year) {\n        this.day = day;\n        this.month = month;\n        this.year = year;\n    }\n\n    public String toString() {\n        return this.day + \".\" + this.month + \".\" + this.year;\n    }\n\n    public boolean earlier(MyDate compared) {\n        // first we'll compare years\n        if (this.year < compared.year) {\n            return true;\n        }\n\n        // if the years are the same, we'll compare the months\n        if (this.year == compared.year && this.month < compared.month) {\n            return true;\n        }\n\n        // years and months the same, we'll compare the days\n        if (this.year == compared.year && this.month == compared.month && this.day < compared.day) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n2.3 Clinic Class\nHere, the Clinic class represents a clinic with a name, lowestWeightIndex and members.\n\n\n\nCode Clinic\n\n\n\nClinic.java\n\n\npackage exemple3;\n\nimport java.util.ArrayList;\n\npublic class Clinic {\n\n    private double lowestWeightIndex;\n    private String name;\n    private ArrayList<Person> members;\n\n    public Clinic(String name, double lowestWeightIndex) {\n        this.lowestWeightIndex = lowestWeightIndex;\n        this.name = name;\n        this.members = new ArrayList<Person>();\n    }\n\n    public boolean isAccepted(Person person) {\n        // to-do\n    }\n\n    public void addAsMember(Person person) {\n        // to-do\n    }\n\n    public Person personWithHighestWeightIndex() {\n        // to-do\n    }\n\n    public String toString() {\n        String membersAsString = \"\";\n\n        for (Person member : this.members) {\n            membersAsString += \"  \" + member + \"\\n\";\n        }\n\n        return \"Clinic:\\n \" + this.name + \" (\" + this.lowestWeightIndex +  \") \" + \"  \\n members: \\n\" + membersAsString;\n    }\n\n    //getters and setters\n    public double getLowestWeightIndex() {\n        return lowestWeightIndex;\n    }\n\n    public void setLowestWeightIndex(double lowestWeightIndex) {\n        this.lowestWeightIndex = lowestWeightIndex;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public ArrayList<Person> getMembers() {\n        return members;\n    }\n\n    public void setMembers(ArrayList<Person> members) {\n        this.members = members;\n    }\n\n}\n\n\n\n\n\n\n\n\n  Lab#SE00-1: Maven Person \n\n\n\n  top \n\n\n\n Lab#SE00-3: Library Model"
  },
  {
    "objectID": "javase/selab0-3.html",
    "href": "javase/selab0-3.html",
    "title": "Lab#SE00-3: Library Model",
    "section": "",
    "text": "📘 Linux Lab#SE00-3: Library Model\n\nCreate two new feature for a library management system:\n\nto track the library’s inventory of periodicals such as newspapers, newsletters, and magazines.\nthat allows the librarian to add, remove, and update the periodicals in the inventory, and also show all the periodicals in the inventory.\n\nCreate five new classes: Periodical, Newspaper, Newsletter, Magazine, and Edition.\n\nIn the Periodical class, define fields such as title, publisher, publicationDate and methods such as getTitle(), getPublisher(), getPublicationDate()\nIn the Newspaper class, define fields such as edition, section and methods such as getEdition(), getSection() and also inherit fields and methods from the Periodical class.\nIn the Newsletter class, define fields such as frequency and methods such as getFrequency() and also inherit fields and methods from the Periodical class.\nIn the Magazine class, define fields such as category and methods such as getCategory() and also inherit fields and methods from the Periodical class.\nIn the Edition class, define fields such as issueNumber, volume and methods such as getIssueNumber(), getVolume()\n\nDefine the relationships between the classes, such as inheritance, composition, and use.\n\nThe Newspaper, Newsletter, and Magazine classes inherit fields and methods from the Periodical class. The Periodical class **uses** the Edition class."
  },
  {
    "objectID": "javase/selab0-3.html#basic-uml",
    "href": "javase/selab0-3.html#basic-uml",
    "title": "Lab#SE00-3: Library Model",
    "section": "1 Basic UML",
    "text": "1 Basic UML\nThis Mermaid class diagram describes the classes and their relationships in a library management system.\nIt shows the classes involved in the process of a library member checking out a book and a librarian helping him.\n\nThe Member class has a method checkOutPublication() which represents the action of a library member checking out a book.\n\nThe Borrow class is associated with the Member class, it has fields such as fromDate, toDate and borrowStatus which describes the borrowing time and the borrow status.\n\nThe Librarian class has a method addPublication(), removePublication(), holdPublication() which represents the action of a librarian adding, removing and holding a publication.\n\nThe Issue class is associated with the Librarian class, it has fields such as publishDate, unpublishDate and manageDate and issueStatus which describes the publishing and unpublishing of the publication.\n\n\n\n\n\n\n\nclassDiagram\n\nclass Publication {\n  -title: String\n  -year: int\n  -author: String\n  -statusPublication: enum\n}\n\nclass Borrow {\n    +fromDate\n    +toDate\n    +borrowStatus\n}\n\nclass Issue {\n    +publishDate\n    +unpublishDate\n    +manageDate\n    -issueStatus\n}\n\nclass Member {\n    -idMember: String\n    +checkOutPublication()\n    +returnPublication()\n    +holdOnPublication()\n}\n\nclass Librarian {\n    -idLibrarian\n    +addPublication()\n    +removePublication()\n    +holdPublication\n  \n}\n\nclass Person {\n    -name: String\n    -surname: String\n    -address: String\n    -age:int\n    +getPublications()\n}\n\nPerson --> Member\nPerson --> Librarian\nMember --> Borrow\nBorrow --> Publication\nLibrarian --> Issue\nIssue --> Publication\n\n\n\n\n\n\n\n\n\n\n\nThe Publication class is the superclass for all types of publications, it has fields such as title, year, author, statusPublication which represents the properties of the book.\nIn summary in this class diagram:\n\nthe Member class is checking out a book: the Borrow class helps to the member class,** it keeps track of the borrowing time and the borrow status.**\nthe Librarian class is helping the member by adding, removing and holding a publication: the Issue class is associated with the librarian class, it keeps track of the publishing and unpublishing of the publication\nthe Publication class is the superclass for all types of publications, it has properties such as title, year, author, statusPublication."
  },
  {
    "objectID": "javase/selab0-3.html#large-uml",
    "href": "javase/selab0-3.html#large-uml",
    "title": "Lab#SE00-3: Library Model",
    "section": "2 Large UML",
    "text": "2 Large UML\nThis mermaid UML is a class diagram that describes the classes and their relationships in a library management system.\nThe Interface class represents the user interface that allows the user to manage the library, search for publications, check out and check in publications, add, remove and update publications.\n\nThe Publication class is the superclass for all types of publications, which includes:\n\nBook, Journal, Magazine, ReferenceBook, HandBook, and Movie.\n\nBook class has a method getAuthor() and getISBN(),\nJournal class has getISSN() and getAuthors(),\nMagazine class has getIssue() and getAuthors(),\nReferenceBook class has getEdition() and getAuthors(),\nHandBook class has getSubject() and getAuthors(),\nMovie class has getDirector(), getReleaseDate() and getAuthors().\n\n\nThe Borrow class has properties fromDate, toDate and borrowStatus which describes the borrowing time and the borrow status.\nThe Issue class has methods publish, unpublish and manage which describes the management of the publications.\nThe Person class is the superclass for Author, Member, and Librarian.\n\nThe Author class has getBooks() method,\nMember class has getBorrowings() method,\nLibrarian class has add(), remove(), and getPublications() method.\nThe Student class has getID() method,\nTeacher class has getDepartment() method,\nFaculty class has getPosition() method.\n\n\n\n\n\nLibrary System Mananger\n\n\n\n\nPerson.java\n\nclassDiagram\nclass Interface {\n  +manage()\n  +search()\n  +checkOut()\n  +checkIn()\n  +add()\n  +remove()\n  +update()\n}\n\nclass Publication {\n  +getTitle()\n  +getPublisher()\n  +getPublicationDate()\n}\n\nclass Book {\n  +getAuthor()\n  +getISBN()\n}\n\nclass Journal {\n  +getISSN()\n  +getAuthors()\n}\n\nclass Magazine {\n  +getIssue()\n  +getAuthors()\n}\n\nclass ReferenceBook {\n  +getEdition()\n  +getAuthors()\n}\n\n\nclass HandBook {\n  +getSubject()\n  +getAuthors()\n}\n\nclass Movie {\n  +getDirector()\n  +getReleaseDate()\n  +getAuthors()\n}\n\nclass Borrow {\n    +fromDate\n    +toDate\n    +borrowStatus\n}\n\nclass Issue {\n    +publish\n    +unpublish\n    +manage\n}\n\nclass Person {\n  +getName()\n}\n\nclass Author {\n  +getBooks()\n}\n\nclass Member {\n  +getBorrowings()\n}\n\nclass Librarian {\n  +add()\n  +remove()\n  +getPublications()\n}\n\nclass Student {\n  +getID()\n}\n\nclass Teacher {\n  +getDepartment()\n}\n\nclass Faculty {\n  +getPosition()\n}\n\nclass Catalog {\n  \n}\n\nCatalog --> Publication\nPublication --> Book\nPublication --> Journal\nPublication --> Magazine\nPublication --> ReferenceBook\nPublication --> HandBook\nPublication --> Movie\nPerson --> Author\nPerson --> Member\nPerson --> Librarian\nMember --> Student\nMember --> Teacher\nMember --> Faculty\nPublication --> Author\nMember --> Borrow\nBorrow --> Publication\nLibrarian --> Issue\nIssue --> Publication\n\n\n\n\n\n\n  Lab#SE00-2: Maven Clinic \n\n\n\n  top \n\n\n\n Lab#SE00-4: Abstract/Interface Human"
  },
  {
    "objectID": "javase/selab0-4.html",
    "href": "javase/selab0-4.html",
    "title": "Lab#SE00-4: Abstract/Interface Human",
    "section": "",
    "text": "📘 Linux Lab#SE00-4: Abstract/Interface Human\n\nImplement this UML and its classes.\nCreate a @Test and a method for each class:\n\nPerson\nAnimal\nTeacher\nStudent\nDog\nCat"
  },
  {
    "objectID": "javase/selab0-4.html#basic-uml",
    "href": "javase/selab0-4.html#basic-uml",
    "title": "Lab#SE00-4: Abstract/Interface Human",
    "section": "1 Basic UML",
    "text": "1 Basic UML\nThe interfaces HumanAction and Action define a set of methods or properties that classes must implement.\nThe class Person implements both interfaces and provides implementation for the methods defined in both HumanAction and Action.\nAnimal class implements Action interface and provides its own implementation for the methods defined in the interface.\n\n\n\nUML to code\n\n\n\n\nHere is an example of a UML diagram that shows the relationship between the interfaces HumanAction and Action and the classes Person, Teacher, Student, Animal, Dog and Cat.\n\nThis UML diagram illustrates that the classes Person, Teacher, Student, Animals, Dog, Cat all implement the methods defined in HumanAction and Action\n\nIt also show the Inheritance relationship between classes and implementation relationship between classes and interfaces.\n\n\nTeacher and Student classes inherit from Person class and add their own specific behavior/ methods.\nDog and Cat classes inherit from Animal class and add their own specific behavior/ methods.\n\n\n\n\n\n  Lab#SE00-3: Library Model \n\n\n\n  top \n\n\n\n Lab#SE01-1: Maven/Gradle Person and Account"
  },
  {
    "objectID": "javase/selab1-1.html",
    "href": "javase/selab1-1.html",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "",
    "text": "Create a Maven/Gradle Java SE Project with three classes and Junit to test objects and operations.\n\n\n\n\n\n\nContext Goal Tasks Optional\n\n\n\n\n\n\nIn order to complete this project, you will need to have a basic understanding of the Java programming language, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\n\n\nOverall, this project will provide an opportunity for you to learn and apply the basics of Java programming, as well as gain experience with Maven or Gradle, JUnit, user input via the console and some discussion about composition and how classes work.\n\n\nAdditionally, you will need to have in mind that this project would center around a banking point of view.\n\n\nBy completing this project, you will have a starting foundation in these technologies and be able to build more complex and sophisticated Java applications in the future. You may go to Lab 2 (go Lab#SE01-2)\n\n\n\n\n\n\nThe goal of this project is to create three classes in Java (Person, Account and Manager) that implement different algorithms or data structures, and to test them using JUnit.  These classes could include, for example, creating new objects, a data structure for storing and manipulating data (List), or a utility class for performing common operations (static).\n\n\n\n\n\n\nThe tasks involved in this project include: \n\n\nDecide where your project will weight: Person or Account.\n\n\nCreating a new Maven or Gradle project and setting up the project structure.\n\n\nModifying the project’s pom.xml or build.gradle file to import the necessary dependencies, including JUnit for testing.\n\n\nImplementing the three required classes in Java, using appropriate algorithms and data structures.\n\n\nImplementing as well two basic pattern-designs: singleton and composition.\n\n\nWriting JUnit tests to verify that the classes work as expected.\n\n\n\nYou may attach the JUnit Test HTML results to documentation.\n\n\n\n\n\n\n\nAs an optional task, you could also consider allowing the user to input data via the console, rather than using hard-coded test data in your JUnit tests.  This would allow you to test the classes with a variety of different input data, and to interact with the classes in a more dynamic way.\n\n\nAfter mplementing two basic pattern-designs: singleton, composition your may think about factory."
  },
  {
    "objectID": "javase/selab1-1.html#solving-discussion",
    "href": "javase/selab1-1.html#solving-discussion",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "2 Solving discussion",
    "text": "2 Solving discussion\n\n2.1 Base Classes\nHere, the Person class represents a person with a name, address and others. In the same way, Account class is a bank account. The AccountManager class contains static methods to perform withdrawal, transfer, and change pin operations on a Person and Account object.\npublic class Person {\n  private String name;\n  private String address;\n  // Other properties for a Person...\n\n  public Person(String name, String address) {\n    this.name = name;\n    this.address = address;\n  }\n\n  // Getters and setters for Person properties...\n}\n\n\npublic class Account {\n  private String accountNumber;\n  private String pin;\n  private double balance;\n  // Other properties for an Account...\n\n  public Account(String accountNumber, String pin, double balance) {\n    this.accountNumber = accountNumber;\n    this.pin = pin;\n    this.balance = balance;\n  }\n\n  // Getters and setters for Account properties...\n}\n\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount > 0 && amount <= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount > 0 && amount <= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n2.2 Person has Account\npublic class Person {\n  private String name;\n  private String surname;\n  private int age;\n  private Account account;\n\n  public Person(String name, String surname, int age, Account account) {\n    this.name = name;\n    this.surname = surname;\n    this.age = age;\n    this.account = account;\n  }\n\n  public Account getAccount() {\n    return this.account;\n  }\n\n  public void setAccount(Account account) {\n    this.account = account;\n  }\n   // Getters and setters for Account properties...\n}\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n  -account: Account\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n}\n\nPerson *-- Account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n\nparticipant AccountManager as AccountManager\nparticipant Account as Account\nparticipant Person as Person\n\nAccountManager->>Person: transfer(amount, sender, receiver)\nPerson->>Account: updateBalance(-amount, sender)\nPerson->>Account: updateBalance(-amount, receiver)\nAccount-->>Person: transferDone(receipt)\nPerson-->>AccountManager: transferDone(receipt)\n\n\n\n\n\n\n\n\n\n\n\n\n2.3 Approach #1: Singleton\nTo use the Singleton design pattern with a Person and Account class, you could create a singleton AccountManager class that manages the creation and operations of the Person and Account objects.\nThe AccountManager class would have a private constructor, to prevent multiple instances from being created, and a static getInstance method that returns the singleton instance of the class.\nThe AccountManager class would then have methods for performing various operations on the Person and Account objects, such as transferring money between accounts, withdrawing money from an account, or changing the PIN for an account.\nThese methods would be implemented using the Person and Account classes, and would be accessible to other classes through the singleton AccountManager instance.\nFor example, you could define the AccountManager, Person, and Account classes as follows:\npublic class AccountManager {\n  private static AccountManager instance;\n  private Person person;\n  private Account account;\n\n  private AccountManager() {\n    // Private constructor to prevent multiple instances\n  }\n\n  public static AccountManager getInstance() {\n    if (instance == null) {\n      instance = new AccountManager();\n    }\n    return instance;\n  }\n\n  public void transfer(Account from, Account to, double amount) {\n    // Transfer money from one account to another\n  }\n\n  public void withdraw(Account account, double amount) {\n    // Withdraw money from an account\n  }\n\n  public void changePin(Account account, String newPin) {\n    // Change the PIN for an account\n  }\n\n  // Other methods for managing Person and Account objects...\n}\nTo use the AccountManager class, other classes would simply need to call the getInstance method to obtain the singleton instance of the class, and then use the instance’s methods to perform operations on the Person and Account objects. For example:\n// Create a new Person and Account\n// be careful: where will these four Person objects go? \nAccountManager manager = AccountManager.getInstance();\nmanager.person = new Person(\"John Doe\", \"123 Main St.\");\nmanager.person = new Person(\"Carla Jameson\", \"323 Main St.\");\nmanager.person = new Person(\"Rafael Martin\", \"3 Glorious St.\");\nmanager.person = new Person(\"Pau Vila\", \"63 Sesamo St.\");\nBut maybe, this is not the best approach for several reasons …\n\n\n2.4 Approach #2: all static-methods AccountManager\nIt may work as follows. In fact, if we want to manage accounts (as a banking-centered problem, not a person-centered one), it could be better that Account has Person:\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n  -person: Person\n}\n\nAccount *-- Person\n\n\n\n\n\n\n\n\n\n\npublic class Account {\n  private Person person;\n  //other fields\n\n  public Account(Person person) {\n    this.person = person;\n  }\n\n  public Person getPerson() {\n    return this.person;\n  }\n\n  public void setPerson(Person person) {\n    this.person = person;\n    \n    //constructor, getters, setters and methods\n  }\n}\nSo, in this case, we could use a List object to save all the Account objects with the list:\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class AccountManager {\n  private List<Account> accounts;\n\n  private AccountManager() {\n    this.accounts = new ArrayList<>();\n  }\n\n  public List<Account> getAccounts() {\n    return this.accounts;\n  }\n\n  // we should manage how to add/remove accounts to/from accounts list\n\n  public static void deposit(Account account, double amount) {\n    // Code to deposit the specified amount to the account\n  }\n\n  public static void changePin(Account account, int newPin) {\n    // Code to change the PIN of the specified account\n  }\n\n  public static void transfer(Account fromAccount, Account toAccount, double amount) {\n    // Code to transfer the specified amount from the fromAccount to the toAccount\n  }\n  \n  public static void withdrawal(Account account, double amount) {\n    // Code to withdraw the specified amount from the given account\n  }\n}\n\n\n2.5 Approach 3: Singleton, any static-method\nIn this approach:\n\nAccount has Person\nAccountManager is Singleton and there is no static-methods anywhere\nand we create just one object form AccountManager to manage accounts\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class AccountManager {\n  private static AccountManager manager = new AccountManager();\n  private List<Account> accounts;\n\n  // we should manage how to add/remove accounts to/from accounts list\n\n  private AccountManager() {\n    this.accounts = new ArrayList<>();\n  }\n\n  public static AccountManager getInstance() {\n    return manager;\n  }\n\n  public List<Account> getAccounts() {\n    return this.accounts;\n  }\n\n  public  void deposit(Account account, double amount) {\n    // Code to deposit the specified amount to the account\n  }\n\n  public  void changePin(Account account, int newPin) {\n    // Code to change the PIN of the specified account\n  }\n\n  public  void transfer(Account fromAccount, Account toAccount, double amount) {\n    // Code to transfer the specified amount from the fromAccount to the toAccount\n  }\n  \n  public  void withdrawal(Account account, double amount) {\n    // Code to withdraw the specified amount from the given account\n  }\n}\n\n\n2.6 Test: AccountManagerTest\nAccountManagerTest could be like this:\n\nwith AccountManager all static-methods no-singleton\nAccount has Person\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccountManagerTest {\n  @Test\n  public void testDeposit() {\n    Account account = new Account(new Person(\"John Doe\"));\n    double initialBalance = account.getBalance();\n    double depositAmount = 100.00;\n\n    AccountManager.deposit(account, depositAmount);\n    double finalBalance = account.getBalance();\n\n    assertEquals(initialBalance + depositAmount, finalBalance);\n  }\n\n  @Test\n  public void testChangePin() {\n    Account account = new Account(new Person(\"John Doe\"));\n    int initialPin = account.getPin();\n    int newPin = 1234;\n\n    AccountManager.changePin(account, newPin);\n    int finalPin = account.getPin();\n\n    assertEquals(newPin, finalPin);\n  }\n\n  @Test\n  public void testTransfer() {\n    Account fromAccount = new Account(new Person(\"John Doe\"));\n    Account toAccount = new Account(new Person(\"Jane Doe\"));\n    double initialFromAccountBalance = fromAccount.getBalance();\n    double initialToAccountBalance = toAccount.getBalance();\n    double transferAmount = 100.00;\n\n    AccountManager.transfer(fromAccount, toAccount, transferAmount);\n    double finalFromAccountBalance = fromAccount.getBalance();\n    double finalToAccountBalance = toAccount.getBalance();\n\n    assertEquals(initialFromAccountBalance - transferAmount, finalFromAccountBalance);\n    assertEquals(initialToAccountBalance + transferAmount, finalToAccountBalance);\n  }\n  \n  @Test\n  public void testWithdrawal() {\n    Account fromAccount = new Account(new Person(\"John Doe\"));\n    Account toAccount = new Account(new Person(\"Jane Doe\"));\n    double initialFromAccountBalance = fromAccount.getBalance();\n    double withdrawalAmount = 100.00;\n\n    AccountManager.withdrawal(fromAccount, withdrawalAmount);\n    double finalFromAccountBalance = fromAccount.getBalance();\n\n    assertEquals(initialFromAccountBalance - withdrawalAmount, finalFromAccountBalance);\n  }\n}"
  },
  {
    "objectID": "javase/selab1-1.html#step-by-step",
    "href": "javase/selab1-1.html#step-by-step",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "3 Step-by-step",
    "text": "3 Step-by-step\n\nCreate Maven Project with JUnit\nCreate Person class\nCreate Account class\nTest Person and Account objects\nWrite operations (withdrawal, transfer,change pin) as a static methods in AccountManager\nTest Person and Account objects and features\nAdd singleton pattern to AccountManager class\nTest AccountManager class\n\n\n\n\n\n\n  Lab#SE00-4: Abstract/Interface Human \n\n\n\n  top \n\n\n\n Lab#SE01-2: Maven/Gradle Person and Account stored in JSON"
  },
  {
    "objectID": "javase/selab1-2.html",
    "href": "javase/selab1-2.html",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "",
    "text": "Create a Maven/Gradle Java SE Project with three classes and Junit to test objects and operations. From here you should add new features: factory pattern, JSON parser and save this JSON on local storage."
  },
  {
    "objectID": "javase/selab1-2.html#solving-discussion",
    "href": "javase/selab1-2.html#solving-discussion",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "1 Solving discussion",
    "text": "1 Solving discussion\n\n1.1 Base Classes: factory\nHere is an example of how you could create a Lombok Java class for a Person and Account using the factory pattern:\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Person {\n    private String firstName;\n    private String lastName;\n}\n\npublic interface Account {\n    void deposit(double amount);\n    void withdraw(double amount);\n}\n\n\npublic class SavingsAccount implements Account {\n    private double balance;\n\n    public SavingsAccount(double balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        this.balance -= amount;\n    }\n}\n\npublic class CheckingAccount implements Account {\n    private double balance;\n\n    public CheckingAccount(double balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        this.balance -= amount;\n    }\n}\n\npublic class AccountManager {\n    public static Account createAccount(String accountType, double balance) {\n        if (accountType.equalsIgnoreCase(\"savings\")) {\n            return new SavingsAccount(balance);\n        } else if (accountType.equalsIgnoreCase(\"checking\")) {\n            return new CheckingAccount(balance);\n        }\n        return null;\n    }\n}\nYou can then use these classes as follows:\nPerson john = new Person(\"John\", \"Doe\");\nAccount savingsAccount = AccountManager.createAccount(\"savings\", 100.00);\nAccount checkingAccount = AccountManager.createAccount(\"checking\", 50.00);\nThe AccountManager class uses the factory pattern to create Account objects based on the specified accountType. This allows you to create different types of accounts without having to specify the exact class to use, and makes it easier to add new types of accounts in the future.\n\n\n1.2 Base Classes: local storage-JSON\nHere is an example of what a Lombok-based Person class and Account class might look like in Java:\nimport lombok.Data;\n\n@Data\npublic class Person {\n  private String name;\n  private int age;\n  private String address;\n}\n\n@Data\npublic class Account {\n  private int accountNumber;\n  private double balance;\n  private Person owner;\n}\nThe @Data annotation is a **Lombok* annotation that automatically generates getters and setters for all non-static fields, as well as equals(), hashCode(), and toString() methods. This can help reduce boilerplate code and make your classes more concise and readable.\nTo save data to a local JSON file, you could use a JSON library like Jackson to convert the objects to JSON strings, and then write those strings to a file. Here is an example of how you might do that:\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class AccountManager {\n  private ObjectMapper objectMapper = new ObjectMapper();\n\n  public void saveAccount(Account account) throws JsonProcessingException {\n    String json = objectMapper.writeValueAsString(account);\n    // write the JSON string to a file\n  }\n}\nHow to save an object as a JSON string to a file on your local storage (in this case, c:/data/accounts.json) using Java SE:\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class AccountManager {\n  private ObjectMapper objectMapper = new ObjectMapper();\n\n  public void saveAccount(Account account) throws JsonProcessingException, IOException {\n    String json = objectMapper.writeValueAsString(account);\n\n    FileWriter fileWriter = new FileWriter(\"c:/data/accounts.json\");\n    fileWriter.write(json);\n    fileWriter.close();\n  }\n}"
  },
  {
    "objectID": "javase/selab1-2.html#step-by-step",
    "href": "javase/selab1-2.html#step-by-step",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "2 Step-by-step",
    "text": "2 Step-by-step\n\nCreate interface Account\nCreate subclasses SavingsAccount and CheckingAccount\nCreate AccountManger\nCheck factory\nParse Account objects to String-JSON\nSave String on local .json file\n\n\n\n\n\n\n  Lab#SE01-1: Maven/Gradle Person and Account \n\n\n\n  top \n\n\n\n Lab#SE02-1: Movie/Review, Model"
  },
  {
    "objectID": "javase/selab2-1.html",
    "href": "javase/selab2-1.html",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "",
    "text": "📘 Linux Lab#SE02-1: Movie Review and Rating\n\nCreate a Maven/Gradle Java SE Project.\nAdd the needed dependencies:\n\nLombok\nJunit\nJava Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\nMovie: The Movie class represents a movie that is being reviewed. It has the following attributes:\n\ntitle: a String representing the title of the movie\nreviews: a Set of Review objects representing the reviews that have been written for this movie\nCritic: The Critic class represents a critic who writes reviews.\n\nThe Critic class has the following attributes:\n\nname: a String representing the name of the critic\nReview: The Review class represents a review of a movie written by a critic.\n\nThe Review class has the following attributes:\n\nmovie: a Movie object representing the movie being reviewed\ncritic: a Critic object representing the critic who wrote the review\nrating: an int representing the rating given by the critic (on a scale of 1 to 5)\ncomment: a String representing the comment written by the critic about the movie\n\n\nWith Junit dependency create unitary test to test objects and operations.\nFrom here you should add new features once all the test are passed.\n\nOperations, you could think in a Manager Class o similar\nNew fields/attributes and new classes\nNew compositions and inherence: expand your model\nUse Factory design pattern to create new objects"
  },
  {
    "objectID": "javase/selab2-1.html#core-classes-and-dependencies",
    "href": "javase/selab2-1.html#core-classes-and-dependencies",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "1 Core classes and dependencies",
    "text": "1 Core classes and dependencies\nYou could then use these classes as follows:\n\n\nmoviemodel.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Movie {\n  private String title;\n  private int year;\n  private Filmmaker filmmaker;\n  private Set<Actor> crew;\n  private Set<Review> reviews;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Critic {\n  private String name;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Actor {\n  private String name;\n}\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Filmmaker {\n  private String name;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Review {\n  private Movie movie;\n  private Critic critic;\n  private int rating;\n  private String comment;\n}\n\n\n1.1 Dependency: Lombok\nUse Lombok, link:\n\nThe @Data annotation is a Lombok annotation that generates getters and setters for the fields of a class, as well as equals, hashCode, and toString methods based on the fields.\nThe @AllArgsConstructor annotation is a Lombok annotation that generates a constructor with all of the class’s fields as arguments.\nThe @NoArgsConstructor annotation is a Lombok annotation that generates a no-argument constructor for a class.\n\n@Data All together now: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, @Setter on all non-final fields, and @RequiredArgsConstructor.\nAdding lombok to your pom file: to include lombok as a provided dependency, add it to your In your Java code: block like so:\n\n\npom.xml\n\n<dependencies>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <version>1.18.24</version>\n        <scope>provided</scope>\n    </dependency>\n</dependencies>\n\n\n\n1.2 Dependency: Java Faker\nUse Java Faker:\nIn pom.xml, add the following xml dependency between  … \n\n\npom.xml\n\n<dependencies>\n  <dependency>\n      <groupId>com.github.javafaker</groupId>\n      <artifactId>javafaker</artifactId>\n      <version>1.0.2</version>\n  </dependency>\n</dependencies>\n\nIn your Java code:\n\n\ntestfaker.java\n\nimport com.github.javafaker.Faker;\nimport org.junit.jupiter.api.Test;\n\nFaker faker = new Faker();\n\nString name = faker.name().fullName(); // Miss Samanta Schmidt\nString firstName = faker.name().firstName(); // Emory\nString lastName = faker.name().lastName(); // Barton\n\nString streetAddress = faker.address().streetAddress(); // 60018 Sawayn Brooks Suite 449\n\n\n\n1.3 Dependency: JUnit 5\nTo configure support for JUnit Jupiter based tests, configure test scoped dependencies on the JUnit Jupiter API and the JUnit Jupiter TestEngine implementation similar to the following.\nmore on Java SE TDD\n\n\npom.xml\n\n<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-engine</artifactId>\n      <version>5.9.1</version>\n      <scope>test</scope>\n    </dependency>"
  },
  {
    "objectID": "javase/selab2-1.html#solving-discussion",
    "href": "javase/selab2-1.html#solving-discussion",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "2 Solving discussion",
    "text": "2 Solving discussion\n\n2.1 UMLs\nThis first UML diagram for the Movie class represents a design where a movie has many critics, and a critic has many reviews of movies.\nThis is reflected in the multiplicity of the associations between the classes: the Movie class has a many multiplicity with the Critic class, indicating that a movie can have zero or more critics, and the Critic class has a many multiplicity with the Review class, indicating that a critic can have zero or more reviews.\n\n\n\n\n\nclassDiagram\n  class Movie {\n    -title: String\n    -critics: Set<Critic>\n  }\n  class Critic {\n    -name: String\n    -reviews: Set<Review>\n  }\n  class Review {\n    -movie: Movie\n    -critic: Critic\n    -rating: int\n    -comment: String\n  }\n  Movie *-- Critic\n  Critic *-- Review\n  Review o-- Movie\n\n\n\n\n\n\n\n\n\n\nThis second UML diagram for the Movie class represents a design where a movie has many reviews, and each review is written by a critic.\nThis is reflected in the multiplicity of the associations between the classes: the Movie class has a many multiplicity with the Review class, indicating that a movie can have zero or more reviews, and the Review class has a 1 multiplicity with the Critic class, indicating that a review is written by exactly one critic.\n\n\n\n\n\nclassDiagram\n  class Movie {\n    -title: String\n    -reviews: Set<Review>\n  }\n  class Critic {\n    -name: String\n  }\n  class Review {\n    -movie: Movie\n    -critic: Critic\n    -rating: int\n    -comment: String\n  }\n  Movie *-- Review\n  Review o-- Critic\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2 Basic tests\n\n\nGeneraltest.java\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport com.github.javafaker.Faker;\nimport org.junit.jupiter.api.Test;\n\n@Test\npublic void testCreateMovie() {\n  // create a movie\n  Movie movie = new Movie(\"The Shawshank Redemption\");\n  \n  // check that the movie was created correctly\n  assertEquals(\"The Shawshank Redemption\", movie.getTitle());\n  assertNotNull(movie.getReviews());\n  assertTrue(movie.getReviews().isEmpty());\n}\n\n@Test\npublic void testCreateCritic() {\n  // create a critic\n  Critic critic = new Critic(\"Roger Ebert\");\n  pom.xmlte a movie and a critic\n  Movie movie = new Movie(\"The Shawshank Redemption\");\n  Critic critic = new Critic(\"Roger Ebert\");\n  \n  // create a review\n  Review review = new Review(movie, critic, 5, \"One of the greatest films ever made\");\n  \n  // check that the review was created correctly\n  assertEquals(movie, review.getMovie());\n  assertEquals(critic, review.getCritic());\n  assertEquals(5, review.getRating());\n  assertEquals(\"One of the greatest films ever made\", review.getComment());\n}\n\n\n\n2.3 Create a superclass Person\nThe Critic, Filmmaker, and Actor classes all extend the Person class, meaning they inherit its fields and methods. In addition, they each have their own field:\n\nThe Critic class has a reviews field, a Set of Review objects representing the reviews written by the critic.\nThe Filmmaker class has a movies field, a Set of Movie objects representing the movies made by the filmmaker.\nThe Actor class has a movies field, a Set of Movie objects representing the movies in which the actor has appeared.\n\n\n\npersonmodel.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Person {\n  private String name;\n  private Date birthDate;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Critic extends Person {\n  private Set<Review> reviews;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Filmmaker extends Person {\n  private Set<Movie> movies;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Actor extends Person {\n  private Set<Movie> movies;\n}\n\n\n\n\n\n\n\nclassDiagram\n\n  class Person {\n    -name: String\n    -birthDate: Date\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\n  class Critic extends Person {\n    -reviews: Set<Review>\n  }\n\n  class Filmmaker extends Person {\n    -movies: Set<Movie>\n  }\n\n  class Actor extends Person {\n    -movies: Set<Movie>\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\n\n  class Person {\n    -name: String\n    -birthDate: Date\n  }\n\n  Person <|-- Critic\n  Person <|-- Filmmaker\n  Person <|-- Actor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Lab#SE01-2: Maven/Gradle Person and Account stored in JSON \n\n\n\n  top \n\n\n\n Lab#SE02-2: Movie/Review, CRUD Operations"
  },
  {
    "objectID": "javase/selab2-2.html",
    "href": "javase/selab2-2.html",
    "title": "Lab#SE02-2: Movie/Review, CRUD Operations",
    "section": "",
    "text": "📘 Linux Lab#LI02-2: Opearations\n\nCreate Java Class MovieManager to manage all movie objects created.\nJava Class MovieManager could work like this:\n\nEvery time a movie object is created, it could be saved within a data structure:\n\nArrayList or List\nSet or similar\nHashMap or Map\n\nThe Java Class MovieManager could perfom all CRUD operations.\nBesides, it colud save data as String to JSON or CSV as local file."
  },
  {
    "objectID": "javase/selab2-2.html#core-classes",
    "href": "javase/selab2-2.html#core-classes",
    "title": "Lab#SE02-2: Movie/Review, CRUD Operations",
    "section": "1 Core classes",
    "text": "1 Core classes\nYou could then use these:\n\n\nMovie.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths; classes as follows:\n\npublic class Movie{\n    private String title;\n    private String director;\n    private String genre;\n    private double size// movie size\n\n    //constructor , getters and setters\n    //lombok\n    @Override\n    public double getSize(){\n        return this.size;\n    }\n}\n\n\n\nMovieManager.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class MovieManager {\n    private int qty;\n    private double size;\n    private HashMap<String, Movie> movies;\n    private Date lastModified;\n\n    public MovieManager() {\n        this.qty = 0;\n        this.size = 0;\n        this.movies = new HashMap<>();\n        this.lastModified = new Date();\n    }\n\n    public void addMovie(Movie movie) {\n        this.movies.put(movie.getTitle(), movie);\n        this.qty++;\n        this.size += movie.getSize();\n        this.lastModified = new Date();\n    }\n\n    public void updateMovie(String title, Movie movie) {\n        this.movies.replace(title, movie);\n        this.lastModified = new Date();\n    }\n\n    public void deleteMovie(String title) {\n        Movie movie = this.movies.get(title);\n        this.movies.remove(title);\n        this.qty--;\n        this.size -= movie.getSize();\n        this.lastModified = new Date();\n    }\n\n    public Movie getMovie(String title) {\n        return this.movies.get(title);\n    }\n}"
  },
  {
    "objectID": "javase/selab2-2.html#solving-discussion",
    "href": "javase/selab2-2.html#solving-discussion",
    "title": "Lab#SE02-2: Movie/Review, CRUD Operations",
    "section": "2 Solving discussion",
    "text": "2 Solving discussion\n\n2.1 MovieManager uses Movie\nLet’s grow our code of the MovieManager class by adding two methods: saveToCSV() and deleteCSV().\nThe saveToCSV() method is used to save the movie data stored in the movies HashMap field of the MovieManager class to a CSV (Comma Separated Values) file named movies.csv located in the same directory as the running program. It uses a FileWriter object to write the data to the file.\nThe deleteCSV() method is used to delete a CSV file named movies.csv located in the directory /home/devops/MyProjects/JavaSEProjects/MovieManager/resources/. It uses a File object to represent the file, and the delete() method of the File class to delete the file.\nIf the file is deleted successfully, it prints “File deleted successfully” message, otherwise it prints “Failed to delete the file” message.\n\n\nMovieManager.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class MovieManager {\n    private int qty;\n    private double size;\n    private HashMap<String, Movie> movies;\n    private Date lastModified;\n\n    public MovieManager() {\n       // ...\n    }\n\n    public void addMovie(Movie movie) {\n        // ...\n    }\n\n      public Movie getMovie(String title) {\n        // ...\n    }\n\n    // this is a mere idea, just a proposal to understand\n    // how it colud be done\n    // iterate the hashMap movies to get each movies\n    // to save file in Linxu\n    //  try (FileWriter writer = \n    // new FileWriter(\"/home/~/movies.csv\")\n    // )\n    public void saveToCSV() {\n        try (FileWriter writer = new FileWriter(\"movies.csv\")) {\n            for (Movie movie : this.movies.values()) {\n                writer.append(movie.getTitle());\n                writer.append(\",\");\n                writer.append(movie.getDirector());\n                writer.append(\",\");\n                writer.append(movie.getGenre());\n                writer.append(\"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void deleteCSV() {\n    File file = new File(\"/home/~/movies.csv\");\n      if(file.delete()){\n          System.out.println(\"File deleted successfully\");\n      }else{\n          System.out.println(\"Failed to delete the file\");\n      }\n    }\n}\n\n\n\nIt starts by creating a try-with-resources block, which automatically closes the FileWriter object when the block finishes executing. Then it loops through the values() of the movies HashMap, which gives an iterable collection of Movie objects.\n\nFor each Movie object, it appends the title, director and genre information separated by commas, and then a newline character. This creates a CSV file with each line representing a movie, in the format of: title,director,genre.\n\nIt’s worth noting that this code is just an example, and it will work correctly if the file exists at the specified location. If the file doesn’t exist, the delete method will return false and the message “Failed to delete the file” will be printed.\n\nAlso the path of csv file is hardcoded and it may change on different systems so it’s better to make it dynamic or keep it in configuration file.\n\n\n\nThis diagram shows that the MovieManager class uses the Movie class, and the arrow points from MovieManager to Movie.\nThis indicates that MovieManager class is dependent on Movie class and it uses it as a data structure.\n\n\n\n\n\nclassDiagram\n class MovieManager {\n    -int qty\n    -double size\n    -HashMap<String, Movie> movies\n    -Date lastModified\n    +addMovie(Movie movie)\n    +updateMovie(String title, Movie movie)\n    +deleteMovie(String title)\n    +getMovie(String title)\n    +saveToCSV()\n    }\n    class Movie{\n    +String title\n    +String director\n    +String genre\n    +double size\n    +getSize()\n    }\n\n    MovieManager --> Movie\n\n\n\n\n\n\n\n\n\n\n\n\n2.2 MovieManager static methods\nIn Java SE, methods can be either static or non-static.\nMaking a method static or non-static affects the way it can be called and how it accesses the fields and methods of a class.\n\n\nMovieManager.java\n\nimport java.util.HashMap;\nimport java.util.Date;\n\npublic class MovieManager {\n    private static HashMap<String, Movie> movies = new HashMap<>();\n    private static int qty = 0;\n    private static double size = 0;\n    private static Date lastModified = new Date();\n\n    public static void addMovie(String title, \n                                String director, String genre, double size) {\n        Movie movie = new Movie(title, director, genre, size);\n        movies.put(title, movie);\n        qty++;\n        size += movie.getSize();\n        lastModified = new Date();\n    }\n\n    public static void updateMovie(String title, \n                                   String director, String genre, double size) {\n        Movie movie = movies.get(title);\n        if (movie != null) {\n            movie.setDirector(director);\n            movie.setGenre(genre);\n            movie.setSize(size);\n            lastModified = new Date();\n        }\n    }\n\n    public static void deleteMovie(String title) {\n        if (movies.containsKey(title)) {\n            size -= movies.get(title).getSize();\n            movies.remove(title);\n            qty--;\n            lastModified = new Date();\n        }\n    }\n \n}"
  },
  {
    "objectID": "javase/selab2-2.html#static-vs.-non-static",
    "href": "javase/selab2-2.html#static-vs.-non-static",
    "title": "Lab#SE02-2: Movie/Review, CRUD Operations",
    "section": "3 static vs. non-static",
    "text": "3 static vs. non-static\n\n3.1 Pros & cons usage static methods\n\n\n\n\n\n\n\nPros of making a method static\nCons of making a method static\n\n\n\n\nCan be called directly on the class, without needing to create an instance\nCannot access non-static fields and methods of the class\n\n\nCan be used as utility methods that don’t depend on the state of an object\nCan only work with the parameters passed to it and not use information unique to each object or instance\n\n\nCan be used to access only static variables and methods, making it more efficient\nCan be challenging to make sure all instances of a class are modified consistently when using static methods\n\n\n\n\n\n3.2 Pros & cons usage non-static methods\n\n\n\n\n\n\n\nPros of making a method non-static\nCons of making a method non-static\n\n\n\n\nCan access both static and non-static fields and methods of the class, allowing it to use the state of an object to determine its behavior\nCan only be called on an instance of the class, so you need to create an object of a class before using the method\n\n\nAre associated with an instance of the class, so they can use the information that is unique to each object\nCan cause confusion when working with non-static methods because it could be called on different instances, which could cause unexpected behavior\n\n\nObject-oriented design principles promote the use of non-static methods because they can be overridden by subclasses to change their behavior\n\n\n\n\n\n\n\n\n\n  Lab#SE02-1: Movie/Review, Model \n\n\n\n  top \n\n\n\n Lab#SE02-3: Movie/Review, factory"
  },
  {
    "objectID": "javase/selab2-3.html",
    "href": "javase/selab2-3.html",
    "title": "Lab#SE02-3: Movie/Review, factory",
    "section": "",
    "text": "📘 Linux Lab#LI02-3: singleton and factory\nA singleton is a design pattern that ensures a class has only one instance and provides a global point of access to that instance.\n\nWe could modify the MovieManager class to implement the singleton pattern.\n\nA factory pattern is a design pattern that provides an interface for creating objects in a super class, but allows subclasses to alter the type of objects that will be created.\n\nWe could modify the MovieManager class to implement the factory pattern."
  },
  {
    "objectID": "javase/selab2-3.html#singleton",
    "href": "javase/selab2-3.html#singleton",
    "title": "Lab#SE02-3: Movie/Review, factory",
    "section": "1 Singleton",
    "text": "1 Singleton\nYou could then use these:\n\n\nMovieManager.java\n\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class MovieManager {\n    private static MovieManager instance = null;\n    private int qty;\n    private double size;\n    private HashMap<String, Movie> movies;\n    private Date lastModified;\n    \n    private MovieManager() {\n        this.qty = 0;\n        this.size = 0;\n        this.movies = new HashMap<>();\n        this.lastModified = new Date();\n    }\n\n    public static MovieManager getInstance() {\n        if (instance == null) {\n            instance = new MovieManager();\n        }\n        return instance;\n    }\n    //other class methods\n}\n\nIn this version of the class, the constructor is private, so it can only be called by the class itself.\nThe class also contains a static instance variable that holds the unique instance of the class, and a static getInstance() method that returns the instance.\nIf the instance doesn’t exist yet, it will be created, otherwise it will return the existing one.\n\n\ntest.java\n\n MovieManager manager = MovieManager.getInstance();\n\n manager.addMovie(new Movie(\"The Shawshank Redemption\",\"Frank Darabont\",\"Crime\"));\n manager.addMovie(new Movie(\"The Godfather\",\"Francis Ford Coppola\",\"Crime\"));\n manager.saveToCSV();\n\n\n\n\n\n\n\nNote\n\n\n\nKeep in mind that the Singleton pattern is useful when exactly one instance of a class is needed to control the action throughout the execution. However, it’s important to use singletons judiciously, as they can make your code more difficult to reason about and test if overused."
  },
  {
    "objectID": "javase/selab2-3.html#factory",
    "href": "javase/selab2-3.html#factory",
    "title": "Lab#SE02-3: Movie/Review, factory",
    "section": "2 Factory",
    "text": "2 Factory\n\n\nMovieManager.java\n\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class MovieManager {\n    private static MovieManager instance = null;\n    private int qty;\n    private double size;\n    private HashMap<String, Movie> movies;\n    private Date lastModified;\n    private MovieFactory movieFactory;\n    \n    private MovieManager() {\n        this.qty = 0;\n        this.size = 0;\n        this.movies = new HashMap<>();\n        this.lastModified = new Date();\n        this.movieFactory = new MovieFactory();\n    }\n\n    public static MovieManager getInstance() {\n        if (instance == null) {\n            instance = new MovieManager();\n        }\n        return instance;\n    }\n    public void addMovie(String title,\n                         String director, String genre, double size) {\n        Movie movie = movieFactory.createMovie(title, director, genre, size);\n        this.movies.put(title, movie);\n        this.qty++;\n        this.size += movie.getSize();\n        this.lastModified = new Date();\n    }\n    // other class methods\n}\n\n\n\nMovieFactory.java\n\ninterface MovieFactory {\n    Movie createMovie(String title,\n                      String director, String genre, double size);\n}\n\n\n\nDefaultMovieFactory.java\n\nclass DefaultMovieFactory implements MovieFactory {\n\n    @Override\n    public Movie createMovie(String title,\n                             String director, String genre, double size) {\n        return new Movie(title, director, genre, size);\n                             }\n}\n\nIn this version of the MovieManager class, a movieFactory field is added to the class, it is an instance of the MovieFactory interface. The MovieManager class has a new addMovie(String title, String director, String genre, double size) method that takes 4 parameters and it uses the movieFactory object to create a new Movie object with the provided parameters.\nThe MovieFactory interface defines a single method createMovie(String title, String director, String genre, double size) that creates a Movie object. The DefaultMovieFactory class is an implementation of this interface that creates the Movie objects by calling its constructor.\n\n\n\n\n\n\nImportant\n\n\n\nThe MovieManager uses the factory method createMovie() to create the movie objects rather than calling the constructor directly.\n\n\nThis way, if the implementation of how Movie objects are created needs to change in the future, only the DefaultMovieFactory class needs to be modified. The rest of the MovieManager class remains unchanged, so it provides flexibility to change the implementation in future.\n\n\n\n\n\n\nTip\n\n\n\nYou can also have other implementation of MovieFactory, say like a SecureMovieFactory to create secure movies or any other such implementation. This way you can change the way movie object is created in future without modifying the code of MovieManager\nIt is worth noting that this is a simple example of the factory pattern and it can be applied in many ways based on the requirements and use cases.\n\n\n\n\n\n\n\n  Lab#SE02-2: Movie/Review, CRUD Operations \n\n\n\n  top \n\n\n\n Lab#SE02-4: Movie/Review, interactivity and coupling"
  },
  {
    "objectID": "javase/selab2-4.html",
    "href": "javase/selab2-4.html",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "",
    "text": "📘 Linux Lab#LI02-4: interactivity and coupling\nAfter having a good approach with the labs done previously and from that point, having in mind the core-entity model and somemanagement/controller, let’s step up.\nAdd some interactivity through console with the user building on these new features and classes:\n\nImport class Scanner: Scanner scanner = new Scanner(System.in);\nA while (true) loop with the CRUD options would be a nice idea.\nWork as simple as possible, just 3 classes, let s try to understand the problem:\n\nMovieManager\nMovie and\nMovieController\n\nPropose some improvements.\nWhat about coupling? Is tight or loose coupled, this code?"
  },
  {
    "objectID": "javase/selab2-4.html#java-user-input-scanner",
    "href": "javase/selab2-4.html#java-user-input-scanner",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "1 Java User Input (Scanner)",
    "text": "1 Java User Input (Scanner)\nThe Scanner class is used to get user input, and it is found in the java.util package.\nTo use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation.\nScanner readerObject = new Scanner(System.in);  // Create a Scanner object\nString userName = readerObject.nextLine();  // Read user input\nIn the example above, we used the nextLine() method, which is used to read Strings. To read other types, look at the table below:\n\n\n\nInput Types"
  },
  {
    "objectID": "javase/selab2-4.html#birding",
    "href": "javase/selab2-4.html#birding",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "2 Birding",
    "text": "2 Birding\nBefore coding, study this very basic example and check how it could grow:\n\nFirst Version: Birding 1.0"
  },
  {
    "objectID": "javase/selab2-4.html#core-classes",
    "href": "javase/selab2-4.html#core-classes",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "3 Core classes",
    "text": "3 Core classes\nYou could then use these:\n\n\nMovieController.java\n\nimport java.util.Scanner;\n\npublic class MovieController {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            System.out.println(\"Please select an option:\");\n            System.out.println(\"1. Add a movie\");\n            System.out.println(\"2. Update a movie\");\n            System.out.println(\"3. Delete a movie\");\n            System.out.println(\"4. Get a movie by title\");\n            System.out.println(\"5. Exit\");\n            int option = scanner.nextInt();\n\n            if (option == 1) {\n\n              System.out.println(\"Enter the movie title:\");\n              String title = scanner.next();\n              System.out.println(\"Enter the movie director:\");\n              String director = scanner.next();\n              System.out.println(\"Enter the movie genre:\");\n              String genre = scanner.next();\n              System.out.println(\"Enter the movie size:\");\n              double size = scanner.nextDouble();\n\n              MovieManager.addMovie(title, director, genre, size);\n              System.out.println(\"Movie added successfully!\");\n\n            } else if (option == 2) {\n\n              System.out.println(\"Enter the movie title:\");\n              String title = scanner.next();\n              System.out.println(\"Enter the new movie director:\");\n              String director = scanner.next();\n              System.out.println(\"Enter the new movie genre:\");\n              String genre = scanner.next();\n              System.out.println(\"Enter the new movie size:\");\n              double size = scanner.nextDouble();\n\n              MovieManager.updateMovie(title, director, genre,size);\n              System.out.println(\"Movie updated successfully!\");\n\n            } else if (option == 3) {\n\n              System.out.println(\"Enter the movie title:\");\n              String title = scanner.next();\n\n              MovieManager.deleteMovie(title);\n              System.out.println(\"Movie deleted successfully!\");\n\n            } else if (option == 4) {\n\n              System.out.println(\"Enter the movie title:\");\n              String title = scanner.next();\n\n              Movie movie = MovieManager.getMovie(title);\n\n              if (movie != null) {\n                  \n                System.out.println(\"Title: \" + movie.getTitle());\n                System.out.println(\"Director: \" + movie.getDirector());\n                System.out.println(\"Genre: \" + movie.getGenre());\n                System.out.println(\"Size: \" + movie.getSize());\n              \n              } else { System.out.println(\"Movie not found!\");}\n\n            } else if (option == 5) {\n                break;\n            } else {\n                System.out.println(\"Invalid option!\");\n            }\n        }\n    scanner.close();\n    }\n}\n\nIn this diagram, the Movie class has the following properties: title, director, genre, and size, each with corresponding getters and setters. It also has a constructor that takes 4 parameters.\n\n\n\n\n\nclassDiagram\nclass Movie {\n  - title: String\n  - director: String\n  - genre: String\n  - size: double\n  + Movie(title: String, director: String, genre: String, size: double)\n  + getTitle(): String\n  + getDirector(): String\n  + getGenre(): String\n  + getSize(): double\n  + setDirector(director: String)\n  + setGenre(genre: String)\n  + setSize(size: double)\n}\n\n\n\n\n\n\n\n\n\n\nThe MovieManager class has a HashMap of movies that stores Movie objects, an int variable qty that holds the number of movies stored in the manager, a double variable size that holds the total size of all the movies, a variable lastModified of type Date that holds the last date when a movie is added or deleted, and has several static methods which are addMovie, updateMovie, deleteMovie, getMovie, saveToCSV, deleteCSV which are CRUD operation over movies.\n\n\n\n\n\nclassDiagram\n\nclass MovieManager {\n  - movies: HashMap<String, Movie>\n  - qty: int\n  - size: double\n  - lastModified: Date\n  + addMovie(title: String, director: String, genre: String, size: double): void\n  + updateMovie(title: String, director: String, genre: String, size: double): void\n  + deleteMovie(title: String): void\n  + getMovie(title: String): Movie\n  + saveToCSV(): void\n  + deleteCSV(): void\n}\n\n\n\n\n\n\n\n\n\n\nThe MovieController class has a main method which contains a loop that interacts with the user to perform CRUD operations on the Movie class using the static methods in the MovieManager class.\n\n\n\n\n\nclassDiagram\n\nclass MovieController {\n  + main(args: String[]): void\n}"
  },
  {
    "objectID": "javase/selab2-4.html#create-static-methods",
    "href": "javase/selab2-4.html#create-static-methods",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "4 Create static methods",
    "text": "4 Create static methods\n\n\nMovieController.java\n\n\nimport java.util.Scanner;\n\npublic class MovieController {\n\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        MovieManager movieManager = new MovieManager();\n\n        while (true) {\n            String command = ask(scanner, \"Option?\");\n            if (command.equals(\"Quit\")) {\n                break;\n            } else if (command.equals(\"Add\")) {\n                add(scanner,movieManager);\n            } else if (command.equals(\"Delete\")) {\n                delete(scanner,movieManager);\n            } else if (command.equals(\"Get\")) {\n                get(scanner,movieManager);\n            } else if (command.equals(\"Update\")) {\n                update(scanner,movieManager);\n            } else if (command.equals(\"Showall\")) {\n                showall(scanner,movieManager);\n            } else {\n                System.out.println(\"Unknown command!\");\n            }\n        }\n    }\n\n    public static String ask(Scanner input, String option) {\n        return null;\n    }\n\n    public static void add(Scanner input, MovieManager movieManager) {\n\n    }\n\n    public static void delete(Scanner input, MovieManager movieManager) {\n\n    }\n\n    public static void get(Scanner input, MovieManager movieManager) {\n\n    }\n\n    public static void update(Scanner input, MovieManager movieManager) {\n\n\n\n    public static void showall(Scanner input, MovieManager movieManager) {\n\n    }\n\n  }\n}"
  },
  {
    "objectID": "javase/selab2-4.html#grow-your-code",
    "href": "javase/selab2-4.html#grow-your-code",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "5 Grow your code",
    "text": "5 Grow your code\n\n\n\nHope is not a strategy\n\n\n\nHope is not a strategy\n\n\nZero Sprint/Version:\n\nMeeting rules\nRoles: ScrumMaster, Product Owner, Specialist, Team\nTech fundamentals: os, git\nMockup: figma\nDocumentation: obsidian, quarto\nDigital tools: github, gitlab, openProject, nextCloud\nUML: use-case, clas diagram, sequencial\nCore Project classes\nProduct draft definition\nUser stories, epics, tasks\nProduct Backlog, Sprint 1 Backlog\nSprint/Versions calendar\nNever, never, ever use Sprint Zero notation: it is a sin\n\nFirst Sprint/Version:\n\nJust basic Core classes, Model: Birding v1.0\n\nSecond Sprint/Version:\n\nStarting to work in main and thinking (that is, create some new classes) in Domains\n\nThird Sprint/Version:\n\nSome improvements in organize clases, Menu, MenuOptions, Utils: Birding v3.0\n\nFourth Sprint/Version:\n\nStart with MVC pattern: problems with coupling\n\nFifth Sprint/Version:\n\nMVC implemented: Birding v5.0\n\nSixth Sprint/Version:\n\nAdd singleton and factory pattern\n\nSeventh Sprint/Version:\n\nCheck security in/within code\n\nEight Sprint/Version:\n\nImplement CRUD operation in local JSON or create mySQL DB o similar\n\nNineth Sprint/Version:\n\nGo to web (Spring Boot & React)\nGo to desktop Java FX\n\nTenth Sprint/Version:\n\nCreate extensions and publish"
  },
  {
    "objectID": "javase/selab2-4.html#trycatch-for-wrong-inputs",
    "href": "javase/selab2-4.html#trycatch-for-wrong-inputs",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "6 Try/Catch for wrong inputs",
    "text": "6 Try/Catch for wrong inputs\nWhen executing Java code, different errors may occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.\n\n\n\n\n\n\nDefinition Exception\n\n\n\nWhen an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).\n\n\nThe try and catch keywords come in pairs:\n\nThe try statement allows you to define a block of code to be tested for errors while it is being executed.\nThe catch statement allows you to define a block of code to be executed, if an error occurs in the try block.\n\ntry {\n  //  Block of code to try\n}\ncatch(Exception e) {\n  //  Block of code to handle errors\n}\n\n6.1 Example\nThe finally statement lets you execute code, aftertry...catch, regardless of the result\npublic class Main {\n  public static void main(String[] args) {\n   System.out.println(\"Hi\");\n    try {\n      int[] myNumbers = {1, 2, 3};\n      // this code will crash: there is NO positin 10 in this array myNumbers\n      System.out.println(myNumbers[10]);\n    } catch (Exception e) {\n      System.out.println(\"Something went wrong.\");\n    } finally {\n      System.out.println(\"The 'try catch' is finished.\");\n    }\n     System.out.println(\"Bye\");\n  }\n}\n\n// Output:\n// Hi\n// Something went wrong.\n// The 'try catch' is finished.\n// Bye\nExecute this code on w3schools\n\n\n\n\n\n  Lab#SE02-3: Movie/Review, factory \n\n\n\n  top \n\n\n\n Lab#SE02-5: Movie/Review, simulate interactivity by console"
  },
  {
    "objectID": "javase/selab2-5.html",
    "href": "javase/selab2-5.html",
    "title": "Lab#SE02-5: Movie/Review, simulate interactivity by console",
    "section": "",
    "text": "📘 Linux Lab#LI02-5: interactivity and console\nOnce in previous Lab#SE02-4, the user enjoys some interactivity with our app, let’s test this new feature.\n\nTo do so, with the class Movie in mind, we could create a createFromConsole() method, a method that eventually:\n\nprompts the user for input in the console\ncreates a Movie object based on that input\nuses the Scanner class to read the input from the console\nsets the fields of the Movie object with the input data.\n\nAnd then, test this method createFromConsole() with a JUnit @Test:\n\na test that simulates a user input by setting the input stream to a string containing the input data,\nand then creating a Movie object and calling the createFromConsole() method.\nLaziness, Impatience, Hubris"
  },
  {
    "objectID": "javase/selab2-5.html#overview",
    "href": "javase/selab2-5.html#overview",
    "title": "Lab#SE02-5: Movie/Review, simulate interactivity by console",
    "section": "1 Overview",
    "text": "1 Overview\n\n\n\nStream I/O in Standard I/O (java.io Package)\n\n\n\n\nPackage java.io, provides for system input and output through data streams, serialization and the file system.\n\nFollowing are the important classes in Java.io package:\n\nProgramming simple I/O operations is easy, which involves only a few classes and methods. You could do it by looking at a few samples like our previous lab.\nProgramming efficient, portable I/O is extremely difficult, especially if you have to deal with different character sets.\n\n1.1 Stream\nA stream is a sequence of data. In Java, a stream is composed of bytes. It’s called a stream because it is like a stream of water that continues to flow.\nIn our app, java.io will create three streams automatically. All these streams are attached with the console.\n\nSystem.out: standard output stream\nSystem.in: standard input stream\nSystem.err: standard error stream\n\n\n\n\nInputStream and OutputStream\n\n\n\n\nInput stream refers to an ordered flow of data in the form of bytes. This flow of data can be coming from various resources such as files, network programs, input devices, etc.\n\nIn order to read such data, we have a Java InputStream Class in the Java IO API. Link\n\n\n\n1.2 Discuss solution\nThese lines of pseudo-code, particulary the (2) line, are the key-solution to use InputStream to simulate a input console.\n(1) String simulateInputByConsole = \"Here\\ngoes\\nhe\\nsimulate\\nimput\";\n(2) InputStream in <<<<< simulateInputByConsole.getBytes();\n(3) System.setIn(in);\nIt creates an InputStream in that reads from a byte array containing the bytes of the input string input.getBytes() (using the platform’s default charset), which allow us to use this InputStream as regular input stream into System.in.\n\n\n\nIt extends the InputStream abstract class.\n\n\nA new InputStream object is being created by wrapping a ByteArrayInputStream around a byte array.\nString input = \"The Shawshank Redemption\\n\" +\nInputStream in = new ByteArrayInputStream(input.getBytes());\n\n\nA ByteArrayInputStream is a subclass of InputStream that reads data from a byte array.\nThe byte array is created by calling the getBytes() method on the input string. getBytes() is a method of the String class that returns a byte array containing the characters of the string encoded using the platform’s default charset.\n\n\n1.3 getBytes()\n    String myString = \"I love Java\";\n    byte[] byteArray;\n\n    // convert the string to a byte array\n    // using platform's default charset\n    byteArray = myString.getBytes();\n    System.out.println(Arrays.toString(byteArray));\n\n    // Output\n    // [73, 32, 108, 111, 118, 101, 32, 74, 97, 118, 97]\n\n\nWe have used the Arrays class in the above example to print the byte array in a readable form. It has nothing to do with getBytes().\nHTML Encoding Character Set\nmore examples\nThere are many other standard charset like:\n\nUS-ASCII: Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set\nISO-8859-1: ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1\nUTF-8: Eight-bit UCS Transformation Format\nUTF-16BE: Sixteen-bit UCS Transformation Format, big-endian byte order\nUTF-16LE: Sixteen-bit UCS Transformation Format, little-endian byte order\nUTF-16: Sixteen-bit UCS Transformation Format, byte order identified by an optional byte-order mark.\n\n\n\n1.4 ByteArrayInputStream\nClass ByteArrayInputStream\n   // Creates a ByteArrayInputStream that reads entire array\n   ByteArrayInputStream input = new ByteArrayInputStream(byte[] arr);\nThe ByteArrayInputStream class of the java.io package ìs used to read an array of input data (in bytes).\nmore on ByteArrayInputStream"
  },
  {
    "objectID": "javase/selab2-5.html#core-classes",
    "href": "javase/selab2-5.html#core-classes",
    "title": "Lab#SE02-5: Movie/Review, simulate interactivity by console",
    "section": "2 Core classes",
    "text": "2 Core classes\n\n2.1 createFromConsole()\nThe method createFromConsole() is used to prompt the user for input in the console and create a movie object based on that input.\nIt uses the Scanner class to read the input from the console and sets the fields of the Movie object with the input data.\nYou could then use these:\n\n\nMovie.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Movie {\n    private String title;\n    private int year;\n    private String director;\n    private String actors;\n\n    public void createFromConsole() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the title of the movie: \");\n        title = scanner.nextLine();\n        System.out.print(\"Enter the year the movie was released: \");\n        year = scanner.nextInt();\n        scanner.nextLine(); // consume the newline character\n        System.out.print(\"Enter the name of the director: \");\n        director = scanner.nextLine();\n        System.out.print(\"Enter the names of the actors\" +\n                            \" (separated by commas): \");\n        actors = scanner.nextLine();\n    }\n\n    // getters adn setters by lombok\n}\n\n\n\n2.2 testCreateMovieFromConsoleInput()\nThe method testCreateMovieFromConsoleInput() is a JUnit test that is used to test the createFromConsole() method.\nThis test simulates user input by setting the input stream to a string containing the input data, and then creating a Movie object and calling the createFromConsole() method.\nThen it uses the assertEquals method to check that the fields of the movie object are set to the correct values, based on the input provided.\n\n\nMovieTest.java\n\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\npublic class MovieTest {\n\n    @Test\n    public void testCreateMovieFromConsoleInput() {\n        // Set up input for the console\n        String input = \"The Shawshank Redemption\\n\" +\n                        \"1994\\n\" +\n                        \"Frank Darabont\\n\" +\n                        \"Tim Robbins, Morgan Freeman\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\n        // Create the movie object\n        Movie movie = new Movie();\n        movie.createFromConsole();\n\n        // Assert that the movie object was created with the correct data\n        assertEquals(\"The Shawshank Redemption\", movie.getTitle());\n        assertEquals(1994, movie.getYear());\n        assertEquals(\"Frank Darabont\", movie.getDirector());\n        assertEquals(\"Tim Robbins, Morgan Freeman\", movie.getActors());\n    }\n\n}\n\n\n\nIt is important to test the createFromConsole() method because it is a core functionality of the Movie class, and it is essential to ensure that it is working properly.\n\nIf this method is not working as expected, it will not only affect the user experience but also could cause the application to fail.\n\nThis static method System.setIn() from the class java.lang.System is used to reassign the standard input stream.\nSignature:\nstatic void setIn(InputStream in)\n\n\n\n\n\n  Lab#SE02-4: Movie/Review, interactivity and coupling \n\n\n\n  top \n\n\n\n Lab#SE03-1: Library/Book, Core-Model"
  },
  {
    "objectID": "javase/selab3-1.html",
    "href": "javase/selab3-1.html",
    "title": "Lab#SE03-1: Library/Book, Core-Model",
    "section": "",
    "text": "📘 Linux Lab#SE03-1: Library/Book\n\nCreate a Maven/Gradle Java SE Project.\n\nAnd from Lab SE#00-3 use the relationship between User and Book.\n\nAdd the needed dependencies:\n\nLombok\nJunit\nJava Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\nPerson: User, Worker, Staf, Freelancer, Author\nPublication: Book, BooItem, Multimedia, MultimediaItem\n\nWith Junit dependency create unitary test to test objects and operations, and then integration tests.\nFrom here you should add new features once all the test are passed.\n\nOperations, you could think in a Manager Class o similar\nNew fields/attributes and new classes\nNew compositions and inherence: expand your model\nUse Factory design pattern to create new objects"
  },
  {
    "objectID": "javase/selab3-1.html#core-classes-and-dependencies",
    "href": "javase/selab3-1.html#core-classes-and-dependencies",
    "title": "Lab#SE03-1: Library/Book, Core-Model",
    "section": "1 Core classes and dependencies",
    "text": "1 Core classes and dependencies\nYou could then use these classes as follows:\n\n\nmoviemodel.java\n\nimport lombok.Data;\n\n@Data\nclass Person {\n    private String name;\n    private int age;\n}\n\nclass User extends Person {\n    private String username;\n    private String password;\n}\n\nclass Staff extends Person {\n    private String department;\n}\n\nclass Freelancer extends Person {\n    private String skills;\n}\n\ninterface Publication {\n    void publish();\n}\n\nclass Author extends Person {\n    private String authorName;\n}\n\ninterface Publication {\n    void publish();\n}\n\nclass Book implements Publication {\n    private String title;\n    private int pages;\n    private Author author;\n\n    @Override\n    public void publish() {\n        System.out.println(\"Publishing book: \" + title);\n    }\n}\n\nclass BookItem extends Book {\n    private int ISBN;\n}\n\nclass Multimedia extends Publication {\n    private String title;\n    private String format;\n}\n\nclass MultimediaItem extends Multimedia {\n    private int itemId;\n}\n\n\n1.1 Dependency: Lombok\nUse Lombok, link:\n\nThe @Data annotation is a Lombok annotation that generates getters and setters for the fields of a class, as well as equals, hashCode, and toString methods based on the fields.\nThe @AllArgsConstructor annotation is a Lombok annotation that generates a constructor with all of the class’s fields as arguments.\nThe @NoArgsConstructor annotation is a Lombok annotation that generates a no-argument constructor for a class.\n\n@Data All together now: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, @Setter on all non-final fields, and @RequiredArgsConstructor.\nAdding lombok to your pom file: to include lombok as a provided dependency, add it to your In your Java code: block like so:\n\n\npom.xml\n\n<dependencies>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <version>1.18.24</version>\n        <scope>provided</scope>\n    </dependency>\n</dependencies>\n\n\n\n1.2 Dependency: Java Faker\nUse Java Faker:\nIn pom.xml, add the following xml dependency between  … \n\n\npom.xml\n\n<dependencies>\n  <dependency>\n      <groupId>com.github.javafaker</groupId>\n      <artifactId>javafaker</artifactId>\n      <version>1.0.2</version>\n  </dependency>\n</dependencies>\n\nIn your Java code:\n\n\ntestfaker.java\n\nimport com.github.javafaker.Faker;\nimport org.junit.jupiter.api.Test;\n\nFaker faker = new Faker();\n\nString name = faker.name().fullName(); // Miss Samanta Schmidt\nString firstName = faker.name().firstName(); // Emory\nString lastName = faker.name().lastName(); // Barton\n\nString streetAddress = faker.address().streetAddress(); // 60018 Sawayn Brooks Suite 449\n\n\n\n1.3 Dependency: JUnit 5\nTo configure support for JUnit Jupiter based tests, configure test scoped dependencies on the JUnit Jupiter API and the JUnit Jupiter TestEngine implementation similar to the following.\nmore on Java SE TDD\n\n\npom.xml\n\n<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-engine</artifactId>\n      <version>5.9.1</version>\n      <scope>test</scope>\n    </dependency>"
  },
  {
    "objectID": "javase/selab3-1.html#solving-discussion-umls",
    "href": "javase/selab3-1.html#solving-discussion-umls",
    "title": "Lab#SE03-1: Library/Book, Core-Model",
    "section": "2 Solving discussion: UMLs",
    "text": "2 Solving discussion: UMLs\n\n2.1 Core features: borrow and issue\n\n\n\n\n\nclassDiagram\n\nclass Publication {\n  -title: String\n  -year: int\n  -author: String\n  -statusPublication: enum\n}\n\nclass Borrow {\n    +fromDate\n    +toDate\n    +borrowStatus\n}\n\nclass Issue {\n    +publishDate\n    +unpublishDate\n    +manageDate\n    -issueStatus\n}\n\nclass Member {\n    -idMember: String\n    +checkOutPublication()\n    +returnPublication()\n    +holdOnPublication()\n}\n\nclass Librarian {\n    -idLibrarian\n    +addPublication()\n    +removePublication()\n    +holdPublication()\n  \n}\n\nclass Person {\n    -name: String\n    -surname: String\n    -address: String\n    -age:int\n    +getPublications()\n}\n\nPerson --> Member\nPerson --> Librarian\nMember --> Borrow\nBorrow --> Publication\nLibrarian --> Issue\nIssue --> Publication\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n2.2 Core features: publications and books\n\n\n\n\n\nclassDiagram\n\nclass Person {\n    -name: String\n    -dob: date\n    -id: String\n}\nclass Author {\n    -authorName: String\n}\n\n\nclass Publication {\n    <<interface>>\n    +publish()\n}\n\n\nclass Book {\n    -title: String\n    -pages: int\n    -author: Author\n}\n\nclass BookItem {\n    -ISBN: int\n}\n\nclass Multimedia {\n    -title: String\n    -format: String\n}\n\nclass MultimediaItem {\n    -itemId: int\n}\n\n\nPerson --> Author\nBook *-- Author\nMultimedia *-- Author\nPublication --> Book\nPublication --> Multimedia\nBook --> BookItem\nMultimedia --> MultimediaItem\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n2.3 Core features: user and librarian (staf)\n\n\n\n\n\nclassDiagram\nclass Person {\n    -name: String\n    -dob: date\n    -id: String\n}\n\nclass User {\n    -username: String\n    -password: String\n}\n\nclass Worker {\n    -basePayment: double\n}\n\nclass Staff {\n    -department: String\n    -category: String\n    -salary: double\n}\n\nclass Librarian {\n    -idLibrarian\n    +addPublication()\n    +removePublication()\n    +holdPublication()\n  \n}\n\nclass Freelancer {\n    -skills: String\n    -variablePayment: double\n}\n\nclass Author {\n    -authorName: String\n}\n\n\nPerson --> User\nPerson --> Worker\nWorker --> Staff\nStaff --> Librarian\nWorker --> Freelancer\nPerson --> Author\nBook *-- Author\nMultimedia *-- Author\n\n\n\n\n\n\n\n\n\n\n\n2.4 Core features\n\n\n\n\n\n\nclassDiagram\nclass Person {\n    -name: String\n    -dob: date\n    -id: String\n}\n\nclass User {\n    -username: String\n    -password: String\n}\n\nclass Worker {\n    -basePayment: double\n}\n\nclass Staff {\n    -department: String\n    -category: String\n    -salary: double\n}\n\nclass Freelancer {\n    -skills: String\n    -variablePayment: double\n}\n\nclass Author {\n    -authorName: String\n}\n\nclass Librarian {\n    -idLibrarian\n    +addPublication()\n    +removePublication()\n    +holdPublication()\n  \n}\n\nclass Publication {\n    <<interface>>\n    +publish()\n}\n\n\nclass Book {\n    -title: String\n    -pages: int\n    -author: Author\n}\n\nclass BookItem {\n    -ISBN: int\n}\n\nclass Multimedia {\n    -title: String\n    -format: String\n}\n\nclass MultimediaItem {\n    -itemId: int\n}\n\nclass Borrow {\n    +fromDate\n    +toDate\n    +borrowStatus\n}\n\nclass Issue {\n    +publishDate\n    +unpublishDate\n    +manageDate\n    -issueStatus\n}\n\nUser --> Borrow\nBorrow --> Publication\nLibrarian --> Issue\nIssue --> Publication\n\nPerson --> User\nPerson --> Worker\nWorker --> Staff\nStaff --> Librarian\nWorker --> Freelancer\nPerson --> Author\n\nBook *-- Author\nMultimedia *-- Author\nPublication --> Book\nPublication --> Multimedia\nBook --> BookItem\nMultimedia --> MultimediaItem\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Lab#SE02-5: Movie/Review, simulate interactivity by console \n\n\n\n  top \n\n\n\n Lab#SE03-2: Library/Book, Sprint Zero"
  },
  {
    "objectID": "javase/selab3-2.html",
    "href": "javase/selab3-2.html",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "",
    "text": "📘 Linux Lab#SE03-2: Library/Book Sprint Zero\nBefore define what a Sprint Zero really is, let’s see what it isn’t.\n\nA Sprint Zero is not the phase in which:\n\nthe team is put together: a team must already be in place.\nfor setting up infrastructure which should already be implemented or easily implemented on demand.\nshould not involve adding products to a backlog or consider planning as classical project management.\n\n\nThe main goal of a Sprint Zero is to deliver some usable value that can be built upon by the next team. Sprint Zeros are required to:\n\nCreate the project’s skeleton, including research spikes.\nKeep design minimal.\nDevelop a small number of stories to completion.\nBe low velocity and lightweight.\n\nMore specifically, the deliverables of a Sprint Zero should be as follows:\n\nA usable piece of code, however small.\nA minimal environment for writing code.\nA prioritization of features or a list of stories.\nA release plan assigning each story to a Sprint.\nA plan for the most likely implementation of features."
  },
  {
    "objectID": "javase/selab3-2.html#architecture-and-first-draft",
    "href": "javase/selab3-2.html#architecture-and-first-draft",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.1 Architecture and first draft",
    "text": "1.1 Architecture and first draft\n\n1.1.1 Tasks/Requirements list\nLet’s take the example of the Library Lab#SE03-1 to define a graph with the requirements/tasks for the Sprint Zero deriverables:\n\n\n\n\n\n\n\n\n\nsprintZero\n\n Sprint Zero  \n\nSprint Zero\n\n Sprint Zero   \n\n1 - Project\n\n 1 - Project   \n\nSprint Zero–1 - Project\n\n   \n\n2 - DDD\n\n 2 - DDD   \n\nSprint Zero–2 - DDD\n\n   \n\n3 - UML\n\n 3 - UML   \n\nSprint Zero–3 - UML\n\n   \n\n4 - Code\n\n 4 - Code   \n\nSprint Zero–4 - Code\n\n   \n\nUse Case\n\n Use Case   \n\n1 - Project–Use Case\n\n   \n\nDocumentation\n\n Documentation   \n\n1 - Project–Documentation\n\n   \n\nMock-up\n\n Mock-up   \n\n1 - Project–Mock-up\n\n   \n\nOpen?\n\n Open Project?   \n\n1 - Project–Open?\n\n   \n\nVocabulary\n\n Vocabulary   \n\n2 - DDD–Vocabulary\n\n   \n\nPackages\n\n Packages   \n\n2 - DDD–Packages\n\n   \n\nModel\n\n Model   \n\n2 - DDD–Model\n\n   \n\nController\n\n Controller   \n\n2 - DDD–Controller\n\n   \n\nRefactor\n\n Refactor Domain   \n\n2 - DDD–Refactor\n\n   \n\nRelationships\n\n Relationships   \n\n3 - UML–Relationships\n\n   \n\nUtilities\n\n Utilities   \n\n4 - Code–Utilities\n\n   \n\nCore model\n\n Core model   \n\n4 - Code–Core model\n\n   \n\nManagers\n\n Managers   \n\n4 - Code–Managers\n\n   \n\nDependencies\n\n Dependencies   \n\n4 - Code–Dependencies\n\n   \n\nMaven\n\n Maven   \n\n4 - Code–Maven\n\n   \n\nRefactor\n\n Refactor Code   \n\n4 - Code–Refactor\n\n   \n\nTest\n\n Test   \n\n4 - Code–Test\n\n   \n\nGit\n\n Git   \n\n4 - Code–Git\n\n   \n\nUser Stories\n\n User Stories   \n\nUse Case–User Stories\n\n   \n\nQuarto\n\n Quarto   \n\nDocumentation–Quarto\n\n   \n\nObsidian\n\n Obsidian   \n\nDocumentation–Obsidian\n\n   \n\nNew Feature\n\n New Feature   \n\nMock-up–New Feature\n\n   \n\nCommon\n\n Common Language   \n\nVocabulary–Common\n\n   \n\nController–Managers\n\n   \n\nIf there isCode\n\n If there is Legacy Code   \n\nRefactor–If there isCode\n\n   \n\nRefactor–Refactor\n\n   \n\nComposition\n\n Composition   \n\nRelationships–Composition\n\n   \n\nInheritance\n\n Inheritance   \n\nRelationships–Inheritance\n\n   \n\nMultiplicity\n\n Multiplicity   \n\nRelationships–Multiplicity\n\n   \n\nBook\n\n Book   \n\nCore model–Book\n\n   \n\nBorrow\n\n Borrow   \n\nCore model–Borrow\n\n   \n\nUser\n\n User   \n\nCore model–User\n\n   \n\nlombok\n\n lombok   \n\nDependencies–lombok\n\n   \n\nJUnit\n\n JUnit   \n\nDependencies–JUnit\n\n   \n\nJupiter\n\n Jupiter   \n\nDependencies–Jupiter\n\n   \n\nfaker\n\n faker   \n\nDependencies–faker\n\n   \n\nMake Borrow\n\n Make Borrow   \n\nTest–Make Borrow\n\n   \n\nGitHub\n\n GitHub   \n\nGit–GitHub\n\n   \n\nCreate\n\n Create   \n\nfaker–Create\n\n   \n\n100 books\n\n 100 books   \n\nCreate–100 books\n\n   \n\n100 users\n\n 100 users   \n\nCreate–100 users\n\n  \n\n\n\n\n\n\n\n\n\n1.1.2 Onion Architecture\n\n\n\nOnion Architecture\n\n\nThe layers are of Onion Architecture and sublayers are:\n\nInfrastructure, where our database, file system, or any external web service we depend on live.\nTests: unit, integration, end-to-end. How we validate our business cases.\nUser Interface, how our users interact with the code we have built. - Application Services layer (sometimes known as the Transport/Access Layer).\nDomain Services layer. In this layer is where the majority of our business logic lives, it carries out the operations to turn A into B, input into output, egg into chicken.\nThe core layer, the Domain Model layer which is the representation of the high level data objects we use.\n\n\n\n\n\nLibrary Project key-words sprint zero\n\n\nSprint#6, dia 01/02 image Library Project"
  },
  {
    "objectID": "javase/selab3-2.html#features-core-use-case-user-borrows-a-book",
    "href": "javase/selab3-2.html#features-core-use-case-user-borrows-a-book",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.2 Features: core use-case: user-borrows-a-book",
    "text": "1.2 Features: core use-case: user-borrows-a-book\n\n1.2.1 Use-Story\n\nUser story template and examples\n\n\nAs a user, I want to borrow a book with my documentId, so that I may read and return it at due date that the system says.\n\n\n\n1.2.2 Mock-up\nOptions:\n1- Make a Borrow\n2- User Management\n3- Book Management\n4- Quit\nOption?\n'Borrow'\nUser?\n'159742OPI'\nBook?\n'Anna Karenina'\nProceed, are your sure?\n'Yes'\nBorrow made, borrowId: RER7567, dueDate: 15/02/2023 \nOptions:\n1- Make a Borrow\n2- User Management\n3- Book Management\n4- Quit\nOption?\n'Quit'\n\n\n1.2.3 Menus\n\nMain Menu\n1- Make a Borrow\n2- User Management\n3- Book Management\n4- Borrow Management\n4- Quit\n\nUser Menu\n1- Create\n2- Update\n3- Delete\n4- List\n5- Get one\n6- Quit\n\nBook Menu\n1- Create\n2- Update\n3- Delete\n4- List\n5- Get one\n6- Quit\n\nBorrow Menu\n1- Create (make a borrow)\n2- Update\n3- Delete\n4- List\n5- List Active Borrows \n6- Get one\n7- Quit"
  },
  {
    "objectID": "javase/selab3-2.html#pieces-of-code",
    "href": "javase/selab3-2.html#pieces-of-code",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.3 Pieces of code",
    "text": "1.3 Pieces of code\n\n1.3.1 UUID\nThe full form of UUID is Universally Unique Identifier. A UUID represents a 128-bit value that is unique. The standard representation of UUID uses hex digits.\nFor example:\n3c0969ac-c6e3-40f2-9fc8-2a59b8987918\ncb7125cc-d78a-4442-b21b-96ce9227ef51\n\nClass UUID\n\nimport java.util.UUID;\n\n    public static String createId() {Limit Your Availability\n\n        UUID uuid = UUID.randomUUID();\n        System.out.println(\"UUID generated - \" + uuid);\n        System.out.println(\"UUID Version - \" + uuid.version());\n        String id = uuid.toString();\n\n        return id;\n\n    }\n\n\n1.3.2 BorrowManager class\npublic class BorrowManager {\n\n   public static HashMap< String , Borrow> borrows = new HashMap<>();\n}\n\n\n1.3.3 faker Users and Books\npublic static void createBooks(int number) {\n// create faker object to use as\n// builder for book\nFaker faker = new Faker();\nBook newbook;\n\nfor (int i = 0; i < number; i++) {\n    // create newbook without args\n    newbook = new Book();\n    // some people get nervous with this\n    // be careful ...\n    String bookId = InterfaceUtils.createUUID();\n    newbook.setISBN(bookId);\n    // title's book\n    String bookTitle = faker.book().title();\n    newbook.setTitle(bookTitle);\n    // year's book\n    int bookYear = faker.number().numberBetween(1000, 2023);\n    newbook.setYear(bookYear);\n    // borrows' book\n    List<Borrow> borrows = new ArrayList();\n    newbook.setBorrows(borrows);\n    // author's book\n    Author newauthor = new Author();\n    newbook.setAuthor(newauthor);\n    // add to hashmap\n    books.put( bookId, newbook);\n    // kill object\n    newbook = null;\n    }\n}"
  },
  {
    "objectID": "javase/selab3-2.html#tests",
    "href": "javase/selab3-2.html#tests",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.4 Tests",
    "text": "1.4 Tests\n\n1.4.1 borrow object test\nTest to create Borrow object\n\n\n1.4.2 make-a-borrow test\nTest to make-a-borrow operation by simulate-console\n\n\n\n\n\n\nImportant\n\n\n\nWe decide to discuss this test in the near future, not now. It is more diffucult and complex than we thought."
  },
  {
    "objectID": "javase/selab3-2.html#uml",
    "href": "javase/selab3-2.html#uml",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.5 UML",
    "text": "1.5 UML\nLAB#03-1 UML"
  },
  {
    "objectID": "javase/selab3-2.html#domains-tree",
    "href": "javase/selab3-2.html#domains-tree",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.6 Domains & Tree",
    "text": "1.6 Domains & Tree\n\n\n\nFolder tree LibraryProject\n\n\n\n\n\n\n\n  Lab#SE03-1: Library/Book, Core-Model \n\n\n\n  top \n\n\n\n Lab#SE03-3: Library/Book, Expand Model"
  },
  {
    "objectID": "javase/selab3-3.html",
    "href": "javase/selab3-3.html",
    "title": "Lab#SE03-3: Library/Book, Expand Model",
    "section": "",
    "text": "📘 Linux Lab#SE03-3: LibraryProject Expand Model\nIn LibraryProject, the User and Staff classes could have different operations that they are authorize/able to perform.\nThe User class could have the following operations:\n\nSearch for books\nBorrow a book\nReturn a book\nCheck the status of borrowed books\nUpdate personal information\n\nThe Staff class could have the following operations:\n\nAdd a new book\nRemove a book\nUpdate the book details\nRegister a new user\nRemove a user\nUpdate the user details\nGenerate reports on library operations\n\nTo implement these operations, we could define three separate interfaces:\n\nUserOperations\nStaffOperations\nGeneralOpeations"
  },
  {
    "objectID": "javase/selab3-3.html#interfaces",
    "href": "javase/selab3-3.html#interfaces",
    "title": "Lab#SE03-3: Library/Book, Expand Model",
    "section": "1 Interfaces",
    "text": "1 Interfaces\nThe three interfaces GeneralOperations, UserOperations, and StaffOperations provide a clear separation of concerns and responsibilities within the library management system.\n\n\nIn a library project, having separate interfaces for different types of operations will help to keep the code organized and maintainable.\n\nGeneralOperations interface provides methods that are commonly used by both users and staff, such as searching for books and creating an account.\n\n\nUserOperations interface includes methods that are specific to users, such as updating personal information, borrowing and returning books, and checking their borrowed books.\n\n\nStaffOperations interface includes methods that are specific to staff members, such as adding, removing, and updating book details, as well as registering and updating user details and generating reports.\n\nBy separating these different functionalities into interfaces, it becomes easier to implement and maintain the system.\n\n\nFor example, a developer could create different classes that implement the UserOperations interface, such as Student or Faculty, which will all have their own implementation of the methods defined in the interface."
  },
  {
    "objectID": "javase/selab3-3.html#abstract-class",
    "href": "javase/selab3-3.html#abstract-class",
    "title": "Lab#SE03-3: Library/Book, Expand Model",
    "section": "2 Abstract class",
    "text": "2 Abstract class\nFinally, the LibraryMember abstract class is a parent class for users and staff members, which includes common fields such as id, address, and phoneNumber.\nBy defining these fields in an abstract class, it allows for different types of users and staff members to inherit them and avoid duplication of code.\npublic interface GeneralOperations {\n    public void searchBooks(String query);\n    public void createAccount();\n    \n}\n\npublic interface UserOperations {\n    public void updatePersonalInformation();\n    public void borrowBook(Book booLab#SE00-3: Library Modelk);\n    public void returnBook(Book book);\n    public void checkBorrowedBooks();\n}\n\npublic interface StaffOperations {\n    public void addBook(Book book);\n    public void removeBook(Book book);\n    public void updateBookDetails(Book book);\n    public void registerUser(User user);\n    public void removeUser(User user);\n    public void updateUserDetails(User user);\n    public void generateReports();\n}\n\n\nUsing interfaces and abstract classes in this way can make the code more modular and easier to maintain, as it allows for greater flexibility and extensibility."
  },
  {
    "objectID": "javase/selab3-3.html#uml",
    "href": "javase/selab3-3.html#uml",
    "title": "Lab#SE03-3: Library/Book, Expand Model",
    "section": "3 UML",
    "text": "3 UML\n\n3.1 Previous UML proposals\nThe two UML diagrams describe the core features of a libraryProject, specifically the use cases for borrowing and issuing books, as well as the roles and responsibilities of users and librarians/staff members.\n\nThe first diagram, Core features: borrow and issue, depicts the interaction between the user and the system, as well as the system and the librarian:\n\n\nCore features: borrow and issue\n\n\nThe second diagram, Core features: user and librarian (staff), expands on the roles and responsibilities of users and librarians/staff members.\n\n\nCore features: user and librarian (staf)\n\n\n\n3.2 Solving discussion: actors UML\nTHE UML diagram describes our LibraryProject that includes three interfaces: GeneralOperations, UserOperations, and StaffOperations.\n\nGeneralOperations provides two methods, createAccount() and searchBooks(String query), that allow users to create an account and search for books.\nUserOperations provides four methods that allow users to update their personal information, borrow and return books, and check the books they have borrowed.\nStaffOperations provides several methods that allow staff to add, remove, and update books, as well as register, remove, and update user details and generate reports.\n\n\n\n\n\n\n\nclassDiagram\n\n class GeneralOperations {\n   <<interface>>\n    +createAccount(): void\n    +searchBooks(query: String): void \n  }\n\n   class UserOperations {\n     <<interface>>\n    +borrowBook(book: Book): void\n    +returnBook(book: Book): void\n    +checkBorrowedBooks(): void\n  }\n\n  class LibraryMember {\n    <<abstract>>\n    +id: String\n    +address: String\n    +phoneNumber: String\n  }\n\n  class Member {\n    <<abstract>>\n    +name: String\n    +surname: String\n    nationality: String\n    +birthdate: Date\n  \n  }\n\n class StaffOperations {\n     <<interface>>\n    +addBook(book: Book): void\n    +removeBook(book: Book): void\n    +updateBookDetails(book: Book): void\n    +registerUser(user: User): void\n    +removeUser(user: User): void\n    +updateUserDetails(user: User): void\n    +generateReports(): void\n  }\n\n  class User {\n    -libraryCardNumber: String\n    -borrowedBooks: ArrayList<Book>\n    +User()\n  }\n\n   class Author {\n    -deathdate: Date\n    -books: Book\n    +author()\n  }\n  \n  \n  class Staff {\n    -staffId: String\n    -position: String\n    -registeredUsers: ArrayList<User>\n    -libraryBooks: ArrayList<Book>\n    +Staff()\n  }\n\n  class Book {\n    -title: String\n    -author: Author\n    -publisher: String\n    -year: int\n    -isbn: String\n    -status: String\n    +Book()\n    +getStatus(): String\n  }\n  \n  Author *-- Book\n  UserOperations <|..  User \n  GeneralOperations <|..  LibraryMember  \n  LibraryMember <|.. User\n  LibraryMember <|.. Staff\n  Member <|.. Author\n  Member <|.. LibraryMember\n  StaffOperations  <|.. Staff\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3 Solving discussion: actors UML & core-model\n\n\n\nActors and core-model UML\n\n\n\n\nThe diagram also includes four classes: User, Author, Staff, and Book.\n\nUser represents a library member with a library card number and a list of borrowed books. Author represents the author of a book, with details including their name, nationality, and birth and death dates.\n\nStaff represents a staff member with a staff ID, position, and lists of registered users and library books. Book represents a book with details including its title, author, publisher, publication year, ISBN, and status.\n\n\n\n\n\nActors and core-model UML\n\n\n\n\n\n\n\n\nclassDiagram\n\n\n   class UserOperations {\n     <<interface>>\n    +borrowBook(book: Book): void\n    +returnBook(book: Book): void\n    +checkBorrowedBooks(): void\n  }\n\n  class Member {\n    <<abstract>>\n    +name: String\n    +surname: String\n    +nationality: String\n    +birthdate: Date\n    +abstract printData(): void\n    +calculateAge(): int\n  }\n\n  class User {\n    -email: String\n    -libraryCardNumber: String\n    -borrowedBooks: ArrayList<Book>\n    +user()\n  }\n\n\n class GeneralOperations {\n   <<interface>>\n    +createAccount(): void\n    +searchBooks(query: String): void \n  }\n\n   class Author {\n    -deathdate: Date\n    -books: List~Book~\n    +author()\n  }\n  \n  class Librarian {\n    -staffId: String\n    -position: String\n    -address: String\n    -phoneNumber: String\n    -salary: double\n    +librarian()\n  }\n\n\n    UserOperations <|..  User\n    Member <|.. User\n    Member <|.. Author\n    Member <|.. Librarian\n    GeneralOperations <|..  User\n    GeneralOperations <|..  Librarian \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Lab#SE03-2: Library/Book, Sprint Zero \n\n\n\n  top \n\n\n\n Java SE Resources"
  },
  {
    "objectID": "learning/learning-how-auto-evaluate.html",
    "href": "learning/learning-how-auto-evaluate.html",
    "title": "Auto-Evaluate",
    "section": "",
    "text": "Comments \n\n\n\n  top \n\n\n\n Books table"
  },
  {
    "objectID": "learning/learning-how-questions.html",
    "href": "learning/learning-how-questions.html",
    "title": "Useful Questions",
    "section": "",
    "text": "Decison making is far to be a easy task, on the contrary, it is a complex one …"
  },
  {
    "objectID": "learning/learning-how-questions.html#answering-the-useful-right-questions",
    "href": "learning/learning-how-questions.html#answering-the-useful-right-questions",
    "title": "Useful Questions",
    "section": "1 Answering the useful (right?) questions",
    "text": "1 Answering the useful (right?) questions\nQuestions that begin with the words why, who, what, and how are necessary and paramount because they help to clarify information, to seek additional details, and to better understand a situation. Besides, they play a crucial role in facilitating communication and understanding.\nThese words are often used to ask open-ended questions, which are questions that cannot be answered with a simple yes or no. Asking open-ended questions allows for more in-depth conversation and debate and can help to uncover important information or insights.\nFor example,\n\nasking “Why did this happen?” can help to identify the underlying causes of a particular event,\nwhile asking “What are the consequences of this decision?” can help to anticipate and evaluate the potential impacts of a choice.\n\nOverall, asking why, who, what, and how can help to improve communication, to facilitate decision-making, and to deepen understanding.\n\n\n\n\n\nflowchart TD\n  A(Why: programming) --> |Very personal question\\n and it must be answered| B{Who: profiles}\n  B--> C(You love it) \n  B--> D(You need it)\n  C--> E(What: sylabus)\n  H[\"Here you need some\\n kind of guidence\"]--> |teacher?senior? \\nif not a 'picar pedra'| E(What: sylabus)\n  D--> E(What: sylabus)\n  E--> |The what is helpless\\n if you don't know the for| F(For What: skills)\n  F--> |The most second most importat step\\n after the why, the how\\n a bad how may destroy your why| G(How: \\nlearning techniques)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Web vocabulary \n\n\n\n  top \n\n\n\n Learining: tips"
  },
  {
    "objectID": "learning/learning-how-take-notes.html",
    "href": "learning/learning-how-take-notes.html",
    "title": "Taking Notes",
    "section": "",
    "text": "Cornell way\n\n\n\n\n\n\n  Writing \n\n\n\n  top \n\n\n\n Comments"
  },
  {
    "objectID": "learning/learning-how-tips.html",
    "href": "learning/learning-how-tips.html",
    "title": "Learning: tips",
    "section": "",
    "text": "About learning: learn to learn"
  },
  {
    "objectID": "learning/learning-how-tips.html#four-strategies-to-effective-and-permanent-learning",
    "href": "learning/learning-how-tips.html#four-strategies-to-effective-and-permanent-learning",
    "title": "Learning: tips",
    "section": "1 Four strategies to effective and permanent learning",
    "text": "1 Four strategies to effective and permanent learning\n\n1.1 Not getting notes is bad\n\nTake notes with pen and paper and have effective note-taking skills\n\n\n\n1.2 Put your soul, now\n\nSpeak, debate, create emotions, remember, memorize. Engage the learning, show it is important for you\n\n\n\n1.3 Confusion is good\n\nEmbrace discomfort to make connections: study some topics at once upon a distributed practice (use the time space among stages) with minor changes everytime\n\n\n\n1.4 Teach is best\n\nTeach what you learn to others. Do it, now."
  },
  {
    "objectID": "learning/learning-how-tips.html#jim-kwik-learn-anything-faster",
    "href": "learning/learning-how-tips.html#jim-kwik-learn-anything-faster",
    "title": "Learning: tips",
    "section": "2 Jim Kwik: learn anything faster",
    "text": "2 Jim Kwik: learn anything faster\nTo learn anything faster, just remember FAST\n\n2.1 The F in Fast stands for Forget\n\nIf you want to speed up ‘kwik brain,’ you must temporarily forget three things.\nForget what you already know about the subject. A lot of people don’t learn faster because they feel like they already know the information. But your mind is like a parachute—it only works when it’s open.\nForget about anything that’s not urgent and important. You can’t multitask. If your brain is thinking about 4 different things, you’re not fully present and you won’t learn ’kwik’ly.\nForget your limitations. These are beliefs like your memory isn’t good, or you’re a slow reader, or you don’t have the right education to learn. But if you fight for your limitations, you get to keep them. Your memory isn’t fixed, and it is possible to remember hundreds of words and numbers the way I do onstage.\n\n\n\n2.2 The A in FAST stands for Active\n\nIn school, we were taught to learn by consuming information quietly. But you don’t learn by being lectured to. You learn by creating information and being active in the process.\nLearning is NOT a spectator sport.\nHow can you be more active in your learning?\nAsk questions.\nTake notes.\nThe more active you are, the more you will learn.\n\n\n\n2.3 The S in FAST stands for State\n\nYour state is a snapshot of your mood – the mood of your mind and your body. It’s the emotional well-being that you feel in that exact moment.\nInformation combined with emotion becomes a long-term memory.\nMany of us don’t remember what we learned in school because the umbrella emotion for most people in school was boredom.\nYou are the only person in control of your state.\nHow can you improve your state?\nChange your posture or your body or breathing.\nSit or stand the way you would if you were totally energized.\nThink about how you’ll benefit from the information.\nAll learning is state-dependent. Choose states of joy, fascination, and curiosity.\nSell your cleverness for bewilderment – Rumi.\n\n\n\n2.4 The T in FAST stands for Teach\n\nIf you want to cut your learning curve in half, learn with the intention of teaching it to somebody else.\nIf you had to give a presentation on what you’re learning today, you would learn it differently. You would pay closer attention. You would take more detailed notes. You would ask better questions.\nWhen I teach something, I get to learn it twice.\nPeople often say that those who can’t do teach. But I never saw that as a negative. I always thought, wow, if I can’t do something, I can teach it, and then I can do it.\n\n\n\n2.5 References: Learning How to Learn\n\nThis course gives you easy access to the invaluable learning techniques used by experts in art, music, literature, math, science, sports, and many other disciplines.\n\n\nWe’ll learn about how the brain uses two very different learning modes and how it encapsulates chunks information.\n\n\nWe’ll also cover illusions of learning, memory techniques, dealing with procrastination, and best practices shown by research to be most effective in helping you master tough subjects.\n\n\nLearning How to Learn: Powerful mental tools to help you master tough subjects: Learning How to Learn\n\n\n\n\n\n\n  Useful Questions \n\n\n\n  top \n\n\n\n Writing"
  },
  {
    "objectID": "learning/learning-how-write-comments.html",
    "href": "learning/learning-how-write-comments.html",
    "title": "Comments",
    "section": "",
    "text": "For each line, block of code, method, class, answer in a DIRECT, CLEAR style, no more than 3/5/10 words these three questions:\n\nWhat does this code do?\nFor what use/need/feature/operation is this code?\nHow does this code work, expression by expression?\n\n\n\n\n// find a comment within movie\n// to test a review: test Movie object creation\n// from movie object get Reviews list position 0 and get comment from Review\nString findMyComment = movie.getReviews().get(0).getComment();"
  },
  {
    "objectID": "learning/learning-how-write-comments.html#commit",
    "href": "learning/learning-how-write-comments.html#commit",
    "title": "Comments",
    "section": "2.1 Commit",
    "text": "2.1 Commit\n\n2.1.1 The commit type can include the following:\n\nfeat – a new feature is introduced with the changes\nfix – a bug fix has occurred\nchore – changes that do not relate to a fix or feature and don’t modify source or test files (for example updating dependencies)\nrefactor – refactored code that neither fixes a bug nor adds a feature\ndocs – updates to documentation such as a the README or other markdown files\nstyle – changes that do not affect the meaning of the code, likely related to code formatting such as white-space, missing semi-colons, and so on.\ntest – including new or correcting previous tests\nperf – performance improvements\nci – continuous integration related\nbuild – changes that affect the build system or external dependencies\nrevert – reverts a previous commit\n\n\n\n2.1.2 Style\nAnswer this questions in a DIRECT, CLEAR style, no more than 60 words. No ending in POINT, “.”\n\n\n2.1.3 Example commits\n\n#1 #feat: new css class to restyle\n#12 #chore: minor mistakes typos checked\n#33 #refactor: change components grid and names variables\n\n\n2.1.3.1 add BREAKING CHANGE OR MINOR CHANGE\n\nBREAKING CHANGE: a commit that has a BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in Semantic Versioning). A BREAKING CHANGE can be part of commits of any type.\n\n\n\n\n2.1.4 references\n\nurl: https://semver.org/ title: “Semantic Versioning 2.0.0” description: “Semantic Versioning spec and website” host: semver.org\n\n\nurl: https://commitizen-tools.github.io/commitizen title: “Commitizen” description: “commit rules, semantic version, conventional commits” host: commitizen-tools.github.io favicon: assets/images/favicon.png\n\n\nurl: https://www.conventionalcommits.org/en/v1.0.0/ title: “Conventional Commits” description: “A specification for adding human and machine readable meaning to commit messages” host: www.conventionalcommits.org"
  },
  {
    "objectID": "learning/learning-how-write-comments.html#pull-request",
    "href": "learning/learning-how-write-comments.html#pull-request",
    "title": "Comments",
    "section": "2.2 Pull-request",
    "text": "2.2 Pull-request\n\n\n\n\n\n  Taking Notes \n\n\n\n  top \n\n\n\n Auto-Evaluate"
  },
  {
    "objectID": "learning/learning-how-writing.html",
    "href": "learning/learning-how-writing.html",
    "title": "Writing",
    "section": "",
    "text": "William Strunk and E.B. White’s short and famous book, The Elements of Style.\n\nRule 17\nA sentence should contain no unnecessary words, a paragraph no unnecessary sentences, for the same reason that a drawing should have no unnecessary lines and a machine no unnecessary parts.\nThis requires not that the writer make all his sentences short, or that he avoid all details and treat his subjects only in outline, but that every word tell."
  },
  {
    "objectID": "learning/learning-how-writing.html#making-writing-more-varied",
    "href": "learning/learning-how-writing.html#making-writing-more-varied",
    "title": "Writing",
    "section": "2 Making writing more varied",
    "text": "2 Making writing more varied\n\n\n\nMaking writing more varied\n\n\n\nMaking writing more varied\nThe Elements of Style\n\n\n2.1 Composition\n\nDesign - choose a structure in advance, when planning what to write, and hold onto it.\n\n\nParagraphs - the primary compositional unit of writing. Each paragraph should be about an individual topic or speech. Begin paragraphs with a sentence that gives the topic or helps with the transition. Break paragraphs apart if it helps the reader, not just for the hell of it.\n\n‘After the paragraph has been written, examine it to see whether division will improve it.’ (Page 32)\n\nActive voice - it’s much better to use the active voice in most cases. E.g.:\n\n\n‘A report was prepared,’ is not as good as;\n‘He prepared a report.’\n\n\nNot - say what things are. Don’t waste your time saying what they are not.\n\n\nBe definite - do not dance around the truth express it in concrete terms.\n\n\nOmit needless words - ‘this is a subject that’ can better be written as ‘this subject’.\n\n\nSummaries and Tenses - in a summary, or anywhere really, pick a tense and stick to it, otherwise you’ll confuse the reader.\n\n\nEmphasis - put the word or words you want to emphasise at the end of a sentence\n\n\n\n\n\n\n  Learning: tips \n\n\n\n  top \n\n\n\n Taking Notes"
  },
  {
    "objectID": "learning/learning-listing-card-articles.html",
    "href": "learning/learning-listing-card-articles.html",
    "title": "Articles cards",
    "section": "",
    "text": "You can look up the following card listing for additional information:\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Categories\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nAbout images credit\n\n\n\n\n\n\n\nabout\n\n\nimages-credit\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIFCD0210 Sprint Backlog\n\n\n\n\n\n\n\nifcd0210\n\n\nbacklog\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIFCD0210 Product Backlog\n\n\n\n\n\n\n\nifcd0210\n\n\nbacklog\n\n\n\n\n\n\n\n\n\n\n\n23 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#RE02-1: Router & Hooks\n\n\nReactJS labs, Router & Hooks\n\n\n\n\nreactjs\n\n\nlab\n\n\n\n\nReact JS Labs\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n15 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: Rules of Hooks\n\n\nReactJS Rules of Hooks\n\n\n\n\nreactjs\n\n\nhooks\n\n\nrules\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nThursday, May 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: useReducer\n\n\nReactJS hooks\n\n\n\n\nreactjs\n\n\nhooks\n\n\nuseReducer\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nThursday, May 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReactJS: useState\n\n\nReactJS hooks\n\n\n\n\nreactjs\n\n\nhooks\n\n\nuseState\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nThursday, May 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: useRef\n\n\nReactJS hooks\n\n\n\n\nreactjs\n\n\nhooks\n\n\nuseRef\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, May 3, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: props and state\n\n\nPassing Props to a Component\n\n\n\n\nreactjs\n\n\nprops\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n11 min\n\n\nWednesday, May 3, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: useEffect\n\n\nReactJS hooks\n\n\n\n\nreactjs\n\n\nhooks\n\n\nuseEfect\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nWednesday, May 3, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS ES6: spread operator\n\n\nReactJS spread operator\n\n\n\n\nreactjs\n\n\nes6\n\n\nspread\n\n\noperator\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nWednesday, May 3, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWriting\n\n\nAbout how to write properly\n\n\n\n\nabout\n\n\nwriting\n\n\n\n\nAbout how to write properly\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n1 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava Standard Edition: Basics\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\nbasics\n\n\nconcepts\n\n\n\n\nWhat is the Java Polymorphism OOP paradigm\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nUseful Questions\n\n\nAbout fundamental questions\n\n\n\n\nabout\n\n\nquestions\n\n\n\n\nMust questions\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n1 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLearning: tips\n\n\nBasics on how to learn\n\n\n\n\nabout\n\n\nlearning\n\n\n\n\nBasics on how to learn, four basic rules\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n3 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nTaking Notes\n\n\nAbout how to take notes properly\n\n\n\n\nabout\n\n\nwriting\n\n\n\n\nAbout how to take notes properly\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAuto-Evaluate\n\n\nAbout how to auto-evaluate\n\n\n\n\nabout\n\n\nwriting\n\n\n\n\nAbout how to auto-evaluate\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeb Vocabulary\n\n\nTechnical terms and definitions\n\n\n\n\nvocabulary\n\n\nweb\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS App: async\n\n\nReactJS async\n\n\n\n\nreactjs\n\n\nasync\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReactJS: custom hooks\n\n\nReactJS hooks\n\n\n\n\nreactjs\n\n\nhooks\n\n\ncustom\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: useContext\n\n\nReactJS hooks\n\n\n\n\nreactjs\n\n\nhooks\n\n\nuseContext\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#RE03-1: to-do app\n\n\nReactJS labs\n\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE03\n\n\n\n\nlabs\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#RE05-1: chat & websockets\n\n\nReactJS labs\n\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE05\n\n\n\n\nlabs\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#RE04-1: HighCharts\n\n\nReactJS labs\n\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE04\n\n\n\n\nlabs\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: Create a React project\n\n\nReactJS Project\n\n\n\n\nreactjs\n\n\nproject\n\n\ndevtools\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nMonday, April 24, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#RE01-1: API Rest Axios\n\n\nReactJS API Rest Axios & Render Component\n\n\n\n\nreactjs\n\n\nlab\n\n\n\n\nReact JS Labs\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n8 min\n\n\nMonday, April 17, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: Components\n\n\nReactJS Components\n\n\n\n\nreactjs\n\n\ncomponents\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nMonday, April 17, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSprings Servlets\n\n\nSpring MVC\n\n\n\n\nspring\n\n\nMVC\n\n\n\n\nSpring MVC\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSCRUM Resources\n\n\nResources and Readings\n\n\n\n\nscrum\n\n\nresources\n\n\nreadings\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSpring MVC\n\n\nSpring MVC\n\n\n\n\nspring\n\n\nMVC\n\n\n\n\nSpring MVC\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarto Markdown: publishing\n\n\nPublish (3/7)\n\n\n\n\nmarkup\n\n\npublish\n\n\nquarto\n\n\nqmd\n\n\n\n\nPublish your Quarto web\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarto Markdown: code & data\n\n\nCode (4/7)\n\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\npython\n\n\n\n\nCode on your Quarto web\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarto Markdown: cheat-sheet\n\n\nCode CheatSheet (7/7)\n\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\ncheat-sheet\n\n\n\n\nCheat-sheet Quarto web\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarto Markdown: api rest call\n\n\nCode (5/7)\n\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\nrest\n\n\napi\n\n\n\n\nCode API Rest call on your Quarto web\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI04-1: Bash scripting, qtool\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nqtool\n\n\nbash\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n15 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarto Markdown: OJS Cells\n\n\nCode (6/7)\n\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\nojs\n\n\n\n\nCode on your Quarto web\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSpring Boot Vocabulary\n\n\nTechnical terms and definitions\n\n\n\n\nvocabulary\n\n\nSpring-Boot\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSCRUM Vocabulary\n\n\nTechnical terms and definitions\n\n\n\n\nvocabulary\n\n\nscrum\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE Vocabulay\n\n\nTechnical terms and definitions\n\n\n\n\nvocabulary\n\n\njavase\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReactJS Vocabulary\n\n\nTechnical terms and definitions\n\n\n\n\nvocabulary\n\n\nreactjs\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nGeneral Vocabulary\n\n\nTechnical terms and definitions\n\n\n\n\nvocabulary\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDataBase Vocabulary\n\n\nTechnical terms and definitions\n\n\n\n\nvocabulary\n\n\ndatabase\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDevOps Vocabulary\n\n\nTechnical terms and definitions\n\n\n\n\nvocabulary\n\n\ndevops\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nBooks cards\n\n\nRecommended book list\n\n\n\n\nlisting\n\n\nbooks\n\n\nreading\n\n\n\n\nAbout books\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nArticles table\n\n\n\n\n\n\n\nlisting\n\n\ntable\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nBooks table\n\n\n\n\n\n\n\nlisting\n\n\ntable\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nComments\n\n\nAbout how to write comments properly\n\n\n\n\nabout\n\n\nwriting\n\n\n\n\nAbout how to write comments properly\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n1 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE03-2: Library/Book, Sprint Zero\n\n\nJava SE Lab 03 part 2\n\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nplan\n\n\n\n\nJava SE Lab 03, part 2 Sprint Zero, plan\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe, Marc P.\n\n\n12 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE03-3: Library/Book, Expand Model\n\n\nJava SE Lab 03 part 3\n\n\n\n\njavase\n\n\nlab\n\n\ninherence\n\n\n\n\nJava SE Lab 03, part 3 Expand Model\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe, Marc P.\n\n\n6 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE03-1: Library/Book, Core-Model\n\n\nJava SE Lab 03 part 1\n\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nmodel\n\n\n\n\nJava SE Lab 03, part 1 work on the Core-Model\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE02-5: Movie/Review, simulate interactivity by console\n\n\nJava SE Lab 02\n\n\n\n\njavase\n\n\nlab\n\n\ninterativity\n\n\nconsole\n\n\ncontroller\n\n\ntesting\n\n\n\n\nJava SE Lab 02 part 5\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE00-1: Maven Person\n\n\nJava SE Lab 00\n\n\n\n\njavase\n\n\nlab\n\n\nmodel\n\n\ncomposition\n\n\ninherence\n\n\n\n\nJava SE Lab 00 - Part 1\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Encapsulation\n\n\nJava Fundamentals and Principles\n\n\n\n\njavase\n\n\nencapsulation\n\n\noop\n\n\nconcepts\n\n\n\n\nWhat is the Java encapsulation OOP paradigm\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nState\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nstate\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the State Behavioral Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n4 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nStrategy\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nstrategy\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Strategy Behavioral Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nObserver\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nobserver\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Observer Behavioral Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSingleton\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nsingleton\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Singleton Creational Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava Patterns: Types\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Abstract Facotory\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe, carla velasco\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nFactory\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nfactory\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Factory Creational Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDecorator\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\ndecorator\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Decorator Structural Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n3 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nFacade\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nfacade\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Facade Structural Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nBuilder\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nbuilder\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Builder Creational Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nCommander\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\ncommander\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the State Behavioral Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nRafa C.\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nComposite\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\ncomposite\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Composite Structural Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nRafa C.\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAbstract Factory\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nabstract-factory\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Abstract Factory Creational Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nBridge\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\nbridge\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Bridge Structural Design-Pattern\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Java 8\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\nlambda\n\n\nstream\n\n\noptional\n\n\n\n\nWhat is Java 8\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n11 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Abstract/Interface\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\ninherence\n\n\nabstract\n\n\ninterface\n\n\n\n\nWhat is the Abstract/Interface in Java\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE Resources\n\n\nReadings\n\n\n\n\njavase\n\n\nresources\n\n\nreadings\n\n\n\n\nJava SE Resources and Readings\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nHome\n\n\n\n\n\n\n\n\n\n\n\n\n6 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIFCD0210 Deliveries\n\n\n\n\n\n\n\nifcd0210\n\n\ntraining\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIFCD0210 Official Docs\n\n\n\n\n\n\n\nifcd0210\n\n\ntraining\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIFCD0210 Projects Backlog\n\n\n\n\n\n\n\nifcd0210\n\n\nbacklog\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nFriday, March 17, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIFCD0210 Calendar\n\n\n\n\n\n\n\nifcd0210\n\n\ncalendar\n\n\nforecast\n\n\ntimetable\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nWednesday, March 8, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSCRUM Guide\n\n\nSCRUM Guide\n\n\n\n\nscrum\n\n\nscrum-guide\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSpring Framework\n\n\nSpring Framework\n\n\n\n\nspring\n\n\nframework\n\n\n\n\nSpring Framework\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAgile Manifesto\n\n\n12 Principles Agile Manifesto\n\n\n\n\nscrum\n\n\nconcepts\n\n\nagile-manifesto\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSCRUM Agile Methodology\n\n\nSCRUM\n\n\n\n\nscrum\n\n\nconcepts\n\n\nspacex\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 7: Managing time and mind\n\n\nSCRUM Week 7\n\n\n\n\nscrum\n\n\nscrum-week7\n\n\nmindset\n\n\ntime-management\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 8: The specialist\n\n\nSCRUM Week 8\n\n\n\n\nscrum\n\n\nscrum-week8\n\n\nspecialist\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 9: Albertus’ Dylemma\n\n\nSCRUM Week 9\n\n\n\n\nscrum\n\n\nscrum-week9\n\n\nalbertusDylemma\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nAlbert R.\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 2: User stories, tasks and habits\n\n\nSCRUM Week 2\n\n\n\n\nscrum\n\n\nscrum-week2\n\n\nuser-story\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 4: ScrumMaster, how it works\n\n\nSCRUM Week 4\n\n\n\n\nscrum\n\n\nscrum-week4\n\n\nscrummaster\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 5: Mindset, the key to everythng\n\n\nSCRUM Week 5\n\n\n\n\nscrum\n\n\nscrum-week5\n\n\nmindset\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 6: Product Owner\n\n\nSCRUM Week 6\n\n\n\n\nscrum\n\n\nscrum-week6\n\n\nproduct-owner\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 3: Communication and value\n\n\nSCRUM Week 3\n\n\n\n\nscrum\n\n\nscrum-wewek3\n\n\ncommunication\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 1: Meetings and impediments\n\n\nSCRUM Week 1\n\n\n\n\nscrum\n\n\nscrum-week1\n\n\nmeetings\n\n\nimpediments\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWeek 10: Beyond SCRUM\n\n\nSCRUM Week 10\n\n\n\n\nscrum\n\n\nscrum-week10\n\n\nbeyond-scrum\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReactJS Resources\n\n\nReadings\n\n\n\n\nreactjs\n\n\nresources\n\n\nreadings\n\n\n\n\nReactJs Resources and Readings\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: render virtual DOM\n\n\nReactJS DOM\n\n\n\n\nreactjs\n\n\nvirutal-dom\n\n\nrender\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: Introduction\n\n\nReactJS hooks\n\n\n\n\nreactjs\n\n\nconcepts\n\n\nhooks\n\n\nintroduction\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS: JSX\n\n\nReactJS JSX\n\n\n\n\nreactjs\n\n\njsx\n\n\nrender\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS ES6: array, data and key\n\n\nReactJS arrays, data and key\n\n\n\n\nreactjs\n\n\nes6\n\n\narrays\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS ES6: destructuring\n\n\nReactJS destructuring\n\n\n\n\nreactjs\n\n\nes6\n\n\ndestructuring\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS ES6: import modules\n\n\nReactJS import modules\n\n\n\n\nreactjs\n\n\nes6\n\n\nimport-modules\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS ES6: arrow functions\n\n\nReactJS ES6\n\n\n\n\nreactjs\n\n\nes6\n\n\narrow\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS App: events\n\n\nReactJS events\n\n\n\n\nreactjs\n\n\nevents\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS App: router\n\n\nReactJS router\n\n\n\n\nreactjs\n\n\nrouter\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS App: styling\n\n\nReactJS styling SCSS\n\n\n\n\nreactjs\n\n\nstyling\n\n\ncss\n\n\nscss\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMarkUp Languages Resources\n\n\nReadings\n\n\n\n\nmarkup\n\n\nresources\n\n\nreadings\n\n\n\n\nMarkup Resources and Readings\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nReact JS App: conditional render\n\n\nReactJS conditional render\n\n\n\n\nreactjs\n\n\nconditional-render\n\n\n\n\ndescription\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#MD01-1: Create and publish by Quarto\n\n\nLab\n\n\n\n\nmarkup\n\n\npublish\n\n\nquarto\n\n\n\n\nLab, publish your Quarto webn\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarto Markdown: creating\n\n\nCreate (2/7)\n\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\n\n\nCreate your Quarto web\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarto Markdown: basics\n\n\nIntroudction (1/7)\n\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\nintroduction\n\n\n\n\nIntroduction to Quarto web\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nHTML Markup\n\n\nHTML\n\n\n\n\nmarkup\n\n\nHTML\n\n\nintroduction\n\n\n\n\nIntroduction to HTML\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction Markup\n\n\nMarkUp\n\n\n\n\nmarkup\n\n\nintroduction\n\n\n\n\nMaruup\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMarkdown Markup\n\n\nMarkdown\n\n\n\n\nmarkup\n\n\nmd\n\n\nintroduction\n\n\n\n\nIntroduction to MD\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nCascade Style Sheet\n\n\nCSS\n\n\n\n\nCSS\n\n\nintroduction\n\n\n\n\nIntroduction to CSS\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMarkdown and HTML working together, good idea?\n\n\nHTML and qmd\n\n\n\n\nHTML\n\n\nqmd\n\n\nquarto\n\n\n\n\nHTML and qmd discussion\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nCSS: W3.css\n\n\nW3.css\n\n\n\n\nw3css\n\n\nintroduction\n\n\n\n\nIntroduction to W3.css\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Resources\n\n\nReadings\n\n\n\n\nlinux\n\n\nresources\n\n\nreadings\n\n\n\n\nLinux Resources and Readings\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux: Virtual Machines\n\n\nVirtual Machines\n\n\n\n\nlinux\n\n\nvirtual-machines\n\n\nvmware\n\n\nvirtualbox\n\n\n\n\nA virtual machine is a software program that emulates the functionality of a physical computer\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux: pipes\n\n\nProgramming pipes\n\n\n\n\nlinux\n\n\nbash\n\n\npipe\n\n\n\n\nA pipe is a command that allows you to redirect the output of one command as the input to another command\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux: su and sudo\n\n\nBash su and sudo\n\n\n\n\nlinux\n\n\nbash\n\n\nsu\n\n\nsudo\n\n\n\n\nsu and sudo are two different commands in Linux that are used to execute commands with the privileges of another user\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux: File System\n\n\nLinux File System\n\n\n\n\nlinux\n\n\nfile-system\n\n\n\n\nThe file system is organized into a hierarchical structure, starting with the root directory\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux: Bash\n\n\nBash\n\n\n\n\nlinux\n\n\nbash\n\n\n\n\nBash Linux is a Unix shell and command language CLI (Command Language Interface)\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux: basic concepts\n\n\nLinux\n\n\n\n\nlinux\n\n\nconcepts\n\n\n\n\nWhat is Linux, free and Unix-like open-source operating system based on the Linux kernel\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Distros: Ubuntu\n\n\nUbuntu\n\n\n\n\nlinux\n\n\nUbuntu\n\n\ndistro\n\n\n\n\nUbuntu\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Distros: openSuse\n\n\nopenSuse\n\n\n\n\nlinux\n\n\nopenSuse\n\n\ndistro\n\n\n\n\nopenSuse\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Distros: Red Hat Enterprise Linux\n\n\nRed Hat Enterprise Linux\n\n\n\n\nlinux\n\n\nred-hat-enterprise-linux\n\n\ndistro\n\n\nrhel\n\n\n\n\nRed Hat Enterprise Linux\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Distros: Debian\n\n\nDebian\n\n\n\n\nlinux\n\n\ndebian\n\n\ndistro\n\n\n\n\nDebian\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI04-3: Distribute the terminal app\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\napp-distribution\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Distros: Manjaro\n\n\nManjaro\n\n\n\n\nlinux\n\n\nmanjaro\n\n\ndistro\n\n\n\n\nManjaro\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Distros: Mint\n\n\nMint\n\n\n\n\nlinux\n\n\nmint\n\n\ndistro\n\n\n\n\nMint\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI04-2: Bash scripts as terminal tool\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI03-1: Manage users and groups\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\nuser\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI03-2: Manage files\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nfile-system\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI03-4: Manage hardware\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nhardware\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI03-3: Manage software\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nsoftware\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI02-1: Export env user with grep and pipe\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\npipe\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI01-3: Adjust user permissions\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\nuser\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI01-2: Install at least three distributions\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\ndistro\n\n\ninstall\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLinux Lab#LI01-1: Choose Linux\n\n\nLab\n\n\n\n\nlinux\n\n\nlab\n\n\ndistro\n\n\n\n\nlab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE02-4: Movie/Review, interactivity and coupling\n\n\nJava SE Lab 02\n\n\n\n\njavase\n\n\nlab\n\n\ninterativity\n\n\ncoupling\n\n\ncontroller\n\n\n\n\nJava SE Lab 02 part 4\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n11 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE02-1: Movie/Review, Model\n\n\nJava SE Lab 02 part 1\n\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nmodel\n\n\n\n\nJava SE Lab 02, part 1 work on the Model\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE02-2: Movie/Review, CRUD Operations\n\n\nJava SE Lab\n\n\n\n\njavase\n\n\nlab\n\n\nmanager\n\n\nstatic\n\n\ncrud\n\n\n\n\nJava SE Lab 02, part 2, CRUD Operations\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n9 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE02-3: Movie/Review, factory\n\n\nJava SE Lab\n\n\n\n\njavase\n\n\nlab\n\n\nsingleton\n\n\nfactory\n\n\n\n\nJava SE Lab 02 part 3\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE01-2: Maven/Gradle Person and Account stored in JSON\n\n\nJava SE Lab\n\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nfactory\n\n\nJSON\n\n\n\n\nJava SE Lab 01\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE01-1: Maven/Gradle Person and Account\n\n\nJava SE Lab\n\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nsingleton\n\n\n\n\nJava SE Lab 01\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n11 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE00-4: Abstract/Interface Human\n\n\nJava SE Lab 00\n\n\n\n\njavase\n\n\nlab\n\n\nmodel\n\n\ninterface\n\n\ninherence\n\n\n\n\nJava SE Lab 00, Part 4\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE00-2: Maven Clinic\n\n\nJava SE Lab 00\n\n\n\n\njavase\n\n\nlab\n\n\nmodel\n\n\ncomposition\n\n\n\n\nJava SE Lab 00, part 2\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab#SE00-3: Library Model\n\n\nJava SE Lab 00\n\n\n\n\njavase\n\n\nlab\n\n\nmodel\n\n\ncomposition\n\n\ninherence\n\n\n\n\nJava SE Lab 00, Part 3\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava Standard Edition: Principles\n\n\nJava Principles\n\n\n\n\njavase\n\n\nconcepts\n\n\noop\n\n\nparadigm\n\n\n\n\nJava SE Principles\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Polymorphism\n\n\nJava Fundamentals and Principles\n\n\n\n\njavase\n\n\npolymorphism\n\n\noop\n\n\nconcepts\n\n\n\n\nWhat is the Java Polymorphism OOP paradigm\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava MOOC Helsinki\n\n\nJava Training\n\n\n\n\njavase\n\n\ntraining\n\n\nhelsinki\n\n\nmooc\n\n\n\n\nJava SE training by MOOC Helsinki Programming Java\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Abstraction\n\n\nJava Fundamentals and Principles\n\n\n\n\njavase\n\n\nabstraction\n\n\noop\n\n\nconcepts\n\n\n\n\nWhat is the Java abstraction OOP paradigm\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Inherence\n\n\nJava Fundamentals and Principles\n\n\n\n\njavase\n\n\ninherence\n\n\noop\n\n\nconcepts\n\n\n\n\nWhat is the Java inherence OOP paradigm\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava Patterns: UML\n\n\nJava Fundamentals and Patterns\n\n\n\n\njavase\n\n\numl\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\n\nWhat is the Abstract Facotory\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: JUnit and TDD\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\nTDD\n\n\nJUnit\n\n\n\n\nWhat is the TDD and JUnit in Java\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Scope\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\nscope\n\n\n\n\nWhat is the scope in Java\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: static modifier\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\nstatic\n\n\n\n\nWhat is the static modifier in Java\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n10 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Class and Objects\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\nclass\n\n\nobjects\n\n\nconcepts\n\n\noop\n\n\nparadigm\n\n\ncasting\n\n\n\n\nWhat is a Class and a Object in Java\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n12 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Project push GitHub\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\ngit\n\n\ngithub\n\n\nproject\n\n\ncloud\n\n\n\n\nSync maven project to github cloud\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Packages\n\n\nJava Fundamentals\n\n\n\n\njavase\n\n\npackage\n\n\nconcepts\n\n\n\n\nWhat is a Package in Java\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Maven\n\n\nMaven and Java\n\n\n\n\njavase\n\n\nmaven\n\n\nconcepts\n\n\n\n\nWhat is Maven and how it works\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Create Maven Project\n\n\nMaven and Java\n\n\n\n\njavase\n\n\nmaven\n\n\ncode\n\n\nproject\n\n\n\n\nHow to create a Maven Project\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJava SE: Coupling and DDD\n\n\nCoupling/cohesion in modern java and microservices and DDD\n\n\n\n\njavase\n\n\nmicroservices\n\n\ncoupling\n\n\nDDD\n\n\n\n\nHow important coupling is in modern java and microservices and DDD\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIFCD0210 Init Mail\n\n\n\n\n\n\n\nifcd0210\n\n\ntraining\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDevOps: agile and microservices\n\n\nDevOps within the organization\n\n\n\n\ndevops\n\n\nagile\n\n\nmicroservices\n\n\n\n\nreliable development, better integration between devs and ops, and faster release of new or revised software features or products to customers.\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDevOps: Introduction\n\n\nDevOps what it is\n\n\n\n\ndevops\n\n\nintroduction\n\n\n\n\nDevOps is a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDevOps Resources\n\n\nReadings\n\n\n\n\ndevops\n\n\nresources\n\n\nreadings\n\n\n\n\nDevOps Resources and Readings\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nGit\n\n\nSoftware code version control\n\n\n\n\ndevops\n\n\ngit\n\n\n\n\nGit is a version control system\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nGitHub\n\n\nSoftware code version control\n\n\n\n\ndevops\n\n\ngithub\n\n\n\n\nGitHub is a software development platform in the cloud. It’s used for storing, tracking, and collaborating on software projects.\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nImmutable Infrastructure\n\n\nDesigning code\n\n\n\n\ndevops\n\n\nimmutable\n\n\n\n\nSoftware and code components are replaced rather than changed\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nKubernetes k8s\n\n\nk8s\n\n\n\n\ndevops\n\n\nk8s\n\n\n\n\nk8s\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nJenkins pipelines\n\n\npipelines\n\n\n\n\ndevops\n\n\npipelines\n\n\n\n\nk8s\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDocker\n\n\nDocker\n\n\n\n\ndevops\n\n\nDocker\n\n\n\n\nMaven\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nHowto install Jenkins\n\n\nJenkins\n\n\n\n\ndevops\n\n\nJenkins\n\n\ninstall\n\n\n\n\nMaven\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDigital Ocean\n\n\nDigital Ocean\n\n\n\n\ndevops\n\n\ndigital-ocean\n\n\n\n\nDigital Ocean\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nHowto install Maven\n\n\nMaven\n\n\n\n\ndevops\n\n\nmaven\n\n\ninstall\n\n\n\n\nMaven\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAamanzon Web Sevices AWS\n\n\nAWS\n\n\n\n\ndevops\n\n\naws\n\n\n\n\nAWS\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab 5: k8s on Digital Ocean\n\n\nLab\n\n\n\n\ndevops\n\n\nlab\n\n\n\n\nLab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab 4: Spring Boot and Docker\n\n\nLab\n\n\n\n\ndevops\n\n\nlab\n\n\n\n\nLab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab 2: Spring Boot Intro\n\n\nLab\n\n\n\n\ndevops\n\n\nlab\n\n\n\n\nLab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab 3: Spring Boot and AWS S3\n\n\nLab\n\n\n\n\ndevops\n\n\nlab\n\n\n\n\nLab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIDE: IntellJIdea\n\n\nIntellJIdea\n\n\n\n\ndevops\n\n\nIntellJIdea\n\n\nide\n\n\n\n\nVisual Code IDE\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nLab 1: chat App\n\n\nLab\n\n\n\n\ndevops\n\n\nlab\n\n\n\n\nLab\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nHow to document: Quarto and Obsidian\n\n\nQuarto and Obsidian\n\n\n\n\ndevops\n\n\nobsidian\n\n\nquarto\n\n\ndocument\n\n\n\n\nObsidian is both a Markdown editor and a knowledge base app\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIDE: Visual Code\n\n\nVisual Code IDE\n\n\n\n\ndevops\n\n\nvisual-code\n\n\nide\n\n\n\n\nVisual Code IDE\n\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAbout this site\n\n\n\n\n\n\n\nabout\n\n\n\n\n\n\n\n\n\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAbout me\n\n\n\n\n\n\n\nabout\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nPage Not Found\n\n\n\n\n\n\n\n\n\n\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n\n\n\n\n\n  Articles table \n\n\n\n  top \n\n\n\n IFCD0210 Official Docs"
  },
  {
    "objectID": "learning/learning-listing-card-books.html",
    "href": "learning/learning-listing-card-books.html",
    "title": "Books cards",
    "section": "",
    "text": "Reading is essential for those who seek to rise above the ordinary. - Jim Rohn\n\n\nWhy should I read books?\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nAntifragile: Things That Gain from Disorder (Incerto)\n\n\nAntifragile: Things That Gain from Disorder (Incerto)\n\n\n\n\nassay\n\n\n\n\nThis book explores how systems can benefit from shocks and uncertainty, and provides insights into how we can design more robust systems and institutions.\n\n\n\n\n\n\nMonday, May 1, 2023\n\n\nNassim Nicholas Taleb\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAtomic Habits\n\n\nJames Clear, 2016, Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones\n\n\n\n\npsychology\n\n\n\n\nA supremely practical and useful book. James Clear distills the most fundamental information about habit formation, so you can accomplish more by focusing on less.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nAwekenings\n\n\nAwekenings\n\n\n\n\nneuroscience\n\n\n\n\nThe classic account of survivors of the encephalitic lethargica and their return to the world after decades of “sleep.” This book was the inspiration for the 1990 film starring Robert De Niro and Robin Williams.\n\n\n\n\n\n\nMonday, May 1, 2023\n\n\nOliver Sacks\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nBuilding a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential\n\n\nBuilding a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential\n\n\n\n\nstrategy\n\n\n\n\nIntroduces the concept of a ‘second brain’ for organizing and managing information in the digital age, providing strategies and tools to enhance creativity and productivity.\n\n\n\n\n\n\nTuesday, August 27, 2019\n\n\nTiago Forte\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nBurnout\n\n\nHerbert Freudenberger, 1980, Burnout: The High Cost of High Achievement\n\n\n\n\npsychology\n\n\n\n\nAn early and influential work on the topic of burnout. Herbert Freudenberger explores the causes and symptoms of burnout and provides practical tips for avoiding and overcoming it.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nC\n\n\nDennis Ritchie, 1978, C: A Programming Language\n\n\n\n\nprogramming\n\n\n\n\nA seminal work in the world of computer programming. Dennis Ritchie introduces the C programming language, which has since become a staple of software development and remains widely used to this day.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nChimpanzee Politics\n\n\nFrans de Waal, 1982, Chimpanzee Politics: Power and Sex among Apes\n\n\n\n\nassay\n\n\n\n\nAn groundbreaking book on primate behavior and social dynamics. Frans de Waal provides a deep insight into the complex relationships between chimpanzees and how they influence their political power structures.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, March 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nClean Code: A Handbook of Agile Software Craftsmanship\n\n\n\n\n\n\n\nprogramming\n\n\n\n\nProvides principles and best practices for writing clean, maintainable, and efficient code, helping software developers improve their coding skills and deliver high-quality software.\n\n\n\n\n\n\nMonday, August 11, 2008\n\n\nRobert C. Martin\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nCollective Illusions\n\n\nTodd Rose, 2022, Collective Illusions: Conformity, Complicity, and the Science of Why We Make Bad Decisions\n\n\n\n\npsychology\n\n\n\n\nDrawing on cutting-edge neuroscience and social psychology research, an acclaimed author demonstrates how so much of our thinking is informed by false assumptions—making us dangerously mistrustful as a society and needlessly unhappy as individuals.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nConsciousness Explained\n\n\nConsciousness Explained\n\n\n\n\nneuroscience\n\n\n\n\nDaniel Dennett’s brilliant exploration of human consciousness — named one of the ten best books of the year by the New York Times — is a masterpiece beloved by both scientific experts and general readers (New York Times Book Review).\n\n\n\n\n\n\nMonday, May 1, 2023\n\n\nDaniel C. Dennett\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nConsilience: The Unity of Knowledge\n\n\nConsilience: The Unity of Knowledge\n\n\n\n\nassay\n\n\n\n\nExplores the integration of knowledge from various fields, including science, philosophy, and the humanities, to develop a comprehensive understanding of the world.\n\n\n\n\n\n\nThursday, April 29, 1999\n\n\nEdward O. Wilson\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nData Science at the Command Line\n\n\nJeroen Janssens, 2014, Data Science at the Command Line: Facing the Future with Time-Tested Tools\n\n\n\n\ndevops\n\n\n\n\nAn innovative book that teaches how to perform data science tasks at the command line, streamlining workflows and making them more efficient. Jeroen Janssens provides a comprehensive guide for data scientists who want to work smarter, not harder.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDescartes’ Error: Emotion, Reason, and the Human Brain\n\n\nDescartes’ Error: Emotion, Reason, and the Human Brain\n\n\n\n\nneuroscience\n\n\n\n\nExplores the relationship between emotions, reason, and decision-making, presenting a new perspective on the crucial role of emotions in human cognition and behavior.\n\n\n\n\n\n\nSaturday, August 27, 2005\n\n\nAntonio Damasio\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDesign Patterns\n\n\nErich Gamma, Richard Helm, Ralph Johnson, John Vlissides, 1994, Design Patterns: Elements of Reusable Object-Oriented Software\n\n\n\n\ndesign\n\n\n\n\nA seminal book in software engineering that has become an essential reference for developers. The authors describe 23 design patterns that provide solutions to recurring problems in software design, making it easier to write maintainable and scalable code.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDesànim de lucre\n\n\nDesànim de lucre\n\n\n\n\nassay\n\n\n\n\nA book about the negative impacts of profit-oriented thinking on society and individuals.\n\n\n\n\n\n\nTuesday, January 1, 2019\n\n\n’Abel Cutillas\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDevOps with OpenShift\n\n\nStefano Picozzi, Mike Hepburn & Noel O’Connor, 2017, DevOps with OpenShift: Cloud Deployments Made Easy\n\n\n\n\ndevops\n\n\n\n\nA comprehensive guide to DevOps with OpenShift, the powerful platform for container-based applications. The authors explain how to implement a continuous delivery pipeline and how to manage containers in a DevOps environment.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDive Into DESIGN PATTERNS\n\n\nAlexander Shvets, 2022, Dive Into DESIGN PATTERNS: An ebook on design patterns and the principles behind them\n\n\n\n\ndesign\n\n\n\n\nDesign patterns help you solve commonly-occurring problems in software design. But you can’t just find a pattern and copy it into your program, the way you can with off-the-shelf functions or libraries. A pattern is not a specific piece of code, but a general concept for solving a particular problem. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDomain Driven Design\n\n\nEric Evans, 2003, Domain Driven Design: Tackling Complexity in the Heart of Software\n\n\n\n\ndesign\n\n\n\n\nA groundbreaking book on software design that focuses on modeling complex software systems in a way that aligns with business goals. Eric Evans provides a practical and insightful approach to software design that helps teams build systems that are scalable, maintainable, and easily adaptable to changing business needs.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDon’t Believe Everything You Think: Why Your Thinking Is The Beginning & End Of Suffering (Beyond Suffering)\n\n\n\n\n\n\n\nneuroscience\n\n\n\n\nExplores the connection between thoughts, beliefs, and suffering, offering insights and techniques to challenge and transform limiting thoughts for personal growth and well-being.\n\n\n\n\n\n\nFriday, July 1, 2022\n\n\nJoseph Nguyen\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nElements of Style\n\n\nStrunk and White, 1918, The Elements of Style\n\n\n\n\ncommunication\n\n\n\n\nA classic guide to writing clear and concise English. Strunk and White’s ‘Elements of Style’ covers everything from grammar and syntax to style and tone, making it an essential reference for writers and students.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nExecution: The Discipline of Getting Things Done\n\n\nLarry Bossidy, Ram Charan,Charles Burck (with), 2006, Execution: The Discipline of Getting Things Done\n\n\n\n\nassay\n\n\n\n\n#1 NEW YORK TIMES BESTSELLER - More than two million copies in print! The premier resource for how to deliver results in an uncertain world, whether you’re running an entire company or in your first management job. A must-read for anyone who cares about business.–The New York Times\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n5 min\n\n\nTuesday, March 14, 2023\n\n\n\n\n\n\n  \n\n\n\n\nFooled by Randomness\n\n\nNassim Nicholas Taleb, 2001, Fooled by Randomness: The Hidden Role of Chance in Life and in the Markets (Incerto)\n\n\n\n\nassay\n\n\n\n\nA fascinating exploration of the role that randomness plays in our lives, from the stock market to our personal relationships.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nNassim Nicholas Taleb\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nGetting Things Done\n\n\nDavid Allen, 2015, etting Things Done: The Art of Stress-Free Productivity\n\n\n\n\nagile\n\n\n\n\nSince it was first published almost fifteen years ago, David Allen’s Getting Things Done has become one of the most influential business books of its era, and the ultimate book on personal organization. “GTD” is now shorthand for an entire way of approaching professional and personal tasks, and has spawned an entire culture of websites, organizational tools, seminars, and offshoots.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nSaturday, March 25, 2023\n\n\n\n\n\n\n  \n\n\n\n\nHow to Create a Mind: The Secret of Human Thought Revealed\n\n\nHow to Create a Mind: The Secret of Human Thought Revealed\n\n\n\n\nneuroscience\n\n\n\n\nExplores the mysteries of human thought and proposes theories on how to replicate the human mind in artificial intelligence.\n\n\n\n\n\n\nTuesday, February 26, 2013\n\n\nRay Kurzweil\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nHow to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life\n\n\nDilbert creator Scott Adams’ funny memoir about his many failures and what they eventually taught him about success\n\n\n\n\nstrategy\n\n\n\n\nShares the author’s experiences and insights on success, failure, and embracing a system-oriented approach to achieve goals and navigate life’s challenges.\n\n\n\n\n\n\nTuesday, October 22, 2013\n\n\nScott Adams\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nHow to Measure Anything\n\n\nDouglas W. Hubbard, 2010, How to Measure Anything: Finding the Value of Intangibles in Business\n\n\n\n\nagile\n\n\n\n\nA groundbreaking book on measurement that challenges traditional approaches to data collection and analysis. Douglas W. Hubbard provides practical techniques for measuring intangible assets, such as customer satisfaction and employee morale, that are critical to business success.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nTuesday, March 14, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIkigai: The Japanese Secret to a Long and Happy Life\n\n\nHéctor García and Francesc Miralles, 2017, Ikigai: The Japanese Secret to a Long and Happy Life\n\n\n\n\nstrategy\n\n\n\n\nExplores the concept of ikigai, which translates to ‘reason for being’ in Japanese, and offers insights on how to find purpose, joy, and fulfillment in life.\n\n\n\n\n\n\nTuesday, August 29, 2017\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIncerto\n\n\nNicholas Taleb, 2020, Incerto: Navigating Uncertainty and the Four Traps of Success\n\n\n\n\nassay\n\n\n\n\nA comprehensive guide to navigating uncertainty and the traps of success. Incerto, written by renowned author Nicholas Taleb, explores the intricacies of decision-making and how to avoid the traps that often lead to failure.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nKubernetes Native Microservices\n\n\nJohn Clingan and Ken Finnigan, 2021, Kubernetes Native Microservices with Quarkus and MicroProfile\n\n\n\n\ndevops\n\n\n\n\nEntire books are available on Quarkus, microservices, MicroProfile, Spring, and Kubernetes. However, they tend to focus only on each specific topic. This book covers how to combine these topics into an effective and integrated development and deployment stack. Kubernetes-native microservices utilize and integrate with Kubernetes features naturally and efficiently. The result is a productive developer experience that is consistent with the expectations of Kubernetes platform administrators.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMan’s Search for Meaning\n\n\nViktor E. Frank, 1947, Man’s Search for Meaning\n\n\n\n\npsychology\n\n\n\n\nA prominent Viennese psychiatrist before the war, Viktor Frankl was uniquely able to observe the way that both he and others in Auschwitz coped (or didn’t) with the experience.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMaps of Meaning\n\n\nJordan B. Peterson, 1999, Maps of Meaning: The Architecture of Belief\n\n\n\n\nneuroscience\n\n\n\n\nWhy have people from different cultures and eras formulated myths and stories with similar structures? What does this similarity tell us about the mind, morality, and structure of the world itself? Jordan Peterson offers a provocative new hypothesis that explores the connection between what modern neuropsychology tells us about the brain and what rituals, myths, and religious stories have long narrated. A cutting-edge work that brings together neuropsychology, cognitive science, and Freudian and Jungian approaches to mythology and narrative, Maps of Meaning presents a rich theory that makes the wisdom and meaning of myth accessible to the critical modern mind.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMicroservices Patterns\n\n\nChris Richardson, 2020, Microservices Patterns: With examples in Java\n\n\n\n\njava\n\n\n\n\nA comprehensive guide to designing and building microservices. Chris Richardson provides a wealth of practical patterns and best practices for building scalable and resilient microservices, with examples in Java.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMicroservices for Java Developers\n\n\nRafael Benevides, 2019, Microservices for Java Developers: A Hands-On Introduction to Frameworks and Containers - Java Developers\n\n\n\n\njava\n\n\n\n\nThe microservice architectural approach reaches into the foundation of your organization, letting you build complex systems to adapt to rapidly changing competitive markets. Now in its second edition, this step-by-step guide introduces concepts like immutable delivery, and gets you started building distributed systems for managing microservices using Linux containers, Kubernetes, and three different Java frameworks: Spring Boot, Dropwizard, and WildFly Swarm (WildFly Swarm was renamed Thorntail in 2018).\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMind Management Not Time Management\n\n\nDavid Kadavy, 2020, Mind Management Not Time Management: A Guide to Improving Your Productivity and Happiness\n\n\n\n\nagile\n\n\n\n\nA practical guide to improving your productivity and happiness. Mind Management Not Time Management teaches you how to manage your thoughts and emotions, so you can achieve your goals and live a more fulfilling life.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n3 min\n\n\nSaturday, March 11, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMindset\n\n\nCarol Dweck, 2006, Mindset: The New Psychology of Success\n\n\n\n\npsychology\n\n\n\n\nA powerful and inspiring book that challenges traditional notions of intelligence and talent. Carol Dweck introduces the concept of a growth mindset and shows how embracing a growth mindset can lead to greater success and fulfillment in life.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nModern Java EE Design Patterns\n\n\nMarkus Eisele, 2016, Modern Java EE Design Patterns: Building Scalable Architecture for Sustainable Enterprise Development\n\n\n\n\ndesign\n\n\n\n\nWith the ascent of DevOps, microservices, containers, and cloud-based development platforms, the gap between state-of-the-art solutions and the technology that enterprises typically support has greatly increased. But as Markus Eisele explains in this O’Reilly report, some enterprises are now looking to bridge that gap by building microservice-based architectures on top of Java EE.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMy Life as Quant\n\n\nEmanuel Derman, 2007, My life as a quant\n\n\n\n\nfinance\n\n\n\n\nA memoir by Emanuel Derman, providing insights into the world of quantitative finance and the author’s experiences as a physicist-turned-Wall-Street-quant.\n\n\n\n\n\n\nFriday, November 5, 2004\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nMy Stroke of Insight\n\n\nJill Bolte Taylor, 2009, My Stroke of Insight: A Brain Scientist’s Personal Journey\n\n\n\n\nneuroscience\n\n\n\n\nTransformative…[Taylor’s] experience…will shatter [your] own perception of the world.\n\n\n\n\n\n\nTuesday, January 1, 2019\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarkus Cookbook\n\n\nAlex Soto Bueno, Jason Porter, February 9, 2021, Quarkus Cookbook: Developing Cloud-Native Applications with Java\n\n\n\n\njava\n\n\n\n\nOptimized for Kubernetes, Quarkus is designed to help you create Java applications that are cloud-first, container-native, and serverless capable. With this cookbook, authors Alex Soto Bueno and Jason Porter from Red Hat provide detailed solutions for installing, interacting with, and using Quarkus in the development and production of microservices\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nQuarkus for Spring Developers\n\n\nEric Deandrea, August 31, 2021, Quarkus for Spring Developers\n\n\n\n\njava\n\n\n\n\nAn essential guide for Spring developers who want to embrace cloud-native development with Java. Eric Deandrea provides a clear and practical approach to building cloud-native applications with Quarkus, a modern, fast, and efficient Java framework.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nScrum\n\n\nJ.J. shuterland, 2014, Scrum: The Art of Doing Twice the Work in Half the Time\n\n\n\n\nagile\n\n\n\n\nFull of engaging stories and real-world examples. The project management method known as Scrum may be the most widely deployed productivity tool among high-tech companies. On a mission to put this tool into the hands of the broader business world for the first time, Jeff Sutherland succeeds brilliantly\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSite Reliability Engineering\n\n\nBetsy Beyer, Chris Jones, Jennifer Petoff and Niall Richard Murphy, 2016, How Google runs production systems\n\n\n\n\ndevops\n\n\n\n\nMembers of the SRE team explain how their engagement with the entire software lifecycle has enabled Google to build, deploy, monitor, and maintain some of the largest software systems in the world.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSkin in the Game\n\n\nNassim Nicholas Taleb, 2018, Skin in the Game: Hidden Asymmetries in Daily Life (Incerto)\n\n\n\n\nassay\n\n\n\n\nA thought-provoking examination of the importance of ‘skin in the game’ in various aspects of life, from politics to economics to personal relationships.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nStratospheric: From Zero to Production with Spring Boot and AWS\n\n\nStratospheric, 2020, From Zero to Production with Spring Boot and AWS: Building Scalable and Resilient Applications\n\n\n\n\njava\n\n\n\n\nA comprehensive guide to building and deploying scalable and resilient applications with Spring Boot and AWS. Stratospheric provides step-by-step guidance and best practices for building applications from zero to production, leveraging the power of both technologies.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSwimming with Sharks\n\n\nJoris Luyendijk, 2015, Swimming with Sharks: My Journey into the World of the Bankers\n\n\n\n\nfinance\n\n\n\n\nAn insider’s account of the culture and practices within the banking industry, based on interviews with bankers during the global financial crisis.\n\n\n\n\n\n\nThursday, September 4, 2014\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Art of Agile Development\n\n\nJames Shore, 2007, The Art of Agile Development: Pragmatic guide to agile software development\n\n\n\n\nstrategy\n\n\n\n\nThe Art of Agile Development contains practical guidance for anyone considering or applying agile development for building valuable software. It discusses the various methods of agile development, including Scrum, Extreme Programming (XP), Lean, and Kanban, providing readers with an overview of each and advice on how to choose the method that best fits their needs.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Bed of Procrustes\n\n\nNassim Nicholas Taleb, 2010, The Bed of Procrustes: Philosophical and Practical Aphorisms (Incerto)\n\n\n\n\nassay\n\n\n\n\nA collection of witty and thought-provoking aphorisms on topics ranging from uncertainty to philosophy to personal growth.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Black Swan\n\n\nNassim Nicholas Taleb, 2007, The Black Swan: The Impact of the Highly Improbable (Incerto)\n\n\n\n\nassay\n\n\n\n\nA groundbreaking investigation into the role of rare and unpredictable events in shaping history, culture, and individual lives.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Buddha and the Badass\n\n\nVishen Lakhiani, 2020, The Buddha and the Badass: The Secret Spiritual Art of Succeeding at Work\n\n\n\n\nassay\n\n\n\n\nHave You Ever Noticed How Some People Have All the Luck at Work?They generate ideas on the fly. They magnetically attract the right people. Others crave joining their missions, their companies, their teams. They move with fluidity and ease, nailing projects with a smile on their face. Getting the coveted raises and promotions. These superstars are often able to get in the zone, displaying remarkable focus and creativity. They are masters of relationships, forging close ties with their teams and everyone around them. When they do business, it’s about win-win. And one of the most unique qualities they seem to have is remarkable luck. Things just go easy for them. It seems like the Universe bends in their favor.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Changing World Order\n\n\nRay Dalio, 2021, The Changing World Order: Why Nations Succeed and Fail\n\n\n\n\nstrategy\n\n\n\n\nExplores the rise and fall of empires and civilizations throughout history, providing insights into the factors that contribute to the success and failure of nations.\n\n\n\n\n\n\nTuesday, October 19, 2021\n\n\nRay Dalio\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Communication Book\n\n\nMikal Nielsen, 2018, The Communication Book: 44 Ideas for Better Conversations Every Day\n\n\n\n\ncommunication\n\n\n\n\nThe Communication Book provides 44 communication techniques that can be used in everyday situations to improve communication skills. It covers a wide range of topics such as listening, speaking, and body language, and provides practical advice and exercises to help readers improve their communication skills.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nMikal Nielsen\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Compound Effect: Jumpstart Your Income, Your Life, Your Success\n\n\n\n\n\n\n\nstrategy\n\n\n\n\nBased on the principle that decisions shape your destiny, this book reveals how small, consistent actions can lead to significant improvements in your life over time.\n\n\n\n\n\n\nMonday, May 1, 2023\n\n\nDarren Hardy\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Creative Habit: Learn It and Use It for Life\n\n\nTwyla Tharp, 2007, The Creative Habit: Learn It and Use It for Life\n\n\n\n\nneuroscience\n\n\n\n\nProvides insights and strategies to cultivate creativity as a habit, offering guidance for artists, writers, and anyone seeking to unlock their creative potential.\n\n\n\n\n\n\nTuesday, December 27, 2005\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Intelligence Trap\n\n\nThe Intelligence Trap, 2019, The Intelligence Trap: Why Smart People Make Dumb Decisions\n\n\n\n\npsychology\n\n\n\n\nAn exploration of why even the smartest people can make poor decisions. The Intelligence Trap, written by science journalist David Robson, reveals the cognitive biases and traps that can lead us astray, and provides practical strategies for overcoming them.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nDavid Robson\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Joy of Living\n\n\nYongey Mingyur Rinpoche, 2008, The Joy of Living: Unlocking the Secret and Science of Happiness\n\n\n\n\nneuroscience\n\n\n\n\nBlends the ancient wisdom of Tibetan Buddhism with modern scientific insights, offering guidance on finding lasting happiness and peace.\n\n\n\n\n\n\nTuesday, March 6, 2007\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Linux command line\n\n\nWilliam Shotts, The Linux command line\n\n\n\n\nprogramming\n\n\n\n\nDesigned for the new command line user, this 555-page volume covers the same material as LinuxCommand.org but in much greater detail. In addition to the basics of command line use and shell scripting, The Linux Command Line includes chapters on many common programs used on the command line, as well as more advanced topics.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nAuthor Name\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Master and His Emissary\n\n\nIain McGilchrist, 2009, The Master and His Emissary: The Divided Brain and the Making of the Western World\n\n\n\n\nneuroscience\n\n\n\n\nA profound and compelling exploration of the role of the brain in shaping our civilization. Iain McGilchrist argues that the split between the two hemispheres of the brain has led to a host of cultural and philosophical issues, and offers a compelling vision for how we might heal this divide.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Matter With Things\n\n\nIan McGilchrist, 2019, The Matter With Things: Our Brains, Our Delusions, and the Unmaking of the World\n\n\n\n\nneuroscience\n\n\n\n\n\n\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Molecule of More\n\n\nThe Molecule of More: How a Single Chemical in Your Brain Drives Love, Sex, and Creativity―and Will Determine the Fate of the Human\n\n\n\n\nneuroscience\n\n\n\n\nThe answer is found in a single chemical in your brain: dopamine. Dopamine ensured the survival of early man. Thousands of years later, it is the source of our most basic behaviors and cultural ideas―and progress itself.\n\n\n\n\n\n\nDaniel Z. Lieberman and Michael E. Long\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Psychology of Money\n\n\nMorgan Housel, 2020, The Psychology of Money: Timeless lessons on wealth, greed, and happiness\n\n\n\n\nfinance\n\n\n\n\nExplores the psychological factors that influence our relationship with money, offering valuable insights into wealth accumulation, risk management, and financial well-being.\n\n\n\n\n\n\nTuesday, September 8, 2020\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Relaxation Revolution\n\n\nWilliam Proctor, Herbert Benson, 2010, The Relaxation Revolution: Enhancing Your Personal Health Through the Science and Genetics of Mind Body Healing\n\n\n\n\npsychology\n\n\n\n\nA comprehensive guide to reducing stress and improving well-being. The Relaxation Revolution provides practical strategies for relaxation and mindfulness, so you can lead a more balanced and fulfilling life.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Righteous Mind\n\n\nJonathan Haidt, 2013, The Righteous Mind: Why Good People are Divided by Politics and Religion\n\n\n\n\npsychology\n\n\n\n\nA groundbreaking exploration of the roots of human morality. The Righteous Mind, written by social psychologist Jonathan Haidt, provides insights into the ways in which moral values and beliefs influence our political and religious views.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Rudest Book Ever\n\n\nShwetabh Gangwar. 2019, The Rudest Book Ever\n\n\n\n\nstrategy\n\n\n\n\nChallenges societal norms and offers unconventional advice on topics such as relationships, self-improvement, and personal growth, with a straightforward and direct approach.\n\n\n\n\n\n\nMonday, February 15, 2021\n\n\nalbertprofe\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Second Brain: A Groundbreaking New Understanding Of Nervous Disorders Of The Stomach And Intestine\n\n\n\n\n\n\n\nneuroscience\n\n\n\n\nExplores the complex relationship between the brain and the gut, shedding light on the connection between the nervous system and digestive disorders.\n\n\n\n\n\n\nSaturday, January 2, 1999\n\n\nMichael Gershon\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe Status Game\n\n\nWill Storr, 2021, The Status Game: On Social Position and How We Use It\n\n\n\n\npsychology\n\n\n\n\nAn in-depth examination of the role of social status and prestige in our lives. The Status Game provides insights and strategies for navigating the complex world of status and prestige, so you can achieve your goals and live a more fulfilling life.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe five disfunctions of a team\n\n\nPatrick Lencioni, 2002, The five disfunctions of a team\n\n\n\n\nstrategy\n\n\n\n\nIn this leadership fable, Lencioni reveals the five dysfunctions which go to the very heart of why teams even the best ones-often struggle. He outlines a powerful model and actionable steps that can be used to overcome these common hurdles and build a cohesive, effective team.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nPatrick Lencioni\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThe mom test\n\n\nHow to talk to customers & learn if your business is a good idea when everyone is lying to you.\n\n\n\n\ncommunication\n\n\n\n\nThe Mom Test is a simple, practical guide to talking to your customers without annoying them.\n\n\n\n\n\n\nMonday, May 1, 2023\n\n\nRob Fitzpatrick\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nThinking in Java\n\n\nEckel Bruce, 2006, Scrum: The Art of Doing Twice the Work in Half the Time\n\n\n\n\njava\n\n\n\n\nThinking in Java has earned raves from programmers worldwide for its extraordinary clarity, careful organization, and small, direct programming examples. From the fundamentals of Java syntax to its most advanced features, Thinking in Java is designed to teach, one simple step at a time.\n\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWrite Tight: Say Exactly What You Mean with Precision and Power\n\n\n\n\n\n\n\ncommunication\n\n\n\n\nThis book provides writers with the tools and techniques to write clear, concise, and compelling prose.\n\n\n\n\n\n\nMonday, May 1, 2023\n\n\nWilliam Brohaugh\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n  \n\n\n\n\nYour Next Five Moves: Master the Art of Business Strategy\n\n\nYour Next Five Moves: Master the Art of Business Strategy\n\n\n\n\nstrategy\n\n\n\n\nOffers strategies and insights to develop effective business strategies, make calculated decisions, and achieve long-term success in the competitive world of business.\n\n\n\n\n\n\nTuesday, September 1, 2020\n\n\nPatrick Bet-David\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n\n\n\n\n\n  Books table \n\n\n\n  top \n\n\n\n Articles table"
  },
  {
    "objectID": "learning/learning-listing-table-articles.html",
    "href": "learning/learning-listing-table-articles.html",
    "title": "Articles table",
    "section": "",
    "text": "You can look up the following table listing for additional information:\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nCategories\n\n\nTitle\n\n\nReading Time\n\n\nModified\n\n\n\n\n\n\n\n\n\n\n\nPage Not Found\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nabout,images-credit\n\n\nAbout images credit\n\n\n1 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nifcd0210,backlog\n\n\nIFCD0210 Sprint Backlog\n\n\n0 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nifcd0210,backlog\n\n\nIFCD0210 Product Backlog\n\n\n23 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nreactjs,lab\n\n\nLab#RE02-1: Router & Hooks\n\n\n15 min\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nreactjs,hooks,rules\n\n\nReact JS: Rules of Hooks\n\n\n1 min\n\n\nThursday, May 4, 2023\n\n\n\n\n\n\n\nreactjs,hooks,useReducer\n\n\nReact JS: useReducer\n\n\n5 min\n\n\nThursday, May 4, 2023\n\n\n\n\n\n\n\nreactjs,hooks,useState\n\n\nReactJS: useState\n\n\n6 min\n\n\nThursday, May 4, 2023\n\n\n\n\n\n\n\nreactjs,hooks,useRef\n\n\nReact JS: useRef\n\n\n2 min\n\n\nWednesday, May 3, 2023\n\n\n\n\n\n\n\nreactjs,props\n\n\nReact JS: props and state\n\n\n11 min\n\n\nWednesday, May 3, 2023\n\n\n\n\n\n\n\nreactjs,hooks,useEfect\n\n\nReact JS: useEffect\n\n\n4 min\n\n\nWednesday, May 3, 2023\n\n\n\n\n\n\n\nreactjs,es6,spread,operator\n\n\nReact JS ES6: spread operator\n\n\n3 min\n\n\nWednesday, May 3, 2023\n\n\n\n\n\n\n\nabout,writing\n\n\nWriting\n\n\n1 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\njavase,basics,concepts\n\n\nJava Standard Edition: Basics\n\n\n2 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nabout,questions\n\n\nUseful Questions\n\n\n1 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nabout,learning\n\n\nLearning: tips\n\n\n3 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nabout,writing\n\n\nTaking Notes\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nabout,writing\n\n\nAuto-Evaluate\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nvocabulary,web\n\n\nWeb Vocabulary\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nreactjs,async\n\n\nReact JS App: async\n\n\n4 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nreactjs,hooks,custom\n\n\nReactJS: custom hooks\n\n\n1 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nreactjs,hooks,useContext\n\n\nReact JS: useContext\n\n\n4 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nreactjs,lab,Lab#RE03\n\n\nLab#RE03-1: to-do app\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nreactjs,lab,Lab#RE05\n\n\nLab#RE05-1: chat & websockets\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nreactjs,lab,Lab#RE04\n\n\nLab#RE04-1: HighCharts\n\n\n0 min\n\n\nThursday, April 27, 2023\n\n\n\n\n\n\n\nreactjs,project,devtools\n\n\nReact JS: Create a React project\n\n\n6 min\n\n\nMonday, April 24, 2023\n\n\n\n\n\n\n\nreactjs,lab\n\n\nLab#RE01-1: API Rest Axios\n\n\n8 min\n\n\nMonday, April 17, 2023\n\n\n\n\n\n\n\nreactjs,components\n\n\nReact JS: Components\n\n\n5 min\n\n\nMonday, April 17, 2023\n\n\n\n\n\n\n\nspring,MVC\n\n\nSprings Servlets\n\n\n3 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nscrum,resources,readings\n\n\nSCRUM Resources\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nspring,MVC\n\n\nSpring MVC\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nmarkup,publish,quarto,qmd\n\n\nQuarto Markdown: publishing\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nmarkup,qmd,quarto,python\n\n\nQuarto Markdown: code & data\n\n\n3 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nmarkup,qmd,quarto,cheat-sheet\n\n\nQuarto Markdown: cheat-sheet\n\n\n4 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nmarkup,qmd,quarto,rest,api\n\n\nQuarto Markdown: api rest call\n\n\n4 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nlinux,lab,qtool,bash\n\n\nLinux Lab#LI04-1: Bash scripting, qtool\n\n\n15 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nmarkup,qmd,quarto,ojs\n\n\nQuarto Markdown: OJS Cells\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nvocabulary,Spring-Boot\n\n\nSpring Boot Vocabulary\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nvocabulary,scrum\n\n\nSCRUM Vocabulary\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nvocabulary,javase\n\n\nJava SE Vocabulay\n\n\n1 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nvocabulary,reactjs\n\n\nReactJS Vocabulary\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nvocabulary\n\n\nGeneral Vocabulary\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nvocabulary,database\n\n\nDataBase Vocabulary\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nvocabulary,devops\n\n\nDevOps Vocabulary\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nlisting,books,reading\n\n\nBooks cards\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\n\nlisting,table\n\n\nBooks table\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nabout,writing\n\n\nComments\n\n\n1 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nlisting,card\n\n\nArticles cards\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,lab,composition,plan\n\n\nLab#SE03-2: Library/Book, Sprint Zero\n\n\n12 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,lab,inherence\n\n\nLab#SE03-3: Library/Book, Expand Model\n\n\n6 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,lab,composition,model\n\n\nLab#SE03-1: Library/Book, Core-Model\n\n\n5 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,lab,interativity,console,controller,testing\n\n\nLab#SE02-5: Movie/Review, simulate interactivity by console\n\n\n6 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,lab,model,composition,inherence\n\n\nLab#SE00-1: Maven Person\n\n\n5 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,encapsulation,oop,concepts\n\n\nJava SE: Encapsulation\n\n\n1 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,state,design-patterns,concepts\n\n\nState\n\n\n4 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,strategy,design-patterns,concepts\n\n\nStrategy\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,observer,design-patterns,concepts\n\n\nObserver\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,singleton,design-patterns,concepts\n\n\nSingleton\n\n\n5 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,design-patterns,concepts\n\n\nJava Patterns: Types\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,factory,design-patterns,concepts\n\n\nFactory\n\n\n4 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,decorator,design-patterns,concepts\n\n\nDecorator\n\n\n3 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,facade,design-patterns,concepts\n\n\nFacade\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,builder,design-patterns,concepts\n\n\nBuilder\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,commander,design-patterns,concepts\n\n\nCommander\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,composite,design-patterns,concepts\n\n\nComposite\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,abstract-factory,design-patterns,concepts\n\n\nAbstract Factory\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,bridge,design-patterns,concepts\n\n\nBridge\n\n\n2 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,lambda,stream,optional\n\n\nJava SE: Java 8\n\n\n11 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,inherence,abstract,interface\n\n\nJava SE: Abstract/Interface\n\n\n3 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\njavase,resources,readings\n\n\nJava SE Resources\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\n\n\nHome\n\n\n6 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nifcd0210,training\n\n\nIFCD0210 Deliveries\n\n\n1 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nifcd0210,training\n\n\nIFCD0210 Official Docs\n\n\n0 min\n\n\nFriday, March 31, 2023\n\n\n\n\n\n\n\nifcd0210,backlog\n\n\nIFCD0210 Projects Backlog\n\n\n1 min\n\n\nFriday, March 17, 2023\n\n\n\n\n\n\n\n\nifcd0210,calendar,forecast,timetable\n\n\nIFCD0210 Calendar\n\n\n1 min\n\n\nWednesday, March 8, 2023\n\n\n\n\n\n\n\nscrum,scrum-guide\n\n\nSCRUM Guide\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nspring,framework\n\n\nSpring Framework\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,concepts,agile-manifesto\n\n\nAgile Manifesto\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,concepts,spacex\n\n\nSCRUM Agile Methodology\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week7,mindset,time-management\n\n\nWeek 7: Managing time and mind\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week8,specialist\n\n\nWeek 8: The specialist\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week9,albertusDylemma\n\n\nWeek 9: Albertus’ Dylemma\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week2,user-story\n\n\nWeek 2: User stories, tasks and habits\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week4,scrummaster\n\n\nWeek 4: ScrumMaster, how it works\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week5,mindset\n\n\nWeek 5: Mindset, the key to everythng\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week6,product-owner\n\n\nWeek 6: Product Owner\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-wewek3,communication\n\n\nWeek 3: Communication and value\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week1,meetings,impediments\n\n\nWeek 1: Meetings and impediments\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nscrum,scrum-week10,beyond-scrum\n\n\nWeek 10: Beyond SCRUM\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,resources,readings\n\n\nReactJS Resources\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,virutal-dom,render\n\n\nReact JS: render virtual DOM\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,concepts,hooks,introduction\n\n\nReact JS: Introduction\n\n\n6 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,jsx,render\n\n\nReact JS: JSX\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,es6,arrays\n\n\nReact JS ES6: array, data and key\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,es6,destructuring\n\n\nReact JS ES6: destructuring\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,es6,import-modules\n\n\nReact JS ES6: import modules\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,es6,arrow\n\n\nReact JS ES6: arrow functions\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,events\n\n\nReact JS App: events\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,router\n\n\nReact JS App: router\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,styling,css,scss\n\n\nReact JS App: styling\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nmarkup,resources,readings\n\n\nMarkUp Languages Resources\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nreactjs,conditional-render\n\n\nReact JS App: conditional render\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nmarkup,publish,quarto\n\n\nLab#MD01-1: Create and publish by Quarto\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nmarkup,qmd,quarto\n\n\nQuarto Markdown: creating\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nmarkup,qmd,quarto,introduction\n\n\nQuarto Markdown: basics\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nmarkup,HTML,introduction\n\n\nHTML Markup\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nmarkup,introduction\n\n\nIntroduction Markup\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nmarkup,md,introduction\n\n\nMarkdown Markup\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nCSS,introduction\n\n\nCascade Style Sheet\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nHTML,qmd,quarto\n\n\nMarkdown and HTML working together, good idea?\n\n\n6 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nw3css,introduction\n\n\nCSS: W3.css\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,resources,readings\n\n\nLinux Resources\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,virtual-machines,vmware,virtualbox\n\n\nLinux: Virtual Machines\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,bash,pipe\n\n\nLinux: pipes\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,bash,su,sudo\n\n\nLinux: su and sudo\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,file-system\n\n\nLinux: File System\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,bash\n\n\nLinux: Bash\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,concepts\n\n\nLinux: basic concepts\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,Ubuntu,distro\n\n\nLinux Distros: Ubuntu\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,openSuse,distro\n\n\nLinux Distros: openSuse\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,red-hat-enterprise-linux,distro,rhel\n\n\nLinux Distros: Red Hat Enterprise Linux\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,debian,distro\n\n\nLinux Distros: Debian\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,bash,app-distribution\n\n\nLinux Lab#LI04-3: Distribute the terminal app\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,manjaro,distro\n\n\nLinux Distros: Manjaro\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,mint,distro\n\n\nLinux Distros: Mint\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,bash\n\n\nLinux Lab#LI04-2: Bash scripts as terminal tool\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,bash,user\n\n\nLinux Lab#LI03-1: Manage users and groups\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,file-system\n\n\nLinux Lab#LI03-2: Manage files\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,hardware\n\n\nLinux Lab#LI03-4: Manage hardware\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,software\n\n\nLinux Lab#LI03-3: Manage software\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,bash,pipe\n\n\nLinux Lab#LI02-1: Export env user with grep and pipe\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,bash,user\n\n\nLinux Lab#LI01-3: Adjust user permissions\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,distro,install\n\n\nLinux Lab#LI01-2: Install at least three distributions\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nlinux,lab,distro\n\n\nLinux Lab#LI01-1: Choose Linux\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,interativity,coupling,controller\n\n\nLab#SE02-4: Movie/Review, interactivity and coupling\n\n\n11 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,composition,model\n\n\nLab#SE02-1: Movie/Review, Model\n\n\n6 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,manager,static,crud\n\n\nLab#SE02-2: Movie/Review, CRUD Operations\n\n\n9 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,singleton,factory\n\n\nLab#SE02-3: Movie/Review, factory\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,composition,factory,JSON\n\n\nLab#SE01-2: Maven/Gradle Person and Account stored in JSON\n\n\n6 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,composition,singleton\n\n\nLab#SE01-1: Maven/Gradle Person and Account\n\n\n11 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,model,interface,inherence\n\n\nLab#SE00-4: Abstract/Interface Human\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,model,composition\n\n\nLab#SE00-2: Maven Clinic\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,lab,model,composition,inherence\n\n\nLab#SE00-3: Library Model\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,concepts,oop,paradigm\n\n\nJava Standard Edition: Principles\n\n\n3 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,polymorphism,oop,concepts\n\n\nJava SE: Polymorphism\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,training,helsinki,mooc\n\n\nJava MOOC Helsinki\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,abstraction,oop,concepts\n\n\nJava SE: Abstraction\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,inherence,oop,concepts\n\n\nJava SE: Inherence\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,uml,design-patterns,concepts\n\n\nJava Patterns: UML\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,TDD,JUnit\n\n\nJava SE: JUnit and TDD\n\n\n7 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,scope\n\n\nJava SE: Scope\n\n\n4 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,static\n\n\nJava SE: static modifier\n\n\n10 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,class,objects,concepts,oop,paradigm,casting\n\n\nJava SE: Class and Objects\n\n\n12 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,git,github,project,cloud\n\n\nJava SE: Project push GitHub\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,package,concepts\n\n\nJava SE: Packages\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,maven,concepts\n\n\nJava SE: Maven\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,maven,code,project\n\n\nJava SE: Create Maven Project\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\njavase,microservices,coupling,DDD\n\n\nJava SE: Coupling and DDD\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nifcd0210,training\n\n\nIFCD0210 Init Mail\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,agile,microservices\n\n\nDevOps: agile and microservices\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,introduction\n\n\nDevOps: Introduction\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,resources,readings\n\n\nDevOps Resources\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,git\n\n\nGit\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,github\n\n\nGitHub\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\n\ndevops,immutable\n\n\nImmutable Infrastructure\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,k8s\n\n\nKubernetes k8s\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,pipelines\n\n\nJenkins pipelines\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,Docker\n\n\nDocker\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,Jenkins,install\n\n\nHowto install Jenkins\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,digital-ocean\n\n\nDigital Ocean\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,maven,install\n\n\nHowto install Maven\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,aws\n\n\nAamanzon Web Sevices AWS\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,lab\n\n\nLab 5: k8s on Digital Ocean\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,lab\n\n\nLab 4: Spring Boot and Docker\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,lab\n\n\nLab 2: Spring Boot Intro\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,lab\n\n\nLab 3: Spring Boot and AWS S3\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,IntellJIdea,ide\n\n\nIDE: IntellJIdea\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,lab\n\n\nLab 1: chat App\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,obsidian,quarto,document\n\n\nHow to document: Quarto and Obsidian\n\n\n0 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\ndevops,visual-code,ide\n\n\nIDE: Visual Code\n\n\n2 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nabout\n\n\nAbout this site\n\n\n5 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nabout\n\n\nAbout me\n\n\n1 min\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\nNo matching items\n\n\n\n  \n\n\n\n\n\n\n\n\n  Books cards \n\n\n\n  top \n\n\n\n Articles cards"
  },
  {
    "objectID": "learning/learning-listing-table-books.html",
    "href": "learning/learning-listing-table-books.html",
    "title": "Books table",
    "section": "",
    "text": "You can look up the following table listing for additional information:\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nCategories\n\n\nModified\n\n\n\n\n\n\n\n\n\nDesànim de lucre\n\n\nAbel Cutillas, 2022, Desànim de lucre\n\n\nassay\n\n\nMonday, May 8, 2023\n\n\n\n\n\n\n\nWrite Tight\n\n\nWilliam Brohaugh, 2007, Write Tight: Say Exactly What You Mean with Precision and Power\n\n\ncommunication\n\n\nMonday, May 8, 2023\n\n\n\n\n\n\n\nYour Next Five Moves\n\n\nPatrick Bet-David, 2020, Your Next Five Moves: Master the Art of Business Strategy\n\n\nstrategy\n\n\nMonday, May 8, 2023\n\n\n\n\n\n\n\nStratospheric\n\n\nStratospheric, 2020, From Zero to Production with Spring Boot and AWS: Building Scalable and Resilient Applications\n\n\njava\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nMindset\n\n\nCarol Dweck, 2006, Mindset: The New Psychology of Success\n\n\nmindset\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nThe Joy of Living\n\n\nYongey Mingyur Rinpoche, 2008, The Joy of Living: Unlocking the Secret and Science of Happiness\n\n\nmindset\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nDon’t Believe Everything You Think\n\n\nJoseph Nguyen, 2022, Don’t Believe Everything You Think: Why Your Thinking Is The Beginning & End Of Suffering (Beyond Suffering)\n\n\nmindset\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nThe Rudest Book Ever\n\n\nShwetabh Gangwar. 2019, The Rudest Book Ever\n\n\nstrategy\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nMaps of Meaning\n\n\nJordan B. Peterson, 1999, Maps of Meaning: The Architecture of Belief\n\n\nneuropsychology\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nThe Matter With Things\n\n\nIan McGilchrist, 2019, The Matter With Things: Our Brains, Our Delusions, and the Unmaking of the World\n\n\nneuropsychology\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nThe Master and His Emissary\n\n\nIain McGilchrist, 2009, The Master and His Emissary: The Divided Brain and the Making of the Western World\n\n\nneuropsychology\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nAwekenings\n\n\nOliver Sacks, 1973, Awekenings\n\n\nneuropsychology\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nThe Buddha and the Badass\n\n\nVishen Lakhiani, 2020, The Buddha and the Badass: The Secret Spiritual Art of Succeeding at Work\n\n\nstrategy\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nConsciousness Explained\n\n\nDaniel C. Dennett, 1991, Consciousness Explained\n\n\nneuroscience\n\n\nSunday, May 7, 2023\n\n\n\n\n\n\n\nHow to Fail at Almost Everything and Still Win Big\n\n\nScott Adams, 2013, How to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life\n\n\nstrategy\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nIkigai\n\n\nHéctor García and Francesc Miralles, 2017, Ikigai: The Japanese Secret to a Long and Happy Life\n\n\nself-management\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Changing World Order\n\n\nRay Dalio, 2021, The Changing World Order: Why Nations Succeed and Fail\n\n\nfinance\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nBurnout\n\n\nHerbert Freudenberger, 1980, Burnout: The High Cost of High Achievement\n\n\nself-management\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Relaxation Revolution\n\n\nWilliam Proctor, Herbert Benson, 2010, The Relaxation Revolution: Enhancing Your Personal Health Through the Science and Genetics of Mind Body Healing\n\n\nself-management\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Compound Effect\n\n\nDarren Hardy, 2012, The Compound Effect: Jumpstart Your Income, Your Life, Your Success\n\n\nstrategy\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nClean Code\n\n\nRobert C. Martin, 2008, Clean Code: A Handbook of Agile Software Craftsmanship\n\n\nprogramming\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nExecution\n\n\nLarry Bossidy, Ram Charan,Charles Burck (with), 2006, Execution: The Discipline of Getting Things Done\n\n\nstrategy\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nConsilience\n\n\nEdward O. Wilson, 1999, Consilience: The Unity of Knowledge\n\n\nassay\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nAntifragile\n\n\nNassim Nicholas Taleb, 2012, Antifragile: Things That Gain from Disorder (Incerto)\n\n\nassay\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nDescartes’ Error\n\n\nAntonio Damasio, 2006, Descartes’ Error: Emotion, Reason, and the Human Brain\n\n\nneuroscience\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nHow to Create a Mind\n\n\nRay Kurzweil, 2013, How to Create a Mind: The Secret of Human Thought Revealed\n\n\nneuroscience\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Second Brain\n\n\nMichael Gershon, 2020, The Second Brain: A Groundbreaking New Understanding Of Nervous Disorders Of The Stomach And Intestine\n\n\nneuroscience\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nBuilding a Second Brain\n\n\nTiago Forte, 2022, Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential\n\n\nself-management\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Creative Habit\n\n\nTwyla Tharp, 2007, The Creative Habit: Learn It and Use It for Life\n\n\nself-management\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nAtomic Habits\n\n\nJames Clear, 2016, Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones\n\n\nself-management\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Communication Book\n\n\nMikal Nielsen, 2018, The Communication Book: 44 Ideas for Better Conversations Every Day\n\n\ncommunication\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nSwimming with Sharks\n\n\nJoris Luyendijk, 2015, Swimming with Sharks: My Journey into the World of the Bankers\n\n\nfinance\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nMy Stroke of Insight\n\n\nJill Bolte Taylor, 2009, My Stroke of Insight: A Brain Scientist’s Personal Journey\n\n\nneuroscience\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nMan’s Search for Meaning\n\n\nViktor E. Frank, 1947, Man’s Search for Meaning\n\n\npsychology\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nCollective Illusions\n\n\nTodd Rose, 2022, Collective Illusions: Conformity, Complicity, and the Science of Why We Make Bad Decisions\n\n\npsychology\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Art of Agile Development\n\n\nJames Shore, 2007, The Art of Agile Development: Pragmatic guide to agile software development\n\n\nstrategy\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Psychology of Money\n\n\nMorgan Housel, 2020, The Psychology of Money: Timeless lessons on wealth, greed, and happiness\n\n\nfinance\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Black Swan\n\n\nNassim Nicholas Taleb, 2007, The Black Swan: The Impact of the Highly Improbable (Incerto)\n\n\nassay\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Bed of Procrustes\n\n\nNassim Nicholas Taleb, 2010, The Bed of Procrustes: Philosophical and Practical Aphorisms (Incerto)\n\n\nassay\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nMy Life as Quant\n\n\nEmanuel Derman, 2007, My life as a quant\n\n\nfinance\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Linux command line\n\n\nWilliam Shotts, The Linux command line\n\n\nprogramming\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nSkin in the Game\n\n\nNassim Nicholas Taleb, 2018, Skin in the Game: Hidden Asymmetries in Daily Life (Incerto)\n\n\nassay\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nFooled by Randomness\n\n\nNassim Nicholas Taleb, 2001, Fooled by Randomness: The Hidden Role of Chance in Life and in the Markets (Incerto)\n\n\nassay\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe five disfunctions of a team\n\n\nPatrick Lencioni, 2002, The five disfunctions of a team\n\n\nstrategy\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nElements of Style\n\n\nStrunk and White, 1918, The Elements of Style\n\n\ncommunication\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe mom test\n\n\nHow to talk to customers & learn if your business is a good idea when everyone is lying to you.\n\n\ncommunication\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nThe Molecule of More\n\n\nThe Molecule of More: How a Single Chemical in Your Brain Drives Love, Sex, and Creativity―and Will Determine the Fate of the Human\n\n\nneuroscience\n\n\nSaturday, May 6, 2023\n\n\n\n\n\n\n\nGetting Things Done\n\n\nDavid Allen, 2015, etting Things Done: The Art of Stress-Free Productivity\n\n\nagile\n\n\nSaturday, March 25, 2023\n\n\n\n\n\n\n\nChimpanzee Politics\n\n\nFrans de Waal, 1982, Chimpanzee Politics: Power and Sex among Apes\n\n\nassay\n\n\nWednesday, March 15, 2023\n\n\n\n\n\n\n\nHow to Measure Anything\n\n\nDouglas W. Hubbard, 2010, How to Measure Anything: Finding the Value of Intangibles in Business\n\n\nagile\n\n\nTuesday, March 14, 2023\n\n\n\n\n\n\n\nMind Management Not Time Management\n\n\nDavid Kadavy, 2020, Mind Management Not Time Management: A Guide to Improving Your Productivity and Happiness\n\n\nagile\n\n\nSaturday, March 11, 2023\n\n\n\n\n\n\n\nThinking in Java\n\n\nEckel Bruce, 2006, Scrum: The Art of Doing Twice the Work in Half the Time\n\n\njava\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nThe Intelligence Trap\n\n\nThe Intelligence Trap, 2019, The Intelligence Trap: Why Smart People Make Dumb Decisions\n\n\npsychology\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nThe Righteous Mind\n\n\nJonathan Haidt, 2013, The Righteous Mind: Why Good People are Divided by Politics and Religion\n\n\npsychology\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nSite Reliability Engineering\n\n\nBetsy Beyer, Chris Jones, Jennifer Petoff and Niall Richard Murphy, 2016, How Google runs production systems\n\n\ndevops\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nThe Status Game\n\n\nWill Storr, 2021, The Status Game: On Social Position and How We Use It\n\n\npsychology\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nScrum\n\n\nJ.J. shuterland, 2014, Scrum: The Art of Doing Twice the Work in Half the Time\n\n\nagile\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nQuarkus for Spring Developers\n\n\nEric Deandrea, August 31, 2021, Quarkus for Spring Developers\n\n\njava\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nQuarkus Cookbook\n\n\nAlex Soto Bueno, Jason Porter, February 9, 2021, Quarkus Cookbook: Developing Cloud-Native Applications with Java\n\n\njava\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nModern Java EE Design Patterns\n\n\nMarkus Eisele, 2016, Modern Java EE Design Patterns: Building Scalable Architecture for Sustainable Enterprise Development\n\n\ndesign\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nMicroservices for Java Developers\n\n\nRafael Benevides, 2019, Microservices for Java Developers: A Hands-On Introduction to Frameworks and Containers - Java Developers\n\n\njava\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nIncerto\n\n\nNicholas Taleb, 2020, Incerto: Navigating Uncertainty and the Four Traps of Success\n\n\nassay\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nDive Into DESIGN PATTERNS\n\n\nAlexander Shvets, 2022, Dive Into DESIGN PATTERNS: An ebook on design patterns and the principles behind them\n\n\ndesign\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nDomain Driven Design\n\n\nEric Evans, 2003, Domain Driven Design: Tackling Complexity in the Heart of Software\n\n\ndesign\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nDevOps with OpenShift\n\n\nStefano Picozzi, Mike Hepburn & Noel O’Connor, 2017, DevOps with OpenShift: Cloud Deployments Made Easy\n\n\ndevops\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nDesign Patterns\n\n\nErich Gamma, Richard Helm, Ralph Johnson, John Vlissides, 1994, Design Patterns: Elements of Reusable Object-Oriented Software\n\n\ndesign\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nData Science at the Command Line\n\n\nJeroen Janssens, 2014, Data Science at the Command Line: Facing the Future with Time-Tested Tools\n\n\ndevops\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nC\n\n\nDennis Ritchie, 1978, C: A Programming Language\n\n\nprogramming\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nKubernetes Native Microservices\n\n\nJohn Clingan and Ken Finnigan, 2021, Kubernetes Native Microservices with Quarkus and MicroProfile\n\n\ndevops\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\n\nMicroservices Patterns\n\n\nChris Richardson, 2020, Microservices Patterns: With examples in Java\n\n\njava\n\n\nWednesday, February 15, 2023\n\n\n\n\n\n\nNo matching items\n\n\n\n  \n\n\n\n\n\n\n\n\n  Auto-Evaluate \n\n\n\n  top \n\n\n\n Books cards"
  },
  {
    "objectID": "learning/learning-vocab-data-base.html",
    "href": "learning/learning-vocab-data-base.html",
    "title": "DataBase Vocabulary",
    "section": "",
    "text": "Technical terms and definitions"
  },
  {
    "objectID": "learning/learning-vocab-data-base.html#vocabulary",
    "href": "learning/learning-vocab-data-base.html#vocabulary",
    "title": "DataBase Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nDataBase vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nSQL\ndescription\n\n\nmySQL\ndescription\n\n\nNoSQL\ndescription\n\n\nonotoone\ndescription\n\n\nonetomany\ndescription\n\n\nmanytomany\ndescription\n\n\nacid\ndescription\n\n\ncloud database\ndescription\n\n\nvolume\ndescription\n\n\nquery\ndescription\n\n\n\n\n\n\n\n\n  Spring Boot Vocabulary \n\n\n\n  top \n\n\n\n ReactJS Vocabulary"
  },
  {
    "objectID": "learning/learning-vocab-devops.html",
    "href": "learning/learning-vocab-devops.html",
    "title": "DevOps Vocabulary",
    "section": "",
    "text": "Technical terms and definitions"
  },
  {
    "objectID": "learning/learning-vocab-devops.html#vocabulary",
    "href": "learning/learning-vocab-devops.html#vocabulary",
    "title": "DevOps Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nDevOps vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\ncd/ci\nContinuous Deployment/Continuous Integration, automating software delivery\n\n\npipeline\nA series of automated steps for software delivery\n\n\ndocker image\nA lightweight, portable software package that runs in a container\n\n\ndocker container\nAn executable instance of a Docker Image, isolated environment\n\n\nscript/declarative\nScript-based vs. desired state-based configuration management\n\n\nconfiguration file\nA file containing settings and parameters for a system\n\n\njenkins\nAn open-source automation server for software development and testing\n\n\nk8s\nKubernetes, an open-source container orchestration system for managing clusters\n\n\ndeploy\nTo release and make live a software application\n\n\ndevops\nA methodology for development and operations teams to work together, improve collaboration\n\n\nsoftware life cycle\nA series of stages that a software product goes through from its initial conception to retirement. This includes stages such as planning, development, testing, deployment, and maintenance\n\n\n\n\n\n\n\n\n  SCRUM Vocabulary \n\n\n\n  top \n\n\n\n Java SE Vocabulay"
  },
  {
    "objectID": "learning/learning-vocab-general.html",
    "href": "learning/learning-vocab-general.html",
    "title": "General Vocabulary",
    "section": "",
    "text": "Technical terms and definitions"
  },
  {
    "objectID": "learning/learning-vocab-general.html#vocabulary",
    "href": "learning/learning-vocab-general.html#vocabulary",
    "title": "General Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nGeneral vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\ndevops\ndescription\n\n\nscrum\ndescription\n\n\nframework\ndescription\n\n\nimmuateble code\ndescription\n\n\ngithub\ndescription\n\n\nserverless\ndescription\n\n\ncontainer\ndescription\n\n\nwebhook\ndescription\n\n\npolling\ndescription\n\n\nparse\ndescription\n\n\nthrottle\ndescription\n\n\nddd\ndescription\n\n\n\n\n\n\n\n\n  SCRUM Resources \n\n\n\n  top \n\n\n\n SCRUM Vocabulary"
  },
  {
    "objectID": "learning/learning-vocab-java-se.html",
    "href": "learning/learning-vocab-java-se.html",
    "title": "Java SE Vocabulay",
    "section": "",
    "text": "Technical terms and definitions"
  },
  {
    "objectID": "learning/learning-vocab-java-se.html#vocabulary",
    "href": "learning/learning-vocab-java-se.html#vocabulary",
    "title": "Java SE Vocabulay",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nJava SE vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\ncomments\nA multi-line comment begins with /and ends with/, and may span multiple lines. An end-of-line (single-line) comment begins with // and lasts till the end of the current line. Comments are NOT executable statements and are ignored by the compiler. But they provide useful explanation and documentation. I strongly suggest that you write comments liberally to explain your thought and logic.\n\n\nstatement\nA programming statement performs a single piece of programming action. It is terminated by a semi-colon (;), just like an English sentence is ended with a period, as in Lines 6.\n\n\nblock\nA block is a group of programming statements enclosed by a pair of braces {}. This group of statements is treated as one single unit. There are two blocks in the above program. One contains the body of the class Hello. The other contains the body of the main() method. There is no need to put a semi-colon after the closing brace.\n\n\nwhitespaces\nBlank, tab, and newline are collectively called whitespace. Extra whitespaces are ignored, i.e., only one whitespace is needed to separate the tokens. Nonetheless, extra whitespaces improve the readability, and I strongly suggest you use extra spaces and newlines to improve the readability of your code.\n\n\ncase sensitivity\nJava is case sensitive - a ROSE is NOT a Rose, and is NOT a rose. The filename, which is the same as the class name, is also case-sensitive.\n\n\njava se\ndescription\n\n\ndesign-patterns\ndescription\n\n\njava OOP\ndescription\n\n\njava object\ndescription\n\n\ncoupling\ndescription\n\n\n\n\n\n\n\n\n  DevOps Vocabulary \n\n\n\n  top \n\n\n\n Spring Boot Vocabulary"
  },
  {
    "objectID": "learning/learning-vocab-reactjs.html",
    "href": "learning/learning-vocab-reactjs.html",
    "title": "ReactJS Vocabulary",
    "section": "",
    "text": "Technical terms and definitions"
  },
  {
    "objectID": "learning/learning-vocab-reactjs.html#vocabulary",
    "href": "learning/learning-vocab-reactjs.html#vocabulary",
    "title": "ReactJS Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nReact JS vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\ncop\ndescription\n\n\njsx\ndescription\n\n\nprops and states\ndescription\n\n\nhooks\ndescription\n\n\nspa\ndescription\n\n\nvirtual dom\ndescription\n\n\narrow function\ndescription\n\n\nspread operator\ndescription\n\n\ndestructuring\ndescription\n\n\nlodash\nLodash, A modern JavaScript utility library delivering modularity, performance & extras.\n\n\n\n\n\n\n\n\n  DataBase Vocabulary \n\n\n\n  top \n\n\n\n Web Vocabulary"
  },
  {
    "objectID": "learning/learning-vocab-scrum.html",
    "href": "learning/learning-vocab-scrum.html",
    "title": "SCRUM Vocabulary",
    "section": "",
    "text": "Technical terms and definitions"
  },
  {
    "objectID": "learning/learning-vocab-scrum.html#vocabulary",
    "href": "learning/learning-vocab-scrum.html#vocabulary",
    "title": "SCRUM Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nSCRUM vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\niterate\nRepeat a process with improvements and a certain time-box\n\n\nsprint\nShort, time-boxed iterations in Scrum, usually 2-4 weeks\n\n\nsprint goal\nA clear objective for the sprint to achieve\n\n\nsprint backlog\nA prioritized list of items to be worked on during the sprint\n\n\nplanning poker\nA consensus-based estimation technique used in Scrum with this serie to weight tasks: 1, 2, 3, 5, 8, 13, 21\n\n\nscrum master\nA facilitator who ensures the team adheres to Scrum principles, link to company\n\n\nproduct owner\nA person responsible for the product backlog and its priorities, link to client\n\n\nprinciples\nTransparency, Inspection, Adaptation, and Delivery\n\n\nbeyond scrum\nScaled Agile Framework (SAFe), LeSS, Nexus\n\n\nagile\nA methodology for software development that values flexibility and collaboration\n\n\nuser story\nA description of a feature or requirement from the perspective of the end-user\n\n\n\n\n\n\n\n\n  General Vocabulary \n\n\n\n  top \n\n\n\n DevOps Vocabulary"
  },
  {
    "objectID": "learning/learning-vocab-spring-boot.html",
    "href": "learning/learning-vocab-spring-boot.html",
    "title": "Spring Boot Vocabulary",
    "section": "",
    "text": "Technical terms and definitions"
  },
  {
    "objectID": "learning/learning-vocab-spring-boot.html#vocabulary",
    "href": "learning/learning-vocab-spring-boot.html#vocabulary",
    "title": "Spring Boot Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nSpring Boot vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nmvc\ndescription\n\n\nview\ndescription\n\n\nmodel\nIt represents graphically an abstraction of the same reality or of a service. It solves problems or needs through a set of black boxes (DDD) that depend only on its previous state and its runtime input. Its conception and implementation is translated into the creation of classes and the relationships between them by means of the UML. The UML will be based on previously defined architectures adapted to the needs of the project.\n\n\ncontroller\ndescription\n\n\nannotations\ndescription\n\n\ndependency injection\ndescription\n\n\nrequest response\ndescription\n\n\nrest\ndescription\n\n\nspring boot\ndescription\n\n\njava ee\ndescription\n\n\njpa\ndescription\n\n\nthymeleaf\ndescription\n\n\ndto\ndescription\n\n\n\n\n\n\n\n\n  Java SE Vocabulay \n\n\n\n  top \n\n\n\n DataBase Vocabulary"
  },
  {
    "objectID": "learning/learning-vocab-web.html",
    "href": "learning/learning-vocab-web.html",
    "title": "Web Vocabulary",
    "section": "",
    "text": "Technical terms and definitions"
  },
  {
    "objectID": "learning/learning-vocab-web.html#vocabulary",
    "href": "learning/learning-vocab-web.html#vocabulary",
    "title": "Web Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nWeb vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\ncss\ndescription\n\n\nquarto\ndescription\n\n\nmarkdown\ndescription\n\n\nhtml\ndescription\n\n\nscss\ndescription\n\n\nmultipage\ndescription\n\n\nrefresh and history\ndescription\n\n\nresponsive\ndescription\n\n\n\n\n\n\n\n\n  ReactJS Vocabulary \n\n\n\n  top \n\n\n\n Learning: Useful questions"
  },
  {
    "objectID": "linux/lilab01-1.html",
    "href": "linux/lilab01-1.html",
    "title": "Linux Lab#LI01-1: Choose Linux",
    "section": "",
    "text": "📘 Linux Lab#LI01-1: Choose Linux\nThis lab may serve many purposes, and you need some idea of what you want to use your lab to achieve.\n\nIf you’re just exploring what’s possible on Linux, installing Linux Mint, CentOS or Ubuntu offers you a flexible and basic environment.\nYou may install OpenSuse for more concrete purposes and test these distributions on a spare computer, a Raspberry Pi, or as a virtual machine (VM) or container.\nIf you want your journey to begin at its destination, you can install Red Hat Enterprise Linux (RHEL) on a supported platform. This gets you started with enterprise-quality Linux, which means that once you perfect your setup, it’s ready to migrate into production.\n\n\n\n\n\n\n\n  Linux Distros: Red Hat Enterprise Linux \n\n\n\n  top \n\n\n\n Linux Lab#LI01-2: Install at least three distributions"
  },
  {
    "objectID": "linux/lilab01-2.html",
    "href": "linux/lilab01-2.html",
    "title": "Linux Lab#LI01-2: Install at least three distributions",
    "section": "",
    "text": "📘 Linux Lab#LI01-2: Install at least three distributions\n\nCreate separate boot, var, home, swap, and filesystem root partitions (five partitions total). Leave at least 100MB of empty, unused, unpartitioned hard disk space for a future task.\nChoose whatever desktop graphical user interfaces (GUIs) are available for your selected distributions.\nCreate a user during installation, and make that user the administrator. This grants the user sudo permissions.\nOnce installation is complete, explore the built-in help features:\n\nUse man pages to research the fstab file.\nWhat are the differences between the various man page sections? Admins primarily use sections 1, 5, and 8—why?\nHow can you do a keyword search within man pages?\nWhat can be found at /usr/share/doc?\nExplore whatever GUI help files might be available.\n\nComplete the Vim tutorial (the command is vimtutor) to get comfortable with Vim. You can use Nano if you prefer. Be certain you can create, open, edit, save, and close configuration files before proceeding any further with these activities.\nTry configuring the installations for a specific time zone by using the tzselect command.\nSelect one installation as your primary lab computer. Designate it as the “server” and select a second installation as a “client.” You will use these two systems in the remaining activities.This lab may serve many purposes, and you need some idea of what you want to use your lab to achieve.\n\n\n\n\n\n\n\n  Linux Lab#LI01-1: Choose Linux \n\n\n\n  top \n\n\n\n Linux Lab#LI01-3: Adjust user permissions"
  },
  {
    "objectID": "linux/lilab01-3.html",
    "href": "linux/lilab01-3.html",
    "title": "Linux Lab#LI01-3: Adjust user permissions",
    "section": "",
    "text": "📘 Linux Lab#LI01-3: Adjust user permissions\n\nLog in using the user account you created during installation. Use the sudo command to gain root privileges when you need to perform systemwide administrative tasks. This is an important best practice in Linux administration.\nAdjust the privileges assigned to your user account by using the sudo command. You need to edit the /etc/sudoers file by using the visudo command.\n\n\n\n\n\n\n\n  Linux Lab#LI01-2: Install at least three distributions \n\n\n\n  top \n\n\n\n Linux Lab#LI02-1: Export env user with grep and pipe"
  },
  {
    "objectID": "linux/lilab02-1.html",
    "href": "linux/lilab02-1.html",
    "title": "Linux Lab#LI02-1: Export env user with grep and pipe",
    "section": "",
    "text": "📘 Linux Lab#LI02-1: Export env user with grep and pipe\nExport the environment of a user linux account from user’s account with root privileges on OpenSUSE bash (or Linux Mint)."
  },
  {
    "objectID": "linux/lilab02-1.html#cli-tools",
    "href": "linux/lilab02-1.html#cli-tools",
    "title": "Linux Lab#LI02-1: Export env user with grep and pipe",
    "section": "1 CLI tools",
    "text": "1 CLI tools\n\n1.0.1 sudo: su - root -c\nTo run a single command as the root user. The -c option is used with the su command to specify a command that should be run as the target user.\nsu - root -c 'command'\nsu - root -c 'apt update && apt upgrade -y'\nsu - root -c 'bash /path/to/script.sh'\nsu - root -c 'bash /usr/local/bin/install-web-server.sh'\n\n\n1.0.2 redirect: >>\nThe > symbol is used for output redirection. Here the output of command ls -al is re-directed to file listings instead of your screen.\nls -al > listings\nThe >> operator is used to redirect the output of a command to a file, and append the output to the end of the file.\ncommand >> file\nls >> alex.txt\niconfig /all > networksettings.txt \nping 8.8.8.8 > 'C:\\Users\\devops\\Desktop\\PingResults.txt' \n\n\n1.0.3 grep: grep -v\nThe -v option is used with the grep command to invert the sense of matching. When used, grep will display lines that do not match the given pattern.\ngrep -v pipe_jenkins devops.txt\n\n\n1.1 environment: env\nThe env command is a built-in command in Linux and Unix-like operating systems that is used to display or set environment variables.\nEnvironment variables are named values that can be used to store information about the system or the user. They are used to configure the shell and to set options that affect the behavior of the system and programs.\nenvexport VARIABLE_NAME=value\nenv \n\n\n1.2 set: set +a\nThe set builtin command is used to set options and/or positional parameters. The -a option is used to enable the export attribute for each name, which means that the corresponding variable will be exported with the export command to the environment of subsequently executed commands.\nThe + sign before the a option toggles the attribute off. This means that set +a disables the export attribute for the specified variables, and set -a enables it.\nVARIABLE_NAME=value\nset -a\nexport VARIABLE_NAME"
  },
  {
    "objectID": "linux/lilab02-1.html#solving-discussion",
    "href": "linux/lilab02-1.html#solving-discussion",
    "title": "Linux Lab#LI02-1: Export env user with grep and pipe",
    "section": "2 Solving discussion",
    "text": "2 Solving discussion\nWe could do this:\nsu - root -c 'env | grep -v \"^USER_VARIABLE=\" >> /etc/environment'\nThis will run a subshell as the root user, source the current user’s .bashrc file to set up the environment, and then export the environment variables to /etc/environment. In Bash, the set builtin command is used to set options and/or positional parameters. The -a option is used to enable the “export” attribute for each name, which means that the corresponding variable will be exported with the export command to the environment of subsequently executed commands.\nThe + sign before the a option toggles the attribute off. This means that set +a disables the “export” attribute for the specified variables, and set -a enables it.\nsu - root -c 'bash -c \"set -a; source ~/.bashrc; set +a; env | grep -v \\\"^USER_VARIABLE=\\\" >> /etc/environment\"'\n\nsu - root -c: This will allow you to run a command as the root user while preserving the environment of the current user.\ngrep and >>: You will pipe the output to grep to filter out the USER_VARIABLE variable. The resulting output is then redirected to /etc/environment using >>.\nThis will add all of the environment variables from the current user’s environment to the /etc/environment file, which is used to set the environment for all users on the system.\n\nIf you want to preserve the entire environment, including aliases, functions, and shell options, you can use the bash -c command instead:\nsu - root -c 'bash -c \"set -a; source ~/.bashrc; set +a; env | grep -v \\\"^LS_COLORS=\\\" >> /etc/environment\"'\n\n\n\n\n\n  Linux Lab#LI01-3: Adjust user permissions \n\n\n\n  top \n\n\n\n Linux Lab#LI03-1: Manage users and groups"
  },
  {
    "objectID": "linux/lilab03-1.html",
    "href": "linux/lilab03-1.html",
    "title": "Linux Lab#LI03-1: Manage users and groups",
    "section": "",
    "text": "📘 Linux Lab#LI03-1: Manage users and groups\n\nUse the /etc/skel directory to define profile settings before adding any user accounts.\nSet password and account expirations using the /etc/login.defs file before adding any user accounts. Use the following password requirements:\n\nPasswords should expire after 90 days, with a five-day warning period.\n\nUse the command line to create five user accounts to use in later activities. You will experiment with permissions and ownership by using these accounts. Give each user a unique name but set them all with the same password (for your own sanity).\nUse the command line to create five groups based on fictitious departments: sales, marketing, human resources, IT, engineering. Place one user from above into each group.\nDelegate the ability to reboot the system to only one user by using sudo.\n\n\n\n\n\n\n\n  Linux Lab#LI02-1: Export env user with grep and pipe \n\n\n\n  top \n\n\n\n Linux Lab#LI03-2: Manage files"
  },
  {
    "objectID": "linux/lilab03-2.html",
    "href": "linux/lilab03-2.html",
    "title": "Linux Lab#LI03-2: Manage files",
    "section": "",
    "text": "📘 Linux Lab#LI03-2: Manage files\n\nCreate directories for each department (sales, marketing, human resources, IT, engineering) at the root of the filesystem.\nConfigure standard Linux permissions and ownership such that each group only has access to its own departmental directories. For example, the sales group has access to the /sales directory but not to other departments’ directories.\n\nAfter completing and testing the previous step, configure ACL permissions to permit the marketing department to have read access to the /sales directory.\nUse ACL permissions to permit one user account to have read permission to the /IT directory.\nConfigure SGID and the sticky bit on the /marketing directory.\n\nEnsure that two of your existing user accounts are now members of the marketing group.\n\nUse each account to create one file in the /marketing directory.\nTest whether one of those accounts can delete the file created by the other account (they should not be able to, due to the sticky bit).\n\nCreate a file called unchangeable.txt, set the immutable attribute on it, and then delete the file.\nConfigure file links.\n\nCreate a file named LinksTest.txt in the /opt directory, and then create a hard link to it in the /tmp directory. Use Vim to add a line of text to the file through the /opt/LinksTest.txt path, and then display the file’s contents by using the /tmp/LinksTest.txt file path.\nCreate a symlink to /tmp/LinksTest.txt in the root user’s home directory and view the file’s contents.\nDelete the /tmp/LinksTest.txt file, and then attempt to view the file’s contents through the /root/LinksTest.txt symlink.\n\nCreate 10 files in the /tmp directory, and then use tar and gzip to bundle and compress the files.\n\nDelete the 10 original files and then restore them from your tarball.\n\nUse the find command to search for the test files in the department directories. Do this task first as the root user, then as a user who is a member of the group that owns the directory, and finally as a user who is not a member of the group that owns the directory.\nAt the command line only, practice mounting and unmounting ISO images.\nCopy a file from the ISO to a directory on the Linux installation.\nConfigure LVM:\n\nDesignate two sections of 50MB each of your remaining empty hard disk drive space to be physical volumes (PVs) used by LVM.\nCombine those to PVs into a single volume group, and then configure a single logical volume (LV) that is 100MB.\nCreate a directory to serve as a mount point for this LV and add an entry to the /etc/fstab so that it is mounted during the system bootup.\n\n\n\n\n\n\n\n\n  Linux Lab#LI03-1: Manage users and groups \n\n\n\n  top \n\n\n\n Linux Lab#LI03-3: Manage software"
  },
  {
    "objectID": "linux/lilab03-3.html",
    "href": "linux/lilab03-3.html",
    "title": "Linux Lab#LI03-3: Manage software",
    "section": "",
    "text": "📘 Linux Lab#LI03-3: Manage software\n\nUse the rpm command to manage software:\n\nUse the rpm command to inventory all installed software and redirect this inventory list into a text file.\n\nInstall an RPM package by using the rpm command. For example, install the zsh package. Download the package if necessary.\nUse the rpm command to get info on the zsh package, and then use rpm to uninstall the package.\n\n\nUse the dnf command to manage software:\n\nInstall an RPM package with the dnf command. For example, install the ksh package.\nUse the dnf command to get info on the ksh package, and then use dnf to uninstall the package.\n\nFind and download software that you must compile. Go through the process of compiling the software. (GitLab, GitHub, and Sourceforge are popular development repositories.)\nDownload a piece of software that includes an MD5 checksum to verify its integrity. After the download, compare your MD5 results with the result on the website.\n\n\n\n\n\n\n\n  Linux Lab#LI03-2: Manage files \n\n\n\n  top \n\n\n\n Linux Lab#LI03-4: Manage hardware"
  },
  {
    "objectID": "linux/lilab03-4.html",
    "href": "linux/lilab03-4.html",
    "title": "Linux Lab#LI03-4: Manage hardware",
    "section": "",
    "text": "📘 Linux Lab#LI03-4: Manage hardware\n\nUse the following commands to document hardware information for your lab computers: df, du, cat /proc/cpuinfo, cat /proc/meminfo.\nDevices: devices, partitions. cat /etc/fstab,\nNetworking and users: ifconfig, ip addr, uname --a.\nDirect the output from these commands into text files (make as many text files as you wish to organize this documentation reasonably). Use both > and >> to organize the data.\nRedirect the dmesg output to a text file, and then use the grep utility to display any reference to “memory” or “CPU” in the file. What else does this file tell you?\n\n\n\n\n\n\n\n  Linux Lab#LI03-3: Manage software \n\n\n\n  top \n\n\n\n Linux Lab#LI04-1: Bash scripting, qtool"
  },
  {
    "objectID": "linux/lilab04-1.html",
    "href": "linux/lilab04-1.html",
    "title": "Linux Lab#LI04-1: Bash scripting, qtool",
    "section": "",
    "text": "📘 Linux Lab#LI04: Bash\nTo create a terminal app using bash scripts, you will need to:\n\nDefine the functionality of the app, including the commands and options it should support. (Lab#LI04-1)\nWrite the bash scripts that implement this functionality. This may involve writing functions to perform specific tasks, as well as handling input and output from the terminal. (Lab#LI04-1)\nTest the scripts to ensure they are working as intended. (Lab#LI04-1)\nPackage the scripts into a single executable file that can be easily run from the terminal. This may involve creating a wrapper script that calls the other scripts in the correct order. (Lab#LI04-2)\nMake the app available for others to use, either by distributing it as a package (such as a .deb or .rpm file) or by hosting it on a website or repository. (Lab#LI04-3)\nProvide documentation and usage instructions for the app, so that users know how to use it effectively. (Lab#LI04-3)"
  },
  {
    "objectID": "linux/lilab04-1.html#solving-discussion-qtool-example",
    "href": "linux/lilab04-1.html#solving-discussion-qtool-example",
    "title": "Linux Lab#LI04-1: Bash scripting, qtool",
    "section": "1 Solving discussion: Qtool example",
    "text": "1 Solving discussion: Qtool example\n\n📘 QTool: Quarto tool\nQtool is a bash-terminal tool specifically designed for users of the Quarto documentation platform. It offers a number of features that can help users manage large numbers of Quarto files more efficiently.\nRepository on GitHub\n\n\nQtool is a command-line tool that helps users manage and manipulate their Quarto (.qmd) files. It has the following five operations:\n\ndebug: scans the directories and files in a specified directory, and checks for any discrepancies between the .yaml and .qmd files. It reports any errors or inconsistencies it finds.\ndirtable: generates a CSV file containing information about the directories in the specified directory. It includes the directory name, the number of files in the directory, and the total number of lines in all of the files in the directory.\nyamltable: generates a CSV file containing information about the .yaml files in the specified directory. It includes the file name, the number of lines in the file, and the number of sections in the file.\nwritenavigation: adds callouts to the .qmd files in the specified directory, to make it easier for users to navigate through the content. It adds a callout at the beginning of each section, with a link to the next and previous sections.\n\n\n\n\n_qtool folder on quarto project directory\n\n\n\n\n\nyamltable executing: there are 3 discrepancies on yaml configuration file\n\n\n\n\n\nyamltable: missing .qmd file\n\n\n\n\n\ndirtable executing: all files in our directory\n\n\n\n\n\ndirtable: all data from files\n\n\n\n\n\ndebug executing: summary\n\n\n\n\n\nwritenavigation is will create navigation links and write the .qmd file\n\n\n\n\n\nwritenavigation executinng\n\n\n\n\n\nafter execution writenavigation\n\n\n\n\n\nCode: writenavigation.sh\n\n\nupdated code on GitHub.com\n\n\n\nwritenavigation.sh\n\n#!/bin/bash\n\n# Initialize an empty array\nfiles=()\ntitles=()\n# Initialize a counter variable\ncounter=0\nop_counter=0\n# Generate the log file name using the current date and time\nlog_file=\"$(date +\"%Y%m%d-%H%M%S\")-log-write-navLinks.txt\"\n# Initialize a string variable\npath_qmd=''\ntitle=''\ntitle_line=''\n\n# Open the log file for writing\nexec 3> \"_logs/${log_file}\"\n\necho \"***************** Extracting **********************\" >&3\n\n# Read the input code line by line\nwhile IFS= read -r line; do\n  # If the line ends with \".qmd\", add it to the array\n  if [[ $line == *\".qmd\" ]]; then\n    let counter++\n    # Extract path qmd file and add to array files\n    path_qmd=\"$(echo \"$line\" | tr -d ':' | sed 's/- //g' | tr -d ' ' | sed 's/file//g')\"\n    files+=(\"$path_qmd\")\n    # Extract title from qmd file and add to array titles\n    title_line=$(awk 'NR==2 {print}' \"../${path_qmd}\")\n    title=$(sed 's/.*\"\\(.*\\)\".*/\\1/' <<< \"$title_line\")\n    titles+=(\"$title\")\n    # Write a message to the log file indicating that .qmd path has been extracted\n    echo \"$(date +\"%Y-%m-%d %H:%M:%S\") - extracting from _quarto.yml and .qmd file' $counter: $path_qmd > $title\" >&3\n    echo \" _quarto.yml/.qmd file' $counter: $path_qmd > $title\" >&3\n  fi\ndone < \"../_quarto.yml\"\n\necho \"***************** Writing  ************************\" >&3\n\n# Loop through the array of .qmd files\nfor ((i=0; i<${#files[@]}; i++)); do\n  # Open the .qmd file\n  file=\"${files[i]}\"\n  let op_counter++\n  echo \"$(date +\"%Y-%m-%d %H:%M:%S\") - Operation #($op_counter): **${file}**\" >&3\n  echo 'operartion:' $op_counter' > writing to: '$file\n  \n  # Delete qmd rows navLinks\n  # Search for the line containing the string \"<!--- navLinks -->\"\n  lineNumber_navLinks_is=$(grep -c \"<!--- navLinks -->\" \"../${file}\")\n  # If the line was found, delete all lines after it\n  if [ \"$lineNumber_navLinks_is\" -gt 0 ]; then\n    # Store the line number of the first match\n    lineNumber_navLinks=$(grep -n \"<!--- navLinks -->\" \"../${file}\" | awk -F: '{print $1}')\n    # Delete all lines after the line number\n    let lineNumber_navLinks++; \n    echo \"lineNumber_navLinks:\" $lineNumber_navLinks\n    sed -i \"$lineNumber_navLinks,\\$d\" \"../${file}\"\n  else\n    echo \"<!--- navLinks -->\" >> \"../${file}\"\n  fi\n    \n  # Write the columns callout init in anycase to .qmd file  \n  echo \"<br><br>\" >> \"../${file}\"\n  echo \":::: {.columns}\" >> \"../${file}\"\n\n  # Append a link to the previous file\n  if [[ $i -gt 0 ]]; then \n    echo \"::: {.column .previous width=\"40%\"} [ \"${titles[i-1]}\"](\"${files[i-1]}\"):::\" >> \"../${file}\"\n    # Write the operation to the log file\n    echo \"$(date +\"%Y-%m-%d %H:%M:%S\") - #$: Added  \"${titles[i-1]}\" to previous file ${files[i-1]} to ${file}\" >&3\n  else\n    # Write a message to the log file indicating that no previous file was found\n    echo \"$(date +\"%Y-%m-%d %H:%M:%S\") - #$op_counter: No previous file found for ${file}\" >&3\n  fi\n  # # Write the top arrow callout in anycase to .qmd file  \n  echo \":::{.column .center width=20%} [ top](#top) :::\" >> \"../${file}\"\n\n  # Append a link to the next file\n  if [[ $i -lt $(( ${#files[@]} - 1 )) ]]; then\n    echo \"::: {.column .next width=\"40%\"} [\"${titles[i+1]} \" ](\"${files[i+1]}\"):::\" >> \"../${file}\"\n    # Write the operation to the log file\n    echo \"$(date +\"%Y-%m-%d %H:%M:%S\") - #$op_counter: Added \"${files[i+1]}\" to next file ${files[i+1]} to ${file}\" >&3\n  else\n    # Write a message to the log file indicating that no next file was found\n    echo \"$(date +\"%Y-%m-%d %H:%M:%S\") - #$op_counter: No next file found for ${file}\" >&3\n  fi\n  # Write the columns callout end in anycase to .qmd file  \n  echo \"::::\" >> \"../${file}\"  \ndone\n\n# Close the log file\nexec 3>&-\n\n\n\n\nCode: debug.sh\n\n\nupdated code on GitHub.com\n\n\n\ndebug.sh\n\n#!/bin/bash\n\n# Initialize an empty array\nfiles=()\ndomains=()\ndirectories=()\nfilesXdir=()\nfilesXdomain=()\nfiles_dir=()\n# Initialize a counter variable\ncounter=0\ncounter_qmd=0\ncounter_dir=0\ncounter_files_qmd=0\ncounter_filesXdir=0\ncounter_filesXdomain=0\ncounter_fxd_last=0\n# Generate the log file name using the current date and time\nlog_file=\"$(date +\"%Y%m%d-%H%M%S\")-log-write-navLinks.txt\"\n# Initialize a string variable\npath_qmd=''\ndomain_qmd=''\n# Initialize a lineNumber_navLinks_is variable\nlineNumber_navLinks_is=-1\n# Couloring text\nBLUE='\\033[0;33m'\nNC='\\033[0m' # No Color\n# Open the log file for writing\nexec 3> \"_logs/${log_file}\"\n\necho \"*********** check nav: .qmds vs ,yml  *************\" >&3\n\n# Read the input code line by line\nwhile IFS= read -r line; do\n    # If the line ends with \".qmd\", add it to the array\n    if [[ $line == *\".qmd\" ]]; then\n        let counter_qmd++\n       \n        # Extract path and domain from the lines ends with \".qmd\"\n        path_qmd=\"$(echo \"$line\" | tr -d ':' | sed 's/- //g' | tr -d ' ' | sed 's/file//g')\"\n        domain_qmd=$(cut -d '/' -f 1 <<< \"$path_qmd\");\n        # Add .qmd path to files array\n        files+=(\"$path_qmd\")\n        # Add domain to domains array if it is new\n        if [[ ! \"${domains[*]}\" =~ \"$domain_qmd\" ]]; then\n          domains+=(\"$domain_qmd\")\n          \n          let counter_filesXdomain=1\n        else\n          let counter_filesXdomain++\n        fi\n        counter_fxd_last=(${#domains[@]}-1)\n        let filesXdomain[$counter_fxd_last]=$counter_filesXdomain\n        # Write a message to the log file indicating that .qmd path has been extracted\n        echo \"$(date +\"%Y-%m-%d %H:%M:%S\") - extracting from _quarto.yml' $counter_qmd: $path_qmd\" >&3\n        #echo \"$(date +\"%Y-%m-%d %H:%M:%S\") total .qmds and domains: $counter_qmd - ${#domains[@]}\"\n    fi\ndone < \"../_quarto.yml\"\n\necho -e \"${BLUE}From _quarto.yml:${NC}\"\necho \"Number of domains: $((${#domains[@]}-1))\"\necho \"Number of .qmd files: $counter_qmd\"\necho \"Domain list:\"\nfor ((i=0; i<${#domains[@]}; i++)); do\n    echo -e \"\\tDomain ${i}: ${domains[i]} \\t${filesXdomain[i]}\"\ndone\n\n# Iterate over all directories and subdirectories in the parent directory\nfor dir in ../*/; do\n  # Check if the directory is not named \"images\" or directories begin with \"_*\" and is not a hidden directory\n  if [[ $dir != *\"images\"* ]] && [[ $dir != *\"_\"* ]] && [[ ${dir:2:1} != \".\" ]]; then\n    ((counter_dir++))\n    directories+=(\"$dir\")\n    counter_filesXdir=0\n    # Iterate over all files in the current directory\n    for file in \"$dir\"*; do\n      # Check if the file is a .qmd file\n      if [[ $file == *\".qmd\" ]]; then\n        ((counter_files_qmd++))\n        ((counter_filesXdir++))\n        files_dir+=($file)\n      fi\n    done\n  filesXdir+=($counter_filesXdir)\n  fi\ndone\n\n# Print results\necho -e \"${BLUE}\\nFrom local project dir:${NC}\"\necho \"Number of directories: $counter_dir\"\necho \"Number of .qmd files: $counter_files_qmd\"\necho \"Directories list:\"\nfor ((i=0; i < ${#directories[@]}; i++)); do\n    echo -e \"\\tDirerctory $((i+1)): ${directories[i]} \\t${filesXdir[i]}\"\ndone\n\n# Close the file\nexec 3>&-\n\n\n\n\n\nCode: dirtable.sh\n\n\nupdated code on GitHub.com\n\n\n\ndirtable.sh\n\n#!/bin/bash\n\n# Initialize an empty array\ndirectories=()\nfilesXdir=()\nfiles_dir=()\n# Initialize a counter variable\ncounter=0\n# Initialize a string variable\ntitle=''\ntitle_line=''\n# Generate the log file name using the current date and time\nlog_file=\"$(date +\"%Y%m%d-%H%M%S\")-log-write-navLinks.txt\"\n# Couloring text\nBLUE='\\033[0;33m'\nNC='\\033[0m' # No Color\n# Open the log file for writing\nexec 3> \"_logs/${log_file}\"\nexec 4> \"dirTable.csv\"\necho \"COUNTER;DIR;FILE;TITLE\" >&4\n\n# Iterate over all directories and subdirectories in the parent directory\nfor dir in ../*/; do\n  # Check if the directory is not named \"images\" or directories begin with \"_*\" and is not a hidden directory\n  if [[ $dir != *\"images\"* ]] && [[ $dir != *\"_\"* ]] && [[ ${dir:2:1} != \".\" ]]; then\n    directories+=(\"$dir\")\n    # Iterate over all files in the current directory\n    for file in \"$dir\"*; do\n      # Check if the file is a .qmd file\n      if [[ $file == *\".qmd\" ]]; then\n        let counter++\n        files_dir+=($file)\n        # Extract title from line 2 .qmd file\n        title_line=$(awk 'NR==2 {print}' \"${file}\")\n        #echo \"$title_line\"\n        title=$(sed 's/.*\"\\(.*\\)\".*/\\1/' <<< \"$title_line\")\n        echo $counter\";\"$dir\";\"$file\";\"$title >&4\n      fi\n    done\n  fi\ndone\n\n# Print results\n#echo -e \"${BLUE}\\nReal .qmd files in directory:${NC}\"\n#for ((i=0; i < ${#files_dir[@]}; i++)); do\n#    echo -e \"\\t$((i+1)): ${files_dir[i]}\"\n#done\n\n# Use nodejs and tty-table app with csv delimiter \";\"\n# need to install two packages:\n# $ sudo apt-get install nodejs \n# $ npm install tty-table -g\n\necho -e \"${BLUE}\\nFrom local directory and .qmd files :${NC}\"\ncat dirTable.csv | tty-table --csv-delimiter \";\"\n\n# Close the file\nexec 3>&-\nexec 4>&-\n\n\n\n\n\nCode: yamltable.sh\n\n\nupdated code on GitHub.com\n\n\n\nyamltable.sh\n\n#!/bin/bash\n\n# Initialize an empty array\nfiles=()\n# Initialize a counter variable\ncounter=0\nop_counter=0\n# Generate the log file name using the current date and time\nlog_file=\"$(date +\"%Y%m%d-%H%M%S\")-log-write-navLinks.txt\"\n# Initialize a string variable\npath_qmd=''\ndomain_qmd=''\ntitle=''\ntitle_line=''\nsection_line=''\nsection=''\n# Initialize a lineNumber_navLinks_is variable\nlineNumber_navLinks_is=-1\n# Couloring text\nBLUE='\\033[0;33m'\nNC='\\033[0m' # No Color\n\n# Open the log file for writing\nexec 3> \"_logs/${log_file}\"\nexec 4> \"yamlTable.csv\"\necho \"COUNTER;DOMAIN;SECTION;PATH;TITLE\" >&4\n\necho \"***************** upadate yamltable ****************\" >&3\n\n# Read the input code line by line\nwhile IFS= read -r line; do\n  if [[ $line == *\"section\"* ]]\n  then\n    # Save line to variable\n    section_line=\"$line\"\n    #echo \"$section_line\"\n    section=$(sed 's/.*\"\\(.*\\)\".*/\\1/' <<< \"$section_line\")\n    #echo \"$section\"\n  else\n      # If the line ends with \".qmd\", add it to the array\n      if [[ $line == *\".qmd\" ]]; then\n        # Extract path and domain from the lines ends with \".qmd\"\n        path_qmd=\"$(echo \"$line\" | tr -d ':' | sed 's/- //g' | tr -d ' ' | sed 's/file//g')\"\n        domain_qmd=$(cut -d '/' -f 1 <<< \"$path_qmd\");\n        files+=(\"$path_qmd\")\n        let counter++\n        # Extract title from line 2 .qmd file\n        title_line=$(awk 'NR==2 {print}' \"../${path_qmd}\")\n        #echo \"$title_line\"\n        title=$(sed 's/.*\"\\(.*\\)\".*/\\1/' <<< \"$title_line\")\n        #echo \"$title\"\n        # Write a message to the log file indicating that .qmd path has been extracted\n        echo \"$(date +\"%Y-%m-%d %H:%M:%S\") - extracting from _quarto.yml' $counter: $path_qmd\" >&3\n        #echo 'extracting from _quarto.yml' $counter: $path_qmd\n        echo $counter\";\"$domain_qmd\";\"$section\";\"$path_qmd\";\"$title >&4\n      fi\n  fi\ndone < \"../_quarto.yml\"\n\n# Use nodejs and tty-table app with csv delimiter \";\"\n# need to install two packages:\n# $ sudo apt-get install nodejs \n# $ npm install tty-table -g\n\necho -e \"${BLUE}\\nFrom .yml and .qmd Title :${NC}\"\ncat yamlTable.csv | tty-table --csv-delimiter \";\"\n\n# Close the file\nexec 3>&-\nexec 4>&-"
  },
  {
    "objectID": "linux/lilab04-1.html#bash-commands-used",
    "href": "linux/lilab04-1.html#bash-commands-used",
    "title": "Linux Lab#LI04-1: Bash scripting, qtool",
    "section": "2 Bash commands used",
    "text": "2 Bash commands used\nHere is a list of bash commands and operations mentioned in this chat:\n\ngrep: search for a pattern in a file\nsed: a stream editor for filtering and transforming text\nawk: a programming language for text processing\nfind: search for files in a directory hierarchy\ntr: translate or delete characters\ncat: concatenate and print files\nhead: print the first few lines of a file\ntail: print the last few lines of a file\nwc: print the number of lines, words, and bytes in a file\ncut: remove sections from each line of a file\nsort: sort lines of a file\nuniq: report or omit repeated lines\ntr -d: delete a specified set of characters\nsed -i: edit a file in place\nexec 3>: create and open a file descriptor\nawk -F: specify a field separator\nsed 's/pattern/replacement/g': search and replace a pattern in a file\ngrep -n: print the line number of the matching lindeletednge of lines in a file\nsed -i '${lineNumber_navLinks},$d': delete a range of lines in a file\nawk '{print $1}': print the first field of a line\nawk -F':' '{print $2}': print the second field of a line\nawk -F':' '{print $2}' | sed 's/^ *//': print and trim the second field of a line\nawk -F':' '{print $2}' | sed 's/^ *//' | tr -d '\"': print, trim, and delete quotes from the second field of a line\nawk -F':' '{print $2}' | sed 's/^ *//' | tr -d '\"' | sed 's/ *$//': print, trim, delete quotes, and trim again from the second field of a line\nawk '{print $2}' | sed 's/^ *//' | tr -d '\"' | sed 's/ *$//': print, trim, delete quotes, and trim again from the second field of a line\nfind . -type f -name \"*.qmd\": find .qmd files in the current directory\nfind . -type d -name \"*images*\" -prune -o -type d -name \"*_navTree*\" -prune -o -type d -name \".*\" -prune -o -type f -name \"*.qmd\" -print: find .qmd files in the current directory\n\n\n\n\n\n\n  Linux Lab#LI03-4: Manage hardware \n\n\n\n  top \n\n\n\n Linux Lab#LI04-2: Bash scripts as terminal tool  \n\n\n\n\n\n  Linux Lab#LI03-4: Manage hardware \n\n\n\n  top \n\n\n\n Linux Lab#LI04-2: Bash scripts as terminal tool  \n\n\n\n\n\n\n\n  Linux Lab#LI03-4: Manage hardware \n\n\n\n  top \n\n\n\n Linux Lab#LI04-2: Bash scripts as terminal tool"
  },
  {
    "objectID": "linux/lilab04-2.html",
    "href": "linux/lilab04-2.html",
    "title": "Linux Lab#LI04-2: Bash scripts as terminal tool",
    "section": "",
    "text": "📘 Linux Lab#LI04-2: Bash scripts as terminal tool\nTo create a terminal app using bash scripts, you will need to (from Lab#LI04-1):\n\nPackage the scripts into a single executable file that can be easily run from the terminal. This may involve creating a wrapper script that calls the other scripts in the correct order."
  },
  {
    "objectID": "linux/lilab04-2.html#solving-discussion",
    "href": "linux/lilab04-2.html#solving-discussion",
    "title": "Linux Lab#LI04-2: Bash scripts as terminal tool",
    "section": "1 Solving discussion",
    "text": "1 Solving discussion\nTo create a terminal app for Linux, you can use a bash script. Here are the steps to create the app with the three basic (help, update, show) options:\n\nCreate a bash script file with the name qtool (without any extension).\nAdd the following lines at the beginning of the script to make it executable:\n\n#!/bin/bash\n\nAdd the following lines to create the “help” option:\n\nif [ \"$1\" == \"help\" ]\nthen\n    echo \"qmdtool is a tool for managing Quarto markdown files (qmd).\"\n    echo \"Available options:\"\n    echo \"  help    Display this help message\"\n    echo \"  update  Update the qmd files in the current directory\"\n    echo \"  show    Display the content of the qmd files in the current directory\"\n    exit 0\nfi\n\nAdd the following lines to create the “update” option:\n\nif [ \"$1\" == \"update\" ]\nthen\n    echo \"Updating qmd files in the current directory...\"\n    # Add code here to update the qmd files\n    exit 0\nfi\n\nAdd the following lines to create the “show” option:\n\nif [ \"$1\" == \"show\" ]\nthen\n    echo \"Displaying content of qmd files in the current directory...\"\n    # Add code here to display the content of the qmd files\n    exit 0\nfi\n\nSave the script and make it executable with the following command:\n\nchmod +x qtool\n\nNow you can use the app by running the following command:\n\n./qtool [option]\nReplace [option] with one of the available options: “help”, “update”, or “show”. For example, to display the help message, you can run the following command:\n./qtool help\n\n\n\n\n\n  Linux Lab#LI04-1: Bash scripting, qtool \n\n\n\n  top \n\n\n\n Linux Lab#LI04-3: Distribute the terminal app"
  },
  {
    "objectID": "linux/lilab04-3.html",
    "href": "linux/lilab04-3.html",
    "title": "Linux Lab#LI04-3: Distribute the terminal app",
    "section": "",
    "text": "📘 Linux Lab#LI04-2: Distribute the terminal app\nTo create a terminal app using bash scripts, you will need to (from Lab#LI04-1 and Lab#LI04-2):\n\nMake the app available for others to use, either by distributing it as a package (such as a .deb or .rpm file) or by hosting it on a website or repository.\nProvide documentation and usage instructions for the app, so that users know how to use it effectively."
  },
  {
    "objectID": "linux/lilab04-3.html#solving-discussion",
    "href": "linux/lilab04-3.html#solving-discussion",
    "title": "Linux Lab#LI04-3: Distribute the terminal app",
    "section": "1 Solving discussion",
    "text": "1 Solving discussion\nThere are several ways to distribute a Linux bash script, including using apt-get, snap, and zipping the script and distributing it that way. Here are some options:\n\napt-get: This is a package manager for Debian-based systems. You can create a package with your bash script and distribute it using apt-get. This option is suitable if you want to distribute your script to a large number of users.\nsnap: Snap is a universal Linux package manager that allows you to distribute your bash script as a snap package. This option is suitable if you want to distribute your script to users on different Linux distributions.\nZip file: You can zip your bash script and distribute it as a zip file. This is a simple option that is suitable for distributing your script to a small number of users.\nGithub: You can host your bash script on Github and share the link with your users. This option is suitable if you want to allow your users to easily download and update your script.\nWebsite: You can host your bash script on a website and provide a link for users to download it. This option is suitable if you want to make your script easily accessible to a large number of users.\nVisual Code Extension: you can create an extension for Visual Code from your Linux bash script and upload to the marketplace. once your extension is published, users can install it by searching for it in the Visual Studio Code Extension Marketplace or by using the code –install-extension ext-name command in the terminal.\n\n\n\n\nfrom gitHub actions we may publish\n\n\n\n\n\n\n\n  Linux Lab#LI04-2: Bash scripts as terminal tool \n\n\n\n  top \n\n\n\n Linux Resources"
  },
  {
    "objectID": "linux/linux-distros-debian.html",
    "href": "linux/linux-distros-debian.html",
    "title": "Linux Distros: Debian",
    "section": "",
    "text": "Linux Distros: Mint \n\n\n\n  top \n\n\n\n Linux Distros: openSuse"
  },
  {
    "objectID": "linux/linux-distros-manjaro.html",
    "href": "linux/linux-distros-manjaro.html",
    "title": "Linux Distros: Manjaro",
    "section": "",
    "text": "Linux Distros: openSuse \n\n\n\n  top \n\n\n\n Linux Distros: Red Hat Enterprise Linux"
  },
  {
    "objectID": "linux/linux-distros-mint.html",
    "href": "linux/linux-distros-mint.html",
    "title": "Linux Distros: Mint",
    "section": "",
    "text": "Linux Mint 21"
  },
  {
    "objectID": "linux/linux-distros-mint.html#what-is-linux-mint",
    "href": "linux/linux-distros-mint.html#what-is-linux-mint",
    "title": "Linux Distros: Mint",
    "section": "1 What is Linux Mint?",
    "text": "1 What is Linux Mint?\nLinux Mint is an operating system for desktop and laptop computers. It is designed to work ‘out of the box’ and comes fully equipped with the apps most people need.\n\nDownload ISO Linux Mint 21\nLinux Mint Installation Guide\nLinux Mint Installation Guide: step-by-step"
  },
  {
    "objectID": "linux/linux-distros-mint.html#keep-your-linux-updated",
    "href": "linux/linux-distros-mint.html#keep-your-linux-updated",
    "title": "Linux Distros: Mint",
    "section": "2 Keep your Linux updated",
    "text": "2 Keep your Linux updated\nOpen your terminal and execute:\n\nsudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade && sudo apt-get autoremove\n\nOr you may go through GUI: Update Manager:\n\n\n\nUpdate Manager"
  },
  {
    "objectID": "linux/linux-distros-mint.html#install-developer-tools",
    "href": "linux/linux-distros-mint.html#install-developer-tools",
    "title": "Linux Distros: Mint",
    "section": "3 Install Developer Tools",
    "text": "3 Install Developer Tools\n\n3.1 Make a Bash Script Executable\n\nCreate a new text file with all the software you need with a .sh extension and code it as #!/bin/bash (that is, copy that line to the top of it)\n\ndevtools.sh\n\n\nMake the file executable, open the command line and run: chmod u+x devtools.sh. You are giving permissions to execute this file: it will grant only the owner of that file execution permissions.\nRun it: ./devtools.sh or double-click the icon\nBe careful with certain packages and tools do not work under apt get install, you will need to use snap\n\nsnap\nsudo mv /etc/apt/preferences.d/nosnap.pref ~/Documents/nosnap.backup\nsudo apt update\nsudo apt install snapd\n\nintellij-idea-educational\nvisual code educational\nsudo snap install intellij-idea-educational --classic\n\nchrome\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n\nobsidian\nwget https://github.com/obsidianmd/obsidian-releases/releases/download/v1.0.3/obsidian_1.0.3_amd64.snap\nsudo snap install --dangerous obsidian_1.0.3_amd64.snap --classic\n\nvisual code educational\nwget https://az764295.vo.msecnd.net/stable/1ad8d514439d5077d2b0b7ee64d2ce82a9308e5a/code_1.74.1-1671015296_amd64.deb\nsudo apt install ./code_1.74.1-1671015296_amd64.deb"
  },
  {
    "objectID": "linux/linux-distros-mint.html#timeshift",
    "href": "linux/linux-distros-mint.html#timeshift",
    "title": "Linux Distros: Mint",
    "section": "4 Timeshift",
    "text": "4 Timeshift\nTimeshift is a system restore utility which takes snapshots of the system at regular intervals. These snapshots can be restored at a later date to undo system changes. Creates incremental snapshots using rsync or BTRFS snapshots using BTRFS tools.\n  \n\n\n\n  Linux Distros: Ubuntu \n\n\n\n  top \n\n\n\n Linux Distros: Debian"
  },
  {
    "objectID": "linux/linux-distros-opensuse.html",
    "href": "linux/linux-distros-opensuse.html",
    "title": "Linux Distros: openSuse",
    "section": "",
    "text": "Linux Distros: Debian \n\n\n\n  top \n\n\n\n Linux Distros: Manjaro"
  },
  {
    "objectID": "linux/linux-distros-redhat.html",
    "href": "linux/linux-distros-redhat.html",
    "title": "Linux Distros: Red Hat Enterprise Linux",
    "section": "",
    "text": "📘 Red Hat Enterprise Linux (RHEL)\nRed Hat Enterprise Linux (RHEL) is the most developer friendly Linux ever with new developer-centric features like container tools, advanced language support, and application streams.\nRed Hat Enterprise Linux (RHEL):"
  },
  {
    "objectID": "linux/linux-distros-redhat.html#cheat-sheet",
    "href": "linux/linux-distros-redhat.html#cheat-sheet",
    "title": "Linux Distros: Red Hat Enterprise Linux",
    "section": "1 Cheat-sheet",
    "text": "1 Cheat-sheet\nRHEL8_CheatSheet \n\n\n\n  Linux Distros: Manjaro \n\n\n\n  top \n\n\n\n Linux Lab#LI01-1: Choose Linux"
  },
  {
    "objectID": "linux/linux-distros-ubuntu.html",
    "href": "linux/linux-distros-ubuntu.html",
    "title": "Linux Distros: Ubuntu",
    "section": "",
    "text": "Linux: Virtual Machines \n\n\n\n  top \n\n\n\n Linux Distros: Mint"
  },
  {
    "objectID": "linux/linux-what-bash.html",
    "href": "linux/linux-what-bash.html",
    "title": "Linux: Bash",
    "section": "",
    "text": "📘 Bash\nBash (short for “Bourne again shell”) is a Unix shell and command language which was the default shell on Unix systems at the time. Bash is a command-line interface (CLI) that allows users to enter commands and execute programs, as well as perform various other tasks such as managing files, manipulating text, and interacting with other programs.\nBash is the default shell on many Linux systems, as well as on macOS and other Unix-like operating systems."
  },
  {
    "objectID": "linux/linux-what-bash.html#overview",
    "href": "linux/linux-what-bash.html#overview",
    "title": "Linux: Bash",
    "section": "2 Overview",
    "text": "2 Overview\n\n\n\nScreenshot of Bourne Again SHell (BASH)\n\n\nBash is a powerful and flexible tool that is widely used by developers, system administrators, and other users to automate tasks, write scripts, and perform other types of command-line operations.\nIt is particularly useful for managing and interacting with large numbers of files and directories, as well as for automating repetitive tasks.\nBash scripts can be used to automate a wide variety of tasks, such as setting up and configuring systems, performing backups, and managing network resources. Bash is also widely used as a programming language, with a syntax and structure that is similar to other programming languages.\n\n\n\n\n\n\nMore on bash\n\n\n\n\n\nIn addition to its many features and capabilities, Bash is also highly customizable, with a variety of options and settings that allow users to customize its behavior and appearance. Users can customize their Bash environment by modifying the Bash configuration file, known as the bashrc file, which contains a set of commands and settings that are executed every time Bash is launched.\n\n\n\n\n\n\nScreenshot of Bourne Again SHell (BASH) by Wikimedia Foundation"
  },
  {
    "objectID": "linux/linux-what-bash.html#basic-command-on-bash",
    "href": "linux/linux-what-bash.html#basic-command-on-bash",
    "title": "Linux: Bash",
    "section": "3 Basic command on Bash",
    "text": "3 Basic command on Bash\n\n\nCode Bash\n\n\n\nintroduction.sh\n\n#!/usr/bin/env bash\n# First line of the script is the shebang which tells the system how to execute\n# the script: https://en.wikipedia.org/wiki/Shebang_(Unix)\n# As you already figured, comments start with #. Shebang is also a comment.\n\n# Simple hello world example:\necho \"Hello world!\" # => Hello world!\n\n# Each command starts on a new line, or after a semicolon:\necho \"This is the first command\"; echo \"This is the second command\"\n# => This is the first command\n# => This is the second command\n\n# Declaring a variable looks like this:\nvariable=\"Some string\"\n\n# But not like this:\nvariable = \"Some string\" # => returns error \"variable: command not found\"\n# Bash will decide that `variable` is a command it must execute and give an error\n# because it can't be found.\n\n# Nor like this:\nvariable= \"Some string\" # => returns error: \"Some string: command not found\"\n# Bash will decide that \"Some string\" is a command it must execute and give an\n# error because it can't be found. In this case the \"variable=\" part is seen\n# as a variable assignment valid only for the scope of the \"Some string\"\n# command.\n\n# Using the variable:\necho \"$variable\" # => Some string\necho '$variable' # => $variable\n# When you use a variable itself — assign it, export it, or else — you write\n# its name without $. If you want to use the variable's value, you should use $.\n# Note that ' (single quote) won't expand the variables!\n# You can write variable without surrounding quotes but it's not recommended.\n\n# Parameter expansion ${...}:\necho \"${variable}\" # => Some string\n# This is a simple usage of parameter expansion such as two examples above.\n# Parameter expansion gets a value from a variable.\n# It \"expands\" or prints the value.\n# During the expansion time the value or parameter can be modified.\n# Below are other modifications that add onto this expansion.\n\n# String substitution in variables:\necho \"${variable/Some/A}\" # => A string\n# This will substitute the first occurrence of \"Some\" with \"A\".\n\n# Substring from a variable:\nlength=7\necho \"${variable:0:length}\" # => Some st\n# This will return only the first 7 characters of the value\necho \"${variable: -5}\" # => tring\n# This will return the last 5 characters (note the space before -5).\n# The space before minus is mandatory here.\n\n# String length:\necho \"${#variable}\" # => 11\n\n# Indirect expansion:\nother_variable=\"variable\"\necho ${!other_variable} # => Some string\n# This will expand the value of `other_variable`.\n\n# The default value for variable:\necho \"${foo:-\"DefaultValueIfFooIsMissingOrEmpty\"}\"\n# => DefaultValueIfFooIsMissingOrEmpty\n# This works for null (foo=) and empty string (foo=\"\"); zero (foo=0) returns 0.\n# Note that it only returns default value and doesn't change variable value.\n\n# Declare an array with 6 elements:\narray=(one two three four five six)\n# Print the first element:\necho \"${array[0]}\" # => \"one\"\n# Print all elements:\necho \"${array[@]}\" # => \"one two three four five six\"\n# Print the number of elements:\necho \"${#array[@]}\" # => \"6\"\n# Print the number of characters in third element\necho \"${#array[2]}\" # => \"5\"\n# Print 2 elements starting from fourth:\necho \"${array[@]:3:2}\" # => \"four five\"\n# Print all elements each of them on new line.\nfor item in \"${array[@]}\"; do\n    echo \"$item\"\ndone"
  },
  {
    "objectID": "linux/linux-what-bash.html#cheat-sheet",
    "href": "linux/linux-what-bash.html#cheat-sheet",
    "title": "Linux: Bash",
    "section": "4 Cheat-sheet",
    "text": "4 Cheat-sheet\n\nBash scripting cheatsheet\nLearn X in Y minutes Where X=bash \n\n\n\n  Linux: basic concepts \n\n\n\n  top \n\n\n\n Linux: su and sudo"
  },
  {
    "objectID": "linux/linux-what-basics.html",
    "href": "linux/linux-what-basics.html",
    "title": "Linux: basic concepts",
    "section": "",
    "text": "📘 Linux\nLinux is a free and open-source operating system. It is a Unix-like operating system that is based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is commonly used in web servers, smartphones, and other devices where reliability, security, and performance are important."
  },
  {
    "objectID": "linux/linux-what-basics.html#bash",
    "href": "linux/linux-what-basics.html#bash",
    "title": "Linux: basic concepts",
    "section": "1 Bash",
    "text": "1 Bash\nBash is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell. First released in 1989, it has been used as the default login shell for most Linux distributions.\nMore on Bass, next article"
  },
  {
    "objectID": "linux/linux-what-basics.html#basic-commands",
    "href": "linux/linux-what-basics.html#basic-commands",
    "title": "Linux: basic concepts",
    "section": "2 Basic commands",
    "text": "2 Basic commands\nHere are some basic terminal commands that can be used in Linux Mint:\n\npwd: Print the name of the current working directory (i.e., show the full path to the current directory)\nls: List the contents of the current directory\ncd: Change the current working directory\nmkdir: Create a new directory\nrmdir: Remove an empty directory\ntouch: Create a new file or update the timestamp of an existing file\ncp: Copy a file or directory\nmv: Move or rename a file or directory\nrm: Remove a file\nman: Display the manual page for a command\nsudo: Run a command with superuser privileges\napt-get is a command-line utility for managing packages in the Linux operating system. It is used to install, update, and remove packages from the system. apt-get is part of the Advanced Packaging Tool (APT) system, which is used to manage software packages in the Debian and Ubuntu Linux distributions.\n\nThese are just a few examples of the many commands that are available in Linux. To learn more about a specific command, you can use the man command to view its manual page.\nFor example, to learn more about the ls command, you could type man ls in the terminal."
  },
  {
    "objectID": "linux/linux-what-basics.html#getting-software-wget-apt-get-etc",
    "href": "linux/linux-what-basics.html#getting-software-wget-apt-get-etc",
    "title": "Linux: basic concepts",
    "section": "3 Getting software: wget, apt-get, etc",
    "text": "3 Getting software: wget, apt-get, etc\n\nIn Linux, wget is a command-line utility that allows you to download files from the internet. It can be used to download files from HTTP, HTTPS, and FTP servers.\napt-get is a package manager for the Debian and Ubuntu Linux distributions. It allows you to install, update, and remove software packages from your system.\nsnap is a package manager developed by Canonical, the company behind the Ubuntu Linux distribution. It allows you to install and manage software packages in a consistent and secure way, and is designed to work across a wide range of Linux distributions.\nThere are other similar package managers in Linux, such as yum for Red Hat and CentOS, and dnf for Fedora. These package managers allow you to easily install, update, and remove software packages on your system."
  },
  {
    "objectID": "linux/linux-what-basics.html#chmod",
    "href": "linux/linux-what-basics.html#chmod",
    "title": "Linux: basic concepts",
    "section": "4 CHMOD",
    "text": "4 CHMOD\n\n\n\nLinux CHMOD cheat-sheet"
  },
  {
    "objectID": "linux/linux-what-basics.html#cheat-sheet-linux-commands",
    "href": "linux/linux-what-basics.html#cheat-sheet-linux-commands",
    "title": "Linux: basic concepts",
    "section": "5 Cheat-sheet Linux Commands",
    "text": "5 Cheat-sheet Linux Commands\nThis cheat sheet presents a list of command-line executables that are frequently used by developers working on a computer running the Linux operating system. The commands are organized by category.\nLinux-Commands-cheat-sheet-Red-Hat-Developer\nThe $ symbol that proceeds commands in the examples represents the command line prompt\nLinux-Commands-cheat-sheet-Red-Hat-Developer\n\n\n\n\n\n  Home \n\n\n\n  top \n\n\n\n Linux: Bash"
  },
  {
    "objectID": "linux/linux-what-fsys.html",
    "href": "linux/linux-what-fsys.html",
    "title": "Linux: File System",
    "section": "",
    "text": "📘 System\nIn a Linux system, the file system is organized into a hierarchical structure, starting with the root directory (represented by a forward slash /). The root directory contains several subdirectories, including /bin, /etc, /home, /lib, /media, /mnt, /opt, /sbin, /tmp, and /usr.\n\n\nThese directories contain system executables, configuration files, user home directories, libraries, removable media, mount points, optional software, system executables, temporary files, and shared software, respectively.\nOther directories, such as /dev, /proc, and /sys, contain special files that provide access to hardware devices and kernel information.\n\n\n\nLinux File System\n\n\n\n\n\nLinux File System, image from Introduction to Linux, A Hands on Guide, Machtelt Garrels and Original webpage by Petersen Gross, modified by William Albritton\n\n\n\n\n\n\n\n  Linux: pipes \n\n\n\n  top \n\n\n\n Linux: Virtual Machines"
  },
  {
    "objectID": "linux/linux-what-pipes.html",
    "href": "linux/linux-what-pipes.html",
    "title": "Linux: pipes",
    "section": "",
    "text": "📘 Linux\nA pipe is a command that allows you to redirect the output of one command as the input to another command.\nIt is represented by the vertical bar symbol |."
  },
  {
    "objectID": "linux/linux-what-pipes.html#introduction",
    "href": "linux/linux-what-pipes.html#introduction",
    "title": "Linux: pipes",
    "section": "1 Introduction",
    "text": "1 Introduction\nFor example, you can use the pipe command to list all the files in a directory, and then use the grep command to search for a specific string in those files:\nls | grep \"devtools\"\nThis will list all the files in the current directory and then search for the string “devtools” in the output of the ls command.\nYou can also use multiple pipes to chain together multiple commands. For example:\nls | grep \"devtools\" | sort\nThis will list all the files in the current directory, search for the string “devtools” in the output of the ls command, and then sort the output alphabetically.\n\n\n\npipe linux ls-grep-sort\n\n\n\n1.1 grep\ngrep searches for patterns in text. It stands for global regular expression print, and it allows you to search for specific patterns of characters in one or more files.\nYou can use grep to search for a specific word or phrase in a file, or you can use it to search for more complex patterns using regular expressions.\n\n\nHere are a few examples of how grep can be used:\n\n To search for a specific word in a file:\ngrep \"word\" file.txt\nTo search for a specific word in multiple files:\ngrep \"word\" file1.txt file2.txt file3.txt\nTo search for a word that starts with a specific letter:\ngrep \"^w\" file.txt\nTo search for a word that ends with a specific letter:\ngrep \"w$\" file.txt"
  },
  {
    "objectID": "linux/linux-what-pipes.html#using-a-pipe",
    "href": "linux/linux-what-pipes.html#using-a-pipe",
    "title": "Linux: pipes",
    "section": "2 Using a pipe",
    "text": "2 Using a pipe\nExmaple from: Combining multiple commands\nAs we know, we may chaining pipes consecutively. We can for example send the output of wc directly to sort, and then the resulting output to head. This removes the need for any intermediate files.\nWe’ll start by using a pipe to send the output of wc to sort:\n\n\nwc and sort\n\n$ wc -l *.pdb | sort -n\n\n\n\noutput\n\n   9 methane.pdb\n  12 ethane.pdb\n  15 propane.pdb\n  20 cubane.pdb\n  21 pentane.pdb\n  30 octane.pdb\n 107 total\n\nWe can then send that output through another pipe, to head, so that the full pipeline becomes:\n\n\nwc and sort and head\n\n$ wc -l *.pdb | sort -n | head -n 1\n\n\n\noutput\n\n methane.pdb\n\nThe calculation is head of sort of line count of .pdb. The redirection and pipes used in the last few commands are illustrated below:\n\n\n\n$ wc -l *.pdb | sort -n | head -n 1\n\n\n\n2.1 wc, cat, head and sort\n\nwc counts lines, words, and characters in its inputs.\ncat displays the contents of its inputs.\nsort sorts its inputs.\nhead displays the first 10 lines of its input.\ntail displays the last 10 lines of its input.\ncommand > [file] redirects a command’s output to a file (overwriting any existing content).\ncommand >> [file] appends a command’s output to a file.\n[first] | [second] is a pipeline: the output of the first command is used as the input to the second.\nThe best way to use the shell is to use pipes to combine simple single-purpose programs (filters).\n\n\n\n\n\n\n  Linux: su and sudo \n\n\n\n  top \n\n\n\n Linux: File System"
  },
  {
    "objectID": "linux/linux-what-sudo.html",
    "href": "linux/linux-what-sudo.html",
    "title": "Linux: su and sudo",
    "section": "",
    "text": "📘 Linux\nsu and sudo are two different commands in Linux that are used to execute commands with the privileges of another user."
  },
  {
    "objectID": "linux/linux-what-sudo.html#introduction",
    "href": "linux/linux-what-sudo.html#introduction",
    "title": "Linux: su and sudo",
    "section": "1 Introduction",
    "text": "1 Introduction\nBoth su and sudo are useful tools for managing and interacting with a Linux system, but they have different uses and implications. su allows you to switch to another user account and operate as that user, while sudo allows you to execute a single command with the privileges of another user without switching to that user’s account.\n\nsu stands for switch user, and it allows you to switch to another user account and execute commands with that user’s privileges. For example, if you are currently logged in as a normal user and you want to run a command as the root user, you can use the su command to switch to the root user and then run the command.\nsudo stands for superuser do, and it allows you to execute a single command with the privileges of another user, usually the root user. It is often used to execute commands that require administrative privileges, such as installing software or making system-wide configuration changes.\n\nBut in Linux Mint sudo is often considered to be a better alternative to su for several reasons, it allows you to execute a single command with administrative privileges, logs all command executions, allows for a more fine-grained control over who can execute which commands, prompts for the user’s password before execution, and is more widely used and supported in the Linux community."
  },
  {
    "objectID": "linux/linux-what-sudo.html#sudo--i",
    "href": "linux/linux-what-sudo.html#sudo--i",
    "title": "Linux: su and sudo",
    "section": "2 sudo -i",
    "text": "2 sudo -i\nThe sudo -i, The -i flag stands for initialize. command is used to execute a command or start a shell session as another user, usually the root user, with that user’s environment and privileges.\n\nsudo -i causes the command or shell session to be executed as if the target user had logged in directly. This means that the target user’s environment variables, shell settings, and other configuration options will be applied to the command or shell session.\n\n\n\n\nsudo -i"
  },
  {
    "objectID": "linux/linux-what-sudo.html#sudo-apt-get-update",
    "href": "linux/linux-what-sudo.html#sudo-apt-get-update",
    "title": "Linux: su and sudo",
    "section": "3 sudo apt-get update",
    "text": "3 sudo apt-get update\napt-get is a command line interface for retrieval of packages and information about them from authenticated sources and for installation, upgrade and removal of packages together with their dependencies.\n\n\n\nsudo apt-get update"
  },
  {
    "objectID": "linux/linux-what-sudo.html#adduser",
    "href": "linux/linux-what-sudo.html#adduser",
    "title": "Linux: su and sudo",
    "section": "4 adduser",
    "text": "4 adduser\nadduser: This command is used to add a new user to the system.\n\nFor example, to add a new user with the username alex, you can use the command sudo adduser alex.\nsudo userdel alex, the userdel command is used to delete a user account and the user’s home directory from the system.\nsudo adduser alex --shell /bin/bash --gid 0, to add a new user named alex with root privileges using sudo adduser.\nTo list all users on a Linux system, you can use the cat command to display the contents of the /etc/passwd file. The /etc/passwd file contains information about all the users on the system, including their username, user ID (UID), and home directory: cat /etc/passwd\nAlternatively, you can use the cut command to extract the username from each line of the /etc/passwd file: cut -d: -f1 /etc/passwd.\n\n\n\n\nsudo adduser newuser && deluser 1/3\n\n\n\n\n\nsudo adduser newuser && deluser 2/3\n\n\n  \n\n\n\n  Linux: Bash \n\n\n\n  top \n\n\n\n Linux: pipes"
  },
  {
    "objectID": "linux/linux-what-vm.html",
    "href": "linux/linux-what-vm.html",
    "title": "Linux: Virtual Machines",
    "section": "",
    "text": "A virtual machine is a software program that emulates the functionality of a physical computer.\nIt allows a computer to run multiple operating systems and applications in **isolated environments>>>>>>> master, providing a level of isolation and security between them.\nThis allows users to run different operating systems and applications on the same physical computer, providing a level of flexibility and convenience that is not possible with a physical computer."
  },
  {
    "objectID": "linux/linux-what-vm.html#how-it-works",
    "href": "linux/linux-what-vm.html#how-it-works",
    "title": "Linux: Virtual Machines",
    "section": "2 How it works",
    "text": "2 How it works\n\nVirtual Machine (VM) is the virtualization/emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.\n\n\n\n\nWhat is server virtualization\n\n\nA hypervisor, also known as a virtual machine monitor or VMM, is software that creates and runs virtual machines (VMs). A hypervisor allows one host computer to support multiple guest VMs by virtually sharing its resources, such as memory and processing."
  },
  {
    "objectID": "linux/linux-what-vm.html#benefits-of-hypervisors",
    "href": "linux/linux-what-vm.html#benefits-of-hypervisors",
    "title": "Linux: Virtual Machines",
    "section": "3 Benefits of hypervisors",
    "text": "3 Benefits of hypervisors\nThere are several benefits to using a hypervisor that hosts multiple virtual machines:\n\nSpeed: Hypervisors allow virtual machines to be created instantly, unlike bare-metal servers. This makes it easier to provision resources as needed for dynamic workloads.\nEfficiency: Hypervisors that run several virtual machines on one physical machine’s resources also allow for more efficient utilization of one physical server. It is more cost- and energy-efficient to run several virtual machines on one physical machine than to run multiple underutilized physical machines for the same task.\nFlexibility: Bare-metal hypervisors allow operating systems and their associated applications to run on a variety of hardware types because the hypervisor separates the OS from the underlying hardware, so the software no longer relies on specific hardware devices or drivers.\nPortability: Hypervisors allow multiple operating systems to reside on the same physical server (host machine). Because the virtual machines that the hypervisor runs are independent from the physical machine, they are portable. IT teams can shift workloads and allocate networking, memory, storage and processing resources across multiple servers as needed, moving from machine to machine or platform to platform. When an application needs more processing power, the virtualization software allows it to seamlessly access additional machines."
  },
  {
    "objectID": "linux/linux-what-vm.html#what-is-virtualbox",
    "href": "linux/linux-what-vm.html#what-is-virtualbox",
    "title": "Linux: Virtual Machines",
    "section": "4 What is Virtualbox",
    "text": "4 What is Virtualbox\nVirtualBox is a free and open-source virtualization platform that allows users to run multiple operating systems on a single physical computer.\nIt is a type of hypervisor, which means it sits between the physical hardware and the operating system, allowing multiple operating systems to run on the same hardware.\nVirtualBox allows users to create and manage virtual machines, each of which can run a different operating system and be configured with its own virtual hardware. This allows users to run multiple operating systems and applications on the same computer, providing a level of flexibility and convenience that is not possible with a physical computer."
  },
  {
    "objectID": "linux/linux-what-vm.html#step-by-step-linux-mint",
    "href": "linux/linux-what-vm.html#step-by-step-linux-mint",
    "title": "Linux: Virtual Machines",
    "section": "5 Step-by-step: Linux Mint",
    "text": "5 Step-by-step: Linux Mint\nHere are the steps to create a Linux Mint virtual machine using VirtualBox on Windows:\n\nDownload and install VirtualBox on your computer.\nStart VirtualBox and click the New button to create a new virtual machine.\nIn the Create Virtual Machine wizard, give your virtual machine a name and select Linux as the operating system type and Mint as the version.\nSelect the amount of memory (RAM) you want to allocate to the virtual machine and click Next.\nSelect Create a virtual hard disk now and click Create.\nIn the Create a virtual hard disk wizard, select VDI (VirtualBox Disk Image) as the disk type and Dynamically allocated as the storage type.\nSelect the location where you want to store the virtual disk and the size of the disk, and click Create.\nClick on the new virtual machine in the list and click the Start button to boot the virtual machine.\nIn the select start-up disk window, select the Linux Mint ISO file that you previously downloaded from Linux Mint 21 “Vanessa” and click Start. 9.1. If not, manually select ISO to Controller:IDE>Optic unit>Choose file\nFollow the on-screen instructions to install Linux Mint on the virtual machine.\nRemove the iso from the Controller:IDE>Optic unit>Choose file.\nOnce the installation is complete, you can use the virtual machine to run Linux Mint and any applications that are compatible with the operating system. You can also customize the virtual machine’s settings and virtual hardware to suit your needs.\nInstall Guest Additions: 13.1. How to Install VirtualBox Guest Additions in Linux Mint 19.1 by Linux Distro Installation Guide\n\nInstall Extension Pack: from VirtualBox that allows the VM to see the USB 3.0 on our directory.\n\n\n\n\n\n\nDescriprion\n\n\n\nAllows to see on the VM the USB 3.0 provided from CIFO on our directory.\n\n\n14.1. Download the VirtualBox 7.0.4 Oracle VM VirtualBox Extension Pack.\n14.2. Verify the VM remains closed before the installation of the Extension Pack.\n\n\n\n\n\n14.3. Follow the instruction of this Link\n\n\n\n\n\n\n  Linux: File System \n\n\n\n  top \n\n\n\n Linux Distros: Ubuntu"
  },
  {
    "objectID": "linux/resources.html",
    "href": "linux/resources.html",
    "title": "Linux Resources",
    "section": "",
    "text": "Linux Resources"
  },
  {
    "objectID": "linux/resources.html#linux-webs",
    "href": "linux/resources.html#linux-webs",
    "title": "Linux Resources",
    "section": "1 Linux webs",
    "text": "1 Linux webs\n\nLinux and bash resources\n\n\n\n\n\n\nLink\nDescription\n\n\n\n\nAdvanced Linux Commands Cheat Sheet\nThis cheat sheet presents a collection of Linux commands and executables for developers who are using the Linux operating system in advanced programming scenarios. Commands are organized by category and each one is presented with syntax, an explanation of what it is used for, and an example.\n\n\nBash scripting cheatsheet\nBash scripting cheatsheet\n\n\nLearn X in Y minutes Where X=bash\nBash is a name of the unix shell, which was also distributed as the shell for the GNU operating system and as the default shell on most Linux distros. Nearly all examples below can be a part of a shell script or executed directly in the shell."
  },
  {
    "objectID": "linux/resources.html#bash",
    "href": "linux/resources.html#bash",
    "title": "Linux Resources",
    "section": "2 Bash",
    "text": "2 Bash"
  },
  {
    "objectID": "linux/resources.html#bash-scripting",
    "href": "linux/resources.html#bash-scripting",
    "title": "Linux Resources",
    "section": "3 Bash scripting",
    "text": "3 Bash scripting\n\nThe Bash Guide, A quality-driven guide through the shell’s many features. The Bash Guide\nGreg’s Wiki: Bash Guide\nBash Guide for Beginners, Machtelt Garrels: Bash Guide for Beginners\nGNU Bash Reference Manual: Bash Features"
  },
  {
    "objectID": "linux/resources.html#bash-scripting-cheatsheet",
    "href": "linux/resources.html#bash-scripting-cheatsheet",
    "title": "Linux Resources",
    "section": "4 Bash scripting cheatsheet",
    "text": "4 Bash scripting cheatsheet\n\n\n\n\n\n\n  Linux Lab#LI04-3: Distribute the terminal app \n\n\n\n  top \n\n\n\n DevOps: Introduction"
  },
  {
    "objectID": "markup/markup-css-basics.html",
    "href": "markup/markup-css-basics.html",
    "title": "Cascade Style Sheet",
    "section": "",
    "text": "Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.\nCSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now CSS without a version number.\nAfter CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.\nreference: CSS: Cascading Style Sheets"
  },
  {
    "objectID": "markup/markup-css-basics.html#starting-with-some-html",
    "href": "markup/markup-css-basics.html#starting-with-some-html",
    "title": "Cascade Style Sheet",
    "section": "2 Starting with some HTML",
    "text": "2 Starting with some HTML\nOur starting point is an HTML document. You can copy the code from below if you want to work on your own computer. Save the code below as index.html in a folder on your machine.\nReference: Starting with some HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Getting started with CSS</title>\n  </head>\n\n  <body>\n    <h1>I am a level one heading</h1>\n\n    <p>\n      This is a paragraph of text. In the text is a\n      <span>span element</span> and also a\n      <a href=\"https://example.com\">link</a>.\n    </p>\n\n    <p>\n      This is the second paragraph. It contains an <em>emphasized</em> element.\n    </p>\n\n    <ul>\n      <li>Item <span>one</span></li>\n      <li>Item two</li>\n      <li>Item <em>three</em></li>\n    </ul>\n  </body>\n</html></code>"
  },
  {
    "objectID": "markup/markup-css-basics.html#adding-css-to-our-document",
    "href": "markup/markup-css-basics.html#adding-css-to-our-document",
    "title": "Cascade Style Sheet",
    "section": "3 Adding CSS to our document",
    "text": "3 Adding CSS to our document\nTo link styles.css to index.html, add the following line somewhere inside the <head> of the HTML document:\n<link rel=\"stylesheet\" href=\"styles.css\" />\nThis <link> element tells the browser that we have a stylesheet, using the rel attribute, and the location of that stylesheet as the value of the href attribute. You can test that the CSS works by adding a rule to styles.css. Using your code editor, add the following to your CSS file:\n<link rel=\"stylesheet\" href=\"styles.css\" />\nTo target all paragraphs in the document, you would use the selector p. To turn all paragraphs green, you would use:\np {\n  color: green;\n}\nYou can target multiple selectors at the same time by separating the selectors with a comma. If you want all paragraphs and all list items to be green, your rule would look like this:\np,\nli {\n  color: green;\n}\n\n\n\n\n\n  Quarto Markdown: cheat-sheet \n\n\n\n  top \n\n\n\n CSS: W3.css"
  },
  {
    "objectID": "markup/markup-css-w3css.html",
    "href": "markup/markup-css-w3css.html",
    "title": "CSS: W3.css",
    "section": "",
    "text": "W3.CSS is a CSS (Cascading Style Sheets) framework that is designed to make it easier to create modern and responsive web pages.\nIt provides a set of pre-defined styles and layouts that can be easily customized and applied to HTML elements, allowing developers to quickly and easily create professional-looking web pages without the need to write complex CSS code.\nW3.CSS is lightweight, easy to use, and supports all modern web browsers.\n\nW3.CSS is Smaller, Faster and Easier to Use\n\nW3.CSS is a modern, responsive, mobile first CSS framework.\nW3.CSS provides equality for all browsers: Chrome. Firefox. Edge. IE. Safari. Opera.\nW3.CSS provides equality for all devices: Desktop. Laptop. Tablet. Mobile.\nW3.CSS is standard CSS only (No jQuery or JavaScript library).\n\n\n\nReference: W3.css"
  },
  {
    "objectID": "markup/markup-css-w3css.html#example",
    "href": "markup/markup-css-w3css.html#example",
    "title": "CSS: W3.css",
    "section": "2 Example",
    "text": "2 Example\n\n\nexample.css\n\n<!DOCTYPE html>\n<html>\n<title>W3.CSS</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n<body>\n\n<div class=\"w3-container w3-teal\">\n  <h1>My Car</h1>\n</div>\n\n<img src=\"img_car.jpg\" alt=\"Car\" style=\"width:100%\">\n\n<div class=\"w3-container\">\n  <p>A car is a wheeled, self-powered motor vehicle used for transportation.</p>\n</div>\n\n<div class=\"w3-container w3-teal\">\n  <p>My footer information</p>\n</div>\n\n</body>\n</html> \n\n\n\n\n\n\n  Cascade Style Sheet \n\n\n\n  top \n\n\n\n Lab#MD01-1: Create and publish by Quarto"
  },
  {
    "objectID": "markup/markup-lang-html-md.html",
    "href": "markup/markup-lang-html-md.html",
    "title": "Markdown and HTML working together, good idea?",
    "section": "",
    "text": "📘 Markdown and HTML\nOverall, it is generally best to avoid mixing HTML and Markdown in the same document, unless you are confident that you can do so without introducing errors or inconsistencies.\nInstead, it is often better to use one language exclusively, and to use the appropriate syntax and formatting for that language"
  },
  {
    "objectID": "markup/markup-lang-html-md.html#problems",
    "href": "markup/markup-lang-html-md.html#problems",
    "title": "Markdown and HTML working together, good idea?",
    "section": "2 Problems",
    "text": "2 Problems\n\nDisplay: If the HTML and Markdown are not properly formatted or nested, the resulting document may not be readable or display correctly. This can lead to confusion for readers and make the document difficult to understand.\nMaintain: Mixing HTML and Markdown can make it difficult to maintain the document, as changes to one language may affect the other. This can result in errors and inconsistencies, and make it more challenging to update the document over time.\nIncompatibilities: Different Markdown parsers and HTML renderers may have different interpretations of the mixed language, leading to differences in how the document is displayed or interpreted. This can cause confusion for readers and make it difficult to ensure that the document is consistently displayed across different platforms."
  },
  {
    "objectID": "markup/markup-lang-html-md.html#example-creating-navigation-tabs",
    "href": "markup/markup-lang-html-md.html#example-creating-navigation-tabs",
    "title": "Markdown and HTML working together, good idea?",
    "section": "3 Example: creating navigation TABs",
    "text": "3 Example: creating navigation TABs\n\n3.1 Approach #1: MD + CSS\n\n\n\n\n\n\nPublishing website by Quarto engine\n\n\n\n\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n3.2 Before\n\nStudents will need to have a basic understanding of web development, including HTML, CSS, and JavaScript.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n3.3 Goal\n\nIn this project, students will be required to create a web application using HTML, CSS, and JavaScript. They will also need to understand and use Markdown to format their project’s documentation. Additionally, they will need to use GitHub and Visual Code to manage their project’s code and collaborate with their peers.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n3.4 Tasks\n\nIn the first part of the project, students will create a basic web page using markdown and publish it on Github repository using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\nIn the second part of the project, students will learn how to publish their website on gh-pages, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n3.5 Optional\n\nAs an optional study, students may also want to learn about using callouts in their markdown documentation. The following links provide useful information on the topic:\n\nmarkdown-callouts\nCallout Blocks Quarto\nGetting Started with RDMD\nDivs and spans\ncodepen.io HTML+CSS\n\nUsing callouts, links, tabs and CSS can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.\nTo take their project to the next level, students may also choose to connect to an API (Application Programming Interface) to retrieve data and render charts using JavaScript. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n\nQuarto data sources\n\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n3.6 After\n\nThe Quarto website project is a great opportunity for students to develop their skills in web development, markdown, and version control using GitHub and Visual Code.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n\n\n\n\n\n\n\n\nMarkdown callouts with calls to CSS classes\n\n\n\n\n\n::: {.callout-info icon=false  collapse=\"false\"}\n## Publishing website by Quarto engine\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n::: {.tab-content #before}\n### Before\n>Students will need to have a **basic understanding of web development**, including HTML, CSS, and JavaScript.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #goal}\n### Goal\n>In this project, students will be required to create a **web application using HTML, CSS, and JavaScript**. They will also need to understand and use **Markdown to format their project's documentation**. Additionally, they will need to use GitHub and Visual Code to manage their project's code and collaborate with their peers.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #tasks}\n### Tasks\n>In the first part of the project, students will create a **basic web page using markdown and publish it on Github repository** using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\n>\n>In the second part of the project, students will learn how to **publish their website on gh-pages**, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #optional}\n### Optional\n>As an optional study, students may also want to learn about using **callouts in their markdown documentation**. The following links provide useful information on the topic:\n>\n>- [markdown-callouts](https://oprypin.github.io/markdown-callouts/)\n>- [Callout Blocks Quarto](https://quarto.org/docs/authoring/callouts.html)\n>- [Getting Started with RDMD](https://rdmd.readme.io/docs/getting-started)\n>- [Divs and spans](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans)\n>- [codepen.io HTML+CSS](https://codepen.io/dongmikim/pen/VwLqyjQ)\n>\n>Using **callouts, links, tabs and CSS** can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.\n>\n>To take their project to the next level, students may also choose to connect to an **API** (Application Programming Interface) to **retrieve data and render charts using JavaScript**. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n>\n> - [Quarto data sources](/markup/markupquartoprogramming.qmd)\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #after}\n### After\n>The Quarto website project is a great opportunity for students to develop their skills in **web development, markdown, and version control using GitHub and Visual Code**.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n:::\n\n\n\n\n\n3.7 Approach #2: HTML + CSS\nCreate and publish by Quarto\n\n\n3.8 Approach #3: HTML + CSS + JS\nFrom w3.css: W3.CSS Navigation Tabs\nMaven/Gradle Person and Account stored in JSON\n<script>\nfunction openLab(evt, labStep) {\n  var i, tabcontent, tablinks;\n  tabcontent = document.getElementsByClassName(\"tabcontentw3\");\n  for (i = 0; i < tabcontent.length; i++) {\n    tabcontent[i].style.display = \"none\";\n  }\n  tablinks = document.getElementsByClassName(\"tablinks\");\n  for (i = 0; i < tablinks.length; i++) {\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n  }\n  document.getElementById(labStep).style.display = \"block\";\n  evt.currentTarget.className += \" active\";\n}\n</script>\n\n\n3.9 Approach #4: import MDReadme?\nCode Blocks\nSyntax\nWe offer both classic single code blocks, as well as a tabbed interface for displaying multiple code blocks concisely! These are written nearly identically to a series of vanilla markdown code snippets, except for their distinct lack of an additional line break separating each subsequent block:\njavascript I'm A tab\nconsole.log('Code Tab A');\n\njavascript I'm tab B\nconsole.log('Code Tab B');\nCustom CSS\n.markdown-body {\n  --md-code-background: #e3dcef;\n  --md-code-text: #4a2b7b;\n  --md-code-tabs: #c6b8dd;\n  --md-code-radius: 4px;\n}\n\n\n\n\n\n\nHow to import that feature Navigate by Tabs into Quarto?\n\n\n\nThis could work but it has been NOT tested:\n\nYou could convert Readme Markdown to Quarto Markdown, using a tool like Markdown Converter (https://markdown.pioul.fr/), which supports both flavors of Markdown.\nOr Markdowon Parser form Flexmark Java library\n\nIn any case, they are not Extensions within Quarto … so, for now, there is NOT an easy and direct solution to do this conversion.\n\n\n\n\n3.10 Approach #5: using Revealjs Quarto\nTabsets Revealjs Quarto\nCreate a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}).\n::: {.panel-tabset group=\"language\"}\n## R\n\nTab content for R language code and stuff\n\n## Python\n\nTab content for Python language code and stuff\n:::\nEach top-level heading within the div creates a new tab. For example, here is the markdown used to implement the first two tabs displayed above:\n\nRPython\n\n\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\n\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n\n\n\n it seems the render does not work properly, it does not show content .. :-(\n\n\n\n\n\n  Markdown Markup \n\n\n\n  top \n\n\n\n Quarto Markdown: basics"
  },
  {
    "objectID": "markup/markup-lang-html.html",
    "href": "markup/markup-lang-html.html",
    "title": "HTML Markup",
    "section": "",
    "text": "HTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page’s appearance/presentation (CSS) or functionality/behavior (JavaScript).\n\n\n“Hypertext” refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.\nHTML uses “markup” to annotate text, images, and other content for display in a Web browser. HTML markup includes special “elements” such as\n<head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, \n<div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>,\n<embed>, <nav>, <output>, <progress>, <video>, <ul>, <ol>, <li>\nand many others.\nAn HTML element is set off from other text in a document by tags, which consist of the element name surrounded by < and >. The name of an element inside a tag is case insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the <title> tag can be written as <Title>, <TITLE>, or in any other way. However, the convention and recommended practice is to write tags in lowercase.\nReference: HyperText Markup Language"
  },
  {
    "objectID": "markup/markup-lang-html.html#anatomy-of-an-html-document",
    "href": "markup/markup-lang-html.html#anatomy-of-an-html-document",
    "title": "HTML Markup",
    "section": "2 Anatomy of an HTML document",
    "text": "2 Anatomy of an HTML document\nIndividual HTML elements aren’t very useful on their own. Next, let’s examine how individual elements combine to form an entire HTML page:\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>My test page</title>\n  </head>\n  <body>\n    <p>This is my page</p>\n  </body>\n</html>\n\nAnatomy of an HTML document\n\n\n\n\n\n\n  Introduction Markup \n\n\n\n  top \n\n\n\n Markdown Markup"
  },
  {
    "objectID": "markup/markup-lang-intro.html",
    "href": "markup/markup-lang-intro.html",
    "title": "Introduction Markup",
    "section": "",
    "text": "📘 Markup language\nA markup language is a set of symbols or codes that are used to annotate or format text or other data. Markup languages are commonly used to describe the structure and formatting of documents, such as web pages, books, or articles.\n\n\nMarkup languages typically use tags or elements to indicate the structure of the document, such as headings, paragraphs, or lists. They may also include formatting instructions, such as font sizes and colors, or rules for how the document should be displayed. Markup languages are often used in combination with a programming language or other technology to create dynamic and interactive documents.\nExamples of markup languages include:\n\nHTML,\nXML,\nand Markdown\n\nDo no get confuse with a data-oriented language structure used as the input format like:\n\nJSON\nYAML\nApplicarion.properties"
  },
  {
    "objectID": "markup/markup-lang-intro.html#html",
    "href": "markup/markup-lang-intro.html#html",
    "title": "Introduction Markup",
    "section": "2 HTML",
    "text": "2 HTML\nHTML (Hypertext Markup Language) is a markup language used to create structured documents and web pages. HTML uses a set of tags and attributes to describe the content and layout of a document, and defines how the content should be displayed by a web browser.\nHTML tags typically take the form of keywords enclosed in angle brackets, such as\n\n<p> for a paragraph, <h1> for a heading, and <img> for an image\n\nHTML attributes provide additional information about the elements, such as the source of an image or the target of a link.\nHTML also defines a set of standard styles, such as font sizes and colors, which can be used to format the content of a document. HTML is the foundation of the modern web, and is used to create the majority of web pages and web-based applications."
  },
  {
    "objectID": "markup/markup-lang-intro.html#markdown",
    "href": "markup/markup-lang-intro.html#markdown",
    "title": "Introduction Markup",
    "section": "3 Markdown",
    "text": "3 Markdown\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. Markdown is a plain text formatting syntax that uses a simple set of conventions to indicate how the text should be formatted.\nThese conventions include the use of characters such as:\n\nasterisks (*)\nand underscores (_) to indicate bold and italic text, respectively,\nand the use of hash symbols (#) to create headings.\n\nMarkdown is designed to be simple and intuitive, and can be easily converted to other formats, such as HTML, for display on the web. Markdown is widely used in blogging, online forums, and software documentation, and is often used as an alternative to more complex formatting languages, such as HTML."
  },
  {
    "objectID": "markup/markup-lang-intro.html#html-and-markdown",
    "href": "markup/markup-lang-intro.html#html-and-markdown",
    "title": "Introduction Markup",
    "section": "4 HTML and Markdown",
    "text": "4 HTML and Markdown\nMarkdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags.\nThe idea is not to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert.\nThe idea for Markdown is to make it easy to read, write, and edit prose. HTML is a publishing format; Markdown is a writing format. Thus, Markdown’s formatting syntax only addresses issues that can be conveyed in plain text. By John Gruber, Markdown\n\n\n\n\n\n  DevOps Resources \n\n\n\n  top \n\n\n\n HTML Markup"
  },
  {
    "objectID": "markup/markup-lang-md.html",
    "href": "markup/markup-lang-md.html",
    "title": "Markdown Markup",
    "section": "",
    "text": "📘 Markdown\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.\nCreated by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.\n\n\nMarkdown Guide getting started\nUsing Markdown is different than using a WYSIWYG editor. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.\nFor example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold). It may take a while to get used to seeing Markdown syntax in your text, especially if you’re accustomed to WYSIWYG applications. The screenshot below shows a Markdown file displayed in the Visual Studio Code text editor."
  },
  {
    "objectID": "markup/markup-lang-md.html#how-does-it-work",
    "href": "markup/markup-lang-md.html#how-does-it-work",
    "title": "Markdown Markup",
    "section": "2 How Does it Work?",
    "text": "2 How Does it Work?\nDillinger makes writing in Markdown easy because it hides the stuff happening behind the scenes, but it’s worth exploring how the process works in general.\nWhen you write in Markdown, the text is stored in a plaintext file that has an .md or .markdown extension. But then what? How is your Markdown-formatted file converted into HTML or a print-ready document?\nThe short answer is that you need a Markdown application capable of processing the Markdown file. There are lots of applications available — everything from simple scripts to desktop applications that look like Microsoft Word. Despite their visual differences, all of the applications do the same thing. Like Dillinger, they all convert Markdown-formatted text to HTML so it can be displayed in web browsers.\n\n\n\n\n\n\nMarkdown processor\n\n\n\nMarkdown applications use something called a Markdown processor (also commonly referred to as a “parser” or an “implementation”) to take the Markdown-formatted text and output it to HTML format. At that point, your document can be viewed in a web browser or combined with a style sheet and printed. You can see a visual representation of this process below.\n\n\n\n\n\n\n\n\nMarkdown app\n\n\n\nThe Markdown application and processor are two separate components. For the sake of brevity, I’ve combined them into one element (“Markdown app”) in the figure below. The Markdown Process\n\n\n\n\n\nHow Does it Work?\n\n\nTo summarize, this is a four-part process:\n\nCreate a Markdown file using a text editor or a dedicated Markdown application. The file should have an .md or .markdown extension.\nOpen the Markdown file in a Markdown application.\nUse the Markdown application to convert the Markdown file to an HTML document.\nView the HTML file in a web browser or use the Markdown application to convert it to another file format, like PDF.\n\nFrom your perspective, the process will vary somewhat depending on the application you use. For example, Dillinger essentially combines steps 1-3 into a single, seamless interface — all you have to do is type in the left pane and the rendered output magically appears in the right pane. But if you use other tools, like a text editor with a static website generator, you’ll find that the process is much more visible."
  },
  {
    "objectID": "markup/markup-lang-md.html#markdown-flavours",
    "href": "markup/markup-lang-md.html#markdown-flavours",
    "title": "Markdown Markup",
    "section": "3 Markdown Flavours",
    "text": "3 Markdown Flavours\n\nMarkdown: The original Markdown syntax, developed by John Gruber.\nCommonMark: A standardized and highly-specified variant of Markdown, intended to be more predictable and consistent across implementations.\nGitHub Flavored Markdown: An extension of Markdown with additional features and syntax, used by GitHub for rendering Markdown in its platform.\nGitLab Flavored Markdown: An extension of Markdown with additional features and syntax, used by GitLab for rendering Markdown in its platform.\nReadme: A Markdown-based documentation format with support for features such as table of contents and automatic linking, used by many open-source projects.\nObsidian: A Markdown-based note-taking and organizing tool, with support for linking and organizing notes using graphs and diagrams.\n\n\n\n\n\n\n  HTML Markup \n\n\n\n  top \n\n\n\n Markdown and HTML working together, good idea?"
  },
  {
    "objectID": "markup/markup-quarto-api-rest-v2.html",
    "href": "markup/markup-quarto-api-rest-v2.html",
    "title": "Quarto Markdown: OJS Cells",
    "section": "",
    "text": "OJS code cells {ojs} behave a bit differently than cells in traditional notebooks, and have many options available to control their display and layout.\nObservable is a platform for publishing and sharing interactive data-driven documents, an online editor for composing, cells are executed in a sequence, with outputs being generated and displayed as part of the notebook, changes made to cells can be re-executed, updated in real-time."
  },
  {
    "objectID": "markup/markup-quarto-api-rest-v2.html#observable-js-cells",
    "href": "markup/markup-quarto-api-rest-v2.html#observable-js-cells",
    "title": "Quarto Markdown: OJS Cells",
    "section": "1 Observable JS Cells",
    "text": "1 Observable JS Cells\n\n1.1 Cell Execution\nA critical difference between OJS cell execution and traditional notebooks is that in OJS cells do not need to be defined in any particular order.\nBecause execution** is fully reactive**, the runtime will automatically execute cells in the correct order based on how they reference each other. This is different than a traditional notebook with linear cell execution."
  },
  {
    "objectID": "markup/markup-quarto-api-rest-v2.html#examples",
    "href": "markup/markup-quarto-api-rest-v2.html#examples",
    "title": "Quarto Markdown: OJS Cells",
    "section": "2 Examples",
    "text": "2 Examples\n\n2.1 Example 1: viewof\n\nlink\n\n\n\"choose one color\"\n\n\n\n\n\n\n\nviewof color = Inputs.select([\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"], {value: \"green\"})\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2 Example 2: Histiogram\n\nlink\n\n\nheight = 250\nnumbers = Float64Array.from({length: 1000}, d3.randomNormal())\nimport {chart as histogram} with {numbers as data, height} from \"@d3/histogram@261\"\n\nhistogram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.3 Example 3: Cars data\n\nlink\n\n\nimport {viewof selection as cars} from \"@d3/brushable-scatterplot\"\nviewof cars\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4 Example 6: mortgage\n\nmortgage\n\n\nviewof amount = Inputs.range([100000, 1500000], {label: \"Mortgage amount\", step: 100000})\n\nviewof interest = Inputs.range([2, 8], {label: \"Interest rate (%)\", step: .1})\n\nviewof duration = Inputs.range([10, 30], {label: \"Duration\", step: 5})\n\n\"Values:\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\namount\n\n\n\n\n\n\n\ninterest\n\n\n\n\n\n\n\nduration\n\n\n\n\n\n\n\n\nA mortgage for a house purchased for  at an interest rate of % over  years.\nIt costs a total of  dolars.\n\n\n2.5 Example 5: Fetch with loading…\n\nObservable JS\n\n\nd3 = require(\"d3\");\n\n\nviewof fetchButton = Inputs.button(\"fetch\", {async function() {\n\n    loadingMessage.value = \"Loading...\";\n    let contributors = {};\n    contributors.value = await d3.json(\"https://api.github.com/repos/albertprofe/wiki/stats/contributors\");\n    \n\n    let commits = contributors.value.map(contributor => {\n      loadingMessage.value = \"done\";\n      let author = contributor.author;\n      return {\n        name: author.login,\n        title: author.login,\n        group: author.type,\n        value: contributor.total\n      }\n    });\n\n    Inputs.table(commits, { sort: \"value\", reverse: true })\n}});\n\nviewof loadingMessage = Inputs.button(\"...\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Quarto Markdown: api rest call \n\n\n\n  top \n\n\n\n Quarto Markdown: cheat-sheet"
  },
  {
    "objectID": "markup/markup-quarto-api-rest.html",
    "href": "markup/markup-quarto-api-rest.html",
    "title": "Quarto Markdown: api rest call",
    "section": "",
    "text": "REST (Representational State Transfer)\nRest is an architectural style for building web services.\nIt is based on a client-server model, where a client sends a request to a server and the server sends a response.\nRESTful APIs use HTTP requests to POST (create), PUT (update), GET (read), and DELETE (delete) data.\nA RESTful API is a simple, consistent, and easy-to-use way for applications to communicate with each other over the internet."
  },
  {
    "objectID": "markup/markup-quarto-api-rest.html#what-is-api-rest",
    "href": "markup/markup-quarto-api-rest.html#what-is-api-rest",
    "title": "Quarto Markdown: api rest call",
    "section": "1 What is API Rest",
    "text": "1 What is API Rest\n\n\n\n\n\n\n\nIn other words, if you want to interact with a computer or system to retrieve information or perform a function, an API helps you communicate what you want to that system so it can understand and fulfill the request.\n\nImage from: Why is RESTful API so popular?\n\nAn API is a set of definitions and protocols for building and integrating application software.\nIt’s sometimes referred to as a contract between an information provider and an information user.\nThis contract (API Rest style) establishing the content required from the consumer (the call) and the content required by the producer (the response).\n\n\n\n\n\n\nNote\n\n\n\nFor example, the API design for a weather service could specify that the user supply a zip code and that the producer reply with a 2-part answer, the first being the high temperature, and the second being the low.\n\n\n\n1.1 API Rest examples\nThere are many examples of APIs, but here are a few common ones:\n\nGoogle Maps API: allows developers to integrate Google Maps functionality into their own applications, such as displaying maps, getting directions, and searching for places.\nTwitter API: allows developers to access and interact with tweets, as well as post new tweets, through their own applications.\nFacebook API: allows developers to access and interact with user data, such as posts, photos, and friends, as well as post new content, through their own applications.\nStripe API: allows developers to integrate Stripe’s payment functionality into their own applications, such as processing payments and managing subscriptions.\nOpenWeather API: allows developers to access current weather data, as well as forecast, historical data and more for any location on Earth.\nNASA API: allows developers to access and interact with various datasets from NASA, such as images, videos, and information about space missions and celestial bodies.\n\n\n\n1.2 Example: open weather map London\nOne example of a public API with a URL that can be used to access data is the OpenWeather API.\nhttp://api.openweathermap.org/data/2.5/weather?q={city name}&appid={your api key}\n\n\nYou can access current weather data for a specific location by making a GET request to the following URL:\nYou need to replace {city name} with the name of the city you want to get weather data for and {your api key} with your own API key, which you can get by signing up for a free account on the OpenWeather website.\nFor example, if you want to get the current weather data for London, you would make a GET request to the following URL:\nhttp://api.openweathermap.org/data/2.5/weather?q=London&appid={your api key}\nIt will return a JSON object with various information such as temperature, humidity, wind, etc.\n\n\n1.3 Example: Nasa Mars\nNASA has several APIs available for developers to access and interact with various datasets, such as images, videos, and information about space missions and celestial bodies.\n\n\n\n\n\n\nTip\n\n\n\nOne example of a NASA API is the NASA Image and Video Library API, which allows you to access NASA’s media assets, including images, videos, and audio files.\n\n\nhttps://images-api.nasa.gov/search?q={your search term}\n\n\nYou can access the NASA Image and Video Library API by making a GET request to the following URL:\nFor example, if you want to search for images of the planet Mars, you would make a GET request to the following URL:\nNasa API for Mars\nThis will return a JSON object with a list of assets, including links to the images and other information such as title and description.\n\n\n1.4 Free Open APIs\n\nBig List of Free Open APIs\nTo create integrations, retpythoncom/collection/list-of-free-apis){.external}\nThis is a collection of different REST APIs that are completley public and do not require any authentication, making it easier for consumers to play with and understand what APIs are all about by seeing the many different ways in which APIs can be used: Public REST APIs\nGet a list of universities in a specified country: Universities List\nFree API – Huge List of Public APIs For Testing [No Key]: Free APIs You Can Use for Testing"
  },
  {
    "objectID": "markup/markup-quarto-api-rest.html#quarto-web-api",
    "href": "markup/markup-quarto-api-rest.html#quarto-web-api",
    "title": "Quarto Markdown: api rest call",
    "section": "2 Quarto web API",
    "text": "2 Quarto web API\nWeb APIs Quarto with d3.json and Observable JavaScript\n\nYou can use the d3.json function to read JSON data from web services and data sources.\nWe are using the Observable JavaScript / Explore, analyze, and explain data. As a team to run script cells\n\n\n\nQuarto: Observable JS\nHere we query the GitHub API for data on contributions to the albertprofe wiki:\n\nd3 = require('d3')\n\ncontributors = await d3.json(\n  \"https://api.github.com/repos/albertprofe/wiki/stats/contributors\"\n)\n\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n\n\nInputs.table(commits, { sort: \"value\", reverse: true })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJavaScript on Observable is almost — but not entirely — vanilla. This is intentional: by building on the native language of the web, Observable is familiar. And you can use the libraries you know and love, such as D3, Lodash, and Apache Arrow.\n\n\nSee the GitHub API example for the full source code.\n\n\n2.1 Screenshoots\n\n2.1.1 Success\n\n\n\nQuarto Api Rest call to github Rest API\n\n\n\n\n2.1.2 Error\n\n\n\nQuarto Api Rest call to github Rest API ERROR\n\n\n\n\n\n\n\n  Quarto Markdown: code & data \n\n\n\n  top \n\n\n\n Quarto Markdown: OJS Cells"
  },
  {
    "objectID": "markup/markup-quarto-basics.html",
    "href": "markup/markup-quarto-basics.html",
    "title": "Quarto Markdown: basics",
    "section": "",
    "text": "Quarto is a publishing system/engine based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of Pandoc’s Markdown for more in-depth documentation."
  },
  {
    "objectID": "markup/markup-quarto-basics.html#syntax",
    "href": "markup/markup-quarto-basics.html#syntax",
    "title": "Quarto Markdown: basics",
    "section": "2 Syntax",
    "text": "2 Syntax\n\n\n\n\n\n\nMarkdown Basics\n\n\n\n\n\n\n\nMarkdown Basics\n\n\nText Formatting Headings Links & Images Lists Tables Source Code Equations Diagrams Videos Page Breaks Divs and Spans Callout Blocks Other Blocks\n\n\n\n\n\n\n\n\n\n\n\nFigures\n\n\n\n\n\n\n\nFigures\n\n\nFigure Basics Linked Figures Figure Alignment Alt Text Multiformat Figures Subfigures Figure Panels Figure Divs LaTeX Figures Caption Locations Custom Layouts Computations Block Layout\n\n\n\n\n\n\n\n\n\n\n\nTables\n\n\n\n\n\n\n\nTables\n\n\nMarkdown Tables Column Widths Cross References Caption Location Computations Grid Tables\n\n\n\n\n\n\n\n\n\n\n\nDiagrams\n\n\n\n\n\n\n\nDiagrams\n\n\nMermaid Graphviz Authoring Figures File Include Sizing Mermaid Formats Code Echo Chrome Install\n\n\n\n\n\n\n\n\n\n\n\nVideos\n\n\n\n\n\n\n\nVideos\n\n\nVideo URL Options Revealjs\n\n\n\n\n\n\n\n\n\n\n\nCallout Types\n\n\n\n\n\n\n\nCallout Types\n\n\nMarkdown Syntax Customizing Appearance Format Support\n\n\n\n\n\n\n\n\n\n\n\nCross References\n\n\n\n\n\n\n\nCross References\n\n\nFigures Tables Equations Sections Code Listings Theorems and Proofs References Chapter Numbering Lists Options\n\n\n\n\n\n\n\n\n\n\n\nTitle Blocks\n\n\n\n\n\n\n\nTitle Blocks\n\n\nTitle Banners Date Metadata Labels\n\n\n\n\n\n\n\n\n\n\n\nArticle Layout\n\n\n\n\n\n\n\nArticle Layout\n\n\nMarkdown Syntax Customizing Appearance Format Support\n\n\n\n\n\n\n\n\n\n\n\nPresentations\n\n\n\n\n\n\n\nPresentations\n\n\nCreating Slides Incremental Lists Multiple Columns Learning More\n\n\n\n\n\n\n\n\n\n\n  Markdown and HTML working together, good idea? \n\n\n\n  top \n\n\n\n Quarto Markdown: creating"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html",
    "href": "markup/markup-quarto-cheatsheet.html",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "",
    "text": "📘 Cheat-sheet\n\nSummary\nLinks and figures\nTabset\nCallouts\nTablas\nTwo columns\nWrap code\nCode blocks\nMermaid\nInclude\nPresentations\nAccordion\nIcons\nOthers\nMarkup and Quarto Resources"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#summary",
    "href": "markup/markup-quarto-cheatsheet.html#summary",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "1 Summary",
    "text": "1 Summary\n::: {.summary}\n📘 **Design-patterns**\n:::\n\n/* summary card */\n.summary{\n    padding: 16px 16px 16px 16px;\n    background: #a2f868;\n    border: #ffffff6b;\n    color: #117441;\n    border-radius: 10px 10px 10px 10px;\n}"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#links-and-images",
    "href": "markup/markup-quarto-cheatsheet.html#links-and-images",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "2 Links and images",
    "text": "2 Links and images\n![Singleton Pattern](../images/javase/singleton-pattern-edited.png){width=60%}\n{fig-width=10}\n{fig-width=50%}\n{height=2in}\n{height=100px}\nhttps://quarto.org/docs/reference/formats/pdf.html#figures\nhttps://pandoc.org/MANUAL.html#extension-link_attributes\n{.external}\n{#tagthis .preview-image}\n\nbasics\nfigures\nvideos"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#tabset",
    "href": "markup/markup-quarto-cheatsheet.html#tabset",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "3 Tabset",
    "text": "3 Tabset\n::: {.panel-tabset}\n### Tab A\nContent for `Tab A`\n\n### Tab B\nContent for `Tab B`\n:::\n\nreveal.js tabset"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#code-blocks",
    "href": "markup/markup-quarto-cheatsheet.html#code-blocks",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "4 Code blocks",
    "text": "4 Code blocks\n```{.python filename=\"matplotlib.py\"}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n#| echo: true\n#| code-overflow: wrap\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()```\nHTML Code Blocks"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#code-wrap-and-filename",
    "href": "markup/markup-quarto-cheatsheet.html#code-wrap-and-filename",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "5 Code wrap and filename",
    "text": "5 Code wrap and filename\n```{.js .code-overflow-wrap filename=\"profile.jsx\"}\nexport default function Profile() {\n  return (\n    <Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    />\n  );\n}```\n\n\nprofile.jsx\n\nexport default function Profile() {\n  return (\n    <Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    />\n  );\n}\n\n::: {.column-margin}\n![Using React component wiht markup image and some text](/images/reactjs/ex5.png){widht=80%}\n:::"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#callouts",
    "href": "markup/markup-quarto-cheatsheet.html#callouts",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "6 Callouts",
    "text": "6 Callouts\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip}\n## Tip With Caption\n\nThis is an example of a callout with a caption.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user.\nYou can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make \na collapsible callout that is expanded by default.\n:::\ncallouts"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#minimal-callout",
    "href": "markup/markup-quarto-cheatsheet.html#minimal-callout",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "7 Minimal callout",
    "text": "7 Minimal callout\n::: {.callout-note appearance=\"simple\" icon=false}\n\n## Pay Attention\n\nUsing callouts is an effective way to highlight content that your reader\n give special consideration or attention.\n\n:::\nCallouts have 3 different looks you can use.\n\nCallouts looks\n\n\n\n\n\n\ntag\nDescription\n\n\n\n\ndefault\nwith colored header and an icon.\n\n\nsimple\nthat doesn’t include a colored header background.\n\n\nminimal\nborders to the callout, but doesn’t include a header background color or icon"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#tables",
    "href": "markup/markup-quarto-cheatsheet.html#tables",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "8 Tables",
    "text": "8 Tables\n\ntables\ntablesgenerator\n\n#| tables\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table syntax\n: Callouts looks {tbl-colwidths=\"[20,85]\"}\n\n8.1 Two columns\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Highly customizable\n- Less work than using `<div>` tags\n:::\n\n::: {.column width=\"50%\"}\n- Customizable in terms of layouts\n\n:::\n::::"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#column-margin",
    "href": "markup/markup-quarto-cheatsheet.html#column-margin",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "9 Column Margin",
    "text": "9 Column Margin\n::: {.column-margin}\n[ top](#top)\n:::"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#iframe",
    "href": "markup/markup-quarto-cheatsheet.html#iframe",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "10 iframe",
    "text": "10 iframe\n{=html}\n<iframe \n  width=\"780\"\n  height=\"500\" \n  src=\"https://devhints.io/bash\"\n  title=\"Bash scripting cheatsheet\">\n</iframe>"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#mermaid",
    "href": "markup/markup-quarto-cheatsheet.html#mermaid",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "11 Mermaid",
    "text": "11 Mermaid\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n\n\n{mermaid}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]```"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#presentations",
    "href": "markup/markup-quarto-cheatsheet.html#presentations",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "12 Presentations",
    "text": "12 Presentations\n#| link to presentation, link to .qmd\n[Log in to GitHub and Quarto Creation: Sync GUI](/images/markup/quarto-github/markup-quarto-github.qmd)\n#| presentation\ntitle: \"Create Project\"\nauthor: \"Maven IntellJ Idea\"\nformat: revealjs\n\n## {background-color=\"grey\"}\n![](createprojectMavenIntellJI_0.png)\n\nRevealjs Quarto Presentations"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#include",
    "href": "markup/markup-quarto-cheatsheet.html#include",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "13 Include",
    "text": "13 Include\n{{< include _content.qmd >}}\n\ninlcude"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#accordion",
    "href": "markup/markup-quarto-cheatsheet.html#accordion",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "14 Accordion",
    "text": "14 Accordion\n\n<details>\n<summary>Code</summary>\n```{.js .code-overflow-wrap filename=\"profile.jsx\"}\n    ```\n</details>\n\n<details>\n<summary>Code</summary>\n\n``` {.java}\npublic class Account {\n  private Person person;\n  //other fields\n\n  public Account(Person person) {\n    this.person = person;\n  }\n\n  public Person getPerson() {\n    return this.person;\n  }\n\n  public void setPerson(Person person) {\n    this.person = person;\n    \n    //constructor, getters, setters and methods\n  }\n}```\n\n</details>\nExample:\n\n\nJava Person Class\n\n\n\nperson\n\npublic class Account {\n        private Person person;\n        //other fields\n\n        public Account(Person person) {\n          this.person = person;\n        }\n\n        public Person getPerson() {\n          return this.person;\n        }\n\n        public void setPerson(Person person) {\n          this.person = person;\n          \n          //constructor, getters, setters and methods\n        }\n}"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#top-next-and-back",
    "href": "markup/markup-quarto-cheatsheet.html#top-next-and-back",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "15 Top, next and back",
    "text": "15 Top, next and back\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n[ back](#top)\n:::\n\n::: {.column width=\"40%\"}\n[ top](#top)\n:::\n\n::: {.column width=\"15%\"}\n[next ](#top)\n:::\n\n::::"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#icons",
    "href": "markup/markup-quarto-cheatsheet.html#icons",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "16 Icons",
    "text": "16 Icons\n\n\n\nIcons\n\n\n\nglasses: \narrow-up: \narrow-right: \nsolid book: \njava: \nFont Awesome Search"
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#others",
    "href": "markup/markup-quarto-cheatsheet.html#others",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "17 Others",
    "text": "17 Others\n\nlayout\n\n\n\n\n\n\n  Quarto Markdown: OJS Cells \n\n\n\n  top \n\n\n\n Cascade Style Sheet"
  },
  {
    "objectID": "markup/markup-quarto-code.html",
    "href": "markup/markup-quarto-code.html",
    "title": "Quarto Markdown: code & data",
    "section": "",
    "text": "Observable helps you use data to think.\nObservable helps you explore and visualize data. It’s a platform to discover, to be inspired, and to accelerate your learning.\nYou can share your insights with the world. Above all, it’s a community of people helping each other learn and create together."
  },
  {
    "objectID": "markup/markup-quarto-code.html#observable-js",
    "href": "markup/markup-quarto-code.html#observable-js",
    "title": "Quarto Markdown: code & data",
    "section": "1 Observable JS",
    "text": "1 Observable JS\nLink: A Taste of Observable\nQuarto includes native support for Observable JS, a set of enhancements to vanilla JavaScript created by Mike Bostock (also the author of D3).\nObservable JS is distinguished by its reactive runtime, which is especially well suited for interactive data exploration and analysis.\n\n\nOJS code cells {ojs} behave a bit differently than cells in traditional notebooks, and have many options available to control their display and layout.\nOJS code cells areCode blocks that use braces around the language name (e.g. ```{ojs}) are executable, and will be run by Quarto during render.\n\ni = {\n  let i = 0;\n  while (true) {\n    yield ++i;\n  }\n}\n\n\n\n\n\n\nThis is an exemple of running a script cell in Observable JS:\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAdd to this to the .qmd document to hide the code!\nexecute:\n  echo: false"
  },
  {
    "objectID": "markup/markup-quarto-code.html#data-source",
    "href": "markup/markup-quarto-code.html#data-source",
    "title": "Quarto Markdown: code & data",
    "section": "2 Data-source",
    "text": "2 Data-source\nThere are a wide variety of way to make data available to OJS:\n\nRead CSV, JSON, SQLite, and more using the FileAttachments API.\nUse the ojs_define() function to make data processed in Python or R available to {ojs} cells.\nMake calls to Web APIs for online services and data stores."
  },
  {
    "objectID": "markup/markup-quarto-code.html#examples-files-python-and-rest",
    "href": "markup/markup-quarto-code.html#examples-files-python-and-rest",
    "title": "Quarto Markdown: code & data",
    "section": "3 Examples: files, python and Rest",
    "text": "3 Examples: files, python and Rest\nCode blocks that use braces around the language name (e.g. ```{python}) are executable, and will be run by Quarto during render.\nHere is a simple example:\n\n\nexample-python-code\n\n---\ntitle: \"matplotlib demo\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n\n\nexample-python-code\n\n\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\nYou’ll note that there are some special comments at the top of the code block. These are cell level options that make the figure cross-referenceable.\n\nThis document would result in the following rendered output:\n\n\n\npython quarto following rendered output\n\n\nWe’ll explore all of these techniques below.\n\n\n\n\n\n\nFile Attachments\n\n\n\n\n\n\n\nFile Attachments Use the FileAttachment function from the standard library to read data from a file. For example, here we read and plot a CSV of NOAA’s Monthly CO2 concentration data from Mauna Loa:\n\n\ndata = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true } );\n  return co2data.map(d => {\n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average);\n    return d;\n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data,\n      { x: \"decimal date\", y: \"average\"},\n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\nPython and R\n\n\n\n\n\n\n\nPython and R The data you want to use with OJS might not always be available in raw form. Often you’ll need to read and preprocess the raw data using Python or R. You can perform this preprocessing during document render (in an {r} or {python} code cell) and then make it available to {ojs} cells via the ojs_define() function. Here’s an example. We’ll read the same data into R, do some grouping and summarization, then make it available to OJS using ojs_define:\n\n\n#| output: false\n\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %>%\n  group_by(year) %>%\n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n\n\n\n\n\n\n\n\n\n\n\nWeb APIs\n\n\n\n\n\n\n\nWeb APIs You can use the d3.json() function to read JSON data from web services and data sources. Here we query the GitHub API for data on contributions to the Python pandas package:\n\n\nd3 = require('d3')\n\ncontributors = await d3.json(\n  \"https://api.github.com/repos/pandas-dev/pandas/stats/contributors\"\n)\n\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n\n\n\n\n\n\n\n\n\n\n  Quarto Markdown: publishing \n\n\n\n  top \n\n\n\n Quarto Markdown: api rest call"
  },
  {
    "objectID": "markup/markup-quarto-create.html",
    "href": "markup/markup-quarto-create.html",
    "title": "Quarto Markdown: creating",
    "section": "",
    "text": "Follow the Quick Start with Visual Code Extension Quarto to get a simple website up and running. After covering the basics, read on to learn about website navigation and other more advanced website features.\n\n\n\n\n\n\n(1) Install Quarto Extension for Visual Code\n\n\n\n\n\nVS Code extension for the Quarto scientific and technical publishing system. This extension provides language support for Quarto .qmd files. Extension Resources: - Marketplace - Repository - License - Quarto\n\n\nQuarto extension for Visual Code\n\n\n\n\n\n\n\n\n\n\n(2) Quarto: Create Project\n\n\n\n\n\nTo create a new website project within VS Code, execute the Quarto: Create Project command from the command-palette (CTRL + SHRIFT + P)\n\n\nQuarto Visual Code palette create Project\n\n\n\n\n\n\n\n\n\n\n(3) Quarto: Select Website and Directory Name\n\n\n\n\n\nThen, select Website Project.\nYou’ll be prompted to select a parent directory to create the project within. Then, you’ll be asked to name the directory for your website project.\n\n\nQuarto Visual Code palette create Project and then select website\n\n\n\nQuarto Visual Code palette create Project and then select website and directory Name\n\n\n\n\n\n\n\n\n\n\n(4) Quarto: Project Created\n\n\n\n\n\nThe new website project will be created and opened within VS Code. Click the Render button to preview the website and code the _quarto.yml.\n\n\nQuarto Visual Code Project Created\n\n\n\n\n\n\n\n\n\n  Quarto Markdown: basics \n\n\n\n  top \n\n\n\n Quarto Markdown: publishing"
  },
  {
    "objectID": "markup/markup-quarto-publish.html",
    "href": "markup/markup-quarto-publish.html",
    "title": "Quarto Markdown: publishing",
    "section": "",
    "text": "GitHub Pages is a website hosting service that enables you to publish content based on source code managed within a GitHub repository.\nUse the quarto publish command to publish content rendered on your local machine.\nquarto publish will make several operations with GitHub Pages:\n\nprovision,\ncreate pipeline,\ncreate branch with HTML source\nparse .qmd to .html\nrender (or build)\ndeploy,\nhosting,\npublish\n\n\n\ngh-pages build and deployment #17: example of Actions triggered by Quarto publish\n\nThe most important for us will be to make a branch gh-pages the first time where the output HTML will be deployed with quarto publish gh-pages.\n\n\n\n\n\n\n(0) Files On Repository\n\n\n\n\n\nYour need to create a repository on GitHub with the Quarto pages .qmd pushed there.\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n\n$git config --global user.name \"Mona Lisa\"\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.password \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\n\n\n\n\n\n\n\n\n(1) Activate GitHub Pages service\n\n\n\n\n\nYou can modify these options in Settings : Pages for your repository.\n\n\n\n\n\n\ngh-pages activation\n\n\n\n\n\n\n\n\nfig 13\n\n\n\n\n\n\n\n\n\n\n\nat first gh-pages branck doesn’t exist: don’t worry, quarto will create later\n\n\n\n\n\n\n\n\nfig 14\n\n\n\n\n\n\n\n\n\n\n\nmaster is our branch: root\n\n\n\n\n\n\n\n\nfig 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(2) Define Ignoring Output\n\n\n\n\n\nIt’s important to note that you don’t need to check your _site or _book directory into version control (if you have done this in the past you know it makes for very messy diffs!). Before proceeding you should add the output directory of your project to .gitignore. For example:\n## .gitignore\n\n/.quarto/\n/_site/\nIf you’ve already checked these files into source control you may need to remove them explicitly:\n## Terminal\n\ngit rm -r _site\n\n\n\n\n\n\n\n\n\n(3) Publish on branch gh-pages\n\n\n\n\n\nOnce you have configured the source branch and updated your .gitignore, navigate to the directory where your project / git repository is located, make sure you are not on the gh-pages branch, and execute the quarto publish command for GitHub Pages:\n## Terminal\n\nquarto publish gh-pages\nThe publish command will confirm that you want to publish, render your content, copy the output to a special gh-pages branch, push that branch to GitHub, and then open a browser to view your site once it is deployed.\nAfter this first time it will be no necessary to call gh-pages brach, once it has been defined as default:\n##Terminal\n\nquarto publish \n\n\n\n\n\n\n\n\n\n(4) Website published\n\n\n\n\n\nYour Quarto website will be published by GitHub pages on:\n\nuserName.github.io\\repositoryName\n\n\n\n\n\n\n\n\n\n  Quarto Markdown: creating \n\n\n\n  top \n\n\n\n Quarto Markdown: code & data"
  },
  {
    "objectID": "markup/mulab1.html",
    "href": "markup/mulab1.html",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "",
    "text": "Create and publish a website on GitHub pages (Git on cloud and deploy pipeline) with Visual (IDE) Code and Quarto (publishing system/engine)\n\n\n\n\n\n\n\n Before\n\n\nStudents will need to have a basic understanding of web development, including HTML, CSS, and JavaScript. \n\n\n  Goal\n\n\nIn this project, students will be required to create a web application using basically Markdown, flavour Quarto, and when it is necessary HTML, JS and CSS. Additionally, they will need to use GitHub and Visual Code** to manage their project’s code and collaborate with their peers. \n\n\n  Tasks\n\n\nThe tasks involved in this project include: \n\n\nIn the first part of the project, students will create a basic web page using markdown and publish it on Github repository using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\n\n\nIn the second part of the project, students will learn how to publish their website on gh-pages, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n\n\nYou should check your website on user/github.io/repo.\n\n\n\n  Optional\n\n\nAs an optional study, students may also want to learn about using callouts in their markdown documentation. The following links provide useful information on the topic: \n\n\nmarkdown-callouts\n\n\nCallout Blocks Quarto\n\n\nGetting Started with RDMD\n\n\nDivs and spans\n\n\ncodepen.io HTML+CSS\n\n\nHow TO - Tabs W3.CSS HTML+CSS+JS\n\n\n\nUsing callouts, links, tabs and CSS can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.   To take their project to the next level, students may also choose to connect to an API (Application Programming Interface) to retrieve data and render charts using JavaScript. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n\n\nQuarto data sources\n\n\n  After\n\n\nThe Quarto website project is a great opportunity for students to develop their skills in web development, markdown, and version control using GitHub and Visual Code."
  },
  {
    "objectID": "markup/mulab1.html#step-by-step",
    "href": "markup/mulab1.html#step-by-step",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "2 Step-by-step",
    "text": "2 Step-by-step\n\n\nStep-by-step guide to create and publish a Quarto website\n\n\nInstall some software and Sign in:\n\nInstall Visual Code\n\nInstall GitHub Extension and Source Control if they don’t come with new installation\nInstall Quarto Extension in Visual Code\n\nSign in GitHub from Visual Code (wizard)\nInstall Quarto in your OS (download from Quarto site - Get started)\n\nCreate Quarto Project\nGitHub tasks:\n\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n$git config --global user.name \"Mona Lisa\"\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.paasword \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\nActivate gh-pages service\n\nquarto render and quarto publish gh-pages / quarto publish on Visual Code’s terminal\n\nPublish Quarto Project\nImprove your Quarto Project\n\nGo to published web:user/github.io/repo"
  },
  {
    "objectID": "markup/mulab1.html#screen-shoots-2022-12-12-installing-quarto-and-cloning-project-from-github.com",
    "href": "markup/mulab1.html#screen-shoots-2022-12-12-installing-quarto-and-cloning-project-from-github.com",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "3 Screen-shoots (2022-12-12): installing Quarto and cloning project from GitHub.com",
    "text": "3 Screen-shoots (2022-12-12): installing Quarto and cloning project from GitHub.com\nStep-by-step Quarto Creation project (install Quarto) in Visual Code (and Quarto Extension) and publishing to gh-pages (log in to GitHub, Sync tool)\nLog in to GitHub and Quarto Creation: Sync GUI"
  },
  {
    "objectID": "markup/mulab1.html#screen-shoots-2022-12-08-pushing-quarto-project-to-github-and-publishing-on-gh-pages",
    "href": "markup/mulab1.html#screen-shoots-2022-12-08-pushing-quarto-project-to-github-and-publishing-on-gh-pages",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "4 Screen-shoots (2022-12-08): pushing Quarto project to GitHub and publishing on gh-pages",
    "text": "4 Screen-shoots (2022-12-08): pushing Quarto project to GitHub and publishing on gh-pages\n\n\n\n\n\n\nBasic Quarto Project\n\n\n\n\n\n\n\n\nfig 1\n\n\n\n\n\n\n\n\n\n\n\nInitialize Repository and Publish\n\n\n\n\n\n\n\n\nfig 2\n\n\n\n\n\n\n\n\n\n\n\nYou may use another Extensions\n\n\n\n\n\n\n\n\nfig 3\n\n\n\n\n\n\n\n\n\n\n\nlet s do a commit but .. first\n\n\n\n\n\n\n\n\nfig 4\n\n\n\n\n\n\n\n\n\n\n\nwe need to publish branch\n\n\n\n\n\n\n\n\nfig 5\n\n\n\n\n\n\n\n\n\n\n\nPermission 1/2\n\n\n\n\n\n\n\n\nfig 6\n\n\n\n\n\n\n\n\n\n\n\nPermission 2/2\n\n\n\n\n\n\n\n\nfig 7\n\n\n\n\n\n\n\n\n\n\n\npublish in public repository: name\n\n\n\n\n\n\n\n\nfig 8\n\n\n\n\n\n\n\n\n\n\n\nrepository name: wiki is better! :-)\n\n\n\n\n\n\n\n\nfig 9\n\n\n\n\n\n\n\n\n\n\n\nrepository name: publishing\n\n\n\n\n\n\n\n\nfig 10\n\n\n\n\n\n\n\n\n\n\n\nthis tree folder is publised\n\n\n\n\n\n\n\n\nfig 11\n\n\n\n\n\n\n\n\n\n\n\ntree folder in github\n\n\n\n\n\n\n\n\nfig 12\n\n\n\n\n\n\n\n\n\n\n\ngh-pages activation\n\n\n\n\n\n\n\n\nfig 13\n\n\n\n\n\n\n\n\n\n\n\nat first gh-pages branck doesn’t exist: don’t worry, quarto will create later\n\n\n\n\n\n\n\n\nfig 14\n\n\n\n\n\n\n\n\n\n\n\nmaster is our branch: root\n\n\n\n\n\n\n\n\nfig 15\n\n\n\n\n\n\n\n\n\n\n\nthere is just one brach: master (brach gh-pages NOT YET)\n\n\n\n\n\n\n\n\nfig 16\n\n\n\n\n\n\n\n\n\n\n\nrender\n\n\n\n\n\n\n\n\nfig 17\n\n\n\n\n\n\n\n\n\n\n\nquarto publish\n\n\n\n\n\n\n\n\nfig 18\n\n\n\n\n\n\n\n\n\n\n\nyes\n\n\n\n\n\n\n\n\nfig 19\n\n\n\n\n\n\n\n\n\n\n\nnow: brach created\n\n\n\n\n\n\n\n\nfig 20\n\n\n\n\n\n\n\n\n\n\n\nand … gh pages now has got the gh-pages branch selected\n\n\n\n\n\n\n\n\nfig 21\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: commit\n\n\n\n\n\n\n\n\nfig 22\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: deploy\n\n\n\n\n\n\n\n\nfig 23\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: actions\n\n\n\n\n\n\n\n\nfig 24\n\n\n\n\n\n\n\n\n\n\n\nweb deployed: live\n\n\n\n\n\n\n\n\nfig 25\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 1/4\n\n\n\n\n\n\n\n\nfig 26\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 2/4\n\n\n\n\n\n\n\n\nfig 27\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 3/4\n\n\n\n\n\n\n\n\nfig 28\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 4/4\n\n\n\n\n\n\n\n\nfig 29\n\n\n\n\n\n\n\n\n\n\n  CSS: W3.css \n\n\n\n  top \n\n\n\n MarkUp Languages Resources"
  },
  {
    "objectID": "markup/resources.html",
    "href": "markup/resources.html",
    "title": "MarkUp Languages Resources",
    "section": "",
    "text": "MarkUp Resources"
  },
  {
    "objectID": "markup/resources.html#quarto",
    "href": "markup/resources.html#quarto",
    "title": "MarkUp Languages Resources",
    "section": "1.1 Quarto",
    "text": "1.1 Quarto\n\n1.1.1 Quarto general\n\nQuarto vs R\nBig Book of R\nQuarto Gallery\nA Quarto tip of the day\n6 Productivity Hacks for Quarto\n\n\n\n1.1.2 Quarto extensions and features\n\nQuarto extensions and features\n\n\n\n\n\n\nLink\nDescription\n\n\n\n\nShinylive Quarto extension\nThis extension lets you embed Shinylive applications in a Quarto document. These are Shiny for Python applications which run completely in the browser, using Pyodide (Python compiled to WebAssembly).\n\n\nFont Awesome\nIncluding Font Awesome icons in Quarto documents is now easy peasy lemon squeezy  with the Font Awesome extension. Just surround the Font Awesome icon name in {{< and >}}.\n\n\nFont Awesome Search\nThe easiest way to get icons on your website is with a Kit. It’s your very own custom version of Font Awesome, all bundled up with only the icons, tools, and settings you need.\n\n\nGithub Actions for Quarto\nThis repository stores Github Actions useful for building and publishing Quarto documents.\n\n\nHTML blocks and embed iframe\nWant to embed an iframe on a webpage or a slide deck? Plop the sharing code in a raw html block!\n\n\nListing contents\nListings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data.\n\n\nLightbox\nAn extension that uses the GLightbox javascript library to add lightbox styling and behavior to images in your HTML documents.\n\n\n\n\n\n1.1.3 Quarto formatting\n\nQuarto Glob Syntax\nQuarto Dates and Date Formatting\n\n\n\n1.1.4 Cheat-sheet\nQuarto cheat sheet"
  },
  {
    "objectID": "markup/resources.html#css",
    "href": "markup/resources.html#css",
    "title": "MarkUp Languages Resources",
    "section": "1.2 CSS",
    "text": "1.2 CSS\nWhatever you do on CSS, you have to understand the roots and focus on the basic knowledge: CSS Deep\n\nSemantic UI\nMaterial UI\nW3 schools CSS\nTailwind CSS"
  },
  {
    "objectID": "markup/resources.html#engines-and-visualizing",
    "href": "markup/resources.html#engines-and-visualizing",
    "title": "MarkUp Languages Resources",
    "section": "1.3 Engines and visualizing",
    "text": "1.3 Engines and visualizing\n\nHighcharts\nD3.JS GALLERY\nThymeleaf\nObservable\n\n\n\n\n\n\n  Lab#MD01-1: Create and publish by Quarto \n\n\n\n  top \n\n\n\n Java Standard Edition: Basics"
  },
  {
    "objectID": "reactjs/reactjs-app-async.html",
    "href": "reactjs/reactjs-app-async.html",
    "title": "React JS App: async",
    "section": "",
    "text": "📘 async\nAsync/await is a syntax in JavaScript that makes it easier to work with asynchronous code and allows you to write it easier, read and understand, by making it look more like synchronous code.\nAsynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished.\nOnce that task has finished, your program is presented with the result.\n\n\nMany functions provided by browsers, especially the most interesting ones, can potentially take a long time, and therefore, are asynchronous. For example:\n\nMaking HTTP requests using fetch()\nAccessing a user’s camera or microphone using getUserMedia()\nAsking a user to select files using showOpenFilePicker()\n\n\n\n\n\n\nAsync/await"
  },
  {
    "objectID": "reactjs/reactjs-app-async.html#synchronous-programming",
    "href": "reactjs/reactjs-app-async.html#synchronous-programming",
    "title": "React JS App: async",
    "section": "2 Synchronous programming",
    "text": "2 Synchronous programming\nSynchronous code is code that is executed in a “synchronous” manner, meaning that it is executed in the order that it appears in the source code. When a line of synchronous code is executed, the program will wait for it to complete before moving on to the next line of code.\n\n\nApp.sh\n\nconsole.log('Start');\n\nconst result = doSomething();\nconsole.log(result);\n\nconsole.log('End');\n\n\n\nIn this example, the code will execute the console.log('Start') line first, then wait for the doSomething() function to complete and return a result, and then log the result to the console. Finally, it will execute the console.log('End') line.\nSynchronous code is easy to understand and debug, because the order of execution is clear and predictable. However, it can be less efficient than asynchronous code, because it can block the program from moving on to other tasks until the current task is complete.\n\nSynchronous code may be is easy but blocking.\n\nThis is the basic problem with long-running synchronous functions. What we need is a way for our program to:\n\nStart a long-running operation by calling a function.\nHave that function start the operation and return immediately, so that our program can still be responsive to other events.\nNotify us with the result of the operation when it eventually completes.\n\nThat’s precisely what asynchronous functions can do.\n\n\nBest with async/await but promises must be studied"
  },
  {
    "objectID": "reactjs/reactjs-app-async.html#async-function",
    "href": "reactjs/reactjs-app-async.html#async-function",
    "title": "React JS App: async",
    "section": "3 async function",
    "text": "3 async function\nThe async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\n\nThe async function declaration declares an async function where the await keyword is used within the function body.\n\n\n\nApp.js\n\nasync function greet() {\n  return 'Hello, world!';\n}\n\nasync function main() {\n  const message = await greet();\n  console.log(message);\n}\n\nmain();\n\n\n\nIn this example, the greet function is an async function that returns a promise that resolves to the string “Hello, world!”. The main function is also an async function that calls the greet function and waits for the promise to resolve using the await keyword. When the promise resolves, the value is assigned to the message variable and logged to the console.\nAsync functions can contain zero or more await expressions. Await expressions make promise-returning functions behave as though they’re synchronous by suspending execution until the returned promise is fulfilled or rejected.\nThe resolved value of the promise is treated as the return value of the await expression. Use of async and await enables the use of ordinary try / catch blocks around asynchronous code.\n\n\nApp.js\n\nfunction resolveAfter2Seconds() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('resolved');\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log('calling');\n  const result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\n\nasyncCall();"
  },
  {
    "objectID": "reactjs/reactjs-app-async.html#example-1marketplace",
    "href": "reactjs/reactjs-app-async.html#example-1marketplace",
    "title": "React JS App: async",
    "section": "4 Example 1:marketplace",
    "text": "4 Example 1:marketplace\nYou’re working on an art marketplace app that lets the user submit multiple orders for an art item at the same time.\nEach time the user presses the “Buy” button, the “Pending” counter should increase by one. After three seconds, the “Pending” counter should decrease, and the “Completed” counter should increase.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending(p => p + 1);\n    await delay(3000);\n    setPending(p => p - 1);\n    setCompleted(c => c + 1);\n  }\n\n  return (\n    <>\n      <h3>\n        Pending: {pending}\n      </h3>\n      <h3>\n        Completed: {completed}\n      </h3>\n      <button onClick={handleClick}>\n        Buy     \n      </button>\n    </>\n  );\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render and async working with timeout\n\n\n\n\n\n\n3 Next render, timeout finished\n\n\n\n\n\n\n\n\n\n  React JS: custom hooks \n\n\n\n  top \n\n\n\n React JS App: events"
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html",
    "href": "reactjs/reactjs-app-conditional-render.html",
    "title": "React JS App: conditional render",
    "section": "",
    "text": "📘 conditional render\nReact conditional rendering refers to the technique of rendering different components or elements in a React application based on certain conditions. This allows you to control the rendering of components based on the values of variables or the state of your application."
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#basic-conditional-render",
    "href": "reactjs/reactjs-app-conditional-render.html#basic-conditional-render",
    "title": "React JS App: conditional render",
    "section": "2 Basic conditional render",
    "text": "2 Basic conditional render\n\n\nYour components will often need to display different things depending on different conditions.\nHere’s an example of how you might use conditional rendering in a React component:\n\n\nApp.js\n\nfunction MyComponent(props) {\n  if (props.isLoading) {\n    return <div>Loading...</div>;\n  } else {\n    return <div>Hello, world!</div>;\n  }\n}\n\n\n\nIn this example, the MyComponent component uses an if statement to determine whether to render a “Loading…” message or a “Hello, world!” message, based on the value of the isLoading prop."
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#ternary-operator",
    "href": "reactjs/reactjs-app-conditional-render.html#ternary-operator",
    "title": "React JS App: conditional render",
    "section": "3 Ternary operator",
    "text": "3 Ternary operator\nYou can also use the ternary operator ?: to conditionally render elements in a more concise way:\n\n\nApp.js\n\nfunction MyComponent(props) {\n  return props.isLoading ? <div>Loading...</div> : <div>Hello, world!</div>;\n}\n\n\n\nIn this example, the ternary operator checks the value of the isLoading prop and returns a “Loading…” message if it is true, or a “Hello, world!” message if it is false.\nConditional rendering is a useful technique for controlling the rendering of components in a React application. It allows you to tailor the rendering of your application based on the state of your application or the values of variables."
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#conditionally-returning-jsx",
    "href": "reactjs/reactjs-app-conditional-render.html#conditionally-returning-jsx",
    "title": "React JS App: conditional render",
    "section": "4 Conditionally returning JSX",
    "text": "4 Conditionally returning JSX\nLet’s say you have a PackingList component rendering several Items, which can be marked as packed or not.\n\n\nApp.js\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n\nNotice that some of the Item components have their isPacked prop set to true instead of false. You want to add a checkmark (✔) to packed items if isPacked={true}.\nIf the isPacked prop is true, this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:\n\n\nApp.js\n\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return <li className=\"item\">{name} ✔</li>;\n  }\n  return <li className=\"item\">{name}</li>;\n}\n\nexport default function PackingList() {\n  return (\n    <section>\n      <h1>Sally Ride's Packing List</h1>\n      <ul>\n        <Item \n          isPacked={true} \n          name=\"Space suit\" \n        />\n        <Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        />\n        <Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        />\n      </ul>\n    </section>\n  );\n}\n\n\n\n\n\n\nExecuting App.js, without conditional rendering\n\n\n\n\n\n\nExecuting App.js, with conditional rendering"
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#example-1",
    "href": "reactjs/reactjs-app-conditional-render.html#example-1",
    "title": "React JS App: conditional render",
    "section": "5 Example 1:",
    "text": "5 Example 1:\nIn this example, when you press send, setIsSent(true) tells React to re-render the UI:\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [isSent, setIsSent] = useState(false);\n  const [message, setMessage] = useState('Hi!');\n  if (isSent) {\n    return <h1>Your message is on its way!</h1>\n  }\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      setIsSent(true);\n      sendMessage(message);\n    }}>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n\nfunction sendMessage(message) {\n  // ...\n}\n\n\n\n\n\n\nExecuting App.js, inital render\n\n\n\n\n\n\nExecuting App.js, just filling textarea\n\n\n\n\n\n\nExecuting App.js, re-render, isSent is true, so the first return is executed\n\n\n\n\nHere’s what happens when you click the button Send:\n\nThe onSubmit event handler executes.\nsetIsSent(true) sets isSent to true and queues a new render.\nReact re-renders the component according to the new isSent value.\nThe new rendering with isSent to true prints the first return (#7)"
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#example-2-crosswalk",
    "href": "reactjs/reactjs-app-conditional-render.html#example-2-crosswalk",
    "title": "React JS App: conditional render",
    "section": "6 Example 2: crosswalk",
    "text": "6 Example 2: crosswalk\nHere is a crosswalk light component that toggles on when the button is pressed:\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function TrafficLight() {\n  const [walk, setWalk] = useState(true);\n\n  function handleClick() {\n    setWalk(!walk);\n    alert(walk ? 'Stop is next' : 'Walk is next');\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Change to {walk ? 'Stop' : 'Walk'}\n      </button>\n      <h1 style={{\n        color: walk ? 'darkgreen' : 'darkred'\n      }}>\n        {walk ? 'Walk' : 'Stop'}\n      </h1>\n    </>\n  );\n}\n\n\n\n\n\n\nExecuting App.js, inital render\n\n\n\n\n\n\nNext Render\n\n\n\n\n\n\n\n\n  React JS App: router \n\n\n\n  top \n\n\n\n React JS App: styling"
  },
  {
    "objectID": "reactjs/reactjs-app-events.html",
    "href": "reactjs/reactjs-app-events.html",
    "title": "React JS App: events",
    "section": "",
    "text": "📘 events React lets you add event handlers to your JSX.\nEvent handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on."
  },
  {
    "objectID": "reactjs/reactjs-app-events.html#adding-event-handlers",
    "href": "reactjs/reactjs-app-events.html#adding-event-handlers",
    "title": "React JS App: events",
    "section": "2 Adding event handlers",
    "text": "2 Adding event handlers\nYou can make it show a message when a user clicks by following these three steps:\n\nDeclare a function called handleClick inside your Button component.\nImplement the logic inside that function (use alert to show the message).\nAdd onClick={handleClick} to the <button> JSX.\n\nEvent handler functions are usually defined inside your components\n\n\napp.jsx\n\nexport default function Button() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}\n\n\n\n\n\n\nBy convention, it is common to name event handlers as handle followed by the event name. You’ll often see onClick={handleClick}, onMouseEnter={handleMouseEnter}, and so on.\n\n\n\n\n\n\nAlert\n\n\n\nYou defined the handleClick function and then passed it as a prop to <button>. handleClick is an event handler\n\n\n\n\n\n\nImportant\n\n\n\nFunctions passed to event handlers must be passed, not called. For example:\n\npassing a function (correct): <button onClick={handleClick}>\n\ncalling a function (incorrect): <button onClick={handleClick()}>\n\nThe difference is subtle. In the first example, the handleClick function is passed as an onClick event handler. This tells React to remember it and only call your function when the user clicks the button.\nIn the second example, the () at the end of handleClick() fires the function immediately during rendering, without any clicks. This is because JavaScript inside the JSX { and } executes right away."
  },
  {
    "objectID": "reactjs/reactjs-app-events.html#passing-event-handlers-as-props",
    "href": "reactjs/reactjs-app-events.html#passing-event-handlers-as-props",
    "title": "React JS App: events",
    "section": "3 Passing event handlers as props",
    "text": "3 Passing event handlers as props\nOften you’ll want the parent component to specify a child’s event handler. Consider buttons: depending on where you’re using a Button component, you might want to execute a different function—perhaps one plays a movie and another uploads an image.\nTo do this, pass a prop the component receives from its parent as the event handler like so:\n\n\nindex.js\n\nfunction Button({ onClick, children }) {\n  return (\n    <button onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nfunction PlayButton({ movieName }) {\n  function handlePlayClick() {\n    alert(`Playing ${movieName}!`);\n  }\n\n  return (\n    <Button onClick={handlePlayClick}>\n      Play \"{movieName}\"\n    </Button>\n  );\n}\n\nfunction UploadButton() {\n  return (\n    <Button onClick={() => alert('Uploading!')}>\n      Upload Image\n    </Button>\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    <div>\n      <PlayButton movieName=\"Kiki's Delivery Service\" />\n      <UploadButton />\n    </div>\n  );\n}\n\n\n\n\n\n\nExecuting index.js:\n\n\n\n\n\n\nFirst, Toolbar component renders PlayButton and UploadButton components. Second, both of them call their functions and then, each one call Button to render the button\n\n\n\nHere, the Toolbar component renders a PlayButton and an UploadButton:\n\nPlayButton passes handlePlayClick as the onClick prop to the Button inside.\nUploadButton passes() => alert('Uploading!') as the onClick prop to the Button inside.\n\nFinally, your Button component accepts a prop called onClick. It passes that prop directly to the built-in browser <button> with onClick={onClick}. This tells React to call the passed function on click.\n\n\n\n\n\n  React JS App: async \n\n\n\n  top \n\n\n\n React JS App: router"
  },
  {
    "objectID": "reactjs/reactjs-app-router.html",
    "href": "reactjs/reactjs-app-router.html",
    "title": "React JS App: router",
    "section": "",
    "text": "📘 router Create React App doesn’t include page routing. React Router is the most popular solution. It allows you to define routes for different parts of your application and to programmatically navigate between them."
  },
  {
    "objectID": "reactjs/reactjs-app-router.html#install",
    "href": "reactjs/reactjs-app-router.html#install",
    "title": "React JS App: router",
    "section": "2 Install",
    "text": "2 Install\n\n\nreactrouter.sh\n\nnpm i -D react-router-dom"
  },
  {
    "objectID": "reactjs/reactjs-app-router.html#folder-tree",
    "href": "reactjs/reactjs-app-router.html#folder-tree",
    "title": "React JS App: router",
    "section": "3 Folder tree",
    "text": "3 Folder tree\nTo create an application with multiple page routes, let’s first start with the file structure.\nWithin the src folder, we’ll create a folder named pages with several files:\n\n\nreactrouter.sh\n\nsrc\\pages\\:\n└── src\\pages\\\n    └── Layout.js\n        Home.js\n        Blogs.js\n        Contact.js\n        NoPage.js\n\n\n\nindex.js\n\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Layout from \"./pages/Layout\";\nimport Home from \"./pages/Home\";\nimport Blogs from \"./pages/Blogs\";\nimport Contact from \"./pages/Contact\";\nimport NoPage from \"./pages/NoPage\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<Home />} />\n          <Route path=\"blogs\" element={<Blogs />} />\n          <Route path=\"contact\" element={<Contact />} />\n          <Route path=\"*\" element={<NoPage />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\n\n\n\n\n\nUse React Router to route to pages based on URL: index.js:\n\n\nThe Layout component has <Outlet> and <Link> elements. The <Outlet> renders the current route selected. <Link> is used to set the URL and keep track of browsing history.\nAnytime we link to an internal path, we will use <Link> instead of <a href=\"\">. The layout route is a shared component that inserts common content on all pages, such as a navigation menu.\n\n\nLayout.js\n\nimport { Outlet, Link } from \"react-router-dom\";\n\nconst Layout = () => {\n  return (\n    <>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/blogs\">Blogs</Link>\n          </li>\n          <li>\n            <Link to=\"/contact\">Contact</Link>\n          </li>\n        </ul>\n      </nav>\n\n      <Outlet />\n    </>\n  )\n};\n\nexport default Layout;\n\n\n\nHome.js\n\nconst Home = () => {\n  return <h1>Home</h1>;\n};\n\nexport default Home;\n\n\n\nBlog.js\n\nconst Blogs = () => {\n  return <h1>Blog Articles</h1>;\n};\n\nexport default Blogs;\n\n\n\nContact.js\n\nconst Contact = () => {\n  return <h1>Contact Me</h1>;\n};\n\nexport default Contact;\n\n\n\nNoPagejs\n\nconst NoPage = () => {\n  return <h1>404</h1>;\n};\n\nexport default NoPage;\n\n\n\n\n\n\n  React JS App: events \n\n\n\n  top \n\n\n\n React JS App: conditional render"
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html",
    "href": "reactjs/reactjs-app-styling.html",
    "title": "React JS App: styling",
    "section": "",
    "text": "📘 styling Sass is a CSS pre-processor. Sass files are executed on the server and sends CSS to the browser.\n\n\nSCSS (Sassy CSS) is a CSS preprocessor, which means that it adds additional features to CSS that allow you to write more powerful and efficient stylesheets. SCSS is an extension of the CSS syntax, and uses the same structure and principles as regular CSS, with a few additional features.\nOne of the main advantages of SCSS is that it allows you to use variables in your stylesheets. This means that you can define a value once and use it multiple times throughout your stylesheet, which can make it easier to maintain and update your styles."
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#install",
    "href": "reactjs/reactjs-app-styling.html#install",
    "title": "React JS App: styling",
    "section": "2 Install",
    "text": "2 Install\n\n\nreactSass.sh\n\nnpm i sass"
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#create-a-sass-file",
    "href": "reactjs/reactjs-app-styling.html#create-a-sass-file",
    "title": "React JS App: styling",
    "section": "3 Create a sass file",
    "text": "3 Create a sass file\nCreate a Sass file the same way as you create CSS files, but Sass files have the file extension .scss\nIn Sass files you can use variables and other Sass functions:\n\n\nmycss.scss\n\n$myColor: red;\n\nh1 {\n  color: $myColor;\n}\n\n\n\nSCSS also supports other features, such as mixins, nested rules, and functions, which can make it easier to write and maintain complex stylesheets.\nImport the Sass file the same way as you imported a CSS file:\n\n\nindex.js\n\nindex.js:\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './my-sass.scss';\n\nconst Header = () => {\n  return (\n    <>\n      <h1>Hello Car!</h1>\n      <p>Add a little style!.</p>\n    </>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Header />);\n\n\n\n\n\n\nExecuting index.js, <Header /> component and importing mycss.scss"
  },
  {
    "objectID": "reactjs/reactjs-es6-arrow.html",
    "href": "reactjs/reactjs-es6-arrow.html",
    "title": "React JS ES6: arrow functions",
    "section": "",
    "text": "📘 Arrow function\nAn arrow function is a type of anonymous function expression in JavaScript, with a syntax that is shorter and more concise than a regular function expression.\nArrow functions are also known as fat arrow functions, due to the use of the fat arrow operator (=>) to define the function.\n\n\nHere is the basic syntax for defining an arrow function:\n\n\nprofile.js\n\n(parameters) => { statements }\n\nThe parameters are the input values that are passed to the function, and the statements are the code that the function executes. For example, here is a simple arrow function that takes a single number parameter and returns the square of that number:\n\n\nprofile.js\n\nconst square = (x) => {\n  return x * x;\n};\n\nIf the function has only one parameter, you can omit the parentheses around the parameter:\n\n\nprofile.js\n\nconst square = x => {\n  return x * x;\n};\n\nIf the function has no parameters, you can use an empty pair of parentheses:\n\n\nprofile.js\n\nconst greet = () => {\n  console.log('Hello, World!');\n};\n\nIf the function consists of a single statement that returns a value, you can omit the curly braces and the “return” keyword:\nconst square = (x) => x * x;\n\n\nArrow functions are often used in modern JavaScript as a concise alternative to regular function expressions, especially when defining callback functions or working with higher-order functions.\n\n\n\n\n\n\nImportant\n\n\n\nThey do not have their own this value, and they cannot be used as constructors.\n\n\n\n\n\n\n\n  React JS: props and state \n\n\n\n  top \n\n\n\n React JS ES6: import modules"
  },
  {
    "objectID": "reactjs/reactjs-es6-data.html",
    "href": "reactjs/reactjs-es6-data.html",
    "title": "React JS ES6: array, data and key",
    "section": "",
    "text": "📘 Arrays and data in JS\nWe can use the JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components."
  },
  {
    "objectID": "reactjs/reactjs-es6-data.html#data-array",
    "href": "reactjs/reactjs-es6-data.html#data-array",
    "title": "React JS ES6: array, data and key",
    "section": "2 Data Array",
    "text": "2 Data Array\nHere’s a short example of how to generate a list of items from an array:\n\n\ndata.jsx\n\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n\nMap the people members into a new array of JSX nodes, listItems:\n\n\ndata.jsx\n\nconst listItems = people.map(person => <li>{person}</li>);\n\nReturn listItems from your component wrapped in a <ul>:\n\n\ndata.jsx\n\nreturn <ul>{listItems}</ul>;\n\n\n\ndata.jsx\n\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n\nexport default function List() {\n  const listItems = people.map(person =>\n    <li>{person}</li>\n  );\n  return <ul>{listItems}</ul>;\n}\n\n\n\n\n\n\nExecuting List(), here is the result:\n\n\n\n\n\n\nNotice the sandbox above displays a console error"
  },
  {
    "objectID": "reactjs/reactjs-es6-data.html#filtering-and-structuring-data-with-key-id",
    "href": "reactjs/reactjs-es6-data.html#filtering-and-structuring-data-with-key-id",
    "title": "React JS ES6: array, data and key",
    "section": "3 Filtering and structuring data with key id",
    "text": "3 Filtering and structuring data with key id\nThis data can be structured even more as a JSON array with an Id:\n\n\ndata.jsx\n\nconst people = [{\n  id: 0,\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n}, {\n  id: 1,\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n}, {\n  id: 2,\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n}, {\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',  \n}, {\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n}];\n\nAnd now, let’s filter, map and return data:\n\n\ndata.jsx\n\n// Create a new array of just “chemist” people, chemists,\n// by calling filter() on the people\n// filtering by person.profession === 'chemist':\nconst chemists = people.filter(person =>\n  person.profession === 'chemist'\n);\n\n// Now map over chemists:\nconst listItems = chemists.map(person => {\n  // JSX elements directly inside a map() call\n  // always need keys!\n  <li key={person.id}>\n     <img\n       src={getImageUrl(person)}\n       alt={person.name}\n     />\n     <p>\n       <b>{person.name}:</b>\n       {' ' + person.profession + ' '}\n       known for {person.accomplishment}\n     </p>\n  </li>\n\n  // Lastly, return the listItems from your component:\n  return <ul>{listItems}</ul>;\n\n)};\n\n\n\n\n\n\nlet’s filter, map and return data\n\n\n\nKeys tell React which array item each component corresponds to, so that it can match them up later.\n\n\nThis becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\nMore on keys\nMore on arrays\n\n\n\n\n\n  React JS ES6: import modules \n\n\n\n  top \n\n\n\n React JS ES6: destructuring"
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html",
    "href": "reactjs/reactjs-es6-destructuring.html",
    "title": "React JS ES6: destructuring",
    "section": "",
    "text": "📘 Destructuring arrays\nArray destructuring is a way to extract values from an array and assign them to separate variables.\nIt allows you to unpack the values of an array into separate variables."
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html#why-do-we-need-it",
    "href": "reactjs/reactjs-es6-destructuring.html#why-do-we-need-it",
    "title": "React JS ES6: destructuring",
    "section": "2 Why do we need it",
    "text": "2 Why do we need it\n\nArray destructuring can be a useful tool for extracting values from arrays and assigning them to separate variables. It can make your code more concise and easier to read, especially when working with large or complex arrays.\n\nHere is the old way of assigning array items to a variable:\n\n\nApp.js\n\nconst vehicles = ['mustang', 'f-150', 'expedition'];\n\n// old way\nconst car = vehicles[0];\nconst truck = vehicles[1];\nconst suv = vehicles[2];\n\nHere is the new way of assigning array items to a variable With destructuring:\n\n\nApp.js\n\nconst vehicles = ['mustang', 'f-150', 'expedition'];\n\nconst [car, truck, suv] = vehicles;"
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html#how-to-use-destructuring",
    "href": "reactjs/reactjs-es6-destructuring.html#how-to-use-destructuring",
    "title": "React JS ES6: destructuring",
    "section": "3 How to use destructuring",
    "text": "3 How to use destructuring\nHere’s an example of array destructuring:\n\n\nApp.js\n\nconst arr = [1, 2, 3];\nconst [a, b, c] = arr;\n\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\n\nYou can also use destructuring to skip elements or assign default values:\n\n\nApp.js\n\nconst arr = [1, 2, 3];\nconst [a, , c] = arr;\n\nconsole.log(a); // 1\nconsole.log(c); // 3\n\nconst arr2 = [1];\nconst [a2, b2 = 2, c2 = 3] = arr2;\n\nconsole.log(a2); // 1\nconsole.log(b2); // 2\nconsole.log(c2); // 3\n\nIn the first example, the second element of the arr array is skipped, and in the second example, default values are assigned to the b2 and c2 variables if the corresponding elements of the arr2 array are not present.\n\n\nArray destructuring can be a convenient way to extract values from arrays and assign them to separate variables. It can make your code more concise and easier to read.\nYou can also use destructuring to skip elements or assign default values:\n\n\nApp.js\n\nconst arr = [1, 2, 3, 4];\nconst [a, , c, d] = arr;\n\nconsole.log(a); // 1\nconsole.log(c); // 3\nconsole.log(d); // 4\n\nconst arr2 = [1];\nconst [a2, b2 = 2, c2 = 3, d2 = 4] = arr2;\n\nconsole.log(a2); // 1\nconsole.log(b2); // 2\nconsole.log(c2); // 3\nconsole.log(d2); // 4"
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html#more-examples",
    "href": "reactjs/reactjs-es6-destructuring.html#more-examples",
    "title": "React JS ES6: destructuring",
    "section": "4 More examples",
    "text": "4 More examples\n\n4.1 Nested arrays\nYou can use destructuring to extract values from nested arrays:\n\n\nApp.js\n\nconst arr = [[1, 2], [3, 4]];\nconst [[a, b], [c, d]] = arr;\n\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\nconsole.log(d); // 4\n\n\n\n4.2 Rest syntax\nThe rest syntax allows you to capture the remaining elements of an array in a separate variable:\n\n\nApp.js\n\nconst arr = [1, 2, 3, 4, 5];\nconst [a, b, ...rest] = arr;\n\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(rest); // [3, 4, 5]\n\n\n\n4.3 Swapping variables\nYou can use destructuring to easily swap the values of two variables:\n\n\nApp.js\n\nlet a = 1;\nlet b = 2;\n\n[a, b] = [b, a];\n\nconsole.log(a); // 2\nconsole.log(b); // 1\n\n\n\n4.4 Function arguments\nYou can use destructuring to specify function arguments:\n\n\nApp.js\n\nfunction add([a, b]) {\n  return a + b;\n}\n\nconsole.log(add([1, 2])); // 3\n\n\n\n4.5 Object destructuring\nYou can also use destructuring with objects. Here’s an example:\n\n\nApp.js\n\nconst obj = {\n  foo: 1,\n  bar: 2\n};\n\nconst { foo, bar } = obj;\n\nconsole.log(foo); // 1\nconsole.log(bar); // 2\n\n\n\n\n\n\n  React JS ES6: array, data and key \n\n\n\n  top \n\n\n\n React JS ES6: spread operator"
  },
  {
    "objectID": "reactjs/reactjs-es6-import.html",
    "href": "reactjs/reactjs-es6-import.html",
    "title": "React JS ES6: import modules",
    "section": "",
    "text": "📘 **import modules*\nThe magic of components lies in their reusability: you can create components that are composed of other components.\nBut as you nest more and more components, it often makes sense to start splitting them into different files. This lets you keep your files easy to scan and reuse components in more places."
  },
  {
    "objectID": "reactjs/reactjs-es6-import.html#exporting-and-importing-a-component",
    "href": "reactjs/reactjs-es6-import.html#exporting-and-importing-a-component",
    "title": "React JS ES6: import modules",
    "section": "2 Exporting and importing a component",
    "text": "2 Exporting and importing a component\nWhat if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move Gallery and Profile out of the root component file.\nThis will make them more modular and reusable in other files. You can move a component in three steps:\n\nMake a new JS file to put the components in.\nExport your function component from that file (using either default or named exports).\nImport it in the file where you’ll use the component (using the corresponding technique for importing default or named exports).\n\nHere both Profile and Gallery have been moved out of App.js into a new file called Gallery.js. Now you can change App.js to import Gallery from Gallery.js:\n\n\nGallery.js\n\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n       <p>I love science!! Do you know what does STEAM mean? Come on, Albertus, answer the question! </p>\n    </section>\n  );\n}\n\n\n\nApp.js\n\nimport Gallery from './Gallery.js';\n\nexport default function App() {\n  return (\n    <Gallery />\n  );\n}\n\n\n\n\n\n\n\nExecuting App.js, calling component Gallery, importing it and using it\n\n\n\n\n\n\n  React JS ES6: arrow functions \n\n\n\n  top \n\n\n\n React JS ES6: array, data and key"
  },
  {
    "objectID": "reactjs/reactjs-es6-spread.html",
    "href": "reactjs/reactjs-es6-spread.html",
    "title": "React JS ES6: spread operator",
    "section": "",
    "text": "📘 spread operator\nThe JavaScript spread operator ... allows us to quickly copy all or part of an existing array or object into another array or object.\n\n\nThe spread operator is a useful tool for working with arrays and can make your code more concise and easier to read.\n\n\nApp.js\n\nconst numbersOne = [1, 2, 3];\nconst numbersTwo = [4, 5, 6];\nconst numbersCombined = [...numbersOne, ...numbersTwo];\n\nThe spread operator is often used in combination with destructuring.\n\n\nApp.js\n\nconst numbers = [1, 2, 3, 4, 5, 6];\n\nconst [one, two, ...rest] = numbers;\n\nThe spread operator can also be used to spread the elements of an array into the arguments of a function:\n\n\nApp.js\n\nfunction add(a, b, c) {\n  return a + b + c;\n}\n\nconst arr = [1, 2, 3];\nconsole.log(add(...arr)); // 6"
  },
  {
    "objectID": "reactjs/reactjs-es6-spread.html#copying-objects-with-the-spread-syntax",
    "href": "reactjs/reactjs-es6-spread.html#copying-objects-with-the-spread-syntax",
    "title": "React JS ES6: spread operator",
    "section": "2 Copying objects with the spread syntax",
    "text": "2 Copying objects with the spread syntax\n\n\n\n\n\n\nImportant\n\n\n\nWe need to use spread operator to quickly copy part of the existing Person object (state variable) into another new object (state variable).\n\n\nNote that the … spread syntax is “shallow”—it only copies things one level deep. This makes it fast, but it also means that if you want to update a nested property, you’ll have to use it more than once.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleChange(e) {\n    setPerson({\n      ...person,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          name=\"firstName\"\n          value={person.firstName}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          name=\"lastName\"\n          value={person.lastName}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          name=\"email\"\n          value={person.email}\n          onChange={handleChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nRe-render with handleChange(e)\n\n\n\nHere, you want to also copy the existing data into the new object to be rendered next render (that is lastName and email) because only one of the fields has changed: firstName from input and e.target.value to trigger setPerson.\n\nSo with big objects we must use spread operator.\n\n\n\nApp.js\n\nsetPerson({\n  firstName: e.target.value, // New first name from the input\n  lastName: person.lastName,\n  email: person.email\n  // ..\n  // imagine a big object with 50 fields\n  // ..\n});\n\nUse spread operator to create a new object and pass it to setPerson.\n\nYou can use the … object spread syntax so that you don’t need to copy every property separately.\n\n\n\nApp.js\n\nsetPerson({\n  ...person, // Copy the old fields\n  firstName: e.target.value // But override this one\n});\n\n\n\n\n\n\n  React JS ES6: destructuring \n\n\n\n  top \n\n\n\n ReactJS: hooks rules"
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html",
    "href": "reactjs/reactjs-hook-context.html",
    "title": "React JS: useContext",
    "section": "",
    "text": "📘 useContext\nuseContext is a React Hook that lets you read and subscribe to context from your component.\nconst value = useContext(SomeContext)\nuseContext allows you to consume context values from a nearest ancestor Context.Provider. Here’s a brief overview of the three steps to use useContext:"
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#basic-example",
    "href": "reactjs/reactjs-hook-context.html#basic-example",
    "title": "React JS: useContext",
    "section": "1 Basic example",
    "text": "1 Basic example\nIn this example, the MyContext context is created using the React.createContext function, with a default value of default value. The MyComponent component consumes the context value using the useContext hook, and displays the value in the DOM.\n\n\nApp.js\n\nconst MyContext = React.createContext('default value');\n\nfunction MyComponent() {\n  const value = useContext(MyContext);\n  return <div>{value}</div>;\n}\n\nfunction App() {\n  return (\n    <MyContext.Provider value=\"Hello, world!\">\n      <MyComponent />\n    </MyContext.Provider>\n  );\n}\n\n\n\nUsing useContext in this way allows you to easily share values between components, without the need to pass props down through multiple levels of the component tree.\nThe App component wraps the MyComponent component with aMyContext.Provider component, and passes the value ‘Hello, world!’ as a prop.\nThis makes the context value available to the MyComponent component, which will use the value passed by the provider rather than the default value."
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#usecontextsomecontext",
    "href": "reactjs/reactjs-hook-context.html#usecontextsomecontext",
    "title": "React JS: useContext",
    "section": "2 useContext(SomeContext)",
    "text": "2 useContext(SomeContext)\n\n\nApp.js\n\nimport { useContext } from 'react';\n\nfunction MyComponent() {\n  const theme = useContext(ThemeContext);\n  // ..\n\n\n\nCall useContext at the top level of your component to read and subscribe to context.\n\n2.1 Parameters\n\nsomeContext: The context that you’ve previously created with createContext. The context itself does not hold the information, it only represents the kind of information you can provide or read from components.\n\n\n\n2.2 Returns\n\nuseContext returns the context value for the calling component. It is determined as the value passed to the closest SomeContext. Provider above the calling component in the tree.\n\n\nIf there is no such provider, then the returned value will be the defaultValue you have passed to createContext for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes."
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#usage-passing-data-deeply-into-the-tree",
    "href": "reactjs/reactjs-hook-context.html#usage-passing-data-deeply-into-the-tree",
    "title": "React JS: useContext",
    "section": "3 Usage: passing data deeply into the tree",
    "text": "3 Usage: passing data deeply into the tree\n\n3.1 The Problem\nThe big issue that comes up is figuring out how components should communicate with each other.\n\n\n\nEight simple strategies for communicating between React components\n\n\n\n\n3.2 The Solution: context\nContext works similarly to props, but instead of providing data to a single child, it can be used to provide data to an entire subtree.\n\nContext can only send data down the tree (parent to subtree). It can be paired with callback functions to pass data back up.\n\nuseContext React documentation and React useContext Hook w3 schools"
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#example-1",
    "href": "reactjs/reactjs-hook-context.html#example-1",
    "title": "React JS: useContext",
    "section": "4 Example 1",
    "text": "4 Example 1\n\ncreateContext, useContext, useState working together\n\nIn this example, there is a currentUser state variable which holds an object.\nWe combine { currentUser, setCurrentUser } into a single object and pass it down through the context inside the value={}.\nThis lets any component below, such as LoginButton, read both currentUser and setCurrentUser, and then call setCurrentUser when needed.\n\n\nApp.js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <CurrentUserContext.Provider\n      value={{\n        currentUser,\n        setCurrentUser\n      }}\n    >\n      <Form />\n    </CurrentUserContext.Provider>\n  );\n}\n\nfunction Form({ children }) {\n  return (\n    <Panel title=\"Welcome\">\n      <LoginButton />\n    </Panel>\n  );\n}\n\nfunction LoginButton() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(CurrentUserContext);\n\n  if (currentUser !== null) {\n    return <p>You logged in as {currentUser.name}.</p>;\n  }\n\n  return (\n    <Button onClick={() => {\n      setCurrentUser({ name: 'Advika' })\n    }}>Log in as Advika</Button>\n  );\n}\n\nfunction Panel({ title, children }) {\n  return (\n    <section className=\"panel\">\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children, onClick }) {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nInitial render\n\n\n\nExamples of updating context\n\n\n\n\n\n  React JS: useEffect \n\n\n\n  top \n\n\n\n ReactJS: custom hooks"
  },
  {
    "objectID": "reactjs/reactjs-hook-custom.html",
    "href": "reactjs/reactjs-hook-custom.html",
    "title": "ReactJS: custom hooks",
    "section": "",
    "text": "📘 Custom Hooks\nHooks are reusable functions. When you have component logic that needs to be used by multiple components, we can extract that logic to a custom Hook.\nCustom Hooks start with use.\nExample: useFetch"
  },
  {
    "objectID": "reactjs/reactjs-hook-custom.html#example-1",
    "href": "reactjs/reactjs-hook-custom.html#example-1",
    "title": "ReactJS: custom hooks",
    "section": "1 Example 1",
    "text": "1 Example 1\nWe are fetching data, We will use the JSONPlaceholder service to fetch fake data. This service is great for testing applications when there is no existing data.\n\n\nApp.js\n\nimport { useState, useEffect } from \"react\";\n\nconst Home = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/todos\")\n      .then((res) => res.json())\n      .then((data) => setData(data));\n }, []);\n\n  return (\n    <>\n      {data &&\n        data.map((item) => {\n          return <p key={item.id}>{item.title}</p>;\n        })}\n    </>\n  );\n};\n\n\n\n\n\n\nuseEffect inital render: fetching data\n\n\nThe fetch logic may be needed in other components as well, so we will extract that into a custom Hook.\n\nMove the fetch logic to a new file to be used as a custom Hook:\n\n\n\nuseFetch.js\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => setData(data));\n  }, [url]);\n\n  return [data];\n};\n\nexport default useFetch;\n\n\n\nindex.js\n\nimport ReactDOM from \"react-dom/client\";\nimport useFetch from \"./useFetch\";\n\nconst Home = () => {\n  const [data] = useFetch(\"https://jsonplaceholder.typicode.com/todos\");\n\n  return (\n    <>\n      {data &&\n        data.map((item) => {\n          return <p key={item.id}>{item.title}</p>;\n        })}\n    </>\n  );\n};\n\nWe have created a new file called useFetch.js containing a function called useFetch which contains all of the logic needed to fetch our data.\n\n\n\n\n\n  React JS: useContext \n\n\n\n  top \n\n\n\n React JS App: async"
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html",
    "href": "reactjs/reactjs-hook-effect.html",
    "title": "React JS: useEffect",
    "section": "",
    "text": "📘 useEfect\nuseEffect allows you to perform side effects in your components. Some examples of side effects are: fetching data, directly updating the DOM, and timers.\nuseEffect lets you synchronize a component with an external system.\nuseEffect(setup, dependencies?)"
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#introduction",
    "href": "reactjs/reactjs-hook-effect.html#introduction",
    "title": "React JS: useEffect",
    "section": "1 Introduction",
    "text": "1 Introduction\nuseEffect accepts two arguments. The second argument is optional.\n\n\n“The question is not ‘when does this effect run,’ the question is ‘with which state does this effect synchronize?’” – Ryan Florence\n\nuseEffect(setup, dependencies?)\n\n\n\nApp.js\n\nimport { useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () => {\n      connection.disconnect();\n    };\n  }, [serverUrl, roomId]);\n  // ...\n}\n\n\n\nuseEffect is a Hook, so you can only call it at the top level of your component or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n\nIf you’re not trying to synchronize with some external system, you probably don’t need an Effect.\n\n\n1.1 Parameters\n\nsetup: The function with your Effect’s logic.\n\nYour setup function may also optionally return a cleanup function.\nWhen your component is first added to the DOM, React will run your setup function.\nAfter every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values.\nAfter your component is removed from the DOM, React will run your cleanup function one last time.\n\noptional dependencies: The list of all reactive values referenced inside of the setup code.\n\nReactive values include** props, state, and all the variables and functions declared directly inside your component bod**y.\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\n\n\nWhen Strict Mode is on, React will run one extra development-only setup+cleanup cycle before the first real setup.\nIf some of your dependencies are objects or functions defined inside the component, there is a risk that they will cause the Effect to re-run more often than needed.\nIf your Effect wasn’t caused by an interaction (like a click), React will let the browser paint the updated screen first before running your Effect.\nIf your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replace useEffect with useLayoutEffect.\nEven if your Effect was caused by an interaction (like a click), the browser may repaint the screen before processing the state updates inside your Effect.\nEffects only run on the client. They don’t run during server rendering.\n\n\n\n\n\n\n1.2 Returns\n\nuseEffect returns undefined.\n\n\n\n\nReact useEffect return by @_georgemoller\n\n\nDependency array passed to useEffect:\n\nIt’s optional. If you don’t specify it, the effect runs after each render.\nIf it’s empty ([]), the effect runs once, after the initial render.\nIt must — or as we’ll see later, should — contain the list of values used in the effect. The effect runs after any of these values changes (and after the initial render).\nThe array of dependencies is not passed as argument to the effect function."
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#synchronizing-with-effects",
    "href": "reactjs/reactjs-hook-effect.html#synchronizing-with-effects",
    "title": "React JS: useEffect",
    "section": "2 Synchronizing with Effects",
    "text": "2 Synchronizing with Effects\n\n\n\n\n\n\nsynchronize is a key-word\n\n\n\n“The question is not ‘when does this effect run,’ the question is ‘with which state does this effect synchronize?’”\n– Ryan Florence\n\n\nEffects let you run some code after rendering so that you can synchronize your component with some system outside of React.\n\n2.1 Effects & events\n\nAn event is an action triggered by the user or the system, while an effect is a consequence of an event, usually referring to a change or action that results from it.\n\nWhat are the effects, really? Examples are:\n\nFetching data\nReading from local storage\nRegistering and deregistering event listeners\nUpadating the DOM\nTimers\nUpdating the document title\nUpdating a state variable based on props change\nCleanup operations\nTriggering animations or transitions\nLogging or analytics tracking\nManaging scroll position\n\nReact’s effects are a completely different animal than the lifecycle methods of class-based components."
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#example-1",
    "href": "reactjs/reactjs-hook-effect.html#example-1",
    "title": "React JS: useEffect",
    "section": "3 Example 1",
    "text": "3 Example 1\nIn this example, the useEffect hook manages a state object with one field: count and a function-setter setCalculation.\n\n\nApp.js\n\nimport { useState, useEffect } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [calculation, setCalculation] = useState(0);\n\n  useEffect(() => {\n    setCalculation(() => count * 2);\n  }, [count]); // <- add the count variable here\n\n  return (\n    <>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount((c) => c + 1)}>+</button>\n      <p>Calculation: {calculation}</p>\n    </>\n  );\n}\n\n\n\n\n\n\nuseEffect inital render\n\n\n\n\n\n\nuseEffect second render\n\n\n\n\n\n\nuseEffect third render"
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#example-2",
    "href": "reactjs/reactjs-hook-effect.html#example-2",
    "title": "React JS: useEffect",
    "section": "4 Example 2",
    "text": "4 Example 2\nBy default useEffect will trigger anytime an update happens to the component.\nThis means if the component receives new props from its parent component or even when you change the state locally, the effect will run again.\n\n\n\n\n\n\nBad use of useEffect\n\n\n\nIf you don’t control the render cycle, you could run into an infinite loop of updates.\n\n\nconst Counter = () => {\n  const [counter, setCounter] = React.useState(0);\n\n  React.useEffect(() => {\n    const s = setInterval(() => {\n      setCounter(c => c + 1);\n    }, 1000);\n  }, []);\n\n  return (\n    <div style={{textAlign: 'center'}}>\n      <h1>Counter: {counter}</h1>\n    </div>\n  );\n};"
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#refs-articles",
    "href": "reactjs/reactjs-hook-effect.html#refs-articles",
    "title": "React JS: useEffect",
    "section": "5 Refs articles",
    "text": "5 Refs articles\n\ncodesanbox\nExploring the useEffect API with Easy Examples\nReact useEffect hook with code examples\nA complete guide to the useEffect React Hook\nA Complete Guide to useEffect\nReact Core Concept I: Rendering & useState\n\n\n\n\n\n\n  React JS: useRef \n\n\n\n  top \n\n\n\n React JS: useContext"
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html",
    "href": "reactjs/reactjs-hook-reducer.html",
    "title": "React JS: useReducer",
    "section": "",
    "text": "📘 useReducer\nuseReducer is a React Hook that lets you add a reducer to your component.\nconst [state, dispatch] = useReducer(reducer, initialArg, init?)\nA reducer is a function that takes in the current state of an application and an action, and returns a new state. Reducers are often used in conjunction with a state management library like Redux, which helps manage the state of a React application.\nIn this example, the reducer function takes in a state object and an action object, and returns a new state based on the action type."
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html#usereducerinit",
    "href": "reactjs/reactjs-hook-reducer.html#usereducerinit",
    "title": "React JS: useReducer",
    "section": "1 useReducer(init)",
    "text": "1 useReducer(init)\n\nuseReducer(reducer, initialArg, init?)\n\nCall useReducer at the top level of your component to manage its state with a reducer.\n\n\nApp.js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  // ...\n}\n\nfunction MyComponent() {\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n  // ...\n\n\n\n\n\n\nConsolidate state logic with a reducer: a reducer function is where you will put your state logic.\n\n\n\n1.1 Parameters\n\nreducer: The reducer function that specifies how the state gets updated. It must be pure, should take the state and action as arguments, and should return the next state. State and action can be of any types.\ninitialArg: The value from which the initial state is calculated. It can be a value of any type. How the initial state is calculated from it depends on the next init argument.\noptional init: The initializer function that specifies how the initial state is calculated. If it’s not specified, the initial state is set to initialArg. Otherwise, the initial state is set to the result of calling init(initialArg)."
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html#dispatch-function",
    "href": "reactjs/reactjs-hook-reducer.html#dispatch-function",
    "title": "React JS: useReducer",
    "section": "2 dispatch function",
    "text": "2 dispatch function\nuseReducer returns an array with exactly two values:\n\nThe current state. During the first render, it’s set to init(initialArg) or initialArg (if there’s no init).\nThe dispatch function that lets you update the state to a different value and trigger a re-render.\n\nThe dispatch function returned by useReducer lets you update the state to a different value and trigger a re-render.\nYou need to pass the action as the only argument to the dispatch function:\n\n\nApp.js\n\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\nfunction handleClick() {\n  dispatch({ type: 'incremented_age' });\n  // ...\n\n\n\n\n\n\nuseReducer returns an array with exactly two values: the current state and the dispatch function\n\n\n\n\n\n\n\n\nWarning\n\n\n\ndispatch functions do not have a return value."
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html#example-1",
    "href": "reactjs/reactjs-hook-reducer.html#example-1",
    "title": "React JS: useReducer",
    "section": "3 Example 1",
    "text": "3 Example 1\nIn this example, the reducer manages a state object with one field: age.\n\n\nApp.js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  if (action.type === 'incremented_age') {\n    return {\n      age: state.age + 1\n    };\n  }\n  throw Error('Unknown action.');\n}\n\nexport default function Counter() {\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n\n  return (\n    <>\n      <button onClick={() => {\n        dispatch({ type: 'incremented_age' })\n      }}>\n        Increment age\n      </button>\n      <p>Hello! You are {state.age}.</p>\n    </>\n  );\n}\n\n\n\n\n\n\nuseReducer inital render\n\n\n\n\n\n\nuseReducer: handler > dispatcher > useRducer > reducer > update state > render new state\n\n\n\nBe careful with that: how to update the new state:\n\n\nApp.js\n\n// ..\n    return {\n      age: state.age + 1\n    };\n\n// ...\n\n\n\nThis will be a mistake:\nage = state.age + 1\nstate.age = state.age + 1\nage = age + 1\nState is read-only. Don’t modify any objects or arrays in state: instead, always return new objects from your reducer.\nuseReducer is very similar to useState, but it lets you move the state update logic from event handlers into a single function outside of your component. Read more about choosing between useState and useReducer."
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html#example-2",
    "href": "reactjs/reactjs-hook-reducer.html#example-2",
    "title": "React JS: useReducer",
    "section": "4 Example 2",
    "text": "4 Example 2\nIn this example, the reducer manages a state object with two fields: name and age.\n\n\nApp.js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'incremented_age': {\n      return {\n        name: state.name,\n        age: state.age + 1\n      };\n    }\n    case 'changed_name': {\n      return {\n        name: action.nextName,\n        age: state.age\n      };\n    }\n  }\n  throw Error('Unknown action: ' + action.type);\n}\n\nconst initialState = { name: 'Taylor', age: 42 };\n\nexport default function Form() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function handleButtonClick() {\n    dispatch({ type: 'incremented_age' });\n  }\n\n  function handleInputChange(e) {\n    dispatch({\n      type: 'changed_name',\n      nextName: e.target.value\n    }); \n  }\n\n  return (\n    <>\n      <input\n        value={state.name}\n        onChange={handleInputChange}\n      />\n      <button onClick={handleButtonClick}>\n        Increment age\n      </button>\n      <p>Hello, {state.name}. You are {state.age}.</p>\n    </>\n  );\n}\n\n\n\n\n\n\nuseReducerinital render\n\n\n\n\n\n\nuseReducernew render\n\n\n\n\n\n\n\n\n  ReactJS: useState \n\n\n\n  top \n\n\n\n React JS: useRef"
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html",
    "href": "reactjs/reactjs-hook-ref.html",
    "title": "React JS: useRef",
    "section": "",
    "text": "📘 hookRef\nuseRef is a React Hook that lets you reference a value that’s not needed for rendering: allows you to persist values between renders.\nconst ref = useRef(initialValue)"
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html#userefinitialvalue",
    "href": "reactjs/reactjs-hook-ref.html#userefinitialvalue",
    "title": "React JS: useRef",
    "section": "1 useRef(initialValue)",
    "text": "1 useRef(initialValue)\nCall useRef at the top level of your component to declare a ref.\n\n\nApp.js\n\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n  const intervalRef = useRef(0);\n  const inputRef = useRef(null);\n  // ...\n\n\n\nIt can be used to store a mutable value that does not cause a re-render when updated. It can be used to access a DOM element directly.\n\n1.1 Parameters\n\ninitialValue: The value you want the ref object’s current property to be initially. It can be a value of any type. This argument is ignored after the initial render.\n\n\n\n1.2 Returns\nuseRef returns an object with a single property:\n\ncurrent: Initially, it’s set to the initialValue you have passed. You can later set it to something else. If you pass the ref object to React as a ref attribute to a JSX node, React will set its current property."
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html#example-1",
    "href": "reactjs/reactjs-hook-ref.html#example-1",
    "title": "React JS: useRef",
    "section": "2 Example 1",
    "text": "2 Example 1\nIf you show {ref.current} in the JSX, the number won’t update on click. This is because setting ref.current does not trigger a re-render. Information that’s used for rendering should be state instead.\n\n\nApp.js\n\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>\n        Click me!\n      </button>\n      // Do not write or read ref.current during rendering.\n      // React expects that the body of your component\n      // behaves like a pure function\n      // We do now just for this example\n      // If you need use: useState\n      <p>You have pressed the button {ref.current} times</p>\n    </> \n  );\n}\n\n\n\n\n\n\ninital render\n\n\n\n\n\n\nClicking button and no-renders\n\n\n\nExamples of manipulating the DOM with useRef"
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html#example-2",
    "href": "reactjs/reactjs-hook-ref.html#example-2",
    "title": "React JS: useRef",
    "section": "3 Example 2",
    "text": "3 Example 2\nThe useRef Hook can also be used to keep track of previous state values.\nThis is because we are able to persist useRef values between renders.\n\n\nApp.js\n\nimport { useState, useEffect, useRef } from \"react\";\n\nexport default function Counter() {\n const [inputValue, setInputValue] = useState(\"\");\n  const previousInputValue = useRef(\"\");\n\n  useEffect(() => {\n    previousInputValue.current = inputValue;\n  }, [inputValue]);\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n      <h2>Current Value: {inputValue}</h2>\n      <h2>Previous Value: {previousInputValue.current}</h2>\n    </>\n  );\n}\n\n\n\n\n\n\ninital render\n\n\n\n\n\n\nInput and not rendering when onChange={} gets the new inputs, but we see input by using useEffect\n\n\n\nThis time we use a combination of useState, useEffect, and useRef to keep track of the previous state.\nIn the useEffect, we are updating the useRef current value each time the inputValue is updated by entering text into the input field.\n\n\n\n\n\n  React JS: useReducer \n\n\n\n  top \n\n\n\n React JS: useEffect"
  },
  {
    "objectID": "reactjs/reactjs-hook-rules.html",
    "href": "reactjs/reactjs-hook-rules.html",
    "title": "React JS: Rules of Hooks",
    "section": "",
    "text": "📘 Rules of Hooks\nHooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nReference: Rules of Hooks"
  },
  {
    "objectID": "reactjs/reactjs-hook-rules.html#overview",
    "href": "reactjs/reactjs-hook-rules.html#overview",
    "title": "React JS: Rules of Hooks",
    "section": "1 Overview",
    "text": "1 Overview\nHooks are JavaScript functions, but you need to follow two rules when using them. We provide a linter plugin to enforce these rules automatically:\n\n1.1 Rule #1: Only Call Hooks at the Top Level\n\nDon’t call Hooks inside loops, conditions, or nested functions.\n\nInstead, always use Hooks at the top level of your React function, before any early returns.\nBy following this rule, you ensure that Hooks are called in the same order each time a component renders.\nThat’s what allows React to correctly preserve the state of Hooks between multiple useState and useEffect calls.\n\n\n1.2 Rule #2: Only Call Hooks from React Functions\n\nDon’t call Hooks from regular JavaScript functions. Instead, you can:\n\n\nCall Hooks from React function components.\nCall Hooks from custom Hooks (we’ll learn about them on the next page)."
  },
  {
    "objectID": "reactjs/reactjs-hook-rules.html#eslint-plugin",
    "href": "reactjs/reactjs-hook-rules.html#eslint-plugin",
    "title": "React JS: Rules of Hooks",
    "section": "2 ESLint Plugin",
    "text": "2 ESLint Plugin\nReact team released an ESLint plugin called eslint-plugin-react-hooks that enforces these two rules. You can add this plugin to your project if you’d like to try it:\nThis plugin is included by default in Create React App.\nnpm install eslint-plugin-react-hooks --save-dev\n// Your ESLint configuration\n{\n  \"plugins\": [\n    // ...\n    \"react-hooks\"\n  ],\n  \"rules\": {\n    // ...\n    \"react-hooks/rules-of-hooks\": \"error\", // Checks rules of Hooks\n    \"react-hooks/exhaustive-deps\": \"warn\" // Checks effect dependencies\n  }\n}"
  },
  {
    "objectID": "reactjs/reactjs-hook-rules.html#cheatsheet-by-_georgemoller",
    "href": "reactjs/reactjs-hook-rules.html#cheatsheet-by-_georgemoller",
    "title": "React JS: Rules of Hooks",
    "section": "3 Cheatsheet by @_georgemoller",
    "text": "3 Cheatsheet by @_georgemoller\n\n\n\nHooks: useState, useReducer, useContext\n\n\n\n\n\nHooks: useEffect, useLayoutEffect\n\n\n\n\n\nHooks: useInsertionEffect, useSyncExternalStore\n\n\n\n\n\nHooks: useCallback, useMemo\n\n\n\n\n\nHooks: useRef, useImperativeHandle\n\n\n\n\n\nHooks: useId, useDebugValue\n\n\n\n\n\nHooks: useEvents, useDeferredValue, useTransition\n\n\n\n\n\n\n\n  React JS ES6: spread operator \n\n\n\n  top \n\n\n\n ReactJS: useState"
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html",
    "href": "reactjs/reactjs-hook-state.html",
    "title": "ReactJS: useState",
    "section": "",
    "text": "📘 hookState\nuseState is a React Hook that lets you add a state variable to your component.\nconst [state, setState] = useState(initialState)\nThe useState hook takes a single argument, which is the initial state for the state variable. In the example above, the initial state is initialState. The hook returns an array with two elements: the current state value and a function that can be used to update the state value.\nState: what-is-state-and-rendering-updaterender-cycle"
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#introduction",
    "href": "reactjs/reactjs-hook-state.html#introduction",
    "title": "ReactJS: useState",
    "section": "1 Introduction",
    "text": "1 Introduction\nconst [state, setState] = useState(initialState)\n\n\n\n\n\nuseState hook provides you with functionality to set state for a variable and automatically update the DOM with the new state\n\n\n\ninitialState: The value you want the state to be initially. It can be a value of any type, but there is a special behavior for functions. This argument is ignored after the initial render.\nuseState returns an array with exactly two values:\n\nstate: The current state. During the first render, it will match the initialState you have passed.\nsetState: The set function that lets you update the state to a different value and trigger a re-render."
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#why-hooks-are-so-important",
    "href": "reactjs/reactjs-hook-state.html#why-hooks-are-so-important",
    "title": "ReactJS: useState",
    "section": "2 Why hooks are so important",
    "text": "2 Why hooks are so important\n\n\n\nIf you used classes in React before, this code should look familiar\n\n\nuseState is a hook in React that allows you to add state to functional components. Prior to the introduction of hooks, the only way to add state to a React component was to use a class component, which required you to write more code and follow a different syntax.\n\n\n\nHooks allow you to use state: modular, reusable and easy to mantain\n\n\n\nHooks allow you to use state and other features in functional components, which can make your code more concise and easier to read. They also allow you to reuse stateful logic across your components, which can make your code more modular and easier to maintain."
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#example-1",
    "href": "reactjs/reactjs-hook-state.html#example-1",
    "title": "ReactJS: useState",
    "section": "3 Example 1",
    "text": "3 Example 1\nIn this example, rahter than changing a value directly, we call a updater function. Calling useState returns a value and a updater function.\n\n\n\nThe updater function changes the value and React updates the display with the recalculated UI from the component\n\n\n\n\n\nThe useState function returns an array with two elements: a value and an updater function"
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#example-2",
    "href": "reactjs/reactjs-hook-state.html#example-2",
    "title": "ReactJS: useState",
    "section": "4 Example 2",
    "text": "4 Example 2\nIn this example, the count state variable holds a number. Clicking the button increments it.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You pressed me {count} times\n    </button>\n  );\n}\n\n\n\n\n\n\nExecuting App.js, calling component Gallery, importing it and using it\n\n\n\n\n\n\nExecuting App.js, calling component Gallery, importing it and using it"
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#example-3",
    "href": "reactjs/reactjs-hook-state.html#example-3",
    "title": "ReactJS: useState",
    "section": "5 Example 3",
    "text": "5 Example 3\nIn this example, what about this event handler? What do you think number will be in the next render?\n\n\nApp.js\n\n<button onClick={() => {\n  setNumber(number + 5);\n  setNumber(n => n + 1);\n}}>\n\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        setNumber(n => n + 1);\n      }}>Increase the number</button>\n    </>\n  )\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render\n\n\n\n\n\n\nNext render\n\n\n\n\nHere’s what this event handler tells React to do:\n\nsetNumber(number + 5): number is 0, so setNumber(0 + 5). React adds replace with 5 to its queue.\nsetNumber(n => n + 1): n => n + 1 is an updater function. React adds that function to its queue.\n\nDuring the next render, React goes through the state queue:\n\n\n\nReact stores 6 as the final result and returns it from useState."
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#example-4",
    "href": "reactjs/reactjs-hook-state.html#example-4",
    "title": "ReactJS: useState",
    "section": "6 Example 4",
    "text": "6 Example 4\nLet’s try one more example. What do you think number will be in the next render?\n\n\nApp.js\n\n<button onClick={() => {\n  setNumber(number + 5);\n  setNumber(n => n + 1);\n  setNumber(42);\n}}>\n\n\n\n\n\n\nNext render\n\n\n\n\n\nReact stores 42 as the final result and returns it from useState."
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#updating-arrays-without-mutation",
    "href": "reactjs/reactjs-hook-state.html#updating-arrays-without-mutation",
    "title": "ReactJS: useState",
    "section": "7 Updating arrays without mutation",
    "text": "7 Updating arrays without mutation\n\n7.1 Example 1\nUpdating arrays without mutation is important in React because it helps to ensure that the state of your application remains predictable and easy to debug. When you mutate an array in place, you change its original value, which can make it difficult to understand what has changed and why.\nIn React, it’s generally recommended to avoid mutating the state directly, and instead to create new copies of the state with the desired changes applied. This ensures that the original state is preserved, and makes it easier to understand how the state of your application is changing over time.\nHere’s an example of how you might update an array without mutation in React using the map function:\n\n\nApp.js\n\nconst [items, setItems] = useState([1, 2, 3]);\n\nconst updateItem = index => {\n  setItems(items.map((item, i) => (i === index ? item * 2 : item)));\n};\n\n\n\nUpdating arrays without mutation can help to ensure that the state of your code remains predictable and easy to understand, which can make it easier to develop and maintain.\nIn this example, the updateItem function takes an index as an argument, and uses the map function to create a new array with the item at the specified index doubled. The setItems function is then called with the new array, which updates the state of the items array without mutating the original value.\n\n\n7.2 Example 2\nAdding to array with useState:\n\nAnd instead of using push(), we will create a new array which contains the existing items and a new item at the end. There are multiple ways to do this, but the easiest one is to use the ... array spread syntax:\n\n\n\nApp.js\n\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={() => {\n        setName('');\n        setArtists([\n          ...artists,\n          { id: nextId++, name: name }\n        ]);\n      }}>Add</button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\n\n\n\n\n\narray using ... spread inital render\n\n\n\n\n\n\narray using ... spread new render\n\n\n\nThe array spread syntax also lets you prepend an item by placing it before the original ...artists:\n\n\nApp.js\n\nsetArtists([\n  { id: nextId++, name: name },\n  ...artists // Put old items at the end\n]);\n\nIn this way, spread can do the job of both push() by adding to the end of an array and unshift() by adding to the beginning of an array.\n\n\n\n\n\n  React JS: hook rules \n\n\n\n  top \n\n\n\n React JS: useReducer"
  },
  {
    "objectID": "reactjs/reactjs-what-components.html",
    "href": "reactjs/reactjs-what-components.html",
    "title": "React JS: Components",
    "section": "",
    "text": "📘 Components\nComponents are one of the core concepts of React. They are the foundation upon which you build user interfaces UI."
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#cop-components-oriented-paradigm",
    "href": "reactjs/reactjs-what-components.html#cop-components-oriented-paradigm",
    "title": "React JS: Components",
    "section": "2 COP: Components-Oriented Paradigm",
    "text": "2 COP: Components-Oriented Paradigm\nCOP, or Components-Oriented Paradigm, is a software design approach that emphasizes the use of reusable, modular components to build complex applications. In this paradigm, an application is typically divided into smaller, independent components that can be easily composed and reused.\n\n\nThe components-oriented paradigm is often associated with modern front-end JavaScript frameworks, such as React, Angular, and Vue.js, which provide tools and libraries for building applications using a component-based approach. However, the principles of COP can be applied to other programming languages and paradigms as well.\nOne of the main benefits of the components-oriented paradigm is that it helps to improve the maintainability and scalability of an application. By encapsulating functionality into discrete, reusable components, it becomes easier to modify and extend the application over time.\nAdditionally, the use of standardized, modular components can make it easier to build larger applications by allowing developers to reuse and compose components rather than building everything from scratch."
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#defining-a-component",
    "href": "reactjs/reactjs-what-components.html#defining-a-component",
    "title": "React JS: Components",
    "section": "3 Defining a component",
    "text": "3 Defining a component\nReact puts interactivity first while still using the same technology: a React component is a JavaScript function that you can sprinkle with markup.\n\n\nprofile.jsx\n\nexport default function Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3Am.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  )\n}\n\n\n\n\n\n\nExecution React component wiht markup image\n\n\n\nExport the component: the export default prefix is a standard JavaScript syntax (not specific to React). It lets you mark the main function in a file so that you can later import it from other files.\nDefine the function: with function Profile() { } you define a JavaScript function with the name Profile.\nAdd markup: the component returns an <img /> tag with src and alt attributes. <img /> is written like HTML, but it is actually JavaScript under the hood!"
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#using-a-component",
    "href": "reactjs/reactjs-what-components.html#using-a-component",
    "title": "React JS: Components",
    "section": "4 Using a component",
    "text": "4 Using a component\nFor example, you can export a Gallery component that uses multiple Profile components:\n\n\nprofile.jsx\n\nfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    />\n  );\n}\n\nexport default function Gallery() {\n  return (\n    <section>\n      <h1>Amazing scientists</h1>\n      <Profile />\n      <Profile />\n      <Profile />\n      <p>Working hard for sciende always pay back!</p>\n      <p>By the way, how are you, Ruben?</p>\n    </section>\n  );\n}\n\n\n\n\n\n\nUsing React component wiht markup image and some text\n\n\n\n\n\n\nUsing React component wiht markup image and some text\n\n\n\n\nThere are two primary ways to export values with JavaScript:\n\ndefault exports\nand named exports.\n\nSo far, our examples have only used default exports. But you can use one or both of them in the same file. A file can have no more than one default export, but it can have as many named exports as you like."
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#writing-a-component",
    "href": "reactjs/reactjs-what-components.html#writing-a-component",
    "title": "React JS: Components",
    "section": "5 Writing a component",
    "text": "5 Writing a component\n\n5.1 Option#1: export default function BookList() {}\nThis option uses the function declaration syntax to define the BookList component and immediately exports it as the default export. This syntax is more familiar to developers who have experience with ES6 modules.\nexport default function BookList() { \n  return ( \n    <div> \n      <h1>Book List</h1>\n        <ul> \n          <li>Book 1</li>\n          <li>Book 2</li>\n          <li>Book 3</li>\n        </ul>\n    </div>\n  ); \n}\n\n\n5.2 Option#2: const BookList = () => {}\nThis option uses the arrow function syntax to define the BookList component as a constant. Arrow functions have a concise syntax and can automatically bind this to the current scope, which can be helpful when working with React components.\nconst BookList = () => {\n   return ( \n    <div> \n      <h1>Book List</h1>\n        <ul> \n          <li>Book 1</li>\n          <li>Book 2</li>\n          <li>Book 3</li>\n        </ul>\n    </div>\n  ); \n}\n\n\n5.3 Option#3: function BookList() {} export default BookList;\nThis option uses a function declaration to define the BookList component and then exports it as the default export on a separate line. This syntax is similar to option 1, but separates the function declaration from the export statement.\nfunction BookList() {\n return ( \n    <div> \n      <h1>Book List</h1>\n        <ul> \n          <li>Book 1</li>\n          <li>Book 2</li>\n          <li>Book 3</li>\n        </ul>\n    </div>\n  ); \n}\nexport default BookList;\nIn terms of behavior, all three options will create a function that can be used as a React component. However, the arrow function syntax in option 2 may provide some additional benefits in terms of performance and readability, especially for smaller components.\n\n\n5.4 export default\nIn JavaScript, export is a keyword used to export functions, objects, or values from one module so that they can be used in another module.\n\nWhen a module exports a function or object using the export keyword, it can be imported in another module using the import keyword.\n\nThe default keyword, when used with the export keyword, allows a module to export only one item as the “default” export.\n\nThis means that when another module imports from this module without specifying a specific import name, it will receive the default exported item.\n\nThe BookList function is being exported as the default export of the module.\nThis means that if another module imports from this module without specifying a specific import name, it will receive the BookList function as the default exported item.\n\n\n\n\n\n  React JS: Create a React project \n\n\n\n  top \n\n\n\n React JS: JSX"
  },
  {
    "objectID": "reactjs/reactjs-what-create.html",
    "href": "reactjs/reactjs-what-create.html",
    "title": "React JS: Create a React project",
    "section": "",
    "text": "Start by including three scripts, the first two let us write React code in our JavaScripts, and the third, Babel, allows us to write JSX syntax and ES6 in older browsers.\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n    <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin>\n    </script>\n    <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n  </head>\n  <body>\n\n    <div id=\"mydiv\"></div>\n\n    <script type=\"text/babel\">\n      function Hello() {\n        return <h1>Hello World!</h1>;\n      }\n\n      ReactDOM.render(<Hello />, document.getElementById('mydiv'))\n    </script>\n\n  </body>\n</html>\n\n\n\nTo create a new React app, you will need to have the following software installed on your computer:\n\nNode.js: This is a JavaScript runtime that is used to execute JavaScript code outside of a web browser. You can download the latest version of Node.js from the official website (https://nodejs.org/) or through a package manager like Homebrew (Mac) or Chocolatey (Windows).\nnpm: This is the package manager for Node.js, which is used to manage the libraries and dependencies that your app uses. npm is included with Node.js, so you don’t need to install it separately.\n\n\n\n\n\n\n\nTip\n\n\n\nnpx is a tool that is included with npm, the package manager for Node.js. It allows you to execute packages that are installed locally or globally in your project’s node_modules directory.\n\n\n\n\n\nWhether you’re using React or another library, Create React App lets you focus on code, not build tools.\nTo create a project called my-app, run this command:\nnpx create-react-app my-app\n\n\n\nCreate project\n\n\n\n\n\nUpdating your build tooling is typically a daunting and time-consuming task. When new versions of Create React App are released, you can upgrade using a single command:\nnpm install react-scripts@latest\n\n\n\n\n\n\nThe easiest way to debug websites built with React is to install the React Developer Tools browser extension.\n\n\nUse React Developer Tools to inspect React components, edit props and state, and identify performance problems.\n\nInstall for Chrome\nInstall for Firefox\nInstall for Edge\n\nFor other browsers (for example, Safari), install the react-devtools npm package:\n# Yarn\nyarn global add react-devtools\n\n# Npm\nnpm install -g react-devtools\n\n\n\nThe React application automatically creates the basic tree-folder, as follows:\n\n\n\nInitial Tree-folder\n\n\n\n.gitignore: this file is the standard file which is used by source control tool git to identify which files and folders are need to be ignored while committing the code. Until and unless this file exists, the create-react-app command will not create a git repo in this folder.\npackage.json: this file contains dependencies and scripts required for the project.\n\nname - points to name of your app.\nversion - refers to the current version that the application is using.\nprivate: true - is a foolproof setting which avoids accidentally publishing of your react app as a public package in npm ecosystem.\ndependencies will contain all required node modules and versions required for the application. By default, 2 dependencies are added which include React and React-Dom that allow using JavaScript. In our demo, we are using React version 16.8.\nScripts specify aliases that can be used to access some React command in a more efficient manner.\n\npackage-lock.json contain exact dependency tree to be installed in /node_modules. It helps while a team is working on private apps to ensure that they are working on the same version of dependencies and sub-dependencies. It also maintains a history of changes done in package.json so, that at any point of time, when required previous changes can be looked back in the package-lock.json file.\nnode_modules - This folder contains all dependencies and sub-dependencies specified in package.json used by React app. It contains more than 800 subfolders, this folder is automatically added in the .gitignore file.\npublic - This folder contains files which don’t require additional processing by webpack. The index.html file is considered as an entry point for the web application. Here, the favicon is a header icon and manifest.xml file contains configuration when your application is used for Android app.\nsrc - This folder is the heart of React application as it contains JavaScript which needs to be processed by webpack. In this folder, there is a main component App.js, its related styles (App.css), test suite (App.test.js). index.js, and its style (index.css); which provide an entry point into the App. Lastly, it contains registerServiceWorker.js which takes care of caching and updating files for the end user. It helps in offline capability and faster page loading after the first visit.\n\n\n\n\nThe folder structure looks like this.\n\n\n\nReactJs Project Structure\n\n\n\nAssets: As the name says, it contains assets of our project. It consists of images and styling files. Here we can store our global styles. We are centralizing the project so we can store the page-based or component-based styles over here. But we can even keep style according to the pages folder or component folder also. But that depends on developer comfortability.\nLayouts: As the name says, it contains layouts available to the whole project like header, footer, etc. We can store the header, footer, or sidebar code here and call it.\nComponents: Components are the building blocks of any react project. This folder consists of a collection of UI components like buttons, modals, inputs, loader, etc., that can be used across various files in the project. Each component should consist of a test file to do a unit test as it will be widely used in the project.\nPages: The files in the pages folder indicate the route of the react application. Each file in this folder contains its route. A page can contain its subfolder. Each page has its state and is usually used to call an async operation. It usually consists of various components grouped.\nMiddleware: This folder consists of middleware that allows for side effects in the application. It is used when we are using redux with it. Here we keep all our custom middleware.\nRoutes: This folder consists of all routes of the application. It consists of private, protected, and all types of routes. Here we can even call our sub-route.\nConfig: This folder consists of a configuration file where we store environment variables in config.js. We will use this file to set up multi-environment configurations in your application.\nServices : This folder will be added if we use redux in your project. Inside it, there are 3 folders named actions, reducers, and constant subfolders to manage states. The actions and reducers will be called in almost all the pages, so create actions, reducers & constants according to pages name.\nUtils: Utils folder consists of some repeatedly used functions that are commonly used in the project. It should contain only common js functions & objects like dropdown options, regex condition, data formatting, etc.\n\n\n\n\nThere there are several steps you can take to make the debugging process easier:\n\nCheck the Console: Open the browser’s console and look for any error messages. Often, errors will be logged in the console, which will give you an idea of where to start debugging. You can learn more about using the browser console to debug JavaScript here: [MDN Web Docs - Console](https://developer.mozilla.org/en-US/docs/Web/API/Console)\nUse React Developer Tools: React Developer Tools is a browser extension that provides a suite of tools for debugging and profiling React components. It allows you to inspect React component hierarchies and track the flow of data between components. You can learn more about using React Developer Tools here: [React Developer Tools](https://github.com/facebook/react-devtools)\nUse Console.log(): Place console.log() statements throughout your code to print out variables and see how they change as the code executes. You can learn more about using console.log() for debugging here: [MDN Web Docs - Debugging JavaScript](https://developer.mozilla.org/en-US/docs/Web/javascript/Reference/Statements/console)\nBreakpoints: Set breakpoints in your code using the browser’s developer tools or an integrated development environment (IDE) like Visual Studio Code. This allows you to pause the execution of your code and step through it line by line, inspecting variables and the state of your components. You can learn more about using breakpoints for debugging here: [Chrome DevTools - Debugging JavaScript](https://developers.google.com/web/tools/chrome-devtools/javascript)\n\n\n\n\n\n\n  React JS: render virtual DOM \n\n\n\n  top \n\n\n\n React JS: Components"
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html",
    "href": "reactjs/reactjs-what-jsx.html",
    "title": "React JS: JSX",
    "section": "",
    "text": "📘 JSX JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it."
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#the-problem",
    "href": "reactjs/reactjs-what-jsx.html#the-problem",
    "title": "React JS: JSX",
    "section": "2 The problem",
    "text": "2 The problem\nJSX: Putting markup into JavaScript\nThe Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript—often in separate files!\nContent was marked up inside HTML while the page’s logic lived separately in JavaScript.\n\nSo, we need a way to put things together."
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#the-solution-react-jsx",
    "href": "reactjs/reactjs-what-jsx.html#the-solution-react-jsx",
    "title": "React JS: JSX",
    "section": "3 The solution: React JSX",
    "text": "3 The solution: React JSX\n\n\ntodolist.jsx\n\nexport default function TodoList() {\n  //\n  // business logic and objects: JavaScript\n  //\n  return (\n    //\n    // Render: html + css\n    //\n  )\n}\n\n\n\n\n\n\nJSX: Putting markup into JavaScript"
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#react-jsx-is-a-optimal-solution-but",
    "href": "reactjs/reactjs-what-jsx.html#react-jsx-is-a-optimal-solution-but",
    "title": "React JS: JSX",
    "section": "4 React JSX is a optimal solution but",
    "text": "4 React JSX is a optimal solution but\n\n\n\nReact is a optimal solution but there is a lot of work to do yet\n\n\nfrom David Ceddia\n\nReact cares exactly zero about styling. Think of it as generating the barebones HTML. React will put elements on the page, but everything after that is the job of CSS: how they appear, what they look like, how they’re positioned, and how centered or uncentered they are.\n“How to center a div in React” is… not a React problem. It’s a CSS problem. You don’t need “react” in your Google query. Once you figure it out, use React to apply the right CSS class name to your components."
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#the-rules-of-jsx",
    "href": "reactjs/reactjs-what-jsx.html#the-rules-of-jsx",
    "title": "React JS: JSX",
    "section": "5 The Rules of JSX",
    "text": "5 The Rules of JSX\n\n\n\n\n\n\nReturn a single root element\n\n\n\nTo return multiple elements from a component, wrap them with a single parent tag.\n\n\n\n\n\n\n\n\nClose all the tags\n\n\n\nJSX requires tags to be explicitly closed: self-closing tags like <img> must become <img />, and wrapping tags like <li>oranges must be written as <li>oranges</li>.\n\n\n\n\n\n\n\n\ncamelCase all most of the things!\n\n\n\nJSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can’t contain dashes or be reserved words like class."
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#the-trick-js-in-jsx-with-curly-braces",
    "href": "reactjs/reactjs-what-jsx.html#the-trick-js-in-jsx-with-curly-braces",
    "title": "React JS: JSX",
    "section": "6 The trick: JS in JSX with Curly Braces",
    "text": "6 The trick: JS in JSX with Curly Braces\nJSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.\n\n\n\n\n\n\nJSX is a special way of writing JavaScript.\n\n\n\nThat means it’s possible to use JavaScript inside it—with curly braces { }.\n\n\n\n\ntodolist.jsx\n\nexport default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    <h1>{name}'s To Do List</h1>\n  );\n}\n\n\n\n\n\n\nThe example below first declares a name for the scientist, name, then embeds it with curly braces inside the\n\n\n\n\n\ntodolist.jsx\n\nexport default function TodoList() {\n  return (\n    <ul style={{\n      backgroundColor: 'black',\n      color: 'pink'\n    }}>\n      <li>Improve the videophone</li>\n      <li>Prepare aeronautics lectures</li>\n      <li>Work on the alcohol-fuelled engine</li>\n    </ul>\n  );\n}\n\n\n\n\n\n\nYou may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases).\n\n\n\n\n\ntodolist.jsx\n\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    <div style={person.theme}>\n      <h1>{person.name}'s Todos</h1>\n      <img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      />\n      <ul>\n        <li>Improve the videophone</li>\n        <li>Prepare aeronautics lectures</li>\n        <li>Work on the alcohol-fuelled engine</li>\n      </ul>\n    </div>\n  );\n}\n\n\n\n\n\n\n\nYou can move several expressions into one object, and reference them in your JSX inside curly braces\n\n\n\n\n\n\n  React JS: Components \n\n\n\n  top \n\n\n\n React JS: props and state"
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html",
    "href": "reactjs/reactjs-what-principles.html",
    "title": "React JS: Introduction",
    "section": "",
    "text": "React logo"
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#introduction",
    "href": "reactjs/reactjs-what-principles.html#introduction",
    "title": "React JS: Introduction",
    "section": "1.1 Introduction",
    "text": "1.1 Introduction\n\n📘 React JS\nReact.js is a JavaScript library used for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React allows developers to create large web applications that use data which can change over time, without reloading the page.\nIt aims to provide a more efficient and elegant way to manipulate the user interface in order to create a more intuitive and smooth user experience.\n\n\n\n“Life is really simple, but we insist on making it complicated.” -Confucius\n\n\nWhy did we build React??\nWe built React to solve one problem: building large applications with data that changes over time.\nSimple and fast, very fast.\nThat it is.\nAnd it is inmutable\n\n\n\n\nReact Code is simple\n\n\n\nMyApp.jsx\n\n\nfunction MyButton() {\n  return (\n    <button>\n      I'm a button\n    </button>\n  );\n}\n\nexport default function MyApp() {\n  return (\n    <div>\n      <h1>Welcome to my app</h1>\n      <MyButton />\n    </div>\n  );\n}\n\n\nReact is not considered a framework, but a JavaScript library for building User Interfaces. It’s considered the view in the MVC pattern.\nIt helps create modular web components that look just like HTML, thanks to JSX. JSX is a JavaScript syntax extension built by Facebook to define a concise and familiar syntax for creating tree structures with attributes.\n\n\n\n“As in a Russian doll, however, the outer layers always contain an inner core.” -Frans de Waal"
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#overview",
    "href": "reactjs/reactjs-what-principles.html#overview",
    "title": "React JS: Introduction",
    "section": "1.2 Overview",
    "text": "1.2 Overview\nSome of the main features of React.js include:\n\nIt is a single-page application (SPA) framework, which means it allows developers to create web applications that load a single HTML page and dynamically update the page in response to user actions without reloading the page. This makes React applications faster and more responsive than traditional web applications.\nComponents: In React, everything is a component. Components are small, reusable pieces of code that can be easily combined to create complex user interfaces.\nVirtual DOM: React uses a virtual DOM (Document Object Model) to improve the performance of components. The virtual DOM is a lightweight in-memory representation of the actual DOM, and it allows React to update only the specific components that have changed, instead of re-rendering the entire page.\nJSX: React uses JSX, which is a syntax extension to JavaScript that allows developers to write HTML-like code that can be compiled into JavaScript. This allows developers to use familiar HTML tags and attributes to build React components, making it easier to write and understand React code.\nState: React components have a built-in state object that stores the local data of a component. The state of a component can be updated in response to user actions or other events, and the updated state will automatically be reflected in the user interface.\nProps: In React, components can receive data from their parent components through props, which are essentially input parameters that allow components to be customized and reused. Props can be used to pass data, functions, or any other type of information to a child component.\nRouting: React Router is a popular library that provides routing capabilities to React applications. It allows developers to define the different routes of the application, and to map each route to a specific component. This makes it possible to create a single-page application with multiple pages and views, without reloading the page."
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#key-concept-hooks",
    "href": "reactjs/reactjs-what-principles.html#key-concept-hooks",
    "title": "React JS: Introduction",
    "section": "1.3 Key-concept: Hooks",
    "text": "1.3 Key-concept: Hooks\nIn React, Hooks are a new feature introduced in React 16.8 that allows developers to use state and other React features without writing a class. They are designed to make it easier to reuse stateful logic between components, and to better manage side effects in function components.\n\n\n\n\n\n\nImportant\n\n\n\n📘 Clear lifecycle\nHooks allow developers to use state and other React features by writing functions, rather than creating class-based components. This makes it possible to use state and other React features without the overhead of managing a class and its lifecycle.\n\n\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\n\nFor example, instead of using a class to define a component, you can use the useState Hook to add state to a function component:\nIn this example, the useState Hook is used to add state to the Example component. The useState function returns a pair of values: the current state, and a function that can be used to update the state. The current state is stored in the count variable, and the function to update the state is stored in the setCount variable.\nHooks are a powerful and flexible tool that can help simplify and improve the way you write React components. They allow you to use state and other React features without the overhead of class-based components, and they make it easier to reuse stateful logic between components."
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#with-jsx-and-hooks-comes-order-in-just-one-document",
    "href": "reactjs/reactjs-what-principles.html#with-jsx-and-hooks-comes-order-in-just-one-document",
    "title": "React JS: Introduction",
    "section": "1.4 With JSX and Hooks comes order in just one document",
    "text": "1.4 With JSX and Hooks comes order in just one document\n\n\n\n\n\n\nImportant\n\n\n\n📘 No need of classes\nHooks are a new feature (and addition in React 16.8) that allows developers to use state and other React features without writing a class.\n\n\n\n📘 Hooks and JSX\nThey are a powerful tool for simplifying and improving the way you write React components, and they can be used to combine the HTML, CSS, business logic, model, and navigation code of a component into a single, cohesive unit.\n\n\nHere is an example of a React component that uses Hooks to combine HTML, CSS, business logic, and navigation code in a single file:\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nfunction ExampleComponent(props) {\n  const { data } = props;\n  const [count, setCount] = useState(0);\n\n  return (\n    <div className=\"example-component\">\n      <h1>Example Component</h1>\n      <p>{data.description}</p>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n      <Link to=\"/\">Back to Home</Link>\n    </div>\n  );\n}\n\nexport default ExampleComponent;\n\n\nIn this example, the useState Hook is used to add state to the ExampleComponent function. The useState function returns a pair of values: the current state, and a function that can be used to update the state.\nThe current state is stored in the count variable, and the function to update the state is stored in the setCount variable.\nThese variables are used in the JSX code of the component to render the current state and to update the state in response to user actions. This allows the different types of code to be combined into a single, cohesive unit using Hooks."
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#history",
    "href": "reactjs/reactjs-what-principles.html#history",
    "title": "React JS: Introduction",
    "section": "1.5 History",
    "text": "1.5 History\n\nReact.JS was first used in 2011 for Facebook’s Newsfeed feature.\nFacebook Software Engineer, Jordan Walke, created it.\nInitial Release to the Public (V0.3.0) was in July 2013.\nCurrent version of React.JS is V18.2.0 (2023).\nCurrent version of create-react-app link is v5.0.1 (2022).\ncreate-react-app includes built tools such as webpack, Babel, and ESLint: link\nIf you’re learning React or creating a new single-page app, use Create React App.\nIf you’re building a server-rendered website with Node.js, try Next.js.\nIf you’re building a static content-oriented website, try Gatsby.\nIf you’re building a component library or integrating with an existing codebase, try More Flexible Toolchains."
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#quick-start",
    "href": "reactjs/reactjs-what-principles.html#quick-start",
    "title": "React JS: Introduction",
    "section": "1.6 Quick Start",
    "text": "1.6 Quick Start\n\nOverview - Creating and nesting components - Writing markup with JSX - Adding styles - Displaying data - Conditional rendering Rendering lists - Responding to events - Updating the screen - Using Hooks - Sharing data between components - Next Steps\n\nThis page will give you an introduction to the 80% of React concepts that you will use on a daily basis.\n\n\n\n\n\n  Spring Boot Resources \n\n\n\n  top \n\n\n\n React JS: render virtual DOM"
  },
  {
    "objectID": "reactjs/reactjs-what-props.html",
    "href": "reactjs/reactjs-what-props.html",
    "title": "React JS: props and state",
    "section": "",
    "text": "📘 Props\nReact components use props (props stands for properties) to communicate with each other.\nEvery parent component can pass some information to its child components by giving them props.\nProps might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.\nIn React JS, data flows in one direction, from Parent to Child. This helps components to be simple and predictable."
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#overview",
    "href": "reactjs/reactjs-what-props.html#overview",
    "title": "React JS: props and state",
    "section": "1 Overview",
    "text": "1 Overview\nIn React.js, “props” (short for “properties”) are used to pass data from one component to another. Props are passed as an object (which is similar to a JSON object) and contain key-value pairs of data:\n\nJSON is a lightweight data interchange format that is easy to read and write for both humans and machines.\nprops is a reserved keyword that refers to an object containing all the properties (or props) passed to a component.\n\nFor example, let’s say we have a component called MyComponent that receives an object named person as a prop. This person object might look like this:\nconst person = {\n  name: 'John',\n  age: 30,\n  address: {\n    street: '123 Main St',\n    city: 'Anytown',\n    state: 'CA',\n    zip: '12345'\n  }\n};\nIn this case, the person object contains some key-value pairs and another object. We can then pass this person object as a prop to our MyComponent component like this:\n<MyComponent person={person} />\nInside MyComponent, we can access the person prop using the props object like this:\nfunction MyComponent(props) {\n  console.log(props.person.name); // 'John'\n  console.log(props.person.age); // 30\n  console.log(props.person.address.street); // '123 Main St'\n  // ...\n}\n\n1.1 Example1\nconst car = {\n  make: 'Toyota',\n  model: 'Corolla',\n  year: 2022,\n  color: 'blue'\n};\n\nconst person = {\n  name: 'John',\n  age: 30,\n  address: {\n    street: '123 Main St',\n    city: 'Anytown',\n    state: 'CA',\n    zip: '12345'\n  }\n};\n\n<MyComponent person={person} car={car} />\n\nfunction MyComponent(props) {\n  console.log(props.person.name); // 'John'\n  console.log(props.person.age); // 30\n  console.log(props.person.address.street); // '123 Main St'\n\n  console.log(props.car.make); // 'Toyota'\n  console.log(props.car.model); // 'Corolla'\n  console.log(props.car.year); // 2022\n  console.log(props.car.color); // 'blue'\n  // ...\n}\n\n\n1.2 Example2\nUse the same syntax as HTML attributes to send props into a component:\n\n\nprofile.jsx\n\nfunction Avatar({ person, size }) {\n  // person and size are available here\n}\n\n\n\nlin.jsx\n\nexport default function Lin() {\n  return (\n    <Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    />\n  );\n}\n\n\n\ncarla.jsx\n\nexport default function Carla() {\n  return (\n    <Avatar\n      person={{ name: 'Carla Lan', imageId: 'KIU3QH1' }}\n      size={60}\n    />\n  );\n}"
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#pure-components",
    "href": "reactjs/reactjs-what-props.html#pure-components",
    "title": "React JS: props and state",
    "section": "2 Pure Components",
    "text": "2 Pure Components\n\n2.1 Stateful/Stateless Components\n\nSateful Components: Functions that internally modify the underlying data (props).\n\n\n\nprofile.jsx\n\nfunction Hello({ name }) {\n  //...\n  return (\n    <>\n     <h1>Hello {name + ' - ' + (new Date()).toLocaleString()}!!!</h1>;\n    </>\n  )\n}\n\nexport default function Hello() {\n  //...\n  return (\n   <Hello name=\"World\" />\n  )\n}\n\n\nStateless Components: Pure components that respond to the underlying data received (props), without modifying it.\n\nA pure function is a function where the return value is only determined by its input values, without observable side effects.\n\n\nHello.jsx\n\nfunction Hello({ name }) {\n  //...\n  return (\n    <>\n     <h1>Hello {name}!!!</h1>;\n    </>\n  )\n}\n\nexport default function Hello() {\n  //...\n  return (\n   <Hello name=\"World\" />\n  )\n}\n\n\n\n2.2 Keep Components Pure\n\n\n\n\n\n\nImportant\n\n\n\nWriting pure functions takes a bit of practice, but it unlocks the power of React’s paradigm\n\n\nBy strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. To get these benefits, though, there are a few rules you must follow.\n\nRendering can happen at any time, so components should not depend on each others’ rendering sequence.\nYou should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen, “set” state instead of mutating preexisting objects.\nStrive to express your component’s logic in the JSX you return. When you need to “change things”, you’ll usually want to do it in an event handler. As a last resort, you can useEffect.\n\nReact’s rendering process must always be pure. Components should only return their JSX, and not change any objects or variables that existed before rendering—that would make them impure!\nHere is a component that breaks this rule:\n\n\nHello.jsx\n\nlet guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return <h2>Tea cup for guest #{guest}</h2>;\n}\n\nexport default function TeaSet() {\n  return (\n    <>\n      <Cup />\n      <Cup />\n      <Cup />\n    </>\n  );\n}\n\n\n\n\n\n\nrender\n\n\nDetecting impure calculations with StrictMode\n\n\n\n\n\n\nRendering must always be a pure calculation\n\n\n\n\nSame inputs, same output.\nIt minds its own business.\n\nOtherwise, you can encounter confusing bugs and unpredictable behavior as your codebase grows in complexity.\nWhen developing in Strict Mode, React calls each component’s function twice, which can help surface mistakes caused by impure functions."
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#what-is-state-and-rendering-updaterender-cycle",
    "href": "reactjs/reactjs-what-props.html#what-is-state-and-rendering-updaterender-cycle",
    "title": "React JS: props and state",
    "section": "3 What is state and rendering: update/render cycle",
    "text": "3 What is state and rendering: update/render cycle\n\n\n\nReact render cycle: trigger-render-paint by @_georgemoller\n\n\nState variables might look like regular JavaScript variables that you can read and write to.\n\nHowever, state behaves more like a snapshot.\n\nSetting it does not change the state variable you already have, but instead triggers a re-render that will print a state variable copy with the new value.\n\n\n\n\n\n\nImportant\n\n\n\nState can hold any kind of JavaScript value, including objects.\nBut you shouldn’t change objects that you hold in the React state directly.\nInstead, when you want to update an object, you need to create a new one (or make a copy of an existing one), and then set the state to use that copy.\n\n\nHow it works in combination with spread opearator\nAnd what is a hook: useState\n\nTreat state as read-only: in other words, you should treat any JavaScript object that you put into state as read-only.\n\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <button onClick={() => {\n        setNumber(number++);\n      }}>+1</button>\n\n      <h1>{number}</h1>\n    </>\n  )\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render: setting-update/render cycle\n\n\n\n\n\n\nNext render\n\n\n\n\n\n3.1 update/render behaviour\nAny screen update in a React app happens in three steps:\n\nTrigger\nRender\nPaint-Commit\n\n\n\nYou can use Strict Mode to find mistakes in your components React does not touch the DOM if the rendering result is the same as last time\nAfter rendering (calling) your components, React will modify the DOM.\n\nReact only changes the DOM nodes if there’s a difference between renders.\n\nFor example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the <input>, updating its value, but the text doesn’t disappear when the component re-renders:\nexport default function Clock({ time }) {\n  return (\n    <>\n      <h1>{time}</h1>\n      <input />\n    </>\n  );\n}\n\n\n\n\n\nrender"
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#so-is-react-immutable",
    "href": "reactjs/reactjs-what-props.html#so-is-react-immutable",
    "title": "React JS: props and state",
    "section": "4 So, Is React immutable?",
    "text": "4 So, Is React immutable?\nThe term immutable refers to the idea that the state of a component should not be changed directly. Instead, when the state of a component needs to be updated, a new copy of the state should be created with the desired changes applied.\nThis approach to state management can help to ensure that the state of a React application is predictable and easy to understand, as it makes it clear how the state is changing over time.\nIt can also make it easier to debug issues in your application, as you can more easily trace the history of the state and see how it has changed.\n\n4.1 And then, what is a mutation?\nYou can store any kind of JavaScript value in state.\n\n\nHello.jsx\n\nconst [x, setX] = useState(0);\n\nSo far you’ve been working with numbers, strings, and booleans. These kinds of JavaScript values are immutable, meaning unchangeable or read-only. You can trigger a re-render to replace a value:\n\n\nHello.jsx\n\nsetX(5);\n\nThe x state changed from 0 to 5, but the number 0 itself did not change. It’s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.\nNow consider an object in state:\n\n\nHello.jsx\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nTechnically, it is possible to change the contents of the object itself. This is called a mutation:\n\n\nHello.jsx\n\nposition.x = 5;\n\nHowever, although objects in React state are technically mutable, you should treat them as if they were immutable—like numbers, booleans, and strings. Instead of mutating them, you should always replace them."
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#examples",
    "href": "reactjs/reactjs-what-props.html#examples",
    "title": "React JS: props and state",
    "section": "5 Examples",
    "text": "5 Examples\n\n5.1 Example 1: setting state only changes it for the next render\nIn this example, you might expect that clicking the +3 button would increment the counter three times because it calls setNumber(number + 1) three times.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 1);\n        setNumber(number + 1);\n        setNumber(number + 1);\n      }}>+3</button>\n    </>\n  )\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render\n\n\n\n\n\n\n3 Next render\n\n\n\n\n\n\n\n\n\n\nNumber is a state variable, not a regular variable\n\n\n\nSetting state only changes it for the next render. During the first render, number was 0.\nAnd this is like this because number is … a state.\nSo, during execution lines #10, #11 and #12, number value is …0!\n\n\nThis is why, in that render’s onClick handler, the value of number is still 0 even after setNumber(number + 1) was called .. three times!!!\n\n\n5.2 Example 2: State over time\nState over time, step by step how setting and render do not happen at same moment.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(number + 5);\n        alert(number);\n      }}>+5</button>\n    </>\n  )\n}\n\n\n\n\n\n\nInitial render, number state is 0\n\n\n\n\n\n\nsetting number state to 5, but first React will execute line #11, alert, and number state still is 0\n\n\n\n\n\n\nNext render, number state now is now 5\n\n\n\n\n\nAlert is helping us to understand why setting and render are two different moments\n\nSetting number state to 5, but first React will execute line #11, alert, and number state still is 0\n\n\n5.3 Example 3: email\nHere is an example of how that makes your event handlers less prone to timing mistakes. Below is a form that sends a message with a five-second delay. Imagine this scenario:\n\nYou press the Send button, sending Hello to Alice.\nBefore the five-second delay ends, you change the value of the To field to Bob.\n\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [to, setTo] = useState('Alice');\n  const [message, setMessage] = useState('Hello');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setTimeout(() => {\n      alert(`You said ${message} to ${to}`);\n    }, 5000);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        To:{' '}\n        <select\n          value={to}\n          onChange={e => setTo(e.target.value)}>\n          <option value=\"Alice\">Alice</option>\n          <option value=\"Bob\">Bob</option>\n        </select>\n      </label>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e => setMessage(e.target.value)}\n      />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render\n\n\n\nReact keeps the state values fixed within one render’s event handlers.\nYou don’t need to worry whether the state has changed while the code is running.\n\n\n5.4 Example 4: state updater function\nIt is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the next state value like setNumber(number + 1), you can pass a function that calculates the next state based on the previous one in the queue, like setNumber(n => n + 1).\nIt is a way to tell React to do something with the state value instead of just replacing it.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button onClick={() => {\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n        setNumber(n => n + 1);\n      }}>+3</button>\n    </>\n  )\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render\n\n\n\n\n\n\n\n\n  React JS: JSX \n\n\n\n  top \n\n\n\n React JS ES6: arrow functions"
  },
  {
    "objectID": "reactjs/reactjs-what-render-dom.html",
    "href": "reactjs/reactjs-what-render-dom.html",
    "title": "React JS: render virtual DOM",
    "section": "",
    "text": "📘 Virtual DOM\nThe virtual DOM VDOM is a programming concept where an ideal, or virtual, representation of a UI is kept in memory and synced with the real DOM by a library such as ReactDOM.\nThis process is called reconciliation.\n\n\nInstead of manipulating the browser’s DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the real browser DOM.\nThis approach enables the declarative API of React: you tell React what state you want the UI to be in, and it makes sure the DOM matches that state\nThis abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app."
  },
  {
    "objectID": "reactjs/reactjs-what-render-dom.html#how-virtual-dom-and-diffing-works-in-react",
    "href": "reactjs/reactjs-what-render-dom.html#how-virtual-dom-and-diffing-works-in-react",
    "title": "React JS: render virtual DOM",
    "section": "2 How Virtual-DOM and diffing works in React",
    "text": "2 How Virtual-DOM and diffing works in React\n\n\n\nThe virtual DOM VDOM is a lightweight in-memory representation of the actual DOM\n\n\nHow Virtual-DOM and diffing works in React\n\n\nWhen the state of a React component changes, the component re-renders and creates a new VDOM tree. React then compares this new tree to the previous VDOM tree, using a process called “diffing.”\nIn React, the virtual DOM VDOM is a lightweight in-memory representation of the actual DOM. It is a tree-like structure with a hierarchy of node objects that corresponds to the structure of the DOM. Each node in the VDOM tree represents an element in the actual DOM, and has properties that correspond to the attributes and content of that element.\n\n\n\n\n\n\nNote\n\n\n\nDuring the diffing process, React compares the two VDOM trees, node by node, and determines which nodes have changed, added, or removed. React then updates the actual DOM with the minimum number of changes necessary to reflect the changes in the VDOM.\n\n\nThis process helps to improve the performance of React applications, because it reduces the number of DOM manipulations that are required to keep the DOM up-to-date with the component’s state.\nThe diffing algorithm used by React is based on a concept called reconciliation. During reconciliation, React compares the VDOM nodes and their children, and determines the minimum number of steps that are needed to transform the old tree into the new tree.\nThis process helps to minimize the number of DOM manipulations that are required, and makes React updates faster and more efficient."
  },
  {
    "objectID": "reactjs/resources.html",
    "href": "reactjs/resources.html",
    "title": "ReactJS Resources",
    "section": "",
    "text": "MarkUp Resources"
  },
  {
    "objectID": "reactjs/resources.html#webs",
    "href": "reactjs/resources.html#webs",
    "title": "ReactJS Resources",
    "section": "1 Webs",
    "text": "1 Webs\n\nAwesome React\nReact From The Inside Out\nReact Docs BETA Official\nReact Tutorial w3 schools\nReact Hooks in Action, With Suspense and Concurrent Mode\n\n\n\n\n\n\n  React JS: Lab#RE05-1 \n\n\n\n  top \n\n\n\n SCRUM Agile Methodology"
  },
  {
    "objectID": "reactjs/rjslab1.html",
    "href": "reactjs/rjslab1.html",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "",
    "text": "📘 React JS Lab#RE01-1: API Rest and Axios\nIn this lab, we will be using:\n\nthe Open Library API, which is a RESTful API, to create a React app that will display a list of books.\nWe will use the Axios library to make HTTP requests to the API and retrieve the data in JSON format.\nWe will display the book data in a table with four fields for each book: title, year, ISBN, pages, and author.\nWe will also add a loading state to show the user that the app is retrieving data from the API.\n\nThe lab will demonstrate how to use a RESTful API with React to build a functional web application."
  },
  {
    "objectID": "reactjs/rjslab1.html#install-nodejs-npm",
    "href": "reactjs/rjslab1.html#install-nodejs-npm",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "1 Install nodejs & npm",
    "text": "1 Install nodejs & npm\nReferences:\n\nnodejs\nnpm\nNode Version Manager\n\n\n1.1 from repo\n\n\n\nsudo apt-get install nodejs\n\n\n\n\n\nsudo apt-get install npm\n\n\n\n\n1.2 update/last version\n\n1.2.1 download\n\n\n\ninstall nodejs from nodejs\n\n\n\n\n1.2.2 terminal\nOften the installed Node.js version from the repositories will be outdated. If you need to upgrade Node.js to the latest version you can use module n.\nThe module n will take care for the upgrade of Node.js when it’s installed from PPA.\nInstall module n by:\n\n\nThe command \"npm install n -g\" is used to install the \"n\" package globally on a system.\nThe \"n\" package is a node version manager, which allows you to easily switch between different versions of Node.js on your system. With this package, you can install multiple versions of Node.js on your system and easily switch between them as needed.\nThe \"-g\" flag indicates that the package should be installed globally, which means that it will be available to all users on the system, and not just the current user.\nnpm install n -g\nThen you can install the stable Node.js by:\nn stable\nor the latest:\nn latest\n\n\n\n1.3 Node Version Manager\n“n” and “nvm” are both popular Node.js version managers, but they differ in some key ways.\n\n“n” is a simple, lightweight Node.js version manager that is designed to be easy to use and install. It has a small footprint and allows you to quickly switch between different versions of Node.js using a command-line interface. “n” is also designed to be compatible with other package managers like npm, so you can easily install and manage Node.js modules alongside different versions of Node.js.\n\n\nIn contrast, “nvm” (Node Version Manager) is a more complex and feature-rich version manager. It allows you to manage multiple versions of Node.js, as well as install different versions of npm and use them alongside each Node.js version. It also has more advanced features, such as the ability to specify default Node.js versions and aliases for specific versions.\n\nnvm allows you to quickly install and use different versions of node via the command line.\nNode Version Manager"
  },
  {
    "objectID": "reactjs/rjslab1.html#api-rest",
    "href": "reactjs/rjslab1.html#api-rest",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "2 API Rest",
    "text": "2 API Rest\n\n\n\nREST (Representational State Transfer) - Open Library API is a RESTful API\n\n\n\n\nAn API (Application Programming Interface) is a set of protocols, routines, and tools that allow different software applications to communicate with each other. An API acts as a messenger that takes a request from one application and returns a response back to the requesting application.\nREST (Representational State Transfer) is a software architectural style for building web services. It is based on HTTP (Hypertext Transfer Protocol) and is commonly used for creating APIs. A RESTful API allows different software applications to communicate with each other by using HTTP methods like GET, POST, PUT, and DELETE to access and manipulate data.\n\n\nAn Open API is an API that is publicly available and can be used by developers to build software applications. An Open API typically includes documentation and developer tools to help developers understand how to use the API.\nThe Open Library API is a RESTful API that provides access to the data stored in the Open Library project. The Open Library project aims to create a web page for every book ever published. The API allows developers to retrieve information about books, authors, subjects, and more.\nThe two Open Library API endpoints we are going to use are:\n\nOpen Library Books This endpoint provides documentation for the Open Library Books API. It includes information on how to use the API to search for books, retrieve book details, and access other book-related information.\nOpen Library Books: get 100 books This endpoint is used to retrieve a list of up to 100 books from the Open Library API. The q=* parameter is used to search for all books, and the limit=100 parameter limits the results to 100 books. The response data is in JSON format and includes information like the book title, author, publication date, and more."
  },
  {
    "objectID": "reactjs/rjslab1.html#create-app",
    "href": "reactjs/rjslab1.html#create-app",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "3 Create app",
    "text": "3 Create app\nFirst, let’s create a new React app using Create React App by running the following command in your terminal:\n\n\nnpx.bash\n\nnpx create-react-app books\n\nto create a React App named books, or\nnpx create-react-app hola\nto create a React App named hola.\n\n\n\nnpx create-react-app books\n\n\n\n\n\ntree-folder project\n\n\nOnce the app is created, navigate into the project folder and install Axios, a popular library for making HTTP requests:\ncd books\nnpm install axios\nNow, let’s create a new component called BookList that will fetch and display the list of books:\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst BookList = () => {\n  const [books, setBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchBooks = async () => {\n      \n        const response = await axios.get(\n          'https://openlibrary.org/search.json?q=*&limit=100'\n        );\n        const booksData = response.data.docs;\n        setBooks(booksData);\n        setIsLoading(false);\n    \n    };\n    fetchBooks();\n  }, []);\n\n  return (\n    <>\n    <h1>Books</h1>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <ul>\n          {books.map((book) => (\n            <li key={book.key}>\n              <strong>Title:</strong> {book.title} <br />\n              <strong>Year:</strong> {book.publish_year} <br />\n              <strong>ISBN:</strong> {book.isbn[0]} <br />\n              <strong>Pages:</strong> {book.number_of_pages} <br />\n              <strong>Author:</strong> {book.author_name}\n              </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default BookList;\nNow, let’s add the BookList component to our App component:\nimport React from \"react\";\nimport BookList from \"./BookList\";\n\nfunction App() {\n  return (\n    <>\n      <BookList />\n    </>\n  );\n}\n\nexport default App;\nFinally, let’s start the development server and see the list of books in our browser:\nnpm start\nOpen yo browser on http://localhost:3000/ or http://localhost:3001/ if 3000 is occupied.\n\n\n\nrender localhost:3001: loading…\n\n\n\n\n\nrender localhost:3001: load books"
  },
  {
    "objectID": "reactjs/rjslab1.html#handle-error",
    "href": "reactjs/rjslab1.html#handle-error",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "4 handle error",
    "text": "4 handle error\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst BookList = () => {\n  const [books, setBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        const response = await axios.get(\n          'https://openlibrary.org/search.json?q=*&limit=100'\n        );\n        const booksData = response.data.docs;\n        setBooks(booksData);\n        setIsLoading(false);\n      } catch (error) {\n        setIsError(true);\n        setIsLoading(false);\n      }\n    };\n    fetchBooks();\n  }, []);\n\n  return (\n    <>\n      <h1>Books</h1>\n      {isLoading && !isError && <p>Loading...</p>}\n      {!isLoading && isError && <p>Error: Could not fetch books</p>}\n      {!isLoading && !isError && (\n        <ul>\n          {books.map((book) => (\n            <li key={book.key}>\n              <strong>Title:</strong> {book.title} <br />\n              <strong>Year:</strong> {book.publish_year} <br />\n              <strong>ISBN:</strong> {book.isbn[0]} <br />\n              <strong>Pages:</strong> {book.number_of_pages} <br />\n              <strong>Author:</strong> {book.author_name}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default BookList;\n\n\n\n\n\n  React JS App: styling \n\n\n\n  top \n\n\n\n React JS: Lab#RE02-1"
  },
  {
    "objectID": "reactjs/rjslab2.html",
    "href": "reactjs/rjslab2.html",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "",
    "text": "📘 React JS Lab#RE02-1: Router & Hooks\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications.\nWe will use the Axios library to make HTTP requests to the API and retrieve the data in JSON format.\nhooks: useState, useEffect, useReducer.\n\nThe lab will demonstrate how to use a react-router-dom with React to build a functional web application.\nReference: codesandbox React Project to-do-11"
  },
  {
    "objectID": "reactjs/rjslab2.html#install-react-router-dom",
    "href": "reactjs/rjslab2.html#install-react-router-dom",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "1 Install react-router-dom",
    "text": "1 Install react-router-dom\nFrom: npm pacakge and react router\nnpm i react-router-dom\n\nReact Router enables “client side routing”.\n\nIn traditional websites, the browser requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server. When the user clicks a link, it starts the process all over again for a new page.\nClient side routing allows your app to update the URL from a link click without making another request for another document from the server.\nInstead, your app can immediately render some new UI and make data requests with fetch to update the page with new information.\nMain Concepts\n\n\n\n\n\n\nSPA vs MultiPage\n\n\n\nA Single Page Application (SPA) is a web application that loads a single HTML page and dynamically updates the content as the user interacts with the application. The user interface is designed to provide a seamless experience, without the need for page refreshes.\nIn contrast, a Multi-Page Application (MPA) consists of multiple pages, each with its own HTML file, that are loaded separately when the user navigates to a different page. Each page typically has its own styles and scripts, which can result in longer load times and a less seamless user experience compared to SPAs."
  },
  {
    "objectID": "reactjs/rjslab2.html#tree-folder-routes",
    "href": "reactjs/rjslab2.html#tree-folder-routes",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "2 Tree-folder & routes",
    "text": "2 Tree-folder & routes\n\n\n\n\n\nWe use React Router DOM library to create a web application with multiple pages.\nThe import statement at the top imports several components from the React Router DOMlibrary, including BrowserRouter, Routes, Route, and Link.\n\nThese components are used to define the routes and navigation for the application.\n\n\nThe Layout, Home, People, Contact, and NoPage components are defined in separate files and imported at the top of the code.\n\n\n\nThe App component is the main component of the application and is exported as the default component. This component returns JSX, which is a syntax extension to JavaScript used to describe how the user interface should look like.\nThe <BrowserRouter> component wraps the <Routes> component, indicating that this is the root of the application’s routing system.\nWithin the <Routes> component, there is a single <Route> component that has a path attribute set to “/”. This means that any URL that matches the root of the application will render this component.\nThe <Route> component with the path attribute set to “/” has four nested <Route> components inside it, each with a different path attribute and element attribute that points to the component that should be rendered when the corresponding URL is accessed.\n\nThe first nested <Route> component has an index attribute, which means it will be rendered when the root URL is accessed. This component renders the Home component.\nThe second nested <Route> component has a path attribute set to “/people”, which means it will be rendered when the URL ends with “/people”. This component renders the People component.\nThe third nested <Route> component has a path attribute set to “/contact”, which means it will be rendered when the URL ends with “/contact”. This component renders the Contact component.\nThe fourth and final nested <Route> component has a path attribute set to “*” which means it will be rendered when none of the other routes are matched. This component renders the NoPage component, indicating that the page the user is looking for cannot be found.\n\nRoute:\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Layout from \"./route/Layout.jsx\";\nimport Home from \"./pages/home/Home.jsx\";\nimport People from \"./pages/people/People.jsx\";\nimport Contact from \"./pages/contact/Contact.jsx\";\nimport NoPage from \"./route/NoPage\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<Home />} />\n          <Route path=\"people\" element={<People />} />\n          <Route path=\"contact\" element={<Contact />} />\n          <Route path=\"*\" element={<NoPage />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\nLayout, in this particular case we stack all components:\nimport { Outlet, Link } from \"react-router-dom\";\nimport React from \"react\";\nimport Footer from \"./Footer\";\n\nexport default function Layout() {\n  return (\n    <>\n      <nav>\n        <Link to=\"/\">Home</Link>\n        <span>|</span>\n        <Link to=\"/people\">People</Link>\n        <span>|</span>\n        <Link to=\"/contact\">Contact</Link>\n        <span>|</span>\n      </nav>\n      <Outlet />\n      <Footer />\n    </>\n  );\n}"
  },
  {
    "objectID": "reactjs/rjslab2.html#usereducer-person-profile-form",
    "href": "reactjs/rjslab2.html#usereducer-person-profile-form",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "3 useReducer person profile form",
    "text": "3 useReducer person profile form\nReference:\n\ncodesandbox with handlers functions\ncodesandbox dispatcher onChange, onClick\nReact reference manual: useReducer\n\n\n3.1 Create route\nTo add a PersonForm or Form component to a new route:\n\nfirst import the PersonForm component.\nThen, add a new Route element under the Layout Route element with a path of “person-form” and an element prop with the PersonForm component.\nFinally, update the Layout component to render a Link component to the new route.\n\n\n\n3.2 reducer\nThis new feature on Hola5 defines a React component called “Form” that allows users to modify and display a person’s profile information. It uses the useReducer hook to manage the component’s state, which is initialized with an object that contains the person’s name, surname, and age.\n{   \n  name: \"Taylor\",\n  surname: \"Feels\",\n  age: 42\n}\n\nThe “reducer” function defines how state should be updated based on different types of actions dispatched by the component. The actions include incrementing or decrementing the person’s age and changing their name or surname.\n\n\n\n\nBasic structure component\n\n\nThe component’s state is initialized with an object (1)\nThe component renders a form with input fields for the person’s name and surname and buttons to increment or decrement their age. It also displays the current values of the person’s name, surname, and age.\nWhen the user interacts with the form elements (5), the component dispatches (3) the appropriate action to the reducer function (4), which updates the state and causes the component to re-render with the updated values (5).\nReducer:\nfunction reducer(state, action) {\n\n  switch (action.type) {\n\n    case \"incremented_age\": {\n      return {\n        name: state.name,\n        surname: state.surname,\n        age: state.age + 1\n      };\n    }\n    case \"decremented_age\": {\n      return {\n        name: state.name,\n        surname: state.initialsurname,\n        age: state.age - 1\n      };\n    }\n    case \"changed_name\": {\n      return {\n        name: action.nextName,\n        surname: state.surname,\n        age: state.age\n      };\n    }\n    case \"changed_surname\": {\n      return {\n        name: state.name,\n        surname: action.nextSurName,\n        age: state.age\n      };\n    }\n\n    default: {\n      throw Error(\"Unknown action: \" + action.type);\n    }\n  }\n}\n\n\n\n\n\nrender reducer\n\n\nWith or without handlers functions? Best without extra-functions but be careful with recursion, use arrow functions:\n<button onClick={() => dispatch({ type: \"incremented_age\" })}>\n\n\nWhy does onClick={x()} causes “too many re-renders” error in React?\n\n\n\nrecursion\n\n\nexport default function Form() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <>\n      <h1> Person Profile form</h1>\n      <hr /><br />\n      <h3> Modify data</h3>\n\n      <label>Name</label>\n      <input\n        value={state.name}\n        onChange={(e) =>\n          dispatch({\n            type: \"changed_name\",\n            nextName: e.target.value\n          })\n        }\n      />\n\n      <label>Surame</label>\n      <input\n        value={state.surname}\n        onChange={(e) =>\n          dispatch({\n            type: \"changed_surname\",\n            nextSurName: e.target.value\n          })\n        }\n      />\n\n      <button onClick={() => dispatch({ type: \"incremented_age\" })}>\n        Increment age\n      </button>\n\n      <button onClick={() => dispatch({ type: \"decremented_age\" })}>\n        Decrement age\n      </button>\n      <br /> <br /> <br />\n\n      <h3>Person Profile</h3>\n      <p><strong>Name:</strong> {state.name}</p>\n      <p><strong>Surname:</strong> {state.surname}</p>\n      <p><strong>Age:</strong> {state.age}</p>\n    </>\n  );\n}\nWith handlers, perhaps a more verboise option:\nexport default function Form() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function handleButtonClickIncrement() {\n    dispatch({ type: \"incremented_age\" });\n  }\n\n  function handleButtonClickDecrement() {\n    dispatch({ type: \"decremented_age\" });\n  }\n\n  function handleInputChangeName(e) {\n    dispatch({\n      type: \"changed_name\",\n      nextName: e.target.value\n    });\n  }\n\n  function handleInputChangeSurName(e) {\n    dispatch({\n      type: \"changed_surname\",\n      nextSurName: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <h1> Person Profile form</h1>\n      <hr />\n      <br />\n      <h3> Modify data</h3>\n\n      <label>Name</label>{\" \"}\n      <input value={state.name} \n      onChange={handleInputChangeName} />\n\n      <label> Surame </label>\n      <input value={state.surname} \n      onChange={handleInputChangeSurName} />\n\n      <button onClick={handleButtonClickIncrement}>\n      Increment age</button>\n\n      <button onClick={handleButtonClickDecrement}>\n      Decrement age</button>\n      \n      <br /> <br /> <br />\n      <h3>Person Profile</h3>\n      <p>\n        <strong>Name:</strong> {state.name}\n      </p>\n      <p>\n        <strong>Surname:</strong> {state.surname}\n      </p>\n      <p>\n        <strong>Age:</strong> {state.age}\n      </p>\n    </>\n  );\n}"
  },
  {
    "objectID": "reactjs/rjslab2.html#usereducer-useeffect-useref-clock",
    "href": "reactjs/rjslab2.html#usereducer-useeffect-useref-clock",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "4 useReducer, useEffect, useRef clock",
    "text": "4 useReducer, useEffect, useRef clock\nReference:\n\ncodesandbox\nReact reference manual: useEffect\nReact reference manual: useRef\n\nThis component creates a simple stopwatch with three buttons: Start, Stop, and Reset.\n\n\n\nrender clock\n\n\nThe state of the stopwatch is managed using the useReducer hook, which takes in a reducer function and an initial state.\nThe reducer function is responsible for updating the state based on actions dispatched by the buttons.\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"start\":\n      return { ...state, isRunning: true };\n    case \"stop\":\n      return { ...state, isRunning: false };\n    case \"reset\":\n      return { isRunning: false, time: 0 };\n    case \"tick\":\n      return { ...state, time: state.time + 1 };\n    default:\n      throw new Error();\n  }\n}\n\n\nThe spread operator ... allows you to expand an iterable object (like an array or an object) into individual elements or properties: here is used to copy all the properties of the state object and then override the isRunning property with the value true.\nThe initial state includes two properties, isRunning and time:\nconst initialState = {\n  isRunning: false,\n  time: 0\n};\nThe useEffect hook is used to start and stop the stopwatch. When the isRunning state is true, a timer is started using setInterval that dispatches a tick action every second. When isRunning state is false, the timer is cleared using clearInterval.\nuseEffect(() => {\n\n    if (!state.isRunning) {\n      return;\n    }\n\n    idRef.current = setInterval(\n      () => dispatch({ type: \"tick\" }), 1000);\n    \n    return () => {\n      clearInterval(idRef.current);\n      idRef.current = 0;\n    };\n\n  }, [state.isRunning]);\n\n\nsetInterval: setInterval(code, delay)\n\nclearInterval: clearInterval(intervalID)\n\n\nThe core business-logic of this code is the combination of:\n\nthe useEffect hook (which synchronizes execution with two different sources) and\nthe render cycle trigger-render-paint (due the change of state of state.time by setInterval and tick).\n\n\nThe key-idea of the useEffect in this particular use (related to a timer problem) is the synchronization of the execution with two different triggers:\n\n\ntimer: setIntervaland clearIntervalwith idRef\n\nuseEffect, first render: when the component is loaded.\nuseEffect, with its dependencies: state.isRunning, when user clicks button start, stop or reset.\n\nThe core business-logic is completed with the render-cycle. The key-idea here is when and who call the render-cycle:\n\nwith the change of the state the component triggers the render cycle: every time clock is ticking, that is, every one second: state.time by setInterval and tick.\n\nThe return statement returns a JSX template that displays the stopwatch: there are three buttons: “Start”, “Stop”, and “Reset” that dispatch start, stop, and reset actions respectively.\n\n\n\ncore business-logic Time Manager code\n\n\nThe idRef is a reference to the timer, and it is updated every time the useEffect hook is called.\n  const idRef = useRef(0);\nThe returned value of setInterval, which represents the ID of the interval, is stored in idRef.current.\n\n\n\nCleanup return\n\n\nThe cleanup function of the useEffect hook allows us to stop side effects that no longer need to be executed before our component is unmounted.\nuseEffect(() => {\n  // Core business-logic\n  return () => {\n    // Cleanup\n  }\n}, [dependencies])\nWhen to use a cleanup function:\n\nCanceling a fetch request\nCleaning up Timeouts\nCleaning up Intervals\nCleaning up Event Listeners\nClosing up Web Sockets\n\nuseEffect(() => {\n\n    // ...\n\n    return () => {\n      clearInterval(idRef.current);\n      idRef.current = 0;\n    };\n\n  }, [state.isRunning]);\nThis cleanup function will be executed before the next effect execution or when the component unloads (unmounts). Inside the cleanup function:\n\nThe clearInterval function is called with the idRef.current value to clear the interval and stop the associated callback function from executing.\nidRef.current is set to 0 to indicate that the interval has been cleared.\n\nThe cleanup return function ensures that any resources or side effects created by the effect are properly cleaned up and disposed of, preventing memory leaks or unintended behavior.\nIn this case, it ensures that the interval is cleared and any associated callbacks are stopped when the component unmounts or when the isRunning value changes to false."
  },
  {
    "objectID": "reactjs/rjslab2.html#api-rest",
    "href": "reactjs/rjslab2.html#api-rest",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "5 api Rest",
    "text": "5 api Rest\n\n5.1 Axios\nInstall axios using npm:\n$ npm install axios\n\nAxios is a promise-based HTTP Client for node.js and the browser.\nIt is isomorphic\nOn the server-side it uses the native node.js http module\nOn the client (browser) it uses XMLHttpRequests.\n\n\n\nisomorphic: it can run in the browser and nodejs with the same codebase.\nWe use the Axios library to fetch data from the JSONPlaceholder API, which provides a fake REST API for testing and prototyping.\n\n\n5.2 Component\nThe component initializes a state variable called data using the useState hook, and sets its initial value to an empty array.\n const [data, setData] = useState([]);\nThe useEffect hook is used to fetch the data from the API and update the data state variable when:\n\nthe component mounts or\nwhen the setData function is called.\n\nThe axios.get() method is called with the URL of the API endpoint:\nconst url = \"https://jsonplaceholder.typicode.com/todos\";\nThe response is handled with a then block that sets the data state variable to the response data. If there is an error, it is logged to the console with a catch block.\nIn the component’s return statement, the fetched data is rendered using the .map() method to loop through each item in the data array.\nThe key prop is added to each item to help React identify the items and improve performance.\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function AxiosApiRest() {\n  const url = \"https://jsonplaceholder.typicode.com/todos\";\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(url)\n      .then((response) => {\n        setData(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [setData]);\n\n  return (\n    <>\n      <h1> My data todos from axios</h1>\n      {data &&\n        data.map((item) => {\n          return (\n            <spam key={item.id}>\n              id: {item.id}\n              <spam>userId: {item.userId} </spam>\n              <spam>title: {item.title} </spam>\n              <spam>completed: {item.completed} </spam>\n              <br />\n            </spam>\n          );\n        })}\n    </>\n  );\n}"
  },
  {
    "objectID": "reactjs/rjslab2.html#versions",
    "href": "reactjs/rjslab2.html#versions",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "7 Versions",
    "text": "7 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nHola5 0.0\ncreate project with route: hola5 0.0\ninitial tree-folder\nrender home\n\n\nHola5 0.1\nuseReducer: user Profile hola5 0.1  compoonent useReducer on codesandbox with handlers functions  or codesandbox dispatcher onChange, onClick\nuserReducer tree-folder\nrender user profile\n\n\nHola5 0.2\nuseReducer, userRef, useEffect: clock hola5 0.2  component clock on codesandbox \nclock tree-folder\nrender clock\n\n\nHola5 0.3\napi Rest hola5 0.3  component api Rest codesandbox \napi Rest tree-folder\nrender api Rest\n\n\nHola5 0.4\nuseContext: fake login hola5 0.4\nuseContxt login tree-folder\nrender useContext login - render useContext loged\n\n\n\n\n\n\n\n\n  React JS: Lab#RE01-1 \n\n\n\n  top \n\n\n\n React JS: Lab#RE03-1"
  },
  {
    "objectID": "reactjs/rjslab3.html",
    "href": "reactjs/rjslab3.html",
    "title": "Lab#RE03-1: to-do app",
    "section": "",
    "text": "📘 React JS Lab#RE03-1: to-do app\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications.\nWe will use the Semantic React library to paint some CSS.\n\nWe could use a table or list\n\nWe could use HighCharts to represent data.\nHooks we are going to use:\n\nto create the basic app: useReducer, useContext,\nto persist the state values between renders: useEffect, useRef.\nto manage others states o variables: useState.\n\n\nThe lab will demonstrate how to use a react-router-dom with React to build a functional web application.\nReference:"
  },
  {
    "objectID": "reactjs/rjslab4.html",
    "href": "reactjs/rjslab4.html",
    "title": "Lab#RE04-1: server",
    "section": "",
    "text": "📘 React JS Lab#RE04-1: feathers / spring boot\nIn this lab, we will be using:\n\nfeathers, the API and Real-time Application Framework.\nSpring Boot"
  },
  {
    "objectID": "reactjs/rjslab5.html",
    "href": "reactjs/rjslab5.html",
    "title": "Lab#RE05-1: chat & websockets",
    "section": "",
    "text": "📘 lab\n\n\n\n\n\n\n\n  React JS: Lab#RE04-1 \n\n\n\n  top \n\n\n\n ReactJS Resources"
  },
  {
    "objectID": "scrum/resources.html",
    "href": "scrum/resources.html",
    "title": "SCRUM Resources",
    "section": "",
    "text": "MarkUp Resources\n\n\n\n1 Resources\n\n\n\n\n\n  Week 10: Beyond SCRUM \n\n\n\n  top \n\n\n\n General Vocabulary"
  },
  {
    "objectID": "scrum/scrum-week1.html",
    "href": "scrum/scrum-week1.html",
    "title": "Week 1: Meetings and impediments",
    "section": "",
    "text": "1 Meetings and impediments\n\nWeek 1: Meetings and impediments\n\n\n\n\n\n\n  SCRUM Guide \n\n\n\n  top \n\n\n\n Week 2: User stories, tasks and habits"
  },
  {
    "objectID": "scrum/scrum-week10.html",
    "href": "scrum/scrum-week10.html",
    "title": "Week 10: Beyond SCRUM",
    "section": "",
    "text": "1 Beyond SCRUM\n\n\n\n\n\n  Week 9: Albertus’ Dylemma \n\n\n\n  top \n\n\n\n SCRUM Resources"
  },
  {
    "objectID": "scrum/scrum-week2.html",
    "href": "scrum/scrum-week2.html",
    "title": "Week 2: User stories, tasks and habits",
    "section": "",
    "text": "1 User stories, tasks and habits\n\nWeek 2: User stories, tasks and habits\n\n\n\n\n\n\n  Week 1: Meetings and impediments \n\n\n\n  top \n\n\n\n Week 3: Communication and value"
  },
  {
    "objectID": "scrum/scrum-week3.html",
    "href": "scrum/scrum-week3.html",
    "title": "Week 3: Communication and value",
    "section": "",
    "text": "1 Communication and value\n\nWeek 3: Communication and value\n\n\n\n\n\n\n  Week 2: User stories, tasks and habits \n\n\n\n  top \n\n\n\n Week 4: ScrumMaster, how it works"
  },
  {
    "objectID": "scrum/scrum-week4.html",
    "href": "scrum/scrum-week4.html",
    "title": "Week 4: ScrumMaster, how it works",
    "section": "",
    "text": "1 ScrumMaster, how it works\n\nWeek 4: ScrumMaster, how it works\n\n\n\n\n\n\n  Week 3: Communication and value \n\n\n\n  top \n\n\n\n Week 5: Mindset, the key to everythng"
  },
  {
    "objectID": "scrum/scrum-week5.html",
    "href": "scrum/scrum-week5.html",
    "title": "Week 5: Mindset, the key to everythng",
    "section": "",
    "text": "1 Mindset, the key to everythng\n\nWeek 5: Mindset, the key to everythng\n\n\n\n\n\n\n  Week 4: ScrumMaster, how it works \n\n\n\n  top \n\n\n\n Week 6: Product Owner"
  },
  {
    "objectID": "scrum/scrum-week6.html",
    "href": "scrum/scrum-week6.html",
    "title": "Week 6: Product Owner",
    "section": "",
    "text": "1 Product Owner\n\n\n\n\n\n  Week 5: Mindset, the key to everythng \n\n\n\n  top \n\n\n\n Week 7: Managing time and mind"
  },
  {
    "objectID": "scrum/scrum-week7.html",
    "href": "scrum/scrum-week7.html",
    "title": "Week 7: Managing time and mind",
    "section": "",
    "text": "1 Managing time and mind\n\n\n\n\n\n  Week 6: Product Owner \n\n\n\n  top \n\n\n\n Week 8: The specialist"
  },
  {
    "objectID": "scrum/scrum-week8.html",
    "href": "scrum/scrum-week8.html",
    "title": "Week 8: The specialist",
    "section": "",
    "text": "1 Specialist\n\n\n\n\n\n  Week 7: Managing time and mind \n\n\n\n  top \n\n\n\n Week 9: Albertus’ Dylemma"
  },
  {
    "objectID": "scrum/scrum-week9.html",
    "href": "scrum/scrum-week9.html",
    "title": "Week 9: Albertus’ Dylemma",
    "section": "",
    "text": "flowchart LR\n\nA[Problem] --> B(Let's code & See what happens...)\nC[The Pitt]\nD(Optimal Solution)\nC --> B\nB --> C\nC --> A\n\n\n\n\n\n\n\n\n\n\n\n\nAs a future developer I want to relate the struggles and reflect the mentality that you, my fellow reader and potential developer, should avoid.\nMy pourpose is to stablish some patterns of productive thinking to help you to get out from the Valley of Dispair a.k.a. (and from now on) The Pitt that most likely you would fall into. Trust me, I’ve been there…Actually I AM constantly there, that’s why I want to reflect that in this kind of journal.\n\n\n\n\n\n\nAnyway\n\n\n\n\n\nThat’s the tricky part, I don’t know how as of today (01/19/2023). But hopefully I will. First of all you need to understand the concept of iteration, my friend. With that in mind, we just need to start.\n\n\n\n\n\n\nYou surely noticed the flowchart above. It’s such a common pattern for us who just started programming. Have you ever feel identified with it?\nAs you keep progressing in your coding lessons, problems are going to be slightly more difficult and complex every time. Until you reach to a point when you can’t completely see the solution in your mind.\nYou’ll probably see straight how to get from A to B, but from B to C you see it blurry… Well, then you just have to get to B so you can see more clear how to get to C better, right?\nYes, I always trick to myself like that…\n\n\n\n\n\n\nWhen we talk about Albertus’ Dylemma:\n\n\n\nIt is that moment when you either need to stop, take two steps back and think what led you into this or keep hitting the wall (and the keyboard with your pointless code).\n\n\nI’m going to try to develop that idea on some exercises based on this lab:\n\n\n\n\n\n\n📘 Linux Lab#SE02-1: Movie Review and Rating\nCreate a Maven/Gradle Java SE Project.\n\nAdd the needed dependencies:\n    Lombok\n    Junit\n    Java Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\n    Movie: The Movie class represents a movie that is being reviewed. It has the following attributes:\n        title: a String representing the title of the movie\n        reviews: a Set of Review objects representing the reviews that have been written for this movie\n        Critic: The Critic class represents a critic who writes reviews.\n\n    The Critic class has the following attributes:\n        name: a String representing the name of the critic\n        Review: The Review class represents a review of a movie written by a critic.\n\n    The Review class has the following attributes:\n        movie: a Movie object representing the movie being reviewed\n        critic: a Critic object representing the critic who wrote the review\n        rating: an int representing the rating given by the critic (on a scale of 1 to 5)\n        comment: a String representing the comment written by the critic about the movie\n\n\n\nSo I have this requirement:\n\nMake a program that can manage information about movies such as:\n\nMovie name.\nIts director (e.g. so I can plan a themed marathon with my friends.)\n\nDirector’s prestige: I want to know how many Oscars has the director won through his career.\n\nIt also needs to include its critics made by the best professionals and to know how well or poorly rated it is.\n\n\nUser Story #1 - The easiest and certain way to hit the wall.\nLet’s just start coding:\n\npublic Class MovieManager  {\n    public static void main(String[])\n}\n\n\n\n\n\nflowchart LR\nA[Problema] --> B[Decision]\nB --> C(Code & See)\nB --> D(Piensa)\nD --> E[Sabes lo que haces?]\nC --> G[El Pozo]\nD --> F[Te enamoraste de tu primera idea?]\nG --> A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Week 8: The specialist \n\n\n\n  top \n\n\n\n Week 10: Beyond SCRUM"
  },
  {
    "objectID": "scrum/scrum-what-agile-manifesto.html",
    "href": "scrum/scrum-what-agile-manifesto.html",
    "title": "Agile Manifesto",
    "section": "",
    "text": "1 12 Principles Agile Manifesto\nThrough this work we have come to value\nPrinciples behind the Agile Manifesto\n\n\n\nAgile Software Development\n\n\n\n\nOur highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n\n\nWelcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.\n\n\nDeliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n\n\nBusiness people and developers must work together daily throughout the project.\n\n\nBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n\n\nThe most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\n\n\nWorking software is the primary measure of progress.\n\n\nAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\n\n\nContinuous attention to technical excellence and good design enhances agility.\n\n\nSimplicity–the art of maximizing the amount of work not done–is essential.\n\n\nThe best architectures, requirements, and designs emerge from self-organizing teams.\n\n\nAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.\n\n\n\n\n\n\n\n  SCRUM Agile Methodology \n\n\n\n  top \n\n\n\n SCRUM Guide"
  },
  {
    "objectID": "scrum/scrum-what-concepts.html",
    "href": "scrum/scrum-what-concepts.html",
    "title": "SCRUM Agile Methodology",
    "section": "",
    "text": "📘 SCRUM definition\nScrum is a framework for project management that is based on teamwork, accountability, transparency and short time-boxed iterative progress toward a well-defined goal.\nThe framework begins with a simple premise: start with what can be seen or known. After that, track the progress and adapt, whenever it is necessary.\nAt the end of each iteration, the team holds two meetings: one review to show the work done for clients and to get feedback, and one retrospective to enable the team to reflect and improve.\n\n\n\n\nScrum is a framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum itself is a simple framework for effective team collaboration on complex products.\n\n\nScrum co-creators Ken Schwaber and Jeff Sutherland have written The Scrum Guide to explain Scrum clearly and succinctly.\nThis section contains the definition of Scrum. This definition consists of:\n\nScrum’s roles,\nevents,\nartifacts,\nand the rules that bind them together.\n\n\nScrum is: Lightweight, Simple to understand and Difficult to master.\n\n\n\n\n\n\nThe Scrum Team is made up of the people who actually work on Product Backlog Items during a Sprint. In a software context, this group is most often called the Development Team.\n\n\nIn other contexts, the simple term Team is often used.\nThe Scrum Master and the Product Owner, while part of the overall Scrum Team, may or may not be members of the Team working on PBIs. There is no Project Manager or Team Lead in Scrum.\n\nEveryone is simply an equal member of the Team.\n\nThe Scrum team is:\n\nTranscendent\nAutonomous\nCross-Functional\n\n\n\n\nThe Scrum Master is tasked with making Scrum work. They work intimately with the Team, sometimes as a member. Their primary task is to remove Impediments and guide the team in Scrum practices.\n\n\nThe Scrum Master does whatever it takes to help the team succeed.\nScrum Masters are servant-leaders, not managers. They play the pivotal role of making sure Scrum is practiced well. The Scrum Master is accountable for the Velocity and the Continuous Improvement of the Team.\n\n\n\nThe Product Owner is the Team member who knows what the customer wants and the relative business value of those wants. He or she can then translate the customer’s wants and values back to the Scrum team.\n\n\nThe Product Owner must know the business case for the product and what features the customers wants.\nHe must be available to consult with the team to make sure they are correctly implementing the product vision. Most importantly, he must have the authority to make all decisions necessary to complete the project.\n\n\n\n\nThrough this work we have come to value:\n\n\nIndividuals and interactions over processes and tools\n\n\nWorking software over comprehensive documentation\n\n\nCustomer collaboration over contract negotiation\n\n\nResponding to change over following a plan\n\n\nThat is, while there is value in the items on the right, we value the items on the left more.\n\n\n\n\n\n\nSpaceX is currently using a methodologies pool\n\n\nAt the very beginning, when they were just a startup, they used all Lean Startup tips to achieve the success. They did unscalable things, bought some spares for rockets in usual computer shops, made some spares by themselves, etc.\n\n\nAll of these were a total craziness for classical aerospace companies. But it was the key benefit how they competed mastodons, like Lockheed and Boeing.\nTesting of hypotheses, tight budgets, and continuous innovations made the appreciable contribution to company success.\n\nAll Elon’s companies use Silicon Valley startup approach to achieve success. And this is what distinguishes them among all other classical companies from the industry\n\nPerhaps, it’s not a classical Scrum approach like software companies use, but it’s from the field of Kaizen and The Toyota Way. This is how startups should behave.\n\n\n\n\n\n  ReactJS Resources \n\n\n\n  top \n\n\n\n Agile Manifesto"
  },
  {
    "objectID": "scrum/scrum-what-guide.html",
    "href": "scrum/scrum-what-guide.html",
    "title": "SCRUM Guide",
    "section": "",
    "text": "The 2020 Scrum Guide\nThis HTML version of the Scrum Guide is a direct port of the November 2020 version available as a PDF here or original 2013.\n\n\n\nThe Scrum Framework by Scrum Inc..\nSuggested Reading for Professional Scrum Master\nGuia rápida implementar SCRUM\n\n\n\n\n\n\n\nAgile Software Development\n\n\nWe are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:\nThrough this work we have come to value\n\nIndividuals and interactions over processes and tools\nWorking software over comprehensive documentatio\nCustomer collaboration over contract negotiation\nResponding to change over following a plan\n\nThat is, while there is value in the items on the right, we value the items on the left more.\n\n\n\n\n\n\n\n\n\nSprint Velocity\n\n\n\nNumber of Story Points completed per Sprint\n\n\n\n\n\nAll actors in SCRUM\n\n\n\n\n\n\n\n\nProduct Backlog\n\n\n\nis an always changing, dynamically prioritized list of requirements ordered by Business Value. Requirements are broken down into User Stories by the Product Owner. Definition of Done (DoD) at the Backlog level.\n\n\n\n\n\n\n\n\nSprint Backlog\n\n\n\ncontains all committed User Stories for the current Sprint broken down into Tasks by the Team. All items on the Sprint Backlog should be developed, tested, documented and integrated to fulfill the Team commitment.\n\n\n\n\n\nBurndown Chart\n\n\n\n\n\n\n\n\nBurndown Chart\n\n\n\nshows the amount of work remaining per Sprint. It shows the correlation between work remaining at any point in time and the progress of the Team.\n\n\n\n\n\n\nThe acronym INVEST helps to remember a widely accepted set of criteria, or checklist, to assess the quality of a user story. If the story fails to meet one of these criteria, the team may want to reword it, or even consider a rewrite (which often translates into physically tearing up the old story card and writing a new one).\n\n\n\n\n\n\n\nINVEST\n\n\n\nhelps to remember a widely accepted set of criteria, or checklist, to assess the quality of a user story.\n\n\nA good user story should be:\n\n“I” ndependent (of all others)\n“N” egotiable (not a specific contract for features)\n“V” aluable (or vertical)\n“E” stimable (to a good approximation)\n“S” mall (so as to fit within an iteration)\n“T” estable (in principle, even if there isn’t a test for it yet)\n\nFor a user story, the next template should be used:\nAs a <type of user>, I want <some goal> so that <some reason>.\n\n\n\n\n\n\nEpic\n\n\n\na user story that covers large amounts of functionality. Because an epic is generally too large for an Agile team to complete in one iteration, it is split into multiple smaller user stories before it is worked on\n\n\n\n\n\n\n\n\nUser Story\n\n\n\nis a short, simple description of a feature told from the perspective of the person who desires the new capability, usually a user or customer of the system.\n\n\n\n\n\n\n\n\nAcceptance Criteria\n\n\n\nlist of activities that must be fulfilled in order to consider US done\n\n\n\n\n\nPlannig poker\n\n\n\n\n\n\n\n\nPlanning poker\n\n\n\nalso called Scrum poker, is a consensus-based, gamified technique for estimating by playing numbered cards face-down to the table, instead of speaking them aloud.\n\n\n\n\n\n\n\n  Agile Manifesto \n\n\n\n  top \n\n\n\n Week 1: Meetings and impediments"
  },
  {
    "objectID": "spring/spring-basics.html",
    "href": "spring/spring-basics.html",
    "title": "Spring Framework",
    "section": "",
    "text": "📘 What is Spring Framework?\nSpring Framework is a powerful lightweight application development framework used for Enterprise Java (JEE).\n\n\nThe Spring Framework is a popular Java framework for building enterprise-level applications.\nThe Spring Framework provides a comprehensive set of tools and libraries for building and maintaining enterprise applications, and is designed to support the “software development principles of modularity, component-based development, and non-invasive programming”.\nThe Spring Framework consists of several modules, each of which provides a different set of functionality and tools. Some of the key modules of the Spring Framework include:\n\nSpring Core: The core module provides the fundamental functionality of the Spring Framework, including dependency injection, inversion of control, and support for aspect-oriented programming.\nSpring MVC: The MVC (Model-View-Controller) module provides a web-oriented framework for building web applications, and supports the development of web applications using a “front controller” pattern.\nSpring Data: The Data module provides tools and libraries for working with data sources and databases, and supports the development of data-oriented applications.\nSpring Security: The Security module provides tools and libraries for implementing authentication and authorization in applications, and supports the development of secure applications.\nSpring Boot: The Boot module provides a way to quickly and easily create stand-alone, production-grade Spring applications. Spring Boot uses an “opinionated” approach to configuration, which means that it provides a set of default configurations that are designed to work well together, and allows developers to get started quickly without having to spend a lot of time configuring the application.\n\nOverall, the Spring Framework is a powerful and popular toolkit for building enterprise-level applications in Java, and provides a wide range of tools and libraries for supporting various aspects of application development. By using the Spring Framework, developers can take advantage of the framework’s modular design, and can choose the specific modules that are most relevant to their needs and goals."
  },
  {
    "objectID": "spring/spring-basics.html#timeline",
    "href": "spring/spring-basics.html#timeline",
    "title": "Spring Framework",
    "section": "2 Timeline",
    "text": "2 Timeline\n\nThe current stable version, as of December 2022, is Spring 6.0.2. You can always find new version announcements on https://github.com/spring-projects/spring-framework/releases.\nThe current stable version, as of December 2022, is Spring Boot 3.0.0. You can always find new version announcements on https://github.com/spring-projects/spring-boot/releases.\nSpring Boot 3.0.0 (and therefore the latest Spring Framework 6.0.2) supports Java 19 while also remaining compatible with Java 11 and 8.\n\n\n\n\nFollowing is the timeline shown about major releases in the history of Spring"
  },
  {
    "objectID": "spring/spring-basics.html#differences-between-the-spring-framework-and-spring-boot",
    "href": "spring/spring-basics.html#differences-between-the-spring-framework-and-spring-boot",
    "title": "Spring Framework",
    "section": "3 Differences between the Spring Framework and Spring Boot",
    "text": "3 Differences between the Spring Framework and Spring Boot\n\nThe Spring Framework is a comprehensive framework for building and maintaining enterprise-level applications in Java, while Spring Boot is focused specifically on simplifying the process of creating and deploying stand-alone, production-grade Spring applications.\nThe Spring Framework provides a flexible and modular approach to configuration, while Spring Boot uses an “opinionated” approach to configuration, which provides a set of default configurations that are designed to work well together.\nThe Spring Framework provides a web-oriented framework called Spring MVC, while Spring Boot provides a more integrated approach to web application development, and includes support for building web applications using a wide range of technologies.\nIn general, the Spring Framework and Spring Boot are both useful frameworks for building enterprise-level applications in Java, but have different scopes, focus, and approaches to configuration, and may be more or less suitable for different types of projects and goals.\n\n\n\n\ntable summarizing the differences between the Spring Framework and Spring Boot\n\n\n\n\n\n\n\n  Java SE Resources \n\n\n\n  top \n\n\n\n Spring MVC"
  },
  {
    "objectID": "spring/spring-mvc.html",
    "href": "spring/spring-mvc.html",
    "title": "Spring MVC",
    "section": "",
    "text": "Spring MVC\n\n\n\n\nSpring MVC Numbered\n\nThe Spring Web model-view-controller (MVC) framework is designed around a DispatcherServlet that dispatches requests to handlers, with configurable handler mappings, view resolution, locale and theme resolution as well as support for uploading files.\nThe default handler is based on the @Controller and @RequestMapping annotations, offering a wide range of flexible handling methods.\nWith the introduction of Spring 3.0, the @Controller mechanism also allows you to create RESTful Web sites and applications, through the @PathVariable annotation and other features.\n\n\n\n\n\n  Spring Framework \n\n\n\n  top \n\n\n\n Springs Servlets"
  },
  {
    "objectID": "spring/spring-servlets.html",
    "href": "spring/spring-servlets.html",
    "title": "Springs Servlets",
    "section": "",
    "text": "📘 Servlet\nA servlet in Java is a server-side technology that enables the handling of requests and responses between a client and a server.\nServlets are Java classes that extend the functionality of web servers and allow developers to dynamically generate web pages and other resources based on user requests."
  },
  {
    "objectID": "spring/spring-servlets.html#overview-jsp-servlets-and-daos",
    "href": "spring/spring-servlets.html#overview-jsp-servlets-and-daos",
    "title": "Springs Servlets",
    "section": "1 Overview: JSP, Servlets and DAOs",
    "text": "1 Overview: JSP, Servlets and DAOs\n\nServlet Container and Spring Framework\nServelets examples\nWeb on Servlet Stack\n\nJSP (JavaServer Pages) and servlets are server-side Java technologies that work together to build dynamic web applications.\nJSPs provide a way to generate HTML pages dynamically using Java code, while servlets handle incoming HTTP requests and provide responses back to the client.\n\n\nJSP, servlets, and DAOs are technologies that have been around for many years and are still in use today.\nWhen combined with a DAO (Data Access Object) layer, JSPs and servlets can interact with a SQL database to store and retrieve data.\nThe DAO layer acts as an intermediary between the application and the database, handling the low-level details of data access and providing a consistent interface for the rest of the application to use.\n\n\nJSP and servlets were introduced in the late 1990s as part of the Java EE (Enterprise Edition) specification, which aimed to provide a platform for building scalable and robust enterprise applications. These technologies are still commonly used today.\n\n\n\nDatabase Connectivity and Operations Comparison : Java and Force.com\n\n\nUsing this combination of JSPs, servlets, and DAOs, developers can build powerful, scalable, and maintainable web applications that can handle complex data and business logic.\n\n\nThe use of DAOs in conjunction with JSPs and servlets to access SQL databases has also been a common practice for many years. DAOs were first introduced as a design pattern in the early 2000s, and since then, they have been widely adopted as a best practice.\n\n\n\nServlet life cycle\n\n\nThe end result is a web application that can provide rich functionality to users while remaining easy to maintain and extend over time."
  },
  {
    "objectID": "spring/spring-servlets.html#jsp-javaserver-page",
    "href": "spring/spring-servlets.html#jsp-javaserver-page",
    "title": "Springs Servlets",
    "section": "2 JSP: JavaServer Page",
    "text": "2 JSP: JavaServer Page\n\nJava Server-side Programming, Getting started with JSP by Examples\n\nJavaServer Page (JSP) provides a simplified and fast mean to generate dynamic web contents.\nIt allows you to mix static HTML with dynamically generated HTML - in the way that the business logic and the presentation are well separated.\n\n\n\nRequest-Response cycle with servlets and .xml: Spring 2.x\n\n\n\nBook servlet\n\n\n2.1 JSPs are Internally Compiled into Java Servlets\nThat is to say, anything that can be done using JSPs can also be accomplished using Java servlets.\nHowever, it is important to note that servlets and JSPs are complementary technologies, NOT replacement of each other.\n\nServlet can be viewed as HTML inside Java, which is better for implementing business logic - as it is Java dominant.\nJSP, on the other hand, is Java inside HTML, which is superior for creating presentation - as it is HTML dominant.\n\nIn a typical Model-View-Control (MVC) application:\n\nservlets are often used for the Controller (C), which involves complex programming logic.\nJSPs are often used for the View (V), which mainly deals with presentation.\nThe Model (M) is usually implemented using JavaBean or EJB.\n\n\n\n\nServlet life cycle\n\n\n\n\n2.2 Apache Tomcat Server\nJSPs, like servlets, are server-side programs run inside a HTTP server.\n\n\n\n\n\n\nTomcat\n\n\n\nTo support JSP/servlet, a Java-capable HTTP server is required.\nTomcat Server is the official reference implementation (RI) for Java servlet and JSP, provided free by Apache."
  },
  {
    "objectID": "spring/spring-servlets.html#example-java-inside-html",
    "href": "spring/spring-servlets.html#example-java-inside-html",
    "title": "Springs Servlets",
    "section": "3 Example: Java inside HTML",
    "text": "3 Example: Java inside HTML\n\n\n\nRequest-Response cycle with URL and Java Methods: Spring 2.x\n\n\n\n3.1 Code example\nThis JSP code generates a random number and displays a message to the user based on the value of the number.\nIf the number is greater than 0.95, the user is told they will have a lucky day, and if the number is less than or equal to 0.95, the user is told that life goes on.\n\n\nDemoApplication.java\n\n<html>\n<head><title>First JSP</title></head>\n<body>\n  <%\n    double num = Math.random();\n    if (num > 0.95) {\n  %>\n      <h2>You'll have a luck day!</h2><p>(<%= num %>)</p>\n  <%\n    } else {\n  %>\n      <h2>Well, life goes on ... </h2><p>(<%= num %>)</p>\n  <%\n    }\n  %>\n  <a href=\"<%= request.getRequestURI() %>\"><h3>Try Again</h3></a>\n</body>\n</html>\n\nThe random number is displayed along with the message, and the user is given the option to try again by clicking on a link that reloads the page."
  },
  {
    "objectID": "spring/spring-servlets.html#in-2023-is-this-tech-obsolete-yes-and-not",
    "href": "spring/spring-servlets.html#in-2023-is-this-tech-obsolete-yes-and-not",
    "title": "Springs Servlets",
    "section": "4 In 2023, is this tech obsolete? Yes and Not",
    "text": "4 In 2023, is this tech obsolete? Yes and Not\n\n\n\nServlet and JSP Tutorial- How to Build Web Applications in Java?\n\n\n\n\n\n\n\n  Spring MVC \n\n\n\n  top \n\n\n\n Spring Boot: fundamentals"
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html",
    "href": "springboot/boot-concepts-annotations.html",
    "title": "Spring Boot: Annotations",
    "section": "",
    "text": "📘 Annotations\nIn Spring Boot, annotations are used to configure and enable various features and functionality.\nThey are used to provide metadata about a class, method, or field, and are used by the Spring framework to determine how to handle that class, method, or field.\nHere are some examples of common annotations used in Spring Boot:"
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#app",
    "href": "springboot/boot-concepts-annotations.html#app",
    "title": "Spring Boot: Annotations",
    "section": "1 App",
    "text": "1 App\n\n@SpringBootApplication: This annotation is used to enable the default configuration of a Spring Boot application.\n\nBasically, the @SpringBootApplication annotation is a combination of the following three Spring annotations: @Configuration, @EnableAutoConfiguration and @ComponentScan."
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#class",
    "href": "springboot/boot-concepts-annotations.html#class",
    "title": "Spring Boot: Annotations",
    "section": "2 Class",
    "text": "2 Class\n\n@Component : This annotation is used to automatically detect the component classes without any need to write any explicit code. Spring framework scans classes with @component, initialize them, and injects the required dependencies.\n@RestController: This annotation is used to define a class as a RESTful web service controller.\n@Controller: This annotation is used to define a class as a web service controller\n@Repository : This annotation is used to define a class as a JPA repository, which can be used to perform CRUD operations on a database.\n@Service : This annotation is used to define a class as a service class that defines the business logic."
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#dependence-injection",
    "href": "springboot/boot-concepts-annotations.html#dependence-injection",
    "title": "Spring Boot: Annotations",
    "section": "3 Dependence Injection",
    "text": "3 Dependence Injection\n\n@Autowired: This annotation is used to automatically wire a bean from the Spring application context into a class field or method. When we use this annotation Spring Boot is responsible to create the instance of that variable, it basically manages the whole life cycle of the object."
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#jpa",
    "href": "springboot/boot-concepts-annotations.html#jpa",
    "title": "Spring Boot: Annotations",
    "section": "4 JPA",
    "text": "4 JPA\n\n@Entity: This annotation is used to define a class as a JPA entity, which can be used to interact with a database."
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#mapping-and-parameters",
    "href": "springboot/boot-concepts-annotations.html#mapping-and-parameters",
    "title": "Spring Boot: Annotations",
    "section": "5 Mapping and parameters",
    "text": "5 Mapping and parameters\n\n@RequestMapping: This annotation is used to map HTTP requests to specific methods in a controller class.\n@RequestParam : This annotation is used to bind request parameters to a method parameter in the controller.\n\n@PathVariable : This annotations binds the placeholder from the URI to the method parameter and can be used when the URI is dynamically created or the value of the URI itself acts as a parameter.\n\n\n\n\n\n\n  Spring Boot: Dependency Injection \n\n\n\n  top \n\n\n\n Spring Boot: Controller"
  },
  {
    "objectID": "springboot/boot-concepts-controller.html",
    "href": "springboot/boot-concepts-controller.html",
    "title": "Spring Boot: Controller",
    "section": "",
    "text": "In Spring Boot, the Model-View-Controller (MVC) pattern is used to separate the application logic into three components: Model - View -Controller"
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#overwiew",
    "href": "springboot/boot-concepts-controller.html#overwiew",
    "title": "Spring Boot: Controller",
    "section": "1 Overwiew",
    "text": "1 Overwiew\nIn Spring Boot, a controller is a class that handles incoming HTTP requests and returns an HTTP response. There are two ways to handle the HTTP response in Spring Boot controllers: using a model (or ModelMap) or a model and view.\n\n1.1 Model\nA model is an object that holds data to be rendered by a view.\nTo use a model in a @Controller, you need to add the @Controller annotation to the class and use the Model interface as a parameter for the method that handles the HTTP request.\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n\n    @GetMapping(\"/\")\n    public String getHome(Model model) {\n        model.addAttribute(\"message\", \"Welcome to my Spring Boot app!\");\n        return \"home\";\n    }\n}\n\n\nIn this example, the getHome method takes a Model object as a parameter and adds a message to it using the addAttribute method.\n\nThe getHome method returns the name of the view home (html), which will be resolved by Spring Boot to the appropriate view file.\n\n\n\n1.2 Model and View\nA model and view is a combination of a model object and the name of the view to be rendered. To use a model and view in a controller, you need to add the @Controller annotation to the class and use the ModelAndView class as the return type for the method that handles the HTTP request.\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\npublic class HomeController {\n\n    @GetMapping(\"/\")\n    public ModelAndView getHome() {\n        ModelAndView modelAndView = new ModelAndView();\n        modelAndView.addObject(\"message\", \"Welcome to my Spring Boot app!\");\n        modelAndView.setViewName(\"home\");\n        return modelAndView;\n    }\n}\n\n\nIn this example, the getHome method creates a new ModelAndView object and adds a message to the model using the addObject method. The method also sets the name of the view home using the setViewName method."
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#using-annotations",
    "href": "springboot/boot-concepts-controller.html#using-annotations",
    "title": "Spring Boot: Controller",
    "section": "2 Using Annotations",
    "text": "2 Using Annotations\nIn this table, we will explore some of the most commonly used annotations in Spring Boot. These annotations can be used to map HTTP requests to controller methods, extract data from the request, bind data to model attributes, and handle exceptions. Understanding these annotations is essential for building Spring Boot applications that are reliable, scalable, and maintainable.\n\nSpring Boot Annotations\n\n\n\n\n\n\nAnnotation\nDescription\n\n\n\n\n@Controller\nIndicates that a class serves as a Spring Boot controller.\n\n\n@RequestMapping\nMaps HTTP requests to controller methods.\n\n\n@GetMapping\nMaps HTTP GET requests to controller methods.\n\n\n@PostMapping\nMaps HTTP POST requests to controller methods.\n\n\n@PutMapping\nMaps HTTP PUT requests to controller methods.\n\n\n@DeleteMapping\nMaps HTTP DELETE requests to controller methods.\n\n\n@PathVariable\nExtracts a variable from the URL path.\n\n\n@RequestParam\nExtracts a variable from the query string or request body.\n\n\n@ModelAttribute\nBinds a method parameter to a model attribute.\n\n\n@SessionAttribute\nBinds a method parameter to a session attribute.\n\n\n@InitBinder\nInitializes a web data binder for a specific controller method.\n\n\n@ExceptionHandler\nHandles exceptions thrown by a controller method.\n\n\n@ResponseStatus\nSets the HTTP status code for a controller method.\n\n\n@ResponseBody\nIndicates that a controller method returns a response body instead of a view.\n\n\n@ControllerAdvice\nProvides global exception handling for controllers.\n\n\n\nGET, POST, PUT, PATCH, and DELETE are HTTP methods that are used to perform CRUD (Create, Read, Update, and Delete) operations on resources in a RESTful API.\n\nGET: retrieves a representation of a resource from the server.\nPOST: creates a new resource on the server.\nPUT: updates an existing resource on the server.\nPATCH: partially updates an existing resource on the server.\nDELETE: deletes a resource from the server."
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#example1-model",
    "href": "springboot/boot-concepts-controller.html#example1-model",
    "title": "Spring Boot: Controller",
    "section": "3 Example1: Model",
    "text": "3 Example1: Model\nThe most commonly used annotation is @GetMapping, which maps HTTP GET requests to a specific method.\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n\n    @GetMapping(\"/\")\n    public String home(Model model) {\n        model.addAttribute(\"message\", \"Welcome to my Spring Boot app!\");\n        return \"home\";\n    }\n}\n\n\nIn this example, the @GetMapping(\"/\") annotation maps HTTP GET requests to the root URL (“/”) to the home method.\nExample1 View"
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#example2-pathvariable-and-requestbody",
    "href": "springboot/boot-concepts-controller.html#example2-pathvariable-and-requestbody",
    "title": "Spring Boot: Controller",
    "section": "4 Example2: @PathVariable and @RequestBody",
    "text": "4 Example2: @PathVariable and @RequestBody\n@GetMapping(\"/hello\")\npublic String hello() {\n    return \"Hello, World!\";\n}\n\n@PostMapping(\"/users\")\npublic void createUser(@RequestBody User user) {\n    userService.createUser(user);\n}\n\n@GetMapping(\"/users/{id}\")\npublic String getUserById(@PathVariable(\"id\") Long id, Model model) {\n    User user = userService.getUserById(id);\n    model.addAttribute(\"user\", user);\n    return \"user\";\n}\n\n\nIn these examples, the @GetMapping and @PostMapping annotations are used to map HTTP GET and POST requests to specific methods.\n\nThe @PathVariable annotation is used to extract a variable from the URL path, and the @RequestBody annotation is used to map the request body to a Java object.\n\nAn alternative implementation where the User object is created directly in the @Controller:\n@Controller\npublic class UserController {\n    \n    private List<User> users = new ArrayList<>();\n    \n    @PostMapping(\"/users\")\n    public void createUser(@RequestBody User user) {\n        users.add(user);\n    }\n    \n    @GetMapping(\"/users/{id}\")\n    public String getUserById(@PathVariable(\"id\") Long id, Model model) {\n        User user = null;\n        for (User u : users) {\n            if (u.getId() == id) {\n                user = u;\n                break;\n            }\n        }\n        if (user == null) {\n            // handle error case\n        } else {\n            model.addAttribute(\"user\", user);\n        }\n        return \"user\";\n    }\n}\nIn this implementation, we have replaced the userService dependency with an in-memory List<User> to store the user objects.\nIn the createUser() method, we simply add the User object to the list.\nIn the getUserById() method, we search for the User object with the given id in the list and add it to the model if it exists. If the user is not found, we can handle the error case appropriately.\nExample2 View"
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#example3-requestparam",
    "href": "springboot/boot-concepts-controller.html#example3-requestparam",
    "title": "Spring Boot: Controller",
    "section": "5 Example3: @RequestParam",
    "text": "5 Example3: @RequestParam\nLet’s create a method that uses the @RequestParam annotation to extract a variable from the query string:\n@Controller\npublic class ExampleController {\n\n    @GetMapping(\"/hello\")\n    public String example(@RequestParam(\"name\") String name, Model model) {\n        model.addAttribute(\"message\", \"Hello, \" + name + \"!\");\n        return \"home\";\n    }\n}\nIn this example, the @GetMapping annotation maps HTTP GET requests to the /hello endpoint.\nThe @RequestParam(\"name\") annotation extracts a variable named name from the query string and binds it to the String name method parameter.\nThe Model parameter is used to add an attribute to the model, which will be used to render the view. Finally, the method returns the name of the view, which in this case is home.\n\n\nFor example, if you visit the URL /hello?name=John, the message will say “Hello, John!”.\nAssuming that you have a view named home.html in your application’s templates directory, this controller method will render a message that says “Hello, {name}!” when you visit the URL:\n\n/hello?name=John.\n\nThe value of {name} will be taken from the name parameter in the query string.\nExample3 View\n\n5.1 @RequestParam and @PathVariable\n\n\n\n\n\n\n@RequestParam and @PathVariable\n\n\n\nIn Spring Boot, @RequestParam and @PathVariable are both annotations used to extract data from an HTTP request.\nThe main difference between the two is the source of the data they extract:\n\n@RequestParam : query string or request body\n@PathVariable : URL path\n\n\n\n@RequestParam extracts data from the query string or request body, whereas @PathVariable extracts data from the URL path.\nFor example, if you have a URL like:\n\n/users?name=john\n\nyou can use @RequestParam to extract the name parameter value john from the query string.\nOn the other hand, if you have a URL like:\n\n/users/123\n\nyou can use @PathVariable to extract the id parameter value 123 from the URL path.\nIn general, use @RequestParam when you need to extract data from the query string or request body, and use @PathVariable when you need to extract data from the URL path.\n\nSpring MVC RequestMapping Annotation Example with Controller, Methods, Headers, Params, @RequestParam, @PathVariable.\nAnnotation Interface RequestMapping"
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#url-structure",
    "href": "springboot/boot-concepts-controller.html#url-structure",
    "title": "Spring Boot: Controller",
    "section": "6 URL structure",
    "text": "6 URL structure\n\n\n\nURL Structure Protocol Credential Host Path Username ( Optional ) Password ( Optional ) Hostname Port ( Optional ) Pathname Query Strings ( Optional ) Subdomain ( s ) ( Optional ) Domain Top Level Domain\n\n\n\nKeep a simple URL structure\nWhat is a URL\nURL Structure cheatsheet\n\n\n\n\n\n\n  Spring Boot: Annotations \n\n\n\n  top \n\n\n\n Spring Boot: View"
  },
  {
    "objectID": "springboot/boot-concepts-data.html",
    "href": "springboot/boot-concepts-data.html",
    "title": "Spring Boot: Data & DB",
    "section": "",
    "text": "📘 Data\nSpring Data’s mission is to provide a familiar and consistent, Spring-based programming model for data access.\nIt makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services.\nThis is an umbrella project which contains many subprojects that are specific to a given database.\nThe projects are developed by working together with many of the companies and developers that are behind these exciting technologies."
  },
  {
    "objectID": "springboot/boot-concepts-data.html#overview",
    "href": "springboot/boot-concepts-data.html#overview",
    "title": "Spring Boot: Data & DB",
    "section": "1 Overview",
    "text": "1 Overview\n\n\n\nSpring Data\n\n\n\nSpring Boot Data\n\n\n\n\n\n\n\nNote\n\n\n\nSpring Data is a collection of frameworks that provide developers with a simple and consistent way to access data from various databases and data stores.\n\n\nIt helps reduce boilerplate code and enables rapid development of data-driven applications by providing abstractions for common data access tasks such as CRUD operations, query creation, and pagination. Features:\n\nPowerful repository and custom object-mapping abstractions\nDynamic query derivation from repository method names\nImplementation domain base classes providing basic properties\nSupport for transparent auditing (created, last changed)\n\n\n\nSecondary features: Possibility to integrate custom repository code - Easy Spring integration via JavaConfig and custom XML namespaces - Advanced integration with Spring MVC controllers - Experimental support for cross-store persistence\nSpring Boot provides support for both SQL and NoSQL databases through its Spring Data module.\n\n\nSpring Boot supports both SQL and NoSQL databases through its Spring Data module, making it easy to work with different types of databases in your application.\n\nFor SQL databases, Spring Data provides support for popular relational databases like MySQL, PostgreSQL, Oracle, and SQL Server. The SQL support in Spring Boot is primarily based on the Java Persistence API (JPA) and provides easy-to-use abstractions for querying and manipulating data in a relational database.\n\n\nOn the other hand, for NoSQL databases like MongoDB or DynamoDB, Spring Data provides a consistent interface for working with various NoSQL data stores. The NoSQL support in Spring Boot is built on top of the Spring Data MongoDB module and offers features like object mapping, query building, and integration with the Spring Framework.\n\nTo use Spring Data in your Spring Boot application, you can add the appropriate Spring Data dependency to your project and configure the data source properties in your application.properties or application.yml file.\nOnce configured, you can use Spring Data repositories to interact with your database and perform CRUD operations on your data."
  },
  {
    "objectID": "springboot/boot-concepts-data.html#database-or-store",
    "href": "springboot/boot-concepts-data.html#database-or-store",
    "title": "Spring Boot: Data & DB",
    "section": "2 Database or store?",
    "text": "2 Database or store?\n\nBook: PIOTR FULMAŃSKI, NoSQL Theory and examples\n\nA datastore (store) is, as the name indicates, a place where data is stored. The simplest example of a store is a flat file saved on your disk.\nYou can also save data in a database, in which the data are stored physically in files, but those files are managed by some, very often sophisticated, management system.\n\nViewed from this perspective, database are a special type of datastore.\n\nNot all NoSQL databases have a builtin “manager”, or their functionality is very limited, so the management is done in the application level. That is why you may see them just as an another one storage system. Simply speaking, simple NoSQL databases (for example key-value) are very often referred as a store while those more complicated (graph for example) as a database, but this is not rule of the thumb."
  },
  {
    "objectID": "springboot/boot-concepts-data.html#sql",
    "href": "springboot/boot-concepts-data.html#sql",
    "title": "Spring Boot: Data & DB",
    "section": "3 SQL",
    "text": "3 SQL\n\n\n\nDatabase model used by SQL\n\n\nWe can classify database-management systems according to the database models that they support. Not going far into the past we can say that first large-scale used model, dominant in the market for more than 20 years, were relational databases arise in the 1970s.\nWe refer them as SQL databases because Structured Query Language was used by the vast majority of them for writing and querying data. SQL (in a sense: SQL databases) utilizes Edgar F. Codd’s relational model based on tabular data representation:\n\n\n\nSQL is relationnal"
  },
  {
    "objectID": "springboot/boot-concepts-data.html#nosql",
    "href": "springboot/boot-concepts-data.html#nosql",
    "title": "Spring Boot: Data & DB",
    "section": "4 NoSQL",
    "text": "4 NoSQL\n\nWhat is NoSQL?\n\nNoSQL databases (aka “not only SQL”) are non-tabular databases and store data differently than relational tables.\nNoSQL databases come in a variety of types based on their data model. The main types are document, key-value, wide-column, document-oriented and graph.\n\n\n\nWhat is NoSQL?\n\n\nThey provide flexible schemas and scale easily with large amounts of data and high user loads.\n\n\nDenormalization can be defined as the copying of the same data into multiple documents or tables in order to simplify/optimize query processing or to fit the user’s data into a particular data model.\n\n\n\nemployee NoSQL\n\n\n\nGoogle sheet Employee template"
  },
  {
    "objectID": "springboot/boot-concepts-data.html#sql-vs-nosql",
    "href": "springboot/boot-concepts-data.html#sql-vs-nosql",
    "title": "Spring Boot: Data & DB",
    "section": "5 SQL vs NoSQL",
    "text": "5 SQL vs NoSQL\n\n\n\nNoSQL vs. SQL: Important Differences\n\n\n\nExamples of SQL database engine are: MySQL, PostgreSQL, Microsoft SQL Server, SQLite and H2 Database.\n\n\nExamples of Non-Relational database engines are: MongoDB, Apache Cassandra, Redis, Couchbase, Apache HBase and DynamoDB AWS.\n\n\n5.1 Comparative table\n\n\n\n\n\n\n\n\nConcept\nSQL\nNoSQL\n\n\n\n\nData Model\nRelational\nDocument, Key-Value, Column-Family, Graph\n\n\nQuery Language\nStructured Query Language (SQL)\nQuery APIs, sometimes proprietary\n\n\nScalability\nVertical\nHorizontal\n\n\nData Consistency\nStrong\nEventual\n\n\nTransactional Support\nACID compliance\nLimited\n\n\nSchema Definition\nRequired\nOptional\n\n\nQuery Flexibility\nLimited\nFlexible\n\n\nJoin Operations\nComplex\nNot supported\n\n\nData Modeling\nFixed schema\nDynamic schema\n\n\nAvailability and Fault Tolerance\nLow\nHigh"
  },
  {
    "objectID": "springboot/boot-concepts-data.html#examples",
    "href": "springboot/boot-concepts-data.html#examples",
    "title": "Spring Boot: Data & DB",
    "section": "6 Examples",
    "text": "6 Examples\n\nEvolution of SQL DB mapping in Spring\nLab#SB04-1: JPA Inherence strategies\nLab#SB01-1: DataBase\n\n\n\n\n\n\n  Spring Boot: Rest \n\n\n\n  top \n\n\n\n Spring Boot: JPA"
  },
  {
    "objectID": "springboot/boot-concepts-injection.html",
    "href": "springboot/boot-concepts-injection.html",
    "title": "Spring Boot: Dependency Injection",
    "section": "",
    "text": "📘 Dependency Injection\nDependency injection (DI) is a design pattern that allows objects to receive their dependencies from external sources rather than creating them internally. In other words, it is a way to manage the dependencies between objects in a software application."
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#overview",
    "href": "springboot/boot-concepts-injection.html#overview",
    "title": "Spring Boot: Dependency Injection",
    "section": "1 Overview",
    "text": "1 Overview\nDependency injection (DI) is a design pattern that allows objects to receive their dependencies from external sources rather than creating them internally. In other words, it is a way to manage the dependencies between objects in a software application.\nIn Spring Boot, the dependency injection is provided by the Spring Framework. The Spring container is responsible for creating and managing the objects in the application, and it uses dependency injection to provide the objects with their dependencies.\nThere are thre types of dependency injection:\n\nConstructor injection: The dependencies are provided to the class through its constructor.\nSetter injection: The dependencies are provided to the class through setter methods.\nMethod Injection: The dependencies are provided to the class through an interface which declares the method(s)\n\nWith dependency injection, objects are no longer responsible for creating or managing their dependencies, which makes the code more maintainable and easier to test (not used in Spring Boot).\nThe @Autowired annotation is used in Spring Boot to automatically wire a bean from the Spring application context into a class field or method.\nThis allows you to use dependency injection to provide objects with their dependencies without having to manually create or manage them.\n\n\n\n\n\n\nDependency Injection\n\n\n\nDependency Injection (DI) is a design pattern that allows objects to receive their dependencies from external sources rather than creating them internally.\nSpring Boot usesDI to manage the dependencies between objects and provide them with their dependencies using Constructor injection and setter injection, the@Autowired annotation is used to wire the bean from the Spring application context."
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#inversion-of-control-ioc",
    "href": "springboot/boot-concepts-injection.html#inversion-of-control-ioc",
    "title": "Spring Boot: Dependency Injection",
    "section": "2 Inversion of Control IoC",
    "text": "2 Inversion of Control IoC\n\nInversionOfControl\nInversion of Control vs Dependency Injection\n\n\n\n\n\n\n\n\n\n\n\n\nDIP, IoC and DI\n\n\n\nIoC is a design pattern that allows for the inversion of control of object creation and management. DI is the process of providing dependencies to a class, rather than the class creating them itself.\nBoth IoC and DI are related to the DIP, which is a design principle that promotes decoupling and abstraction.\nThe hierarchy between these concepts is that IoC is the pattern that enables DI, and DI is a way of implementing the DIP.\n\n\nInversion of Control (IoC) is a design pattern commonly used in Spring Boot applications, where the framework is responsible for creating and managing objects (beans) and their dependencies.\nThe control of the application flow is inverted, as the framework decides when and how to instantiate objects, rather than the developer having to explicitly create them.\nThis simplifies the development process and makes the code more modular and testable."
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#dependency-inversion-principle-dip",
    "href": "springboot/boot-concepts-injection.html#dependency-inversion-principle-dip",
    "title": "Spring Boot: Dependency Injection",
    "section": "3 Dependency Inversion Principle DIP",
    "text": "3 Dependency Inversion Principle DIP\nThe Dependency Inversion Principle (DIP) is a software design principle that states that high-level modules should not depend on low-level modules, but both should depend on abstractions.\nThis allows for decoupling and easier maintenance of the codebase, as changes in low-level modules don’t affect high-level ones.\nThe use of interfaces and abstract classes are common in implementing the DIP."
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#dependency-injection-di",
    "href": "springboot/boot-concepts-injection.html#dependency-injection-di",
    "title": "Spring Boot: Dependency Injection",
    "section": "4 Dependency Injection DI",
    "text": "4 Dependency Injection DI\nDependency Injection (DI) is the process of providing dependencies (objects) to a class, rather than the class creating them itself.\nThis is often done using frameworks like Spring Boot, where dependencies are defined as beans and injected into other beans using annotations.\nThis reduces the amount of boilerplate code and makes the codebase more modular and maintainable.\nThe DI principle is closely related to the DIP, as it allows for the injection of abstractions rather than concrete implementations."
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#advantages",
    "href": "springboot/boot-concepts-injection.html#advantages",
    "title": "Spring Boot: Dependency Injection",
    "section": "5 Advantages",
    "text": "5 Advantages\n\nDependency Injection\n\nInversion of Control is a principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework.\nIt’s most often used in the context of object-oriented programming.\nBy contrast with traditional programming, in which our custom code makes calls to a library, IoC enables a framework to take control of the flow of a program and make calls to our custom code.\n\ndecoupling the execution of a task from its implementation\nmaking it easier to switch between different implementations\ngreater modularity of a program\ngreater ease in testing a program by isolating a component or mocking its dependencies and\nallowing components to communicate through contracts\n\n\n\n\n\n\n  Spring Boot: cycle \n\n\n\n  top \n\n\n\n Spring Boot: Annotations"
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html",
    "href": "springboot/boot-concepts-jpa-2.html",
    "title": "Spring Boot: JPA Mappings",
    "section": "",
    "text": "📘 JPA Mappings and relationships\nSpring Boot provides an implementation of the Java Persistence API (JPA) to simplify database access: ORM (Object-Relational Mapping)\nIn JPA, entity classes represent tables in the database, and relationships between entities are mapped using annotations."
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html#jpa-implementations-orm",
    "href": "springboot/boot-concepts-jpa-2.html#jpa-implementations-orm",
    "title": "Spring Boot: JPA Mappings",
    "section": "1 JPA Implementations: ORM",
    "text": "1 JPA Implementations: ORM\nOpenJPA, Hibernate, and EclipseLink are all popular ORM (Object-Relational Mapping) frameworks that provide implementations of the Java Persistence API (JPA).\nThese frameworks simplify database access and management by mapping Java objects to database tables, and they provide features to optimize database performance and reduce the amount of boilerplate code required to interact with the database.\n\n\n\nORM implemtations JPA: vendors\n\n\n\nOpenJPA is an Apache project that provides a lightweight, high-performance implementation of JPA.\nHibernate is a popular ORM framework that’s widely used in Spring Boot applications. It provides a rich set of features and has excellent community support.\nEclipseLink is an open-source JPA implementation that’s known for its performance and flexibility, and it’s frequently used in Java EE applications."
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html#orm-hibernate",
    "href": "springboot/boot-concepts-jpa-2.html#orm-hibernate",
    "title": "Spring Boot: JPA Mappings",
    "section": "2 ORM: Hibernate",
    "text": "2 ORM: Hibernate\nHibernate is a popular ORM (Object-Relational Mapping) framework that provides a powerful implementation of JPA. It’s widely used in Spring Boot applications to simplify database access and management.\n\n\n\n\n\nHibernate JPA\n\n\nHibernate uses annotations and XML configurations to map Java objects to database tables, and it provides several features to simplify CRUD (Create, Read, Update, and Delete) operations on the database.\nHibernate also provides support for caching, lazy loading, and transaction management, which can help you optimize the performance of your application.\n\n\n\nJPA Hibernate stack\n\n\n\n\nSpring Boot and Hibernate provide a powerful combination of tools for building Java-based web applications that interact with databases.\nBy using these frameworks together, you can simplify database access, improve performance, and focus on building the core functionality of your application.\nWhen you use Hibernate in your Spring Boot application, you can define entity classes using JPA annotations, just like you would with the standard JPA implementation provided by Spring Boot. Hibernate also provides its own set of annotations that can be used to fine-tune the behavior of the ORM framework.\nFor example, you can use the @GeneratedValue annotation to specify how primary keys are generated, or the @Fetch annotation to specify how data is retrieved from the database.\n\n\n\nJPA Hibernate architecture\n\n\nIn addition to its rich set of features, Hibernate is also known for its excellent documentation and community support. You can find plenty of tutorials, sample code, and forums online to help you get started with Hibernate in your Spring Boot application.\n\nJPA"
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html#annotations",
    "href": "springboot/boot-concepts-jpa-2.html#annotations",
    "title": "Spring Boot: JPA Mappings",
    "section": "3 Annotations",
    "text": "3 Annotations\n\nJPA Annotations\n\n\n\n\n\n\nAnnotation\nDescription\n\n\n\n\n@Entity\nSpecifies that the class is an entity and will be managed by the EntityManager.\n\n\n@Table\nSpecifies the database table name for the entity.\n\n\n@Id\nSpecifies the primary key field of the entity.\n\n\n@GeneratedValue\nSpecifies how the primary key should be generated.\n\n\n@Column\nSpecifies the database column name for a field.\n\n\n@JoinColumn\nSpecifies the join column when using a relationship.\n\n\n@OneToMany\nDefines a one-to-many relationship between two entities.\n\n\n@ManyToOne\nDefines a many-to-one relationship between two entities.\n\n\n@ManyToMany\nDefines a many-to-many relationship between two entities.\n\n\n@JoinTable\nSpecifies the join table for a many-to-many relationship.\n\n\n@Embedded\nSpecifies that the field should be mapped as an embedded object.\n\n\n@Transient\nSpecifies that the field should not be persisted to the database."
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html#relationships",
    "href": "springboot/boot-concepts-jpa-2.html#relationships",
    "title": "Spring Boot: JPA Mappings",
    "section": "4 Relationships",
    "text": "4 Relationships\nHere are some of the most common JPA mappings and relationships used in Spring Boot\n\n4.1 @OneToMany\n@OneToMany: This annotation is used to represent a one-to-many relationship between two entities.\n\n\nFor example, if a customer can have multiple orders, you can define a @OneToMany relationship between the Customer entity and the Order entity.\n\n\n\n\n\n\nExample:\n\n\n\nAPI Rest Author-Book @OneToMany CRUD with Swagger\n\n\n\n\n4.2 @ManyToOne\n@ManyToOne: This annotation is used to represent a many-to-one relationship between two entities.\n\n\nFor example, if an order belongs to a customer, you can define a @ManyToOne relationship between the Order entity and the Customer entity.\n\n\n\n\n\n\nExample:\n\n\n\nLibrary-Book @ManyToMany and @OneToOne CRUD\n\n\n\n\n4.3 @ManyToMany\n@ManyToMany: This annotation is used to represent a many-to-many relationship between two entities.\n\n\nFor example, if a book can have multiple authors and an author can have written multiple books, you can define a @ManyToMany relationship between the Book entity and the Author entity.\n\n\n\n\n\n\nExample:\n\n\n\nAPI Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence"
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html#inherence",
    "href": "springboot/boot-concepts-jpa-2.html#inherence",
    "title": "Spring Boot: JPA Mappings",
    "section": "5 Inherence",
    "text": "5 Inherence\nHere are some of the most common JPA inherence cases used in Spring Boot\n\n\n\n\n\n\nExample:\n\n\n\nSpring Boot Projects JPA Inherence strategies\n\n\n\n\n\n\n\n  Spring Boot: JPA \n\n\n\n  top \n\n\n\n Lab#SB00-1: Library UML"
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html",
    "href": "springboot/boot-concepts-jpa.html",
    "title": "Spring Boot: JPA & DI",
    "section": "",
    "text": "📘 JPA\nJPA stands for Java Persistence API.\nIt is a Java specification for managing, persisting, and accessing relational data in Java applications.\nJPA is a standard API for ORM (Object-Relational Mapping) and provides a way to map Java objects to relational databases."
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#overall",
    "href": "springboot/boot-concepts-jpa.html#overall",
    "title": "Spring Boot: JPA & DI",
    "section": "1 Overall",
    "text": "1 Overall\nIn Spring Boot, JPA is used to interact with databases. It provides a convenient and powerful way to perform CRUD operations on database tables and provides a lot of useful features such as caching, lazy loading, and automatic management of transaction.\nSpring Boot provides a number of auto-configuration options for JPA, so you don’t have to set up everything from scratch.\n\n\n\nSpring Boot JPA\n\n\nThe spring-boot-starter-data-jpa is a starter for using Spring Data JPA with Hibernate. It provides a convenient way to create JPA repositories, which can be used to perform CRUD operations on the database.\n<!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-jpa -->\n<dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-jpa</artifactId>\n    <version>3.0.4</version>\n</dependency>\nWhen using JPA in Spring Boot, you can use the @Entity annotation to define a class as a JPA entity, and the @Repository annotation to define a class as a JPA repository. This allows you to use the JPA repository to perform CRUD operations on the corresponding database table.\n\n\nSpring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA based repositories. This module deals with enhanced support for JPA based data access layers. It makes it easier to build Spring-powered applications that use data access technologies.\nFeatures:\n\nSophisticated support to build repositories based on Spring and JPA\nSupport for Querydsl predicates and thus type-safe JPA queries\nTransparent auditing of domain class\nPagination support, dynamic query execution, ability to integrate custom data access code\nValidation of @Query annotated queries at bootstrap time\nSupport for XML based entity mapping\nJavaConfig based repository configuration by introducing @EnableJpaRepositories.\n\n\nBasic Vocabulary\n\n\n\n\n\n\nAcronym\nDefinition\n\n\n\n\nORM\nObject-Relational Mapping, a programming technique for converting data between incompatible type systems in object-oriented programming languages and relational databases.\n\n\nDAO\nData Access Object, a design pattern that provides an abstract interface to access data from a database or other persistent storage mechanism.\n\n\nJPA\nJava Persistence API, a specification for object-relational mapping in Java that provides a standard way to map Java objects to relational databases."
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#spring-data-repositories",
    "href": "springboot/boot-concepts-jpa.html#spring-data-repositories",
    "title": "Spring Boot: JPA & DI",
    "section": "2 Spring Data Repositories",
    "text": "2 Spring Data Repositories\n\n\n\n\n\n\npring Data Repositories\n\n\n\nSpring Data Repositories provide a high-level, generic abstraction for data access that allows developers to work with data from various data sources, including relational databases, NoSQL databases, and other data stores, using a consistent and simplified API.\n\n\nimport org.springframework.data.repository.CrudRepository;\nimport java.util.Optional;\n//@Repository\npublic interface BookRepository extends CrudRepository <Book, Long> {\n    // custom query methods defined here\n    Optional<Book> findBookByTitle(String title);\n    Optional<Book> deleteBookByTitle(String title);\n}\nThe repositories eliminate the need for boilerplate code and allow developers to define query methods and dynamic queries in a straightforward manner.\n\n\n\nSpring Boot Repositories - Core concepts\n\n\nSpring Data Repositories also provide support for pagination, sorting, and auditing, as well as integration with other Spring technologies, such as Spring MVC and Spring Security.\n\n\nSpring Data Repositories simplify data access and enable rapid development of data-driven applications."
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#using-crudrepository",
    "href": "springboot/boot-concepts-jpa.html#using-crudrepository",
    "title": "Spring Boot: JPA & DI",
    "section": "3 Using CrudRepository",
    "text": "3 Using CrudRepository\nCrudRepository is an interface provided by Spring Data that defines a standard set of methods for performing CRUD (Create, Read, Update, and Delete) operations on entities.\nThe interface provides basic data access functionality and can be extended to provide additional functionality as needed.\nBookRepository:\nimport org.springframework.data.repository.CrudRepository;\nimport java.util.Optional;\n//@Repository\npublic interface BookRepository extends CrudRepository <Book, Long> {\n    // custom query methods defined here\n    Optional<Book> findBookByTitle(String title);\n    Optional<Book> deleteBookByTitle(String title);\n}\nWe use the @Autowired annotation to inject an instance of BookRepository into our Spring application, Spring’s dependency injection container will automatically instantiate a concrete implementation of the BookRepository interface and inject it into our application’s bookRepository object.\nThis implementation is typically a proxy object that provides the required functionality for data access.\nBookService:\nimport java.util.Optional;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class BookService {\n\n    @Autowired\n    BookRepository bookRepository;\n\n    public Iterable<Book> getAllBooks() {\n        return bookRepository.findAll();\n    }\nWith this object, we can use the methods defined in the CrudRepository interface, such as save(), findOne(), findAll(), and delete(), to perform CRUD operations on Book entities."
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#jpa-dependency-injection-and-repository",
    "href": "springboot/boot-concepts-jpa.html#jpa-dependency-injection-and-repository",
    "title": "Spring Boot: JPA & DI",
    "section": "4 JPA, Dependency Injection and Repository",
    "text": "4 JPA, Dependency Injection and Repository\n\n\n\nSpring Boot Overview\n\n\n\nIntroduction to Spring Framework\n\nThe Java Persistence API (JPA) is a popular Java framework used for Object-Relational Mapping (ORM). The JPA framework provides the @Repository annotation to identify the DAO (Data Access Object) layer of an application.\n\n\nThe@Repository annotation is a good example of the terms Dependency Inversion Principle (DIP), Dependency Injection (DI), and Inversion of Control (IoC) container.\nThe Dependency Inversion Principle (DIP) is a software design principle that states high-level modules should not depend on low-level modules, but both should depend on abstractions.\n\n\n\n\n\n\n@Repository\n\n\n\nThe @Repository annotation follows this principle by allowing the DAO layer to depend on an interface (abstraction) instead of directly depending on a concrete implementation.\nThis allows for easier maintenance, testing, and flexibility in changing the implementation of the DAO layer.\n\n\nDependency Injection (DI) is a design pattern that implements the DIP by injecting dependencies (objects or interfaces) into a class at runtime.\nIn the case of the @Repository annotation, the dependency is the EntityManager object, which is injected into the DAO class using the @PersistenceContext annotation.\nThis allows the DAO to be decoupled from the EntityManager implementation and provides flexibility to use different implementations of the EntityManager.\n\n\n\nDIP - Dependency Inversion Principle\n\n\n\n\nInversion of Control (IoC) container is a pattern used to manage the lifecycle of objects and their dependencies. It allows the framework to control the creation, configuration, and destruction of objects, rather than having the application manage them directly.\nThe @Repository annotation is an example of an IoC container because it is managed by the Spring framework. The framework handles the instantiation and injection of dependencies, such as the EntityManager, into the DAO classes.\nIn this case, the high order modules are the business logic layer and the low order modules are the data access layer. The business logic layer depends on the data access layer through an abstraction, and the data access layer depends on the EntityManager implementation through injection by the IoC container. This allows for a separation of concerns and easier maintenance and testing of each layer independently."
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#annotations",
    "href": "springboot/boot-concepts-jpa.html#annotations",
    "title": "Spring Boot: JPA & DI",
    "section": "5 Annotations",
    "text": "5 Annotations\n\nJPA Annotations\n\n\n\n\n\n\nAnnotation\nDescription\n\n\n\n\n@Entity\nSpecifies that the class is an entity and will be managed by the EntityManager.\n\n\n@Table\nSpecifies the database table name for the entity.\n\n\n@Id\nSpecifies the primary key field of the entity.\n\n\n@GeneratedValue\nSpecifies how the primary key should be generated.\n\n\n@Column\nSpecifies the database column name for a field.\n\n\n@JoinColumn\nSpecifies the join column when using a relationship.\n\n\n@OneToMany\nDefines a one-to-many relationship between two entities.\n\n\n@ManyToOne\nDefines a many-to-one relationship between two entities.\n\n\n@ManyToMany\nDefines a many-to-many relationship between two entities.\n\n\n@JoinTable\nSpecifies the join table for a many-to-many relationship.\n\n\n@Embedded\nSpecifies that the field should be mapped as an embedded object.\n\n\n@Transient\nSpecifies that the field should not be persisted to the database."
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#example",
    "href": "springboot/boot-concepts-jpa.html#example",
    "title": "Spring Boot: JPA & DI",
    "section": "6 Example",
    "text": "6 Example\n\nLibrary1 code github\nLibrary1 docs\n\n\n\n\n\n\n  Spring Boot: Data & DB \n\n\n\n  top \n\n\n\n Spring Boot: JPA Mappings"
  },
  {
    "objectID": "springboot/boot-concepts-model.html",
    "href": "springboot/boot-concepts-model.html",
    "title": "Spring Boot: Model",
    "section": "",
    "text": "In Spring Boot, the Model-View-Controller (MVC) pattern is used to separate the application logic into three components: Model - View -Controller"
  },
  {
    "objectID": "springboot/boot-concepts-model.html#overview",
    "href": "springboot/boot-concepts-model.html#overview",
    "title": "Spring Boot: Model",
    "section": "1 Overview",
    "text": "1 Overview\nIn Spring Boot, a model is simply a Java class that holds data and defines the structure of the data that will be passed between different layers of the application.\nTypically, these classes are annotated with @Entity or @Data to indicate that they are part of the data model.\nHere’s an example of a simple model class in Spring Boot:\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity // Indicates that this class is an entity in the data model\npublic class Product {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private String description;\n    private double price;\n    \n    // Constructors, getters, setters, and other methods omitted for brevity\n}\n\n\nIn this example, the Product class represents a product in an e-commerce application. It is annotated with @Entity to indicate that it is part of the data model, and it has four fields (id, name, description, and price) that define the structure of a product."
  },
  {
    "objectID": "springboot/boot-concepts-model.html#example-mvc",
    "href": "springboot/boot-concepts-model.html#example-mvc",
    "title": "Spring Boot: Model",
    "section": "2 Example MVC",
    "text": "2 Example MVC\n\nModel View Controller example by MDN Web Docs Glossary\n\nImagine a simple shopping list app. All we want is a list of the name, quantity and price of each item we need to buy this week. Below we’ll describe how we could implement some of this functionality using MVC.\n\n\n\nModel View Controller example\n\n\n\n\n\n\n\n\nThe Model\n\n\n\nThe model defines what data the app should contain. If the state of this data changes, then the model will usually notify the view (so the display can change as needed) and sometimes the controller (if different logic is needed to control the updated view).\nGoing back to our shopping list app, the model would specify what data the list items should contain — item, price, etc. — and what list items are already present.\n\n\n\n\n\n\n\n  Spring Boot: Thymeleaf \n\n\n\n  top \n\n\n\n Spring Boot: Rest"
  },
  {
    "objectID": "springboot/boot-concepts-rest.html",
    "href": "springboot/boot-concepts-rest.html",
    "title": "Spring Boot: Rest",
    "section": "",
    "text": "📘 Rest\nREST stands for Representational State Transfer. It is an architectural style for building web services that are designed to be lightweight, stateless, and easy to scale."
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#overview",
    "href": "springboot/boot-concepts-rest.html#overview",
    "title": "Spring Boot: Rest",
    "section": "1 Overview",
    "text": "1 Overview\nAn API is a set of definitions and protocols for building and integrating application software.\n\nIt’s sometimes referred to as a contract between an information provider and an information user—establishing the content required from the consumer (the call) and the content required by the producer (the response).\n\n\n\nFor example, the API design for a weather service could specify that the user supply a zip code and that the producer reply with a 2-part answer, the first being the high temperature, and the second being the low temperature.\n\n\n\n\n\n\nRest\n\n\n\nREST is a set of architectural constraints, not a protocol or a standard. API developers can implement REST in a variety of ways.\n\n\nWhen a client request is made via a RESTful API, it transfers a representation of the state of the resource to the requester or endpoint.\nThis information, or representation, is delivered in one of several formats via HTTP: JSON (Javascript Object Notation), HTML, XLT, Python, PHP, or plain text.\n\n\n\n\n\n\nJSON\n\n\n\nJSON is the most generally popular file format to use because, despite its name, it’s language-agnostic, as well as readable by both humans and machines."
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#stateless",
    "href": "springboot/boot-concepts-rest.html#stateless",
    "title": "Spring Boot: Rest",
    "section": "2 stateless",
    "text": "2 stateless\nIn REST (Representational State Transfer), a stateless system is one in which the server does not maintain any state or session information about the client between requests.\nThis means that each request from the client to the server is treated as an independent and complete operation, and the server responds with the appropriate data based solely on the information provided in the request.\nIn other words, the server does not keep track of any information about the previous requests made by the client. This is in contrast to stateful systems, where the server maintains information about the client’s session or context, and uses that information to provide a personalized response to each request.\n\n\n\n\n\n\nstateless architecture\n\n\n\nThe stateless architecture of REST provides several benefits, such as improved scalability, simplicity, and reliability, as well as allowing requests to be processed in parallel by different servers or nodes.\nHowever, it also means that the client needs to include all the necessary information in each request, and the server cannot assume any context or information beyond what is provided in the request."
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#http-messages",
    "href": "springboot/boot-concepts-rest.html#http-messages",
    "title": "Spring Boot: Rest",
    "section": "3 HTTP messages",
    "text": "3 HTTP messages\nHTTP messages are how data is exchanged between a server and a client.\nThere are two types of messages:\n\nrequests sent by the client to trigger an action on the server,\nand responses, the answer from the server.\n\nHTTP messages are composed of textual information encoded in ASCII, and span over multiple lines.\n\n\nIn HTTP/1.1, and earlier versions of the protocol, these messages were openly sent across the connection. In HTTP/2, the once human-readable message is now divided up into HTTP frames, providing optimization and performance improvements.\n\n\n\nHTTP message\n\n\nHTTP requests, and responses, share similar structure and are composed of:\n\nA start-line describing the requests to be implemented, or its status of whether successful or a failure. This start-line is always a single line.\nAn optional set of HTTP headers specifying the request, or describing the body included in the message.\nA blank line indicating all meta-information for the request has been sent.\nAn optional body containing data associated with the request (like content of an HTML form), or the document associated with a response. The presence of the body and its size is specified by the start-line and HTTP headers."
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#http-status-messages",
    "href": "springboot/boot-concepts-rest.html#http-status-messages",
    "title": "Spring Boot: Rest",
    "section": "4 HTTP status messages",
    "text": "4 HTTP status messages\n\nHTTP status messages\n\n\n\n\nHTTP status messages poster\n\n\nSource-status-code-poster by Steve Schoger"
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#spring-boot",
    "href": "springboot/boot-concepts-rest.html#spring-boot",
    "title": "Spring Boot: Rest",
    "section": "5 Spring Boot",
    "text": "5 Spring Boot\nIn Spring Boot, the Spring MVC framework is used to build RESTful web services.\nThe @RestController annotation is used to define a class as a RESTful web service controller. This annotation is a combination of the @Controller and @ResponseBody annotations, which means that the class is a controller and the methods return the data directly rather than returning the name of a view.\nThe @RequestMapping annotation is used to map HTTP requests to specific methods in a controller class. This annotation can be used at the class level or the method level to define the path that the method should handle.\nIn addition to these annotations, Spring Boot also provides a number of other features that make it easy to build RESTful web services, such as support for JSON and XML serialization and deserialization, automatic content negotiation, and built-in exception handling.\n\n\n\n\n\n\nRest and Spring Boot\n\n\n\nIn summary, REST stands for Representational State Transfer.\nIn Spring Boot, the Spring MVC framework is used to build RESTful web services, the @RestController and @RequestMapping annotations are used to define a class as a RESTful web service controller and map HTTP requests to specific methods, respectively.\nSpring Boot provides many features to make building RESTful web services easy, such as support for JSON and XML serialization and deserialization, automatic content negotiation, and built-in exception handling."
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#using-annotations",
    "href": "springboot/boot-concepts-rest.html#using-annotations",
    "title": "Spring Boot: Rest",
    "section": "6 Using Annotations",
    "text": "6 Using Annotations\nIn this table, we will explore some of the most commonly used annotations in Spring Boot. These annotations can be used to map HTTP requests to controller methods, extract data from the request, bind data to model attributes, and handle exceptions. Understanding these annotations is essential for building Spring Boot applications that are reliable, scalable, and maintainable.\n\nSpring Boot Annotations\n\n\n\n\n\n\nAnnotation\nDescription\n\n\n\n\n@Controller\nIndicates that a class serves as a Spring Boot controller.\n\n\n@RequestMapping\nMaps HTTP requests to controller methods.\n\n\n@GetMapping\nMaps HTTP GET requests to controller methods.\n\n\n@PostMapping\nMaps HTTP POST requests to controller methods.\n\n\n@PutMapping\nMaps HTTP PUT requests to controller methods.\n\n\n@DeleteMapping\nMaps HTTP DELETE requests to controller methods.\n\n\n@PathVariable\nExtracts a variable from the URL path.\n\n\n@RequestParam\nExtracts a variable from the query string or request body.\n\n\n@ModelAttribute\nBinds a method parameter to a model attribute.\n\n\n@SessionAttribute\nBinds a method parameter to a session attribute.\n\n\n@InitBinder\nInitializes a web data binder for a specific controller method.\n\n\n@ExceptionHandler\nHandles exceptions thrown by a controller method.\n\n\n@ResponseStatus\nSets the HTTP status code for a controller method.\n\n\n@ResponseBody\nIndicates that a controller method returns a response body instead of a view.\n\n\n@ControllerAdvice\nProvides global exception handling for controllers.\n\n\n\nGET, POST, PUT, PATCH, and DELETE are HTTP methods that are used to perform CRUD (Create, Read, Update, and Delete) operations on resources in a RESTful API.\n\nGET: retrieves a representation of a resource from the server.\nPOST: creates a new resource on the server.\nPUT: updates an existing resource on the server.\nPATCH: partially updates an existing resource on the server.\nDELETE: deletes a resource from the server."
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#api-rest-clean-style",
    "href": "springboot/boot-concepts-rest.html#api-rest-clean-style",
    "title": "Spring Boot: Rest",
    "section": "7 API Rest clean style",
    "text": "7 API Rest clean style\nWhen designing an API in a RESTful style, it’s important to follow some best practices to ensure that your API is easy to understand, maintain, and use.\nHere are some guidelines for creating a clean RESTful API:\n\nUse HTTP methods: GET, POST, PUT, PATCH, DELETE.\nUse resource-oriented URLs with clear hierarchy, plurals, and nouns: domains\nUse query parameters for filtering and pagination.\nUse HTTP status codes to indicate request results.\nUse consistent response formats, such as JSON: @ResponseEntity\nUse versioning to handle API changes.\nProvide clear documentation with examples and practices.\n\n\n\n\nAPI Rest clean style"
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#api-rest-mindmap",
    "href": "springboot/boot-concepts-rest.html#api-rest-mindmap",
    "title": "Spring Boot: Rest",
    "section": "8 API Rest mindmap",
    "text": "8 API Rest mindmap\n\n\n\nAPI Rest roadmap-mindset"
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#example",
    "href": "springboot/boot-concepts-rest.html#example",
    "title": "Spring Boot: Rest",
    "section": "9 Example",
    "text": "9 Example\n@RestController\n@RequestMapping(\"/api\")\npublic class MyController {\n    \n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello, world!\";\n    }\n    \n    @PostMapping(\"/data\")\n    public ResponseEntity<Void> postData(@RequestBody MyData data) {\n        // Process the data...\n        return ResponseEntity.ok().build();\n    }\n}\n\n\nBy defining controllers like this, you can create RESTful APIs and web applications that can handle a wide range of HTTP requests and responses.\n\nThe method then returns a ResponseEntity object with an HTTP status code of 200 (OK) and an empty response body.\n\nIn this example, the @RestController annotation indicates that this class is a controller, and the @RequestMapping(\"/api\") annotation specifies that all routes in this controller should be prefixed with “/api”.\nThe hello() method is annotated with @GetMapping(\"/hello\"), which means it will handle GET requests to the \"/api/hello\" endpoint and return the string “Hello, world!”.\nThe postData() method is annotated with @PostMapping(\"/data\"), which means it will handle POST requests to the \"/api/data\" endpoint and accept a JSON payload in the request body, which will be automatically converted to a MyData object using Spring’s request body parsing functionality.\n\n\n\n\n\n  Spring Boot: Model \n\n\n\n  top \n\n\n\n Spring Boot: Data & DB"
  },
  {
    "objectID": "springboot/boot-concepts-th.html",
    "href": "springboot/boot-concepts-th.html",
    "title": "Spring Boot: Thymeleaf",
    "section": "",
    "text": "In Spring Boot, the Model-View-Controller (MVC) pattern is used to separate the application logic into three components: Model - View -Controller"
  },
  {
    "objectID": "springboot/boot-concepts-th.html#overview",
    "href": "springboot/boot-concepts-th.html#overview",
    "title": "Spring Boot: Thymeleaf",
    "section": "1 Overview",
    "text": "1 Overview\nThymeleaf uses HTML attributes to add functionality and dynamic behavior to web pages, allowing for server-side rendering and template processing.\n<p th:text=\"'Thymeleaf will display this'\">text</p>\nHere Thymeleaf will process the text inside the th:text attribute, and replace the contents of the <p> tag with it.\nThymeleaf works by replacing the contents of the tags that its attributes are defined on. so the final in the browser output will be:\n<p>Thymeleaf will display this</p>\nNotice that the special attributes are now gone, as well as the text “text” which is now replace with the contents of the Thymeleaf attribute.\nA more complicated example:\n<tr th:each=\"prod : ${prods}\">\n    <td th:text=\"${prod.name}\">Onions</td>\n    <td th:text=\"${prod.price}\">2.41</td>\n<tr>\nHere Thymeleaf will repeat the <tr> with the list of products, this is defined by the attribute th:each, it will also remove the dummy content in both the <td> tags, and replace them with the content that is evaluated from th:text=\"${prod.name}\" and th:text=\"${prod.price}\"."
  },
  {
    "objectID": "springboot/boot-concepts-th.html#configuration",
    "href": "springboot/boot-concepts-th.html#configuration",
    "title": "Spring Boot: Thymeleaf",
    "section": "2 Configuration",
    "text": "2 Configuration\nIn order to use thymeleaf in a project, we need to add the following starter to the dependency:\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\nThe starter spring-boot-starter-thymeleaf added to the project, thanks to the auto-configuration mechanism. Default values include:\n\nHTML templates should be in the resources/templates directory (this is the so-called root)\nfiles should have the html extension (so we won’t have to duplicate this information in the code)\nviewResolver has an appropriate implementation (thymeleafViewResolver)"
  },
  {
    "objectID": "springboot/boot-concepts-th.html#passing-data-to-views-controller-and-view",
    "href": "springboot/boot-concepts-th.html#passing-data-to-views-controller-and-view",
    "title": "Spring Boot: Thymeleaf",
    "section": "3 Passing data to views: @Controller and View",
    "text": "3 Passing data to views: @Controller and View\nThe @Controller will retrun a String object: it will display an HTML view with the appropriate message at the address:\n\nhttp://localhost:8080/\n\nThymeleaf allows you to define templates of HTML views. In order to be able to use additional Thymeleaf functionalities we need to add the appropriate **namespace** to the HTML document (and the html tag):\n\nxmlns:th=“http://www.thymeleaf.org”\n\n\n\n\n\n\n\nDefine the places to replace in the HTML template as follows:\n\n\n\nin the tag we indicate the attribute that should be replaced with the name. We precede this attribute with the name namespace and the character :, e.g.:\n\n<p th:text=...></p>\n\nindicate the value to be replaced inside the braces and precede it with a dollar sign, e.g. ${myCustomAttributeName}"
  },
  {
    "objectID": "springboot/boot-concepts-th.html#messages",
    "href": "springboot/boot-concepts-th.html#messages",
    "title": "Spring Boot: Thymeleaf",
    "section": "4 Messages",
    "text": "4 Messages\nThymeleaf by default allows you to define such messages in the messages.properties file, which by default should be located directly in the resources directory.\nIn this file we store the keys and the corresponding values. In the HTML template, we refer to the key using the # sign:\n\nhi.msg=Hi there!\n\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<body>\n    <p th:text=\"#{hi.msg}\"></p\n\n    <a href=\"?lang=fr\">Français</a>\n\n</body>\n</html>\nIn application.properties, we should define locale:\n\nspring.mvc.locale=en\n\nWe could add another lenguage by creating a new file named messages_fr.properties (messages_cat.properties, messages_es.properties, messages_ja.properties) in the same directory.\n\nresources (examples)\n\nThis approach also allows the implementation of internationalization by means of the so-called interceptors:\n@Bean\npublic LocaleResolver localeResolver() {\n    SessionLocaleResolver resolver = new SessionLocaleResolver();\n    resolver.setDefaultLocale(Locale.ENGLISH);\n    return resolver;\n}\n\n@Bean\npublic LocaleChangeInterceptor localeChangeInterceptor() {\n    LocaleChangeInterceptor interceptor = new LocaleChangeInterceptor();\n    interceptor.setParamName(\"lang\");\n    return interceptor;\n}\n\n@Override\npublic void addInterceptors(InterceptorRegistry registry) {\n    registry.addInterceptor(localeChangeInterceptor());\n}"
  },
  {
    "objectID": "springboot/boot-concepts-th.html#thymeleaf-templates-engine",
    "href": "springboot/boot-concepts-th.html#thymeleaf-templates-engine",
    "title": "Spring Boot: Thymeleaf",
    "section": "5 ThymeLeaf Templates Engine",
    "text": "5 ThymeLeaf Templates Engine\nMost Thymeleaf attributes allow their values to be set as or containing expressions, which we will call Standard Expressions because of the dialects they are used in. These can be of five types:\n\n\n\n\n\n\nThymeleaf expresssions\n\n\n\n\n${…} : Variable expressions.\n*{…} : Selection expressions.\n#{…} : Message (i18n) expressions.\n@... : Link (URL) expressions.\n~{…} : Fragment expressions.\n__{…} : use an element inside another\n\n\n\nAttributes th:\n\n\n\n\n\n\nThyemleaf attributes\n\n\n\n\nmessage: <p th:text=\"#{msg.welcome}\">Welcome everyone!</p>\nlist: <li th:each=\"book : ${books}\" th:text=\"${book.title}\">En las Orillas del Sar</li>\nlink: <form th:action=\"@{/createOrder}\">\naction: <input type=\"button\" th:value**=\"#{form.submit}\" />\npath: <a th:href=\"@{/admin/users}\">\n\n\n\nHow to write th:\n\n\n\nThymeLeaf how TH: works (1/3)"
  },
  {
    "objectID": "springboot/boot-concepts-th.html#fragments",
    "href": "springboot/boot-concepts-th.html#fragments",
    "title": "Spring Boot: Thymeleaf",
    "section": "6 Fragments",
    "text": "6 Fragments\n\nThymeleaf Views: fragments\nemployeeCourse repository\n\n\n\nUsing fragments in Thymeleaf can make it easier to maintain and update web pages, as changes to a fragment will be reflected in all pages that include it.\nIn Thymeleaf, a fragment is a reusable piece of a web page that can be included in multiple pages. It can contain HTML markup, Thymeleaf expressions, and other Thymeleaf features.\nFragments are defined in Thymeleaf using the th:fragment attribute, which is added to any HTML element.\nThe value of the attribute is the name of the fragment. For example:\n<div th:fragment=\"header\">\n   <h1>Welcome to my website!</h1>\n</div>\nThis defines a fragment called “header” that contains a heading element. This fragment can then be included in other pages using the th:replace or th:include attributes.\nFor example:\n<html>\n   <body>\n      <div th:replace=\"fragments/header :: header\"></div>\n      <p>This is the content of my page.</p>\n   </body>\n</html>\nThis code includes the “header” fragment in the page using the th:replace attribute. The :: syntax is used to specify the fragment name, and the fragments/header prefix specifies the location of the fragment file."
  },
  {
    "objectID": "springboot/boot-concepts-th.html#layout",
    "href": "springboot/boot-concepts-th.html#layout",
    "title": "Spring Boot: Thymeleaf",
    "section": "7 Layout",
    "text": "7 Layout\n\nemployeeCourse repository\n\n\n\nUsing the Layout Dialect can make it easier to maintain a consistent layout across your web pages, and simplify the process of creating new pages.\nThymeleaf Layout Dialect is a third-party dialect that provides a way to define a common layout for a set of web pages in Thymeleaf.\nWith the Layout Dialect, you can define a template that contains the common structure and layout of your web pages, and then include the content of each page in the appropriate section of the template.\nTo use the Layout Dialect, you need to add the dialect dependency (for Maven):\n<dependency>\n   <groupId>nz.net.ultraq.thymeleaf</groupId>\n   <artifactId>thymeleaf-layout-dialect</artifactId>\n   <version>2.5.1</version>\n</dependency>\nOnce you have added the dependency, you can use the Layout Dialect in your Thymeleaf templates. Here’s an example of how to define a layout:\n<!DOCTYPE html>\n<html>\n   <head>\n      <title>My Website</title>\n   </head>\n   <body>\n      <header th:replace=\"fragments/header :: header\"></header>\n      <div layout:fragment=\"content\"></div>\n      <footer th:replace=\"fragments/footer :: footer\"></footer>\n   </body>\n</html>\nThis template defines a layout that includes a header and a footer. The layout:fragment attribute is used to define a section where the content of each page will be included.\nTo use this layout in a page, you can create a new template that includes the layout and defines the content:\n<!DOCTYPE html>\n<html xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\">\n   <head>\n      <title>My Page</title>\n   </head>\n   <body>\n      <div layout:decorator=\"layout/template\">\n         <div layout:fragment=\"content\">\n            <p>This is the content of my page.</p>\n         </div>\n      </div>\n   </body>\n</html>\nThis page includes the layout by setting the layout:decorator attribute to the path of the layout template. The content of the page is defined inside the layout:fragment attribute."
  },
  {
    "objectID": "springboot/boot-concepts-th.html#cheatsheet",
    "href": "springboot/boot-concepts-th.html#cheatsheet",
    "title": "Spring Boot: Thymeleaf",
    "section": "8 CheatSheet",
    "text": "8 CheatSheet\n\nThymeleaf CheatSheet\n\n\n\n\n\n\n\nFeature\nDescription\nSyntax\n\n\n\n\nth:text\nSets the text of an element\n<p th:text=\"${someValue}\">Default Text</p>\n\n\nth:if\nConditionally renders an element\n<p th:if=\"${someCondition}\">Visible when condition is true</p>\n\n\nth:each\nLoops over a collection and renders an element for each item\n<ul><li th:each=\"item : ${items}\" th:text=\"${item}\">Default Text</li></ul>\n\n\nth:object\nBinds a form to an object and sets its properties\n<form th:object=\"${user}\"><input th:field=\"*{name}\" /></form>\n\n\nth:action\nSets the URL for a form’s submission\n<form th:action=\"@{/submit}\" method=\"post\">\n\n\nth:href\nSets the URL for an anchor tag\n<a th:href=\"@{/page}\">Link Text</a>\n\n\nth:src\nSets the source URL for an image tag\n<img th:src=\"@{/image.jpg}\" alt=\"Alt Text\" />\n\n\nth:value\nSets the value of an input field\n<input th:value=\"${someValue}\" />\n\n\nth:selected\nConditionally selects an option in a select field\n<select><option th:selected=\"${isSelected}\">Option Text</option></select>\n\n\nth:disabled\nConditionally disables an input field\n<input th:disabled=\"${isDisabled}\" />\n\n\nth:readonly\nConditionally sets an input field as read-only\n<input th:readonly=\"${isReadOnly}\" />\n\n\nth:classappend\nConditionally appends a CSS class to an element\n<div class=\"default\" th:classappend=\"${additionalClass}\"></div>\n\n\nth:style\nSets the style attribute of an element\n<div th:style=\"'background-color:' + ${bgColor} + ';'\"></div>\n\n\nth:attr\nSets any attribute of an element\n<input th:attr=\"data-id=${itemId}\" />\n\n\nth:replace\nReplaces an element with another\n<div th:replace=\"fragments/header :: header\"></div>\n\n\nth:include\nIncludes a fragment of a template\n<div th:include=\"fragments/footer :: footer\"></div>\n\n\nth:unless\nConditionally renders an element when a condition is false\n<p th:unless=\"${someCondition}\">Visible when condition is false</p>\n\n\nth:inline\nSets the inline mode of an element\n<script th:inline=\"javascript\">alert([[${message}]]);</script>\n\n\nth:textappend\nAppends text to an element\n<span th:textappend=\"${additionalText}\">Default Text</span>\n\n\nth:with\nSets a local variable in the current context\n<div th:with=\"varName=${someValue}\"></div>\n\n\n\n\nA Cheat Sheet for using the Thymeleaf templating Engine\nMVC and Thymeleaf\n\n\n\n\n\n\n  Spring Boot: View \n\n\n\n  top \n\n\n\n Spring Boot: Model"
  },
  {
    "objectID": "springboot/boot-concepts-view.html",
    "href": "springboot/boot-concepts-view.html",
    "title": "Spring Boot: View",
    "section": "",
    "text": "In Spring Boot, the Model-View-Controller (MVC) pattern is used to separate the application logic into three components: Model - View -Controller"
  },
  {
    "objectID": "springboot/boot-concepts-view.html#example1-model",
    "href": "springboot/boot-concepts-view.html#example1-model",
    "title": "Spring Boot: View",
    "section": "1 Example1: Model",
    "text": "1 Example1: Model\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1 th:text=\"${message}\">Hello, World!</h1>\n</body>\n</html>\nIn this template, the th:text attribute is used to set the text of the <h1> tag to the value of the message attribute in the model. The expression ${message} evaluates to the value of the message attribute.\nAssuming that this template is saved in a file named home.html in your application’s templates directory, the HomeController will render a message that says:\n\n“Welcome to my Spring Boot app!”\n\nwhen you visit theURL /\nThe value of the message attribute is set in the home() method of the controller.\nExample1 Controller"
  },
  {
    "objectID": "springboot/boot-concepts-view.html#example2-pathvariable-and-requestbody",
    "href": "springboot/boot-concepts-view.html#example2-pathvariable-and-requestbody",
    "title": "Spring Boot: View",
    "section": "2 Example2: @PathVariable and @RequestBody",
    "text": "2 Example2: @PathVariable and @RequestBody\nThymeleaf templates that can be used with the hello(), createUser(), and getUserById() methods:\nhello.html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>Hello</title>\n</head>\n<body>\n    <h1 th:text=\"${message}\">Hello, World!</h1>\n</body>\n</html>\nIn this template, the th:text attribute is used to set the text of the <h1> tag to the value of the message attribute in the model. The value of message is set in the hello() method of the controller.\nuser.html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>User</title>\n</head>\n<body>\n    <h1 th:text=\"${user.name}\">User</h1>\n    <p th:text=\"${user.email}\"></p>\n</body>\n</html>\nIn this template, the th:text attribute is used to set the text of the <h1> tag to the value of the name property of the user object in the model.\nThe th:text attribute of the <p> tag is used to set its text to the value of the email property of the user object in the model.\nAssuming that these templates are saved in files named hello.html and user.html, respectively, in your application’s templates directory, the hello() method will render a message that says:\n\n“Hello, World!”\n\nwhen you visit the URL /hello\nThe createUser() method doesn’t return a view, so it doesn’t need a Thymeleaf template.\nFinally, the getUserById() method will render a page that displays the details of a user when you visit the URL /users/{id}, where {id} is the ID of the user.\nThe details of the user are passed to the template using the model.addAttribute() method.\nThe th:text attribute is used to set the text of the <h1> tag to the name of the user, and the th:text attribute of the <p> tag is used to set its text to the email of the user.\nExample2 Controller"
  },
  {
    "objectID": "springboot/boot-concepts-view.html#example3-requestparam",
    "href": "springboot/boot-concepts-view.html#example3-requestparam",
    "title": "Spring Boot: View",
    "section": "3 Example3: @RequestParam",
    "text": "3 Example3: @RequestParam\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>Example</title>\n</head>\n<body>\n    <h1 th:text=\"'Hello, ' + ${message}\">Hello, World!</h1>\n</body>\n</html>\nIn this template, the th:text attribute is used to set the text of the <h1> tag to the value of the message attribute in the model.\nThe expression 'Hello, ' + ${message} concatenates the string \"Hello, \" with the value of the message attribute.\nAssuming that this template is saved in a file named hello.html in your application’s templates directory, the ExampleController will render a message that says:\n\n\nFor example, if you visit the URL /hello?name=John, the message will say “Hello, John!”.\n\n“Hello, {name}!”\n\nwhen you visit the URL:\n\n/hello?name=John\n\nwhere {name} is the value of the name parameter in the query string.\nExample3 Controller"
  },
  {
    "objectID": "springboot/boot-concepts-view.html#thymeleaf",
    "href": "springboot/boot-concepts-view.html#thymeleaf",
    "title": "Spring Boot: View",
    "section": "4 Thymeleaf",
    "text": "4 Thymeleaf\n\nLibrary5 Documentation\nRepo GitHub Code\n\n\n4.1 ThymeLeaf Templates Engine\nMost Thymeleaf attributes allow their values to be set as or containing expressions, which we will call Standard Expressions because of the dialects they are used in. These can be of five types:\n\n\n\n\n\n\nThymeleaf expresssions\n\n\n\n\n${…} : Variable expressions.\n*{…} : Selection expressions.\n#{…} : Message (i18n) expressions.\n@... : Link (URL) expressions.\n~{…} : Fragment expressions.\n__{…} : use an element inside another\n\n\n\nAttributes th:\n\n\n\n\n\n\nThyemleaf attributes\n\n\n\n\nmessage: <p th:text=\"#{msg.welcome}\">Welcome everyone!</p>\nlist: <li th:each=\"book : ${books}\" th:text=\"${book.title}\">En las Orillas del Sar</li>\nlink: <form th:action=\"@{/createOrder}\">\naction: <input type=\"button\" th:value**=\"#{form.submit}\" />\npath: <a th:href=\"@{/admin/users}\">\n\n\n\nHow to write th:\n\n\n\nThymeLeaf how TH: works (1/3)\n\n\n\n\n\nThymeLeaf how TH: works (2/3)\n\n\n\n\n\nThymeLeaf how TH: works (3/3)\n\n\n\n\n\n\n\n  Spring Boot: Controller \n\n\n\n  top \n\n\n\n Spring Boot: Thymeleaf"
  },
  {
    "objectID": "springboot/boot-what-basics.html",
    "href": "springboot/boot-what-basics.html",
    "title": "Spring Boot: fundamentals",
    "section": "",
    "text": "📘 Spring Boot\nWhat?\nJava Spring Framework (Spring Framework) is a popular, open source, enterprise-level framework for creating standalone, production-grade applications that run on the Java Virtual Machine (JVM).\nWhy?\nSpring makes programming Java quicker, easier, and safer for everybody.\nSpring’s focus on speed, simplicity, and productivity has made it the world’s most popular Java framework.\nSpring Boot provides a set of pre-configured options and defaults, as well as a set of tools for quickly creating and running an application .\nSpring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can just run.\nWe take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.\nIf you’re looking for information about a specific version, or instructions about how to upgrade from an earlier release, check out the project release notes section on the wiki."
  },
  {
    "objectID": "springboot/boot-what-basics.html#basic-concepts",
    "href": "springboot/boot-what-basics.html#basic-concepts",
    "title": "Spring Boot: fundamentals",
    "section": "1 Basic Concepts",
    "text": "1 Basic Concepts\nSpring Boot is a framework for building applications based on the Spring Framework. It aims to simplify the development process by providing a set of pre-configured options and defaults, as well as a set of tools for quickly creating and running an application. Some key concepts of Spring Boot include:\n\nAuto-configuration: Spring Boot automatically configures your application based on the dependencies that you have added, eliminating the need for manual configuration.\nStarters: Spring Boot provides a set of “starters” that are pre-configured dependencies for common functionality, such as web development, data access, and security.\nActuator: Spring Boot includes an “Actuator” that provides endpoints for monitoring and managing your application, such as health checks, metrics, and trace information.\nCommand Line Interface: Spring Boot provides a command line interface (CLI) for quickly creating and running applications.\nSpring Initializer: Spring Initializer is a web service that provides a simple way to generate a basic structure for a Spring Boot application.\n\nAll of these concepts are designed to make it easy to build and run a Spring-based application, with minimal configuration and setup required."
  },
  {
    "objectID": "springboot/boot-what-basics.html#fundamentals",
    "href": "springboot/boot-what-basics.html#fundamentals",
    "title": "Spring Boot: fundamentals",
    "section": "2 Fundamentals",
    "text": "2 Fundamentals\n\n\n\nSpring Boot\n\n\nSpring Boot is built on top of the Spring Framework, which is a Java-based framework for building enterprise applications. Some of the key concepts of Spring Boot and how it functions include:\n\nBeans: In Spring, a bean is a Java object that is managed by the Spring container. Beans are typically defined in configuration files, and the Spring container is responsible for instantiating, configuring, and managing the lifecycle of these beans.\nDependency Injection: Spring uses dependency injection to manage the dependencies between beans. This means that instead of instantiating and configuring dependencies manually, you can use annotations or configuration files to tell the Spring container which dependencies a bean has and how they should be instantiated.\nObject-Oriented Programming: Spring is based on object-oriented programming principles, and it uses interfaces and inheritance to create a modular and reusable codebase.\nAspect-Oriented Programming: Spring also provides support for Aspect-Oriented Programming (AOP), which allows you to separate cross-cutting concerns such as logging, security, and transaction management from the core business logic of your application.\nData Access: Spring Boot provides a set of starters and libraries for connecting to databases and performing data access operations. It also provides support for Object-Relational Mapping (ORM) frameworks such as Hibernate and JPA.\nWeb Development: Spring Boot provides a set of starters and libraries for building web applications and RESTful web services. It also provides support for web technologies such as Spring MVC and Thymeleaf.\nAnnotations: Spring Boot uses annotations extensively to configure beans and manage dependencies. Understanding the different annotations available in Spring, such as @Bean, @Autowired, and @Component, can help you effectively use the framework.\nMVC (Model-View-Controller): Spring Boot provides support for the MVC architectural pattern, which separates the application into three layers: the model (data), the view (presentation), and the controller (logic). Understanding how MVC works in Spring Boot can help you structure your application effectively.\nREST (Representational State Transfer): Spring Boot provides support for building RESTful web services. Understanding the principles of REST and how to create RESTful web services using Spring Boot can help you effectively use the framework.\n\nOverall, Spring Boot functions by providing a set of pre-configured options and defaults, as well as a set of tools for quickly creating and running an application using the Spring Framework.\nIt uses concepts such as beans, dependency injection, and OOP to make it easy to build and run a Spring-based application, with minimal configuration and setup required.\n\n\n\n\n\n  Springs Servlets \n\n\n\n  top \n\n\n\n Spring Boot: create a Project"
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html",
    "href": "springboot/boot-what-create-th-h2.html",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "",
    "text": "📘 Create a Spring Boot Project\n\nCreate a Maven Spring Project\nInstall H2 DB\nDefine Application.properties\nCreate Model: @Entity Book and JPA @Repository\nCreate @Controller and @Service\nCreate HTML template with Thymeleaf"
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#pom.xml-and-dependencies",
    "href": "springboot/boot-what-create-th-h2.html#pom.xml-and-dependencies",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "1.1 POM.xml and dependencies",
    "text": "1.1 POM.xml and dependencies\nCheck the base project, Library5.\nPOM.xml and dependencies: The POM.xml file manages the dependencies of a project in Maven.\n\nThe first two dependencies, spring-boot-starter-thymeleaf and spring-boot-starter-web, are starter dependencies for Spring Boot and include libraries for building web applications using the Thymeleaf template engine.\nThe spring-boot-devtools dependency provides development-time tools to improve the development experience, such as automatic application restarts and enhanced debugging capabilities.\njavafaker is a library used to generate random data for testing purposes, and lombok is a library that simplifies Java code by reducing boilerplate code.\nThe spring-boot-starter-test dependency includes the necessary libraries for testing Spring Boot applications, and the junit-jupiter-api dependency provides the JUnit 5 testing framework.\nThe spring-boot-starter-jdbc and spring-boot-starter-data-jpa dependencies provide libraries for accessing and manipulating databases in a Spring Boot application.\nFinally, the h2 dependency is a lightweight in-memory database used for testing and development purposes.\n\n\n\nThe groupId and artifactId attributes uniquely identify each dependency, while the version attribute specifies the version of the library to use.\n\nThe scope attribute defines the visibility of the dependency at different stages of the application’s lifecycle, and the optional attribute indicates that the dependency is not strictly required for the application to function."
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#entity-book",
    "href": "springboot/boot-what-create-th-h2.html#entity-book",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "2.1 @Entity book",
    "text": "2.1 @Entity book\n\nBook entity\n\nA persistence entity is a lightweight Java class with its state typically persisted to a table in a relational database.\n\n\n\n\n\n\nEntity definition\n\n\n\n\nInstances of such an entity correspond to individual rows in the table.\nEntities typically have relationships with other entities, and these relationships are expressed through object/relational mapping (ORM) metadata.\nThis metadata may be specified directly in the entity class file by using annotations (or in a separate XML descriptor file distributed with the application).\n\n\n\n\n\nDemoApplication.java\n\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor\n@Entity(name=\"Book\")\n@Table(name=\"BOOK_TABLE\")\npublic class Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name=\"BOOK_ID\")\n    private long bookId;\n    @Column(name=\"BOOK_TITLE\")\n    private String title;\n    @Column(name=\"AUTHOR\")\n    private String author;\n    private int pages;\n    @Column(name=\"PUBLISHED_YEAR\")\n    private int publishedYear;\n    @Column(name=\"ISBN\")\n    private String isbn;\n}\n\n\n\n\n\n\n\nHistorical note\n\n\n\nSpring MVC was the original web framework in the Spring ecosystem, and it relied heavily on XML-based configuration.\nOver time, Spring MVC evolved to become more annotation-driven, which made it simpler and more concise to work with.\nWith the advent of Spring Boot, the Spring ecosystem became even more streamlined, with convention-over-configuration and a focus on out-of-the-box features that made it easier to build and deploy Spring-based applications.\nIn the domian of database access, Spring evolved from using plain JDBC to providing support for Object-Relational Mapping (ORM) frameworks such as Hibernate and JPA.\nSpring also provides transaction management capabilities through the Spring Transaction module, which allows developers to define transaction boundaries declaratively using annotations or XML configuration.\nBy using Spring, developers can build robust, scalable, and maintainable web applications that leverage modern technologies and best practices.\n\n\n\n\n\nObject Relational Mapping (ORM) data access\nSpring ORM example - JPA, Hibernate, Transaction"
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#h2-db-creation-step-by-step",
    "href": "springboot/boot-what-create-th-h2.html#h2-db-creation-step-by-step",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "2.2 H2 DB creation: step-by-step",
    "text": "2.2 H2 DB creation: step-by-step\n\nDownload the H2 database: Go to the H2 database website at H2 DB{external} and download the latest version of the H2 database for Linux. You can download either the ZIP or the TAR package.\nExtract the downloaded file: Open the terminal and navigate to the folder where you downloaded the H2 database.Extract the contents of the downloaded file using the following command:\n\n\n\nlinux.sh\n\ntar -zxvf h2-*.tar.gz\n\n\nStart the H2 database server: Navigate to the H2 database directory and start the H2 database server by running the following command:\n\n\n\nlinux.sh\n\njava -jar h2*.jar\n\n\n\nlinux.sh\n\ncd <download directory>\nunzip h2*.zip\ncd h2/bin\nchmod +x h2.s\n\nThis will start the H2 database server and display the URL where the H2 database can be accessed.\n\nConnect to the H2 database: Open a web browser and enter the URL displayed in the terminal. The H2 database web interface will open in the browser.\n\nOther option is to execute the app and then clik “Create a new database” from the H2 Icon\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a new database: In the H2 database web interface, click on the “Create a new database” button and follow the prompts to create a new database.\n\n\n\n\nCreate H2 DataBase: define parameters\n\n\n\n\n\nCreate H2 DataBase: DB created\n\n\n\n\n\nCreate H2 DataBase: check it has been created\n\n\n\n\n\nCreate H2 DataBase: connect to DB\n\n\nName your database: jdbc:h2:/home/albert/MyProjects/MyDBs/h2DBs/myDB\n\nConnect to the new database: Once the new database is created, click on the “Connect” button in the H2 database web interface and introduce the right parameters.\n\n\n\n\n\n\n\nImportant\n\n\n\nSaved Settings: Generic H2 (Server) Setting Name: Generic H2 (Server)\nDriver Class: org.h2.Driver JDBC URL: jdbc:h2:/home/albert/MyProjects/MyDBs/h2DBs/myDB\nUser Name: albert Password: ••••\n\n\n\n\n\nCreate H2 DataBase\n\n\n\nUse the H2 database: Now you can start using the H2 database. You can create tables, insert data, and perform queries using SQL commands."
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#jpa",
    "href": "springboot/boot-what-create-th-h2.html#jpa",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "2.3 JPA",
    "text": "2.3 JPA\n\nSpring Data JPA - Reference Documentation\n\n\n\nJPA: Jakarta Persistence, formerly Java Persistence API\n\n\n\n\n\n\nJPA definiton\n\n\n\nJPA is a application programming interface specification that describes the management of relational data.\n\n\n\n\n\nDemoApplication.java\n\npublic interface BookRepository extends CrudRepository<Book, Long> {}\n\nThis code is defining a Java interface named BookRepository that extends the CrudRepository interface.\n\n\n\n\n\n\nCrud Repository\n\n\n\nThe CrudRepository interface is a built-in interface in the Spring Framework that provides generic CRUD (Create, Read, Update, Delete) operations for working with entities in a database.\n\n\nThe BookRepository interface is being used to define a repository for managing Book entities, where Book is likely a Java class representing a book object in the application.\nThe Long parameter in CrudRepository<Book, Long> specifies the type of the primary key for the Book entity. In this case, the primary key is a Long type.\nBy extending CrudRepository, the BookRepository interface will inherit methods such as save(), findById(), findAll(), and deleteById(), among others, which can be used to perform database operations on Book entities.\nThis allows for efficient and standardized data access and management within the application. Otherwise, we should use a DAO:\n\nExample DAO MongoDB\nExample SQL execution in Java\n\n\n\nThe public keyword specifies that the interface can be accessed from other classes, and the interface name should be in camelCase to follow Java naming conventions."
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#application.properties",
    "href": "springboot/boot-what-create-th-h2.html#application.properties",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "2.4 Application.Properties",
    "text": "2.4 Application.Properties\nApplication.Properties: the application.properties file contains configuration properties for a Spring Boot application.\n#H2 DATASOURCE\nspring.datasource.url=jdbc:h2:tcp://localhost/~/dataBaseH2/library5\nspring.datasource.username=albert\nspring.datasource.password=1234\nspring.datasource.driver-class-name=org.h2.Driver\n\n#JPA\n#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect"
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#controller-web",
    "href": "springboot/boot-what-create-th-h2.html#controller-web",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "3.1 @Controller Web",
    "text": "3.1 @Controller Web\n\n\nDemoApplication.java\n\n@Controller\n@RequestMapping(\"/library\")\npublic class LibraryWebController {\n\n    @Autowired\n    BookService bookService;\n\n    @RequestMapping(\"/books\")\n    public String getWeb(Model containerToView) {\n        //\n        containerToView.addAttribute(\"booksfromController\",\n                bookService.getAllBooks());\n        \n\n        return \"showBooks\";\n    }\n}\n\n The method getWeb() is handling a GET request to the “/library/books” URL path and adding a list of books retrieved from the BookService to the Model attribute “booksfromController”.\n\n\n\n@controller and View are connected by HTML/ViewResolver/TH\n\n\nFinally, it returns the name of the view that will be used to render the response.\n\n\n\ngetWeb method\n\n\n\nJava Class and annotations:\n\n@Controller: This is an annotation that identifies the class as a Spring MVC controller.\n@RequestMapping(\"/library\"): This annotation maps the controller to the URL path \"/library\".\n\n@Autowired BookService bookService;: This annotation injects an instance of the BookService into the controller.\n@RequestMapping(\"/books\"): This annotation maps the method to the URL path \"/library/books\".\npublic String getWeb(Model containerToView): This is the method declaration for the GET request handler.\ncontainerToView.addAttribute(\"booksfromController\", bookService.getAllBooks());: This adds a list of books retrieved from the BookService to the model attribute \"booksfromController\".\nreturn \"showBooks;: This returns the name of the view that will be used to render the response."
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#auto-reload-compiler",
    "href": "springboot/boot-what-create-th-h2.html#auto-reload-compiler",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "6.1 Auto-reload compiler",
    "text": "6.1 Auto-reload compiler\nSpring Boot Dev Tools\nAny changes to views or resources can be seen in the browser directly, no need restarts, just refresh the browser. As wwll, any changes to the code that will restart the Spring container automatically.\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n    <scope>runtime</scope>\n    <optional>true</optional>\n</dependency>\n\n\n\nAuto-reload compiler: Advanced Settings\n\n\n\n\n\nAuto-reload compiler: build project automatically\n\n\n\n\n\nEnable this option: compiler.automake.allow.when.app.running\n\n\n\nIn Menu -> Build -> Build Project CTRL + F9\n\n\n\n\n\n\n  Spring Boot: create a Project \n\n\n\n  top \n\n\n\n Spring Boot: cycle"
  },
  {
    "objectID": "springboot/boot-what-create.html",
    "href": "springboot/boot-what-create.html",
    "title": "Spring Boot: create a Project",
    "section": "",
    "text": "📘 Create a Spring Boot Project\n\nGo to start.spring.io to create a new project with desired settings (Maven, Java, Spring Boot version, etc.).\nAdd required dependencies such as Spring Web.\nDownload the generated ZIP file and import it into IntelliJ IDEA.\nCreate web and REST controllers by creating new Java classes and defining the desired endpoint methods.\nRun the application and test the web and REST controllers.\nCommit and push the code to GitHub.com (using the built-in Git support in IntelliJ IDEA)."
  },
  {
    "objectID": "springboot/boot-what-create.html#create-maven-project-step-by-step",
    "href": "springboot/boot-what-create.html#create-maven-project-step-by-step",
    "title": "Spring Boot: create a Project",
    "section": "1 Create Maven Project: step-by-step",
    "text": "1 Create Maven Project: step-by-step\nHere are the steps to create a Spring Boot Maven project, generate it, download it, import it into IntelliJ IDEA, create a web and REST controller (@Controller and @RestController), execute it, and then commit and push it to GitHub.com:\n\n1.1 Open a web browser\nAnd go to the Spring Initializer website at:\n\nSpring Initializer IO: start.spring.io\n\n\n\n\n\n\n\n\n1.2 Select the desired project settings\nSuch as project type (Maven), language (Java), and Spring Boot version.\n\n\n1.3 Add dependencies\nSelect the required dependencies, such as:\n\nSpring Web,\nSpring Data JPA,\nSpring Boot DevTools,\nLombok\nThyemleaf\nH2 Database\n\n\n\n1.4 Generate\nGenerate the project by clicking the Generate button.\n\n\n\n\n\n\nURL where you may create a Spring Boot project.\nDefine Maven as Dependencies Mananger and Java.\nName your project.\nChoose your version and packaging: jar.\nAdd dependencies\nGenerate & Download\n\n\n\n1.5 Download\nDownload the generated project as a ZIP file.\n\n\n1.6 Unzip\nUnzip the file to a desired location and import the project into IntelliJ IDEA.\n\n\n\nLocal git repository\n\n\n\n\n\nUnzipped project\n\n\n\n\n1.7 Build\nBuild the project and check folder tree structure and POM.xml\n\nExecute/refresh Maven if necessary\nPOM.xml\n\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n        </groupId>springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n\n1.8 Create a web controller\nCreate a web controller by right-clicking on the project and selecting \"New\" -> \"Java Class\".\n- In the newly created class, add the following code to define a simple **web controller**:\npackage com.example.myFirstSpring;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class HelloWebController {\n\n    @RequestMapping(\"/helloweb\")\n    public String helloHandler(){\n\n        return \"hello.html\";\n    }\n}\n\nWeb Controller\n\n\n\n1.9 Create a HTML web page\nCreate a HTML web page by right-clicking on the project and selecting \"New\" -> \"HTML page\".\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Java Spring WebApp cifo</title>\n</head>\n<body>\nhey .... this is amazing ... a- ma - zing\n</body>\n</html>\n\nHTML page: hello.html\n\n\n\n1.10 Create a REST controller\nCreate a REST controller by following the same steps as in step 8 and adding the following code to define a simple REST endpoint:\npackage com.example.myFirstSpring;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloRestController {\n\n    @GetMapping(\"/hellorest\")\n    public String helloWorld(){\n\n        return \"Hello Worlds and class!!!!\";\n    }\n}\n\nRest Controller\n\n\n\n\nFolder tree and Java classes\n\n\n\n\n1.11 Run\nRun the application by clicking the “Run” button or by using the keyboard shortcut “Ctrl + Shift + F10”.\n\n\n\n\n\n\n\n1.12 Check the endpoints\n/home/devops/MyProjects/JavaSEProjects/CifoJava2023/myFirstSpring Once the application is running, you can test it by accessing:\n\nthe web controller in a web browser by going to\n\nhttp://localhost:8080/helloweb\n\nand the REST controller by going to\n\nhttp://localhost:8080/hellorest\n\n\n\n\n\n\n\n\n\n1.13 Commit & Push\nFinally, you can commit and push the code to Git by using the built-in Git support in IntelliJ IDEA. Simply right-click on the project and select “Git” -> “Commit Directory” and then “Git” -> “Push”.\n\n\n\nJust select the files to add to git\n\n\n\n\n\nWritting the commit\n\n\n\n\n\nBe careful! It is mono-repo, we are pushhing two projects\n\n\n\n\nA monorepo is a version control strategy where a single repository contains all of the source code, resources, and assets required to build and run an application or a suite of applications. Monorepos are used to manage projects that have multiple, interdependent components that are frequently developed and deployed together.\n\n\n\nPushed properly\n\n\n\n\n\nWe have done two commits, just to test the process\n\n\n\n\n\nIt is a mono-repo, that is, this project shrare repository with other projects\n\n\n\n\n\nThe folder tree structure is right and there are just the desired files\n\n\n\n\n\n\n\n  Spring Boot: fundamentals \n\n\n\n  top \n\n\n\n Spring Boot: H2 DB and Thymeleaf"
  },
  {
    "objectID": "springboot/boot-what-cycle.html",
    "href": "springboot/boot-what-cycle.html",
    "title": "Spring Boot: cycle",
    "section": "",
    "text": "📘 Request-Response Cycle\nThe flux of data between the client and server is called the request-response cycle.\nThis cycle involves the client making a request to the server for some data or action, the server processing the request and generating a response, and then sending that response back to the client.\nThis process can involve multiple layers of abstraction, such as the controller, service, and repository layers in Spring Boot, and can involve interactions with a database or other external systems.\nThe request-response cycle is fundamental to the functioning of web applications and is critical to understanding how data is exchanged between clients and servers in this context."
  },
  {
    "objectID": "springboot/boot-what-cycle.html#spring-boot-request-response-cycle",
    "href": "springboot/boot-what-cycle.html#spring-boot-request-response-cycle",
    "title": "Spring Boot: cycle",
    "section": "1 Spring Boot Request-Response Cycle",
    "text": "1 Spring Boot Request-Response Cycle\n\n\n\n\n\n\nThe user enters the URL in the address bar of Chrome and presses Enter.\nChrome parses the URL and initiates a request to the Spring Boot server.\nThe request is received by the web server and passed to the DispatcherServlet, which is the front controller for Spring MVC.\nThe DispatcherServlet consults the HandlerMapping to determine the appropriate controller for the request.\nThe selected controller processes the request, interacting with the service layer and the repository layer as necessary.\nThe controller generates a model object that contains the data to be displayed on the page.\nThe model is passed to the ViewResolver, which determines the appropriate view to render the response.\nThe Thymeleaf engine for templates renders the HTML based on the model and returns it to the controller.\nThe controller sends the HTML response back to the DispatcherServlet, which packages it into an HTTP response and sends it back to Chrome.\nChrome receives the response and renders the HTML, displaying the web page to the user.\n\n\n\n\n\n\n\nThe steps 5-8 may occur multiple times, depending on the complexity of the application and the number of views that need to be rendered. Additionally, the H2 database may be used by the repository layer to retrieve or store data as needed."
  },
  {
    "objectID": "springboot/boot-what-cycle.html#underlying-request-response-cycle",
    "href": "springboot/boot-what-cycle.html#underlying-request-response-cycle",
    "title": "Spring Boot: cycle",
    "section": "2 Underlying Request-Response Cycle",
    "text": "2 Underlying Request-Response Cycle\n\n\n\n\n\nSure, here is the complete process of handling a request from Chrome to rendering HTML using Spring Boot with a controller, service, and repository, JPA, H2 database, and Thymeleaf engine for templates:\n\nThe user enters a URL in the address bar of Chrome and presses Enter.\nChrome parses the URL and initiates an HTTP request to the Spring Boot server.\nThe request is received by the web server and passed to the DispatcherServlet, which is the front controller for Spring MVC.\nThe DispatcherServlet consults the HandlerMapping to determine the appropriate controller for the request.\nThe selected controller calls the appropriate service method to handle the request.\nThe service layer performs any necessary business logic and data validation and uses the repository layer to access the database.\nThe repository layer uses JPA to interact with the H2 database, performing CRUD operations as needed to retrieve or store data.\nThe service layer receives the data from the repository layer and formats it into a model object that can be rendered by the view.\nThe model object is passed to the view resolver, which selects the appropriate view to render the response using the Thymeleaf engine for templates.\nThe Thymeleaf engine for templates renders the HTML based on the model object and returns it to the controller.\nThe controller packages the HTML response into an HTTP response and sends it back to the client, which in this case is Chrome.\nChrome receives the response and renders the HTML, displaying the web page to the user.\n\n\n2.1 Handling errors\nIf an error occurs during any of the above steps, the following additional steps may be taken:\n\nThe error is caught by the appropriate exception handler in the controller.\nThe exception handler generates an error response, which may include a user-friendly error message.\nThe error response is sent back to the client.\n\n\n\n2.2 Auth\nIf authentication or authorization is required for the request, the following additional steps may be taken:\n\nThe request is intercepted by a security filter, which verifies that the user is authenticated and authorized to access the requested resource.\nIf the user is not authenticated, they are redirected to a login page.\nIf the user is not authorized, they are shown an access denied message.\n\n\n\n2.3 File uploads\nIf the request involves file uploads, the following additional steps may be taken:\n\nThe uploaded file(s) are received by the web server and passed to a file upload handler.\nThe file upload handler saves the uploaded file(s) to the file system or a database, as appropriate.\nThe service layer processes the uploaded file(s) as needed and updates the database.\n\n\n\n2.4 Catching\nIf the application uses caching, the following additional steps may be taken:\n\nThe request is intercepted by a caching filter, which checks if the response is already cached.\nIf the response is cached, it is returned to the client without further processing.\nIf the response is not cached, it is processed as described above, and then cached for future requests.\nThe cached response is returned to the client in response to future requests, until the cache expires or is invalidated.\n\nNote that the exact sequence and number of steps may vary depending on the specific implementation of the Spring Boot application and the requirements of the web application."
  },
  {
    "objectID": "springboot/boot-what-cycle.html#more-scenarios",
    "href": "springboot/boot-what-cycle.html#more-scenarios",
    "title": "Spring Boot: cycle",
    "section": "3 More scenarios",
    "text": "3 More scenarios\nAdditional scenarios that may be encountered when processing a request using Spring Boot with a controller, service, and repository, JPA, H2 database, and Thymeleaf engine for templates:\n\n3.1 Handling AJAX requests\n\nThe user initiates an AJAX request by clicking a button or link on the web page.\nThe request is received by the controller and passed to the appropriate service method.\nThe service layer performs any necessary business logic and data validation, and uses the repository layer to access the database.\nThe repository layer uses JPA to interact with the H2 database, performing CRUD operations as needed to retrieve or store data.\nThe service layer receives the data from the repository layer and formats it into a JSON object.\nThe JSON object is returned to the client and processed by the JavaScript code.\n\n\n\n3.2 Handling file downloads\n\nThe user initiates a file download request by clicking a button or link on the web page.\nThe request is received by the controller and passed to the appropriate service method.\nThe service layer performs any necessary business logic and data validation, and uses the repository layer to access the database.\nThe repository layer uses JPA to interact with the H2 database, retrieving the requested file(s).\nThe file(s) are sent back to the client in the response body with appropriate headers, such as Content-Type and Content-Disposition.\n\n\n\n3.3 Handling long-running requests\n\nThe user initiates a request that may take a long time to complete, such as generating a report or processing a large dataset.\nThe request is received by the controller and passed to the appropriate service method.\nThe service layer spawns a background thread to perform the long-running task, and returns a response to the client immediately.\nThe client periodically polls the server for updates on the status of the task.\nWhen the background task completes, the result is stored in the database or sent back to the client in a response.\n\n\n\n3.4 Handling complex database queries\n\nThe user initiates a request that requires complex database queries, such as aggregations, subqueries, or joins.\nThe request is received by the controller and passed to the appropriate service method.\nThe service layer uses JPA Criteria API or Querydsl to construct complex database queries.\nThe repository layer uses JPA to execute the queries and retrieve the requested data.\nThe service layer formats the data into a model object that can be rendered by the view.\n\n\n\n\n\n\n  Spring Boot: H2 DB and Thymeleaf \n\n\n\n  top \n\n\n\n Spring Boot: Dependency Injection"
  },
  {
    "objectID": "springboot/resources.html",
    "href": "springboot/resources.html",
    "title": "Spring Boot Resources",
    "section": "",
    "text": "MarkUp Resources"
  },
  {
    "objectID": "springboot/resources.html#webs",
    "href": "springboot/resources.html#webs",
    "title": "Spring Boot Resources",
    "section": "1 Webs",
    "text": "1 Webs\n\n1.1 The PetClinic example\n\nThe Spring PetClinic Community\nThe Spring PetClinic Demo\nSpringBoot github\n\n\n\n1.2 employeeCourse\n\nemployeeCourse github code\nemployeeCourse wiki"
  },
  {
    "objectID": "springboot/resources.html#books",
    "href": "springboot/resources.html#books",
    "title": "Spring Boot Resources",
    "section": "2 Books",
    "text": "2 Books\n\nMicroservices for Java Developers\n\n\n2.1 Stratospheric\n\n\n\nStratospheric\n\n\n\nFrom Zero to Production with Spring Boot and AWS\n\n\n\n2.2 Quarkus for Spring Developers\n\nQuarkus for Spring Developers\nQuarkus for Spring Developers GitHub\nQuarkus for Spring Developers Book\n\n\n\n2.3 Microservices Patterns\n\n\n\nMicroservices Example ftgo\n\n\n\nMicroservices Patterns\nMicroservices Patterns GitHub\nMicroservices Patterns e-book\n\n\n\n2.4 Introduction to Quarkus, MicroProfile, and Kubernetes\n\nIntroduction to Quarkus, MicroProfile, and Kubernetes\n\n\n\n\n\n\n  Lab#SB06-1: employeeCourse \n\n\n\n  top \n\n\n\n React JS: Introduction"
  },
  {
    "objectID": "springboot/sblab0-1.html",
    "href": "springboot/sblab0-1.html",
    "title": "Lab#SB00-1: Library UML",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-1: Library UML We are going to evolve the current Java SE Libraryproject into a Spring Boot Library Management System with a H2 DB and web with Thymeleaf."
  },
  {
    "objectID": "springboot/sblab0-1.html#create-a-new-spring-boot-project-h2-db",
    "href": "springboot/sblab0-1.html#create-a-new-spring-boot-project-h2-db",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.1 Create a new Spring Boot project & H2 DB",
    "text": "1.1 Create a new Spring Boot project & H2 DB\n\nCreate a new Spring Boot project: The first step would be to create a new Spring Boot project in the preferred IDE or text editor.\n\n\n\n\n\n\n\nNote\n\n\n\nThe project can be created using Spring Initializr, which will create the necessary file structure and dependencies.\n\n\n\nConfigure the H2 database: In the newly created project, configure the H2 database by adding:\n\nthe H2 dependency in the pom.xml file,\nand also create a new application.properties file\nset the database properties such as:\n\nthe database URL,\nusername,\nand password."
  },
  {
    "objectID": "springboot/sblab0-1.html#model-entities",
    "href": "springboot/sblab0-1.html#model-entities",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.2 Model & Entities",
    "text": "1.2 Model & Entities\n\nCreate a Book Entity: To represent a book in the library management system, create a Book @Entity\n\n\n\nIt could include attributes such as title, author, publisher, year, ISBN, and status. The status attribute will indicate whether the book is available, borrowed or reserved.\n\nCreate a User Entity: To represent a user in the system, create a User entity that includes attributes such as library card number, name, surname, nationality, birthdate, and borrowed books.\nCreate Author Entity: To represent an author in the system, create an Author entity that includes attributes such as deathdate, books, name, and surname.\nCreate Staff Entity: To represent staff members in the system, create a Staff entity that includes attributes such as staff ID, position, registered users, and library books."
  },
  {
    "objectID": "springboot/sblab0-1.html#domains-controller-service-and-repository",
    "href": "springboot/sblab0-1.html#domains-controller-service-and-repository",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.3 Domains: @Controller, @Service and @Repository",
    "text": "1.3 Domains: @Controller, @Service and @Repository\n\nCreate Repositories: To access the data stored in the database, create repositories for each entity. The repositories will provide the methods to create, read, update, and delete the data.\nCreate Services: Create services that will implement the business logic of the system by calling the repository methods.\n\n\n\nThe services will provide the methods to search for books, borrow a book, return a book, add a book, remove a book, update book details, register a user, remove a user, update user details, and generate reports.\n\nCreate Controllers: Create controllers that will handle the HTTP requests from the web interface by calling the service methods.\n\n\n\nThe controllers will provide the methods to create a user account, search for books, borrow a book, return a book, add a book, remove a book, update book details, register a user, remove a user, update user details, and generate reports."
  },
  {
    "objectID": "springboot/sblab0-1.html#html-thymeleaf",
    "href": "springboot/sblab0-1.html#html-thymeleaf",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.4 HTML Thymeleaf",
    "text": "1.4 HTML Thymeleaf\n\n1.4.1 Modern server-side Java template engine\n\nThymeLeaf\nTutorial: Using Thymeleaf\nTutorial: Thymeleaf + Spring\n\n\n\n1.4.2 Create Thymeleaf\n\nCreate Thymeleaf templates: To create the web interface of the system, create Thymeleaf templates for each of the controller methods. The templates will be used to display the data and also to handle the user input.\n\n\n\n\n\n\n\nNote\n\n\n\nThymeleaf is a modern server-side Java template engine for both web and standalone environments.\nThymeleaf’s main goal is to bring elegant natural templates to your development workflow — HTML that can be correctly displayed in browsers and also work as static prototypes, allowing for stronger collaboration in development teams."
  },
  {
    "objectID": "springboot/sblab0-1.html#test",
    "href": "springboot/sblab0-1.html#test",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.5 Test",
    "text": "1.5 Test\n\nTest the system: Test the system by running it and making sure that all the functionalities work as expected."
  },
  {
    "objectID": "springboot/sblab0-1.html#core-use-case-borrowbook-and-returnbook-with-user-and-librarian",
    "href": "springboot/sblab0-1.html#core-use-case-borrowbook-and-returnbook-with-user-and-librarian",
    "title": "Lab#SB00-1: Library UML",
    "section": "2.1 Core use-case: borrowBook() and returnBook() with user and librarian",
    "text": "2.1 Core use-case: borrowBook() and returnBook() with user and librarian\n\n\n\nMockup Web Library Management core use-case\n\n\nMockup Web Library Management core use-case extended"
  },
  {
    "objectID": "springboot/sblab0-2.html",
    "href": "springboot/sblab0-2.html",
    "title": "Lab#SB00-2: CRUD User",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-2: CRUD User (and Librarian)\nCRUD stands for Create, Read, Update, and Delete - the four basic operations for persistent storage of data.\nIn the context of a LibraryMangement, CRUD operations would allow us to create new users, retrieve information about existing users, update user information, and delete users from the system."
  },
  {
    "objectID": "springboot/sblab0-2.html#overview",
    "href": "springboot/sblab0-2.html#overview",
    "title": "Lab#SB00-2: CRUD User",
    "section": "1 Overview",
    "text": "1 Overview\nWe’ll be using a Java class called User to represent user data.\n\n\nThe @Data annotation is used to generate getters, setters, equals, hashCode, and toString methods for the class. The @NoArgsConstructor and @AllArgsConstructor annotations are used to generate constructors with no arguments and all arguments, respectively.\nWe’ll also be using a HashMap to store user data, with userId as the key. This will allow us to quickly retrieve user data using the user ID as a lookup key.\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n// generates getters, setters, equals, \n// hashCode, and toString methods\n@Data\n@NoArgsConstructor // generates a no-args constructor\n@AllArgsConstructor // generates a constructor with all arguments\npublic class User {\n    private String userId;\n    private String name;\n    private String address;\n    private int age;\n}\nWe might implement the CRUD operations for our LibraryMangement system:\n\nCreate: To create a new user, we’ll need to generate a unique user ID and create a new User object with the provided user data. We can then add the new User object to our HashMap using the generated user ID as the key.\nRead: To retrieve information about an existing user, we’ll need to look up the User object in our HashMap using the user ID as the key.\nUpdate: To update user information, we’ll need to retrieve the User object from our HashMap using the user ID as the key, and then update the relevant properties of the User object.\nDelete: To delete a user from the system, we’ll need to remove the User object from our HashMap using the user ID as the key."
  },
  {
    "objectID": "springboot/sblab0-2.html#references",
    "href": "springboot/sblab0-2.html#references",
    "title": "Lab#SB00-2: CRUD User",
    "section": "2 References",
    "text": "2 References\n\n2.1 Library5\n\n2.1.1 Repos\n\nLab#SB02-Library5 Code\nLab#SB02-Library5 Docs\n\n\n\n2.1.2 Java Classes\n\nBook Entity\nBook Service\nBook Controller\n\n\n\n2.1.3 Templates Thynmeleaf\n\ndetailBook\nnewBook\nnotfound\nshowBooks\nupdateBook\n\n\n\n\n2.2 LibraryManagement: controllerView\n\ncontrollerView code github"
  },
  {
    "objectID": "springboot/sblab0-2.html#controllerview",
    "href": "springboot/sblab0-2.html#controllerview",
    "title": "Lab#SB00-2: CRUD User",
    "section": "3 controllerView",
    "text": "3 controllerView\n\n3.1 folder-tree project & domains\n\n\n\nFolder-tree controllerView Project just with Read feature\n\n\n\n\n3.2 Home\nThis cycle defines a @Controller class that handles requests to the URL \"/home\". When a request is made, it adds the current date and time to the model object, and then returns the name of the view to be rendered.\nThe view will have access to the “todayDate” attribute and can use it to display the current date and time.\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport java.util.Date;\n\n@Controller\npublic class HomeController {\n    @RequestMapping(\"/home\")\n    public String gethome(Model model){\n\n        model.addAttribute(\"todayDate\", new Date().toString());\n        return \"home\";\n    }\n\n}\n\n\n\n\n\nrender html chrome: /home"
  },
  {
    "objectID": "springboot/sblab0-2.html#crud-read",
    "href": "springboot/sblab0-2.html#crud-read",
    "title": "Lab#SB00-2: CRUD User",
    "section": "4 CRUD: read",
    "text": "4 CRUD: read\n\n4.1 Users\nThe cycle request-response relies in the @Controller class called UserController, which maps requests to the \"/user/users\" URL.\nIt uses an @Autowired UserService to fetch a list of users and adds them to the model, before returning a view called \"user/users\".\npackage com.example.myFirstSpring.controller;\n\nimport com.example.myFirstSpring.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    @Autowired\n    UserService userService;\n\n    @RequestMapping(\"/users\")\n    public String getAllUsers(Model model){\n        // fetch all users, add to model\n        model.addAttribute(\"users\", userService.getAllUsers());\n        return \"user/users\";\n    }\n}\n\n\n\n\n\nrender html chrome: /user/users\n\n\nHere we will define the @Service class, called UserService with a method called getAllUsers, which returns a HashMap of user objects.\nThe HashMap is populated with 20 fake user objects using a utility method called populateFakeUsers.\npackage com.example.myFirstSpring.service;\n\nimport com.example.myFirstSpring.model.User;\nimport com.example.myFirstSpring.utils.Utils;\nimport org.springframework.stereotype.Service;\nimport java.util.HashMap;\n\n@Service\npublic class UserService {\n    public static HashMap<String, User> users = new HashMap<>();\n\n    static {\n        Utils.populateFakeUsers(20, users);\n    }\n\n    public HashMap<String, User> getAllUsers (){\n\n        return users;\n    }\n}\n\n4.1.1 Code source\n\ncontrollerView Project\nHome Controller\nUser Controller\nUsers html\nHome html\n\n\n\n\n4.2 Librarians\nLike User request-response cyle read feature (user-case and user-story) we will code the Librarian.\n\n\n\n\n\n\nNote\n\n\n\nThe Librarian cycle request-response would function similarly to the User cycle request-response, but with different URLs, controller methods, and service methods tailored to the Librarian entity.\n\n\n\nThe LibrarianController would map requests to the appropriate URLs, such as \"/librarian/librarians\".\nThese requests would be handled by methods in the LibrarianController, which would call methods from the LibrarianService to fetch or manipulate data.\n\n\n\nThe LibrarianService would contain methods for fetching and manipulating data from the Librarian entity, similar to the UserService for the User entity.\n\nTemplates would also be created for rendering views related to the Librarian entity, using Thymeleaf or a similar templating engine.\n\n\n4.2.1 Code source\n\ncontrollerView Project\nLibrarian controller\n\n\n\n\n\n\nrender html chrome: /librarian/librarians"
  },
  {
    "objectID": "springboot/sblab0-2.html#crud-create",
    "href": "springboot/sblab0-2.html#crud-create",
    "title": "Lab#SB00-2: CRUD User",
    "section": "5 CRUD: create",
    "text": "5 CRUD: create\n\n5.1 Create book (reference)\n\n\n\nCRUD: create book\n\n\n\nThe Form element\n\n\n\n\n\n\n\nHTML Form: name/id\n\n\n\nIn HTML forms, the name and id attributes serve different purposes for form elements:\n\nname attribute: This attribute defines the name of the input element, which is used to identify the form data in the request that is sent to the server when the form is submitted. The name attribute is required for all form controls and must be unique within the form.\nid attribute: This attribute is used to uniquely identify an HTML element. It can be used to target the element with CSS or JavaScript, and can also be used to associate a label with an input element using the for attribute.\n\n\n\n\n\n\n\n\n\nHTML Form: action\n\n\n\nThe action attribute is used to specify the URL of the server-side script or class/method that will process the form data when the form is submitted.\nThis attribute is required for all forms and specifies the location where the form data will be sent.\nThe method attribute is also used to specify the HTTP method that will be used to submit the form data, such as GET or POST.\n\n\n\n\n\n\n\n\nHTML Form: for\n\n\n\nThe for attribute is used to associate a label with an input element.\nThe for attribute specifies which input element the label belongs to by referring to the id attribute of the input element.\n\n\n\n\n5.2 Create user\n\nThe client sends a request to server-controller by an endpoint to get the create-user form: Users template\n\n<p>\n    <a th:href=\"@{/user/emptyForm}\">Add new user to HashMap</a>\n</p>\n\n\n\n\n\n\n\n\nThe server-controller method handles the request and sends a response with the create-user form: UserController\n\n@RequestMapping(\"/emptyForm\")\npublic String sendUserForm(){\n    return \"user/userForm\";\n}\n\nThe client renders the create-user form received from server-controller: userForm\n\n<form action=\"/user/createUser\" >\n    <p>\n        <label for=\"name\">Name</label>\n        <input  type=\"text\" name=\"name\"  id=\"name\"></p>\n    <p>\n        <label for=\"address\">address</label>\n        <input  type=\"text\" name=\"address\"  id=\"address\"></p>\n    <p>\n        <label for=\"age\">age</label>\n        <input type=\"number\" name=\"age\"  id=\"age\" ></p>\n    <p>\n        <input type=\"submit\" value=\"Add new user\" />\n</form>\n\n\n\n\n\n\n\n\nThe client sends a request to add this new user to HashMap: userForm\n\n<form action=\"/user/createUser\" >\n    <input type=\"submit\" value=\"Add new user\" />\n</form>\n\n\n\n\n\n\n\n\nThe sever-controller method handles the request, saves the user object in a HashMap and redirects the reponse: UserController\n\n@RequestMapping(\"/createUser\")\npublic String createUser(User user){\n    userService.createUser(user);\n    return \"redirect:users\";\n    //return \"user/userCreationResult\";\n}"
  },
  {
    "objectID": "springboot/sblab0-2.html#crud-update",
    "href": "springboot/sblab0-2.html#crud-update",
    "title": "Lab#SB00-2: CRUD User",
    "section": "6 CRUD: update",
    "text": "6 CRUD: update\n\n6.1 Update book (reference)\n\n\n\nCRUD: update book\n\n\n\n\n6.2 Update user\n\nThe client sends a request to server-controller by an endpoint to get the update-user form: Update user template\n\n<td>\n     <a th:href=\n     \"@{packedUserForm(idFromView=${user.value.userId})}\"\n     >Update</a>\n</td>\n\n\n\n\n\n\n\n\nThe server-controller method handles the request and sends a response with the update-user form: UserController\n\n@RequestMapping(\"/packedUserForm\")\npublic String packedUserForm(@RequestParam(\"idFromView\") String id ,\n                                Model model){\n\n    User userFound = userService.findUserById(id);\n\n    if (userFound != null){\n        model.addAttribute(\"userFromController\", userFound);\n        model.addAttribute(\"message\", \"User  found\");}\n    else\n        model.addAttribute(\"message\", \"User not found\");\n\n    return \"user/userToUpdateForm\";\n}\n\nThe client renders the update-user form received from server-controller: userForm\n\n<form th:action=\n        \"@{updateUser/{idFromView}\n        (idFromView=${userFromController.idUser})}\"\n      th:object=\n        \"${userFromController}\"\n      method=\n        \"post\">\n    <p>\n        <label for=\"userId\">User Id</label>\n        <input  type=\"number\" name=\"userId\" id=\"userId\" \n                th:field=\"*{userId}\" readonly></p>\n    <p>\n    <p>\n        <label for=\"name\">Name</label>\n        <input  type=\"text\" name=\"name\" id=\"name\"\n                th:field=\"*{name}\"></p>\n    <p>\n        <label for=\"address\">Address</label>\n        <input  type=\"text\" name=\"address\" id=\"address\"\n                th:field=\"*{address}\"></p>\n    <p>\n        <label for=\"Age\">Age</label>\n        <input type=\"number\" name=\"age\" id=\"age\"\n                th:field=\"*{age}\" ></p>\n    \n        <input type=\"submit\" value=\"Update user\"/>\n    </div>\n</form>\n\n\n\n\n\n\n\n\nThe client sends a request to update this user to HashMap: userForm\n\n<form th:action=\n        \"@{updateUser/{idFromView}\n        (idFromView=${userFromController.idUser})}\"\n      th:object=\n        \"${userFromController}\"\n      method=\n        \"post\">\n</form>\n\n\n\n\n\nFrom age 50 to 51\n\n\n\nThe sever-controller method handles the request, updates the user object in a HashMap and redirects the reponse: UserController and UserService\n\n@PostMapping(\"/updateUser/{idFromView}\")\npublic String updateUser(@PathVariable(\"idFromView\") String id,\n                            User updatedUser) {\n\n    User userFound = userService.findUserById(id);\n\n    if (userFound != null) {\n        userService.updateUserByUser(updatedUser);\n        return \"redirect:/user/users\";\n    } else return \"user/userNotFound\";\n}"
  },
  {
    "objectID": "springboot/sblab0-2.html#crud-delete",
    "href": "springboot/sblab0-2.html#crud-delete",
    "title": "Lab#SB00-2: CRUD User",
    "section": "7 CRUD: delete",
    "text": "7 CRUD: delete\n\nThe client sends a request to server-controller by an endpoint to delete a user: Users template\n\n\n\n\n\n\nWe are going to delete one user: Antoine\n\n\n\nThe server-controller method handles the request and sends a response with the result. It could be success (user deleted) or fail (the deletion operation could not be done): UserController\n\n@RequestMapping(\"/deleteUser\")\npublic String deleteUser(@RequestParam(\"idFromView\") String id) {\n\n    User userFound = userService.findUserById(id);\n\n    if (userFound != null) {\n        userService.deleteUserById(id);\n        return \"redirect:/user/users\";\n    } else return \"user/userNotFound\";\n\n\n}\n\n\n\n\n\nUser Antoine deleted\n\n\nThe @Controller uses userService to call @Service: deleteUserById:\npublic void deleteUserById(String id) {\n    users.remove(id);\n}\n\nThe server-controller method after handled the request sends the response: redirects the reponse to users: UserController redirect\n\n\n\n\n\n\n  Lab#SB00-1: Library UML \n\n\n\n  top \n\n\n\n Lab#SB00-3: LibraryManagement"
  },
  {
    "objectID": "springboot/sblab0-3.html",
    "href": "springboot/sblab0-3.html",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-3: Borrow Domain\nAfter Lab#SB00-1 and Lab#SB00-2 it is time to integrate and refactor the code created at projects:\n\nLibray5: Book domain (all CRUD operations)\ncontrollerView: User and Librarian domain (all CRUD operations)\nLibraryProject: from Java SE project we have the business logic of borrowing a book and the Borrow clas\nLibraryManagement is the result of combining three base projects into a single system.\nIt is a legacy system, meaning it has been in use for some time. The three original projects likely provided different functionality, such as book creation, user management, and borrowing/returning books, which were combined to eventually create the LibraryManagement system."
  },
  {
    "objectID": "springboot/sblab0-3.html#initial-integration",
    "href": "springboot/sblab0-3.html#initial-integration",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "1 Initial integration",
    "text": "1 Initial integration\n\nLibrary Management just initial integration with book-selection.\n\n\n\n\n\n\nJava Classes Library Management\n\n\n\n\n\n\nTemplates Library Management\n\n\n\n\n\n\nGeneral View Library Management\n\n\n\nLibrary5 is a library module that provides CRUD (Create, Read, Update, Delete) operations for the Book domain. This means that the Library5 module provides functions or classes that allow users of the software to create, read, update, and delete information about books in the system.\ncontrollerView is a module that provides CRUD operations for both the User and Librarian domains. This module provides functions or classes that allow users and librarians to interact with the system, including creating, reading, updating, and deleting information about users and librarians.\nLibraryProject is the main Java SE project that contains the business logic for borrowing a book, as well as a Borrow class. The Borrow class represents a transaction in which a user borrows a book from the library."
  },
  {
    "objectID": "springboot/sblab0-3.html#user-story-use-case",
    "href": "springboot/sblab0-3.html#user-story-use-case",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "2 user-story & use-case",
    "text": "2 user-story & use-case\n\n\n\n\n\n\nuser-story\n\n\n\nAs a user/librarian, we are able to access user’s borrow domain from use/users web domain and perform such a operations:\n\n\n\ncreate a new borrow\nborrows stored in a HashMap\nrenovation borrow\nreturn books from borrow\nclose a borrow\nfindBorrowsByUser\nselectBooks by userId\n\nAnd also:\n\nfake login and logout\n\n\n2.1 use-cases\n\nCreate a new borrow: initiate a new record in the borrow HashMap for a user borrowing a book(s).\nBorrows HashMap: a database HashMap that stores information about borrowed books, including user information and return dates.\nRenovation borrow: extend the return date for a borrowed book by updating the corresponding borrow record.\nReturn books: update the borrow record to indicate that the borrowed book(s) have been returned.\nClose a borrow: mark a borrow record as closed to indicate that the borrowed book(s) have been returned and the borrow is complete.\nFake login as librarian or user: simulate a login as a librarian or user for testing or debugging purposes.\nLogout: terminate a user’s authenticated session.\nFind borrows by user: retrieve all borrow records associated with a particular user from the borrow HashMap."
  },
  {
    "objectID": "springboot/sblab0-3.html#mock-up",
    "href": "springboot/sblab0-3.html#mock-up",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "3 Mock up",
    "text": "3 Mock up\nCreating a web Thymeleaf app without CSS means that the application’s user interface will not have any styling.\nThe focus of the app is to test Spring Boot’s controller and service layers using data stored in HashMaps.\n\n\n\nMockup Web Library Management core use-case\n\n\nThis app will be useful for testing and development purposes, as it allows developers to quickly build and test the functionality of the controller and service layers without worrying about the presentation layer and the database\n\n\nHowever, it is not intended for production use, as a production app would require a more polished and professional user interface with styling and layout design\nMockup Web Library Management core use-case extended"
  },
  {
    "objectID": "springboot/sblab0-3.html#versions",
    "href": "springboot/sblab0-3.html#versions",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "4 Versions",
    "text": "4 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nLibrary Management 0.0\ncreate project pom and first integration\nBasic Structure - Java Classes - Templates\n-\n\n\nLibrary Management 0.1\nselect books and userid without a borrow, send Array from TH to @Controller\n-\n-\n\n\nLibrary Management 0.2\nsession and httpServletRequest & filter tables with JS script in static resources\n-\n-\n\n\nLibrary Management 0.3\nsimplify login and put together login user and librarian, using select option and th:if\n-\n-\n\n\nLibrary Management 0.4\nborrowByUserId, borrow -serviceBorrow- and book domain, two columns css, logout\nFolder-Tree Library Management\n1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 - 11\n\n\nLibrary Management 0.5\ncreate borrow from user domain and allBorrows & activeBorrows\n-\n12 - 13 - 14\n\n\nLibrary Management 0.6\nreturn book (selecting byBorrowId and not using UserId)\n-\n15 - 16\n\n\nLibrary Management 0.7\ncreate Borrow from borrows ByUserId And BookIds\n-\n17 - 18 - 19 - 20 - 21\n\n\n\n\n\n\n\n\n  Lab#SB00-2: CRUD User \n\n\n\n  top \n\n\n\n Lab#SB00-4: API Rest"
  },
  {
    "objectID": "springboot/sblab0-4.html",
    "href": "springboot/sblab0-4.html",
    "title": "Lab#SB00-4: API Rest",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-4: API Rest\nAfter Lab#SB00-3 we are going to creata an API Rest just for book domain.\nYou may also check this introduction to API Rest."
  },
  {
    "objectID": "springboot/sblab0-4.html#overview",
    "href": "springboot/sblab0-4.html#overview",
    "title": "Lab#SB00-4: API Rest",
    "section": "1 Overview",
    "text": "1 Overview\nAn API is a set of definitions and protocols for building and integrating application software.\n\nIt’s sometimes referred to as a contract between an information provider and an information user—establishing the content required from the consumer (the call) and the content required by the producer (the response).\n\n\n\nFor example, the API design for a weather service could specify that the user supply a zip code and that the producer reply with a 2-part answer, the first being the high temperature, and the second being the low temperature.\n\n\n\n\n\n\nRest\n\n\n\nREST is a set of architectural constraints, not a protocol or a standard. API developers can implement REST in a variety of ways.\n\n\nWhen a client request is made via a RESTful API, it transfers a representation of the state of the resource to the requester or endpoint.\nThis information, or representation, is delivered in one of several formats via HTTP: JSON (Javascript Object Notation), HTML, XLT, Python, PHP, or plain text.\n\n\n\n\n\n\nJSON\n\n\n\nJSON is the most generally popular file format to use because, despite its name, it’s language-agnostic, as well as readable by both humans and machines."
  },
  {
    "objectID": "springboot/sblab0-4.html#http-messages",
    "href": "springboot/sblab0-4.html#http-messages",
    "title": "Lab#SB00-4: API Rest",
    "section": "2 HTTP messages",
    "text": "2 HTTP messages\nHTTP messages are how data is exchanged between a server and a client.\nThere are two types of messages:\n\nrequests sent by the client to trigger an action on the server,\nand responses, the answer from the server.\n\nHTTP messages are composed of textual information encoded in ASCII, and span over multiple lines.\n\n\nIn HTTP/1.1, and earlier versions of the protocol, these messages were openly sent across the connection. In HTTP/2, the once human-readable message is now divided up into HTTP frames, providing optimization and performance improvements.\n\n\n\nHTTP message\n\n\nHTTP requests, and responses, share similar structure and are composed of:\n\nA start-line describing the requests to be implemented, or its status of whether successful or a failure. This start-line is always a single line.\nAn optional set of HTTP headers specifying the request, or describing the body included in the message.\nA blank line indicating all meta-information for the request has been sent.\nAn optional body containing data associated with the request (like content of an HTML form), or the document associated with a response. The presence of the body and its size is specified by the start-line and HTTP headers."
  },
  {
    "objectID": "springboot/sblab0-4.html#http-status-messages",
    "href": "springboot/sblab0-4.html#http-status-messages",
    "title": "Lab#SB00-4: API Rest",
    "section": "3 HTTP status messages",
    "text": "3 HTTP status messages\n\nHTTP status messages\n\n\n\n\nHTTP status messages poster\n\n\nSource-status-code-poster by Steve Schoger"
  },
  {
    "objectID": "springboot/sblab0-4.html#library-management-base-project",
    "href": "springboot/sblab0-4.html#library-management-base-project",
    "title": "Lab#SB00-4: API Rest",
    "section": "4 Library Management base project",
    "text": "4 Library Management base project\n\nLibrary Management 0.7"
  },
  {
    "objectID": "springboot/sblab0-4.html#folder-tree-project",
    "href": "springboot/sblab0-4.html#folder-tree-project",
    "title": "Lab#SB00-4: API Rest",
    "section": "5 Folder-tree project",
    "text": "5 Folder-tree project\n\n\n\nLibrary Management"
  },
  {
    "objectID": "springboot/sblab0-4.html#api-rest-book",
    "href": "springboot/sblab0-4.html#api-rest-book",
    "title": "Lab#SB00-4: API Rest",
    "section": "6 API Rest book",
    "text": "6 API Rest book\nReference:\n\nBuilding a RESTful Web Service\nWhat is JSON\nLibrary1 Rest Controller Book\nWhat is a REST API?\n\n\n\n\n\n\n\n@RestController Annotation\n\n\n\nThis annotation is used at the class level and allows the class to handle the requests made by the client. The RestController allows to handle all REST APIs such as GET, POST, Delete, and PUT requests.\n\n\nWe define a REST controller using the @RestController and @RequestMappingannotations. The controller handles requests related to books under the base path \"/api/book\".\nThe BookRestController class has a dependency on the BookService class, which is automatically injected using the @Autowired annotation.\nThe controller has a GET method mapped to the \"/books\" path, which retrieves all the books using the bookService.getAllBooks() method and returns them as a HashMap with String keys and Book values.\n\n\nThis method can be accessed through a web browser or another client, and it will return the response in a format such as JSON or XML.\npackage com.example.myFirstSpring.restcontroller;\n\nimport com.example.myFirstSpring.model.Book;\nimport com.example.myFirstSpring.service.BookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.util.HashMap;\n\n@RestController\n@RequestMapping(\"/api/book\")\npublic class BookRestController {\n\n    @Autowired\n    BookService bookService;\n\n    @GetMapping (\"/books\")\n    public HashMap<String, Book> getAllBooks(){\n\n      return bookService.getAllBooks();\n\n\n    }\n}"
  },
  {
    "objectID": "springboot/sblab0-4.html#postman",
    "href": "springboot/sblab0-4.html#postman",
    "title": "Lab#SB00-4: API Rest",
    "section": "7 Postman",
    "text": "7 Postman\n\n\n\nPostman\n\n\nPostman is a popular API development tool used by developers to test, design, and document APIs.\nWith Postman, developers can send requests to APIs and receive responses, allowing them to check the functionality of the API and identify any issues that need to be fixed.\nPostman also allows developers to create collections of requests and to collaborate with other developers by sharing these collections.\n\n7.1 Install Postman in Linux Mint\n\n$ sudo rm /etc/apt/preferences.d/nosnap.pref\n$ sudo apt update\n$ sudo apt install snapd\n$ sudo snap install postman\n\nendpoint: http://localhost:8086/api/book/books\n\n\n\nPostman\n\n\n\n\n7.2 Using variables\nVariables enable you to store and reuse values in Postman.\nBy storing a value as a variable, you can reference it throughout your collections, environments, requests, and test scripts. Variables help you work efficiently, collaborate with teammates, and set up dynamic workflows."
  },
  {
    "objectID": "springboot/sblab0-4.html#swagger",
    "href": "springboot/sblab0-4.html#swagger",
    "title": "Lab#SB00-4: API Rest",
    "section": "8 Swagger",
    "text": "8 Swagger\nSwagger, on the other hand, is an open-source framework for designing and documenting APIs.\nWith Swagger, developers can create an API specification that defines the endpoints, parameters, and responses of an API.\nThis specification can then be used to generate documentation, client libraries, and server stubs in multiple programming languages.\nSwagger also includes a user interface called Swagger UI, which allows developers to interact with an API and explore its endpoints and responses.\n\n8.1 Add Swagger to Spring\nAdd Swagger to project, swagger web and refactor:\n\nURL swagger :\n\n\nhttp://localhost:8080/swagger-ui.html\n\n\nJava Version and dependencies\n\n  <properties>\n              <java.version>11</java.version>\n  </properties>\nDependencies:\n  <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n    <dependency>\n          <groupId>io.springfox</groupId>\n          <artifactId>springfox-swagger2</artifactId>\n          <version>2.9.2</version>\n  </dependency>\n\n  <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->\n  <dependency>\n        <groupId>io.springfox</groupId>\n        <artifactId>springfox-swagger-ui</artifactId>\n        <version>2.9.2</version>\n  </dependency>\n\nAnnotation:\n\n\n@EnableSwagger2 in Main\n\n\napplication.properties:\n\n\nspring.mvc.pathmatch.matching-strategy=ant-path-matcher\n\n\njava class config:\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@EnableSwagger2\n@Configuration\npublic class SpringFoxConfig {\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors\n                .any())\n                .paths(PathSelectors\n                .any())\n                .build();\n    }\n}"
  },
  {
    "objectID": "springboot/sblab0-4.html#versions",
    "href": "springboot/sblab0-4.html#versions",
    "title": "Lab#SB00-4: API Rest",
    "section": "9 Versions",
    "text": "9 Versions\nendpoint: http://localhost:8090/api/book/books\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nLibrary Management Rest 0.0\ncreate project pom and refactoring, CRUD: read all books\nBasic Structure\nlocalhost:8090/api/book/books\n\n\nLibrary Management Rest 0.1\nCRUD: delete book\n-\nlocalhost:8090/api/book/deleteBook\n\n\nLibrary Management Rest 0.2\nCRUD: create book & create borrow by ids\n-\nlocalhost:8090/api/book/books - localhost:8090/api/user/users - localhost:8090/api/borrow/createBorrow\n\n\nLibrary Management Rest 0.3\nCRUD: update book and update method in book model\nFinal structure\nlocalhost:8090/api/book/updateBook\n\n\nLibrary Management Rest 0.4\nuser CRUD\n\n\n\n\n\n\n9.1 Postman apis\n\n\n\nDomain\nLink\nObjects\n\n\n\n\nbooks\npostman link\nbook\n\n\nborrow\npostman link\nbook user borrow\n\n\nuser\npostman link\nuser\n\n\n\n\n\n\n\n\n  Lab#SB00-3: LibraryManagement \n\n\n\n  top \n\n\n\n Lab#SB00-5: Rest & JPA-H2"
  },
  {
    "objectID": "springboot/sblab0-5.html",
    "href": "springboot/sblab0-5.html",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-5: API Rest and JPA H2\nH2 database is a lightweight, open-source, and fast in-memory database that can be easily integrated with Spring Boot applications.\nSpring Boot is a popular framework for building enterprise-grade applications quickly and easily.\nWe will walk through the steps to set up a H2 database in Linux Spring Boot, create a local server, define a User entity, and expose RESTful APIs to perform CRUD operations on the User entity using Postman."
  },
  {
    "objectID": "springboot/sblab0-5.html#install-and-create-a-h2-db",
    "href": "springboot/sblab0-5.html#install-and-create-a-h2-db",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "1 Install and create a H2 DB",
    "text": "1 Install and create a H2 DB\nReferences:\n\nSpring Boot: H2 DB and Thymeleaf\nSpring Boot: Rest\nLibrary5\n\nInstall Java and Spring Boot on your Linux machine or start from previous project:\n\nDownload and install Java JDK from the official Oracle website.\nDownload and install Spring Boot from the official Spring website.\nDownload the H2 database from the official H2 website.\nExtract the downloaded file to a location on your Linux machine.\nExecute H2 Desktop app and create a local H2 DB.\n\n\n\n\nCreate a H2 DB\n\n\n\nCreation H2 DB step-by-step"
  },
  {
    "objectID": "springboot/sblab0-5.html#librarymanagmentrest-using-h2",
    "href": "springboot/sblab0-5.html#librarymanagmentrest-using-h2",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "2 LibraryManagmentRest using H2",
    "text": "2 LibraryManagmentRest using H2\n\n\n\nTree-folder project with UserRepository\n\n\n\n2.1 Configure H2 DB\n\npom.xml: dependencies H2 and JPA\nUserRepository interface\nUser class @Entity\napplication.properties\nmodify service to create a user object from API Rest and save it to H2 DB\n\n<dependency>\n  <groupId>com.h2database</groupId>\n  <artifactId>h2</artifactId>\n  <scope>runtime</scope>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n\n\n2.2 application.properties\n\n\n\napplication properties file\n\n\n\nOpen the application.properties file located in the sc/main/resources directory of your Spring Boot project.\nAdd the following configuration to use the H2 database:\n\nserver.port=8090\n\nspring.h2.console.enabled=true\n\n#H2 DATASOURCE\nspring.datasource.url=jdbc:h2:/home/albert/MyProjects/MyDBs/h2DBs/libraryManagementRest\n#spring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.username=albert\nspring.datasource.password=1234\nspring.datasource.driver-class-name=org.h2.Driver\n\n#JPA\n#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect\nspring.jpa.defer-datasource-initialization=true\n\n#Remove banner\nspring.main.banner-mode=off\n\n#DDL\n#example: create table book_table (book_id bigint not null, author varchar(255), isbn varchar(255), pages integer not null, published_year integer, book_title varchar(255), primary key (book_id))\nspring.jpa.hibernate.ddl-auto=update\nThis is a configuration file in the application.properties format for a Spring Boot application. It specifies various settings related to the H2 database, JPA, and the application’s server port.\n\nThe server.port setting sets the port number for the application’s server to 8090.\nspring.h2.console.enabled=true enables the H2 database console, which allows you to interact with the database from a web interface.\nThe spring.datasource settings specify the URL, username, password, and driver class name for the H2 database.\nThe spring.jpa settings specify the Hibernate dialect to be used for the database, and set defer-datasource-initialization to true to delay database connection until necessary.\nspring.main.banner-mode=off disables the Spring Boot banner during application startup.\nspring.jpa.hibernate.ddl-auto=update instructs Hibernate to automatically update the database schema based on changes to JPA entity classes. In this case, it specifies a single table named book_table with columns for book_id, author, isbn, pages, published_year, and book_title.\n\n\n\n2.3 DDL\nDDL stands for Data Definition Language. It is a subset of SQL (Structured Query Language) used to define, modify and delete the structure of database objects like tables, indexes, views, and procedures.\n\n\nDDL commands are used to create or alter the schema of a database, which defines the layout of the data and the relationships between the tables. Some examples of DDL statements include CREATE TABLE, ALTER TABLE, DROP TABLE, CREATE INDEX, and CREATE PROCEDURE.\n\n\n\n\n\n\nspring.jpa.hibernate.ddl-auto\n\n\n\nSpecifically, the spring.jpa.hibernate.ddl-auto property is used to control how Hibernate generates or updates the database schema.\nThe available options are create, create-drop, update, validate, and none.\n\n\nThe available options are:\n\nIf set to create, Hibernate will create the database schema on application startup.\nIf set to create-drop, Hibernate will create the schema on startup and drop it on shutdown.\nIf set to update“, Hibernate will update the schema to match the entity mappings.\nIf set to validate“, Hibernate will only validate the schema but not update it.\nAnd if set to none, Hibernate will not perform any schema management operations.\n\nIt’s important to choose the appropriate value for this property based on your specific needs and deployment environment.\n\n\n2.4 Create a User repository and User entity\n\nCreate a new package and a new interface named UserRepository in the package with the following code:\n\nimport com.example.myFirstSpring.model.User;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface UserRepository extends CrudRepository<User, String> {}\n\nCreate a User entity: create a new package and a new class named User in the package with the following code:\n\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n@Data // generates getters, setters, equals, hashCode, and toString methods\n@NoArgsConstructor // generates a no-args constructor\n@AllArgsConstructor // generates a constructor with all arguments\n@Entity(name=\"User\")\n@Table(name=\"USER_TABLE\")\npublic class User {\n    @Id\n    private String userId;\n    private String name;\n    private String address;\n    private int age;\n}\n\nAdd userRepository.save(user); in createUser, userService:\n\n  public User createUser(User user) {\n\n        String newUserId = Utils.createUUID();\n        user.setUserId(newUserId);\n\n        userRepository.save(user);\n\n        return users.put(newUserId, user);\n\n    }\n\n\n2.5 Execute project\nWhen the application starts, Spring Boot will automatically execute the DDL scripts specified in the schema.sql or data.sql files located in the src/main/resources directory.\nIf these files are not present, Spring Boot will create an empty H2 database using the default settings specified in the application.properties file.\n\n\nOnce the database is created and configured, Spring Boot will use JPA to manage the database schema and entities, allowing you to easily perform CRUD operations and other database operations in your application.\n\n\n\nSpring Boot Execution and DDL creating a empty H2 DB\n\n\n\n\nOnce the database is created and configured, Spring Boot will use JPA to manage the database schema and entities, allowing you to easily perform CRUD operations and other database operations in your application."
  },
  {
    "objectID": "springboot/sblab0-5.html#api-rest",
    "href": "springboot/sblab0-5.html#api-rest",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "3 API Rest",
    "text": "3 API Rest\n\nOpen Postman and create a new request.\nSet the HTTP method to \"POST\" and set the request URL to \"http://localhost:8090/api/user/createUser\".\nClick on the “Body” tab and select the “raw” radio button. Set the request body to the following JSON object:\n\n{\n    \"name\": \"I AI\",\n    \"address\": \"Isaac Asimov\",\n    \"age\": 566\n}\n\nThis will create a new User entity, so click on the “Send” button to send the request.\nIf the request is successful, you should receive a response with a status code of 201 Created and the User entity in the response body.\n\n\n\n\nPostman sends a request and shows the response of the created User object\n\n\n\nTo check if the User entity has been created in the H2 database, you should use the H2 console: Open a web browser and navigate to \"http://localhost:8090/h2-console\".\n\n\nDriver Class: org.h2.Driver\nJDBC URL: jdbc:h2:/home/albert/MyProjects/MyDBs/h2DBs/libraryManagementRest\nUser Name: albert\nPassword: 1234\n\n\n\n\nH2 console URL and data to enter\n\n\nEnter the following SQL query:\nSELECT * FROM USER_TABLE;\nThis should return a result set containing the User entity you just created.\n\n\n\nSELECT * FROM USER_TABLE;"
  },
  {
    "objectID": "springboot/sblab0-5.html#versions",
    "href": "springboot/sblab0-5.html#versions",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "4 Versions",
    "text": "4 Versions\nendpoint example: http://localhost:8090/api/book/books\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nLibrary Management Rest H2 0.0\nadd H2 to project: application.properties, @Entity, @UserRepository, POM  userRestController: createUser, getAllusers\nBasic Structure\nlocalhost:8090/api/user/createUser\n\n\nLibrary Management Rest H2 0.1\nrefactor user to H2, remove HashMap users and add ResponseEntity\n-\n-\n\n\nLibrary Management Rest H2 0.2\nrefactor book to H2, remove HashMap books and add ResponseEntity\n-\n-\n\n\nLibrary Management Rest H2 0.3\nrefactor borrow to H2, remove HashMap borrows and add ResponseEntity  getAllBorrows, populate , createBorrow\n-\n-\n\n\nLibrary Management Rest H2 0.4\nrefactor borrow to H2, remove HashMap borrows and add ResponseEntity  returnBook\n-\n-\n\n\nLibrary Management Rest H2 0.5\nuser new field: borrowIds \n-\n-\n\n\n\n\n4.1 Postman apis\n\n\n\nDomain\nLink\nObjects\n\n\n\n\nbooks\npostman link\nbook\n\n\nborrow\npostman link\nborrow\n\n\nuser\npostman link\nuser\n\n\n\n\n\n\n\n\n  Lab#SB00-4: API Rest \n\n\n\n  top \n\n\n\n Lab#SB00-6: Rest & MongoDB"
  },
  {
    "objectID": "springboot/sblab0-6.html",
    "href": "springboot/sblab0-6.html",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-6: API Rest and NoSQL-MongoDB\nConnecting Spring Boot entity book to MongoDB Atlas can be completed in a few steps.\nTo connect Spring Boot entity book to MongoDB Atlas, create an account, cluster and database user on MongoDB Atlas. Add MongoDB dependency, configure application.properties and create a Book entity and repository.\nFinally, use the repository to perform CRUD operations on your books collection."
  },
  {
    "objectID": "springboot/sblab0-6.html#references",
    "href": "springboot/sblab0-6.html#references",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "1 References",
    "text": "1 References\n\nSpring Boot Data\nAccessing Data with MongoDB\nSpring Boot Integration with MongoDB Tutorial\nJava - Mapping POJOs\nMongoDB Atlas\nLibrary7"
  },
  {
    "objectID": "springboot/sblab0-6.html#example-book",
    "href": "springboot/sblab0-6.html#example-book",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "2 Example: Book",
    "text": "2 Example: Book\nTo connect your Spring Boot entity book to MongoDB Atlas, you can follow these steps:\n\nCreate a MongoDB Atlas account: First, you need to create an account on MongoDB Atlas. You can sign up for a free account with a limit of 512 MB storage.\nCreate a new project: After logging in, create a new project and give it a name.\nCreate a new cluster: In the project dashboard, click on the “Build a New Cluster” button. Choose a provider, region, and the cluster tier that suits your requirements. Configure your cluster and click “Create Cluster” to start building your cluster.\nCreate a database user and IP permission: Once the cluster is ready, create a database user with appropriate permissions and give network access (add your IP to IP Access List).\nGet connection string: After creating a database user, you will get a connection string that you can use to connect to your MongoDB Atlas cluster. Copy the connection string to use it later.\nAdd MongoDB dependency: In your Spring Boot project, add the MongoDB dependency in the pom.xml file:\n\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n\nConfigure application.properties: In the application.properties file, add the following properties:\n\nspring.data.mongodb.uri=mongodb+srv://<username>:<password>@<clustername>.mongodb.net/<dbname>?retryWrites=true&w=majority\nspring.data.mongodb.database=<dbname>\nReplace <username>, <password>, <clustername>, and <dbname> with your own values.\n\nCreate Book Document: Create a Book Document class with annotations.\n\n@Document(collection = \"books\")\npublic class Book {\n    @Id\n    private String id;\n    private String title;\n    private String author;\n    // getters and setters\n}\n\nCreate a Book repository: Create a repository interface that extends MongoRepository<Book, String>:\n\npublic interface BookRepository extends MongoRepository<Book, String> {\n}\n\nUse the Book repository: You can use the Book repository to perform CRUD operations on your books collection.\n\n@Service\npublic class BookService {\n    @Autowired\n    private BookRepository bookRepository;\n\n    public List<Book> getAllBooks() {\n        return bookRepository.findAll();\n    }\n\n    public void addBook(Book book) {\n        bookRepository.save(book);\n    }\n\n    public void deleteBook(String id) {\n        bookRepository.deleteById(id);\n    }\n}"
  },
  {
    "objectID": "springboot/sblab0-6.html#librarymanagementrest-mongodb",
    "href": "springboot/sblab0-6.html#librarymanagementrest-mongodb",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "3 LibraryManagementRest: mongoDB",
    "text": "3 LibraryManagementRest: mongoDB\n\n3.1 folder-tree\n\n\n\nFolder-tree bookImage\n\n\n\n\n3.2 mongoDB: string connection\n\n\n\nCreate account and cluster\n\n\n\n\n\nClusterTest where we will create our db\n\n\n\n\n\nCreate DB\n\n\n\n\n\nDB and Collection name\n\n\n\n\n\nJust created LibraryManagmentRest DB\n\n\n\n\n\nCreating user to access DB\n\n\n\n\n\nAdd new user to db\n\n\n\n\n\nNetwork access\n\n\n\n\n\nConnect mongoDB to app: string connection\n\n\n\n\n\nConnect to Clustertest: connect your application\n\n\n\n\n\nConnect to Clustertest: string connection\n\n\n\n\n3.3 application.properties\nTo connect a Spring Boot application to MongoDB, you can use the spring.data.mongodb.uri property in the application.properties file to specify the connection string.\nThe connection string typically consists of the username, password, host, port, and database name.\nspring.data.mongodb.uri=mongodb+srv://cifo:1234@clustertest.0h8fd.mongodb.net/LibraryManagementRest\nspring.data.mongodb.database=LibraryManagementRest\n\n\nYou can also use a connection string with additional options like SSL, authentication mechanisms, and connection pooling. By placing the connection string in the application.properties file, you can easily configure the connection and change it without modifying the source code.\nThe Spring Boot MongoDB starter will automatically use the connection string to create a MongoDB client and configure the data source.\n\n\n3.4 @Document\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Document(collection = \"bookImage\")\npublic class BookImage {\n\n    @Id\n    private String id;\n    private String name;\n    private Binary image;\n}\n\n\n3.5 @RestController\n@RestController\n@RequestMapping(\"api/image\")\npublic class BookImageRestController {\n\n    @Autowired\n    BookImageRepository bookImageRepository;\n\n    @PostMapping(\"upload\")\n    public BookImage saveBookImage( @RequestParam String name, @RequestParam MultipartFile file) throws IOException {\n        BookImage bookImage  = new BookImage();\n        //bookImage.setId(Utils.createUUID());\n        bookImage.setName(name);\n        bookImage.setImage( new Binary(file.getBytes() ));\n\n        bookImageRepository.save(bookImage);\n\n        return bookImage;\n\n    }\n\n    @GetMapping(\"/getData\")\n    public String getDataBookImage(@RequestParam  String id){\n\n        Optional<BookImage> bookImage = bookImageRepository.findById(id);\n        Encoder encoder = Base64.getEncoder();\n\n        return encoder.encodeToString( bookImage.get().getImage().getData() );\n\n    }\n\n    @GetMapping(\"/getImage\")\n    public ResponseEntity<byte[]> getBookImage(@RequestParam String id){\n\n        Optional<BookImage> bookImage = bookImageRepository.findById(id);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.IMAGE_JPEG);\n\n        return new ResponseEntity<>( bookImage.get().getImage().getData(), headers, HttpStatus.OK );\n\n    }\n}\n\n\n3.6 @Repository\n@Repository\npublic interface BookImageRepository extends MongoRepository<BookImage, String> {}"
  },
  {
    "objectID": "springboot/sblab0-6.html#api-rest-postman",
    "href": "springboot/sblab0-6.html#api-rest-postman",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "4 API Rest: postman",
    "text": "4 API Rest: postman\n\n4.1 upload\n\nOpen Postman and create a new request.\nSet the HTTP method to \"POST\" and set the request URL to \"http://localhost:8090/api/image/upload\".\nClick on the “Body” tab and select the “form-data” radio button. Set the request body to the following key-value:\n\n\n\n\nkey-value to send an Image\n\n\nand the name of the image:\n\n\n\nImage name as a query param\n\n\n\nThis will create a new bookImage document, so click on the “Send” button to send the request.\nIf the request is successful, you should receive a response with a status code of 201 Created and the bookImage document in the response body.\n\n\n\n\nRequest Post create bookImage\n\n\n\n\n\nMongoDB collection document created\n\n\n\n\n4.2 getImage\n\nOpen Postman and create a new request.\nSet the HTTP method to \"GET\" and set the request URL to \"http://localhost:8090/api/image/getImage\".\nClick on the “Params” tab and select the “key-value” data: id: 64367eb2a302f620eea0f1f7\nThe response from the server:\n\n\n\n\nRequest Get read bookImage\n\n\n\n\n4.3 upload one-to-many Book-BookImage\n\n\n\nSpring Boot using two very diferent data-soruces\n\n\nWe are going to update upload method: both classes, Book and BookImage will share ids in a one-to-many relationship.\n\nBook will be stored at local H2 SQL DB.\nBookImage will be stores at MongoDB Cloud noSQL DB.\n\nThe below code is designed to:\n\nretrieve a book by its ID from a book repository.\nIt then checks if the book exists and sets the book ID for a book image.\nIf the book exists, it saves the book image to the book image repository and adds the book image ID to the book’s list of image IDs,\nand then saves the updated book.\n\n\n\n\n\n\n\nupload image updated\n\n\n\nmethod Create CRUD API Rest public BookImage saveBookImage() on @RestController public class BookImageRestController{}:\nupload updated\n\n\n  // Finds a book in the book repository by its ID, if present.\n  Optional<Book> book = bookRepository.findById(bookId);\n  // Checks if the book exists and sets the book ID for the book image.\n  if (book.isPresent()) bookImage.setBookId(book.get().getBookId());\n  // If the book doesn't exist, return null.\n  else return null;\n  // Saves the book image to the book image repository.\n  BookImage bookImageSaved = bookImageRepository.save(bookImage);\n  // Adds the book image ID to the book's list of image IDs and saves the updated book.\n  Book bookUpdated = book.get().addBookImageId(bookImageSaved.getId());\n  bookRepository.save(bookUpdated);\n\nOpen Postman and create a new request.\nSet the HTTP method to \"POST\" and set the request URL to \"http://localhost:8090/api/image/upload\".\nClick on the “Body” tab and select the “form-data” radio button. Set the request body to the following key-value for both, name and bookId:\n\n\n\n\nupload image with bookId @RequestParam\n\n\n\n\n\ngetAll bookImages and find out the previous bookId with the bookImageId related"
  },
  {
    "objectID": "springboot/sblab0-6.html#versions",
    "href": "springboot/sblab0-6.html#versions",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "5 Versions",
    "text": "5 Versions\nendpoint example: http://localhost:8090/api/image/upload\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nLibrary Management Rest MongoDB 0.0\nadd MongoDB to project: application.properties, @Document, @Repository, POM  BookImageRestController: upload, getImage, getDataImage\nFolder-tree bookImage\n-\n\n\nLibrary Management Rest MongoDB 0.1\nall CRUD operations with bookImage document\n-\n-\n\n\nLibrary Management Rest MongoDB 0.2\nadd ImageBook Id to books List book entity  and bookId to imageBook document\n-\n1 - 2\n\n\nLibrary Management Rest MongoDB 0.3\nadd data encryptation\n-\n-\n\n\n\n\n5.1 Postman apis\n\n\n\nDomain\nLink\nObjects\n\n\n\n\nbooks\npostman link\nbook\n\n\nborrow\npostman link\nborrow\n\n\nuser\npostman link\nuser\n\n\nbookImage\npostman link\nbookImage\n\n\n\n\n\n\n\n\n  Lab#SB00-5: Rest & JPA-H2 \n\n\n\n  top \n\n\n\n Lab#SB00-7:Styling"
  },
  {
    "objectID": "springboot/sblab0-7.html",
    "href": "springboot/sblab0-7.html",
    "title": "Lab#SB00-7: Styling",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-7: API Rest and NoSQL-MongoDB: refactor"
  },
  {
    "objectID": "springboot/sblab0-7.html#overview",
    "href": "springboot/sblab0-7.html#overview",
    "title": "Lab#SB00-7: Styling",
    "section": "1 Overview",
    "text": "1 Overview\n\n1.1 Clean and Improve Code for Book Image REST Controller in Spring Boot\nHere are some suggestions for cleaning up and improving the code:\n\nUse descriptive and meaningful variable names:\n\nChange bookImageRepository to repository or imageRepo.\nChange bookImage to image.\nChange optionalBookImage to optionalImage.\n\nUse constructor injection instead of field injection for better testability and maintainability.\n\nRemove the @Autowired annotation and add a constructor that takes BookImageRepository as a parameter.\nInitialize the bookImageRepository field with the constructor parameter.\n\nUse try-with-resources for handling resources that need to be closed, such as the MultipartFile.\nExtract common code into private methods to reduce duplication.\nAdd validation to ensure that required parameters are not null or empty.\nUse Java 8 Optional methods instead of calling .get() and checking for null.\nAdd error handling and return appropriate error responses.\nUse HTTP verbs consistently and according to their intended purpose.\nUse ResponseEntity<T> to return responses with the appropriate HTTP status codes and headers.\n\nHere’s an updated version of the code:\n@RestController\n@RequestMapping(\"api/image\")\npublic class BookImageRestController {\n\n    private final BookImageRepository imageRepo;\n\n    public BookImageRestController(BookImageRepository imageRepo) {\n        this.imageRepo = imageRepo;\n    }\n\n    @PostMapping(\"upload\")\n    public ResponseEntity<BookImage> saveBookImage(@RequestParam String name, @RequestParam MultipartFile file) throws IOException {\n        if (name == null || name.trim().isEmpty() || file == null) {\n            return ResponseEntity.badRequest().build();\n        }\n        try (InputStream inputStream = file.getInputStream()) {\n            BookImage image = new BookImage();\n            image.setName(name);\n            image.setImage(new Binary(inputStream.readAllBytes()));\n            BookImage savedImage = imageRepo.save(image);\n            return ResponseEntity.ok(savedImage);\n        }\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<byte[]> getBookImage(@PathVariable String id) {\n        Optional<BookImage> optionalImage = imageRepo.findById(id);\n        if (optionalImage.isPresent()) {\n            BookImage image = optionalImage.get();\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(MediaType.IMAGE_JPEG);\n            return ResponseEntity.ok().headers(headers).body(image.getImage().getData());\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<BookImage> updateBookImage(@PathVariable String id, @RequestParam String name, @RequestParam MultipartFile file) throws IOException {\n        if (name == null || name.trim().isEmpty() || file == null) {\n            return ResponseEntity.badRequest().build();\n        }\n        Optional<BookImage> optionalImage = imageRepo.findById(id);\n        if (optionalImage.isPresent()) {\n            try (InputStream inputStream = file.getInputStream()) {\n                BookImage image = optionalImage.get();\n                image.setName(name);\n                image.setImage(new Binary(inputStream.readAllBytes()));\n                BookImage updatedImage = imageRepo.save(image);\n                return ResponseEntity.ok(updatedImage);\n            }\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteBookImage(@PathVariable String id) {\n        Optional<BookImage> optionalImage = imageRepo.findById(id);\n        if (optionalImage.isPresent()) {\n            imageRepo.delete(optionalImage.get());\n            return ResponseEntity.ok().build();\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n}\n\n\n\n\n\n  Lab#SB00-6: Rest & MongoDB \n\n\n\n  top \n\n\n\n Lab#SB00-1: DataBase"
  },
  {
    "objectID": "springboot/sblab1.html",
    "href": "springboot/sblab1.html",
    "title": "Lab#SB01-1: DataBase",
    "section": "",
    "text": "Welcome to the cifojava2022-4 wiki!"
  },
  {
    "objectID": "springboot/sblab1.html#what-is-h2-database",
    "href": "springboot/sblab1.html#what-is-h2-database",
    "title": "Lab#SB01-1: DataBase",
    "section": "1.1 What is H2 Database",
    "text": "1.1 What is H2 Database\nH2 is pure Java SQL database, which means you can embed H2 directly in your Java applications without any database installation.\n\nVery fast, open source, JDBC API compatible.\nYou can use H2 in different modes, depending on your need:in-memory, embedded or client/server.\nH2 provides a browser-based console application which you can use to access SQL database.\nLightweight: about 2.5MB jar file size. With such features, H2 can be used for rapid prototype development,testing purpose or embedded in Java applications.\n\nH2 Java DataBase"
  },
  {
    "objectID": "springboot/sblab1.html#java-jdbc",
    "href": "springboot/sblab1.html#java-jdbc",
    "title": "Lab#SB01-1: DataBase",
    "section": "1.2 Java JDBC",
    "text": "1.2 Java JDBC\n\n1.2.1 demoMavenH2\nJava™ database connectivity (JDBC) is the JavaSoft specification of a standard application programming interface (API) that allows Java programs to access database management systems. The JDBC API consists of a set of interfaces and classes written in the Java programming language.\nUsing these standard interfaces and classes, programmers can write applications that connect to databases, send queries written in structured query language (SQL), and process the results.\nSince JDBC is a standard specification, one Java program that uses the JDBC API can connect to any database management system (DBMS), as long as a driver exists for that particular DBMS.\n\nProject Code GitHub repo\nProject Documentation"
  },
  {
    "objectID": "springboot/sblab1.html#entity-manager-api",
    "href": "springboot/sblab1.html#entity-manager-api",
    "title": "Lab#SB01-1: DataBase",
    "section": "1.3 Entity Manager API",
    "text": "1.3 Entity Manager API\n\n1.3.1 test-hibernate-jpa\nJava Persistence API is a Java Specification and Standard for Object Relational Mapping (ORM). In Object Relational Mapping we create Java Objects which represents the database entities. ORM also provides an EntityManager which provides methods to create, delete, update and find the objects from database.\nWe don’t need to write low level queries, we just need to use entity manager and access the entities through java objects.\n\nProject Code GitHub repo\nProject Documentation"
  },
  {
    "objectID": "springboot/sblab1.html#jpa-data-spring-boot",
    "href": "springboot/sblab1.html#jpa-data-spring-boot",
    "title": "Lab#SB01-1: DataBase",
    "section": "1.4 JPA Data Spring Boot",
    "text": "1.4 JPA Data Spring Boot\n\n1.4.1 libraryH2Command\nProject repo\nBase project:\n\nPOM\nDataBase H2\nApplication.Properties\nCommand Line Runner with methods to test\n@Entity Book\n@BookService Read and Create operations\n@BookRepository JPA 2.0\n\n\n\n\n\n\n  Lab#SB00-7: Styling \n\n\n\n  top \n\n\n\n Lab#SB02-1: Projects"
  },
  {
    "objectID": "springboot/sblab2.html",
    "href": "springboot/sblab2.html",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "",
    "text": "Welcome to the cifojava2022-3 wiki!"
  },
  {
    "objectID": "springboot/sblab2.html#basic-spring-boot-project",
    "href": "springboot/sblab2.html#basic-spring-boot-project",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.1 Basic Spring Boot project",
    "text": "1.1 Basic Spring Boot project\n\nPreliminary works:\n\nCreate project on Spring Init\nImages, step-by-step to create project\nLombok to make entities simplier\nJava-Faker to create entities\nBe careful with devtools!! You must go to settings and mark it, CTRL+ALT+S    on Advanced Settings: Allow Auto-make\nVery simple project: no database, @BookService with an ArrayList<Book> books where books are stored\n@RestController and @Controller to publish JSON data and an HTML web with Thymeleaf\n\nversion 1.0 : spring boot executions, api REST and web\nversion 2.0 : just some little modifications to explain what th: is\n\nProjects Table"
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-book-crud-with-postmanswagger",
    "href": "springboot/sblab2.html#api-rest-book-crud-with-postmanswagger",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.2 API Rest Book CRUD with Postman/Swagger",
    "text": "1.2 API Rest Book CRUD with Postman/Swagger\n\nBase project:\n\nPOM\nAPI REST Read CRUD\nDataBase H2\nApplication.properties\nCommand Line Runner with methods to test\nPostman to test API REST, Postman web\n@Entity, @RestController, @Service, @CrudRepository JPA 2.0, @Component\n\nRepo Code GitHub\nLibrary1 Documentation\n\nProjects Table"
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-author-book-onetomany-crud-with-swagger",
    "href": "springboot/sblab2.html#api-rest-author-book-onetomany-crud-with-swagger",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.3 API Rest Author-Book @OneToMany CRUD with Swagger",
    "text": "1.3 API Rest Author-Book @OneToMany CRUD with Swagger\n\nBase project:\n\nLibrary1\nTwo entities related @OneToMany, that is, 1:n\n\nLibrary2 Documentation\nRepo\n\nProjects Table"
  },
  {
    "objectID": "springboot/sblab2.html#library-book-manytomany-and-onetoone-crud",
    "href": "springboot/sblab2.html#library-book-manytomany-and-onetoone-crud",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.4 Library-Book @ManyToMany and @OneToOne CRUD",
    "text": "1.4 Library-Book @ManyToMany and @OneToOne CRUD\n\nBase project:\n\nLibrary2\nTwo/Three entities related @ManyToMany, that is, n:m and @OneToOne 1:1\n\nLibrary3 Documentation\nRepo GitHub Code\n\nProjects Table"
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-library-book-author-manytomany-onetomany-crud-with-swagger-and-inherence",
    "href": "springboot/sblab2.html#api-rest-library-book-author-manytomany-onetomany-crud-with-swagger-and-inherence",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.5 API Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence",
    "text": "1.5 API Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence\n\nBase project:\n\nLibrary2 and Library3\nInherence and Interficies\nAudit and JavaFaker\nJPQL\n\nBatch operations and Pagination\n\nLibrary4 Documentation\nRepo GitHub Code\n\nProjects Table"
  },
  {
    "objectID": "springboot/sblab2.html#thymeleaf-web-project",
    "href": "springboot/sblab2.html#thymeleaf-web-project",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.6 ThymeLeaf Web Project",
    "text": "1.6 ThymeLeaf Web Project\n\nBase project:\n\nLibrary\nTemplates HTML Thymeleaf, Templates Engine\n@Controller instead of @RestController\n\nLibrary5 Documentation\nRepo GitHub Code\n\nProjects Table"
  },
  {
    "objectID": "springboot/sblab2.html#pagination-thymeleaf-rest-web-project",
    "href": "springboot/sblab2.html#pagination-thymeleaf-rest-web-project",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.7 Pagination ThymeLeaf-Rest Web Project",
    "text": "1.7 Pagination ThymeLeaf-Rest Web Project\n\nBase project:\n\nLibrary\nTemplates HTML Thymeleaf, Templates Engine\n@RestController\nPagination and Sorting\n\nLibrary6 Documentation\nRepo GitHub Code\n\nProjects Table\n\n\n\n\n\n  Lab#SB01-1: DataBase \n\n\n\n  top \n\n\n\n Lab#SB03-1: API"
  },
  {
    "objectID": "springboot/sblab3.html",
    "href": "springboot/sblab3.html",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "",
    "text": "Welcome to the cifojava20Basics22-5 wiki!"
  },
  {
    "objectID": "springboot/sblab3.html#s-6c-thymeleaf-web-project-resttemplate-data-from-api-rest",
    "href": "springboot/sblab3.html#s-6c-thymeleaf-web-project-resttemplate-data-from-api-rest",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.1 (6S-6C) ThymeLeaf Web Project RestTemplate (data from API Rest)",
    "text": "2.1 (6S-6C) ThymeLeaf Web Project RestTemplate (data from API Rest)\n\n\nLibrary6\n\n\nBase project:\n\nLibrary1 > Library6server\nlibrary5 > library6server\nTemplates html Thymeleaf\n@Controller and @RestController\n@Service: RestTemplate"
  },
  {
    "objectID": "springboot/sblab3.html#websockets-spring-boot-project-with-js-web-client-sockjs-stomp",
    "href": "springboot/sblab3.html#websockets-spring-boot-project-with-js-web-client-sockjs-stomp",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.2 (8) Websockets Spring Boot Project with JS Web-Client SockJS & Stomp",
    "text": "2.2 (8) Websockets Spring Boot Project with JS Web-Client SockJS & Stomp\n\n\nLibrary8\n\n\nBase project:\n\nLibrary3\nWebSocket\nSTOMP Web-Client JS"
  },
  {
    "objectID": "springboot/sblab3.html#graphql-spring-boot-project-with-playground",
    "href": "springboot/sblab3.html#graphql-spring-boot-project-with-playground",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.3 (9) GraphQL Spring Boot Project with PlayGround",
    "text": "2.3 (9) GraphQL Spring Boot Project with PlayGround\n\n\nLibrary9\n\n\nBase project:\n\nLibrary3\nGraphQL"
  },
  {
    "objectID": "springboot/sblab3.html#axios-js-spa-web-spring-boot-project",
    "href": "springboot/sblab3.html#axios-js-spa-web-spring-boot-project",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.4 (10) Axios JS SPA Web Spring Boot Project",
    "text": "2.4 (10) Axios JS SPA Web Spring Boot Project\n\n\nLibrary10\n\n\nBase project:\n\nLibrary5\nAxios JS\nSPA"
  },
  {
    "objectID": "springboot/sblab3.html#spring-boot-project-with-api-rest-mongodb",
    "href": "springboot/sblab3.html#spring-boot-project-with-api-rest-mongodb",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.5 (7) Spring Boot Project with API Rest MongoDB",
    "text": "2.5 (7) Spring Boot Project with API Rest MongoDB\n\n\nLibrary7\n\n\nBase project:\n\nLibrary3\nMongoCrud\n@RestController"
  },
  {
    "objectID": "springboot/sblab3.html#spring-boot-server-dynamodb-aws",
    "href": "springboot/sblab3.html#spring-boot-server-dynamodb-aws",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.6 (12) Spring Boot Server DynamoDB AWS",
    "text": "2.6 (12) Spring Boot Server DynamoDB AWS\n\n\nLibrary12\n\n\nBase project:\n\nLibrary5\nCloud DynamoDB AWS"
  },
  {
    "objectID": "springboot/sblab3.html#web-spring-boot-project-webflux",
    "href": "springboot/sblab3.html#web-spring-boot-project-webflux",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.7 (13-14) Web Spring Boot Project WebFlux",
    "text": "2.7 (13-14) Web Spring Boot Project WebFlux\n\n\nLibrary13-14\n\n\nBase project:\n\nLibrary5\nWebFlux"
  },
  {
    "objectID": "springboot/sblab3.html#web-spring-boot-project-thyemleaf-security",
    "href": "springboot/sblab3.html#web-spring-boot-project-thyemleaf-security",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.8 (11) Web Spring Boot Project Thyemleaf-Security",
    "text": "2.8 (11) Web Spring Boot Project Thyemleaf-Security\n\n\nLibrary11\n\n\nBase project:\n\nLibrary5\nSecurity"
  },
  {
    "objectID": "springboot/sblab3.html#webflux-project-video-streaming",
    "href": "springboot/sblab3.html#webflux-project-video-streaming",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.9 (15) WebFlux Project Video Streaming",
    "text": "2.9 (15) WebFlux Project Video Streaming\n\n\nLibrary15\n\n\nBase project:\n\nLibrary5\nVideo Streaming\n\n\n\n\n\n\n\n\n  Lab#SB02-1: Projects \n\n\n\n  top \n\n\n\n Lab#SB04-1: JPA Inherence strategies"
  },
  {
    "objectID": "springboot/sblab4.html",
    "href": "springboot/sblab4.html",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "",
    "text": "Welcome to the cifojava2022-6 wiki!"
  },
  {
    "objectID": "springboot/sblab4.html#entity-inhrence-jpa",
    "href": "springboot/sblab4.html#entity-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.1 (0) @Entity Inhrence JPA",
    "text": "2.1 (0) @Entity Inhrence JPA\n\n\nJpaInherenceLibrary0\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book<> Auhtor\nDataBase H2: application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code inherence and JPA uses SINGLE_TABLE strategy by default\n  @Entity\n  public class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  public class ItemBook extends Book {\n\n     @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n     @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n               joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n               inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n     private Set<Author>authors = new HashSet<Author>();\n  }\n\n\n  @Entity(name=\"RareItem\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\n\nVersions\n\nJpaInherenceLibrary v 1.1 : without @MappedSuperClass and @Entity superclass, Single Table strategy is applied BY DEFAULT"
  },
  {
    "objectID": "springboot/sblab4.html#mappedsuperclass-inhrence-jpa",
    "href": "springboot/sblab4.html#mappedsuperclass-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.2 (1) MappedSuperclass Inhrence JPA",
    "text": "2.2 (1) MappedSuperclass Inhrence JPA\n\n\nJpaInherenceLibrary1\n\n\nBase project:\n\nPOM\n@Entity: ItemBook, RareBook and Auhtor\nNon-@Entity: Book\nDataBase H2: application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow can not we code @MappedSuperclass and @ManyToMany author\n  @MappedSuperclass\n  public abstract class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  @Table(name=\"ITEM_BOOK_TABLE\")\n  public class ItemBook extends Book {\n\n     @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n     @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n                 joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n                 inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n     private Set<Author>authors = new HashSet<Author>();\n  }\n\n\n  @Entity(name=\"RareItem\")\n  @Table(name=\"RARE_ITEM_TABLE\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\nWith @MappedSuperclass any relationship can’t be done\n\n\n\nWith @MappedSuperclass\n\n\nWith @MappedSuperclass, one SuperClass and two SubClasses:\n\n\n\nWith @MappedSuperclass\n\n\n\nVersions\n\nJpaInherenceLibrary1 v 1.0 : not using author just inherence without relatonship @ManyToMany"
  },
  {
    "objectID": "springboot/sblab4.html#single-table-with-discriminator-inhrence-jpa",
    "href": "springboot/sblab4.html#single-table-with-discriminator-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.3 (2) Single Table with Discriminator Inhrence JPA",
    "text": "2.3 (2) Single Table with Discriminator Inhrence JPA\n\n\nJpaInherenceLibrary2\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book<> Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n   @Entity\n   @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n   @DiscriminatorColumn(name=\"BOOK_TYPE\", \n         discriminatorType = DiscriminatorType.STRING)\n   public class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  @Table(name=\"BOOK_ITEM_TABLE\")\n  @DiscriminatorValue(value= \"ITEMBOOK\")\n  public class BookItem extends Book {\n\n  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n  @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n         joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n         inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n  private Set<Author>authors = new HashSet<Author>();}\n\n\n  @Entity(name=\"RareItem\")\n  @Table(name=\"RARE_ITEM_TABLE\")\n  @DiscriminatorValue(value= \"REAREBOOK\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\n\nWith @Inheritance and SINGLE_TABLE\n![@Inheritance ]( https://drive.google.com/uc?id=18nfiKnQaim4-lTD21iBwy313Daxtv73H)\n\nversion 1.1 : JpaInherenceLibrary2, SINGLE_TABLE strategy"
  },
  {
    "objectID": "springboot/sblab4.html#joined-table-inhrence-jpa",
    "href": "springboot/sblab4.html#joined-table-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.4 (3) Joined Table Inhrence JPA",
    "text": "2.4 (3) Joined Table Inhrence JPA\n\n\nJpaInherenceLibrary3\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book<> Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.JOINED)\n  @Entity\n  @Table(name=\"BOOK_TABLE\")\n  @Inheritance(strategy = InheritanceType.JOINED)\n  @DiscriminatorColumn(name=\"BOOK_TYPE\",\n         discriminatorType = DiscriminatorType.STRING)\n  public class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  @Table(name=\"BOOK_ITEM_TABLE\")\n  @PrimaryKeyJoinColumn(name = \"bookItemId\")\n  @DiscriminatorValue(value= \"ITEMBOOK\")\n  public class BookItem extends Book {\n\n  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n  @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n         joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n         inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n  private Set<Author>authors = new HashSet<Author>();}\n\n\n  @Entity(name=\"RareItem\")\n  @Table(name=\"RARE_ITEM_TABLE\")\n  @PrimaryKeyJoinColumn(name = \"rareItemId\")\n  @DiscriminatorValue(value= \"RAREBOOK\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\n\nWith @Inheritance and JOINED\n![@Inheritance JOINED](https://drive.google.com/uc?id=1BpxaW7fV_kh4PyFWn3i49nG4SqnKYpAE)\n\nverison 1.1 : JpaInherenceLibrary3"
  },
  {
    "objectID": "springboot/sblab4.html#table-per-class-inhrence-jpa",
    "href": "springboot/sblab4.html#table-per-class-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.5 (4) Table per class Inhrence JPA",
    "text": "2.5 (4) Table per class Inhrence JPA\n\n\nJpaInherenceLibrary4\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book<> Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n  @Entity\n  @Table(name=\"BOOK_TABLE\")\n  @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n  public class Book {}\n\n\n  @Entity(name=\"BookItem\")\n  @Table(name=\"BOOK_ITEM_TABLE\")\n  public class BookItem extends Book {\n\n  @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n  @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n       joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n       inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n  private Set<Author>authors = new HashSet<Author>();}\n\n\n  @Entity(name=\"RareItem\")\n  @Table(name=\"RARE_ITEM_TABLE\")\n  public class RareItem extends Book {}\n\n\n  @Entity(name=\"Author\")\n  @Table(name=\"AUTHOR_TABLE\")\n  public class Author {}\n\nWith @Inheritance and TABLE_PER_CLASS\n\n\n\n\n@Inheritance TABLE PER CLASS\n\n\nversion 1.1 : JpaInherenceLibrary4"
  },
  {
    "objectID": "springboot/sblab4.html#basic-spring-boot-project",
    "href": "springboot/sblab4.html#basic-spring-boot-project",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.6 (0) Basic Spring Boot project",
    "text": "2.6 (0) Basic Spring Boot project\n\n\nUniversal Planes\n\n\nPreliminary works:\n\nCreate project on Spring Init\n\nversion 1.0 : spring boot executions\n\n\n\n\n\n\n\n  Lab#SB03-1: API \n\n\n\n  top \n\n\n\n Lab#SB05-1: Advanced"
  },
  {
    "objectID": "springboot/sblab5.html",
    "href": "springboot/sblab5.html",
    "title": "Lab#SB05-1: API Rest",
    "section": "",
    "text": "Spring Boot Backend Api REST H2 MongoDB: link\n\n\n\n\n\n  Lab#SB04-1: JPA Inherence strategies \n\n\n\n  top \n\n\n\n Spring Boot employeeCourse"
  },
  {
    "objectID": "springboot/sblab6.html",
    "href": "springboot/sblab6.html",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "",
    "text": "JPA @Entity Employee and Images uploading/downloading:\n\nSpring Boot JPA @RestController without View and Thymeleaf\nRest Controller with image public class EmployeeImageController and Swagger\nApplication.properties\nClasses: JPA @Entity Employee and CrudRepository Interface\nDatabase: H2 (local or in Memory) and ddl.auto for data\nMongoDB connection and db for images\nIDE: Eclipse Mars"
  },
  {
    "objectID": "springboot/sblab6.html#employeecourse-java-ee-spring",
    "href": "springboot/sblab6.html#employeecourse-java-ee-spring",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "2 employeeCourse (java-EE spring)",
    "text": "2 employeeCourse (java-EE spring)\n\n2.1 github repo\nAlbertProfe/employeecourse\n\n\n2.2 Project Tree init:\n\n\n\nemployeeCourse (java-EE spring): main tree\n\n\n\n\n\nemployeeCourse (java-EE spring): java classes\n\n\n\n\n\nemployeeCourse (java-EE spring): templates html\n\n\n\n\n2.3 deploy and screens\ndeprecated NOV-2022 Deployed on Heroku: Heroky deploy\nscreenshoots from app: screenshots\n\n\n2.4 JPA relationships\n\n\n\nEmployee JPA relationships"
  },
  {
    "objectID": "springboot/sblab6.html#detail",
    "href": "springboot/sblab6.html#detail",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "3 Detail",
    "text": "3 Detail\n\nApplication.properties: mongoDB and H2\nLayout and fragment\n\nlayout.html\nlayout_login.html\nlayout_detail.html\n\nJava classes JPAHow layout works\n\nn:m TA as two @Entity and 1:n n:1 1:n\nEmployee <> Expense (@Entity H2) 1:n bidirectional\nEmployee <> Holidays (@Entity H2) 1:n unidirectional\nEmployee <> Enrollment <> Course <> Certificate (@Entity H2) n:m\nEmployee <> EmployeeImage (@Document MongoDB) 1:1 birectional\n\nRest Controller (Employee and EmployeeImage)\nCommandLineRunner\n\nHomeController Fill in entities in H2 and assign them\nEmployee @entity\n\nsetEmployeeImageId with employeeImageId string id from mongodb to-do\n\n\nEmployee (Items detail)\n\nEmpployee Detail\n\nPath (th:scr) to mognodb image from getEmployeeImageId via rest controller to-do\n\nCourses\n\nAdd couse to employee (insert date and status to-do)\nUpdate status\n\nExpenses\n\nCreate expense\nDelete expense (afer deleting return to Expenses or crete new detail to-do)\nUpdate expense\n\nHolidays\n\nAdd holidays date\nDelete holidays dates\nCreate holidays (rejects to create an existing year)\n\nUpload Image\n\nRest Controller via Postman\nAdd Image:\n\nupload image option (EmployeImage to mongoDB)\n1:1 - bidirectional (EmployeImage <> Employee)\n\n\n\nEnrollments to-do\nCourses and filters to-doAdvanced\nThymeleaf pagination to-do\nThymeleaf validation to-do\nAbstract class and inhrence with audit and DTO to-do\nJava 8 and H2 in memory to DEPLOY: upload to Heroku"
  },
  {
    "objectID": "springboot/sblab6.html#how-layout-works",
    "href": "springboot/sblab6.html#how-layout-works",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "4 How layout works",
    "text": "4 How layout works\n\n\n\nHow layout works\n\n\n\n\n\n\n\n  Lab#SB05-1: Advanced strategies \n\n\n\n  top \n\n\n\n Spring Boot Resources"
  },
  {
    "objectID": "reactjs/rjslab2.html#usecontext-login",
    "href": "reactjs/rjslab2.html#usecontext-login",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "6 useContext login",
    "text": "6 useContext login\nReference: useContext hook: Example #1\n\n\n\nuseContext: create, provide, consume\n\n\n\n\n\nuseContext: consume in components-tree\n\n\n\ncreateContext, useContext, useState working together\n\nIn this example, there is a currentUser state variable which holds an object.\nWe combine { currentUser, setCurrentUser } into a single object and pass it down through the context inside the value={}.\nThis lets any component below, such as LoginButton, read both currentUser and setCurrentUser, and then call setCurrentUser when needed.\n\n\nApp.js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <CurrentUserContext.Provider\n      value={{\n        currentUser,\n        setCurrentUser\n      }}\n    >\n      <Form />\n    </CurrentUserContext.Provider>\n  );\n}\n\nfunction Form({ children }) {\n  return (\n    <Panel title=\"Welcome\">\n      <LoginButton />\n    </Panel>\n  );\n}\n\nfunction LoginButton() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(CurrentUserContext);\n\n  if (currentUser !== null) {\n    return <p>You logged in as {currentUser.name}.</p>;\n  }\n\n  return (\n    <Button onClick={() => {\n      setCurrentUser({ name: 'Advika' })\n    }}>Log in as Advika</Button>\n  );\n}\n\nfunction Panel({ title, children }) {\n  return (\n    <section className=\"panel\">\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children, onClick }) {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nInitial render\n\n\n\nExamples of updating context"
  },
  {
    "objectID": "reactjs/rjslab3.html#user-story-mock-up",
    "href": "reactjs/rjslab3.html#user-story-mock-up",
    "title": "Lab#RE03-1: to-do app",
    "section": "1 user-story & mock-up",
    "text": "1 user-story & mock-up\nThis lab is a basic implementation of a Todo List application using React. It utilizes React hooks such as useReducer and useContext for state management.\nWe will define an initial set of todos and a reducer function that handles various actions like adding a new todo, deleting a todo, marking a todo as completed, and resetting the list.\nActions definition:\n\nadd action: Adds a new todo item to the list.\ndelete action: Removes a todo item from the list.\ncompleted action: Toggles the completed status of a todo item.\nreset action: Resets the todo list to its initial state.\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: \"lean how to comunicate\",\n    completed: true,\n    author: \"Faby\",\n    due: 1 / 5 / 2022\n  },\n  {\n    id: 2,\n    text: \"road out of hell\",\n    complete: false,\n    author: \"Alex\",\n    due: 1 / 6 / 2022\n  }\n];\n\n\nThe Object type represents one of JavaScript’s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.\nObject\nThe TodoApp component uses the useReducer hook to manage the state of todos and dispatch actions based on user interactions. It renders a header, a button to create new todos, and a TodosList component that displays the list of todos.\n\n\n\ninital render app\n\n\n\n\n\ncalendar picker to set date\n\n\n\n\n\ncreating new todos"
  },
  {
    "objectID": "reactjs/rjslab3.html#step-by-step-code",
    "href": "reactjs/rjslab3.html#step-by-step-code",
    "title": "Lab#RE03-1: to-do app",
    "section": "2 step-by-step code",
    "text": "2 step-by-step code\n\n2.1 Project creation\n\n\n\n\n\nstep-by-step cheatsheet\n\n\nFirst at all we create the React project with Route and Semantic css Library.\nThen, the reducer component: <ToDoApp />.\nIt uses React’s useReducer hook to manage the state of the todo items. The initial todos are predefined, and the app supports actions like adding a new todo, deleting a todo, and marking a todo as completed. The state of the todos is stored in an array.\nWe crete a placeholder useReducer:\nimport { Button, Input, Checkbox } from \"semantic-ui-react\";\nimport { useReducer } from \"react\";\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: \"lean how to comunicate\",\n    completed: true,\n    author: \"Faby\",\n    due: 1 / 5 / 2022\n  },\n  {\n    id: 2,\n    text: \"road out of hell\",\n    complete: false,\n    author: \"Alex\",\n    due: 1 / 6 / 2022\n  }\n];\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"bla\": {\n      return;\n    }\n    case \"blabla\": {\n      return;\n    }\n    default: {\n      return state;\n    }\n  }};\n\n\nexport default function ToDoApp(){\n    const [state, dispacher] = useReducer (reducer, initialTodos);\n\n    return (\n      <>\n        <br />\n        <span>ToDo</span>\n        <Button>Delete</Button>\n        <Input placeholder=\"Write something\" />\n        <Checkbox toggle />\n        <br />\n      </>\n    );\n};\n\n\n2.2 create new todo\nStep-by-step new todo creation:\n\nThe <Button> component is rendered with an onClick event handler,\nwhen the button is clicked, it dispatches an action of type \"add\" using the dispatch function\nand calls the reducer.\nThe reducer executes a case add creating a new state.\nAs a new state is created,\na new render is painted.\n\n\n\n\n\n\nHighchart Pie example\n\n\nimport { Button, Input, Checkbox } from \"semantic-ui-react\";\nimport { useReducer } from \"react\";\n\nconst initialTodos = [\n  // todos objects\n];\n\nfunction reducer(state, action) {\n  switch (action.type) {\n     case \"add\": {\n      return [\n        ...state,\n        {\n          id: Date.now(),\n          text: \"\",\n          author: \"\",\n          due: \"\",\n          completed: false\n        }\n      ];\n    }\n    case \"blabla\": {\n      return;\n    }\n    default: {\n      return state;\n    }\n  }};\n\n\nexport default function ToDoApp(){\n    const [state, dispatch] = useReducer(reducer, initialTodos);\n\n    return (\n      <>\n      <div style={{margin: \"40px\"}}>        \n        <br />\n        <Button onClick={\n          () => dispatch({ type: \"add\" })}>Create Todo</Button>\n        <br />\n        <span>todo id</span> {\" \"}\n        <Button>Delete</Button>\n        <Input placeholder=\"Write something\" />\n        <Checkbox toggle />\n        <br />\n        </div>\n\n      </>\n    );\n};\nThe <Button> component is rendered with an onClick event handler. When the button is clicked, it dispatches an action of type \"add\" using the dispatch function and calls the reducer.\n  <Button onClick={() => dispatch({ type: \"add\" })}>Create Todo</Button>\nIn the reducer, the spread operator (...state) is used to create a new array that includes all the existing elements without mutating the original state.\nimport { Button, Input, Checkbox } from \"semantic-ui-react\";\nimport { useReducer } from \"react\";\n\nconst initialTodos = [\n  // todos objects\n];\n\nfunction reducer(state, action) {\n  switch (action.type) {\n     case \"add\": {\n      return [\n        ...state,\n        {\n          id: Date.now(),\n          text: \"\",\n          author: \"\",\n          due: \"\",\n          completed: false\n        }\n      ];\n    }\n    case \"blabla\": {\n      return;\n    }\n    default: {\n      return state;\n    }\n  }};\n\n\nexport default function ToDoApp(){\n   // render\n};\nThe spread operator (...state) is used to create a new array that includes all the elements from the existing state array. This is done to avoid mutating the original state.\nA new object is created with the following properties:\n\nid: A unique identifier generated using Date.now(). This will ensure that each new item has a unique identifier.\ntext: An empty string.\nauthor: An empty string.\ndue: An empty string.\ncompleted: A boolean value set to false, indicating that the item is not completed.\n\nThe new object is then added to the end of the new array created at initial load using the spread operator (…state).\nThis ensures that the new item is appended to the existing items in the state array.\nFinally, the updated array is returned from the reducer function, representing the new state with the newly added item.\n\n\n2.3 read and render todo\nimport React, { useReducer } from \"react\";\n\nconst initialTodos = [\n  // todos initial\n];\n\nfunction appReducer(state, action) {\n  switch (action.type) {\n    // cases\n}\n\nexport default function TodoApp() {\n  const [state, dispatch] = useReducer(appReducer, initialTodos);\n\n  return (\n    <>\n      <h3>List: add, delete, complete and refresh</h3>\n      <button onClick={() => dispatch({ type: \"add\" })}>\n        Create Todo\n      </button>{\" \"}\n      <button>Clear Todo</button>\n      <br /> <br />\n      <div style={{ margin: \"20px\" }}>\n        {state.map((item) => (\n          <>\n            <input type=\"checkbox\"/>\n            <input type=\"text\" defaultValue={item.text} />{\" \"}\n            <input type=\"text\" defaultValue={item.author} />{\" \"}\n            <input type=\"date\" defaultValue={item.due} />{\" \"}\n            <button>\n              Delete\n            </button>\n            <br />\n          </>\n        ))}\n      </div>\n    </>\n  );\n}\nWe are going to map over our state and generating a list of htmml elements based on its contents.\n\n\nMozilla map docs\nWithin the mapping function, each item in the state array is rendered as a set of elements enclosed within an empty fragment (<>...</>).\n\n\n(<>...</>): this is a common technique in React to group multiple elements without adding unnecessary wrapper elements to the DOM.\nFor each item in the state array, the code generates the following elements:\n\n<input type=\"checkbox\">: This is a checkbox input element.\n\nThe checked attribute is bound to the item.completed property, which presumably determines whether the checkbox should be checked or not.\n\n<input type=\"text\">: Two text input elements are rendered, each with the defaultValue attribute bound:\n\nto item.text and\nitem.author respectively.\nThese inputs display the default values of the corresponding text and author properties of the item object.\n\n<input type=\"date\">: This is a date input element with the defaultValue attribute bound to item.due.\n\nIt displays the default due date value of the item object.\n\n<button>: A button element is rendered with the label “Delete”.\n\n\n\n2.4 delete todo\nWe define the operation delete:\n\nevent onClick on button\ncase delete on reducer\nreducer creates new state which triggers new render with new state\n\nThe button element, when clicked, triggers an action to delete an item. It uses an onClick event handler that dispatches  a “delete” action with the item’s ID as the payload, allowing the application to handle the deletion logic based on the dispatched action.\n  <Button\n    onClick={() => dispatch({ type: \"delete\", payload: item.id })}>\n    Delete\n  </Button>\nThe reducer case statement for handling the “delete” action filters the state array based on the item’s ID, removing the item with the matching ID from the state.\nfunction appReducer(state, action) {\n  switch (action.type) {\n    //.. other cases\n\n    case \"delete\": {\n      return state.filter((item) => item.id !== action.payload);\n    }\n    \n    //.. other cases  \n  }\n}\n\n\n2.5 update chekbox todo\n\n\n\n\n\n\nJSX elements directly inside a map() call always need keys!\n\n\n\nKeys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\n\n\n\nRendering Lists - Why does React need keys?\nFor example, React.Fragment and a key for our list:\n{state.map((item) => (\n      <React.Fragment key={item.id}>\n        \n      </React.Fragment>\n))}\nWe could update the complete field by using a event onChange that dispatchs as a payload the item.id with the completed type:\n <input\n    type=\"checkbox\"\n    checked={item.completed}\n    onChange={\n      () => dispatch({ type: \"completed\", payload: item.id })}\n/>\nAnd the reducer with the completed action:\nfunction appReducer(state, action) {\n  switch (action.type) {\n    // other cases\n    case \"completed\": {\n      return state.map((item) => {\n        if (item.id === action.payload) {\n          return {\n            ...item,\n            completed: !item.completed\n          };\n        }\n        return item;\n      });\n    }\n    // default case\n}\n\n\n2.6 update input todo\nWe could update the input common fields -text, author, due- by creating a handler function handleUpdate:\nconst handleUpdate = (id, field, value) => {\n    dispatch({\n      type: \"update\",\n      payload: {\n        id,\n        field,\n        value\n      }\n    });\n};\nThe inputs onChange, now, will call the handleUpdate function with the field:\n<input\n  type=\"text\"\n  value={item.text}\n  onChange={(e) => handleUpdate(item.id, \"text\", e.target.value)}\n/>{\" \"}\n<input\n  type=\"text\"\n  value={item.author}\n  onChange={(e) => handleUpdate(item.id, \"author\", e.target.value)}\n/>{\" \"}\n<input\n  type=\"date\"\n  value={item.due}\n  onChange={(e) => handleUpdate(item.id, \"due\", e.target.value)}\n/>{\" \"}\nAnd the reducer with the update action:\nfunction appReducer(state, action) {\n  switch (action.type) {\n    // other cases\n    case \"update\": {\n      const { id, field, value } = action.payload;\n      return state.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item,\n            [field]: value\n          };\n        }\n        return item;\n      });\n    }\n    // default case\n}\n\n\nAn object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces {}.\nconst { id, field, value } = action.payload;\nObject_initializer\n\n\n2.7 useContext, useEffect, useRef todo\nThe useEffect, useRef, and useContext hooks are used to handle different aspects of state management and render lifecycle.\n\nuseEffect: is used to update the stateRef.current value whenever the state changes.\n\nIt ensures that the stateRef always holds the latest value of state.\nThe effect is triggered whenever the state dependency changes, which means it will run after every state update.\n\nuseRef: the stateRef variable is created using useRef. It creates a mutable reference that persists across renders. \n\nstateRef is used to hold the current value of state.\nBy using useRef, the value can be updated without causing a re-render, and it can be accessed inside the useEffect hook.\n\nuseContext: the Context is created using React.createContext(), and it is used to share the dispatch function with child components.\n\nBy wrapping the components inside <Context.Provider value={dispatch}>, the dispatch function is made available to all components within the Context.Provider scope.\nThe child component, TodosList, accesses the dispatch function using the useContext hook.\n\n\nfunction appReducer(state, action) {\n  // ---\n}\n\nconst Context = React.createContext();\n\n\nexport default function TodoApp() {\n  const [state, dispatch] = useReducer(appReducer, initialTodos);\n  const stateRef = useRef(state);\n\n  useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  return (\n    <Context.Provider value={dispatch}>\n      <h3>List: add, delete, complete and refresh</h3>\n      <button onClick={\n        () => dispatch({ type: \"add\" })}>Create Todo</button>\n      <br />\n      <br />\n      <TodosList items={stateRef.current} />\n    </Context.Provider>\n  );\n}\n\nfunction TodosList({ items }) {\n  return items.map((item) => <TodoItem key={item.id} {...item} />);\n}\n\n}\n\nfunction TodoItem({ id, completed, author, text, due }) {\n  const dispatch = useContext(Context);\n  //..\n}"
  },
  {
    "objectID": "reactjs/rjslab3.html#versions",
    "href": "reactjs/rjslab3.html#versions",
    "title": "Lab#RE03-1: to-do app",
    "section": "3 Versions",
    "text": "3 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\ntodoApp 0.0\ncreate project with route: todoApp 0.0\ninitial tree-folder\nrender home\n\n\ntodoApp 0.1\ncreate new todo: todoApp 0.1\n-\ninitial render - todo created render\n\n\ntodoApp 0.2\nrender todos, clear, delete todo: todoApp 0.2\n-\ninitial render - todo created render\n\n\n\n\n\n\n\n\n  React JS: Lab#RE02-1 \n\n\n\n  top \n\n\n\n React JS: Lab#RE03-2"
  },
  {
    "objectID": "reactjs/rjslab3-2.html",
    "href": "reactjs/rjslab3-2.html",
    "title": "Lab#RE03-2: HighCharts",
    "section": "",
    "text": "📘 React JS Lab#RE03-2: Highcharts\nIn this lab, we will be using Highcharts React.\nIt is a library that allows you to integrate Highcharts, a popular JavaScript charting library, into your React applications.\nIt provides a React component that acts as a wrapper around the Highcharts library, enabling you to create interactive and visually appealing charts.\nBy utilizing the Highcharts React library, you can easily incorporate interactive charts into your React application, making the data visually accessible and enhancing the user experience."
  },
  {
    "objectID": "reactjs/rjslab3-2.html#overview",
    "href": "reactjs/rjslab3-2.html#overview",
    "title": "Lab#RE03-2: HighCharts",
    "section": "1 Overview",
    "text": "1 Overview\nHere’s a high-level overview of how Highcharts React works to make data visible in a React app:\n\nInstallation: First, you need to install the Highcharts React library along with the Highcharts library itself. You can do this using package managers like npm or yarn.\nImporting the Components: Once installed, you can import the necessary components from the Highcharts React library into your React application. The main component you’ll use is typically called HighchartsReact.\nConfiguration: Highcharts charts require configuration options to define the type of chart, data sources, styling, and various other settings.\n\nIn your React component, you’ll create a configuration object that specifies these options.\nYou can define the configuration object directly in your component or import it from an external file.\n\nRendering the Chart: Within your React component’s render method, you’ll use the Highcharts React component, passing in the configuration object as a prop.\n\nThis component acts as a container for the Highcharts chart and handles the integration with React.\n\nUpdating the Data: To make the chart data visible and dynamic, you’ll typically store the data in the component’s state or props. Whenever the data changes, you can update the state or props accordingly, triggering a re-render of the chart component with the new data.\nInteractivity and Events: Highcharts provides various interactive features like tooltips, legends, zooming, and selection.\n\nYou can configure these features through the chart’s configuration object and handle events triggered by user interactions, such as clicking on a data point.\n\nStyling and Customization: Highcharts offers extensive customization options to control the appearance of your charts. You can modify colors, fonts, labels, axes, and other visual elements using the configuration object.\n\nAdditionally, you can apply CSS styles to the chart container or\nuse Highcharts-specific APIs to further customize the chart’s appearance.\n\nAdditional Features: Highcharts supports a wide range of chart types, including:\n\nline charts,\nbar charts,\npie charts,\narea charts,\nradar charts,\nwindrose charts,\nstock charts and more.\n\nYou can explore the `Highcharts documentation to learn about additional features, such as exporting charts, adding annotations, or integrating with external data sources.\n\n\n1.1 References\n\nCodesanbox example: highcharts\nCodesanbox example: live random data\nCodesanbox example: bitcoin reatime data stock\nHighCharts Demo\n\n\n1.1.1 Todo\n\nCodesanbox example highcharts: todo-app-3"
  },
  {
    "objectID": "reactjs/rjslab3-3.html",
    "href": "reactjs/rjslab3-3.html",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "",
    "text": "📘 React JS Lab#RE03-3: API Rest CRUD\nA CRUD (Create, Read, Update, Delete) Todo app with RESTful API integration:\n\nUsing Axios and Fetch\n\nAxios and Fetch are JavaScript libraries used for making HTTP requests to the API endpoints.\nAxios or Fetch can be used to send HTTP requests to these endpoints, allowing data manipulation through CRUD operations.\n\nFake server-side implemented with MockAPI:\n\nby utilizing MockAPI, developers can create custom API endpoints to mimic server-side functionality.\n\nThe Todo app allows users to create, read, update, and delete tasks.\nThis integration will build a fully functional Todo application with API communication and data persistence."
  },
  {
    "objectID": "reactjs/rjslab3-3.html#overview",
    "href": "reactjs/rjslab3-3.html#overview",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "1 Overview",
    "text": "1 Overview\nFrom previous lab, we are going to persist data on server by API Rest using Axios (or fetch)`.\n\n1.1 References:\n\nThe easiest way to mock REST APIs\nQuick start guide mockapi.io\n\n\n1.1.1 Todo\n\ncodesanbox api rest CRUD axios/fetch: todo-app-4"
  },
  {
    "objectID": "reactjs/rjslab3-2.html#pie-chart",
    "href": "reactjs/rjslab3-2.html#pie-chart",
    "title": "Lab#RE03-2: HighCharts",
    "section": "2 Pie Chart",
    "text": "2 Pie Chart\n\n2.1 Importing Dependencies\nimport React from \"react\";\nimport Highcharts from \"highcharts/highstock\";\nimport PieChart from \"highcharts-react-official\";\nThe code imports the necessary dependencies: React from the “react” package, Highcharts from the “highcharts/highstock” package, and PieChart from the “highcharts-react-official” package. These dependencies are required for using Highcharts with React.\n\n\n2.2 Defining Data\nconst grades = [\n  {\n    name: \"Carla\",\n    y: 135\n  },\n  {\n    name: \"Marc\",\n    y: 89\n  },\n  {\n    name: \"Victor\",\n    y: 44\n  },\n  {\n    name: \"Rafa\",\n    y: 32\n  },\n  {\n    name: \"Fabrizio\",\n    y: 12\n  }\n];\nAn array called grades representing data points for the pie chart. Each object in the array contains a name and a y value. This data will be used in the chart’s series.\n\n\n2.3 Chart Configuration\nThe options object defines the configuration for the pie chart. It includes a title specifying the chart’s title, a chart object specifying the type of chart (in this case, “pie”), and a series array containing the data for the chart. The grades array is assigned to the data property of the series.\nconst options = {\n  title: {\n    text: \"Students\"\n  },\n  chart: {\n    type: \"pie\"\n  },\n  series: [\n    {\n      data: grades\n    }\n  ]\n};\n\n\n2.4 Creating the React Component\nA functional component called App is defined. Inside the component’s JSX, a  component is rendered, passing in the Highcharts dependency and the options object as props. The component is wrapped in a\n\nelement with some inline styling to provide a margin.\n\nconst App = () => {\n  return (\n    <div style={{ margin: \"40px\" }}>\n      <PieChart highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n\nexport default App;\n\n\n2.5 Exporting the Component\nexport default App;\nThe App component is exported as the default export, allowing it to be imported and used in other parts of the application.\n\n\n2.6 Rendering the chart\nOverall, this code sets up a React application with a pie chart using Highcharts React. The data for the chart is defined in the grades array, and the chart’s configuration is specified in the options object. The chart is then rendered within the App component using the <PieChart> component provided by the Highcharts React library.\n\n\n\nHighchart Pie example\n\n\n\n\n\n\n\n  React JS: Lab#RE03-1 \n\n\n\n  top \n\n\n\n React JS: Lab#RE03-3"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-sprint.html#sprint21-may",
    "href": "ifcd0210/ifcd0210backlog-sprint.html#sprint21-may",
    "title": "IFCD0210 Sprint Backlog",
    "section": "Sprint#21 (May)",
    "text": "Sprint#21 (May)\n\n\nBacklog Sprint#21 May 2023\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#21\n97\n15/05\n- axios, fetch  (1) api rest mockapi  - useRef, useReducer, useContext:  (1) to-do: context API \ncodesandbox api rest todo cards  deployed api rest todo cards  mock api  Lab#RE03-3 \n\n\n\n98\n16/05\n- highcharts:  (1) to-do: visualisation data  (2) import data json  (3) function calculate  - styling\ncodesanbox highcharts: todo-app-3  styling  Lab#RE03-2 \n\n\n\n99\n17/05\n- axios, fetch  (1) to-do: api rest consume data  (2) to-do: async \ncodesanbox rest axios/fetch: todo-app-4  async  Lab#RE03-3 \n\n\n\n100\n18/05\n- store  (1) redux/reducer  local storage  - axios, fetch  (1) to-do: api rest consume data  (2) to-do: async \n-\n\n\n\n101\n19/05\n- SCRUM:  (0) How rich (abundance/scarcity) is created?  (1) Why just left mode is wrong?  (2) The map is no the territory: fishing factory  (3) Right mode: living in the ambiguity (4) Taleb/McGilchrist: Simple/Complicated/Complex  (5) What is a problem? Why science is losing prestige?  (6) Mountain Manifesto  - Retrospective\n-\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n- topic planned or pending\n+ topic done in class\n++ new topic not planned\n\n\n\n\n\n\n\n\n  IFCD0210 Calendar \n\n\n\n  top \n\n\n\n IFCD0210 Product Backlog"
  },
  {
    "objectID": "reactjs/rjslab4.html#overall",
    "href": "reactjs/rjslab4.html#overall",
    "title": "Lab#RE04-1: server",
    "section": "1 Overall",
    "text": "1 Overall\n\nQuick start\nNode.js CRUD App Using React and FeathersJS\n\nYou can create a new Feathers application by running\n npm create feathers <name>\nOnce the Feathers CLI is installed you may keep with the project.\n\n\nSince the generated application is using modern features like ES modules, the Feathers CLI requires Node 16 or newer.\nYou need to define your project.\n\nchoose if you want to use JavaScript or TypeScript.\nWhen presented with the project name, just hit enter, or enter a name (no spaces).\nNext, write a short description for your application.\nConfirm the next questions with the default selection by pressing Enter.\nIf you choose a database other than SQLite, make sure it is reachable at the connection string.\nusing MongoDB is nece, change the database selection.\n\nOnce you confirm the last prompt, the final selection should look similar to this:\n\n\n\nPrompt feathers"
  },
  {
    "objectID": "reactjs/rjslab3-3.html#mock-api",
    "href": "reactjs/rjslab3-3.html#mock-api",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "2 mock api",
    "text": "2 mock api\n\nMockAPI.io is a web service that allows developers to create and simulate RESTful APIs for testing and development purposes.\n\n\n\n\nmockapi creating scheme-model\n\n\nWith MockAPI.io, developers can easily generate custom API endpoints and define the responses they want to receive when those endpoints are called. It provides a user-friendly interface to create, manage, and configure mock APIs, making it simple to simulate different scenarios and test how an application interacts with an API.\nMockAPI.io supports various HTTP methods, request headers, query parameters, and response types, allowing developers to mimic real API behavior. It’s a valuable tool for rapid prototyping, integration testing, and mocking data during development."
  },
  {
    "objectID": "reactjs/rjslab3-3.html#axios",
    "href": "reactjs/rjslab3-3.html#axios",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "3 axios",
    "text": "3 axios\n\nAxios is a JavaScript library used for making HTTP requests in React applications.\n\nIt provides an easy-to-use and consistent API for performing asynchronous operations, such as fetching data from an API.\n\n\n\nAxios example Request Config\n\n\nAxios supports features like interceptors, automatic request/response transformation, and error handling. It works both in the browser and Node.js environments and offers support for various request methods (GET, POST, PUT, DELETE, etc.).\nAxios simplifies the process of making HTTP requests by providing a higher-level abstraction and allowing developers to handle responses and errors more efficiently."
  },
  {
    "objectID": "reactjs/rjslab3-3.html#fetch",
    "href": "reactjs/rjslab3-3.html#fetch",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "4 fetch",
    "text": "4 fetch\n\nFetch is a built-in web API in modern browsers that allows making HTTP requests in React applications and other JavaScript environments.\n\nIt provides a native and low-level way of fetching resources from a server.\nFetch operates using Promises, enabling asynchronous operations and providing a more modern alternative to the older XMLHttpRequest (XHR) approach.\nFetch supports sending requests and receiving responses, but it lacks some advanced features provided by libraries like Axios, such as automatic request/response transformation and interceptors."
  },
  {
    "objectID": "reactjs/rjslab3-3.html#step-by-step-todo-api-rest",
    "href": "reactjs/rjslab3-3.html#step-by-step-todo-api-rest",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "5 step-by-step todo api rest",
    "text": "5 step-by-step todo api rest\n\n\n\nRender todo with grid, cards and CRUD operations, render deployed\n\n\n\n5.1 General idea: schema\n\n5.1.1 Components\nLet’s create first at all our core components:\n\nThe CreateTodo component is responsible for rendering a form to create a new Todo item. It uses React’s useState hook to manage the state of input fields.\nThe UpdateTodo component displays a checkbox that represents the completion status of a Todo item. It receives the Todo object as a prop and handles the update of the completion status.\nThe ReadTodos component renders a list of Todo items fetched from an API. It uses React’s useState hook to manage the state of the Todo items.\nThe DeleteTodo component displays a button to delete a Todo item. It receives the Todo object as a prop and handles the deletion.\n\n\nThe main Todos component is responsible for managing the state of all Todo items.\n\nIt fetches the Todo items from an API using the useEffect hook and stores them in the state using the useState hook.\n\n\n\nGeneral schema\n\n\nIt also provides the necessary functions to manipulate the Todo items through the ApiContext, which is created using React’s createContext hook:\n\naddTodo\nupdateTodo\ndeleteTodo\nfetchTodos\n\nThe ApiContext.Provider wraps these components to provide access to the Todo items and manipulation functions throughout the component tree.\nAt the end, the main component Todos component renders the CreateTodo component and the ReadTodos component within a container.\n\n\nToDoGrid.jsx\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport {Container, Card, Checkbox, Button, Form, Divider,Icon } \nfrom \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// https://github.com/mockapi-io/docs/wiki/Quick-start-guide\n// API Context\nconst ApiContext = React.createContext();\n\n// API_URL mockapi.io\nconst API_URL = \"https://645fbe7.mockapi.io/v1/\";\n\n// Custom Hook to use API Context\nconst useApiContext = () => useContext(ApiContext);\n\n// CreateTodo Component\nconst CreateTodo = () => {\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [due, setDue] = useState(\"\");\n  const { addTodo } = useApiContext();\n\n  // to-do\n\n  return (\n    <Form>\n    \n    </Form>\n  );\n};\n\n// UpdateTodo Component\nconst UpdateTodo = ({ todo }) => {\n  // to-do\n  return (\n    <Checkbox toggle checked={todo.completed} \n      onChange={handleUpdateTodo} />\n  );\n};\n\n// ReadTodos Component\nconst ReadTodos = () => {\n  // to-do\n\n  return (\n    <Card.Group>\n      {todos.map((todo) => (\n        // to-do\n      ))}\n    </Card.Group>\n  );\n};\n\n// DeleteTodo Component\nconst DeleteTodo = ({ todo }) => {\n  // to-do\n  return <Button onClick={handleDeleteTodo}>Delete</Button>;\n};\n\n\n\n5.1.2 Axios and Main Component\nMain component and Axios functions.\n\nWe use the ApiContext.Provider component to provide a context that includes the todos array, addTodo function, updateTodo function, and deleteTodo function to its child components. \nThe todos state is initialized as an empty array using the useState hook.\nAxios functions:\n\nfetchTodos retrieves todos from the API and sets them in the state.\naddTodo sends a new todo to the API and updates the local state.\nupdateTodo toggles the completed property of a todo.\ndeleteTodo removes a todo from the API and updates the state.\n\nThe component renders child components within a Container component, including a:\n\nheading,\na component for creating new todos (CreateTodo),\na divider, and\na component for reading/displaying existing todos (ReadTodos).\n\n\n\n\nToDoGrid.jsx\n\n// -------------------------------------------------------------\n// Main Todos Component ----------------------------------------\n//--------------------------------------------------------------\nconst Todos = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const fetchTodos = async () => {\n    // to-do\n  };\n\n\n  const addTodo = (newTodo) => {\n    // to-do\n  };\n\n  const updateTodo = async (id) => {\n    // to-do\n  };\n\n  const deleteTodo = async (id) => {\n    // to-do\n  };\n\n  return (\n    <ApiContext.Provider \n      value={{ todos, addTodo, updateTodo, deleteTodo }}>\n      <Container>\n        <h1>Todos</h1>\n        <CreateTodo />\n        <Divider />\n        <ReadTodos />\n      </Container>\n    </ApiContext.Provider>\n  );\n};\n\nexport default Todos;\n\n\n\n5.1.3 context\nWe create a empty custom context called ApiContext using React.createContext().\n\n\n\n\n\n\nKey-idea context\n\n\n\nApiContext is used to provide data and functions related to todos to its child components.\nThe data and functions (todos, addTodo, updateTodo, deleteTodo) are passed as values to the ApiContext.Provider component.\nThis makes them accessible to any descendant component that consumes the ApiContext using the useContext hook.\n\n\n\n\n5.1.4 async\n\n\n\n\n\n\nasync\n\n\n\nThe async function declaration declares an async function where the await keyword is permitted within the function body.\nThe async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\nAsync functions may also be defined as expressions.\n\n\nReferences:\n\nasync\nasync docs mozilla\n\n\n\n\n5.2 General idea: implemented\nCode ToDoGrid.js uses this libreries and tools:\n\nSemantic CSS\nAxios Api Rest\nComponents .jsx\nReact Hooks: useState, useEffect and useContext (as API Context custom)\nuuidv4\nmockapi.io\nand NodeJS/npm\n\n\n5.2.1 createContext\n\n\nToDoGrid.jsx\n\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Container,\n  Card,\n  Checkbox,\n  Button,\n  Form,\n  Divider,\n  Icon\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// https://github.com/mockapi-io/docs/wiki/Quick-start-guide\n// API Context\nconst ApiContext = React.createContext();\n\n// API_URL mockapi.io\nconst API_URL = \"https://y45yh6y55dgfh.mockapi.io/v1/\";\n\n// Custom Hook to use API Context\nconst useApiContext = () => useContext(ApiContext);\n\n//....\n\n\n\n\n\n\n\n\nLine\nExplanations\n\n\n\n\nconst ApiContext =  React.createContext();\nCreates a new context object called ApiContext using the createContext, this context object will be used to share data and functions between components.\n\n\nconst API_URL = \"https://y45yh6y55dgfh.mockapi.io/v1/\";\nSets the value of the constant API_URL to be the URL of a mock API. This URL is used to make HTTP requests and interact with the API in the application.\n\n\nconst useApiContext =  () => useContext(ApiContext);\nDefines a custom hook called useApiContext. This hook uses the useContext hook from React to retrieve the current value of the ApiContext. It provides a convenient way to access the context and its associated data and functions within components.\n\n\n\n\n\n5.2.2 CreateTodo\n\n\nToDoGrid.jsx\n\n//....\n// CreateTodo Component\nconst CreateTodo = () => {\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [due, setDue] = useState(\"\");\n  const { addTodo } = useApiContext();\n\n  const handleAddTodo = () => {\n    addTodo({\n      id: uuidv4(),\n      text,\n      author,\n      due\n    });\n\n    setText(\"\");\n    setAuthor(\"\");\n    setDue(\"\");\n  };\n\n  return (\n    <Form>\n      <Form.Group>\n        <Card>\n          <Card.Content>\n            <Card.Header>Create Todo</Card.Header>\n            <Card.Meta>\n              <p>{uuidv4()}</p>\n            </Card.Meta>\n            <br />\n            <Form.Field>\n              <label>Text</label>\n              <input\n                type=\"text\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                placeholder=\"Enter todo text\"\n              />\n            </Form.Field>\n            <Form.Field>\n              <label>Author</label>\n              <input\n                type=\"text\"\n                value={author}\n                onChange={(e) => setAuthor(e.target.value)}\n                placeholder=\"Enter author name\"\n              />\n            </Form.Field>\n            <Form.Field>\n              <label>Date</label>\n              <input\n                type=\"date\"\n                value={author}\n                onChange={(e) => setDue(e.target.value)}\n                placeholder=\"Enter author name\"\n              />\n            </Form.Field>\n            <Divider />\n            <Form.Field>\n              <Checkbox label=\"use fetch/axios\" />\n            </Form.Field>\n\n            <Divider />\n\n            <Button onClick={handleAddTodo}>Add Todo</Button>\n          </Card.Content>\n          <Card.Content extra>\n            <a>\n              <Icon name=\"time\" />\n              UTC Central\n            </a>\n          </Card.Content>\n        </Card>\n      </Form.Group>\n    </Form>\n  );\n};\n//....\n\n\n\n5.2.3 updateTodo\nThe line of code const { addTodo } = useApiContext(); is using the useApiContext custom hook to access the addTodo function from the API context.\n\n\n\n\n\n\nconst { addTodo } = useApiContext();\n\n\n\nThis line of code enables the component to call the addTodo function and utilize its functionality, such as adding a new todo item to the application’s state or performing any other actions associated with adding todos.\n\n\nThe useApiContext hook is a custom hook that internally uses the useContext hook from React. It allows components to access the values provided by the ApiContext.Provider higher up in the component tree.\nBy calling useApiContext, the component can retrieve the addTodo function from the API context.\n\n\nThe destructuring assignment { addTodo } extracts the addTodo function from the returned object, making it available for use within the component.\n\n\nToDoGrid.jsx\n\n// UpdateTodo Component\nconst UpdateTodo = ({ todo }) => {\n  const { updateTodo } = useApiContext();\n\n  const handleUpdateTodo = () => {\n    updateTodo(todo.id);\n  };\n\n  return (\n    <Checkbox toggle checked={todo.completed} \n    onChange={handleUpdateTodo} />\n  );\n};\n//....\n\n\n\n5.2.4 ReadTodos\n\n\nToDoGrid.jsx\n\n// ReadTodos Component\nconst ReadTodos = () => {\n  const { todos } = useApiContext();\n\n  return (\n    <Card.Group>\n      {todos.map((todo) => (\n        <Card key={todo.id}>\n          <Card.Content>\n            <Card.Description>id: {todo.id}\n            </Card.Description>\n            <Card.Header>{todo.text}\n            </Card.Header>\n            <Card.Meta>Author: {todo.author}\n            </Card.Meta>\n            <Card.Description>Due: {todo.due}\n            </Card.Description>\n            <br />\n            <UpdateTodo todo={todo} />\n          </Card.Content>\n          <Card.Content extra>\n            <DeleteTodo todo={todo} />\n          </Card.Content>\n        </Card>\n      ))}\n    </Card.Group>\n  );\n};\n//....\n\n\n\n5.2.5 DeleteTodo\n\n\nToDoGrid.jsx\n\n// DeleteTodo Component\nconst DeleteTodo = ({ todo }) => {\n  const { deleteTodo } = useApiContext();\n\n  const handleDeleteTodo = () => {\n    deleteTodo(todo.id);\n  };\n\n  return <Button \n  onClick={handleDeleteTodo}>Delete</Button>;\n};\n//....\n\n\n\n5.2.6 Main component: Todos\nMain component and Axios implemented functions:\n\nThe fetchTodos function is called when the component mounts, which retrieves todos from an API endpoint using axios and sets the todos in the state.\nThe addTodo function sends a new todo object to the API endpoint using a POST request and updates the local todos state with the new todo. It also handles error cases.\nThe updateTodo function toggles the completed property of a todo item with a given id by sending a PUT request to the API endpoint and updating the local todos state accordingly.\nThe deleteTodo function deletes a todo item with a given id by sending a DELETE request to the API endpoint and updates the local todos state by filtering out the deleted todo.\n\n\n\nToDoGrid.jsx\n\n// Main Todos Component\nconst Todos = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const fetchTodos = async () => {\n    try {\n      const response = \n      await axios.get(`${API_URL}/todo`);\n      setTodos(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  const addTodo = (newTodo) => {\n    fetch(`${API_URL}/todo/`, {\n      method: \"POST\",\n      headers: { \"content-type\": \"application/json\" },\n      // Send your data in the request body as JSON\n      body: JSON.stringify(newTodo)\n    })\n      .then((res) => {\n        setTodos([...todos, newTodo]);\n        const response = {};\n        if (response.ok) {\n          return response.json();\n        }\n        // handle error\n      })\n      .then((task) => {\n        // do something with the new task\n      })\n      .catch((error) => {\n        // handle error\n      });\n  };\n\n  const updateTodo = async (id) => {\n    try {\n      const updatedTodos = todos.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n        return todo;\n      });\n\n      await axios.put(`${API_URL}/todo/${id}`, updatedTodos);\n      setTodos(updatedTodos);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const deleteTodo = async (id) => {\n    try {\n      await axios.delete(`${API_URL}/todo/${id}`);\n      const filteredTodos = \n      todos.filter((todo) => todo.id !== id);\n      setTodos(filteredTodos);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <ApiContext.Provider \n    value={{ todos, addTodo, updateTodo, deleteTodo }}>\n      <Container>\n        <h1>Todos</h1>\n        <CreateTodo />\n\n        <Divider />\n\n        <ReadTodos />\n      </Container>\n    </ApiContext.Provider>\n  );\n};\n\nexport default Todos;\n\nThe context enables the sharing of todos data and related functions across multiple components without the need for prop drilling.\nThe CreateTodo component uses the useApiContext custom hook to access the addTodo function from the context. It allows users to create a new todo and calls the addTodo function to add the new todo to the list.\nSimilarly, the UpdateTodo component uses the useApiContext hook to access the updateTodo function from the context. It provides a checkbox to toggle the completion status of a todo.\nThe ReadTodos component uses the useApiContext hook to access the todos array from the context. It displays the existing todos and provides the ability to update and delete them.\n\n\n\n5.3 Creating domains: decoupling\nReferences:\n\nYou Might Not Need an Effect\nSyncronyzing with effects: Fetching Data\n\nBefore coding it let’s discuss the right approach to work it with domains at next lab, Lab#RE03-4."
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#tailwind",
    "href": "reactjs/reactjs-app-styling.html#tailwind",
    "title": "React JS App: styling",
    "section": "4 Tailwind",
    "text": "4 Tailwind\nReferences:\n\nTailwind\nHow To Build a CRUD App with React Hooks and the Context API and Tailwind\n\n\nTailwind CSS is a utility-first CSS framework that focuses on providing a wide range of pre-built classes for building responsive and customizable user interfaces in React. With its intuitive class-based approach, developers can rapidly prototype and style components, achieving consistent and clean designs.\n\nTailwind also offers a wide range of utility classes for spacing, typography, colors, and more, giving developers fine-grained control over their UI.\nIt’s highly configurable and optimized for performance, making it an excellent choice for modern React projects."
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#semantic",
    "href": "reactjs/reactjs-app-styling.html#semantic",
    "title": "React JS App: styling",
    "section": "5 Semantic",
    "text": "5 Semantic\n\nSemantic UI React is a library that brings the Semantic UI framework’s elegant and intuitive design language to React applications.\n\nIt provides a set of reusable components that are fully responsive and accessible out of the box. With Semantic UI React, developers can quickly build beautiful and consistent user interfaces with minimal effort.\nThe library supports theming and customization, allowing developers to adapt the UI to their specific project requirements easily. Semantic UI React follows best practices for React development and integrates seamlessly into React applications."
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#material",
    "href": "reactjs/reactjs-app-styling.html#material",
    "title": "React JS App: styling",
    "section": "6 Material",
    "text": "6 Material\n\nMaterial-UI is a popular React UI library that implements the Material Design principles developed by Google.\n\nIt offers a comprehensive set of components, icons, and styling options to create modern and visually appealing user interfaces. Material-UI’s components are highly customizable and can be easily themed to match any design requirement.\nThe library provides a rich set of features, including responsive layouts, form validation, animations, and transitions, making it a versatile choice for building React applications with a polished and consistent look and feel."
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#w3-css",
    "href": "reactjs/reactjs-app-styling.html#w3-css",
    "title": "React JS App: styling",
    "section": "7 w3-css",
    "text": "7 w3-css\n\nW3.CSS for React is an integration of the lightweight W3.CSS framework into React projects.\n\nW3.CSSoffers a collection of CSS classes that provide a solid foundation for building responsive and modern user interfaces. With W3.CSS for React, developers can leverage the simplicity and ease of use of the W3.CSS framework within their React applications.\nThe framework emphasizes simplicity and minimalism while offering a range of utility classes for styling elements and creating responsive layouts. W3.CSS for React is a lightweight option for developers who prefer a lean and straightforward CSS framework for their React projects."
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#bootstrap",
    "href": "reactjs/reactjs-app-styling.html#bootstrap",
    "title": "React JS App: styling",
    "section": "8 bootstrap",
    "text": "8 bootstrap\nReferences:\n\ncodesandbox basic example with bootstrap\nReactstrap is a React component library for Bootstrap\n\nBootstrap for React is an integration of the popular Bootstrap framework into React applications.\nBootstrap provides a robust and comprehensive set of CSS and JavaScript components that enable developers to quickly build responsive and mobile-first user interfaces.\nThe React version of Bootstrap provides React components that encapsulate Bootstrap’s functionality, making it easier to integrate with React projects.\nWith Bootstrap for React, developers can take advantage of the extensive documentation and community support available for Bootstrap, making it an efficient choice for building feature-rich and visually appealing React applications.\n\n\n\n\n\n  React JS App: conditional render \n\n\n\n  top \n\n\n\n React JS: Lab#RE01-1"
  },
  {
    "objectID": "reactjs/rjslab3-4.html",
    "href": "reactjs/rjslab3-4.html",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "",
    "text": "📘 React JS Lab#RE03-4:API Rest Domains”\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\n\ndecoupling the communication layer by creating a separate service in React JSX and JS:\n\nservice layer: TodoService.js, api Rest Axios functions\nservice layer: TodoContext.js, creation of Context and repository of data and data-functions\nUI components: todoApp.jsx and its components to render the App.\nReferences:"
  },
  {
    "objectID": "reactjs/rjslab3-4.html#overall",
    "href": "reactjs/rjslab3-4.html#overall",
    "title": "Lab#RE03-4: store",
    "section": "1 Overall",
    "text": "1 Overall\nReferences:\n\nReact Context API: What is it and How it works?\nZustand\nuseLocalStorage\n\n\n\n\n\n\n  React JS: Lab#RE03-3 \n\n\n\n  top \n\n\n\n React JS: Lab#RE04-1"
  },
  {
    "objectID": "reactjs/reactjs-app-async.html#asynchronous-programming",
    "href": "reactjs/reactjs-app-async.html#asynchronous-programming",
    "title": "React JS App: async",
    "section": "3 Asynchronous programming",
    "text": "3 Asynchronous programming\nAsynchronous programming is a programming paradigm that enables the execution of tasks independently, without waiting for previous tasks to complete.\nIt allows programs to handle multiple operations concurrently, enhancing efficiency and responsiveness.\n\nIn asynchronous programming, tasks are initiated and then executed in the background, allowing the program to continue its execution without being blocked by long-running operations.\n\n\n\n\n\n\n\nNon-blocking\n\n\n\nNon-blocking refers to the characteristic of a program or system that doesn’t halt or get stuck waiting for a resource or operation.\nIn the context of asynchronous programming, non-blocking refers:\n\nto the ability of a task or operation to proceed independently without blocking other tasks from executing.\nIt ensures that tasks can run concurrently without causing delays, allowing for efficient utilization of system resources and improved overall performance.\nNon-blocking operations are often used in conjunction with asynchronous programming to achieve scalability and responsiveness in applications.\n\n\n\n\n3.1 async function\nThe async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\n\nThe async function declaration declares an async function where the await keyword is used within the function body.\n\n\n\nApp.js\n\nasync function greet() {\n  return 'Hello, world!';\n}\n\nasync function main() {\n  const message = await greet();\n  console.log(message);\n}\n\nmain();\n\n\n\nIn this example, the greet function is an async function that returns a promise that resolves to the string “Hello, world!”. The main function is also an async function that calls the greet function and waits for the promise to resolve using the await keyword. When the promise resolves, the value is assigned to the message variable and logged to the console.\nAsync functions can contain zero or more await expressions. Await expressions make promise-returning functions behave as though they’re synchronous by suspending execution until the returned promise is fulfilled or rejected.\nThe resolved value of the promise is treated as the return value of the await expression. Use of async and await enables the use of ordinary try / catch blocks around asynchronous code.\n\n\nApp.js\n\nfunction resolveAfter2Seconds() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('resolved');\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log('calling');\n  const result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\n\nasyncCall();"
  },
  {
    "objectID": "reactjs/rjslab4.html#api-server-with-feathers",
    "href": "reactjs/rjslab4.html#api-server-with-feathers",
    "title": "Lab#RE04-1: server",
    "section": "2 API Server with Feathers",
    "text": "2 API Server with Feathers"
  },
  {
    "objectID": "reactjs/rjslab3-3.html#versions",
    "href": "reactjs/rjslab3-3.html#versions",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "6 Versions",
    "text": "6 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\ntodoApp 0.3\nadd ToDoGrid component to project: todoApp 0.3\ninitial tree-folder\nrender todoGrid\n\n\n\n\n\n\n\n\n  React JS: Lab#RE03-2 \n\n\n\n  top \n\n\n\n React JS: Lab#RE03-4"
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-sprint.html#sprint22-may",
    "href": "ifcd0210/ifcd0210backlog-sprint.html#sprint22-may",
    "title": "IFCD0210 Sprint Backlog",
    "section": "Sprint#22 (May)",
    "text": "Sprint#22 (May)\n\n\nBacklog Sprint#22 May 2023\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#22\n102\n22/05\n+ useContext to-do CRUD api rest  ++ React paradigm: how to manage data  (1) context  (2) redux  (3) local storage  just api rest  ++ Virtual DOM\nLab#RE03-3  virtual DOM    useForm  redux  \n\n\n\n103\n23/05\n- useContext to-do CRUD api rest:  (1) mono API Rest  (1) domains API Rest\nLab#RE03-3  Lab#RE03-4\n\n\n\n104\n24/05\n- useContext to-do CRUD api rest:  (1) domains useContext  (2) components  - websockets:  (1) general approach & use-story  (2) mock-up\nLab#RE03-4\n\n\n\n105\n25/05\n- local.storage  - websockets:  (1) general approach & domains\n-\n\n\n\n106\n26/05\n- SCRUM  - Retrospective\nLab#RE05-1\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n- topic planned or pending\n+ topic done in class\n++ new topic not planned\n\n\n\n\n\n\n\n\n  IFCD0210 Calendar \n\n\n\n  top \n\n\n\n IFCD0210 Product Backlog"
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#example1",
    "href": "reactjs/reactjs-hook-context.html#example1",
    "title": "React JS: useContext",
    "section": "4 Example#1",
    "text": "4 Example#1\n\ncreateContext, useContext, useState working together\n\nIn this example, there is a currentUser state variable which holds an object.\nWe combine { currentUser, setCurrentUser } into a single object and pass it down through the context inside the value={}.\nThis lets any component below, such as LoginButton, read both currentUser and setCurrentUser, and then call setCurrentUser when needed.\n\n\nApp.js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    <CurrentUserContext.Provider\n      value={{\n        currentUser,\n        setCurrentUser\n      }}\n    >\n      <Form />\n    </CurrentUserContext.Provider>\n  );\n}\n\nfunction Form({ children }) {\n  return (\n    <Panel title=\"Welcome\">\n      <LoginButton />\n    </Panel>\n  );\n}\n\nfunction LoginButton() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(CurrentUserContext);\n\n  if (currentUser !== null) {\n    return <p>You logged in as {currentUser.name}.</p>;\n  }\n\n  return (\n    <Button onClick={() => {\n      setCurrentUser({ name: 'Advika' })\n    }}>Log in as Advika</Button>\n  );\n}\n\nfunction Panel({ title, children }) {\n  return (\n    <section className=\"panel\">\n      <h1>{title}</h1>\n      {children}\n    </section>\n  )\n}\n\nfunction Button({ children, onClick }) {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nInitial render\n\n\n\nExamples of updating context"
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#example2",
    "href": "reactjs/reactjs-hook-context.html#example2",
    "title": "React JS: useContext",
    "section": "5 Example#2",
    "text": "5 Example#2\nReference:\n\nUnderstanding the React Context API\n\nIn this example we’ll explain how to use the new context API in as few words as possible. We’ll create a simple Locale context that provides the language preference between English and French to components in the app.\nTo create a new context, use React’s new createContext function:\nexport const LocaleContext = React.createContext('en');\n\n5.1 Provider\nThe Provider component is used to wrap components in the tree that will need access to the value from the context.\nHere let’s create a LocaleProvider component that wraps our LocaleContext’s provider and offers a way to change the context’s locale value:\nimport React, { useState } from 'react';\n\nexport const LocaleContext = React.createContext();\n\nconst LocaleProvider = (props) => {\n  const [locale, setLocale] = useState('en');\n\n  const changeLocale = () => {\n    setLocale(prevLocale => \n    prevLocale === 'en' ? 'fr' : 'en');\n  };\n\n  const state = {\n    locale,\n    changeLocale\n  };\n\n  return (\n    <LocaleContext.Provider value={state}>\n      {props.children}\n    </LocaleContext.Provider>\n  );\n};\n\nexport default LocaleProvider;\n\n\n5.2 Using the provider\nWe can make use of our provider at the top level of our App component:\nimport React from 'react';\nimport LocaleProvider from './context/LocaleContext';\nimport Greeting from './Greeting';\nimport ToggleLocale from './ToggleLocale';\n\nconst App = () => {\n  return (\n    <LocaleProvider>\n      <Greeting />\n      <ToggleLocale />\n    </LocaleProvider>\n  );\n};\n\nexport default App;\n\n\n5.3 Consumer\nNow all that’s left to do is access the values from the context using the Consumer component.\nOur Greeting component looks like this:\nimport React, { useContext } from 'react';\nimport { LocaleContext } from './context/LocaleContext';\n\nconst Greeting = () => {\n  const localeVal = useContext(LocaleContext);\n\n  return (\n    <>\n      {localeVal.locale === 'en' ? \n      <h1>Welcome!</h1> : <h1>Bienvenue!</h1>}\n    </>\n  );\n};\n\nexport default Greeting;\nAnd our ToggleLocale component looks like this:\nimport React, { useContext } from 'react';\nimport { LocaleContext } from './context/LocaleContext';\n\nconst ToggleLocale = () => {\n  const localeVal = useContext(LocaleContext);\n\n  return (\n    <LocaleContext.Consumer>\n      {(localeVal) => (\n        <button \n        onClick={localeVal.changeLocale}>Change language</button>\n      )}\n    </LocaleContext.Consumer>\n  );\n};\n\nexport default ToggleLocale;\n\n\n\n\n\n  React JS: useEffect \n\n\n\n  top \n\n\n\n ReactJS: custom hooks"
  },
  {
    "objectID": "reactjs/rjslab3-4.html#approach",
    "href": "reactjs/rjslab3-4.html#approach",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "1 Approach",
    "text": "1 Approach\n\n1.1 Hexagonal Architecture\nThe architecture by domains to decoupled concerns, with a service layer handling CRUD operations and using a provider and context in React, shares some similarities with the Hexagonal Architecture (also known as Ports and Adapters Architecture).\n\n\nOnion architecture already used in other labs. Very similar to Hexagonal one.\n\n\n\nHexagonal Architecture\n\n\nIn the Hexagonal Architecture, the core principle is to decouple the application’s business logic from its external dependencies, such as databases, APIs, or user interfaces.\nIt promotes the use of ports and adapters to isolate and abstract these dependencies.\nIn our architecture, the service layer acts as an adapter that interfaces with external dependencies (such as the API through Axios) and exposes a clean interface (the CRUD operations) for the application’s business logic (the React components) to interact with.\nThe provider and context in React provide a way to propagate this functionality throughout the component tree, decoupling it from individual component props.\n\n\n\n\n\n\nHas our App an Hexagonal Architecture?\n\n\n\nWhile not an exact implementation of Hexagonal Architecture, the separation of concerns, decoupling of dependencies, and focus on clean interfaces align with the principles of Hexagonal Architecture.\nThis allows for better maintainability, testability, and flexibility in the application’s design.\n\n\n\n\n1.2 Decoupling the communication layer\nDecoupling the communication layer by creating a separate service in React JSX and JS architecture brings several benefits:\n\nSeparation of Concerns: By creating a dedicated service layer, you separate the concerns of handling API communication and data manipulation from the components that render the UI. This promotes a cleaner and more maintainable codebase.\nReusability: The service layer can be reused across multiple components or even in different parts of your application. By encapsulating API calls and data handling in a service, you can easily reuse the same logic without duplicating code.\nAbstraction: The service layer abstracts the details of API communication, such as HTTP requests and error handling, from the components. This abstraction simplifies the component code, making it more focused on rendering the UI and managing local state.\nTestability: Separating the communication layer as a service makes it easier to write unit tests. You can write tests specifically for the service functions, mocking the API calls and asserting the expected behavior, without the need to render the entire component hierarchy.\nMaintainable and Scalable: By centralizing the API communication logic in a service, it becomes easier to manage and update as your application grows. If the API changes or new features are added, you only need to update the service layer without affecting the components.\n\n\n\n1.3 mutable & immutable\n\n\n\ncodesanbox todo-app-6 folder-tree to decouple the communication-layer\n\n\nRegarding the separation of mutable and immutable code:\n\nThe service layer (TodoService.js) handles mutable code related to API requests and updates the server-side data.\n\nIt performs actions like creating, updating, and deleting todos by interacting with the server.\n\nThe component layer, specifically the TodoContext.js and UI components, deals with immutable code.\n\nIt manages the local state, such as the list of todos, and provides an interface for components to interact with the service layer.\nThe components use the provided functions to update the state or trigger API calls when necessary.\n\n\n\n\n1.4 Context API\n\n\n\n\n\n\nReact API Context\n\n\n\nReact API Context provides a way to share data across the component tree without passing props explicitly at each level. It allows you to create a context object that can be accessed by components nested within a Provider component. Context is primarily used for managing immutable data and state.\n\n\nThe context itself is immutable because it provides a fixed value that can’t be modified directly. The data or state it holds should be treated as immutable to maintain the unidirectional data flow and ensure predictable updates.\n\n\nHowever, the components consuming the context can read the data from the context and use it to update their state or trigger actions. The components can then propagate the changes back to the context by using the provided functions or callbacks.\n\n\n\n\n\n\nimmutability\n\n\n\nThe concept of immutability is crucial in React as it helps ensure predictable rendering and state management. Immutable data allows for efficient change detection and can optimize rendering performance, as React can easily determine when to re-render components based on changes in immutable data.\n\n\n\n\n1.5 Using React context\nWhen using React context, it’s important to follow best practices to make the most of this concept:\n\nDefine the context: Create a context object using React.createContext(), providing an initial value. This value should typically be an immutable object or state.\nWrap components with the Provider: Wrap the relevant components with the Provider component, passing the desired value as a prop. This will make the value accessible to the nested components.\nAccess the context value: Components that need access to the context can consume it using either useContext or by wrapping the component with the Context.Consumer component.\nManage mutable state locally: Components consuming the context can manage their own local state using useState, useReducer, or any other state management technique. They can update the state based on the context data and trigger actions accordingly.\nPropagate changes back to the context: If components need to update the context data or trigger actions that affect the context, they can use functions or callbacks provided by the context. These functions should handle the necessary updates and ensure immutability is maintained.\n\n\n\n1.6 fetching data: abort\nIf your Effect fetches something, the cleanup function should either abort the fetch or ignore its result:\n\n\n\nabort second trigger\n\n\n\nYou can’t “undo” a network request that already happened, but your cleanup function should ensure that the fetch that’s not relevant anymore does not keep affecting your application. If the userId changes from ‘Alice’ to ‘Bob’, cleanup ensures that the ‘Alice’ response is ignored even if it arrives after ‘Bob’.\n\n\n\n1.7 async/sync: passing down async functions\n\n\n\ncoupled UI components\n\n\nPassing asynchronous functions as props can lead to some drawbacks and is generally not considered a good practice. Here are a few reasons why it’s not recommended:\n\nProp Drilling: If you pass asynchronous functions as props to deeply nested components, it requires you to propagate these props through each intermediate component. This leads to a concept known as “prop drilling,” where components that do not directly need the asynchronous function still have to receive and pass it down. This can make your code more complex and harder to maintain.\nCoupling Components: By passing asynchronous functions as props, you tightly couple the components together. This means that if you decide to change the implementation of the asynchronous function or replace it with a different approach (e.g., using a different library, refactoring the code), you will have to update all the components that rely on that function. This can introduce unnecessary dependencies and make your codebase less flexible.\nCode Duplication: If multiple components require access to the same asynchronous function, passing it as a prop to each component results in code duplication. You’ll need to repeat the prop declaration and handling in each component, leading to redundant code. This can make it more difficult to maintain and update the codebase.\n\n\n1.7.1 using Context\n\n\n\n\n\n\nNote\n\n\n\nInstead of passing asynchronous functions as props, using a shared context and provider pattern, such as React Context, allows you to decouple the components and provide a centralized location for managing and accessing shared state and functions.\nBy using a context, you can avoid prop drilling and provide a clean and efficient way to access the asynchronous functions from any component within the context’s scope.\n\n\n\nAdditionally, using a provider and context pattern allows for better separation of concerns.\n\nThe provider handles the implementation details and provides the necessary functions, while the components consuming the context can focus on rendering and utilizing the shared data and functionality without worrying about how it is implemented or passed down through props.\n\nUsing context allows you to create a central place to manage and access the asynchronous function, making it available to any component that needs it within the context’s scope.\n\nThis avoids the need for prop drilling, where you would have to pass the function down through multiple levels of components as props.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nPropagating the asynchronous function via props can work, but it may lead to some issues.\nAsynchronous operations like API requests typically have a delay in fetching data, and the results may not be available immediately.\nIf you pass the function as a prop and try to execute it synchronously within a component, you won’t be able to wait for the response or handle any errors properly.\nIt can lead to unpredictable behavior and may cause the component to render with incomplete or incorrect data.\n\n\nBy using context, you can handle the asynchronous behavior appropriately, whether it’s using async/await or promises, and ensure that the components consuming the context can work with the asynchronous function correctly."
  },
  {
    "objectID": "reactjs/rjslab3-4.html#asyncsync-passing-down-async-functions",
    "href": "reactjs/rjslab3-4.html#asyncsync-passing-down-async-functions",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "2 async/sync: passing down async functions",
    "text": "2 async/sync: passing down async functions\n\n\n\ncoupled UI components\n\n\nPassing asynchronous functions as props can lead to some drawbacks and is generally not considered a good practice. Here are a few reasons why it’s not recommended:\n\nProp Drilling: If you pass asynchronous functions as props to deeply nested components, it requires you to propagate these props through each intermediate component. This leads to a concept known as “prop drilling,” where components that do not directly need the asynchronous function still have to receive and pass it down. This can make your code more complex and harder to maintain.\nCoupling Components: By passing asynchronous functions as props, you tightly couple the components together. This means that if you decide to change the implementation of the asynchronous function or replace it with a different approach (e.g., using a different library, refactoring the code), you will have to update all the components that rely on that function. This can introduce unnecessary dependencies and make your codebase less flexible.\nCode Duplication: If multiple components require access to the same asynchronous function, passing it as a prop to each component results in code duplication. You’ll need to repeat the prop declaration and handling in each component, leading to redundant code. This can make it more difficult to maintain and update the codebase.\n\n\n2.1 using Context\n\n\n\n\n\n\nNote\n\n\n\nInstead of passing asynchronous functions as props, using a shared context and provider pattern, such as React Context, allows you to decouple the components and provide a centralized location for managing and accessing shared state and functions.\nBy using a context, you can avoid prop drilling and provide a clean and efficient way to access the asynchronous functions from any component within the context’s scope.\n\n\n\nAdditionally, using a provider and context pattern allows for better separation of concerns.\n\nThe provider handles the implementation details and provides the necessary functions, while the components consuming the context can focus on rendering and utilizing the shared data and functionality without worrying about how it is implemented or passed down through props.\n\nUsing context allows you to create a central place to manage and access the asynchronous function, making it available to any component that needs it within the context’s scope.\n\nThis avoids the need for prop drilling, where you would have to pass the function down through multiple levels of components as props.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nPropagating the asynchronous function via props can work, but it may lead to some issues. Asynchronous operations like API requests typically have a delay in fetching data, and the results may not be available immediately. If you pass the function as a prop and try to execute it synchronously within a component, you won’t be able to wait for the response or handle any errors properly. It can lead to unpredictable behavior and may cause the component to render with incomplete or incorrect data.\n\n\nBy using context, you can handle the asynchronous behavior appropriately, whether it’s using async/await or promises, and ensure that the components consuming the context can work with the asynchronous function correctly."
  },
  {
    "objectID": "reactjs/rjslab3-4.html#versions",
    "href": "reactjs/rjslab3-4.html#versions",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "3 Versions",
    "text": "3 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\ntodoApp 0.4\nToDoGrid decoupling with domains: todoApp 0.4\n-\nrender todoGrid - todo created render\n\n\n\n\n\n\n\n\n  React JS: Lab#RE03-3 \n\n\n\n  top \n\n\n\n React JS: Lab#RE03-5"
  },
  {
    "objectID": "reactjs/rjslab3-5.html",
    "href": "reactjs/rjslab3-5.html",
    "title": "Lab#RE03-5: store",
    "section": "",
    "text": "📘 React JS Lab#RE03-5: store\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\n\nthe use Context API and useContext hooks together to build a fully functional CRUD application that emulates a list of employees.\nlocal storage\nstores: redux/reducer, Zustand"
  },
  {
    "objectID": "reactjs/rjslab3-5.html#overall",
    "href": "reactjs/rjslab3-5.html#overall",
    "title": "Lab#RE03-5: store",
    "section": "1 Overall",
    "text": "1 Overall\n\n\n\n\n\n\nModern React\n\n\n\nModern React apps leverage a variety of strategies to effectively manage state, ensure optimal performance, and enhance scalability.\nThree commonly used tools in this regard are context, Redux/reducer, and local storage.\nContext allows for efficient sharing of state across components, Redux/reducer provides a centralized state management solution, and local storage enables persistent storage of data.\nAdditionally, modern React apps utilize APIs such as REST and WebSockets to facilitate seamless communication with backend servers, further enhancing the app’s functionality and real-time capabilities.\n\n\n\n\nWe could add to our App:\n\nsome performance optimization: Techniques like memoization, virtualization, and code splitting.\nServer-side Rendering (SSR) and Static Site Generation (SSG): SSR and SSG techniques, like Next.js allow rendering React components on the server-side or generating static HTML files, improving SEO and initial load times.\n\nReferences:\n\nReact Context API: What is it and How it works?\nZustand, redux/reducer\nuseLocalStorage"
  },
  {
    "objectID": "reactjs/reactjs-what-render-dom.html#how-it-works",
    "href": "reactjs/reactjs-what-render-dom.html#how-it-works",
    "title": "React JS: render virtual DOM",
    "section": "3 How it works?",
    "text": "3 How it works?\nReconciliation\nWhen parsing JSX, React uses its internal reconciler, called the Reconciler.\n\n\n\n\n\n\nReconciler\n\n\n\nReconciler works to convert JSX syntax into function calls that create React elements.\nThese elements describe the desired structure and properties of UI components.\n\n\nReact then uses these elements to build a virtual representation of the DOM, known as the “Virtual DOM.”\nThe Reconciler is responsible for comparing the previous and new versions of the Virtual DOM. It identifies the specific changes needed to update the real DOM efficiently. This process is known as “reconciliation” or “diffing.”\nDuring reconciliation, the Reconciler examines the differences between the previous and new Virtual DOM representations and calculates the minimal set of changes required.\nIt determines which parts of the real DOM need to be added, removed, or modified to reflect the updated component state.\nOnce the necessary changes are identified, the Reconciler applies them to the real DOM, selectively updating only the affected elements.\nThis ensures that the actual browser DOM reflects the new component state accurately. The updated content is then rendered on the screen.\nBy using this approach, React optimizes performance by minimizing direct interactions with the browser DOM and only updating the necessary parts.\n\n\n\n\n\n  React JS: Introduction \n\n\n\n  top \n\n\n\n React JS: Create a React project"
  },
  {
    "objectID": "reactjs/rjslab3-4.html#step-by-step-todo-api-rest",
    "href": "reactjs/rjslab3-4.html#step-by-step-todo-api-rest",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "3 step-by-step todo api rest",
    "text": "3 step-by-step todo api rest\n\n\n\ntodo domains schema"
  },
  {
    "objectID": "reactjs/rjslab3-4.html#step-by-step-todo-api-rest-domains",
    "href": "reactjs/rjslab3-4.html#step-by-step-todo-api-rest-domains",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "2 step-by-step todo api rest domains",
    "text": "2 step-by-step todo api rest domains\n\n\n\ntodo domains schema\n\n\n\n2.1 Service: TodoService.js\nThe TodoService is a JavaScript object that provides methods for performing various operations related to managing TODO items.\n\n\n\n\n\n\nobject literal notation in JavaScript\n\n\n\nIt is defined using object literal notation in JavaScript.\nObject literal notation is a way to define objects directly in the code without using a class or constructor function.\nIn the code, the TodoService object is created using curly braces {} and contains properties that are assigned arrow functions as their values.\nEach property represents a different operation related to managing TODO items.\nThe methods defined within the TodoService object can be called as functions, such as TodoService.getAllTodos(), TodoService.createTodo(), TodoService.updateTodo(), and TodoService.deleteTodo().\n\n\nIt utilizes the Axios library to make HTTP requests to a specified API base URL. The data handled by the TodoService:\n\nGet All Todos: This method retrieves all the TODO items from the API and returns the response data, which represents a collection of TODO items.\nCreate Todo: This method sends a POST request to the API with a new TODO item as the payload. It expects the response data to represent the newly created TODO item.\nUpdate Todo: This method sends a PUT request to the API, updating an existing TODO item with the provided data. It expects the response data to represent the updated TODO item.\nDelete Todo: This method sends a DELETE request to the API, deleting the TODO item with the specified ID. It expects the response data to indicate the success of the deletion operation.\n\n\n\nThe data handled by TodoService consists of TODO items and their associated properties, such as ID, title, description, status, etc. The specific structure and format of the TODO data are determined by the API being used.\n\n\nToDoService.js\n\nimport axios from \"axios\";\n\n///`${API_URL}/todo`\n// https://github.com/mockapi-io/docs/wiki/Quick-start-guide\n// API_URL mockapi.io\nconst API_BASE_URL = \"https://645.mockapi.io/v1\";\n\nconst TodoService = {\n  getAllTodos: async () => {\n    try {\n      const response = \n        await axios.get(`${API_BASE_URL}/todo`);\n      //console.log(\"retrieving todos:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error retrieving todos:\", error);\n      throw error;\n    }\n  },\n\n  createTodo: async (todo) => {\n    try {\n      const response = \n        await axios.post(`${API_BASE_URL}/todo`, todo);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error creating todo:\", error);\n      throw error;\n    }\n  },\n\n  updateTodo: async (todo) => {\n    try {\n      const response = \n        await axios.put(`${API_BASE_URL}/todo/${todo.id}`, todo);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating todo:\", error);\n      throw error;\n    }\n  },\n\n  deleteTodo: async (todoId) => {\n    try {\n      const response = \n        await axios.delete(`${API_BASE_URL}/todo/${todoId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n      throw error;\n    }\n  }\n};\n\nexport default TodoService;\n\n\n\n2.2 Service: TodoContext.js\nThe TodoContext is a React context created using the createContext function.\nIt serves as:\n\na repository of data related to TODO items in the React domain.\na provider access to the TodoService functions, which utilize Axios to interact with an external API for data operations.\na state manager, the TodoProvider component is responsible for managing the state of the TODO items using the useState hook.\n\n\nTodoContext and TodoProvider\n\n\n\n\n\n\nCode\nDescription\n\n\n\n\nuseEffect\nis used to fetch the initial TODO items when the component mounts. The fetchTodos function makes an asynchronous call to TodoService.getAllTodos() and updates the state with the retrieved data.\n\n\ncreateTodo\nadds a new TODO item by making a request to TodoService.createTodo() and updates the state by appending the created TODO item.\n\n\nupdateTodo\nupdates an existing TODO item by calling TodoService.updateTodo(), modifying the corresponding TODO item in the state.\n\n\ndeleteTodo\ndeletes a TODO item by invoking TodoService.deleteTodo() and removes the deleted item from the state.\n\n\nTodoContext.Provider\nwraps the children components, providing the todos state and the CRUD functions (createTodo, updateTodo, deleteTodo) through the context’s value.\n\n\n\n\n\nThe TodoContext and TodoProvider facilitate the management of TODO data in the React application by utilizing the TodoService functions to interact with an API, and provide the data and functions through the context to be consumed by JSX components in an immutable domain.\n\n\nToDoContext.js\n\nimport React, { createContext, useState, useEffect } \n  from \"react\";\nimport TodoService from \"./TodoService\";\n\nconst TodoContext = createContext();\n\nconst TodoProvider = ({ children }) => {\n  const [todos, setTodos] = useState([]);\n\n  //\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  //\n  const fetchTodos = async () => {\n    try {\n      const todos = await TodoService.getAllTodos();\n      setTodos(todos);\n      //console.log(\"todos:\", todos);\n    } catch (error) {\n      console.error(\"Error fetching todos:\", error);\n    }\n  };\n\n  //\n  const createTodo = async (todo) => {\n    try {\n      const createdTodo = await TodoService.createTodo(todo);\n      setTodos((prevTodos) => [...prevTodos, createdTodo]);\n    } catch (error) {\n      console.error(\"Error creating todo:\", error);\n    }\n  };\n\n  //\n  const updateTodo = async (updatedTodo) => {\n    try {\n      await TodoService.updateTodo(updatedTodo);\n      setTodos((prevTodos) => {\n        const updatedTodos = [...prevTodos];\n        const todoIndex = updatedTodos.findIndex(\n          (todo) => todo.id === updatedTodo.id\n        );\n        updatedTodos[todoIndex] = updatedTodo;\n        return updatedTodos;\n      });\n    } catch (error) {\n      console.error(\"Error updating todo:\", error);\n    }\n  };\n\n  //\n  const deleteTodo = async (todoId) => {\n    try {\n      await TodoService.deleteTodo(todoId);\n      setTodos((prevTodos) => \n        prevTodos.filter((todo) => todo.id !== todoId));\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n    }\n  };\n\n  //\n  return (\n    <TodoContext.Provider \n      value={{ todos, createTodo, updateTodo, deleteTodo }}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n\nexport { TodoContext, TodoProvider };\n\n\n\n2.3 Main Component: ToDoApp.jsx\nThe main component is TodoApp, which renders a:\n\nheader,\na TodoAdd component for creating new TODO items, and\na TodoList component for displaying the list of TODO items.\n\nWithin TodoApp, the useContext hook is used to access the TodoContext and retrieve the todos, createTodo, updateTodo, and deleteTodo functions from the context.\nHandlers:\n\nThe handleCreateTodo function calls createTodo when a new TODO item is created in the TodoAdd component.\nThe handleUpdateTodo function invokes updateTodo when a TODO item is updated in the TodoList component.\nThe handleDeleteTodo function calls deleteTodo when a TODO item is deleted in the TodoList component.\n\nThe App component wraps the TodoApp component with the TodoProvider, providing the necessary context and functions to manage the TODO items.\n\n\nThe code-architecture establishes a connection between the TODO data management in TodoProvider and the rendering of components in TodoApp using the TodoContext. It allows for seamless communication and manipulation of TODO items within the React application.\n\n\nToDoApp.jsx\n\nimport React, { useContext } from \"react\";\nimport TodoAdd from \"./TodoAdd\";\nimport TodoList from \"./TodoList\";\nimport { TodoContext, TodoProvider } \n  from \"../service/TodoContext.js\";\n\nconst TodoApp = () => {\n  const { todos, createTodo, updateTodo, deleteTodo } = \n    useContext(TodoContext);\n\n  const handleCreateTodo = (todo) => {\n    createTodo(todo);\n  };\n\n  const handleUpdateTodo = (todo) => {\n    updateTodo(todo);\n  };\n\n  const handleDeleteTodo = (todoId) => {\n    deleteTodo(todoId);\n  };\n\n  return (\n    <div>\n      <h1>Todo App</h1>\n      <TodoAdd onCreate={handleCreateTodo} />\n      <TodoList\n        todos={todos}\n        onDelete={handleDeleteTodo}\n        onUpdate={handleUpdateTodo}\n      />\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <TodoProvider>\n      <TodoApp />\n    </TodoProvider>\n  );\n};\n\nexport default App;\n\n\n\n2.4 Component: ToDoAdd.jsx\nToDoAdd.jsx is used for creating new todo items.\nIt renders a form with input fields for entering the text, author, and due date of a new todo item. It uses React’s useState hook to manage the state of the input values. When the form is submitted, the onCreate function is called with an object containing the entered values.\nThe component exports the TodoAdd component using the export default statement, allowing it to be imported and used in other files.\n\n\nToDoAdd.jsx\n\nimport React from \"react\";\n\n// CRUD: create\nconst TodoAdd = ({ onCreate }) => {\n  const [text, setText] = React.useState(\"\");\n  const [author, setAuthor] = React.useState(\"\");\n  const [due, setDue] = React.useState(\"\");\n\n  const handleSubmit = () => {\n    onCreate({\n      text: text,\n      author: author,\n      due\n    });\n  };\n\n  return (\n    <>\n      <hr />\n      <h2>Create new Todo</h2>\n      <hr />\n      <form onSubmit={handleSubmit}>\n        <p>\n          <label> Text</label>\n          <br />\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            placeholder=\"Enter author name\"\n          />\n        </p>\n        <p>\n          <label> Author</label>\n          <br />\n          <input\n            type=\"text\"\n            value={author}\n            onChange={(e) => setAuthor(e.target.value)}\n            placeholder=\"Enter author name\"\n          />\n        </p>\n        <p>\n          <label> Due</label>\n          <br />\n          <input\n            type=\"date\"\n            value={due}\n            onChange={(e) => setDue(e.target.value)}\n          />\n        </p>\n\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      <br />\n      <hr />\n    </>\n  );\n};\n\nexport default TodoAdd;\n\n\n\n2.5 Component: ToDoList.jsx\nThe ToDoList.jsx consists of two components:\n\nTodoItem: this component renders a single todo item with its details such as text, id, due date, author, and completion status.\n\nIt also provides options to delete the item and update its completion status.\n\nTodoList: this component renders a list of todo items.\n\nIt maps over the todos array and renders a TodoItem component for each item. It also handles the loading state when the todos array is null.\n\n\nThe components are exported using the export default statement, indicating that they can be imported and used in other files.\n\n\nToDoList.jsx\n\nimport React from \"react\";\n\n// CRUD: read and render item from list\nconst TodoItem = ({ todo, onDelete, onUpdate }) => {\n  const handleDelete = () => {\n    onDelete(todo.id);\n  };\n\n  const handleUpdate = () => {\n    onUpdate(todo);\n  };\n\n  return (\n    <>\n      <h4> {todo.text}</h4>\n      <p>\n        Id: {todo.id}, Date: {todo.due}, <strong>{todo.author} </strong>\n      </p>\n\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <button onClick={handleDelete}>Delete</button>\n        <div>\n          Completed:{\" \"}\n          <input\n            type=\"checkbox\"\n            value={todo.completed}\n            onChange={handleUpdate}\n          ></input>\n        </div>\n      </div>\n\n      <br />\n      <br />\n      <hr />\n    </>\n  );\n};\n\n// CRUD: read and create list\nconst TodoList = ({ todos, onDelete, onUpdate }) => {\n  //console.log(\"todos list\", todos);\n  if (todos === null) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <>\n      <h2>Todos List</h2>\n      <hr />\n      {todos.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onDelete={onDelete}\n          onUpdate={onUpdate}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default TodoList;"
  },
  {
    "objectID": "reactjs/rjslab4.html#spring-boot",
    "href": "reactjs/rjslab4.html#spring-boot",
    "title": "Lab#RE04-1: server",
    "section": "3 spring boot",
    "text": "3 spring boot\n\n\n\n\n\n  React JS: Lab#RE03-4 \n\n\n\n  top \n\n\n\n React JS: Lab#RE05-1"
  },
  {
    "objectID": "reactjs/rjslab4.html#api-rest-server-with-feathers",
    "href": "reactjs/rjslab4.html#api-rest-server-with-feathers",
    "title": "Lab#RE04-1: server",
    "section": "2 API REST Server with Feathers",
    "text": "2 API REST Server with Feathers"
  },
  {
    "objectID": "reactjs/rjslab4.html#api-rest-server-with-spring-boot",
    "href": "reactjs/rjslab4.html#api-rest-server-with-spring-boot",
    "title": "Lab#RE04-1: server",
    "section": "3 API REST Server with spring boot",
    "text": "3 API REST Server with spring boot\n\n\n\n\n\n  React JS: Lab#RE03-4 \n\n\n\n  top \n\n\n\n React JS: Lab#RE05-1"
  },
  {
    "objectID": "reactjs/rjslab3-5.html#reduxreducer",
    "href": "reactjs/rjslab3-5.html#reduxreducer",
    "title": "Lab#RE03-5: store",
    "section": "2 redux/reducer",
    "text": "2 redux/reducer\n\n2.1 What is Redux?\n\n\n\nredux\n\n\n“Redux” is a pattern and library for managing and updating application state, using events called “actions”.\nIt serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.\n\n\n2.2 Why Should I Use Redux?\nRedux helps you manage “global” state - state that is needed across many parts of your application.\nThe patterns and tools provided by Redux make it easier to understand when, where, why, and how the state in your application is being updated, and how your application logic will behave when those changes occur.\nRedux guides you towards writing code that is predictable and testable, which helps give you confidence that your application will work as expected.\n\n\n2.3 Example: todo\n\n\n\ntodo tutorial official docs"
  },
  {
    "objectID": "reactjs/rjslab3-5.html#local-storage",
    "href": "reactjs/rjslab3-5.html#local-storage",
    "title": "Lab#RE03-5: store",
    "section": "3 local storage",
    "text": "3 local storage\nLet’s add local storage to our basic todo\nThe todos state is stored in the local storage using the localStorage.setItem method.\nIt is initialized with the stored todos from the local storage in the first useEffect hook. Whenever the todos state is updated, the second useEffect hook is triggered, and the updated todos are stored in the local storage using localStorage.setItem.\n\n\nTodos.jsx\n\n// ...\n\nconst Todos = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storedTodos = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (storedTodos) {\n      setTodos(JSON.parse(storedTodos));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  const fetchTodos = async () => {\n    // Fetching todos from API (unchanged code)\n    // ...\n  };\n\n  const addTodo = (newTodo) => {\n    // Adding todo to the state and localStorage\n    setTodos([...todos, newTodo]);\n  };\n\n  const updateTodo = async (id) => {\n    // Updating todo in the state and localStorage\n    const updatedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  const deleteTodo = async (id) => {\n    // Deleting todo from the state and localStorage\n    const filteredTodos = todos.filter((todo) => todo.id !== id);\n    setTodos(filteredTodos);\n  };\n\n  // ...\n\n  return (\n    <ApiContext.Provider \n      value={{ todos, addTodo, updateTodo, deleteTodo }}>\n      {/* ... */}\n    </ApiContext.Provider>\n  );\n};\n\nexport default Todos;"
  },
  {
    "objectID": "reactjs/rjslab3-5.html#reduxreducer-or-context",
    "href": "reactjs/rjslab3-5.html#reduxreducer-or-context",
    "title": "Lab#RE03-5: store",
    "section": "4 redux/reducer or context",
    "text": "4 redux/reducer or context\n\nPitfalls of overusing React Context\nComparing React Context and Redux\n\n\n\n\n\n\n  React JS: Lab#RE03-4 \n\n\n\n  top \n\n\n\n React JS: Lab#RE04-1"
  }
]