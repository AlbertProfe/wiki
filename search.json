[
  {
    "objectID": "ifct116-24/ifct116--24.html",
    "href": "ifct116-24/ifct116--24.html",
    "title": "IFCT166 Official Docs",
    "section": "",
    "text": "Denominació: FHERRAMIENTAS DEVOPS\nCodi: IFCt166exp\nHores: 75h\nFamília professional: Informàtica i comunicacions\nÀrea professional: SISTEMAS Y TELEMÁTICA\nNivell de qualificació professional: 3"
  },
  {
    "objectID": "ifct116-24/ifct116--24.html#identificació-del-certificat-de-professionalitat",
    "href": "ifct116-24/ifct116--24.html#identificació-del-certificat-de-professionalitat",
    "title": "IFCT166 Official Docs",
    "section": "",
    "text": "Denominació: FHERRAMIENTAS DEVOPS\nCodi: IFCt166exp\nHores: 75h\nFamília professional: Informàtica i comunicacions\nÀrea professional: SISTEMAS Y TELEMÁTICA\nNivell de qualificació professional: 3"
  },
  {
    "objectID": "ifct116-24/ifct116--24.html#documentació",
    "href": "ifct116-24/ifct116--24.html#documentació",
    "title": "IFCT166 Official Docs",
    "section": "Documentació",
    "text": "Documentació\n\nPROGRAMA Formatiu: Fullstack júnior web developer amb Java"
  },
  {
    "objectID": "ifct116-24/ifct116--24.html#programa-formatiu",
    "href": "ifct116-24/ifct116--24.html#programa-formatiu",
    "title": "IFCT166 Official Docs",
    "section": "Programa formatiu",
    "text": "Programa formatiu\n\nMódulo 1: Introducción a DevOps\nMódulo 2: Contenedores con Docker\nMódulo 3: Infraestructura como Código\nMódulo 4: Gestion de la configuración con Ansible\nMódulo 5: Infraestructura Inmutable\nMódulo 6: Integración y Entrega Continua con Jenkins"
  },
  {
    "objectID": "ifct116-24/ifct116--24.html#competència-general",
    "href": "ifct116-24/ifct116--24.html#competència-general",
    "title": "IFCT166 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDominar las principales herramientas de DevOps para lograr la automatización de todos los pasos de la construcción del software, desde la integración, las pruebas y la entrega hasta el despliegue y la administración de la Infraestructura"
  },
  {
    "objectID": "ifct116-24/ifct116--backlog-product-24.html",
    "href": "ifct116-24/ifct116--backlog-product-24.html",
    "title": "IFCT166 Product Backlog",
    "section": "",
    "text": "Backlog course"
  },
  {
    "objectID": "ifct116-24/ifct116--backlog-product-24.html#november-2024",
    "href": "ifct116-24/ifct116--backlog-product-24.html#november-2024",
    "title": "IFCT166 Product Backlog",
    "section": "November 2024",
    "text": "November 2024\n\nBacklog course November 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#01\n01\n20/11/2024\n\n\n\n\n\n02\n21/11/2024\n\n\n\n\n#02\n03\n25/11/2024\n\n\n\n\n\n04\n26/11/2024\n\n\n\n\n\n05\n27/11/2024\n\n\n\n\n\n06\n28/11/2024\n\n\n\n\n\n07\n29/11/2024"
  },
  {
    "objectID": "ifct116-24/ifct116--backlog-product-24.html#december-2024",
    "href": "ifct116-24/ifct116--backlog-product-24.html#december-2024",
    "title": "IFCT166 Product Backlog",
    "section": "December 2024",
    "text": "December 2024\n\nBacklog course December 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#03\n08\n02/12/2024\n\n\n\n\n\n09\n03/12/2024\n\n\n\n\n\n10\n04/12/2024\n\n\n\n\n\n11\n05/12/2024\n\n\n\n\n#04\n13\n09/12/2024\n\n\n\n\n\n14\n10/12/2024\n\n\n\n\n\n15\n11/12/2024"
  },
  {
    "objectID": "markup/markup-css-w3css.html",
    "href": "markup/markup-css-w3css.html",
    "title": "CSS: W3.css",
    "section": "",
    "text": "W3.CSS is a CSS (Cascading Style Sheets) framework that is designed to make it easier to create modern and responsive web pages.\nIt provides a set of pre-defined styles and layouts that can be easily customized and applied to HTML elements, allowing developers to quickly and easily create professional-looking web pages without the need to write complex CSS code.\nW3.CSS is lightweight, easy to use, and supports all modern web browsers.\n\nW3.CSS is Smaller, Faster and Easier to Use\n\nW3.CSS is a modern, responsive, mobile first CSS framework.\nW3.CSS provides equality for all browsers: Chrome. Firefox. Edge. IE. Safari. Opera.\nW3.CSS provides equality for all devices: Desktop. Laptop. Tablet. Mobile.\nW3.CSS is standard CSS only (No jQuery or JavaScript library).\n\n\n\nReference: W3.css",
    "crumbs": [
      "Styling: CSS",
      "CSS: W3.css"
    ]
  },
  {
    "objectID": "markup/markup-css-w3css.html#w3.css",
    "href": "markup/markup-css-w3css.html#w3.css",
    "title": "CSS: W3.css",
    "section": "",
    "text": "W3.CSS is a CSS (Cascading Style Sheets) framework that is designed to make it easier to create modern and responsive web pages.\nIt provides a set of pre-defined styles and layouts that can be easily customized and applied to HTML elements, allowing developers to quickly and easily create professional-looking web pages without the need to write complex CSS code.\nW3.CSS is lightweight, easy to use, and supports all modern web browsers.\n\nW3.CSS is Smaller, Faster and Easier to Use\n\nW3.CSS is a modern, responsive, mobile first CSS framework.\nW3.CSS provides equality for all browsers: Chrome. Firefox. Edge. IE. Safari. Opera.\nW3.CSS provides equality for all devices: Desktop. Laptop. Tablet. Mobile.\nW3.CSS is standard CSS only (No jQuery or JavaScript library).\n\n\n\nReference: W3.css",
    "crumbs": [
      "Styling: CSS",
      "CSS: W3.css"
    ]
  },
  {
    "objectID": "markup/markup-css-w3css.html#example",
    "href": "markup/markup-css-w3css.html#example",
    "title": "CSS: W3.css",
    "section": "2 Example",
    "text": "2 Example\n\n\nexample.css\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;title&gt;W3.CSS&lt;/title&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\"&gt;\n&lt;body&gt;\n\n&lt;div class=\"w3-container w3-teal\"&gt;\n  &lt;h1&gt;My Car&lt;/h1&gt;\n&lt;/div&gt;\n\n&lt;img src=\"img_car.jpg\" alt=\"Car\" style=\"width:100%\"&gt;\n\n&lt;div class=\"w3-container\"&gt;\n  &lt;p&gt;A car is a wheeled, self-powered motor vehicle used for transportation.&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div class=\"w3-container w3-teal\"&gt;\n  &lt;p&gt;My footer information&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Styling: CSS",
      "CSS: W3.css"
    ]
  },
  {
    "objectID": "markup/markup-css-basics.html",
    "href": "markup/markup-css-basics.html",
    "title": "Cascade Style Sheet",
    "section": "",
    "text": "Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.\nCSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now CSS without a version number.\nAfter CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.\nreference: CSS: Cascading Style Sheets",
    "crumbs": [
      "Styling: CSS",
      "Cascade Style Sheet"
    ]
  },
  {
    "objectID": "markup/markup-css-basics.html#css-cascading-style-sheets",
    "href": "markup/markup-css-basics.html#css-cascading-style-sheets",
    "title": "Cascade Style Sheet",
    "section": "",
    "text": "Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.\nCSS is among the core languages of the open web and is standardized across Web browsers according to W3C specifications. Previously, the development of various parts of CSS specification was done synchronously, which allowed the versioning of the latest recommendations. You might have heard about CSS1, CSS2.1, or even CSS3. There will never be a CSS3 or a CSS4; rather, everything is now CSS without a version number.\nAfter CSS 2.1, the scope of the specification increased significantly and the progress on different CSS modules started to differ so much, that it became more effective to develop and release recommendations separately per module. Instead of versioning the CSS specification, W3C now periodically takes a snapshot of the latest stable state of the CSS specification and individual modules progress. CSS modules now have version numbers, or levels, such as CSS Color Module Level 5.\nreference: CSS: Cascading Style Sheets",
    "crumbs": [
      "Styling: CSS",
      "Cascade Style Sheet"
    ]
  },
  {
    "objectID": "markup/markup-css-basics.html#starting-with-some-html",
    "href": "markup/markup-css-basics.html#starting-with-some-html",
    "title": "Cascade Style Sheet",
    "section": "2 Starting with some HTML",
    "text": "2 Starting with some HTML\nOur starting point is an HTML document. You can copy the code from below if you want to work on your own computer. Save the code below as index.html in a folder on your machine.\nReference: Starting with some HTML\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Getting started with CSS&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;I am a level one heading&lt;/h1&gt;\n\n    &lt;p&gt;\n      This is a paragraph of text. In the text is a\n      &lt;span&gt;span element&lt;/span&gt; and also a\n      &lt;a href=\"https://example.com\"&gt;link&lt;/a&gt;.\n    &lt;/p&gt;\n\n    &lt;p&gt;\n      This is the second paragraph. It contains an &lt;em&gt;emphasized&lt;/em&gt; element.\n    &lt;/p&gt;\n\n    &lt;ul&gt;\n      &lt;li&gt;Item &lt;span&gt;one&lt;/span&gt;&lt;/li&gt;\n      &lt;li&gt;Item two&lt;/li&gt;\n      &lt;li&gt;Item &lt;em&gt;three&lt;/em&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/body&gt;\n&lt;/html&gt;&lt;/code&gt;",
    "crumbs": [
      "Styling: CSS",
      "Cascade Style Sheet"
    ]
  },
  {
    "objectID": "markup/markup-css-basics.html#adding-css-to-our-document",
    "href": "markup/markup-css-basics.html#adding-css-to-our-document",
    "title": "Cascade Style Sheet",
    "section": "3 Adding CSS to our document",
    "text": "3 Adding CSS to our document\nTo link styles.css to index.html, add the following line somewhere inside the &lt;head&gt; of the HTML document:\n&lt;link rel=\"stylesheet\" href=\"styles.css\" /&gt;\nThis &lt;link&gt; element tells the browser that we have a stylesheet, using the rel attribute, and the location of that stylesheet as the value of the href attribute. You can test that the CSS works by adding a rule to styles.css. Using your code editor, add the following to your CSS file:\n&lt;link rel=\"stylesheet\" href=\"styles.css\" /&gt;\nTo target all paragraphs in the document, you would use the selector p. To turn all paragraphs green, you would use:\np {\n  color: green;\n}\nYou can target multiple selectors at the same time by separating the selectors with a comma. If you want all paragraphs and all list items to be green, your rule would look like this:\np,\nli {\n  color: green;\n}",
    "crumbs": [
      "Styling: CSS",
      "Cascade Style Sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html",
    "href": "markup/markup-quarto-cheatsheet.html",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "",
    "text": "📘 Cheat-sheet\n\nSummary\nLinks and figures\nTabset\nCallouts\nTablas\nTwo columns\nWrap code\nCode blocks\nMermaid\nInclude\nPresentations\nAccordion\nIcons\nOthers\nMarkup and Quarto Resources",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#summary",
    "href": "markup/markup-quarto-cheatsheet.html#summary",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "1 Summary",
    "text": "1 Summary\n::: {.summary}\n📘 **Design-patterns**\n:::\n\n/* summary card */\n.summary{\n    padding: 16px 16px 16px 16px;\n    background: #a2f868;\n    border: #ffffff6b;\n    color: #117441;\n    border-radius: 10px 10px 10px 10px;\n}",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#links-and-images",
    "href": "markup/markup-quarto-cheatsheet.html#links-and-images",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "2 Links and images",
    "text": "2 Links and images\n![Singleton Pattern](../images/javase/singleton-pattern-edited.png){width=60%}\n{fig-width=10}\n{fig-width=50%}\n{height=2in}\n{height=100px}\nhttps://quarto.org/docs/reference/formats/pdf.html#figures\nhttps://pandoc.org/MANUAL.html#extension-link_attributes\n{.external}\n{#tagthis .preview-image}\n\nbasics\nfigures\nvideos",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#tabset",
    "href": "markup/markup-quarto-cheatsheet.html#tabset",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "3 Tabset",
    "text": "3 Tabset\n::: {.panel-tabset}\n### Tab A\nContent for `Tab A`\n\n### Tab B\nContent for `Tab B`\n:::\n\nreveal.js tabset",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#code-blocks",
    "href": "markup/markup-quarto-cheatsheet.html#code-blocks",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "4 Code blocks",
    "text": "4 Code blocks\n```{.python filename=\"matplotlib.py\"}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n#| echo: true\n#| code-overflow: wrap\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()```\nHTML Code Blocks",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#code-wrap-and-filename",
    "href": "markup/markup-quarto-cheatsheet.html#code-wrap-and-filename",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "5 Code wrap and filename",
    "text": "5 Code wrap and filename\n```{.js .code-overflow-wrap filename=\"profile.jsx\"}\nexport default function Profile() {\n  return (\n    &lt;Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    /&gt;\n  );\n}```\n\n\nprofile.jsx\n\nexport default function Profile() {\n  return (\n    &lt;Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    /&gt;\n  );\n}\n\n::: {.column-margin}\n![Using React component wiht markup image and some text](/images/reactjs/ex5.png){widht=80%}\n:::",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#callouts",
    "href": "markup/markup-quarto-cheatsheet.html#callouts",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "6 Callouts",
    "text": "6 Callouts\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip}\n## Tip With Caption\n\nThis is an example of a callout with a caption.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user.\nYou can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make \na collapsible callout that is expanded by default.\n:::\ncallouts",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#minimal-callout",
    "href": "markup/markup-quarto-cheatsheet.html#minimal-callout",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "7 Minimal callout",
    "text": "7 Minimal callout\n::: {.callout-note appearance=\"simple\" icon=false}\n\n## Pay Attention\n\nUsing callouts is an effective way to highlight content that your reader\n give special consideration or attention.\n\n:::\nCallouts have 3 different looks you can use.\n\nCallouts looks\n\n\n\n\n\n\ntag\nDescription\n\n\n\n\ndefault\nwith colored header and an icon.\n\n\nsimple\nthat doesn’t include a colored header background.\n\n\nminimal\nborders to the callout, but doesn’t include a header background color or icon",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#tables",
    "href": "markup/markup-quarto-cheatsheet.html#tables",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "8 Tables",
    "text": "8 Tables\n\ntables\ntablesgenerator\n\n#| tables\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table syntax\n: Callouts looks {tbl-colwidths=\"[20,85]\"}\n\n8.1 Two columns\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Highly customizable\n- Less work than using `&lt;div&gt;` tags\n:::\n\n::: {.column width=\"50%\"}\n- Customizable in terms of layouts\n\n:::\n::::",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#column-margin",
    "href": "markup/markup-quarto-cheatsheet.html#column-margin",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "9 Column Margin",
    "text": "9 Column Margin\n::: {.column-margin}\n[ top](#top)\n:::",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#iframe",
    "href": "markup/markup-quarto-cheatsheet.html#iframe",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "10 iframe",
    "text": "10 iframe\n{=html}\n&lt;iframe \n  width=\"780\"\n  height=\"500\" \n  src=\"https://devhints.io/bash\"\n  title=\"Bash scripting cheatsheet\"&gt;\n&lt;/iframe&gt;",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#mermaid",
    "href": "markup/markup-quarto-cheatsheet.html#mermaid",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "11 Mermaid",
    "text": "11 Mermaid\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]\n\n\n{mermaid}\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]```",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#presentations",
    "href": "markup/markup-quarto-cheatsheet.html#presentations",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "12 Presentations",
    "text": "12 Presentations\n#| link to presentation, link to .qmd\n[Log in to GitHub and Quarto Creation: Sync GUI](/images/markup/quarto-github/markup-quarto-github.qmd)\n#| presentation\ntitle: \"Create Project\"\nauthor: \"Maven IntellJ Idea\"\nformat: revealjs\n\n## {background-color=\"grey\"}\n![](createprojectMavenIntellJI_0.png)\n\nRevealjs Quarto Presentations",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#include",
    "href": "markup/markup-quarto-cheatsheet.html#include",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "13 Include",
    "text": "13 Include\n{{&lt; include _content.qmd &gt;}}\n\n---\ntitle: \"Quarto Markdown: _content\"\nsubtitle: Code CheatSheet (7/7)\nauthor: albertprofe\ndate: \"06/01/2021\"\ndate-modified: last-modified\ndate-format: full\ndescription: Cheat-sheet Quarto web\ncategories: [markup, qmd, quarto, cheat-sheet]\ntoc: true\nnumber-sections: true\nformat:\n  html\nhighlight-style: github\n---\n\n\ninlcude",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#accordion",
    "href": "markup/markup-quarto-cheatsheet.html#accordion",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "14 Accordion",
    "text": "14 Accordion\n\n&lt;details&gt;\n&lt;summary&gt;Code&lt;/summary&gt;\n```{.js .code-overflow-wrap filename=\"profile.jsx\"}\n    ```\n&lt;/details&gt;\n\n&lt;details&gt;\n&lt;summary&gt;Code&lt;/summary&gt;\n\n``` {.java}\npublic class Account {\n  private Person person;\n  //other fields\n\n  public Account(Person person) {\n    this.person = person;\n  }\n\n  public Person getPerson() {\n    return this.person;\n  }\n\n  public void setPerson(Person person) {\n    this.person = person;\n    \n    //constructor, getters, setters and methods\n  }\n}```\n\n&lt;/details&gt;\nExample:\n\n\nJava Person Class\n\n\n\nperson\n\npublic class Account {\n        private Person person;\n        //other fields\n\n        public Account(Person person) {\n          this.person = person;\n        }\n\n        public Person getPerson() {\n          return this.person;\n        }\n\n        public void setPerson(Person person) {\n          this.person = person;\n          \n          //constructor, getters, setters and methods\n        }\n}",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#top-next-and-back",
    "href": "markup/markup-quarto-cheatsheet.html#top-next-and-back",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "15 Top, next and back",
    "text": "15 Top, next and back\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n[ back](#top)\n:::\n\n::: {.column width=\"40%\"}\n[ top](#top)\n:::\n\n::: {.column width=\"15%\"}\n[next ](#top)\n:::\n\n::::",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#icons",
    "href": "markup/markup-quarto-cheatsheet.html#icons",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "16 Icons",
    "text": "16 Icons\n\n\n\nIcons\n\n\n\nglasses: \narrow-up: \narrow-right: \nsolid book: \njava: \nFont Awesome Search",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-cheatsheet.html#others",
    "href": "markup/markup-quarto-cheatsheet.html#others",
    "title": "Quarto Markdown: cheat-sheet",
    "section": "17 Others",
    "text": "17 Others\n\nlayout",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: cheat-sheet"
    ]
  },
  {
    "objectID": "markup/markup-quarto-code.html",
    "href": "markup/markup-quarto-code.html",
    "title": "Quarto Markdown: code & data",
    "section": "",
    "text": "Observable helps you use data to think.\nObservable helps you explore and visualize data. It’s a platform to discover, to be inspired, and to accelerate your learning.\nYou can share your insights with the world. Above all, it’s a community of people helping each other learn and create together.",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: code & data"
    ]
  },
  {
    "objectID": "markup/markup-quarto-code.html#observable-js",
    "href": "markup/markup-quarto-code.html#observable-js",
    "title": "Quarto Markdown: code & data",
    "section": "1 Observable JS",
    "text": "1 Observable JS\nLink: A Taste of Observable\nQuarto includes native support for Observable JS, a set of enhancements to vanilla JavaScript created by Mike Bostock (also the author of D3).\nObservable JS is distinguished by its reactive runtime, which is especially well suited for interactive data exploration and analysis.\n\n\nOJS code cells {ojs} behave a bit differently than cells in traditional notebooks, and have many options available to control their display and layout.\nOJS code cells areCode blocks that use braces around the language name (e.g. ```{ojs}) are executable, and will be run by Quarto during render.\n\ni = {\n  let i = 0;\n  while (true) {\n    yield ++i;\n  }\n}\n\n\n\n\n\n\nThis is an exemple of running a script cell in Observable JS:\n\ni\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAdd to this to the .qmd document to hide the code!\nexecute:\n  echo: false",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: code & data"
    ]
  },
  {
    "objectID": "markup/markup-quarto-code.html#data-source",
    "href": "markup/markup-quarto-code.html#data-source",
    "title": "Quarto Markdown: code & data",
    "section": "2 Data-source",
    "text": "2 Data-source\nThere are a wide variety of way to make data available to OJS:\n\nRead CSV, JSON, SQLite, and more using the FileAttachments API.\nUse the ojs_define() function to make data processed in Python or R available to {ojs} cells.\nMake calls to Web APIs for online services and data stores.",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: code & data"
    ]
  },
  {
    "objectID": "markup/markup-quarto-code.html#examples-files-python-and-rest",
    "href": "markup/markup-quarto-code.html#examples-files-python-and-rest",
    "title": "Quarto Markdown: code & data",
    "section": "3 Examples: files, python and Rest",
    "text": "3 Examples: files, python and Rest\nCode blocks that use braces around the language name (e.g. ```{python}) are executable, and will be run by Quarto during render.\nHere is a simple example:\n\n\nexample-python-code\n\n---\ntitle: \"matplotlib demo\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\n---\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n\n\nexample-python-code\n\n\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\nYou’ll note that there are some special comments at the top of the code block. These are cell level options that make the figure cross-referenceable.\n\nThis document would result in the following rendered output:\n\n\n\npython quarto following rendered output\n\n\nWe’ll explore all of these techniques below.\n\n\n\n\n\n\nFile Attachments\n\n\n\n\n\nFile Attachments Use the FileAttachment function from the standard library to read data from a file. For example, here we read and plot a CSV of NOAA’s Monthly CO2 concentration data from Mauna Loa:\ndata = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true } );\n  return co2data.map(d =&gt; {\n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average);\n    return d;\n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data,\n      { x: \"decimal date\", y: \"average\"},\n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\n\n\n\nPython and R\n\n\n\n\n\nPython and R The data you want to use with OJS might not always be available in raw form. Often you’ll need to read and preprocess the raw data using Python or R. You can perform this preprocessing during document render (in an {r} or {python} code cell) and then make it available to {ojs} cells via the ojs_define() function. Here’s an example. We’ll read the same data into R, do some grouping and summarization, then make it available to OJS using ojs_define:\n#| output: false\n\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %&gt;%\n  group_by(year) %&gt;%\n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n\n\n\n\n\n\n\n\n\nWeb APIs\n\n\n\n\n\nWeb APIs You can use the d3.json() function to read JSON data from web services and data sources. Here we query the GitHub API for data on contributions to the Python pandas package:\nd3 = require('d3')\n\ncontributors = await d3.json(\n  \"https://api.github.com/repos/pandas-dev/pandas/stats/contributors\"\n)\n\ncommits = contributors.map(contributor =&gt; {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: code & data"
    ]
  },
  {
    "objectID": "markup/markup-lang-md.html",
    "href": "markup/markup-lang-md.html",
    "title": "Markdown Markup",
    "section": "",
    "text": "📘 Markdown\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.\nCreated by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.\n\n\nMarkdown Guide getting started\nUsing Markdown is different than using a WYSIWYG editor. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.\nFor example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold). It may take a while to get used to seeing Markdown syntax in your text, especially if you’re accustomed to WYSIWYG applications. The screenshot below shows a Markdown file displayed in the Visual Studio Code text editor.",
    "crumbs": [
      "MarkUp Languages",
      "Markdown Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-md.html#what-is-markdown",
    "href": "markup/markup-lang-md.html#what-is-markdown",
    "title": "Markdown Markup",
    "section": "",
    "text": "📘 Markdown\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.\nCreated by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.\n\n\nMarkdown Guide getting started\nUsing Markdown is different than using a WYSIWYG editor. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.\nFor example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold). It may take a while to get used to seeing Markdown syntax in your text, especially if you’re accustomed to WYSIWYG applications. The screenshot below shows a Markdown file displayed in the Visual Studio Code text editor.",
    "crumbs": [
      "MarkUp Languages",
      "Markdown Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-md.html#how-does-it-work",
    "href": "markup/markup-lang-md.html#how-does-it-work",
    "title": "Markdown Markup",
    "section": "2 How Does it Work?",
    "text": "2 How Does it Work?\nDillinger makes writing in Markdown easy because it hides the stuff happening behind the scenes, but it’s worth exploring how the process works in general.\nWhen you write in Markdown, the text is stored in a plaintext file that has an .md or .markdown extension. But then what? How is your Markdown-formatted file converted into HTML or a print-ready document?\nThe short answer is that you need a Markdown application capable of processing the Markdown file. There are lots of applications available — everything from simple scripts to desktop applications that look like Microsoft Word. Despite their visual differences, all of the applications do the same thing. Like Dillinger, they all convert Markdown-formatted text to HTML so it can be displayed in web browsers.\n\n\n\n\n\n\nMarkdown processor\n\n\n\nMarkdown applications use something called a Markdown processor (also commonly referred to as a “parser” or an “implementation”) to take the Markdown-formatted text and output it to HTML format. At that point, your document can be viewed in a web browser or combined with a style sheet and printed. You can see a visual representation of this process below.\n\n\n\n\n\n\n\n\nMarkdown app\n\n\n\nThe Markdown application and processor are two separate components. For the sake of brevity, I’ve combined them into one element (“Markdown app”) in the figure below. The Markdown Process\n\n\n\n\n\nHow Does it Work?\n\n\nTo summarize, this is a four-part process:\n\nCreate a Markdown file using a text editor or a dedicated Markdown application. The file should have an .md or .markdown extension.\nOpen the Markdown file in a Markdown application.\nUse the Markdown application to convert the Markdown file to an HTML document.\nView the HTML file in a web browser or use the Markdown application to convert it to another file format, like PDF.\n\nFrom your perspective, the process will vary somewhat depending on the application you use. For example, Dillinger essentially combines steps 1-3 into a single, seamless interface — all you have to do is type in the left pane and the rendered output magically appears in the right pane. But if you use other tools, like a text editor with a static website generator, you’ll find that the process is much more visible.",
    "crumbs": [
      "MarkUp Languages",
      "Markdown Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-md.html#markdown-flavours",
    "href": "markup/markup-lang-md.html#markdown-flavours",
    "title": "Markdown Markup",
    "section": "3 Markdown Flavours",
    "text": "3 Markdown Flavours\n\nMarkdown: The original Markdown syntax, developed by John Gruber.\nCommonMark: A standardized and highly-specified variant of Markdown, intended to be more predictable and consistent across implementations.\nGitHub Flavored Markdown: An extension of Markdown with additional features and syntax, used by GitHub for rendering Markdown in its platform.\nGitLab Flavored Markdown: An extension of Markdown with additional features and syntax, used by GitLab for rendering Markdown in its platform.\nReadme: A Markdown-based documentation format with support for features such as table of contents and automatic linking, used by many open-source projects.\nObsidian: A Markdown-based note-taking and organizing tool, with support for linking and organizing notes using graphs and diagrams.",
    "crumbs": [
      "MarkUp Languages",
      "Markdown Markup"
    ]
  },
  {
    "objectID": "markup/markup-quarto-basics.html",
    "href": "markup/markup-quarto-basics.html",
    "title": "Quarto Markdown: basics",
    "section": "",
    "text": "Quarto is a publishing system/engine based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of Pandoc’s Markdown for more in-depth documentation.",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: basics"
    ]
  },
  {
    "objectID": "markup/markup-quarto-basics.html#overview",
    "href": "markup/markup-quarto-basics.html#overview",
    "title": "Quarto Markdown: basics",
    "section": "",
    "text": "Quarto is a publishing system/engine based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of Pandoc’s Markdown for more in-depth documentation.",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: basics"
    ]
  },
  {
    "objectID": "markup/markup-quarto-basics.html#syntax",
    "href": "markup/markup-quarto-basics.html#syntax",
    "title": "Quarto Markdown: basics",
    "section": "2 Syntax",
    "text": "2 Syntax\n\n\n\n\n\n\nMarkdown Basics\n\n\n\n\n\nMarkdown Basics\nText Formatting Headings Links & Images Lists Tables Source Code Equations Diagrams Videos Page Breaks Divs and Spans Callout Blocks Other Blocks\n\n\n\n\n\n\n\n\n\nFigures\n\n\n\n\n\nFigures\nFigure Basics Linked Figures Figure Alignment Alt Text Multiformat Figures Subfigures Figure Panels Figure Divs LaTeX Figures Caption Locations Custom Layouts Computations Block Layout\n\n\n\n\n\n\n\n\n\nTables\n\n\n\n\n\nTables\nMarkdown Tables Column Widths Cross References Caption Location Computations Grid Tables\n\n\n\n\n\n\n\n\n\nDiagrams\n\n\n\n\n\nDiagrams\nMermaid Graphviz Authoring Figures File Include Sizing Mermaid Formats Code Echo Chrome Install\n\n\n\n\n\n\n\n\n\nVideos\n\n\n\n\n\nVideos\nVideo URL Options Revealjs\n\n\n\n\n\n\n\n\n\nCallout Types\n\n\n\n\n\nCallout Types\nMarkdown Syntax Customizing Appearance Format Support\n\n\n\n\n\n\n\n\n\nCross References\n\n\n\n\n\nCross References\nFigures Tables Equations Sections Code Listings Theorems and Proofs References Chapter Numbering Lists Options\n\n\n\n\n\n\n\n\n\nTitle Blocks\n\n\n\n\n\nTitle Blocks\nTitle Banners Date Metadata Labels\n\n\n\n\n\n\n\n\n\nArticle Layout\n\n\n\n\n\nArticle Layout\nMarkdown Syntax Customizing Appearance Format Support\n\n\n\n\n\n\n\n\n\nPresentations\n\n\n\n\n\nPresentations\nCreating Slides Incremental Lists Multiple Columns Learning More",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: basics"
    ]
  },
  {
    "objectID": "markup/markup-lang-intro.html",
    "href": "markup/markup-lang-intro.html",
    "title": "Introduction Markup",
    "section": "",
    "text": "📘 Markup language\nA markup language is a set of symbols or codes that are used to annotate or format text or other data. Markup languages are commonly used to describe the structure and formatting of documents, such as web pages, books, or articles.\n\n\nMarkup languages typically use tags or elements to indicate the structure of the document, such as headings, paragraphs, or lists. They may also include formatting instructions, such as font sizes and colors, or rules for how the document should be displayed. Markup languages are often used in combination with a programming language or other technology to create dynamic and interactive documents.\nExamples of markup languages include:\n\nHTML,\nXML,\nand Markdown\n\nDo no get confuse with a data-oriented language structure used as the input format like:\n\nJSON\nYAML\nApplicarion.properties",
    "crumbs": [
      "MarkUp Languages",
      "Introduction Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-intro.html#introduction",
    "href": "markup/markup-lang-intro.html#introduction",
    "title": "Introduction Markup",
    "section": "",
    "text": "📘 Markup language\nA markup language is a set of symbols or codes that are used to annotate or format text or other data. Markup languages are commonly used to describe the structure and formatting of documents, such as web pages, books, or articles.\n\n\nMarkup languages typically use tags or elements to indicate the structure of the document, such as headings, paragraphs, or lists. They may also include formatting instructions, such as font sizes and colors, or rules for how the document should be displayed. Markup languages are often used in combination with a programming language or other technology to create dynamic and interactive documents.\nExamples of markup languages include:\n\nHTML,\nXML,\nand Markdown\n\nDo no get confuse with a data-oriented language structure used as the input format like:\n\nJSON\nYAML\nApplicarion.properties",
    "crumbs": [
      "MarkUp Languages",
      "Introduction Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-intro.html#html",
    "href": "markup/markup-lang-intro.html#html",
    "title": "Introduction Markup",
    "section": "2 HTML",
    "text": "2 HTML\nHTML (Hypertext Markup Language) is a markup language used to create structured documents and web pages. HTML uses a set of tags and attributes to describe the content and layout of a document, and defines how the content should be displayed by a web browser.\nHTML tags typically take the form of keywords enclosed in angle brackets, such as\n\n&lt;p&gt; for a paragraph, &lt;h1&gt; for a heading, and &lt;img&gt; for an image\n\nHTML attributes provide additional information about the elements, such as the source of an image or the target of a link.\nHTML also defines a set of standard styles, such as font sizes and colors, which can be used to format the content of a document. HTML is the foundation of the modern web, and is used to create the majority of web pages and web-based applications.",
    "crumbs": [
      "MarkUp Languages",
      "Introduction Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-intro.html#markdown",
    "href": "markup/markup-lang-intro.html#markdown",
    "title": "Introduction Markup",
    "section": "3 Markdown",
    "text": "3 Markdown\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. Markdown is a plain text formatting syntax that uses a simple set of conventions to indicate how the text should be formatted.\nThese conventions include the use of characters such as:\n\nasterisks (*)\nand underscores (_) to indicate bold and italic text, respectively,\nand the use of hash symbols (#) to create headings.\n\nMarkdown is designed to be simple and intuitive, and can be easily converted to other formats, such as HTML, for display on the web. Markdown is widely used in blogging, online forums, and software documentation, and is often used as an alternative to more complex formatting languages, such as HTML.",
    "crumbs": [
      "MarkUp Languages",
      "Introduction Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-intro.html#html-and-markdown",
    "href": "markup/markup-lang-intro.html#html-and-markdown",
    "title": "Introduction Markup",
    "section": "4 HTML and Markdown",
    "text": "4 HTML and Markdown\nMarkdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags.\nThe idea is not to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert.\nThe idea for Markdown is to make it easy to read, write, and edit prose. HTML is a publishing format; Markdown is a writing format. Thus, Markdown’s formatting syntax only addresses issues that can be conveyed in plain text. By John Gruber, Markdown",
    "crumbs": [
      "MarkUp Languages",
      "Introduction Markup"
    ]
  },
  {
    "objectID": "markup/markup-quarto-api-rest.html",
    "href": "markup/markup-quarto-api-rest.html",
    "title": "Quarto Markdown: api rest call",
    "section": "",
    "text": "REST (Representational State Transfer)\nRest is an architectural style for building web services.\nIt is based on a client-server model, where a client sends a request to a server and the server sends a response.\nRESTful APIs use HTTP requests to POST (create), PUT (update), GET (read), and DELETE (delete) data.\nA RESTful API is a simple, consistent, and easy-to-use way for applications to communicate with each other over the internet.",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: api rest call"
    ]
  },
  {
    "objectID": "markup/markup-quarto-api-rest.html#what-is-api-rest",
    "href": "markup/markup-quarto-api-rest.html#what-is-api-rest",
    "title": "Quarto Markdown: api rest call",
    "section": "1 What is API Rest",
    "text": "1 What is API Rest\n\n\n\nIn other words, if you want to interact with a computer or system to retrieve information or perform a function, an API helps you communicate what you want to that system so it can understand and fulfill the request.\n\nImage from: Why is RESTful API so popular?\n\nAn API is a set of definitions and protocols for building and integrating application software.\nIt’s sometimes referred to as a contract between an information provider and an information user.\nThis contract (API Rest style) establishing the content required from the consumer (the call) and the content required by the producer (the response).\n\n\n\n\n\n\nNote\n\n\n\nFor example, the API design for a weather service could specify that the user supply a zip code and that the producer reply with a 2-part answer, the first being the high temperature, and the second being the low.\n\n\n\n1.1 API Rest examples\nThere are many examples of APIs, but here are a few common ones:\n\nGoogle Maps API: allows developers to integrate Google Maps functionality into their own applications, such as displaying maps, getting directions, and searching for places.\nTwitter API: allows developers to access and interact with tweets, as well as post new tweets, through their own applications.\nFacebook API: allows developers to access and interact with user data, such as posts, photos, and friends, as well as post new content, through their own applications.\nStripe API: allows developers to integrate Stripe’s payment functionality into their own applications, such as processing payments and managing subscriptions.\nOpenWeather API: allows developers to access current weather data, as well as forecast, historical data and more for any location on Earth.\nNASA API: allows developers to access and interact with various datasets from NASA, such as images, videos, and information about space missions and celestial bodies.\n\n\n\n1.2 Example: open weather map London\nOne example of a public API with a URL that can be used to access data is the OpenWeather API.\nhttp://api.openweathermap.org/data/2.5/weather?q={city name}&appid={your api key}\n\n\nYou can access current weather data for a specific location by making a GET request to the following URL:\nYou need to replace {city name} with the name of the city you want to get weather data for and {your api key} with your own API key, which you can get by signing up for a free account on the OpenWeather website.\nFor example, if you want to get the current weather data for London, you would make a GET request to the following URL:\nhttp://api.openweathermap.org/data/2.5/weather?q=London&appid={your api key}\nIt will return a JSON object with various information such as temperature, humidity, wind, etc.\n\n\n1.3 Example: Nasa Mars\nNASA has several APIs available for developers to access and interact with various datasets, such as images, videos, and information about space missions and celestial bodies.\n\n\n\n\n\n\nTip\n\n\n\nOne example of a NASA API is the NASA Image and Video Library API, which allows you to access NASA’s media assets, including images, videos, and audio files.\n\n\nhttps://images-api.nasa.gov/search?q={your search term}\n\n\nYou can access the NASA Image and Video Library API by making a GET request to the following URL:\nFor example, if you want to search for images of the planet Mars, you would make a GET request to the following URL:\nNasa API for Mars\nThis will return a JSON object with a list of assets, including links to the images and other information such as title and description.\n\n\n1.4 Free Open APIs\n\nBig List of Free Open APIs\nTo create integrations, retpythoncom/collection/list-of-free-apis){.external}\nThis is a collection of different REST APIs that are completley public and do not require any authentication, making it easier for consumers to play with and understand what APIs are all about by seeing the many different ways in which APIs can be used: Public REST APIs\nGet a list of universities in a specified country: Universities List\nFree API – Huge List of Public APIs For Testing [No Key]: Free APIs You Can Use for Testing",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: api rest call"
    ]
  },
  {
    "objectID": "markup/markup-quarto-api-rest.html#quarto-web-api",
    "href": "markup/markup-quarto-api-rest.html#quarto-web-api",
    "title": "Quarto Markdown: api rest call",
    "section": "2 Quarto web API",
    "text": "2 Quarto web API\nWeb APIs Quarto with d3.json and Observable JavaScript\n\nYou can use the d3.json function to read JSON data from web services and data sources.\nWe are using the Observable JavaScript / Explore, analyze, and explain data. As a team to run script cells\n\n\n\nQuarto: Observable JS\nHere we query the GitHub API for data on contributions to the albertprofe wiki:\n\nd3 = require('d3')\n\ncontributors = await d3.json(\n  \"https://api.github.com/repos/albertprofe/wiki/stats/contributors\"\n)\n\ncommits = contributors.map(contributor =&gt; {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})\n\n\nInputs.table(commits, { sort: \"value\", reverse: true })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJavaScript on Observable is almost — but not entirely — vanilla. This is intentional: by building on the native language of the web, Observable is familiar. And you can use the libraries you know and love, such as D3, Lodash, and Apache Arrow.\n\n\nSee the GitHub API example for the full source code.\n\n\n2.1 Screenshoots\n\n2.1.1 Success\n\n\n\nQuarto Api Rest call to github Rest API\n\n\n\n\n2.1.2 Error\n\n\n\nQuarto Api Rest call to github Rest API ERROR",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: api rest call"
    ]
  },
  {
    "objectID": "ifct034po/ifct034pobacklog-sprint.html",
    "href": "ifct034po/ifct034pobacklog-sprint.html",
    "title": "IFCT034PO Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Sprint Backlog"
    ]
  },
  {
    "objectID": "ifct034po/ifct034pobacklog-sprint.html#sprint6-jpa-crudrepository-h2-db-author-book-comments-november",
    "href": "ifct034po/ifct034pobacklog-sprint.html#sprint6-jpa-crudrepository-h2-db-author-book-comments-november",
    "title": "IFCT034PO Sprint Backlog",
    "section": "Sprint#6: JPA CrudRepository & H2-db Author-Book-Comments (November)",
    "text": "Sprint#6: JPA CrudRepository & H2-db Author-Book-Comments (November)\n\n\nBacklog course November 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#6\n22\n06/11/2023\n- monitorBook: JPA @OneToMany, @ManyToOne  - Model: Author, Book, Comment, User, Person  - API Rest: Book-Author\nUML author-book-comment  - @ManyToMany oracle  - Query Methods JPA  - JPA Data  - @OneToMany example author-book  - monitorBook 3.0 code -temptative-\n\n\n\n23\n07/11/2023\n- monitorBook: JPA @OneToMany, @ManyToOne  - Model: Author, Book, Comment, User, Person  - API Rest: Book-Author-Comment\n@oneToMany author-book H2  - Library2: API Rest Author Book @OneToMany CRUD with Swagger  - emotional change: SCRUM  - plan & des &gt; dev & test &gt; prod & devops  - monitorBook 3.1 code -temptative-\n\n\n\n24\n08/11/2023\n- monitorBook: JPA Ihnerence strategies  - Model: Author, Book, Comment, User, Person  - API Rest: Book-Author-User-Person  - linux: clone MV  - How to learn: picnic - understanding - consolidate  Mindset - Macro - Micro  Weekly menu no repetitive\n- monitorBook 3.2 author-book onetomany -unable to find AUTHOR-   - weekly videos\n\n\n\n25\n09/11/2023\n- FCOO03 (1/2)\n- INSERCIÓ LABORAL - SENSIBILITZACIÓ AMBIENTAL  - IGUALTAT DE GENERE  - monitorBook 3.3 authorService, assign author on BookRestController \n\n\n\n26\n10/11/2023\n- FCOO03 (2/2)\n- monitorBook 3.4 book-comment, commetService & Repository, assign comments on BookRestController \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n- &gt; topic planned and done\n- done &gt; topic not done in class (pending)\n++ new topic not planned",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Sprint Backlog"
    ]
  },
  {
    "objectID": "learning/learning-how-auto-evaluate.html",
    "href": "learning/learning-how-auto-evaluate.html",
    "title": "Auto-Evaluate",
    "section": "",
    "text": "Note\n\n\n\nPeer evaluation is an effective collaborative learning strategy that asks students to reflect on contributions made by colleagues in group work.\n\n\n\n\nRelated to self-assessment, peer evaluation encourages students to critically examine the work of peers, and reflect on the meaning of quality work in general, especially when consulting a detailed rubric or checklist as a guide.\n\n\n\nStudents themselves provide feedback to one another, while the instructor focuses on more targeted guidance toward a learning outcome. The key for successful peer feedback is a constructive, honest environment in which students feel safe to share honest, yet helpful criticism. Through peer evaluation, students ultimately learn to better self-assess themselves, a skill which pay dividends throughout their academic and professional career. As additional benefits of peer evaluation, students learn to:\n\napply course concepts and skills to solving problems\ncollaborate with others towards a common goal\nexamine diverse perspectives and ideas\nassume greater responsibility in the learning process\napply (and possibly create) objective criteria to judge the quality of a task or performance\n\nPeer evaluations also resolve the “free rider” problem with group work, that is, the tendency of students to rely on team members to take the initiative in completing group assignments or tasks.\nBy adding an element of accountability and critical review, students will more likely exert effort to ensure a positive review from their peers (and create a good impression).\n\n\n\n\nTo implement an effective peer evaluation, students must fully understand expectations in advance. Set clear goals and expectations for the process.\nA detailed rubric or checklist is critical to ensure evaluations are respectful, constructive and helpful.\nTo avoid emotional complications and hurt feelings, provide examples of effective evaluations/reviews. Be sure to emphasize as required characteristics that evaluations be respectful, constructive and helpful.\nTo encourage self-direction and responsibility, allow students to create their own rubrics or checklists (though you should still approve prior to use as an actual assessment tool).\nAllow students to practice peer evaluations, preferably in the form of a self-assessment or a peer review for a low-stakes activity (e.g. class or online discussion).",
    "crumbs": [
      "Learning",
      "Auto-Evaluate"
    ]
  },
  {
    "objectID": "learning/learning-how-auto-evaluate.html#peer-evaluation-1",
    "href": "learning/learning-how-auto-evaluate.html#peer-evaluation-1",
    "title": "Auto-Evaluate",
    "section": "",
    "text": "Related to self-assessment, peer evaluation encourages students to critically examine the work of peers, and reflect on the meaning of quality work in general, especially when consulting a detailed rubric or checklist as a guide.",
    "crumbs": [
      "Learning",
      "Auto-Evaluate"
    ]
  },
  {
    "objectID": "learning/learning-how-auto-evaluate.html#purpose",
    "href": "learning/learning-how-auto-evaluate.html#purpose",
    "title": "Auto-Evaluate",
    "section": "",
    "text": "Students themselves provide feedback to one another, while the instructor focuses on more targeted guidance toward a learning outcome. The key for successful peer feedback is a constructive, honest environment in which students feel safe to share honest, yet helpful criticism. Through peer evaluation, students ultimately learn to better self-assess themselves, a skill which pay dividends throughout their academic and professional career. As additional benefits of peer evaluation, students learn to:\n\napply course concepts and skills to solving problems\ncollaborate with others towards a common goal\nexamine diverse perspectives and ideas\nassume greater responsibility in the learning process\napply (and possibly create) objective criteria to judge the quality of a task or performance\n\nPeer evaluations also resolve the “free rider” problem with group work, that is, the tendency of students to rely on team members to take the initiative in completing group assignments or tasks.\nBy adding an element of accountability and critical review, students will more likely exert effort to ensure a positive review from their peers (and create a good impression).",
    "crumbs": [
      "Learning",
      "Auto-Evaluate"
    ]
  },
  {
    "objectID": "learning/learning-how-auto-evaluate.html#tips-to-implement-effectively",
    "href": "learning/learning-how-auto-evaluate.html#tips-to-implement-effectively",
    "title": "Auto-Evaluate",
    "section": "",
    "text": "To implement an effective peer evaluation, students must fully understand expectations in advance. Set clear goals and expectations for the process.\nA detailed rubric or checklist is critical to ensure evaluations are respectful, constructive and helpful.\nTo avoid emotional complications and hurt feelings, provide examples of effective evaluations/reviews. Be sure to emphasize as required characteristics that evaluations be respectful, constructive and helpful.\nTo encourage self-direction and responsibility, allow students to create their own rubrics or checklists (though you should still approve prior to use as an actual assessment tool).\nAllow students to practice peer evaluations, preferably in the form of a self-assessment or a peer review for a low-stakes activity (e.g. class or online discussion).",
    "crumbs": [
      "Learning",
      "Auto-Evaluate"
    ]
  },
  {
    "objectID": "learning/learning-listing-table-articles.html",
    "href": "learning/learning-listing-table-articles.html",
    "title": "Articles table",
    "section": "",
    "text": "You can look up the following table listing for additional information:\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nCategories\n\n\nTitle\n\n\nReading Time\n\n\nModified\n\n\n\n\n\n\n\n\n\njavase, static\n\n\nJava SE: static modifier\n\n\n19 min\n\n\nTuesday, November 12, 2024\n\n\n\n\n\n\n\n \n\n\n \n\n\n5 min\n\n\nSunday, November 10, 2024\n\n\n\n\n\n\n\nscrum, concepts, agile-manifesto\n\n\nAgile Manifesto & Values\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, concepts, spacex\n\n\nSCRUM Agile Methodology\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, lab\n\n\nSCRUM Lab#SC00: Timetable\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, lab\n\n\nSCRUM Lab#SC01: Paper Airplanes\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, lab\n\n\nSCRUM Lab#SC02: Spaguetti Challenge\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, lab\n\n\nSCRUM Lab#SC03: Books Project\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, lab\n\n\nSCRUM Lab#SC04: Final Project\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, lab\n\n\nSCRUM Lab#SC05: SCRUM Tests\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-guide\n\n\nSCRUM Guide\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week12, Decision-Making\n\n\nWeek 13: Decision Making and Intuition\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week14, beyond-scrum\n\n\nWeek 14: Beyond SCRUM\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week15, balances\n\n\nWeek 15: Balances, atmosphere and tools\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week2, user-story\n\n\nWeek 2: User stories, Tasks and Habits\n\n\n11 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week4, scrummaster\n\n\nWeek 4: ScrumMaster, how it works\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week5, mindset\n\n\nWeek 5: Mindset, the key to everything\n\n\n17 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week6, product-owner\n\n\nWeek 6: Product Owner, how it works\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week7, mindset, time-management\n\n\nWeek 7: Managing Time & Mind\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week8, specialist\n\n\nWeek 8: Team & the Specialist\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week9, albertusDilemma\n\n\nWeek 9: Albertus’ Dilemma\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-wewek3, communication\n\n\nWeek 3: Delivering Value & Communication\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nspring, MVC\n\n\nSpring MVC\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nspring, MVC\n\n\nSprings Servlets\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nspring, framework\n\n\nSpring Framework\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, components\n\n\nReact JS: Components\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, concepts, hooks, introduction\n\n\nReact JS: Introduction\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, jsx, render\n\n\nReact JS: JSX\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, LAB#RE01\n\n\nLab#RE01-1: API Rest Axios\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, LAB#RE02\n\n\nLab#RE02-1: Router & Hooks\n\n\n19 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE03\n\n\nLab#RE03-2: HighCharts\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE03\n\n\nLab#RE03-3: API Rest Mono\n\n\n18 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE03\n\n\nLab#RE03-4: API Rest Domains\n\n\n21 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE03\n\n\nLab#RE03-5: data management\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE03\n\n\nLab#RE03-1: to-do app\n\n\n16 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE04\n\n\nLab#RE04-2: Spring Boot & ReactJS\n\n\n23 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE04\n\n\nLab#RE04-1: todo & server\n\n\n10 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE05\n\n\nLab#RE05-1: chat & websockets\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE05\n\n\nLab#RE05-2: chat: backend\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE05\n\n\nLab#RE05-3: chat & AWS\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE05\n\n\nLab#RE05-4: chat: test ws AWS\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE05\n\n\nLab#RE05-5: chat & front\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE05\n\n\nLab#RE05-6: chat & ws: front\n\n\n14 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE06\n\n\nLab#RE06-1-PR: create a pull request\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE06\n\n\nLab#RE06-1: healthyFood Restaurant\n\n\n20 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, lab, Lab#RE07\n\n\nLab#RE07-1: traffic lights simulation\n\n\n52 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, project, devtools\n\n\nReact JS: Create a React project\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, props\n\n\nReact JS: props and state\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, resources, readings\n\n\nReactJS Resources\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, virutal-dom, render\n\n\nReact JS: render virtual DOM\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, resources, readings\n\n\nSCRUM Resources\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week1, meetings, impediments\n\n\nWeek 1: Meetings, Impediments and Iterations\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week10, before-scrum\n\n\nWeek 10: Before SCRUM\n\n\n10 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week12, Emotions+Thoughts\n\n\nWeek 12: Emotions and Thoughts\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nscrum, scrum-week9, team-dynamics\n\n\nWeek 11: Team Dynamics\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nCSS, introduction\n\n\nCascade Style Sheet\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nHTML, qmd, quarto\n\n\nMarkdown and HTML working together, good idea?\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, Ubuntu, distro\n\n\nLinux Distros: Ubuntu\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, bash\n\n\nLinux: Bash\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, bash, pipe\n\n\nLinux: pipes\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, bash, su, sudo\n\n\nLinux: su and sudo\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, concepts\n\n\nLinux: basic concepts\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, file-system\n\n\nLinux: File System\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, mint, distro\n\n\nLinux Distros: Mint\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, openSuse, distro\n\n\nLinux Distros: openSuse\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, red-hat-enterprise-linux, distro, rhel\n\n\nLinux Distros: Red Hat Enterprise\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, resources, readings\n\n\nLinux Resources\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, virtual-machines, vmware, virtualbox\n\n\nLinux: Virtual Machines\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, HTML, introduction\n\n\nHTML Markup\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, introduction\n\n\nIntroduction Markup\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, md, introduction\n\n\nMarkdown Markup\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, publish, quarto\n\n\nLab#MD01-1: Create and publish by Quarto\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, publish, quarto, qmd\n\n\nQuarto Markdown: publishing\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, qmd, quarto\n\n\nQuarto Markdown: creating\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, qmd, quarto, cheat-sheet\n\n\nQuarto Markdown: cheat-sheet\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, qmd, quarto, introduction\n\n\nQuarto Markdown: basics\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, qmd, quarto, ojs\n\n\nQuarto Markdown: OJS Cells\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, qmd, quarto, python\n\n\nQuarto Markdown: code & data\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, qmd, quarto, rest, api\n\n\nQuarto Markdown: api rest call\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nmarkup, resources, readings\n\n\nMarkUp Languages Resources\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, async\n\n\nReact JS App: async\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, conditional-render\n\n\nReact JS App: conditional render\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, es6, arrays\n\n\nReact JS ES6: array, data and key\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, es6, arrow\n\n\nReact JS ES6: arrow functions\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, es6, destructuring\n\n\nReact JS ES6: destructuring\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, es6, import-modules\n\n\nReact JS ES6: import modules\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, es6, spread, operator\n\n\nReact JS ES6: spread operator\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, events\n\n\nReact JS App: events\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, hooks, custom\n\n\nReactJS: custom hooks\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, hooks, memo\n\n\nReactJS: useMemo\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, hooks, rules\n\n\nReact JS: Rules of Hooks\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, hooks, useContext\n\n\nReact JS: useContext\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, hooks, useEfect\n\n\nReact JS: useEffect\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, hooks, useReducer\n\n\nReact JS: useReducer\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, hooks, useRef\n\n\nReact JS: useRef\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, hooks, useState\n\n\nReactJS: useState\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, js\n\n\nJavaScript: basics\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, js\n\n\nJavaScript: flux control\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, js\n\n\nJavaScript: functions\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, js\n\n\nJavaScript: objects\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, js\n\n\nJavaScript: variables\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, router\n\n\nReact JS App: router\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nreactjs, styling, css, scss\n\n\nReact JS App: styling\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nw3css, introduction\n\n\nCSS: W3.css\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n \n\n\n \n\n\n \n\n\n \n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, debian, distro\n\n\nLinux Distros: Debian\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, bash\n\n\nLinux Lab#LI04-2: Bash scripts as terminal tool\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, bash, app-distribution\n\n\nLinux Lab#LI04-3: Distribute the terminal app\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, bash, pipe\n\n\nLinux Lab#LI02-1: Export env user with grep and pipe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, bash, user\n\n\nLinux Lab#LI01-3: Adjust user permissions\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, bash, user\n\n\nLinux Lab#LI03-1: Manage users and groups\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, distro\n\n\nLinux Lab#LI01-1: Choose Linux\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, distro, install\n\n\nLinux Lab#LI01-2: Install at least three distributions\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, file-system\n\n\nLinux Lab#LI03-2: Manage files\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, hardware\n\n\nLinux Lab#LI03-4: Manage hardware\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, qtool, bash\n\n\nLinux Lab#LI04-1: Bash scripting, qtool\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, lab, software\n\n\nLinux Lab#LI03-3: Manage software\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlinux, manjaro, distro\n\n\nLinux Distros: Manjaro\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlisting, table\n\n\nBooks table\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nvocabulary\n\n\nGeneral Vocabulary\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nvocabulary, Spring-Boot\n\n\nSpring Boot Vocabulary\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nvocabulary, database\n\n\nDataBase Vocabulary\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nvocabulary, devops\n\n\nDevOps Vocabulary\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nvocabulary, javase\n\n\nJava SE Vocabulay\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nvocabulary, reactjs\n\n\nReactJS Vocabulary\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nvocabulary, scrum\n\n\nSCRUM Vocabulary\n\n\n51 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nvocabulary, web\n\n\nWeb Vocabulary\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout, learning\n\n\nLearning: tips\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout, questions\n\n\nUseful Questions\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout, writing\n\n\nAuto-Evaluate\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout, writing\n\n\nDocument\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout, writing\n\n\nTaking Notes\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout, writing\n\n\nComments\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout, writing\n\n\nWriting\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, composition, factory, JSON\n\n\nLab#SE01-2: Maven/Gradle Person and Account stored in JSON\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, composition, model\n\n\nLab#SE02-1: Movie/Review, Model\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, composition, model\n\n\nLab#SE03-1: Library/Book, Core-Model\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, composition, model\n\n\nLab#SE04-1: healthyFood Restaurant, Core Model\n\n\n18 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, composition, plan\n\n\nLab#SE03-2: Library/Book, Sprint Zero\n\n\n13 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, composition, singleton\n\n\nLab#SE01-1: Maven/Gradle Person and Account\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, inherence\n\n\nLab#SE03-3: Library/Book, Expand Model\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, interativity, console, controller, testing\n\n\nLab#SE02-5: Movie/Review, simulate interactivity by console\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, interativity, coupling, controller\n\n\nLab#SE02-4: Movie/Review, interactivity and coupling\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, manager, static, crud\n\n\nLab#SE02-2: Movie/Review, CRUD Operations\n\n\n10 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, singleton, factory\n\n\nLab#SE02-3: Movie/Review, factory\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlisting, books, reading\n\n\nBooks cards\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nlisting, card\n\n\nArticles cards\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, TDD, JUnit\n\n\nJava SE: JUnit and TDD\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, abstract-factory, design-patterns, concepts\n\n\nAbstract Factory\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, abstraction, oop, concepts\n\n\nJava SE: Abstraction\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, basics, concepts\n\n\nJava Standard Edition: Basics\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, bridge, design-patterns, concepts\n\n\nBridge\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, builder, design-patterns, concepts\n\n\nBuilder\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, class, objects, concepts, oop, paradigm, casting\n\n\nJava SE: Class and Objects\n\n\n13 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, commander, design-patterns, concepts\n\n\nCommander\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, composite, design-patterns, concepts\n\n\nComposite\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, concepts, oop, paradigm\n\n\nJava Standard Edition: Principles\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, decorator, design-patterns, concepts\n\n\nDecorator\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, design-patterns, concepts\n\n\nJava Patterns: Types\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, encapsulation, oop, concepts\n\n\nJava SE: Encapsulation\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, facade, design-patterns, concepts\n\n\nFacade\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, factory, design-patterns, concepts\n\n\nFactory\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, git, github, project, cloud\n\n\nJava SE: Project push GitHub\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, inherence, abstract, interface\n\n\nJava SE: Abstract/Interface\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, inherence, oop, concepts\n\n\nJava SE: Inherence\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, model, composition\n\n\nLab#SE00-2: Maven Clinic\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, model, composition, inherence\n\n\nLab#SE00-1: Maven Person\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, model, composition, inherence\n\n\nLab#SE00-3: Library Model\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lab, model, interface, inherence\n\n\nLab#SE00-4: Abstract/Interface Human\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, lambda, stream, optional\n\n\nJava SE: Java 8\n\n\n11 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, maven, code, project\n\n\nJava SE: Create Maven Project\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, maven, concepts\n\n\nJava SE: Maven\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, microservices, coupling, DDD\n\n\nJava SE: Coupling and DDD\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, observer, design-patterns, concepts\n\n\nObserver\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, package, concepts\n\n\nJava SE: Packages\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, polymorphism, oop, concepts\n\n\nJava SE: Polymorphism\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, resources, readings\n\n\nJava SE Resources\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, scope\n\n\nJava SE: Scope\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, singleton, design-patterns, concepts\n\n\nSingleton\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, state, design-patterns, concepts\n\n\nState\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, strategy, design-patterns, concepts\n\n\nStrategy\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, training, helsinki, mooc\n\n\nJava MOOC Helsinki\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, training, helsinki, mooc\n\n\nJava MOOC Helsinki Syllabus\n\n\n17 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\njavase, uml, design-patterns, concepts\n\n\nJava Patterns: UML\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nifcd0210, backlog\n\n\nIFCD0210 Product Backlog\n\n\n28 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nifcd0210, backlog\n\n\nIFCD0210 Projects Backlog\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nifcd0210, backlog\n\n\nIFCD0210 Sprint Backlog\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nifcd0210, calendar, forecast, timetable\n\n\nIFCD0210 Calendar\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nifcd0210, training\n\n\nIFCD0210 Official Docs\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nifcd0210, training\n\n\nIFCD0210 Deliveries\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nifcd0210, training\n\n\nIFCD0210 Init Mail\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, Docker\n\n\nDocker\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, IntellJIdea, ide\n\n\nIDE: IntellJIdea\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, agile, microservices\n\n\nDevOps: agile and microservices\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, ansible\n\n\nAnsible\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, aws\n\n\nAmazon Web Services AWS\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, digital-ocean\n\n\nDigital Ocean\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, git\n\n\nGit\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, github\n\n\nGit and GitHub 2023 CLI\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, github\n\n\nGitHub\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, github\n\n\nIdea and GitHub 2023\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, immutable\n\n\nImmutable Infrastructure\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, introduction\n\n\nDevOps: Introduction\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, k8s\n\n\nKubernetes k8s\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, lab\n\n\nLab 1: chat App\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, lab\n\n\nLab 5: k8s on Digital Ocean\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, lab\n\n\nLab 6: Spring Boot AWS codecommit\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, lab\n\n\nLab 4: Spring Boot Docker/Jenkins\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, lab\n\n\nLab 2: Spring Boot AWS AEB manually\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, lab\n\n\nLab 3: Spring Boot and AWS S3 publisher\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, lifecycle\n\n\nSoftware Lifecycle\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, nagios\n\n\nNagios\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, API-Rest\n\n\nNetwork: API Rest\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, DNS\n\n\nNetwork: DNS\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, SMTP\n\n\nNetwork: SMTP\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, SOAP\n\n\nNetwork: SOAP\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, UDP\n\n\nNetwork: UDP\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, Websocket\n\n\nNetwork: Websocket\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, gRPC\n\n\nNetwork: gRPC\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, graphQL\n\n\nNetwork: graphQL\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, ping\n\n\nNetwork: Ping\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, protocols\n\n\nNetwork Protocols\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, server-client\n\n\nNetwork: Client-server\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, network, webhook\n\n\nNetwork: webhook\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, networking, basics\n\n\nNetwork: Basics\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, obsidian, quarto, document\n\n\nHow to document: Quarto and Obsidian\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, pipelines\n\n\nJenkins pipelines\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, resources, readings\n\n\nDevOps Resources\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\ndevops, visual-code, ide\n\n\nIDE: Visual Code\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout\n\n\nAbout a developer\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout\n\n\nAbout me\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout\n\n\nAbout this site\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\nabout, images-credit\n\n\nAbout images credit\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n \n\n\nPage Not Found\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Books & Articles",
      "Articles table"
    ]
  },
  {
    "objectID": "learning/learning-how-write-comments.html",
    "href": "learning/learning-how-write-comments.html",
    "title": "Comments",
    "section": "",
    "text": "For each line, block of code, method, class, answer in a DIRECT, CLEAR style, no more than 3/5/10 words these three questions:\n\nWhat does this code do?\nFor what use/need/feature/operation is this code?\nHow does this code work, expression by expression?\n\n\n\n\n// find a comment within movie\n// to test a review: test Movie object creation\n// from movie object get Reviews list position 0 and get comment from Review\nString findMyComment = movie.getReviews().get(0).getComment();",
    "crumbs": [
      "Learning",
      "Comments"
    ]
  },
  {
    "objectID": "learning/learning-how-write-comments.html#overview",
    "href": "learning/learning-how-write-comments.html#overview",
    "title": "Comments",
    "section": "",
    "text": "For each line, block of code, method, class, answer in a DIRECT, CLEAR style, no more than 3/5/10 words these three questions:\n\nWhat does this code do?\nFor what use/need/feature/operation is this code?\nHow does this code work, expression by expression?",
    "crumbs": [
      "Learning",
      "Comments"
    ]
  },
  {
    "objectID": "learning/learning-how-write-comments.html#example",
    "href": "learning/learning-how-write-comments.html#example",
    "title": "Comments",
    "section": "",
    "text": "// find a comment within movie\n// to test a review: test Movie object creation\n// from movie object get Reviews list position 0 and get comment from Review\nString findMyComment = movie.getReviews().get(0).getComment();",
    "crumbs": [
      "Learning",
      "Comments"
    ]
  },
  {
    "objectID": "learning/learning-how-write-comments.html#commit",
    "href": "learning/learning-how-write-comments.html#commit",
    "title": "Comments",
    "section": "2.1 Commit",
    "text": "2.1 Commit\n\n2.1.1 The commit type can include the following:\n\nfeat – a new feature is introduced with the changes\nfix – a bug fix has occurred\nchore – changes that do not relate to a fix or feature and don’t modify source or test files (for example updating dependencies)\nrefactor – refactored code that neither fixes a bug nor adds a feature\ndocs – updates to documentation such as a the README or other markdown files\nstyle – changes that do not affect the meaning of the code, likely related to code formatting such as white-space, missing semi-colons, and so on.\ntest – including new or correcting previous tests\nperf – performance improvements\nci – continuous integration related\nbuild – changes that affect the build system or external dependencies\nrevert – reverts a previous commit\n\n\n\n2.1.2 Style\nAnswer this questions in a DIRECT, CLEAR style, no more than 60 words. No ending in POINT, “.”\n\n\n2.1.3 Example commits\n\n#1 #feat: new css class to restyle\n#12 #chore: minor mistakes typos checked\n#33 #refactor: change components grid and names variables\n\n\n2.1.3.1 add BREAKING CHANGE OR MINOR CHANGE\n\nBREAKING CHANGE: a commit that has a BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in Semantic Versioning). A BREAKING CHANGE can be part of commits of any type.\n\n\n\n\n2.1.4 references\n\nurl: https://semver.org/ title: “Semantic Versioning 2.0.0” description: “Semantic Versioning spec and website” host: semver.org\n\n\nurl: https://commitizen-tools.github.io/commitizen title: “Commitizen” description: “commit rules, semantic version, conventional commits” host: commitizen-tools.github.io favicon: assets/images/favicon.png\n\n\nurl: https://www.conventionalcommits.org/en/v1.0.0/ title: “Conventional Commits” description: “A specification for adding human and machine readable meaning to commit messages” host: www.conventionalcommits.org",
    "crumbs": [
      "Learning",
      "Comments"
    ]
  },
  {
    "objectID": "learning/learning-how-write-comments.html#pull-request",
    "href": "learning/learning-how-write-comments.html#pull-request",
    "title": "Comments",
    "section": "2.2 Pull-request",
    "text": "2.2 Pull-request",
    "crumbs": [
      "Learning",
      "Comments"
    ]
  },
  {
    "objectID": "learning/learning-listing-table-books.html",
    "href": "learning/learning-listing-table-books.html",
    "title": "Books table",
    "section": "",
    "text": "Reading is essential for those who seek to rise above the ordinary. - Jim Rohn\n\n\nYou can look up the following table listing for additional information:\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\nCategories\n\n\n\n\n\n\n\n\n\nWrite Tight\n\n\nWilliam Brohaugh, 2007, Write Tight: Say Exactly What You Mean with Precision and Power\n\n\ncommunication\n\n\n\n\n\n\n\nThinking in Java\n\n\n Eckel Bruce, 2006, Scrum: The Art of Doing Twice the Work in Half the Time\n\n\njava\n\n\n\n\n\n\n\nThe five disfunctions of a team\n\n\nPatrick Lencioni, 2002, The five disfunctions of a team\n\n\nstrategy\n\n\n\n\n\n\n\nThe Bed of Procrustes\n\n\nNassim Nicholas Taleb, 2010, The Bed of Procrustes: Philosophical and Practical Aphorisms (Incerto)\n\n\nassay\n\n\n\n\n\n\n\nThe Black Swan\n\n\nNassim Nicholas Taleb, 2007, The Black Swan: The Impact of the Highly Improbable (Incerto)\n\n\nassay\n\n\n\n\n\n\n\nThe mom test\n\n\nHow to talk to customers & learn if your business is a good idea when everyone is lying to you.\n\n\ncommunication\n\n\n\n\n\n\n\nSystem Design\n\n\nAlex Xu, 2022, System Design: the big archive\n\n\ndesign\n\n\n\n\n\n\n\nSystem Design Interview\n\n\nAlex Xu, 2022, System Design Interview: An insider’s guide\n\n\ndesign\n\n\n\n\n\n\n\nThe Compound Effect\n\n\nDarren Hardy, 2012, The Compound Effect: Jumpstart Your Income, Your Life, Your Success\n\n\nfinance\n\n\n\n\n\n\n\nThe Master and His Emissary\n\n\nIain McGilchrist, 2009, The Master and His Emissary: The Divided Brain and the Making of the Western World\n\n\nneuropsychology\n\n\n\n\n\n\n\nThe Intelligence Trap\n\n\nThe Intelligence Trap, 2019, The Intelligence Trap: Why Smart People Make Dumb Decisions\n\n\npsychology\n\n\n\n\n\n\n\nThe Righteous Mind\n\n\nJonathan Haidt, 2013, The Righteous Mind: Why Good People are Divided by Politics and Religion\n\n\npsychology\n\n\n\n\n\n\n\nThe Art of Agile Development\n\n\nJames Shore, 2007, The Art of Agile Development: Pragmatic guide to agile software development\n\n\nstrategy\n\n\n\n\n\n\n\nScrum\n\n\nJ.J. shuterland, 2014, Scrum: The Art of Doing Twice the Work in Half the Time\n\n\nagile\n\n\n\n\n\n\n\nServant Leader\n\n\nServant Leadership: A Journey Into the Nature of Legitimate Power and Greatness, 1977, Robert K. Greenleaf\n\n\nagile\n\n\n\n\n\n\n\nRange\n\n\nRange: Why Generalists Triumph in a Specialized World, 2023, David Epstein\n\n\nassay\n\n\n\n\n\n\n\nSkin in the Game\n\n\nNassim Nicholas Taleb, 2018, Skin in the Game: Hidden Asymmetries in Daily Life (Incerto)\n\n\nassay\n\n\n\n\n\n\n\nSite Reliability Engineering\n\n\nBetsy Beyer, Chris Jones, Jennifer Petoff and Niall Richard Murphy, 2016, How Google runs production systems\n\n\ndevops\n\n\n\n\n\n\n\nQuarkus Cookbook\n\n\nAlex Soto Bueno, Jason Porter, February 9, 2021, Quarkus Cookbook: Developing Cloud-Native Applications with Java\n\n\njava\n\n\n\n\n\n\n\nQuarkus for Spring Developers\n\n\nEric Deandrea, August 31, 2021, Quarkus for Spring Developers\n\n\njava\n\n\n\n\n\n\n\nStratospheric\n\n\nStratospheric, 2020, From Zero to Production with Spring Boot and AWS: Building Scalable and Resilient Applications\n\n\njava\n\n\n\n\n\n\n\nStolen Focus\n\n\nWhy You Can’t Pay Attention–and How to Think Deeply Again\n\n\nmindset\n\n\n\n\n\n\n\nThe Status Game\n\n\nWill Storr, 2021, The Status Game: On Social Position and How We Use It\n\n\npsychology\n\n\n\n\n\n\n\nThe Relaxation Revolution\n\n\nWilliam Proctor, Herbert Benson, 2010, The Relaxation Revolution: Enhancing Your Personal Health Through the Science and Genetics of Mind Body Healing\n\n\nself-management\n\n\n\n\n\n\n\nPlaying to win\n\n\nRoger Martin, 2014, Playing to Win - How to make strategy work\n\n\nstrategy\n\n\n\n\n\n\n\nModern Java EE Design Patterns\n\n\nMarkus Eisele, 2016, Modern Java EE Design Patterns: Building Scalable Architecture for Sustainable Enterprise Development\n\n\ndesign\n\n\n\n\n\n\n\nMisbehaving\n\n\nMisbehaving: The Making of Behavioral Economics, 2016, Richard H. Thaler\n\n\nfinance\n\n\n\n\n\n\n\nNoise\n\n\nNoise: A Flaw in Human Judgment, Daniel Kahneman, Olivier Sibony, Cass R. Sunstein\n\n\nneuropsychology\n\n\n\n\n\n\n\nNo Rules Rules\n\n\n Reed Hastings, Erin Meyer, 2020, No Rules Rules\n\n\nstudy-case\n\n\n\n\n\n\n\nGetting Things Done\n\n\nDavid Allen, 2015, etting Things Done: The Art of Stress-Free Productivity\n\n\nagile\n\n\n\n\n\n\n\nHow to Measure Anything\n\n\nDouglas W. Hubbard, 2010, How to Measure Anything: Finding the Value of Intangibles in Business\n\n\nagile\n\n\n\n\n\n\n\nFooled by Randomness\n\n\nNassim Nicholas Taleb, 2001, Fooled by Randomness: The Hidden Role of Chance in Life and in the Markets (Incerto)\n\n\nassay\n\n\n\n\n\n\n\nIncerto\n\n\nNicholas Taleb, 2020, Incerto: Navigating Uncertainty and the Four Traps of Success\n\n\nassay\n\n\n\n\n\n\n\nElements of Style\n\n\nStrunk and White, 1918, The Elements of Style\n\n\ncommunication\n\n\n\n\n\n\n\nDesign Patterns\n\n\nErich Gamma, Richard Helm, Ralph Johnson, John Vlissides, 1994, Design Patterns: Elements of Reusable Object-Oriented Software\n\n\ndesign\n\n\n\n\n\n\n\nDive Into DESIGN PATTERNS\n\n\nAlexander Shvets, 2022, Dive Into DESIGN PATTERNS: An ebook on design patterns and the principles behind them\n\n\ndesign\n\n\n\n\n\n\n\nDomain Driven Design\n\n\nEric Evans, 2003, Domain Driven Design: Tackling Complexity in the Heart of Software\n\n\ndesign\n\n\n\n\n\n\n\nDevOps with OpenShift\n\n\nStefano Picozzi, Mike Hepburn & Noel O’Connor, 2017, DevOps with OpenShift: Cloud Deployments Made Easy\n\n\ndevops\n\n\n\n\n\n\n\nExpert One-on-One J2EE™ Design and Development\n\n\nRod Johnson, 2002, Expert One-on-One J2EE™ Design and Development\n\n\njava\n\n\n\n\n\n\n\nMicroservices for Java Developers\n\n\nRafael Benevides, 2019, Microservices for Java Developers: A Hands-On Introduction to Frameworks and Containers - Java Developers\n\n\njava\n\n\n\n\n\n\n\nMindset\n\n\nCarol Dweck, 2006, Mindset: The New Psychology of Success\n\n\nmindset\n\n\n\n\n\n\n\nDescartes’ Error\n\n\nAntonio Damasio, 2006, Descartes’ Error: Emotion, Reason, and the Human Brain\n\n\nneuroscience\n\n\n\n\n\n\n\nExecution\n\n\nLarry Bossidy, Ram Charan,Charles Burck (with), 2006, Execution: The Discipline of Getting Things Done\n\n\nstrategy\n\n\n\n\n\n\n\nAntifragile\n\n\nNassim Nicholas Taleb, 2012, Antifragile: Things That Gain from Disorder (Incerto)\n\n\nassay\n\n\n\n\n\n\n\nChimpanzee Politics\n\n\nFrans de Waal, 1982, Chimpanzee Politics: Power and Sex among Apes\n\n\nassay\n\n\n\n\n\n\n\nConsilience\n\n\nEdward O. Wilson, 1999, Consilience: The Unity of Knowledge\n\n\nassay\n\n\n\n\n\n\n\nThe Communication Book\n\n\nMikal Nielsen, 2018, The Communication Book: 44 Ideas for Better Conversations Every Day\n\n\ncommunication\n\n\n\n\n\n\n\nData Science at the Command Line\n\n\nJeroen Janssens, 2014, Data Science at the Command Line: Facing the Future with Time-Tested Tools\n\n\ndevops\n\n\n\n\n\n\n\nAwekenings\n\n\nOliver Sacks, 1973, Awekenings\n\n\nneuropsychology\n\n\n\n\n\n\n\nBrain Energy\n\n\nBrain Energy: A Revolutionary Breakthrough in Understanding Mental Health–and Improving Treatment for Anxiety, Depression, OCD, PTSD, and More, 2023, Christopher M. Palmer\n\n\nneuropsychology\n\n\n\n\n\n\n\nC\n\n\nDennis Ritchie, 1978, C: A Programming Language\n\n\nprogramming\n\n\n\n\n\n\n\nAtomic Habits\n\n\nJames Clear, 2016, Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones\n\n\nself-management\n\n\n\n\n\n\n\nBurnout\n\n\nHerbert Freudenberger, 1980, Burnout: The High Cost of High Achievement\n\n\nself-management\n\n\n\n\n\n\n\nThe Buddha and the Badass\n\n\nVishen Lakhiani, 2020, The Buddha and the Badass: The Secret Spiritual Art of Succeeding at Work\n\n\nstrategy\n\n\n\n\n\n\n\nThe Second Brain\n\n\nMichael Gershon, 2020, The Second Brain: A Groundbreaking New Understanding Of Nervous Disorders Of The Stomach And Intestine\n\n\nneuroscience\n\n\n\n\n\n\n\nThe Rudest Book Ever\n\n\nShwetabh Gangwar. 2019, The Rudest Book Ever\n\n\nstrategy\n\n\n\n\n\n\n\nYour Next Five Moves\n\n\nPatrick Bet-David, 2020, Your Next Five Moves: Master the Art of Business Strategy\n\n\nstrategy\n\n\n\n\n\n\n\nThe Psychology of Money\n\n\nMorgan Housel, 2020, The Psychology of Money: Timeless lessons on wealth, greed, and happiness\n\n\nfinance\n\n\n\n\n\n\n\nThe Joy of Living\n\n\nYongey Mingyur Rinpoche, 2008, The Joy of Living: Unlocking the Secret and Science of Happiness\n\n\nmindset\n\n\n\n\n\n\n\nThe Matter With Things\n\n\nIan McGilchrist, 2019, The Matter With Things: Our Brains, Our Delusions, and the Unmaking of the World\n\n\nneuropsychology\n\n\n\n\n\n\n\nThe Molecule of More\n\n\nThe Molecule of More: How a Single Chemical in Your Brain Drives Love, Sex, and Creativity―and Will Determine the Fate of the Human\n\n\nneuroscience\n\n\n\n\n\n\n\nThe Linux command line\n\n\nWilliam Shotts, The Linux command line\n\n\nprogramming\n\n\n\n\n\n\n\nThe Creative Habit\n\n\nTwyla Tharp, 2007, The Creative Habit: Learn It and Use It for Life\n\n\nself-management\n\n\n\n\n\n\n\nThe Changing World Order\n\n\nRay Dalio, 2021, The Changing World Order: Why Nations Succeed and Fail\n\n\nfinance\n\n\n\n\n\n\n\nSwimming with Sharks\n\n\nJoris Luyendijk, 2015, Swimming with Sharks: My Journey into the World of the Bankers\n\n\nfinance\n\n\n\n\n\n\n\nMind Management Not Time Management\n\n\nDavid Kadavy, 2020, Mind Management Not Time Management: A Guide to Improving Your Productivity and Happiness\n\n\nagile\n\n\n\n\n\n\n\nKubernetes Native Microservices\n\n\nJohn Clingan and Ken Finnigan, 2021, Kubernetes Native Microservices with Quarkus and MicroProfile\n\n\ndevops\n\n\n\n\n\n\n\nMy Life as Quant\n\n\nEmanuel Derman, 2007, My life as a quant \n\n\nfinance\n\n\n\n\n\n\n\nMicroservices Patterns\n\n\nChris Richardson, 2020, Microservices Patterns: With examples in Java\n\n\njava\n\n\n\n\n\n\n\nMaps of Meaning\n\n\nJordan B. Peterson, 1999, Maps of Meaning: The Architecture of Belief\n\n\nneuropsychology\n\n\n\n\n\n\n\nMy Stroke of Insight\n\n\nJill Bolte Taylor, 2009, My Stroke of Insight: A Brain Scientist’s Personal Journey\n\n\nneuroscience\n\n\n\n\n\n\n\nMan’s Search for Meaning\n\n\nViktor E. Frank, 1947, Man’s Search for Meaning\n\n\npsychology\n\n\n\n\n\n\n\nDon’t Believe Everything You Think\n\n\nJoseph Nguyen, 2022, Don’t Believe Everything You Think: Why Your Thinking Is The Beginning & End Of Suffering (Beyond Suffering)\n\n\nmindset\n\n\n\n\n\n\n\nHow to Create a Mind\n\n\nRay Kurzweil, 2013, How to Create a Mind: The Secret of Human Thought Revealed\n\n\nneuroscience\n\n\n\n\n\n\n\nIkigai\n\n\nHéctor García and Francesc Miralles, 2017, Ikigai: The Japanese Secret to a Long and Happy Life\n\n\nself-management\n\n\n\n\n\n\n\nHow to Fail at Almost Everything and Still Win Big\n\n\nScott Adams, 2013, How to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life\n\n\nstrategy\n\n\n\n\n\n\n\nDesànim de lucre\n\n\nAbel Cutillas, 2022, Desànim de lucre\n\n\nassay\n\n\n\n\n\n\n\nConsciousness Explained\n\n\nDaniel C. Dennett, 1991, Consciousness Explained\n\n\nneuroscience\n\n\n\n\n\n\n\nCollective Illusions\n\n\nTodd Rose, 2022, Collective Illusions: Conformity, Complicity, and the Science of Why We Make Bad Decisions\n\n\npsychology\n\n\n\n\n\n\n\nClean Code\n\n\nRobert C. Martin, 2008, Clean Code: A Handbook of Agile Software Craftsmanship\n\n\nprogramming\n\n\n\n\n\n\n\nBuilding a Second Brain\n\n\nTiago Forte, 2022, Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential\n\n\nself-management\n\n\n\n\n\n\n\nBlitzscaling\n\n\nBlitzscaling: The Lightning-Fast Path to Building Massively Valuable companies, 2022, Reid Hoffman and Chris Yeh\n\n\nstrategy\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Books & Articles",
      "Books table"
    ]
  },
  {
    "objectID": "learning/learning-how-writing.html",
    "href": "learning/learning-how-writing.html",
    "title": "Writing",
    "section": "",
    "text": "William Strunk and E.B. White’s short and famous book, The Elements of Style.\n\nRule 17\nA sentence should contain no unnecessary words, a paragraph no unnecessary sentences, for the same reason that a drawing should have no unnecessary lines and a machine no unnecessary parts.\nThis requires not that the writer make all his sentences short, or that he avoid all details and treat his subjects only in outline, but that every word tell.",
    "crumbs": [
      "Learning",
      "Writing"
    ]
  },
  {
    "objectID": "learning/learning-how-writing.html#the-elements-of-style",
    "href": "learning/learning-how-writing.html#the-elements-of-style",
    "title": "Writing",
    "section": "",
    "text": "William Strunk and E.B. White’s short and famous book, The Elements of Style.\n\nRule 17\nA sentence should contain no unnecessary words, a paragraph no unnecessary sentences, for the same reason that a drawing should have no unnecessary lines and a machine no unnecessary parts.\nThis requires not that the writer make all his sentences short, or that he avoid all details and treat his subjects only in outline, but that every word tell.",
    "crumbs": [
      "Learning",
      "Writing"
    ]
  },
  {
    "objectID": "learning/learning-how-writing.html#making-writing-more-varied",
    "href": "learning/learning-how-writing.html#making-writing-more-varied",
    "title": "Writing",
    "section": "2 Making writing more varied",
    "text": "2 Making writing more varied\n\n\n\nMaking writing more varied\n\n\n\nMaking writing more varied\nThe Elements of Style\n\n\n2.1 Composition\n\nDesign - choose a structure in advance, when planning what to write, and hold onto it.\n\n\nParagraphs - the primary compositional unit of writing. Each paragraph should be about an individual topic or speech. Begin paragraphs with a sentence that gives the topic or helps with the transition. Break paragraphs apart if it helps the reader, not just for the hell of it.\n\n‘After the paragraph has been written, examine it to see whether division will improve it.’ (Page 32)\n\nActive voice - it’s much better to use the active voice in most cases. E.g.:\n\n\n‘A report was prepared,’ is not as good as;\n‘He prepared a report.’\n\n\nNot - say what things are. Don’t waste your time saying what they are not.\n\n\nBe definite - do not dance around the truth express it in concrete terms.\n\n\nOmit needless words - ‘this is a subject that’ can better be written as ‘this subject’.\n\n\nSummaries and Tenses - in a summary, or anywhere really, pick a tense and stick to it, otherwise you’ll confuse the reader.\n\n\nEmphasis - put the word or words you want to emphasise at the end of a sentence",
    "crumbs": [
      "Learning",
      "Writing"
    ]
  },
  {
    "objectID": "learning/learning-how-writing.html#making-a-proper-cv",
    "href": "learning/learning-how-writing.html#making-a-proper-cv",
    "title": "Writing",
    "section": "3 Making a proper CV",
    "text": "3 Making a proper CV\n\n3.1 GitHub resources\n\nQuarto-cv Format\nCreate a CV with Quarto\nmarkdown-cv\nmarkdown-cv github to fork\n\n\n\nMarkdown\nLINKS: Markdown supports two style of links: inline and reference. In both styles, the link text is delimited by [square brackets].\n\n\n\n3.2 CV examples\n\nCV-examples-1\nCV-examples-2\nCV-examples-3\nCV-examples-4\nCV-examples-5\nCV-examples-6\n\n\n\n3.3 Crafting Your CV with Authenticity, Clarity, and Value\nBy following these principles, you can create an authentic, clear, and compelling CV that effectively communicates your value proposition to potential employers.\nAuthenticity\n\nBe genuine in portraying yourself: reflect your professional path.\nUse language that reflects your personality and experiences truthfully.\nAvoid overused buzzwords, emotional lenguage or exaggerated claims.\nHighlight your real strengths, tasks done, and achievements.\n\nAction Verbs\n\nRecommend using action verbs that reflect executive, planning, revisioning, etc.\nExamples include: orchestrated, spearheaded, devised, formulated, strategized, reimagined, restructured, colaborated, created, designed.\nIt should sign to participate into Agile teams.\n\nClarity & Vocabulary\n\nKeep language simple and concise.\nUse active voice and straightforward sentences.\nAvoid jargon or overly technical terms unless necessary common tech vocabulary.\nClearly communicate skills, experiences, and accomplishments.\n\nValue\n\nEmphasize quantifiable achievements.\nFocus on meeting targets, increasing efficiency, or solving specific problems.\nUse action verbs and concrete examples to demonstrate impact.\n\nTailoring\n\nCustomize CV for each job application.\nHighlight most relevant skills and experiences.\nAlign CV with company values and role requirements.\n\nStorytelling\n\nTell a compelling career journey.\nShowcase key moments, challenges overcome, and lessons learned.\nConnect with recruiters on a deeper level.\n\nProofreading\n\nEnsure CV is error-free.\nDouble-check grammar, punctuation, and formatting.\nSeek feedback from trusted sources.\n\nHonesty\n\nBe transparent about skills and experiences.\nHighlight genuine strengths.\nPrepare to discuss areas for growth or development.",
    "crumbs": [
      "Learning",
      "Writing"
    ]
  },
  {
    "objectID": "learning/learning-how-take-notes.html",
    "href": "learning/learning-how-take-notes.html",
    "title": "Taking Notes",
    "section": "",
    "text": "Cornell Note Taking — The Best Way To Take Notes Explained\n\n\n\nCornell way\n\n\n\nCornell note-taking is a popular note-taking method for taking, organizing, and summarizing notes. This method typically results in better overall comprehension.\nThis note-taking method was invented by Professor Walter Paul of Cornell University in the 1950s.\n\n\n\nIt requires very little preparation which makes it ideal for note-taking in class. The page is divided into 4 — or sometimes only 3 — different sections:\n\nOne block at the top of the page\nTwo columns\nOne block at the bottom of the page",
    "crumbs": [
      "Learning",
      "Taking Notes"
    ]
  },
  {
    "objectID": "learning/learning-how-take-notes.html#what-are-cornell-notes",
    "href": "learning/learning-how-take-notes.html#what-are-cornell-notes",
    "title": "Taking Notes",
    "section": "",
    "text": "Cornell note-taking is a popular note-taking method for taking, organizing, and summarizing notes. This method typically results in better overall comprehension.\nThis note-taking method was invented by Professor Walter Paul of Cornell University in the 1950s.",
    "crumbs": [
      "Learning",
      "Taking Notes"
    ]
  },
  {
    "objectID": "learning/learning-how-take-notes.html#how-to-take-cornell-notes",
    "href": "learning/learning-how-take-notes.html#how-to-take-cornell-notes",
    "title": "Taking Notes",
    "section": "",
    "text": "It requires very little preparation which makes it ideal for note-taking in class. The page is divided into 4 — or sometimes only 3 — different sections:\n\nOne block at the top of the page\nTwo columns\nOne block at the bottom of the page",
    "crumbs": [
      "Learning",
      "Taking Notes"
    ]
  },
  {
    "objectID": "learning/learning-how-take-notes.html#structural-organization",
    "href": "learning/learning-how-take-notes.html#structural-organization",
    "title": "Taking Notes",
    "section": "2.1 Structural Organization",
    "text": "2.1 Structural Organization\n\nChoose a dedicated notebook or digital tool for each class.\nUse headers, subheadings, and consistent formatting for a clear and organized structure.\nDate each entry to maintain a chronological record and ease future reference.",
    "crumbs": [
      "Learning",
      "Taking Notes"
    ]
  },
  {
    "objectID": "learning/learning-how-take-notes.html#active-engagement",
    "href": "learning/learning-how-take-notes.html#active-engagement",
    "title": "Taking Notes",
    "section": "2.2 Active Engagement",
    "text": "2.2 Active Engagement\n\nListen actively during lectures, focusing on understanding concepts rather than transcribing verbatim.\nCondense information into keywords and brief phrases to capture essential points.\nUtilize abbreviations intelligently to streamline note-taking without sacrificing clarity.",
    "crumbs": [
      "Learning",
      "Taking Notes"
    ]
  },
  {
    "objectID": "learning/learning-how-take-notes.html#enhanced-retention-techniques",
    "href": "learning/learning-how-take-notes.html#enhanced-retention-techniques",
    "title": "Taking Notes",
    "section": "2.3 Enhanced Retention Techniques",
    "text": "2.3 Enhanced Retention Techniques\n\nIncorporate visual aids like diagrams and charts to complement textual information.\nRegularly review and reinforce your notes, converting headings into questions for effective self-quizzing.\nExperiment with color-coded highlighting to emphasize key points and facilitate quicker review.",
    "crumbs": [
      "Learning",
      "Taking Notes"
    ]
  },
  {
    "objectID": "learning/learning-how-take-notes.html#networked-core-knowledge",
    "href": "learning/learning-how-take-notes.html#networked-core-knowledge",
    "title": "Taking Notes",
    "section": "2.4 Networked Core Knowledge",
    "text": "2.4 Networked Core Knowledge\n\nEnsure that new knowledge forms cnonections with existing core concepts.\nCultivate a well-networked core knowledge base to enhance overall understanding.\nEmphasize relationships between topics to create a more interconnected and comprehensive learning experience.",
    "crumbs": [
      "Learning",
      "Taking Notes"
    ]
  },
  {
    "objectID": "learning/learning-vocab-scrum.html",
    "href": "learning/learning-vocab-scrum.html",
    "title": "SCRUM Vocabulary",
    "section": "",
    "text": "Technical terms and definitions",
    "crumbs": [
      "Vocabulary",
      "SCRUM Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-scrum.html#vocabulary",
    "href": "learning/learning-vocab-scrum.html#vocabulary",
    "title": "SCRUM Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\nCore SCRUM vocabulary\n\nSCRUM vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\niterate\nRepeat a process with improvements and a certain time-box\n\n\nsprint\nShort, time-boxed iterations in Scrum, usually 2-4 weeks\n\n\nsprint goal\nA clear objective for the sprint to achieve\n\n\nsprint backlog\nA prioritized list of items to be worked on during the sprint\n\n\nplanning poker\nA consensus-based estimation technique used in Scrum with this serie to weight tasks: 1, 2, 3, 5, 8, 13, 21\n\n\nscrum master\nA facilitator who ensures the team adheres to Scrum principles, link to company\n\n\nproduct owner\nA person responsible for the product backlog and its priorities, link to client\n\n\nprinciples\nTransparency, Inspection, Adaptation, and Delivery\n\n\nbeyond scrum\nScaled Agile Framework (SAFe), LeSS, Nexus\n\n\nagile\nA methodology for software development that values flexibility and collaboration\n\n\nuser story\nA description of a feature or requirement from the perspective of the end-user",
    "crumbs": [
      "Vocabulary",
      "SCRUM Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-scrum.html#glossary-of-scrum-terms",
    "href": "learning/learning-vocab-scrum.html#glossary-of-scrum-terms",
    "title": "SCRUM Vocabulary",
    "section": "2 Glossary of Scrum Terms",
    "text": "2 Glossary of Scrum Terms\n\nScrum Glossary\n\nThis glossary is meant to represent an overview of Scrum-related terms.\nSome of the mentioned terms are not mandatory in Scrum, but have been added because they are commonly used in Scrum.\nTo learn more about the Scrum framework, to identify which of these terms are required elements of Scrum and to understand how the mentioned elements are connected, we highly recommend that you reference the Scrum Guide™.\n\n\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nBurn-down Chart\nA chart which shows the amount of work which is thought to remain in a backlog. Time is shown on the horizontal axis and work remaining on the vertical axis. As time progresses and items are drawn from the backlog and completed, a plot line showing work remaining may be expected to fall. The amount of work may be assessed in any of several ways such as user story points or task hours. Work remaining in Sprint Backlogs and Product Backlogs may be communicated by means of a burn-down chart. See also: Burnup Chart\n\n\nBurn-up Chart\nA chart which shows the amount of work which has been completed. Time is shown on the horizontal axis and work completed on the vertical axis. As time progresses and items are drawn from the backlog and completed, a plot line showing the work done may be expected to rise. The amount of work may be assessed in any of several ways such as user story points or task hours. The amount of work considered to be in-scope may also be plotted as a line; the burn-up can be expected to approach this line as work is completed.\n\n\nCoherent/Coherence\nThe quality of the relationship between certain Product Backlog items which may make them worthy of consideration as a whole. See also: Sprint Goal.\n\n\nDaily Scrum\nScrum Event that is a 15-minute time-boxed event held each day for the Developers. The Daily Scrum is held every day of the Sprint. At it, the Developers plan work for the next 24 hours. This optimizes team collaboration and performance by inspecting the work since the last Daily Scrum and forecasting upcoming Sprint work. The Daily Scrum is held at the same time and place each day to reduce complexity.\n\n\nDefinition of Done\nA formal description of the state of the Increment when it meets the quality measures required for the product. The moment a Product Backlog item meets the Definition of Done, an Increment is born. The Definition of Done creates transparency by providing everyone a shared understanding of what work was completed as part of the Increment. If a Product Backlog item does not meet the Definition of Done, it cannot be released or even presented at the Sprint Review.\n\n\nDeveloper\nAny member of a Scrum Team, that is committed to creating any aspect of a usable Increment each Sprint regardless of technical, functional or other specialty.\n\n\nEmergence\nThe process of the coming into existence or prominence of new facts or new knowledge of a fact, or knowledge of a fact becoming visible unexpectedly.\n\n\nEmpiricism\nThe philosophy that all knowledge originates in experience and observations. It’s a cornerstone of the scientific method and underlies much of modern science and medicine. In the context of Scrum, empiricism refers to the idea that solving complex problems, or doing complex work, can only be done using an exploratory process rather than relying on predetermined plans.\n\n\nEngineering standards\nA shared set of development and technology standards that Developers apply to create releasable Increments of software.\n\n\nForecast (of functionality)\nThe selection of items from the Product Backlog Developers deem feasible for implementation in a Sprint.\n\n\nIncrement\nScrum Artifact that defines the complete and valuable work produced by the Developers during a Sprint. The sum of all Increments forms a product.\n\n\nProduct Backlog\nA Scrum Artifact that consists of an ordered list of the work to be done in order to create, maintain and sustain a product. Managed by the Product Owner.\n\n\nProduct Backlog refinement\nThe activity in a Sprint through which the Product Owner and the Developers add granularity to the Product Backlog.\n\n\nProduct Owner\nRole in Scrum accountable for maximizing the value of a product, primarily by incrementally managing and expressing business and functional expectations for a product to the Developers.\n\n\nProduct Goal\nThe Product Goal describes a future state of the product which can serve as a target for the Scrum Team to plan against. The Product Goal is in the Product Backlog. The rest of the Product Backlog emerges to define “what” will fulfill the Product Goal.\n\n\nReady\nA shared understanding by the Product Owner and the Developers regarding the preferred level of description of Product Backlog items introduced at Sprint Planning.\n\n\nRefinement\nSee Product Backlog Refinement\n\n\nScrum\nScrum is a lightweight framework that helps people, teams, and organizations generate value through adaptive solutions for complex problems as defined in the Scrum GuideTM.\n\n\nScrum Board\nA physical board to visualize information for and by the Scrum Team, often used to manage Sprint Backlog. Scrum boards are an optional implementation within Scrum to make information visible.\n\n\nScrum Guide™\nThe definition of Scrum, written and provided by Ken Schwaber and Jeff Sutherland, co-creators of Scrum. This definition consists of Scrum’s accountabilities, events, artifacts, and the rules that bind them together.\n\n\nScrum Master\nRole within a Scrum Team accountable for guiding, coaching, teaching and assisting a Scrum Team and its environments in a proper understanding and use of Scrum.\n\n\nScrum Team\nA self-managing team consisting of one Scrum Master, one Product Owner, and Developers.\n\n\nScrum Values\nA set of fundamental values and qualities underpinning the Scrum framework; commitment, focus, openness, respect, and courage.\n\n\nSelf-Managing\nScrum Teams are cross-functional, meaning the members have all the skills necessary to create value each Sprint. They are also self-managing, meaning they internally decide who does what, when, and how.\n\n\nSprint\nScrum Event that is time-boxed to one month or less, that serves as a container for the other Scrum events and activities. Sprints are done consecutively, without intermediate gaps.\n\n\nSprint Backlog\nScrum Artifact that provides an overview of the development work to realize a Sprint’s goal, typically a forecast of functionality and the work needed to deliver that functionality. Managed by the Developers.\n\n\nSprint Goal\nA short expression of the purpose of a Sprint, often a business problem that is addressed. Functionality might be adjusted during the Sprint to achieve the Sprint Goal.\n\n\nSprint Planning\nScrum Event that is time-boxed to 8 hours, or less, to start a Sprint. It serves for the Scrum Team to inspect the work from the Product Backlog that’s most valuable to be done next and design that work into Sprint backlog.\n\n\nSprint Retrospective\nScrum Event that is set to a time-box of 3 hours, or less, to end a Sprint. It serves for the Scrum Team to inspect the past Sprint and plan for improvements to be enacted during future Sprints.\n\n\nSprint Review\nScrum Event that is set to a time-boxed of 4 hours, or less, to conclude the development work of a Sprint. It serves for the Scrum Team and the stakeholders to inspect the Increment of product resulting from the Sprint, assess the impact of the work performed on overall progress toward the Product Goal and update the Product backlog to maximize the value of the next period.\n\n\nStakeholder\nA person external to the Scrum Team with a specific interest in and knowledge of a product that is required for incremental discovery. Represented by the Product Owner and actively engaged with the Scrum Team at Sprint Review.\n\n\nTechnical Debt\nThe typically unpredictable overhead of maintaining the product, often caused by less than ideal design decisions, contributing to the total cost of ownership. May exist unintentionally in the Increment or introduced purposefully to realize value earlier.\n\n\nValues\nWhen the values of commitment, courage, focus, openness, and respect are embodied and lived by the Scrum Team, the Scrum pillars of transparency, inspection, and adaptation come to life and build trust for everyone. The Scrum Team members learn and explore those values as they work with the Scrum events, roles, and artifacts. Download the Scrum Values Poster\n\n\nVelocity\nAn optional, but often used, indication of the amount of Product Backlog turned into an Increment of product during a Sprint by a Scrum Team, tracked by the Developers for use within the Scrum Team.",
    "crumbs": [
      "Vocabulary",
      "SCRUM Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-java-se.html",
    "href": "learning/learning-vocab-java-se.html",
    "title": "Java SE Vocabulay",
    "section": "",
    "text": "Technical terms and definitions",
    "crumbs": [
      "Vocabulary",
      "Java SE Vocabulay"
    ]
  },
  {
    "objectID": "learning/learning-vocab-java-se.html#vocabulary",
    "href": "learning/learning-vocab-java-se.html#vocabulary",
    "title": "Java SE Vocabulay",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nJava SE vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\ncomments\nA multi-line comment begins with /and ends with/, and may span multiple lines. An end-of-line (single-line) comment begins with // and lasts till the end of the current line. Comments are NOT executable statements and are ignored by the compiler. But they provide useful explanation and documentation. I strongly suggest that you write comments liberally to explain your thought and logic.\n\n\nstatement\nA programming statement performs a single piece of programming action. It is terminated by a semi-colon (;), just like an English sentence is ended with a period, as in Lines 6.\n\n\nblock\nA block is a group of programming statements enclosed by a pair of braces {}. This group of statements is treated as one single unit. There are two blocks in the above program. One contains the body of the class Hello. The other contains the body of the main() method. There is no need to put a semi-colon after the closing brace.\n\n\nwhitespaces\nBlank, tab, and newline are collectively called whitespace. Extra whitespaces are ignored, i.e., only one whitespace is needed to separate the tokens. Nonetheless, extra whitespaces improve the readability, and I strongly suggest you use extra spaces and newlines to improve the readability of your code.\n\n\ncase sensitivity\nJava is case sensitive - a ROSE is NOT a Rose, and is NOT a rose. The filename, which is the same as the class name, is also case-sensitive.\n\n\njava se\nA platform for developing and running Java apps.\n\n\nDesign Patterns\nReusable solutions to common software challenges.\n\n\njava OOP\nObject-oriented programming in the Java language.\n\n\njava object\nInstances of classes in the Java programming lang.\n\n\nCoupling\nDegree of dependency between different components.",
    "crumbs": [
      "Vocabulary",
      "Java SE Vocabulay"
    ]
  },
  {
    "objectID": "learning/learning-how-document.html",
    "href": "learning/learning-how-document.html",
    "title": "Document",
    "section": "",
    "text": "Dilbert, by Scott Adams",
    "crumbs": [
      "Learning",
      "Document"
    ]
  },
  {
    "objectID": "learning/learning-how-document.html#write",
    "href": "learning/learning-how-document.html#write",
    "title": "Document",
    "section": "1 Write",
    "text": "1 Write\nBefore starting, write.",
    "crumbs": [
      "Learning",
      "Document"
    ]
  },
  {
    "objectID": "learning/learning-how-document.html#some-ideas-about-documentation",
    "href": "learning/learning-how-document.html#some-ideas-about-documentation",
    "title": "Document",
    "section": "2 Some ideas about documentation",
    "text": "2 Some ideas about documentation\n\n2.1 Start\nStart: always start. No matter what. Start small, if necessary. Start bad, if necessary. Start in a piece of paper, if necessary. But start.\n\n\n2.2 Document is paramount\nGood documentation is key: always apply pareto. Good documentation is the basis for everything: learning, coding, communicating and growing. No make a mistake: document is paramout.\n\n\n2.3 Make documenting easy\nChoose the right documentation tools: quarto\n\n\n2.4 It is an habit\nIt is an habit: make it a part of your culture, part of your code, part of your habits. So code and document. Document and code:\n\nTiming: learn the when. Document the right things at the right time is very relevant: it allow you to get in the documenting flow.\nWhen you hare happy with a nice solution: explain it to yourserlf and document.\nWhen you think it is a relevant knowledge: explain it to yourserlf and document.\nExplain the decision-making to get to that solution: explain the why. And how do you get there.\nRegarding that solution, that note, that writing with your context. Remember: Lateralization. Iterate.\nKeep it simple",
    "crumbs": [
      "Learning",
      "Document"
    ]
  },
  {
    "objectID": "learning/learning-listing-card-articles.html",
    "href": "learning/learning-listing-card-articles.html",
    "title": "Articles cards",
    "section": "",
    "text": "You can look up the following card listing for additional information:\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Categories\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nJava SE: static modifier\n\n\nJava Fundamentals\n\n\n\njavase\n\n\nstatic\n\n\n\nWhat is the static modifier in Java\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n19 min\n\n\nTuesday, November 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5 min\n\n\nSunday, November 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAgile Manifesto & Values\n\n\n12 Principles Agile Manifesto\n\n\n\nscrum\n\n\nconcepts\n\n\nagile-manifesto\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Agile Methodology\n\n\nSCRUM\n\n\n\nscrum\n\n\nconcepts\n\n\nspacex\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Lab#SC00: Timetable\n\n\nLab\n\n\n\nscrum\n\n\nlab\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Lab#SC01: Paper Airplanes\n\n\nLab\n\n\n\nscrum\n\n\nlab\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Lab#SC02: Spaguetti Challenge\n\n\nLab\n\n\n\nscrum\n\n\nlab\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Lab#SC03: Books Project\n\n\nLab\n\n\n\nscrum\n\n\nlab\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Lab#SC04: Final Project\n\n\nLab\n\n\n\nscrum\n\n\nlab\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Lab#SC05: SCRUM Tests\n\n\nLab\n\n\n\nscrum\n\n\nlab\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Guide\n\n\nSCRUM Guide\n\n\n\nscrum\n\n\nscrum-guide\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 13: Decision Making and Intuition\n\n\nSCRUM Week 13\n\n\n\nscrum\n\n\nscrum-week12\n\n\nDecision-Making\n\n\n\nDecision-making involves reliable information, a holistic context, and the right mental state.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 14: Beyond SCRUM\n\n\nSCRUM Week 14\n\n\n\nscrum\n\n\nscrum-week14\n\n\nbeyond-scrum\n\n\n\nBeyond SCRUM delves into unconventional yet effective approaches to project management\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 15: Balances, atmosphere and tools\n\n\nSCRUM Week 15\n\n\n\nscrum\n\n\nscrum-week15\n\n\nbalances\n\n\n\nClients often struggle to articulate their needs precisely, but that’s not a hitch. The key is, they can pinpoint what resonates with their vision.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 2: User stories, Tasks and Habits\n\n\nSCRUM Week 2\n\n\n\nscrum\n\n\nscrum-week2\n\n\nuser-story\n\n\n\nIn Scrum Agile, the effective management of user stories, tasks, and habits plays a pivotal role in achieving successful sprint deliveries.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n11 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 4: ScrumMaster, how it works\n\n\nSCRUM Week 4\n\n\n\nscrum\n\n\nscrum-week4\n\n\nscrummaster\n\n\n\nThe role of a ScrumMaster stands out as crucial for success in Agile methodologies.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 5: Mindset, the key to everything\n\n\nSCRUM Week 5\n\n\n\nscrum\n\n\nscrum-week5\n\n\nmindset\n\n\n\nWeek 5 of SCRUM focuses on the pivotal role of mindset in personal and professional success.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n17 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 6: Product Owner, how it works\n\n\nSCRUM Week 6\n\n\n\nscrum\n\n\nscrum-week6\n\n\nproduct-owner\n\n\n\nThe Product Owner is a crucial team member responsible for understanding customer needs and the business value\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 7: Managing Time & Mind\n\n\nSCRUM Week 7\n\n\n\nscrum\n\n\nscrum-week7\n\n\nmindset\n\n\ntime-management\n\n\n\nIn “Managing Time and Mind” the narrative challenges the conventional emphasis on time management alone\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 8: Team & the Specialist\n\n\nSCRUM Week 8\n\n\n\nscrum\n\n\nscrum-week8\n\n\nspecialist\n\n\n\nThe Development Team delivers a potentially releasable product increment at the end of each Sprint\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 9: Albertus’ Dilemma\n\n\nSCRUM Week 9\n\n\n\nscrum\n\n\nscrum-week9\n\n\nalbertusDilemma\n\n\n\nAlbertus’ Dilemma explores the mental challenges faced by programmers throughout the workweek\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nAlbert R.\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3: Delivering Value & Communication\n\n\nSCRUM Week 3\n\n\n\nscrum\n\n\nscrum-wewek3\n\n\ncommunication\n\n\n\nIn SCRUM Agile methodology, effective communication and value delivery play pivotal roles in fostering collaboration and project success\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSpring MVC\n\n\nSpring MVC\n\n\n\nspring\n\n\nMVC\n\n\n\nSpring MVC\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSprings Servlets\n\n\nSpring MVC\n\n\n\nspring\n\n\nMVC\n\n\n\nSpring MVC\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSpring Framework\n\n\nSpring Framework\n\n\n\nspring\n\n\nframework\n\n\n\nSpring Framework\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: Components\n\n\nReactJS Components\n\n\n\nreactjs\n\n\ncomponents\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: Introduction\n\n\nReactJS hooks\n\n\n\nreactjs\n\n\nconcepts\n\n\nhooks\n\n\nintroduction\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: JSX\n\n\nReactJS JSX\n\n\n\nreactjs\n\n\njsx\n\n\nrender\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE01-1: API Rest Axios\n\n\nReactJS API Rest Axios & Render Component\n\n\n\nreactjs\n\n\nlab\n\n\nLAB#RE01\n\n\n\nReact JS Labs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE02-1: Router & Hooks\n\n\nReactJS labs, Router & Hooks\n\n\n\nreactjs\n\n\nlab\n\n\nLAB#RE02\n\n\n\nReact JS Labs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n19 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE03-2: HighCharts\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE03\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE03-3: API Rest Mono\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE03\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n18 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE03-4: API Rest Domains\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE03\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n21 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE03-5: data management\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE03\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE03-1: to-do app\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE03\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n16 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE04-2: Spring Boot & ReactJS\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE04\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n23 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE04-1: todo & server\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE04\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n10 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE05-1: chat & websockets\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE05\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE05-2: chat: backend\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE05\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE05-3: chat & AWS\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE05\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE05-4: chat: test ws AWS\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE05\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE05-5: chat & front\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE05\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE05-6: chat & ws: front\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE05\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n14 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE06-1-PR: create a pull request\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE06\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE06-1: healthyFood Restaurant\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE06\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n20 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#RE07-1: traffic lights simulation\n\n\nReactJS labs\n\n\n\nreactjs\n\n\nlab\n\n\nLab#RE07\n\n\n\nlabs\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n52 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: Create a React project\n\n\nReactJS Project\n\n\n\nreactjs\n\n\nproject\n\n\ndevtools\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: props and state\n\n\nPassing Props to a Component\n\n\n\nreactjs\n\n\nprops\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReactJS Resources\n\n\nReadings\n\n\n\nreactjs\n\n\nresources\n\n\nreadings\n\n\n\nReactJs Resources and Readings\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: render virtual DOM\n\n\nReactJS DOM\n\n\n\nreactjs\n\n\nvirutal-dom\n\n\nrender\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Resources\n\n\nResources and Readings\n\n\n\nscrum\n\n\nresources\n\n\nreadings\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 1: Meetings, Impediments and Iterations\n\n\nSCRUM Week 1\n\n\n\nscrum\n\n\nscrum-week1\n\n\nmeetings\n\n\nimpediments\n\n\n\nEffective and well-organized meetings are fundamental to SCRUM Agile\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 10: Before SCRUM\n\n\nSCRUM Week 10\n\n\n\nscrum\n\n\nscrum-week10\n\n\nbefore-scrum\n\n\n\nBefore SCRUM, software development primarily followed methodologies like Waterfall, V-Model\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n10 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 12: Emotions and Thoughts\n\n\nSCRUM Week 12\n\n\n\nscrum\n\n\nscrum-week12\n\n\nEmotions+Thoughts\n\n\n\nEmotions and thoughts, shedding light on their impact on human cognition and decision-making\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 11: Team Dynamics\n\n\nSCRUM Week 11\n\n\n\nscrum\n\n\nscrum-week9\n\n\nteam-dynamics\n\n\n\nTeam Dynamics of SCRUM explores the intricate dynamics of team interactions\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nAlbert R.\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCascade Style Sheet\n\n\nCSS\n\n\n\nCSS\n\n\nintroduction\n\n\n\nIntroduction to CSS\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown and HTML working together, good idea?\n\n\nHTML and qmd\n\n\n\nHTML\n\n\nqmd\n\n\nquarto\n\n\n\nHTML and qmd discussion\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Distros: Ubuntu\n\n\nUbuntu\n\n\n\nlinux\n\n\nUbuntu\n\n\ndistro\n\n\n\nUbuntu\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux: Bash\n\n\nBash\n\n\n\nlinux\n\n\nbash\n\n\n\nBash Linux is a Unix shell and command language CLI (Command Language Interface)\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux: pipes\n\n\nProgramming pipes\n\n\n\nlinux\n\n\nbash\n\n\npipe\n\n\n\nA pipe is a command that allows you to redirect the output of one command as the input to another command\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux: su and sudo\n\n\nBash su and sudo\n\n\n\nlinux\n\n\nbash\n\n\nsu\n\n\nsudo\n\n\n\nsu and sudo are two different commands in Linux that are used to execute commands with the privileges of another user\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux: basic concepts\n\n\nLinux\n\n\n\nlinux\n\n\nconcepts\n\n\n\nWhat is Linux, free and Unix-like open-source operating system based on the Linux kernel\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux: File System\n\n\nLinux File System\n\n\n\nlinux\n\n\nfile-system\n\n\n\nThe file system is organized into a hierarchical structure, starting with the root directory\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Distros: Mint\n\n\nMint\n\n\n\nlinux\n\n\nmint\n\n\ndistro\n\n\n\nMint\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Distros: openSuse\n\n\nopenSuse\n\n\n\nlinux\n\n\nopenSuse\n\n\ndistro\n\n\n\nopenSuse\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Distros: Red Hat Enterprise\n\n\nRed Hat Enterprise Linux\n\n\n\nlinux\n\n\nred-hat-enterprise-linux\n\n\ndistro\n\n\nrhel\n\n\n\nRed Hat Enterprise Linux\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Resources\n\n\nReadings\n\n\n\nlinux\n\n\nresources\n\n\nreadings\n\n\n\nLinux Resources and Readings\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux: Virtual Machines\n\n\nVirtual Machines\n\n\n\nlinux\n\n\nvirtual-machines\n\n\nvmware\n\n\nvirtualbox\n\n\n\nA virtual machine is a software program that emulates the functionality of a physical computer\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHTML Markup\n\n\nHTML\n\n\n\nmarkup\n\n\nHTML\n\n\nintroduction\n\n\n\nIntroduction to HTML\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction Markup\n\n\nMarkUp\n\n\n\nmarkup\n\n\nintroduction\n\n\n\nMaruup\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown Markup\n\n\nMarkdown\n\n\n\nmarkup\n\n\nmd\n\n\nintroduction\n\n\n\nIntroduction to MD\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#MD01-1: Create and publish by Quarto\n\n\nLab\n\n\n\nmarkup\n\n\npublish\n\n\nquarto\n\n\n\nLab, publish your Quarto webn\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Markdown: publishing\n\n\nPublish (3/7)\n\n\n\nmarkup\n\n\npublish\n\n\nquarto\n\n\nqmd\n\n\n\nPublish your Quarto web\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Markdown: creating\n\n\nCreate (2/7)\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\n\nCreate your Quarto web\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Markdown: cheat-sheet\n\n\nCode CheatSheet (7/7)\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\ncheat-sheet\n\n\n\nCheat-sheet Quarto web\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Markdown: basics\n\n\nIntroudction (1/7)\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\nintroduction\n\n\n\nIntroduction to Quarto web\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Markdown: OJS Cells\n\n\nCode (6/7)\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\nojs\n\n\n\nCode on your Quarto web\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Markdown: code & data\n\n\nCode (4/7)\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\npython\n\n\n\nCode on your Quarto web\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto Markdown: api rest call\n\n\nCode (5/7)\n\n\n\nmarkup\n\n\nqmd\n\n\nquarto\n\n\nrest\n\n\napi\n\n\n\nCode API Rest call on your Quarto web\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMarkUp Languages Resources\n\n\nReadings\n\n\n\nmarkup\n\n\nresources\n\n\nreadings\n\n\n\nMarkup Resources and Readings\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS App: async\n\n\nReactJS async\n\n\n\nreactjs\n\n\nasync\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS App: conditional render\n\n\nReactJS conditional render\n\n\n\nreactjs\n\n\nconditional-render\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS ES6: array, data and key\n\n\nReactJS arrays, data and key\n\n\n\nreactjs\n\n\nes6\n\n\narrays\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS ES6: arrow functions\n\n\nReactJS ES6\n\n\n\nreactjs\n\n\nes6\n\n\narrow\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS ES6: destructuring\n\n\nReactJS destructuring\n\n\n\nreactjs\n\n\nes6\n\n\ndestructuring\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS ES6: import modules\n\n\nReactJS import modules\n\n\n\nreactjs\n\n\nes6\n\n\nimport-modules\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS ES6: spread operator\n\n\nReactJS spread operator\n\n\n\nreactjs\n\n\nes6\n\n\nspread\n\n\noperator\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS App: events\n\n\nReactJS events\n\n\n\nreactjs\n\n\nevents\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReactJS: custom hooks\n\n\nReactJS hooks\n\n\n\nreactjs\n\n\nhooks\n\n\ncustom\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReactJS: useMemo\n\n\nReactJS hooks\n\n\n\nreactjs\n\n\nhooks\n\n\nmemo\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: Rules of Hooks\n\n\nReactJS Rules of Hooks\n\n\n\nreactjs\n\n\nhooks\n\n\nrules\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: useContext\n\n\nReactJS hooks\n\n\n\nreactjs\n\n\nhooks\n\n\nuseContext\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: useEffect\n\n\nReactJS hooks\n\n\n\nreactjs\n\n\nhooks\n\n\nuseEfect\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: useReducer\n\n\nReactJS hooks\n\n\n\nreactjs\n\n\nhooks\n\n\nuseReducer\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS: useRef\n\n\nReactJS hooks\n\n\n\nreactjs\n\n\nhooks\n\n\nuseRef\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReactJS: useState\n\n\nReactJS hooks\n\n\n\nreactjs\n\n\nhooks\n\n\nuseState\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJavaScript: basics\n\n\nJavasScript basics Dynamic client-side scripting\n\n\n\nreactjs\n\n\njs\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJavaScript: flux control\n\n\nJavasScript Dynamic client-side scripting flux control\n\n\n\nreactjs\n\n\njs\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJavaScript: functions\n\n\nJavasScript functions\n\n\n\nreactjs\n\n\njs\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJavaScript: objects\n\n\nJavasScript objects Dynamic client-side scripting\n\n\n\nreactjs\n\n\njs\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJavaScript: variables\n\n\nJavasScript async Dynamic client-side scripting\n\n\n\nreactjs\n\n\njs\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS App: router\n\n\nReactJS router\n\n\n\nreactjs\n\n\nrouter\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact JS App: styling\n\n\nReactJS styling SCSS\n\n\n\nreactjs\n\n\nstyling\n\n\ncss\n\n\nscss\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCSS: W3.css\n\n\nW3.css\n\n\n\nw3css\n\n\nintroduction\n\n\n\nIntroduction to W3.css\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Distros: Debian\n\n\nDebian\n\n\n\nlinux\n\n\ndebian\n\n\ndistro\n\n\n\nDebian\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI04-2: Bash scripts as terminal tool\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI04-3: Distribute the terminal app\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\napp-distribution\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI02-1: Export env user with grep and pipe\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\npipe\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI01-3: Adjust user permissions\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\nuser\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI03-1: Manage users and groups\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nbash\n\n\nuser\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI01-1: Choose Linux\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\ndistro\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI01-2: Install at least three distributions\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\ndistro\n\n\ninstall\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI03-2: Manage files\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nfile-system\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI03-4: Manage hardware\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nhardware\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI04-1: Bash scripting, qtool\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nqtool\n\n\nbash\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Lab#LI03-3: Manage software\n\n\nLab\n\n\n\nlinux\n\n\nlab\n\n\nsoftware\n\n\n\nlab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Distros: Manjaro\n\n\nManjaro\n\n\n\nlinux\n\n\nmanjaro\n\n\ndistro\n\n\n\nManjaro\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nArticles table\n\n\n\n\n\n\nlisting\n\n\ntable\n\n\n\n\n\n\n\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBooks table\n\n\n\n\n\n\nlisting\n\n\ntable\n\n\n\n\n\n\n\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nGeneral Vocabulary\n\n\nTechnical terms and definitions\n\n\n\nvocabulary\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSpring Boot Vocabulary\n\n\nTechnical terms and definitions\n\n\n\nvocabulary\n\n\nSpring-Boot\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDataBase Vocabulary\n\n\nTechnical terms and definitions\n\n\n\nvocabulary\n\n\ndatabase\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDevOps Vocabulary\n\n\nTechnical terms and definitions\n\n\n\nvocabulary\n\n\ndevops\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE Vocabulay\n\n\nTechnical terms and definitions\n\n\n\nvocabulary\n\n\njavase\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReactJS Vocabulary\n\n\nTechnical terms and definitions\n\n\n\nvocabulary\n\n\nreactjs\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSCRUM Vocabulary\n\n\nTechnical terms and definitions\n\n\n\nvocabulary\n\n\nscrum\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n51 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWeb Vocabulary\n\n\nTechnical terms and definitions\n\n\n\nvocabulary\n\n\nweb\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLearning: tips\n\n\nBasics on how to learn\n\n\n\nabout\n\n\nlearning\n\n\n\nBasics on how to learn, four basic rules\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nUseful Questions\n\n\nAbout fundamental questions\n\n\n\nabout\n\n\nquestions\n\n\n\nMust questions\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAuto-Evaluate\n\n\nAbout how to auto-evaluate\n\n\n\nabout\n\n\nwriting\n\n\n\nAbout how to auto-evaluate\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDocument\n\n\nAbout how to make good documentation\n\n\n\nabout\n\n\nwriting\n\n\n\nAbout how to take notes properly\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTaking Notes\n\n\nAbout how to take notes properly\n\n\n\nabout\n\n\nwriting\n\n\n\nAbout how to take notes properly\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nComments\n\n\nAbout how to write comments properly\n\n\n\nabout\n\n\nwriting\n\n\n\nAbout how to write comments properly\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWriting\n\n\nAbout how to write properly\n\n\n\nabout\n\n\nwriting\n\n\n\nAbout how to write properly\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE01-2: Maven/Gradle Person and Account stored in JSON\n\n\nJava SE Lab\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nfactory\n\n\nJSON\n\n\n\nJava SE Lab 01\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE02-1: Movie/Review, Model\n\n\nJava SE Lab 02 part 1\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nmodel\n\n\n\nJava SE Lab 02, part 1 work on the Model\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE03-1: Library/Book, Core-Model\n\n\nJava SE Lab 03 part 1\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nmodel\n\n\n\nJava SE Lab 03, part 1 work on the Core-Model\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE04-1: healthyFood Restaurant, Core Model\n\n\nJava SE Lab 04 part 1\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nmodel\n\n\n\nJava SE Lab 04, part 1 work on the Core-Model\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n18 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE03-2: Library/Book, Sprint Zero\n\n\nJava SE Lab 03 part 2\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nplan\n\n\n\nJava SE Lab 03, part 2 Sprint Zero, plan\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe , Marc P.\n\n\n13 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE01-1: Maven/Gradle Person and Account\n\n\nJava SE Lab\n\n\n\njavase\n\n\nlab\n\n\ncomposition\n\n\nsingleton\n\n\n\nJava SE Lab 01\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE03-3: Library/Book, Expand Model\n\n\nJava SE Lab 03 part 3\n\n\n\njavase\n\n\nlab\n\n\ninherence\n\n\n\nJava SE Lab 03, part 3 Expand Model\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe , Marc P.\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE02-5: Movie/Review, simulate interactivity by console\n\n\nJava SE Lab 02\n\n\n\njavase\n\n\nlab\n\n\ninterativity\n\n\nconsole\n\n\ncontroller\n\n\ntesting\n\n\n\nJava SE Lab 02 part 5\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE02-4: Movie/Review, interactivity and coupling\n\n\nJava SE Lab 02\n\n\n\njavase\n\n\nlab\n\n\ninterativity\n\n\ncoupling\n\n\ncontroller\n\n\n\nJava SE Lab 02 part 4\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE02-2: Movie/Review, CRUD Operations\n\n\nJava SE Lab\n\n\n\njavase\n\n\nlab\n\n\nmanager\n\n\nstatic\n\n\ncrud\n\n\n\nJava SE Lab 02, part 2, CRUD Operations\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n10 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE02-3: Movie/Review, factory\n\n\nJava SE Lab\n\n\n\njavase\n\n\nlab\n\n\nsingleton\n\n\nfactory\n\n\n\nJava SE Lab 02 part 3\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBooks cards\n\n\nRecommended book list\n\n\n\nlisting\n\n\nbooks\n\n\nreading\n\n\n\nAbout books\n\n\n\n\n\nTuesday, June 1, 2021\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: JUnit and TDD\n\n\nJava Fundamentals\n\n\n\njavase\n\n\nTDD\n\n\nJUnit\n\n\n\nWhat is the TDD and JUnit in Java\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAbstract Factory\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nabstract-factory\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Abstract Factory Creational Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Abstraction\n\n\nJava Fundamentals and Principles\n\n\n\njavase\n\n\nabstraction\n\n\noop\n\n\nconcepts\n\n\n\nWhat is the Java abstraction OOP paradigm\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava Standard Edition: Basics\n\n\nJava Fundamentals\n\n\n\njavase\n\n\nbasics\n\n\nconcepts\n\n\n\nWhat is the Java Polymorphism OOP paradigm\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBridge\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nbridge\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Bridge Structural Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBuilder\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nbuilder\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Builder Creational Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Class and Objects\n\n\nJava Fundamentals\n\n\n\njavase\n\n\nclass\n\n\nobjects\n\n\nconcepts\n\n\noop\n\n\nparadigm\n\n\ncasting\n\n\n\nWhat is a Class and a Object in Java\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n13 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCommander\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\ncommander\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the State Behavioral Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nRafa C.\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nComposite\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\ncomposite\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Composite Structural Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nRafa C.\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava Standard Edition: Principles\n\n\nJava Principles\n\n\n\njavase\n\n\nconcepts\n\n\noop\n\n\nparadigm\n\n\n\nJava SE Principles\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDecorator\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\ndecorator\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Decorator Structural Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava Patterns: Types\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Abstract Facotory\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe , carla velasco\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Encapsulation\n\n\nJava Fundamentals and Principles\n\n\n\njavase\n\n\nencapsulation\n\n\noop\n\n\nconcepts\n\n\n\nWhat is the Java encapsulation OOP paradigm\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFacade\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nfacade\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Facade Structural Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFactory\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nfactory\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Factory Creational Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Project push GitHub\n\n\nJava Fundamentals\n\n\n\njavase\n\n\ngit\n\n\ngithub\n\n\nproject\n\n\ncloud\n\n\n\nSync maven project to github cloud\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Abstract/Interface\n\n\nJava Fundamentals\n\n\n\njavase\n\n\ninherence\n\n\nabstract\n\n\ninterface\n\n\n\nWhat is the Abstract/Interface in Java\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Inherence\n\n\nJava Fundamentals and Principles\n\n\n\njavase\n\n\ninherence\n\n\noop\n\n\nconcepts\n\n\n\nWhat is the Java inherence OOP paradigm\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE00-2: Maven Clinic\n\n\nJava SE Lab 00\n\n\n\njavase\n\n\nlab\n\n\nmodel\n\n\ncomposition\n\n\n\nJava SE Lab 00, part 2\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE00-1: Maven Person\n\n\nJava SE Lab 00\n\n\n\njavase\n\n\nlab\n\n\nmodel\n\n\ncomposition\n\n\ninherence\n\n\n\nJava SE Lab 00 - Part 1\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE00-3: Library Model\n\n\nJava SE Lab 00\n\n\n\njavase\n\n\nlab\n\n\nmodel\n\n\ncomposition\n\n\ninherence\n\n\n\nJava SE Lab 00, Part 3\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab#SE00-4: Abstract/Interface Human\n\n\nJava SE Lab 00\n\n\n\njavase\n\n\nlab\n\n\nmodel\n\n\ninterface\n\n\ninherence\n\n\n\nJava SE Lab 00, Part 4\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Java 8\n\n\nJava Fundamentals\n\n\n\njavase\n\n\nlambda\n\n\nstream\n\n\noptional\n\n\n\nWhat is Java 8\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n11 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Create Maven Project\n\n\nMaven and Java\n\n\n\njavase\n\n\nmaven\n\n\ncode\n\n\nproject\n\n\n\nHow to create a Maven Project\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Maven\n\n\nMaven and Java\n\n\n\njavase\n\n\nmaven\n\n\nconcepts\n\n\n\nWhat is Maven and how it works\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Coupling and DDD\n\n\nCoupling/cohesion in modern java and microservices and DDD\n\n\n\njavase\n\n\nmicroservices\n\n\ncoupling\n\n\nDDD\n\n\n\nHow important coupling is in modern java and microservices and DDD\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nObserver\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nobserver\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Observer Behavioral Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Packages\n\n\nJava Fundamentals\n\n\n\njavase\n\n\npackage\n\n\nconcepts\n\n\n\nWhat is a Package in Java\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Polymorphism\n\n\nJava Fundamentals and Principles\n\n\n\njavase\n\n\npolymorphism\n\n\noop\n\n\nconcepts\n\n\n\nWhat is the Java Polymorphism OOP paradigm\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE Resources\n\n\nReadings\n\n\n\njavase\n\n\nresources\n\n\nreadings\n\n\n\nJava SE Resources and Readings\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava SE: Scope\n\n\nJava Fundamentals\n\n\n\njavase\n\n\nscope\n\n\n\nWhat is the scope in Java\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSingleton\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nsingleton\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Singleton Creational Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nState\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nstate\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the State Behavioral Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nStrategy\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\nstrategy\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Strategy Behavioral Design-Pattern\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nCarla Velasco\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava MOOC Helsinki\n\n\nJava Training\n\n\n\njavase\n\n\ntraining\n\n\nhelsinki\n\n\nmooc\n\n\n\nJava SE training by MOOC Helsinki Programming Java\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava MOOC Helsinki Syllabus\n\n\nJava Training\n\n\n\njavase\n\n\ntraining\n\n\nhelsinki\n\n\nmooc\n\n\n\nJava SE training by MOOC Helsinki Programming Java Syllabus\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nnicolas o.\n\n\n17 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJava Patterns: UML\n\n\nJava Fundamentals and Patterns\n\n\n\njavase\n\n\numl\n\n\ndesign-patterns\n\n\nconcepts\n\n\n\nWhat is the Abstract Facotory\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIFCD0210 Product Backlog\n\n\n\n\n\n\nifcd0210\n\n\nbacklog\n\n\n\n\n\n\n\n\n\n28 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIFCD0210 Projects Backlog\n\n\n\n\n\n\nifcd0210\n\n\nbacklog\n\n\n\n\n\n\n\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIFCD0210 Sprint Backlog\n\n\n\n\n\n\nifcd0210\n\n\nbacklog\n\n\n\n\n\n\n\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIFCD0210 Calendar\n\n\n\n\n\n\nifcd0210\n\n\ncalendar\n\n\nforecast\n\n\ntimetable\n\n\n\n\n\n\n\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIFCD0210 Official Docs\n\n\n\n\n\n\nifcd0210\n\n\ntraining\n\n\n\n\n\n\n\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIFCD0210 Deliveries\n\n\n\n\n\n\nifcd0210\n\n\ntraining\n\n\n\n\n\n\n\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIFCD0210 Init Mail\n\n\n\n\n\n\nifcd0210\n\n\ntraining\n\n\n\n\n\n\n\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDocker\n\n\nDocker\n\n\n\ndevops\n\n\nDocker\n\n\n\nMaven\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIDE: IntellJIdea\n\n\nIntellJIdea\n\n\n\ndevops\n\n\nIntellJIdea\n\n\nide\n\n\n\nVisual Code IDE\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDevOps: agile and microservices\n\n\nDevOps within the organization\n\n\n\ndevops\n\n\nagile\n\n\nmicroservices\n\n\n\nreliable development, better integration between devs and ops, and faster release of new or revised software features or products to customers.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAnsible\n\n\nAnsible\n\n\n\ndevops\n\n\nansible\n\n\n\nMaven\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAmazon Web Services AWS\n\n\nAWS\n\n\n\ndevops\n\n\naws\n\n\n\nAWS\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDigital Ocean\n\n\nDigital Ocean\n\n\n\ndevops\n\n\ndigital-ocean\n\n\n\nDigital Ocean\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nGit\n\n\nSoftware code version control\n\n\n\ndevops\n\n\ngit\n\n\n\nGit is a version control system\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nGit and GitHub 2023 CLI\n\n\nSoftware code version control\n\n\n\ndevops\n\n\ngithub\n\n\n\nGitHub is a software development platform in the cloud. It’s used for storing, tracking, and collaborating on software projects.\n\n\n\n\n\nMonday, October 16, 2023\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nGitHub\n\n\nSoftware code version control\n\n\n\ndevops\n\n\ngithub\n\n\n\nGitHub is a software development platform in the cloud. It’s used for storing, tracking, and collaborating on software projects.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIdea and GitHub 2023\n\n\nSoftware code version control\n\n\n\ndevops\n\n\ngithub\n\n\n\nGitHub is a software development platform in the cloud. It’s used for storing, tracking, and collaborating on software projects.\n\n\n\n\n\nMonday, October 16, 2023\n\n\nalbertprofe\n\n\n12 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nImmutable Infrastructure\n\n\nDesigning code\n\n\n\ndevops\n\n\nimmutable\n\n\n\nSoftware and code components are replaced rather than changed\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDevOps: Introduction\n\n\nDevOps what it is\n\n\n\ndevops\n\n\nintroduction\n\n\n\nDevOps is a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nKubernetes k8s\n\n\nk8s\n\n\n\ndevops\n\n\nk8s\n\n\n\nk8s\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n8 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab 1: chat App\n\n\nLab\n\n\n\ndevops\n\n\nlab\n\n\n\nLab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab 5: k8s on Digital Ocean\n\n\nLab\n\n\n\ndevops\n\n\nlab\n\n\n\nLab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab 6: Spring Boot AWS codecommit\n\n\nLab\n\n\n\ndevops\n\n\nlab\n\n\n\nLab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab 4: Spring Boot Docker/Jenkins\n\n\nLab\n\n\n\ndevops\n\n\nlab\n\n\n\nLab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab 2: Spring Boot AWS AEB manually\n\n\nLab\n\n\n\ndevops\n\n\nlab\n\n\n\nLab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nLab 3: Spring Boot and AWS S3 publisher\n\n\nLab\n\n\n\ndevops\n\n\nlab\n\n\n\nLab\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware Lifecycle\n\n\nDesigning code\n\n\n\ndevops\n\n\nlifecycle\n\n\n\nThe software development lifecycle (SDLC) is a process that describes the stages involved in creating and deploying software.\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNagios\n\n\nNagios\n\n\n\ndevops\n\n\nnagios\n\n\n\nMaven\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: API Rest\n\n\nNetworking API Rest\n\n\n\ndevops\n\n\nnetwork\n\n\nAPI-Rest\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n9 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: DNS\n\n\nNetworking DNS\n\n\n\ndevops\n\n\nnetwork\n\n\nDNS\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: SMTP\n\n\nNetworking SMTP\n\n\n\ndevops\n\n\nnetwork\n\n\nSMTP\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: SOAP\n\n\nNetworking SOAP\n\n\n\ndevops\n\n\nnetwork\n\n\nSOAP\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: UDP\n\n\nNetworking UDP\n\n\n\ndevops\n\n\nnetwork\n\n\nUDP\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: Websocket\n\n\nNetworking Websocket\n\n\n\ndevops\n\n\nnetwork\n\n\nWebsocket\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: gRPC\n\n\nNetwork gRPC\n\n\n\ndevops\n\n\nnetwork\n\n\ngRPC\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: graphQL\n\n\nNetworking graphQL\n\n\n\ndevops\n\n\nnetwork\n\n\ngraphQL\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: Ping\n\n\nNetworking Ping\n\n\n\ndevops\n\n\nnetwork\n\n\nping\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork Protocols\n\n\nRelevant and popular Network Protocols\n\n\n\ndevops\n\n\nnetwork\n\n\nprotocols\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: Client-server\n\n\nNetworking client-sever architecture\n\n\n\ndevops\n\n\nnetwork\n\n\nserver-client\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n7 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: webhook\n\n\nNetwork webhook\n\n\n\ndevops\n\n\nnetwork\n\n\nwebhook\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork: Basics\n\n\nNetworking basics\n\n\n\ndevops\n\n\nnetworking\n\n\nbasics\n\n\n\ndescription\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHow to document: Quarto and Obsidian\n\n\nQuarto and Obsidian\n\n\n\ndevops\n\n\nobsidian\n\n\nquarto\n\n\ndocument\n\n\n\nObsidian is both a Markdown editor and a knowledge base app\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nJenkins pipelines\n\n\npipelines\n\n\n\ndevops\n\n\npipelines\n\n\n\nk8s\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDevOps Resources\n\n\nReadings\n\n\n\ndevops\n\n\nresources\n\n\nreadings\n\n\n\nDevOps Resources and Readings\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIDE: Visual Code\n\n\nVisual Code IDE\n\n\n\ndevops\n\n\nvisual-code\n\n\nide\n\n\n\nVisual Code IDE\n\n\n\n\n\nTuesday, June 1, 2021\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAbout a developer\n\n\n\n\n\n\nabout\n\n\n\n\n\n\n\n\n\n5 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAbout me\n\n\n\n\n\n\nabout\n\n\n\n\n\n\n\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAbout this site\n\n\n\n\n\n\nabout\n\n\n\n\n\n\n\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAbout images credit\n\n\n\n\n\n\nabout\n\n\nimages-credit\n\n\n\n\n\n\n\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nPage Not Found\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Books & Articles",
      "Articles cards"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-sprint.html",
    "href": "ifcd0210/ifcd0210backlog-sprint.html",
    "title": "IFCD0210 Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-sprint.html#sprintparty-june",
    "href": "ifcd0210/ifcd0210backlog-sprint.html#sprintparty-june",
    "title": "IFCD0210 Sprint Backlog",
    "section": "Sprint#Party (June)",
    "text": "Sprint#Party (June)\n\n\nBacklog Sprint#Party June 2023\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n\n117\n13/06\n- The end\nParty Gràcia-Arrosseria\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n- topic planned or pending\n+ topic done in class\n++ new topic not planned",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210deliveries.html",
    "href": "ifcd0210/ifcd0210deliveries.html",
    "title": "IFCD0210 Deliveries",
    "section": "",
    "text": "Backlog course\n\n\nAlways in Quarto-Markdown format and code in GitHub repositories or Organitzations.\nDeliveries via github:\n\nDeliveries table\n\n\n\n\n\n\n\nCode\nDate\nDescription\n\n\n\n\nMF01-0491\n12/12/2022\nFront-end\n\n\nUF01-1841\n13/01/2023\nPrototip WebApp Quarto: web multipage, markdwon/HTML, with github repository and gh-pages deployement\n\n\nUF02-1842\n10/02/2023\nWebApp Quarto amb advanced features: markdown basics, figures, tables, Mermaid Diagrams, callout, cross-references, code highlighted\n\n\nUF03-1843\n20/02/2023\nWebApp Quarto amb Document Listings\n\n\nMF01-0492\n21/02/2023\nProva objectiva i prova pràctica - WebApp Quarto amb Api REST call to server and render the data from JSON, from cloud-external server or Spring Boot local server  - WebApp Quarto amb a Observable JS script cell\n\n\nMF02-0492\n21/02/2022\nBack-end\n\n\nUF01-1844\n20/03/2023\nLaboratori app MVC amb Spring Boot Thyemeleaf (alternatiu Rest) un objecte amb totes les operacions CRUD\n\n\nUF02-1845\n19/04/2023\nLaboratori app Spring Boot Thyemeleaf (opcional Rest) amb H2 JPA (alternatiu objectes amb Composition/Inherence)\n\n\nUF03-1846\n09/05/2023\nLaboratori app web amb React Hooks\n\n\nMF02-0492\n10/05/2023\nProva objectiva i prova pràctica (triar una opció) - Laboratori app Spring Boot amb React  - Laboratori Spring Boot Server-Data API Rest amb Spring Boot Client-Web-Thymeleaf  - Laboratori app Spring Boot Thynmeleaf deployat a AWS  - Laboratori app web amb React Hooks amb Data API Rest\n\n\nMF03-0493\n10/05/2022\nProject\n\n\nUF01\n08/06/2023\nCrear app web CRUD amb db en servidor remot Spring Boot i gestió de dades amb API fetch (opcional altres tech) JS React\n\n\nMF03-0493\n08/06/2023\nProva objectiva i prova pràctica\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Deliveries"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html",
    "href": "ifcd0210/ifcd0210calendar.html",
    "title": "IFCD0210 Calendar",
    "section": "",
    "text": "Time Management, categories and time distribution\n\n\n\n\n\n\n\n\n\nTeacher\nStudent\nTeam\nTag\nDescription\n\n\n\n\n50%\n50%\n-\nClass\ndebate, concepts, code-screen, vocabulary\n\n\n-\n100%\n-\nLab\nLabs, MOOC, Java, Spring, React etc\n\n\n20%\n60%\n20%\nProject\nSCRUM, Lifecycle code from plan to devOps\n\n\n20%\n60%\n20%\nItinerary\nThree kinds: MOOC, model, devOps\n\n\n-\n100%\n-\nPersonal\nTake notes, time management",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Calendar"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#time-management",
    "href": "ifcd0210/ifcd0210calendar.html#time-management",
    "title": "IFCD0210 Calendar",
    "section": "",
    "text": "Time Management, categories and time distribution\n\n\n\n\n\n\n\n\n\nTeacher\nStudent\nTeam\nTag\nDescription\n\n\n\n\n50%\n50%\n-\nClass\ndebate, concepts, code-screen, vocabulary\n\n\n-\n100%\n-\nLab\nLabs, MOOC, Java, Spring, React etc\n\n\n20%\n60%\n20%\nProject\nSCRUM, Lifecycle code from plan to devOps\n\n\n20%\n60%\n20%\nItinerary\nThree kinds: MOOC, model, devOps\n\n\n-\n100%\n-\nPersonal\nTake notes, time management",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Calendar"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#timetable",
    "href": "ifcd0210/ifcd0210calendar.html#timetable",
    "title": "IFCD0210 Calendar",
    "section": "Timetable",
    "text": "Timetable\n\n\n\nFrom\nTo\nDescription\nBlocks\n\n\n\n\n9:00\n9:15\nDailyScrum\n-\n\n\n9:15\n9:45\nStudent Block - Before Break\n1/2\n\n\n9:45\n10:15\nStudent Block - Before Break\n2/2\n\n\n10:15\n11:00\nTeacher Block\n1/2\n\n\n11:00\n11:20\nBreak\n-\n\n\n11:20\n12:00\nTeacher Block\n2/2\n\n\n12:00\n12:30\nStudent Block - After Break\n1/3\n\n\n12:30\n12:00\nStudent Block - After Break\n2/3\n\n\n13:00\n13:30\nStudent Block - After Break\n3/3\n\n\n\n\n\n\nTimetable class: first iteration",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Calendar"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#forecast-semester",
    "href": "ifcd0210/ifcd0210calendar.html#forecast-semester",
    "title": "IFCD0210 Calendar",
    "section": "Forecast semester",
    "text": "Forecast semester\nIFCD0210 Cifo Web 2022-2023",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Calendar"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#calendar",
    "href": "ifcd0210/ifcd0210calendar.html#calendar",
    "title": "IFCD0210 Calendar",
    "section": "Calendar",
    "text": "Calendar\n\n\n\nCalendar 2023",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Calendar"
    ]
  },
  {
    "objectID": "springboot/sblab0-1.html",
    "href": "springboot/sblab0-1.html",
    "title": "Lab#SB00-1: Library UML",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-1: Library UML We are going to evolve the current Java SE Libraryproject into a Spring Boot Library Management System with a H2 DB and web with Thymeleaf.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-1: Library UML"
    ]
  },
  {
    "objectID": "springboot/sblab0-1.html#create-a-new-spring-boot-project-h2-db",
    "href": "springboot/sblab0-1.html#create-a-new-spring-boot-project-h2-db",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.1 Create a new Spring Boot project & H2 DB",
    "text": "1.1 Create a new Spring Boot project & H2 DB\n\nCreate a new Spring Boot project: The first step would be to create a new Spring Boot project in the preferred IDE or text editor.\n\n\n\n\n\n\n\nNote\n\n\n\nThe project can be created using Spring Initializr, which will create the necessary file structure and dependencies.\n\n\n\nConfigure the H2 database: In the newly created project, configure the H2 database by adding:\n\nthe H2 dependency in the pom.xml file,\nand also create a new application.properties file\nset the database properties such as:\n\nthe database URL,\nusername,\nand password.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-1: Library UML"
    ]
  },
  {
    "objectID": "springboot/sblab0-1.html#model-entities",
    "href": "springboot/sblab0-1.html#model-entities",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.2 Model & Entities",
    "text": "1.2 Model & Entities\n\nCreate a Book Entity: To represent a book in the library management system, create a Book @Entity\n\n\n\nIt could include attributes such as title, author, publisher, year, ISBN, and status. The status attribute will indicate whether the book is available, borrowed or reserved.\n\nCreate a User Entity: To represent a user in the system, create a User entity that includes attributes such as library card number, name, surname, nationality, birthdate, and borrowed books.\nCreate Author Entity: To represent an author in the system, create an Author entity that includes attributes such as deathdate, books, name, and surname.\nCreate Staff Entity: To represent staff members in the system, create a Staff entity that includes attributes such as staff ID, position, registered users, and library books.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-1: Library UML"
    ]
  },
  {
    "objectID": "springboot/sblab0-1.html#domains-controller-service-and-repository",
    "href": "springboot/sblab0-1.html#domains-controller-service-and-repository",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.3 Domains: @Controller, @Service and @Repository",
    "text": "1.3 Domains: @Controller, @Service and @Repository\n\nCreate Repositories: To access the data stored in the database, create repositories for each entity. The repositories will provide the methods to create, read, update, and delete the data.\nCreate Services: Create services that will implement the business logic of the system by calling the repository methods.\n\n\n\nThe services will provide the methods to search for books, borrow a book, return a book, add a book, remove a book, update book details, register a user, remove a user, update user details, and generate reports.\n\nCreate Controllers: Create controllers that will handle the HTTP requests from the web interface by calling the service methods.\n\n\n\nThe controllers will provide the methods to create a user account, search for books, borrow a book, return a book, add a book, remove a book, update book details, register a user, remove a user, update user details, and generate reports.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-1: Library UML"
    ]
  },
  {
    "objectID": "springboot/sblab0-1.html#html-thymeleaf",
    "href": "springboot/sblab0-1.html#html-thymeleaf",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.4 HTML Thymeleaf",
    "text": "1.4 HTML Thymeleaf\n\n1.4.1 Modern server-side Java template engine\n\nThymeLeaf\nTutorial: Using Thymeleaf\nTutorial: Thymeleaf + Spring\n\n\n\n1.4.2 Create Thymeleaf\n\nCreate Thymeleaf templates: To create the web interface of the system, create Thymeleaf templates for each of the controller methods. The templates will be used to display the data and also to handle the user input.\n\n\n\n\n\n\n\nNote\n\n\n\nThymeleaf is a modern server-side Java template engine for both web and standalone environments.\nThymeleaf’s main goal is to bring elegant natural templates to your development workflow — HTML that can be correctly displayed in browsers and also work as static prototypes, allowing for stronger collaboration in development teams.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-1: Library UML"
    ]
  },
  {
    "objectID": "springboot/sblab0-1.html#test",
    "href": "springboot/sblab0-1.html#test",
    "title": "Lab#SB00-1: Library UML",
    "section": "1.5 Test",
    "text": "1.5 Test\n\nTest the system: Test the system by running it and making sure that all the functionalities work as expected.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-1: Library UML"
    ]
  },
  {
    "objectID": "springboot/sblab0-1.html#core-use-case-borrowbook-and-returnbook-with-user-and-librarian",
    "href": "springboot/sblab0-1.html#core-use-case-borrowbook-and-returnbook-with-user-and-librarian",
    "title": "Lab#SB00-1: Library UML",
    "section": "2.1 Core use-case: borrowBook() and returnBook() with user and librarian",
    "text": "2.1 Core use-case: borrowBook() and returnBook() with user and librarian\n\n\n\nMockup Web Library Management core use-case\n\n\nMockup Web Library Management core use-case extended",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-1: Library UML"
    ]
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html",
    "href": "springboot/boot-what-create-th-h2.html",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "",
    "text": "📘 Create a Spring Boot Project\n\nCreate a Maven Spring Project\nInstall H2 DB\nDefine Application.properties\nCreate Model: @Entity Book and JPA @Repository\nCreate @Controller and @Service\nCreate HTML template with Thymeleaf",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: H2 DB and Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#pom.xml-and-dependencies",
    "href": "springboot/boot-what-create-th-h2.html#pom.xml-and-dependencies",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "1.1 POM.xml and dependencies",
    "text": "1.1 POM.xml and dependencies\nCheck the base project, Library5.\nPOM.xml and dependencies: The POM.xml file manages the dependencies of a project in Maven.\n\nThe first two dependencies, spring-boot-starter-thymeleaf and spring-boot-starter-web, are starter dependencies for Spring Boot and include libraries for building web applications using the Thymeleaf template engine.\nThe spring-boot-devtools dependency provides development-time tools to improve the development experience, such as automatic application restarts and enhanced debugging capabilities.\njavafaker is a library used to generate random data for testing purposes, and lombok is a library that simplifies Java code by reducing boilerplate code.\nThe spring-boot-starter-test dependency includes the necessary libraries for testing Spring Boot applications, and the junit-jupiter-api dependency provides the JUnit 5 testing framework.\nThe spring-boot-starter-jdbc and spring-boot-starter-data-jpa dependencies provide libraries for accessing and manipulating databases in a Spring Boot application.\nFinally, the h2 dependency is a lightweight in-memory database used for testing and development purposes.\n\n\n\nThe groupId and artifactId attributes uniquely identify each dependency, while the version attribute specifies the version of the library to use.\n\nThe scope attribute defines the visibility of the dependency at different stages of the application’s lifecycle, and the optional attribute indicates that the dependency is not strictly required for the application to function.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: H2 DB and Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#entity-book",
    "href": "springboot/boot-what-create-th-h2.html#entity-book",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "2.1 @Entity book",
    "text": "2.1 @Entity book\n\nBook entity\n\nA persistence entity is a lightweight Java class with its state typically persisted to a table in a relational database.\n\n\n\n\n\n\nEntity definition\n\n\n\n\nInstances of such an entity correspond to individual rows in the table.\nEntities typically have relationships with other entities, and these relationships are expressed through object/relational mapping (ORM) metadata.\nThis metadata may be specified directly in the entity class file by using annotations (or in a separate XML descriptor file distributed with the application).\n\n\n\n\n\nDemoApplication.java\n\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor\n@Entity(name=\"Book\")\n@Table(name=\"BOOK_TABLE\")\npublic class Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name=\"BOOK_ID\")\n    private long bookId;\n    @Column(name=\"BOOK_TITLE\")\n    private String title;\n    @Column(name=\"AUTHOR\")\n    private String author;\n    private int pages;\n    @Column(name=\"PUBLISHED_YEAR\")\n    private int publishedYear;\n    @Column(name=\"ISBN\")\n    private String isbn;\n}\n\n\n\n\n\n\n\nHistorical note\n\n\n\nSpring MVC was the original web framework in the Spring ecosystem, and it relied heavily on XML-based configuration.\nOver time, Spring MVC evolved to become more annotation-driven, which made it simpler and more concise to work with.\nWith the advent of Spring Boot, the Spring ecosystem became even more streamlined, with convention-over-configuration and a focus on out-of-the-box features that made it easier to build and deploy Spring-based applications.\nIn the domian of database access, Spring evolved from using plain JDBC to providing support for Object-Relational Mapping (ORM) frameworks such as Hibernate and JPA.\nSpring also provides transaction management capabilities through the Spring Transaction module, which allows developers to define transaction boundaries declaratively using annotations or XML configuration.\nBy using Spring, developers can build robust, scalable, and maintainable web applications that leverage modern technologies and best practices.\n\n\n\n\n\nObject Relational Mapping (ORM) data access\nSpring ORM example - JPA, Hibernate, Transaction",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: H2 DB and Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#h2-db-creation-step-by-step",
    "href": "springboot/boot-what-create-th-h2.html#h2-db-creation-step-by-step",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "2.2 H2 DB creation: step-by-step",
    "text": "2.2 H2 DB creation: step-by-step\n\nDownload the H2 database: Go to the H2 database website at H2 DB{external} and download the latest version of the H2 database for Linux. You can download either the ZIP or the TAR package.\nExtract the downloaded file: Open the terminal and navigate to the folder where you downloaded the H2 database.Extract the contents of the downloaded file using the following command:\n\n\n\nlinux.sh\n\ntar -zxvf h2-*.tar.gz\n\n\nStart the H2 database server: Navigate to the H2 database directory and start the H2 database server by running the following command:\n\n\n\nlinux.sh\n\njava -jar h2*.jar\n\n\n\nlinux.sh\n\ncd &lt;download directory&gt;\nunzip h2*.zip\ncd h2/bin\nchmod +x h2.s\n\nThis will start the H2 database server and display the URL where the H2 database can be accessed.\n\nConnect to the H2 database: Open a web browser and enter the URL displayed in the terminal. The H2 database web interface will open in the browser.\n\nOther option is to execute the app and then clik “Create a new database” from the H2 Icon\n\n\n\n\n\n\nCreate a new database: In the H2 database web interface, click on the “Create a new database” button and follow the prompts to create a new database.\n\n\n\n\nCreate H2 DataBase: define parameters\n\n\n\n\n\nCreate H2 DataBase: DB created\n\n\n\n\n\nCreate H2 DataBase: check it has been created\n\n\n\n\n\nCreate H2 DataBase: connect to DB\n\n\nName your database: jdbc:h2:/home/albert/MyProjects/MyDBs/h2DBs/myDB\n\nConnect to the new database: Once the new database is created, click on the “Connect” button in the H2 database web interface and introduce the right parameters.\n\n\n\n\n\n\n\nImportant\n\n\n\nSaved Settings: Generic H2 (Server) Setting Name: Generic H2 (Server)\nDriver Class: org.h2.Driver JDBC URL: jdbc:h2:/home/albert/MyProjects/MyDBs/h2DBs/myDB\nUser Name: albert Password: ••••\n\n\n\n\n\nCreate H2 DataBase\n\n\n\nUse the H2 database: Now you can start using the H2 database. You can create tables, insert data, and perform queries using SQL commands.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: H2 DB and Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#jpa",
    "href": "springboot/boot-what-create-th-h2.html#jpa",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "2.3 JPA",
    "text": "2.3 JPA\n\nSpring Data JPA - Reference Documentation\n\n\n\nJPA: Jakarta Persistence, formerly Java Persistence API\n\n\n\n\n\n\nJPA definiton\n\n\n\nJPA is a application programming interface specification that describes the management of relational data.\n\n\n\n\n\nDemoApplication.java\n\npublic interface BookRepository extends CrudRepository&lt;Book, Long&gt; {}\n\nThis code is defining a Java interface named BookRepository that extends the CrudRepository interface.\n\n\n\n\n\n\nCrud Repository\n\n\n\nThe CrudRepository interface is a built-in interface in the Spring Framework that provides generic CRUD (Create, Read, Update, Delete) operations for working with entities in a database.\n\n\nThe BookRepository interface is being used to define a repository for managing Book entities, where Book is likely a Java class representing a book object in the application.\nThe Long parameter in CrudRepository&lt;Book, Long&gt; specifies the type of the primary key for the Book entity. In this case, the primary key is a Long type.\nBy extending CrudRepository, the BookRepository interface will inherit methods such as save(), findById(), findAll(), and deleteById(), among others, which can be used to perform database operations on Book entities.\nThis allows for efficient and standardized data access and management within the application. Otherwise, we should use a DAO:\n\nExample DAO MongoDB\nExample SQL execution in Java\n\n\n\nThe public keyword specifies that the interface can be accessed from other classes, and the interface name should be in camelCase to follow Java naming conventions.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: H2 DB and Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#application.properties",
    "href": "springboot/boot-what-create-th-h2.html#application.properties",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "2.4 Application.Properties",
    "text": "2.4 Application.Properties\nApplication.Properties: the application.properties file contains configuration properties for a Spring Boot application.\n#H2 DATASOURCE\nspring.datasource.url=jdbc:h2:tcp://localhost/~/dataBaseH2/library5\nspring.datasource.username=albert\nspring.datasource.password=1234\nspring.datasource.driver-class-name=org.h2.Driver\n\n#JPA\n#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: H2 DB and Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#controller-web",
    "href": "springboot/boot-what-create-th-h2.html#controller-web",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "3.1 @Controller Web",
    "text": "3.1 @Controller Web\n\n\nDemoApplication.java\n\n@Controller\n@RequestMapping(\"/library\")\npublic class LibraryWebController {\n\n    @Autowired\n    BookService bookService;\n\n    @RequestMapping(\"/books\")\n    public String getWeb(Model containerToView) {\n        //\n        containerToView.addAttribute(\"booksfromController\",\n                bookService.getAllBooks());\n        \n\n        return \"showBooks\";\n    }\n}\n\n The method getWeb() is handling a GET request to the “/library/books” URL path and adding a list of books retrieved from the BookService to the Model attribute “booksfromController”.\n\n\n\n@controller and View are connected by HTML/ViewResolver/TH\n\n\nFinally, it returns the name of the view that will be used to render the response.\n\n\n\ngetWeb method\n\n\n\nJava Class and annotations:\n\n@Controller: This is an annotation that identifies the class as a Spring MVC controller.\n@RequestMapping(\"/library\"): This annotation maps the controller to the URL path \"/library\".\n\n@Autowired BookService bookService;: This annotation injects an instance of the BookService into the controller.\n@RequestMapping(\"/books\"): This annotation maps the method to the URL path \"/library/books\".\npublic String getWeb(Model containerToView): This is the method declaration for the GET request handler.\ncontainerToView.addAttribute(\"booksfromController\", bookService.getAllBooks());: This adds a list of books retrieved from the BookService to the model attribute \"booksfromController\".\nreturn \"showBooks;: This returns the name of the view that will be used to render the response.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: H2 DB and Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-what-create-th-h2.html#auto-reload-compiler",
    "href": "springboot/boot-what-create-th-h2.html#auto-reload-compiler",
    "title": "Spring Boot: H2 DB and Thymeleaf",
    "section": "6.1 Auto-reload compiler",
    "text": "6.1 Auto-reload compiler\nSpring Boot Dev Tools\nAny changes to views or resources can be seen in the browser directly, no need restarts, just refresh the browser. As wwll, any changes to the code that will restart the Spring container automatically.\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n&lt;/dependency&gt;\n\n\n\nAuto-reload compiler: Advanced Settings\n\n\n\n\n\nAuto-reload compiler: build project automatically\n\n\n\n\n\nEnable this option: compiler.automake.allow.when.app.running\n\n\n\nIn Menu -&gt; Build -&gt; Build Project CTRL + F9",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: H2 DB and Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-data.html",
    "href": "springboot/boot-concepts-data.html",
    "title": "Spring Boot: Data & DB",
    "section": "",
    "text": "📘 Data\nSpring Data’s mission is to provide a familiar and consistent, Spring-based programming model for data access.\nIt makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services.\nThis is an umbrella project which contains many subprojects that are specific to a given database.\nThe projects are developed by working together with many of the companies and developers that are behind these exciting technologies.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Data & DB"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-data.html#overview",
    "href": "springboot/boot-concepts-data.html#overview",
    "title": "Spring Boot: Data & DB",
    "section": "1 Overview",
    "text": "1 Overview\n\n\n\nSpring Data\n\n\n\nSpring Boot Data\n\n\n\n\n\n\n\nNote\n\n\n\nSpring Data is a collection of frameworks that provide developers with a simple and consistent way to access data from various databases and data stores.\n\n\nIt helps reduce boilerplate code and enables rapid development of data-driven applications by providing abstractions for common data access tasks such as CRUD operations, query creation, and pagination. Features:\n\nPowerful repository and custom object-mapping abstractions\nDynamic query derivation from repository method names\nImplementation domain base classes providing basic properties\nSupport for transparent auditing (created, last changed)\n\n\n\nSecondary features: Possibility to integrate custom repository code - Easy Spring integration via JavaConfig and custom XML namespaces - Advanced integration with Spring MVC controllers - Experimental support for cross-store persistence\nSpring Boot provides support for both SQL and NoSQL databases through its Spring Data module.\n\n\nSpring Boot supports both SQL and NoSQL databases through its Spring Data module, making it easy to work with different types of databases in your application.\n\nFor SQL databases, Spring Data provides support for popular relational databases like MySQL, PostgreSQL, Oracle, and SQL Server. The SQL support in Spring Boot is primarily based on the Java Persistence API (JPA) and provides easy-to-use abstractions for querying and manipulating data in a relational database.\n\n\nOn the other hand, for NoSQL databases like MongoDB or DynamoDB, Spring Data provides a consistent interface for working with various NoSQL data stores. The NoSQL support in Spring Boot is built on top of the Spring Data MongoDB module and offers features like object mapping, query building, and integration with the Spring Framework.\n\nTo use Spring Data in your Spring Boot application, you can add the appropriate Spring Data dependency to your project and configure the data source properties in your application.properties or application.yml file.\nOnce configured, you can use Spring Data repositories to interact with your database and perform CRUD operations on your data.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Data & DB"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-data.html#database-or-store",
    "href": "springboot/boot-concepts-data.html#database-or-store",
    "title": "Spring Boot: Data & DB",
    "section": "2 Database or store?",
    "text": "2 Database or store?\n\nBook: PIOTR FULMAŃSKI, NoSQL Theory and examples\n\nA datastore (store) is, as the name indicates, a place where data is stored. The simplest example of a store is a flat file saved on your disk.\nYou can also save data in a database, in which the data are stored physically in files, but those files are managed by some, very often sophisticated, management system.\n\nViewed from this perspective, database are a special type of datastore.\n\nNot all NoSQL databases have a builtin “manager”, or their functionality is very limited, so the management is done in the application level. That is why you may see them just as an another one storage system. Simply speaking, simple NoSQL databases (for example key-value) are very often referred as a store while those more complicated (graph for example) as a database, but this is not rule of the thumb.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Data & DB"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-data.html#sql",
    "href": "springboot/boot-concepts-data.html#sql",
    "title": "Spring Boot: Data & DB",
    "section": "3 SQL",
    "text": "3 SQL\n\n\n\nDatabase model used by SQL\n\n\nWe can classify database-management systems according to the database models that they support. Not going far into the past we can say that first large-scale used model, dominant in the market for more than 20 years, were relational databases arise in the 1970s.\nWe refer them as SQL databases because Structured Query Language was used by the vast majority of them for writing and querying data. SQL (in a sense: SQL databases) utilizes Edgar F. Codd’s relational model based on tabular data representation:\n\n\n\nSQL is relationnal",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Data & DB"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-data.html#nosql",
    "href": "springboot/boot-concepts-data.html#nosql",
    "title": "Spring Boot: Data & DB",
    "section": "4 NoSQL",
    "text": "4 NoSQL\n\nWhat is NoSQL?\n\nNoSQL databases (aka “not only SQL”) are non-tabular databases and store data differently than relational tables.\nNoSQL databases come in a variety of types based on their data model. The main types are document, key-value, wide-column, document-oriented and graph.\n\n\n\nWhat is NoSQL?\n\n\nThey provide flexible schemas and scale easily with large amounts of data and high user loads.\n\n\nDenormalization can be defined as the copying of the same data into multiple documents or tables in order to simplify/optimize query processing or to fit the user’s data into a particular data model.\n\n\n\nemployee NoSQL\n\n\n\nGoogle sheet Employee template",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Data & DB"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-data.html#sql-vs-nosql",
    "href": "springboot/boot-concepts-data.html#sql-vs-nosql",
    "title": "Spring Boot: Data & DB",
    "section": "5 SQL vs NoSQL",
    "text": "5 SQL vs NoSQL\n\n\n\nNoSQL vs. SQL: Important Differences\n\n\n\nExamples of SQL database engine are: MySQL, PostgreSQL, Microsoft SQL Server, SQLite and H2 Database.\n\n\nExamples of Non-Relational database engines are: MongoDB, Apache Cassandra, Redis, Couchbase, Apache HBase and DynamoDB AWS.\n\n\n5.1 Comparative table\n\n\n\n\n\n\n\n\nConcept\nSQL\nNoSQL\n\n\n\n\nData Model\nRelational\nDocument, Key-Value, Column-Family, Graph\n\n\nQuery Language\nStructured Query Language (SQL)\nQuery APIs, sometimes proprietary\n\n\nScalability\nVertical\nHorizontal\n\n\nData Consistency\nStrong\nEventual\n\n\nTransactional Support\nACID compliance\nLimited\n\n\nSchema Definition\nRequired\nOptional\n\n\nQuery Flexibility\nLimited\nFlexible\n\n\nJoin Operations\nComplex\nNot supported\n\n\nData Modeling\nFixed schema\nDynamic schema\n\n\nAvailability and Fault Tolerance\nLow\nHigh",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Data & DB"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-data.html#examples",
    "href": "springboot/boot-concepts-data.html#examples",
    "title": "Spring Boot: Data & DB",
    "section": "6 Examples",
    "text": "6 Examples\n\nEvolution of SQL DB mapping in Spring\nLab#SB04-1: JPA Inherence strategies\nLab#SB01-1: DataBase",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Data & DB"
    ]
  },
  {
    "objectID": "springboot/sblab7.html",
    "href": "springboot/sblab7.html",
    "title": "Lab#SB07-1: monitor Book",
    "section": "",
    "text": "The project involves creating a Spring Boot application with a primary domain focused on “books” and the implementation of a user activity monitoring system through RESTful APIs. The core objective is to develop a platform for managing and tracking user interactions with book-related content.\nThe “book” domain will encompass features for storing, retrieving, and managing book-related data (all basic CRUD operations), including attributes such as title, author, publication date, and genre. This domain will serve as the backbone of the application, facilitating CRUD operations on book records.\nTo monitor user activity, the project will include an activity tracking system that logs and analyzes user interactions with the book domain. This will involve creating RESTful APIs for actions like book views, ratings, reviews, and other user-related activities. These API endpoints will collect and store user activity data, enabling administrators to gain insights into user engagement and behavior.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB07-1: `monitor Book`"
    ]
  },
  {
    "objectID": "springboot/sblab7.html#monitor-book-overview",
    "href": "springboot/sblab7.html#monitor-book-overview",
    "title": "Lab#SB07-1: monitor Book",
    "section": "",
    "text": "The project involves creating a Spring Boot application with a primary domain focused on “books” and the implementation of a user activity monitoring system through RESTful APIs. The core objective is to develop a platform for managing and tracking user interactions with book-related content.\nThe “book” domain will encompass features for storing, retrieving, and managing book-related data (all basic CRUD operations), including attributes such as title, author, publication date, and genre. This domain will serve as the backbone of the application, facilitating CRUD operations on book records.\nTo monitor user activity, the project will include an activity tracking system that logs and analyzes user interactions with the book domain. This will involve creating RESTful APIs for actions like book views, ratings, reviews, and other user-related activities. These API endpoints will collect and store user activity data, enabling administrators to gain insights into user engagement and behavior.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB07-1: `monitor Book`"
    ]
  },
  {
    "objectID": "springboot/sblab7.html#monitor-book-java-ee-spring-boot-core-documentation",
    "href": "springboot/sblab7.html#monitor-book-java-ee-spring-boot-core-documentation",
    "title": "Lab#SB07-1: monitor Book",
    "section": "2 monitor Book (java-EE spring boot) core documentation",
    "text": "2 monitor Book (java-EE spring boot) core documentation\n\n2.1 github repo\nAlbertProfe/monitorBook\n\n\n2.2 Project Tree\n\n\n\nmonitorBook tree\n\n\n\n\n2.3 API Rest Postman\n\nmonitorBook Api\n\n\n\n2.4 Model\n\n2.4.1 book\n    private String id; \n    private String title; \n    private int pages; \n    private String language; \n    private String author; \nbook java class\n\n\n2.4.2 activityLog\n    private String id;\n    private String ip;\n    private String operationMethod;\n    private String user;\n    private Timestamp time; // Assuming time is represented as a Unix timestamp (long)\n    private String status;\n    private String endpoint;\n    private String domain;\n    private String version;\nactivityLog java class",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB07-1: `monitor Book`"
    ]
  },
  {
    "objectID": "springboot/sblab7.html#domains",
    "href": "springboot/sblab7.html#domains",
    "title": "Lab#SB07-1: monitor Book",
    "section": "3 Domains",
    "text": "3 Domains\n\nRestController: In a Spring Boot application, the RestController acts as the presentation layer responsible for handling incoming HTTP requests.\n\nIt receives requests from clients, processes them, and returns responses as RESTful web services. This component typically maps HTTP methods (GET, POST, PUT, DELETE) to specific methods and serves as a bridge between the client and the application’s core logic.\n\nController: The Controller in Spring Boot serves as the intermediary between the user interface (e.g., a web page) and the application’s backend.\n\nIt processes user input, triggers corresponding actions, and orchestrates the flow of data. Controllers often contain business logic and route requests to the appropriate services for further processing.\n\nService:The Service layer encapsulates the application’s core business logic and domain-specific operations.\n\nIt serves as the intermediary between controllers and repositories, handling the application’s high-level functionality. Services are responsible for implementing and managing the business rules and application-specific operations, ensuring separation of concerns within the application.\n\nRepository: The Repository layer in Spring Boot is responsible for data access and database interactions. It abstracts the underlying data source (e.g., a database) and provides methods for CRUD operations.\n\nIt typically uses technologies like JPA, Hibernate, or Spring Data to simplify data access and management, promoting database abstraction and data integrity.\n\nModel: The Model represents the data structure of the application, defining the object’s attributes and relationships. It often corresponds to database entities and is used for data storage and retrieval.\n\nIn Spring Boot, Models are often annotated with JPA or Hibernate annotations to facilitate database mapping and object-relational mapping (ORM).",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB07-1: `monitor Book`"
    ]
  },
  {
    "objectID": "springboot/sblab7.html#versions-management-by-iteration",
    "href": "springboot/sblab7.html#versions-management-by-iteration",
    "title": "Lab#SB07-1: monitor Book",
    "section": "4 Versions management by iteration",
    "text": "4 Versions management by iteration\n\n\n\n\nVersion\nWhat\nHow\nMuch\nWhen\nProject\n\n\n\n\nVersion0\nsandbox\nJust a project to play with the new tools and really understand the project’s goal\nSpring Boot, TH, API rest, postman, wiki, github, idea\n27/10/2023 25/10/2023\n\n\n\nVersion1\nbook/activity\nimplement book and activity domains with List(Book, Activity)\nTH and API rest\n31/11/2023 26/10/2023\nProject structure, POM\n\n\n\n\n\nCRUD: read, implement log\n27/10/2023\nmonitorBook v1.1 code\n\n\n\n\n\nCRUD: create, implement log & Utilities domain\n30/10/2023\nmonitorBook v1.2 code\n\n\n\n\n\nCRUD: delete and update, implement log\n31/10/2023\nmonitorBook v1.3 code / monitorBook v1.31 code\n\n\nVersion2\ndatabase, JPA-H2\nimplement repository and JPA, install H2, create service and queries\nJPA, H2 just get all books\n02/11/2023\nmonitorBook v2.0 code\n\n\n\n\n\nJPA, H2 all CRUD\n03/11/2023\nmonitorBook v2.1 code\n\n\n\n\n\nJPA, H2 all CRUD minor error checked UPDATE\n03/11/2023\nmonitorBook v2.11 code\n\n\n\n\n\nJPA, H2 all CRUD lombok book\n03/11/2023\nmonitorBook v2.12 code\n\n\nVersion3\nauthor, composition\ndomain author\ncomposition, author-book @oneToMany, @manyToOne (without @Controller and @Service )\n06/11/2023\nmonitorBook v3.0 code -just created, build and structure-\n\n\n\n\n\nJPA, H2\n07/11/2023\nmonitorBook 3.1 code -temptative-\n\n\n\n\n\nJPA, H2 author-book @oneToMany JPA unable to find AUTHOR\n08/11/2023\nmonitorBook 3.2\n\n\n\n\n\nJPA, H2 author-book @oneToMany JPA, authorService\n09/11/2023\nmonitorBook 3.3\n\n\n\n\n\nJPA, H2 author-book-comment @oneToMany JPA\n10/11/2023\nmonitorBook 3.4 / @ManyToOne decommented",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB07-1: `monitor Book`"
    ]
  },
  {
    "objectID": "springboot/sblab0-3.html",
    "href": "springboot/sblab0-3.html",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-3: Borrow Domain\nAfter Lab#SB00-1 and Lab#SB00-2 it is time to integrate and refactor the code created at projects:\n\nLibray5: Book domain (all CRUD operations)\ncontrollerView: User and Librarian domain (all CRUD operations)\nLibraryProject: from Java SE project we have the business logic of borrowing a book and the Borrow clas\nLibraryManagement is the result of combining three base projects into a single system.\nIt is a legacy system, meaning it has been in use for some time. The three original projects likely provided different functionality, such as book creation, user management, and borrowing/returning books, which were combined to eventually create the LibraryManagement system.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-3: LibraryManagement"
    ]
  },
  {
    "objectID": "springboot/sblab0-3.html#initial-integration",
    "href": "springboot/sblab0-3.html#initial-integration",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "1 Initial integration",
    "text": "1 Initial integration\n\nLibrary Management just initial integration with book-selection.\n\n\n\n\n\n\nJava Classes Library Management\n\n\n\n\n\n\nTemplates Library Management\n\n\n\n\n\n\nGeneral View Library Management\n\n\n\nLibrary5 is a library module that provides CRUD (Create, Read, Update, Delete) operations for the Book domain. This means that the Library5 module provides functions or classes that allow users of the software to create, read, update, and delete information about books in the system.\ncontrollerView is a module that provides CRUD operations for both the User and Librarian domains. This module provides functions or classes that allow users and librarians to interact with the system, including creating, reading, updating, and deleting information about users and librarians.\nLibraryProject is the main Java SE project that contains the business logic for borrowing a book, as well as a Borrow class. The Borrow class represents a transaction in which a user borrows a book from the library.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-3: LibraryManagement"
    ]
  },
  {
    "objectID": "springboot/sblab0-3.html#user-story-use-case",
    "href": "springboot/sblab0-3.html#user-story-use-case",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "2 user-story & use-case",
    "text": "2 user-story & use-case\n\n\n\n\n\n\nuser-story\n\n\n\nAs a user/librarian, we are able to access user’s borrow domain from use/users web domain and perform such a operations:\n\n\n\ncreate a new borrow\nborrows stored in a HashMap\nrenovation borrow\nreturn books from borrow\nclose a borrow\nfindBorrowsByUser\nselectBooks by userId\n\nAnd also:\n\nfake login and logout\n\n\n2.1 use-cases\n\nCreate a new borrow: initiate a new record in the borrow HashMap for a user borrowing a book(s).\nBorrows HashMap: a database HashMap that stores information about borrowed books, including user information and return dates.\nRenovation borrow: extend the return date for a borrowed book by updating the corresponding borrow record.\nReturn books: update the borrow record to indicate that the borrowed book(s) have been returned.\nClose a borrow: mark a borrow record as closed to indicate that the borrowed book(s) have been returned and the borrow is complete.\nFake login as librarian or user: simulate a login as a librarian or user for testing or debugging purposes.\nLogout: terminate a user’s authenticated session.\nFind borrows by user: retrieve all borrow records associated with a particular user from the borrow HashMap.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-3: LibraryManagement"
    ]
  },
  {
    "objectID": "springboot/sblab0-3.html#mock-up",
    "href": "springboot/sblab0-3.html#mock-up",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "3 Mock up",
    "text": "3 Mock up\nCreating a web Thymeleaf app without CSS means that the application’s user interface will not have any styling.\nThe focus of the app is to test Spring Boot’s controller and service layers using data stored in HashMaps.\n\n\n\nMockup Web Library Management core use-case\n\n\nThis app will be useful for testing and development purposes, as it allows developers to quickly build and test the functionality of the controller and service layers without worrying about the presentation layer and the database\n\n\nHowever, it is not intended for production use, as a production app would require a more polished and professional user interface with styling and layout design\nMockup Web Library Management core use-case extended",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-3: LibraryManagement"
    ]
  },
  {
    "objectID": "springboot/sblab0-3.html#versions",
    "href": "springboot/sblab0-3.html#versions",
    "title": "Lab#SB00-3: LibraryManagement",
    "section": "4 Versions",
    "text": "4 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nLibrary Management 0.0\ncreate project pom and first integration\nBasic Structure - Java Classes - Templates\n-\n\n\nLibrary Management 0.1\nselect books and userid without a borrow, send Array from TH to @Controller\n-\n-\n\n\nLibrary Management 0.2\nsession and httpServletRequest & filter tables with JS script in static resources\n-\n-\n\n\nLibrary Management 0.3\nsimplify login and put together login user and librarian, using select option and th:if\n-\n-\n\n\nLibrary Management 0.4\nborrowByUserId, borrow -serviceBorrow- and book domain, two columns css, logout\nFolder-Tree Library Management\n1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 - 11\n\n\nLibrary Management 0.5\ncreate borrow from user domain and allBorrows & activeBorrows\n-\n12 - 13 - 14\n\n\nLibrary Management 0.6\nreturn book (selecting byBorrowId and not using UserId)\n-\n15 - 16\n\n\nLibrary Management 0.7\ncreate Borrow from borrows ByUserId And BookIds\n-\n17 - 18 - 19 - 20 - 21",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-3: LibraryManagement"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-4.html",
    "href": "springboot/boot-concepts-jpa-4.html",
    "title": "Spring Boot: JPA Queries",
    "section": "",
    "text": "📘 JPA Queries\nSpring Boot provides an implementation of the Java Persistence API (JPA) to simplify database access: ORM (Object-Relational Mapping)\nIn JPA, entity classes represent tables in the database, and relationships between entities are mapped using annotations.\nJPA (Java Persistence API) enables efficient data retrieval through various querying methods.\nIt supports JPQL (Java Persistence Query Language) for object-oriented queries.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Queries"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-4.html#jpql-java-persistence-query-language",
    "href": "springboot/boot-concepts-jpa-4.html#jpql-java-persistence-query-language",
    "title": "Spring Boot: JPA Queries",
    "section": "1 JPQL (Java Persistence Query Language)",
    "text": "1 JPQL (Java Persistence Query Language)\nJPQL (Java Persistence Query Language) is an object-oriented query language used to define queries for entities and their relationships in JPA (Java Persistence API). It’s similar to SQL but operates on JPA entity objects rather than database tables.\nCriteria API for type-safe programmatic queries, and native SQL for database-specific operations. JPA also allows named queries, parameterized queries, and various operations like filtering, sorting, and joining entities.\n\n1.1 Key Characteristics of JPQL\n\nObject-Oriented: Works with Java objects and their properties, not database tables and columns.\nDatabase-Independent: Queries can work across different database systems without modification.\nSupports JPA Relationships: Can easily navigate entity relationships.\nPowerful: Supports complex operations like joins, aggregations, and subqueries.\n\n\n\n1.2 JPQL vs SQL\nHere’s a comparison between JPQL and SQL:\n\n\n\n\n\n\n\n\nAspect\nJPQL\nSQL\n\n\n\n\nOperates on\nEntity objects\nDatabase tables\n\n\nCase sensitivity\nCase-sensitive\nGenerally case-insensitive\n\n\nPortability\nDatabase-independent\nMay contain database-specific syntax\n\n\nJoin syntax\nSimplified using relationships\nRequires explicit join conditions\n\n\n\n\n\n1.3 JPQL Syntax Examples\n\nBasic Select Query:\n\nSELECT u FROM User u WHERE u.age &gt; 18\n\nJoin Query:\n\nSELECT o FROM Order o JOIN o.customer c WHERE c.country = 'USA'\n\nAggregate Function:\n\nSELECT AVG(e.salary) FROM Employee e WHERE e.department.name = 'IT'\n\nSubquery:\n\nSELECT e FROM Employee e WHERE e.salary &gt; (SELECT AVG(emp.salary) FROM Employee emp)\n\n\n1.4 Using JPQL in Spring Data JPA\n\nWith @Query annotation:\n\n\n@Query(\"SELECT u FROM User u WHERE u.email = ?1 AND u.active = true\")\nUser findActiveUserByEmail(String email);\n\n\nWith EntityManager:\n\n\nString jpql = \"SELECT p FROM Product p WHERE p.category.name = :categoryName\";\nList&lt;Product&gt; products = entityManager.createQuery(jpql, Product.class)\n    .setParameter(\"categoryName\", \"Electronics\")\n    .getResultList();\n\n\n\n1.5 Benefits of JPQL\n\nType-safety: Works with Java types, reducing runtime errors.\nAbstraction: Shields developers from database-specific details.\nOptimization: JPA providers can optimize JPQL queries for better performance.\nFlexibility: Allows for complex queries while maintaining database independence.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Queries"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-4.html#additional-resources",
    "href": "springboot/boot-concepts-jpa-4.html#additional-resources",
    "title": "Spring Boot: JPA Queries",
    "section": "2 Additional Resources",
    "text": "2 Additional Resources\n\n2.1 JPQL\n\nJPQL - Java Persistence Query Language \nJPA Query Language \nJPQL Reference \nSpring Data JPA - Query Creation\n\n\n\n2.2 JPA Queries\nFor more information on Spring Boot JPA query methods, check out these resources:\n\nDefining Query Methods \nQuery by Example \nJPA Query Methods \nSpring Boot: JPA & DI",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Queries"
    ]
  },
  {
    "objectID": "springboot/boot-what-create.html",
    "href": "springboot/boot-what-create.html",
    "title": "Spring Boot: create a Project",
    "section": "",
    "text": "📘 Create a Spring Boot Project\n\nGo to start.spring.io to create a new project with desired settings (Maven, Java, Spring Boot version, etc.).\nAdd required dependencies such as Spring Web.\nDownload the generated ZIP file and import it into IntelliJ IDEA.\nCreate web and REST controllers by creating new Java classes and defining the desired endpoint methods.\nRun the application and test the web and REST controllers.\nCommit and push the code to GitHub.com (using the built-in Git support in IntelliJ IDEA).",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: create a Project"
    ]
  },
  {
    "objectID": "springboot/boot-what-create.html#create-maven-project-step-by-step",
    "href": "springboot/boot-what-create.html#create-maven-project-step-by-step",
    "title": "Spring Boot: create a Project",
    "section": "1 Create Maven Project: step-by-step",
    "text": "1 Create Maven Project: step-by-step\nHere are the steps to create a Spring Boot Maven project, generate it, download it, import it into IntelliJ IDEA, create a web and REST controller (@Controller and @RestController), execute it, and then commit and push it to GitHub.com:\n\n1.1 Open a web browser\nAnd go to the Spring Initializer website at:\n\nSpring Initializer IO: start.spring.io\n\n\n\n\n1.2 Select the desired project settings\nSuch as project type (Maven), language (Java), and Spring Boot version.\n\n\n1.3 Add dependencies\nSelect the required dependencies, such as:\n\nSpring Web,\nSpring Data JPA,\nSpring Boot DevTools,\nLombok\nThyemleaf\nH2 Database\n\n\n\n1.4 Generate\nGenerate the project by clicking the Generate button.\n\n\nURL where you may create a Spring Boot project.\nDefine Maven as Dependencies Mananger and Java.\nName your project.\nChoose your version and packaging: jar.\nAdd dependencies\nGenerate & Download\n\n\n\n1.5 Download\nDownload the generated project as a ZIP file.\n\n\n1.6 Unzip\nUnzip the file to a desired location and import the project into IntelliJ IDEA.\n\n\n\nLocal git repository\n\n\n\n\n\nUnzipped project\n\n\n\n\n1.7 Build\nBuild the project and check folder tree structure and POM.xml\n\nExecute/refresh Maven if necessary\nPOM.xml\n\n&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n        &lt;/groupId&gt;springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n            &lt;artifactId&gt;h2&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n\n1.8 Create a web controller\nCreate a web controller by right-clicking on the project and selecting \"New\" -&gt; \"Java Class\".\n- In the newly created class, add the following code to define a simple **web controller**:\npackage com.example.myFirstSpring;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class HelloWebController {\n\n    @RequestMapping(\"/helloweb\")\n    public String helloHandler(){\n\n        return \"hello.html\";\n    }\n}\n\nWeb Controller\n\n\n\n1.9 Create a HTML web page\nCreate a HTML web page by right-clicking on the project and selecting \"New\" -&gt; \"HTML page\".\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Java Spring WebApp cifo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nhey .... this is amazing ... a- ma - zing\n&lt;/body&gt;\n&lt;/html&gt;\n\nHTML page: hello.html\n\n\n\n1.10 Create a REST controller\nCreate a REST controller by following the same steps as in step 8 and adding the following code to define a simple REST endpoint:\npackage com.example.myFirstSpring;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloRestController {\n\n    @GetMapping(\"/hellorest\")\n    public String helloWorld(){\n\n        return \"Hello Worlds and class!!!!\";\n    }\n}\n\nRest Controller\n\n\n\n\nFolder tree and Java classes\n\n\n\n\n1.11 Run\nRun the application by clicking the “Run” button or by using the keyboard shortcut “Ctrl + Shift + F10”.\n\n\n\n1.12 Check the endpoints\n/home/devops/MyProjects/JavaSEProjects/CifoJava2023/myFirstSpring Once the application is running, you can test it by accessing:\n\nthe web controller in a web browser by going to\n\nhttp://localhost:8080/helloweb\n\nand the REST controller by going to\n\nhttp://localhost:8080/hellorest\n\n\n\n\n\n1.13 Commit & Push\nFinally, you can commit and push the code to Git by using the built-in Git support in IntelliJ IDEA. Simply right-click on the project and select “Git” -&gt; “Commit Directory” and then “Git” -&gt; “Push”.\n\n\n\nJust select the files to add to git\n\n\n\n\n\nWritting the commit\n\n\n\n\n\nBe careful! It is mono-repo, we are pushhing two projects\n\n\n\n\nA monorepo is a version control strategy where a single repository contains all of the source code, resources, and assets required to build and run an application or a suite of applications. Monorepos are used to manage projects that have multiple, interdependent components that are frequently developed and deployed together.\n\n\n\nPushed properly\n\n\n\n\n\nWe have done two commits, just to test the process\n\n\n\n\n\nIt is a mono-repo, that is, this project shrare repository with other projects\n\n\n\n\n\nThe folder tree structure is right and there are just the desired files",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: create a Project"
    ]
  },
  {
    "objectID": "springboot/sblab5.html",
    "href": "springboot/sblab5.html",
    "title": "Lab#SB05-1: API Rest",
    "section": "",
    "text": "Spring Boot Backend Api REST H2 MongoDB: link",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB05-1: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab5.html#api-rest",
    "href": "springboot/sblab5.html#api-rest",
    "title": "Lab#SB05-1: API Rest",
    "section": "",
    "text": "Spring Boot Backend Api REST H2 MongoDB: link",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB05-1: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-1.html",
    "href": "springboot/sblab8-1.html",
    "title": "Lab#SB08-1: Restaurant UML",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-1: Restaurant UML We are going to evolve the current Java SE Restaurant project into a Spring Boot RestaurantManagement System with an H2 DB and web interface using Thymeleaf/Vaadin.\nThis Spring Boot version of the RestaurantManagement System would provide a robust, database-backed web application for managing all aspects of a restaurant’s operations, from bookings and menu management to order processing and customer interactions.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-1: Restaurant UML"
    ]
  },
  {
    "objectID": "springboot/sblab8-1.html#create-a-new-spring-boot-project-h2-db",
    "href": "springboot/sblab8-1.html#create-a-new-spring-boot-project-h2-db",
    "title": "Lab#SB08-1: Restaurant UML",
    "section": "1.1 Create a new Spring Boot project & H2 DB",
    "text": "1.1 Create a new Spring Boot project & H2 DB\n\nCreate a new Spring Boot project: The first step would be to create a new Spring Boot project in the preferred IDE or text editor.\n\n\n\n\n\n\n\nNote\n\n\n\nThe project can be created using Spring Initializr, which will create the necessary file structure and dependencies.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-1: Restaurant UML"
    ]
  },
  {
    "objectID": "springboot/sblab8-1.html#model-entities",
    "href": "springboot/sblab8-1.html#model-entities",
    "title": "Lab#SB08-1: Restaurant UML",
    "section": "1.2 Model & Entities",
    "text": "1.2 Model & Entities\n\nCreate a Menu Entity: To represent a menu item in the restaurant management system, create a Menu @Entity\n\n\n\nIt could include attributes such as name, price, description, category (appetizer, main course, dessert, etc.), and availability status.\n\nCreate a Customer Entity: To represent a customer in the system, create a Customer entity that includes attributes such as customer ID, name, phone number, email, and reservation history.\nCreate Booking Entity: To represent a booking in the system, create a Booking entity that includes attributes such as booking date, time, number of people, tables, and associated customer.\nCreate Staff Entity: To represent staff members in the system, create a Staff entity that includes attributes such as staff ID, name, position, shift schedules, and assigned tables.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-1: Restaurant UML"
    ]
  },
  {
    "objectID": "springboot/sblab8-1.html#domains-controller-service-and-repository",
    "href": "springboot/sblab8-1.html#domains-controller-service-and-repository",
    "title": "Lab#SB08-1: Restaurant UML",
    "section": "1.3 Domains: @Controller, @Service and @Repository",
    "text": "1.3 Domains: @Controller, @Service and @Repository\n\nCreate Repositories: To access the data stored in the database, create repositories for each entity. The repositories will provide the methods to create, read, update, and delete the data.\nCreate Services: Create services that will implement the business logic of the system by calling the repository methods.\n\n\n\nThe services will provide the methods to search for available tables, make a reservation, update menu items, process orders, manage staff schedules, handle customer feedback, and generate reports on restaurant performance.\n\nCreate Controllers: Create controllers that will handle the HTTP requests from the web interface by calling the service methods.\n\n\n\nThe controllers will provide the methods to create a customer account, search for available tables, make a reservation, view and update menu items, place an order, manage staff schedules, submit customer feedback, and generate various reports.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-1: Restaurant UML"
    ]
  },
  {
    "objectID": "springboot/sblab8-1.html#entities-manager",
    "href": "springboot/sblab8-1.html#entities-manager",
    "title": "Lab#SB08-1: Restaurant UML",
    "section": "3.1 Entities Manager",
    "text": "3.1 Entities Manager\nMenuManager\n\n\n\n\n\nmenuManger object\n\n\n\n\n\n\n\nclassDiagram\n\nclass MenuManager {\n  - menus: HashMap&lt;String, Menu&gt;\n  - qty: int\n  - size: double\n  - lastModified: Date\n  + addMenu(menu: Menu, data: String): void\n  + updateMenu(): void\n  + deleteMenu(title: String): void\n  + getMenu(title: String): Menu\n  + getMenus(): List&lt;&gt;\n  + rateMenu(rate: int, menu: Menu): void\n  + saveToCSV(): void\n  + deleteCSV(): void\n}\n\n\n\n\n\n\nThe MenuManager acts as a central hub for menu-related operations, promoting efficient management and systematic handling of menu entities in Java applications.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-1: Restaurant UML"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html",
    "href": "springboot/boot-concepts-annotations.html",
    "title": "Spring Boot: Annotations",
    "section": "",
    "text": "📘 Annotations\nIn Spring Boot, annotations are used to configure and enable various features and functionality.\nThey are used to provide metadata about a class, method, or field, and are used by the Spring framework to determine how to handle that class, method, or field.\nHere are some examples of common annotations used in Spring Boot:",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Annotations"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#bean",
    "href": "springboot/boot-concepts-annotations.html#bean",
    "title": "Spring Boot: Annotations",
    "section": "4.1 @Bean",
    "text": "4.1 @Bean\n@Bean in Spring is:\n\nA method-level annotation\nUsed to declare a Spring bean typically used in @Configuration classes\nTells Spring to:\nmanage the object returned by the method\nand allows you to configure and customize the bean\nJavaBeans - Wikipedia\n\n\n@Bean in Spring is like telling a toy factory to make a special toy for you. When you use @Bean, you are saying,:\n\n“Please create this toy and keep it safe so I can play with it whenever I want.”\n\nJust like the factory remembers how to make your favorite toy, Spring remembers how to create and manage the special object you asked for, so you can use it in your game whenever you need it.\n\nExample:\n@Configuration\npublic class AppConfig {\n\n@Bean\npublic MyService myService() {\nreturn new MyService();\n}\n}",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Annotations"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#mapping-and-parameters",
    "href": "springboot/boot-concepts-annotations.html#mapping-and-parameters",
    "title": "Spring Boot: Annotations",
    "section": "5.1 Mapping and parameters",
    "text": "5.1 Mapping and parameters\n\n@RequestMapping: This annotation is used to map HTTP requests to specific methods in a controller class.\n@RequestParam : This annotation is used to bind request parameters to a method parameter in the controller.\n\n@PathVariable : This annotations binds the placeholder from the URI to the method parameter and can be used when the URI is dynamically created or the value of the URI itself acts as a parameter.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Annotations"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#component",
    "href": "springboot/boot-concepts-annotations.html#component",
    "title": "Spring Boot: Annotations",
    "section": "5.2 @Component",
    "text": "5.2 @Component\nThe @Component annotation is used to mark a class as a Spring-managed component.\n\nAutomatic Bean Creation: @Component tells Spring to automatically create and manage an instance of the annotated class as a bean in the application context.\nDependency Injection: It enables the class to be a candidate for dependency injection, allowing Spring to automatically wire its dependencies.\nComponent Scanning: @Component works with Spring’s component scanning feature to detect and register beans without explicit configuration.\n\nHow @Component Works:\n\nClass-Level Annotation: @Component is applied at the class level.\nBean Creation: When Spring scans the classpath, it detects classes annotated with @Component and creates beans for them[1][2].\nDefault Naming: By default, the bean name is the class name with the first letter in lowercase.\nCustomizable: You can specify a custom name for the bean using @Component(“customName”).\nSpecialized Annotations: @Service, @Repository, and @Controller are specialized forms of @Component for specific use cases.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Annotations"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#usage-example",
    "href": "springboot/boot-concepts-annotations.html#usage-example",
    "title": "Spring Boot: Annotations",
    "section": "5.3 Usage Example",
    "text": "5.3 Usage Example\n@Component\npublic class MathComponent {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\nIn this example, Spring will automatically create a bean of MathComponent, which can then be autowired or retrieved from the application context.\nBenefits\n\nBy using @Component, we can leverage Spring’s dependency injection and inversion of control features with minimal configuration, leading to more maintainable and modular code.\n\n\nSimplifies Configuration: Reduces the need for XML-based bean definitions.\nPromotes Loose Coupling: Facilitates dependency injection and easier unit testing.\nImproves Code Organization: Helps in categorizing classes based on their roles in the application.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Annotations"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#transient",
    "href": "springboot/boot-concepts-annotations.html#transient",
    "title": "Spring Boot: Annotations",
    "section": "5.4 @Transient",
    "text": "5.4 @Transient\nThe @Transient annotation is used in Java persistence contexts, particularly with JPA (Java Persistence API) and frameworks like Hibernate. It indicates that a field should not be persisted to the database.\nUsage of @Transient\n@Transient is applied to fields or properties in an entity class that you don’t want to be stored in the database. This is useful for:\n\nCalculated fields\nTemporary data\nFields used only in application logic\n\nCode Example\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String firstName;\n    private String lastName;\n\n    @Transient\n    private String fullName;\n\n    public String getFullName() {\n        if (fullName == null) {\n            fullName = firstName + \" \" + lastName;\n        }\n        return fullName;\n    }\n\n    // Other getters and setters\n}\nIn this example, fullName is marked as @Transient because it’s a calculated field based on firstName and lastName. It won’t be stored in the database but can be used in application logic.\nRemember, @Transient fields:\n\nAre not persisted to the database\nAre not included in database operations (insert, update, select)\nCan still be used within the application\n\n\n@Transient provides flexibility in managing which data is stored persistently and which is used only in-memory.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Annotations"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-annotations.html#transactional",
    "href": "springboot/boot-concepts-annotations.html#transactional",
    "title": "Spring Boot: Annotations",
    "section": "5.5 @Transactional",
    "text": "5.5 @Transactional\nThe @Transactional annotation is used in Spring to manage database transactions declaratively. It ensures that a group of operations are executed as a single, atomic unit of work.\nKey Features of @Transactional\n\nAutomatic transaction management\nRollback on exceptions\nConfigurable isolation levels and propagation behaviors\n\nUsage Example\n@Service\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Transactional\n    public void createUser(User user) {\n        userRepository.save(user);\n        // If any exception occurs after this point, the save will be rolled back\n        sendWelcomeEmail(user);\n    }\n\n    @Transactional(readOnly = true)\n    public User getUser(Long id) {\n        return userRepository.findById(id).orElse(null);\n    }\n}\nKey Points\n\n@Transactional can be applied at class or method level\nBy default, it rolls back on RuntimeExceptions\nreadOnly = true optimizes read operations\nCan be customized with attributes like:\n\npropagation\nisolation\ntimeout\nrollbackFor / noRollbackFor\n\n\nBenefits\n\nSimplifies transaction management\nPromotes clean, modular code\nImproves data integrity and consistency\n\n\n@Transactional is a powerful tool in Spring for ensuring data consistency and managing complex database operations with minimal boilerplate code.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Annotations"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html",
    "href": "springboot/sblab8-3.html",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-3: RestaurantManager\nWe are going to evolve the current Java SE Restaurant project into a Spring Boot Restaurant Management System with an H2 DB and API Rest manages by Swagger.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#java-faker",
    "href": "springboot/sblab8-3.html#java-faker",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "3.1 Java Faker",
    "text": "3.1 Java Faker\nJava Faker is a library that generates fake data for various purposes such as testing, development, and demonstration.\n\nJava Faker is a tool that creates realistic-looking fake data, including names, addresses, phone numbers, and much more.\n\nIt’s useful for:\n\nPopulating databases with test data\nCreating mock objects for unit testing\nGenerating sample data for applications\nPrototyping user interfaces\n\nThe library provides a wide range of pre-defined categories (like name, address, phone number) and methods to generate fake data within those categories. It’s easy to use and can generate data in multiple languages and locales.\nFor example, you can create a Faker instance and generate fake data like this:\nFaker faker = new Faker();\n // Generates a random full name\nString name = faker.name().fullName();\n// Generates a random email address\nString email = faker.internet().emailAddress(); \nDependency for maven:\n&lt;dependency&gt;\n    &lt;groupId&gt;com.github.javafaker&lt;/groupId&gt;\n    &lt;artifactId&gt;javafaker&lt;/artifactId&gt;\n    &lt;version&gt;1.0.2&lt;/version&gt;\n&lt;/dependency&gt;",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#bean",
    "href": "springboot/sblab8-3.html#bean",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "3.2 Bean",
    "text": "3.2 Bean\n@Bean in Spring is:\n\nA method-level annotation\nUsed to declare a Spring bean typically used in @Configuration classes\nTells Spring to:\nmanage the object returned by the method\nand allows you to configure and customize the bean\nJavaBeans - Wikipedia\n\n\n@Bean in Spring is like telling a toy factory to make a special toy for you. When you use @Bean, you are saying,:\n\n“Please create this toy and keep it safe so I can play with it whenever I want.”\n\nJust like the factory remembers how to make your favorite toy, Spring remembers how to create and manage the special object you asked for, so you can use it in your game whenever you need it.\n\nExample:\n@Configuration\npublic class AppConfig {\n\n@Bean\npublic MyService myService() {\nreturn new MyService();\n}\n}\n\n3.2.1 Approach #1: @Bean\nThis CommandLineRunnerdoes the following:\n\nIt checks if the database is empty by counting the number of customers in the repository.\nIf the database is empty, it creates a new Faker instance with the US locale.\nIt then generates 100 fake customers using Faker to create realistic names, email addresses, andphone numbers.\nEach customer is assigned a random UUID as their ID.\nThe fake customers are saved to the CustomerRepository.\nFinally, it prints a message confirming that 100 fake customers have been created and saved.\n\n\npackage dev.example.restaurant;\n\nimport com.github.javafaker.Faker;\nimport dev.example.restaurant.model.Customer;\nimport dev.example.restaurant.repository.CustomerRepository;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport java.util.Locale;\nimport java.util.UUID;\n\n@SpringBootApplication\npublic class RestaurantVaadinApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RestaurantVaadinApplication.class, args);\n    }\n\n    @Bean\n    public CommandLineRunner loadData(CustomerRepository customerRepository) {\n        return args -&gt; {\n            // Check if the database is empty\n            if (customerRepository.count() == 0) {\n                Faker faker = new Faker(new Locale(\"en-US\"));\n\n                // Create and save 100 fake customers\n                for (int i = 0; i &lt; 100; i++) {\n                    Customer customer = new Customer(\n                            UUID.randomUUID().toString(),\n                            faker.name().fullName(),\n                            faker.internet().emailAddress(),\n                            faker.phoneNumber().cellPhone()\n                    );\n                    customerRepository.save(customer);\n                }\n\n                System.out.println(\"100 fake customers have been\"\n                + \" created and saved to the database.\");\n            }\n        };\n    }\n}\n\n\n\n3.2.2 Approach #2 static\nIn this approach:\n\nWe’ve removed the @Bean annotation and the CommandLineRunner.\nWe’ve added a static CustomerRepository field with @Autowired annotation.\nWe’ve created a static method createFakeCustomers() that contains the logic for creating and saving fake customers.\nIn the main method, we call createFakeCustomers() after the Spring application context is initialized.\n\n\nThere’s an important caveat with this approach: using static fields with @Autowired is generally not recommended in Spring applications.\nIt can lead to issues with testing and violates the principle of dependency injection.\nA better approach would be to use an ApplicationRunner or CommandLineRunner bean, which allows for proper dependency injection. \n\n\npackage dev.example.restaurant;\n\nimport com.github.javafaker.Faker;\nimport dev.example.restaurant.model.Customer;\nimport dev.example.restaurant.repository.CustomerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport java.util.Locale;\nimport java.util.UUID;\n\n@SpringBootApplication\npublic class RestaurantVaadinApplication {\n\n    @Autowired\n    private static CustomerRepository customerRepository;\n\n    public static void main(String[] args) {\n        SpringApplication.run(RestaurantVaadinApplication.class, args);\n        createFakeCustomers();\n    }\n\n    public static void createFakeCustomers() {\n        // Check if the database is empty\n        if (customerRepository.count() == 0) {\n            Faker faker = new Faker(new Locale(\"en-US\"));\n\n            // Create and save 100 fake customers\n            for (int i = 0; i &lt; 100; i++) {\n                Customer customer = new Customer(\n                        UUID.randomUUID().toString(),\n                        faker.name().fullName(),\n                        faker.internet().emailAddress(),\n                        faker.phoneNumber().cellPhone()\n                );\n                customerRepository.save(customer);\n            }\n\n            System.out.println(\"100 fake customers have been\"\n            + \" created and saved to the database.\");\n        }\n    }\n}\n\n\n\n3.2.3 Approach #3\n\npackage dev.example.restaurant;\n\nimport com.github.javafaker.Faker;\nimport dev.example.restaurant.model.Customer;\nimport dev.example.restaurant.repository.CustomerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport java.util.Locale;\nimport java.util.UUID;\n\n@SpringBootApplication\npublic class RestaurantVaadinApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RestaurantVaadinApplication.class, args);\n    }\n\n    @Bean\n    public ApplicationRunner dataLoader(CustomerRepository customerRepository) {\n        return args -&gt; createFakeCustomers(customerRepository);\n    }\n\n    private void createFakeCustomers(CustomerRepository customerRepository) {\n        // Check if the database is empty\n        if (customerRepository.count() == 0) {\n            Faker faker = new Faker(new Locale(\"en-US\"));\n\n            // Create and save 100 fake customers\n            for (int i = 0; i &lt; 100; i++) {\n                Customer customer = new Customer(\n                        UUID.randomUUID().toString(),\n                        faker.name().fullName(),\n                        faker.internet().emailAddress(),\n                        faker.phoneNumber().cellPhone()\n                );\n                customerRepository.save(customer);\n            }\n\n            System.out.println(\"100 fake customers have been created\"\n            + \" and saved to the database.\");\n        }\n    }\n}\n\nThis approach maintains proper dependency injection and is more in line with Spring best practices for a few key reasons:\n\nProper dependency injection: By using an ApplicationRunner bean, we allow Spring to manage the lifecycle and injection of dependencies. The CustomerRepository is properly injected by Spring, rather than being accessed statically.\nSeparation of concerns: The data loading logic is separated from the main application class, improving modularity and maintainability.\nTestability: This approach makes it easier to unit test the data loading logic in isolation, as dependencies can be easily mocked.\nConstructor injection: By passing the CustomerRepository as a parameter to the ApplicationRunner, we’re using constructor injection, which is considered a best practice in Spring.\nAvoiding static dependencies: Static @Autowired fields are generally discouraged as they can lead to issues with testing and violate dependency injection principles.\nFlexibility: This approach allows for easier configuration and potential customization of when and how the data loading occurs.\nAlignment with Spring lifecycle: Using ApplicationRunner ensures the data loading happens at the appropriate time during application startup, after the Spring context is fully initialized.\n\nBy following these practices, the code becomes more maintainable, testable, and aligned with Spring’s dependency injection principles.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#h2-in-restaurantmanager-in-memory",
    "href": "springboot/sblab8-3.html#h2-in-restaurantmanager-in-memory",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "4.1 H2 in RestaurantManager in memory",
    "text": "4.1 H2 in RestaurantManager in memory",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#install-and-create-a-h2-db",
    "href": "springboot/sblab8-3.html#install-and-create-a-h2-db",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "4.2 Install and create a H2 DB",
    "text": "4.2 Install and create a H2 DB\nReferences:\n\nSpring Boot: H2 DB and Thymeleaf\nSpring Boot: Rest\n\nStep-by-step:\n\nDownload and install Java JDK from the official Oracle website.\nDownload and install Spring Boot from the official Spring website.\nDownload the H2 database from the official H2 website.\nExtract the downloaded file to a location on your Linux machine.\nExecute H2 Desktop app and create a local H2 DB.\n\n\n\n\nCreate a H2 DB\n\n\n\nCreation H2 DB step-by-step\n\n\n4.2.1 H2 local DB creation using CLI\n\nPrerequisites:\n\nJava Runtime Environment (JRE) installed\nH2 database JAR file downloaded\n\nDownload H2 Database\n\nVisit the official H2 database website: https://www.h2database.com\nDownload the latest version of H2\n\nExtract the H2 JAR File\n\nUnzip the downloaded file\nLocate the h2-x.x.x.jar file (where x.x.x is the version number)\n\nOpen Command Prompt or Terminal\n\nNavigate to the directory containing the H2 JAR file\n\nStart H2 Console\n\nRun the following command: java -cp h2-x.x.x.jar org.h2.tools.Console\nReplace x.x.x with your actual H2 version number\n\nConnect to the Database\n\nIn the H2 Console, use the following settings:\n\nDriver Class: org.h2.Driver\nJDBC URL: jdbc:h2:~/test (creates a ‘test’ database in your home directory)\nUser Name: sa (default)\nPassword: (leave blank for default)\n\n\nCreate Tables and Data\n\nUse SQL commands to create tables and insert data, for example:\nCREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(50));\nINSERT INTO users VALUES (1, 'John Doe');\n\nAccessing the Database via CLI\n\nTo access the database directly from the command line: java -cp h2-x.x.x.jar org.h2.tools.Shell\nFollow the prompts to connect to your database\n\nStopping the Database\n\nClose the H2 Console window\nOr, if running in background, find the Java process and terminate it\n\nRemember to replace x.x.x with the actual version number of your H2 JAR file in all commands.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#configuring-h2-database-in-spring-boot-with-ddl-auto-generation",
    "href": "springboot/sblab8-3.html#configuring-h2-database-in-spring-boot-with-ddl-auto-generation",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "4.3 Configuring H2 Database in Spring Boot with DDL Auto-generation",
    "text": "4.3 Configuring H2 Database in Spring Boot with DDL Auto-generation\nDependencies\nFirst, ensure you have the necessary dependencies in your pom.xml (for Maven) or build.gradle (for Gradle):\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n    &lt;artifactId&gt;h2&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n\napplication Properties\nIn your application.properties file, add the following configurations:\n\n\n# H2 Database Configuration\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=\n\n# H2 Console Configuration (optional)\nspring.h2.console.enabled=true\nspring.h2.console.path=/h2-console\n\n# JPA and Hibernate Configuration\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\n\nExplanation of Properties\n\nspring.datasource.url: Specifies the JDBC URL for H2. jdbc:h2:mem:testdb creates an in-memory database named “testdb”.\nspring.datasource.driverClassName: Specifies the H2 driver class.\nspring.datasource.username and spring.datasource.password: Set the database credentials.\nspring.h2.console.enabled: Enables the H2 web console for database management.\nspring.h2.console.path: Sets the path to access the H2 console.\nspring.jpa.database-platform: Specifies the Hibernate dialect for H2.\nspring.jpa.hibernate.ddl-auto=update: This is the key property for DDL auto-generation. It tells Hibernate to automatically create or update the database schema based on your entity classes.\nspring.jpa.show-sql=true: Enables logging of SQL statements.\n\nDDL Auto-generation Options\nThe spring.jpa.hibernate.ddl-auto property can have the following values:\n\ncreate: Drops and creates the schema at application startup.\ncreate-drop: Creates the schema at startup and drops it at shutdown.\nupdate: Updates the schema if necessary (recommended for development).\nvalidate: Validates the schema but makes no changes.\nnone: Disables DDL handling.\n\nEntity Classes\nCreate your entity classes with JPA annotations. Hibernate will use these to generate the DDL:\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    private String name;\n    \n    // getters, setters, constructors\n}\nAccessing the Database\n\nThe H2 console will be available at http://localhost:8080/h2-console (assuming default port).\nUse the JDBC URL, username, and password specified in your properties to connect.\n\nRemember to use update or create-drop carefully in production environments to avoid data loss.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#what-is-swagger",
    "href": "springboot/sblab8-3.html#what-is-swagger",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "5.1 What is Swagger",
    "text": "5.1 What is Swagger\n\n\nSwagger is an open-source set of tools for designing, building, documenting, and consuming RESTful web services. It provides a standardized way to describe APIs using JSON or YAML, making it easier for both humans and machines to understand the capabilities of a service without accessing its source code.\n\nKey Components\n\nSwagger Specification: A format for describing RESTful APIs.\nSwagger UI: A web-based UI for exploring and testing APIs.\nSwagger Codegen: A tool for generating client libraries and server stubs.\n\nBenefits\n\nImproves API documentation\nEnables interactive API exploration\nFacilitates API-first development\nSupports automatic code generation\nEnhances collaboration between frontend and backend teams\n\nCan be easily integrated with various frameworks, including Spring Boot, through libraries like SpringFox or SpringDoc OpenAPI.\nUsage\n\nDefine API specifications\nGenerate interactive documentation\nTest API endpoints directly from the UI\nGenerate client SDKs or server stubs\n\nSwagger (now part of the OpenAPI Initiative) has become a de facto standard for RESTful API documentation and development.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#maven-dependency",
    "href": "springboot/sblab8-3.html#maven-dependency",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "5.2 Maven Dependency",
    "text": "5.2 Maven Dependency\nAdd the SpringDoc OpenAPI dependency to your pom.xml (for Maven):\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n    &lt;artifactId&gt;\n    springdoc-openapi-starter-webmvc-ui\n    &lt;/artifactId&gt;\n    &lt;version&gt;2.1.0&lt;/version&gt;\n&lt;/dependency&gt;",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#configure-in-spring-boot",
    "href": "springboot/sblab8-3.html#configure-in-spring-boot",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "5.3 Configure in Spring Boot",
    "text": "5.3 Configure in Spring Boot\nConfigure SpringDoc OpenAPI in your application.properties or application.yml:\nspringdoc.api-docs.path=/api-docs\nspringdoc.swagger-ui.path=/swagger-ui.html",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#annotate-optional",
    "href": "springboot/sblab8-3.html#annotate-optional",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "5.4 Annotate (optional)",
    "text": "5.4 Annotate (optional)\nAnnotate your REST controllers and methods with OpenAPI annotations to provide more details:\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.tags.Tag;\n\n@RestController\n@RequestMapping(\"/api\")\n@Tag(name = \"Example API\", description = \"API for example operations\")\npublic class ExampleController {\n\n    @GetMapping(\"/hello\")\n    @Operation(summary = \"Say hello\", description = \"Returns a greeting message\")\n    @ApiResponse(responseCode = \"200\", description = \"Successful response\")\n    public String hello(@Parameter(description = \"Name to greet\") \n                        @RequestParam(required = false) String name) {\n        return \"Hello, \" + (name != null ? name : \"World\") + \"!\";\n    }\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#open-url-browser",
    "href": "springboot/sblab8-3.html#open-url-browser",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "5.5 Open url browser",
    "text": "5.5 Open url browser\nRun your Spring Boot application and access the Swagger UI at:\nhttp://localhost:8080/swagger-ui.html\nUnderstanding ResponseEntity in Spring",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#key-features",
    "href": "springboot/sblab8-3.html#key-features",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "6.1 Key Features",
    "text": "6.1 Key Features\n\nFlexibility: You can customize every part of the HTTP response.\nType Safety: It uses generics to ensure type safety of the response body.\nConvenience Methods: It provides static methods for quickly creating responses.\n\nIn Java Spring Boot, when you use ResponseEntity&lt;&gt;() with just the name of a class, it’s typically referred to as a “parameterized type” or “generic type.”\nMore specifically, this syntax is using a generic type parameter. The class name inside the angle brackets &lt;&gt; specifies the type of data that the ResponseEntity will contain.\nFor example:\nResponseEntity&lt;User&gt;\nThis declares a ResponseEntity that will contain a User object.\nResponseEntity&lt;List&lt;Product&gt;&gt;\nThis declares a ResponseEntity that will contain a List of Product objects.\nThe use of these parameterized types allows for type safety and helps the compiler ensure that you’re working with the correct types of objects when you’re handling the response.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#basic-usage",
    "href": "springboot/sblab8-3.html#basic-usage",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "6.2 Basic Usage",
    "text": "6.2 Basic Usage\n\n\n\nResponseEntity in Spring Framework\n\n\nHere’s a simple example of how to use ResponseEntity:\n@GetMapping(\"/example\")\npublic ResponseEntity&lt;String&gt; example() {\n    return ResponseEntity.ok(\"Hello, World!\");\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#advanced-usage",
    "href": "springboot/sblab8-3.html#advanced-usage",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "6.3 Advanced Usage",
    "text": "6.3 Advanced Usage\nYou can set custom status codes, headers, and body:\n@GetMapping(\"/advanced\")\npublic ResponseEntity&lt;MyObject&gt; advanced() {\n    MyObject body = new MyObject(\"data\");\n    return ResponseEntity\n        .status(HttpStatus.CREATED)\n        .header(\"Custom-Header\", \"value\")\n        .body(body);\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#useful-links",
    "href": "springboot/sblab8-3.html#useful-links",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "6.4 Useful Links",
    "text": "6.4 Useful Links\n\nOfficial Spring Documentation on ResponseEntity\nSpring.io Guide on Building REST services",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#when-to-use-responseentity",
    "href": "springboot/sblab8-3.html#when-to-use-responseentity",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "6.5 When to Use ResponseEntity",
    "text": "6.5 When to Use ResponseEntity\nUse ResponseEntity when you need fine-grained control over the HTTP response, such as:\n\nSetting custom status codes\nAdding or modifying response headers\nConditionally returning different status codes based on some logic\nCreating responses with no body (like for DELETE operations)\n\nBy using ResponseEntity, you can create more flexible and powerful RESTful APIs in your Spring applications.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#customercontroller",
    "href": "springboot/sblab8-3.html#customercontroller",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "6.6 CustomerController",
    "text": "6.6 CustomerController\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport io.swagger.annotations.*;\n\n    @RestController\n    @RequestMapping(\"/api/customers\")\n    @Api(value = \"Customer Management System\", \n            description = \"Operations pertaining to customers in the Customer Management System\")\n    public class CustomerController {\n\n        private final CustomerService customerService;\n\n        public CustomerController(CustomerService customerService) {\n            this.customerService = customerService;\n        }\n\n        @ApiOperation(value = \"View a list of available customers\", response = List.class)\n        @ApiResponses(value = {\n                @ApiResponse(code = 200, message = \"Successfully retrieved list\"),\n                @ApiResponse(code = 404, message = \"The resource you were trying to reach is not found\")\n        })\n        @GetMapping(\"/allCustomers\")\n        public ResponseEntity&lt;List&lt;Customer&gt;&gt; getAllCustomers() {\n            List&lt;Customer&gt; customers = customerService.getAllCustomers();\n            return new ResponseEntity&lt;&gt;(customers, HttpStatus.OK);\n        }\n\n        @ApiOperation(value = \"Add a new customer\")\n        @PostMapping\n        public ResponseEntity&lt;Customer&gt; createCustomer(\n                @ApiParam(value = \"Customer object store in database table\", \n                            required = true)\n                @RequestBody Customer customer) {\n            Customer createdCustomer = customerService.createCustomer(customer);\n            return new ResponseEntity&lt;&gt;(createdCustomer, HttpStatus.CREATED);\n        }\n\n        @ApiOperation(value = \"Get a customer by Id\")\n        @GetMapping(\"/{id}\")\n        public ResponseEntity&lt;Customer&gt; getCustomerById(\n                @ApiParam(value = \"Customer id from which customer object will retrieve\",\n                            required = true)\n                @PathVariable String id) {\n            Customer customer = customerService.getCustomerById(id);\n            return customer != null\n                    ? new ResponseEntity&lt;&gt;(customer, HttpStatus.OK)\n                    : new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);\n        }\n\n        @ApiOperation(value = \"Update a customer\")\n        @PutMapping(\"/{id}\")\n        public ResponseEntity&lt;Customer&gt; updateCustomer(\n                @ApiParam(value = \"ID of the customer to be updated\", required = true)\n                @PathVariable String id,\n                @ApiParam(value = \"Updated customer object\", required = true)\n                @RequestBody Customer customerDetails) {\n            Customer updatedCustomer = customerService.updateCustomer(id, customerDetails);\n            return updatedCustomer != null\n                    ? new ResponseEntity&lt;&gt;(updatedCustomer, HttpStatus.OK)\n                    : new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);\n        }\n\n        @ApiOperation(value = \"Delete a customer\")\n        @DeleteMapping(\"/{id}\")\n        public ResponseEntity&lt;Void&gt; deleteCustomer(\n                @ApiParam(value = \"Customer Id from which customer \n                                    object will be deleted from database table\", \n                          required = true)\n                @PathVariable String id) {\n            customerService.deleteCustomer(id);\n            return new ResponseEntity&lt;&gt;(HttpStatus.NO_CONTENT);\n        }\n    }",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#customerservice-interface-and-implementation",
    "href": "springboot/sblab8-3.html#customerservice-interface-and-implementation",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "7.1 CustomerService interface and implementation",
    "text": "7.1 CustomerService interface and implementation\n\nWhy Use Interfaces for Services in Spring Boot? Because using interfaces for services in Spring Boot is a best practice that offers several advantages from Loose Coupling to having a clear contract.\n\nLoose Coupling\nInterfaces promote loose coupling between components. The code that depends on the service only knows about the interface, not the implementation. This makes it easier to change the implementation without affecting the rest of the application.\nEasier Testing\nInterfaces facilitate easier unit testing through mocking. You can create mock implementations of the interface for testing purposes, allowing you to isolate the component under test.\nMultiple Implementations\nInterfaces allow for multiple implementations of the same service. This is useful when you need different implementations for different scenarios (e.g., production vs. testing, or different business logic for different clients).\nDependency Injection\nSpring's dependency injection works well with interfaces. You can easily switch implementations by changing the configuration, without modifying the code that uses the service.\nClear Contract\nInterfaces serve as a clear contract for what operations a service provides. This improves code readability and helps in understanding the system’s architecture.\nAspect-Oriented Programming (AOP)\nSpring’s AOP features work more smoothly with interfaces, allowing you to add cross-cutting concerns like logging or transaction management more easily.\nDesign by Contract\nInterfaces encourage “design by contract” principles, where you define what a service does rather than how it does it, leading to more robust and maintainable code.\n\n7.1.1 CustomerService\npackage dev.example.restaurantManager.service;\n\nimport dev.example.restaurantManager.model.Customer;\nimport java.util.List;\n\npublic interface CustomerService {\n    List&lt;Customer&gt; getAllCustomers();\n    Customer createCustomer(Customer customer);\n    Customer getCustomerById(String id);\n    Customer updateCustomer(String id, Customer customerDetails);\n    boolean deleteCustomer(String id);\n    long countCustomers();\n}\n\nBy using this interface, you define a clear contract for customer-related operations.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#two-impplementations",
    "href": "springboot/sblab8-3.html#two-impplementations",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "7.2 Two impplementations",
    "text": "7.2 Two impplementations\nTwo very different implementations of the CustomerService interface:\n\nOne will be a standard implementation using a database,\nand the other will be an in-memory implementation for testing or prototyping purposes.\n\n\n7.2.1 Implementation 1: Database-backed CustomerService\n\npackage dev.example.restaurantManager.service;\n\nimport dev.example.restaurantManager.model.Customer;\nimport dev.example.restaurantManager.repository.CustomerRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class DatabaseCustomerService implements CustomerService {\n\n    @Autowired\n    private CustomerRepository customerRepository;\n\n    @Override\n    public List&lt;Customer&gt; getAllCustomers() {\n        return customerRepository.findAll();\n    }\n\n    @Override\n    public Customer createCustomer(Customer customer) {\n        return customerRepository.save(customer);\n    }\n\n    @Override\n    public Customer getCustomerById(String id) {\n        Optional&lt;Customer&gt; customer = customerRepository.findById(id);\n        return \n        customer.orElseThrow(() -&gt; new RuntimeException(\"Customer not found\"));\n    }\n\n    @Override\n    public Customer updateCustomer(String id, Customer customerDetails) {\n        Customer customer = getCustomerById(id);\n        customer.setName(customerDetails.getName());\n        customer.setEmail(customerDetails.getEmail());\n        // Update other fields as necessary\n        return customerRepository.save(customer);\n    }\n\n    @Override\n    public boolean deleteCustomer(String id) {\n        if (customerRepository.existsById(id)) {\n            customerRepository.deleteById(id);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n7.2.2 Implementation 2: In-Memory CustomerService\n\npackage dev.example.restaurantManager.service;\n\nimport dev.example.restaurantManager.model.Customer;\nimport org.springframework.stereotype.Service;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.stream.Collectors;\n\n@Service\npublic class InMemoryCustomerService implements CustomerService {\n\n    private final Map&lt;String, Customer&gt; customerStore = new ConcurrentHashMap&lt;&gt;();\n\n    @Override\n    public List&lt;Customer&gt; getAllCustomers() {\n        return new ArrayList&lt;&gt;(customerStore.values());\n    }\n\n    @Override\n    public Customer createCustomer(Customer customer) {\n        String id = UUID.randomUUID().toString();\n        customer.setId(id);\n        customerStore.put(id, customer);\n        return customer;\n    }\n\n    @Override\n    public Customer getCustomerById(String id) {\n        Customer customer = customerStore.get(id);\n        if (customer == null) {\n            throw new RuntimeException(\"Customer not found\");\n        }\n        return customer;\n    }\n\n    @Override\n    public Customer updateCustomer(String id, Customer customerDetails) {\n        if (!customerStore.containsKey(id)) {\n            throw new RuntimeException(\"Customer not found\");\n        }\n        customerDetails.setId(id);\n        customerStore.put(id, customerDetails);\n        return customerDetails;\n    }\n\n    @Override\n    public boolean deleteCustomer(String id) {\n        return customerStore.remove(id) != null;\n    }\n\n    // Additional methods for demonstration\n    public List&lt;Customer&gt; searchCustomersByName(String name) {\n        return customerStore.values().stream()\n                .filter(customer -&gt; customer.getName().toLowerCase().contains(name.toLowerCase()))\n                .collect(Collectors.toList());\n    }\n\n    public void clearAllCustomers() {\n        customerStore.clear();\n    }\n}\n\nThese two implementations showcase different approaches:\n\nDatabaseCustomerService: This implementation uses a CustomerRepository, likely backed by a database. It’s suitable for production environments where data persistence is required.\nInMemoryCustomerService: This implementation stores customers in a ConcurrentHashMap. It’s useful for testing, prototyping, or scenarios where a lightweight, non-persistent solution is needed.\n\nBoth implementations adhere to the CustomerService interface, demonstrating how the same contract can be fulfilled in very different ways. This flexibility is one of the key advantages of using interfaces in Spring Boot services.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#jpa-derived-query-methods",
    "href": "springboot/sblab8-3.html#jpa-derived-query-methods",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "8.1 1. JPA Derived Query Methods",
    "text": "8.1 1. JPA Derived Query Methods\nSpring Data JPA can automatically create queries based on method names in your repository interface.\npublic interface UserRepository \n        extends JpaRepository&lt;User, Long&gt; {\n    List&lt;User&gt; findByLastNameAndAge(String lastName, int age);\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#query-annotation",
    "href": "springboot/sblab8-3.html#query-annotation",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "8.2 2. @Query Annotation",
    "text": "8.2 2. @Query Annotation\nYou can use the @Query annotation to define custom JPQL queries.\npublic interface UserRepository \n        extends JpaRepository&lt;User, Long&gt; {\n    @Query(\"SELECT u FROM User u WHERE u.emailAddress = ?1\")\n    User findByEmailAddress(String emailAddress);\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#entitymanager-with-jpql",
    "href": "springboot/sblab8-3.html#entitymanager-with-jpql",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "8.3 3. EntityManager with JPQL",
    "text": "8.3 3. EntityManager with JPQL\nFor more complex queries, you can use the EntityManager directly with JPQL.\n\n@PersistenceContext\nprivate EntityManager entityManager;\n\npublic List&lt;User&gt; findUsersByAgeRange(int minAge, int maxAge) {\n    String jpql = \"SELECT u FROM User u WHERE u.age BETWEEN :minAge AND :maxAge\";\n    return entityManager.createQuery(jpql, User.class)\n            .setParameter(\"minAge\", minAge)\n            .setParameter(\"maxAge\", maxAge)\n            .getResultList();\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#native-sql-queries",
    "href": "springboot/sblab8-3.html#native-sql-queries",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "8.4 4. Native SQL Queries",
    "text": "8.4 4. Native SQL Queries\nWhen you need to use database-specific features, you can write native SQL queries.\n\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    @Query(value = \"SELECT * FROM users WHERE status = ?1\", nativeQuery = true)\n    List&lt;User&gt; findUsersByStatus(int status);\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#jpql-java-persistence-query-language",
    "href": "springboot/sblab8-3.html#jpql-java-persistence-query-language",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "8.5 JPQL (Java Persistence Query Language)",
    "text": "8.5 JPQL (Java Persistence Query Language)\n\nJPQL (Java Persistence Query Language) is an object-oriented query language used to define queries for entities and their relationships in JPA (Java Persistence API). It’s similar to SQL but operates on JPA entity objects rather than database tables.\n\nKey Characteristics of JPQL\n\nObject-Oriented: Works with Java objects and their properties, not database tables and columns.\nDatabase-Independent: Queries can work across different database systems without modification.\nSupports JPA Relationships: Can easily navigate entity relationships.\nPowerful: Supports complex operations like joins, aggregations, and subqueries.\n\n\n8.5.1 JPQL vs SQL\nHere’s a comparison between JPQL and SQL:\n\n\n\n\n\n\n\n\nAspect\nJPQL\nSQL\n\n\n\n\nOperates on\nEntity objects\nDatabase tables\n\n\nCase sensitivity\nCase-sensitive\nGenerally case-insensitive\n\n\nPortability\nDatabase-independent\nMay contain database-specific syntax\n\n\nJoin syntax\nSimplified using relationships\nRequires explicit join conditions\n\n\n\nJPQL Syntax Examples\n\nBasic Select Query:\n\nSELECT u FROM User u WHERE u.age &gt; 18\n\nJoin Query:\n\nSELECT o FROM Order o JOIN o.customer c WHERE c.country = 'USA'\n\nAggregate Function:\n\nSELECT AVG(e.salary) FROM Employee e WHERE e.department.name = 'IT'\n\nSubquery:\n\nSELECT e FROM Employee e WHERE e.salary &gt; (SELECT AVG(emp.salary) FROM Employee emp)\nUsing JPQL\n\nWith @Query annotation:\n\n\n@Query(\"SELECT u FROM User u WHERE u.email = ?1 AND u.active = true\")\nUser findActiveUserByEmail(String email);\n\n\nWith EntityManager:\n\n\nString jpql = \"SELECT p FROM Product p WHERE p.category.name = :categoryName\";\nList&lt;Product&gt; products = entityManager.createQuery(jpql, Product.class)\n    .setParameter(\"categoryName\", \"Electronics\")\n    .getResultList();\n\nBenefits of JPQL\n\nType-safety: Works with Java types, reducing runtime errors.\nAbstraction: Shields developers from database-specific details.\nOptimization: JPA providers can optimize JPQL queries for better performance.\nFlexibility: Allows for complex queries while maintaining database independence.\n\n\n\n8.5.2 Additional Resources\nJPQL\n\nJPQL - Java Persistence Query Language \nJPA Query Language \nJPQL Reference \nSpring Data JPA - Query Creation\n\nJPA Queries\nFor more information on Spring Boot JPA query methods, check out these resources:\n\nDefining Query Methods \nQuery by Example \nJPA Query Methods \nSpring Boot: JPA & DI",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#creating-a-executable-.jar",
    "href": "springboot/sblab8-3.html#creating-a-executable-.jar",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "10.1 Creating a executable .jar",
    "text": "10.1 Creating a executable .jar\nThe command mvn clean package is a Maven command that performs two main phases of the Maven build lifecycle:\n\nclean: This phase removes the target directory and any compiled files from previous builds. It essentially “cleans” your project’s working directory.\npackage: This phase compiles your source code, runs tests, and packages the compiled code into a distributable format, such as a JAR file.\n\nWhen you run mvn clean package, Maven will:\n\nDelete the target directory (clean)\nCompile the source code\nRun unit tests\nPackage the compiled code into a JAR/WAR file (depending on your project type)\n\nThis command is commonly used to ensure a fresh build of your project, starting from a clean state. It’s useful when you want to create a new package of your application, especially before deploying or sharing your code.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#working-on-different-environments",
    "href": "springboot/sblab8-3.html#working-on-different-environments",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "10.2 Working on different environments",
    "text": "10.2 Working on different environments\n\nProfiles\n\n\nSpring Profiles provide a way to segregate parts of your application configuration and make it be available only in certain environments. Any @Component, @Configuration or @ConfigurationProperties can be marked with @Profile to limit when it is loaded, as shown in the following example:\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n@Configuration(proxyBeanMethods = false)\n@Profile(\"production\")\npublic class ProductionConfiguration {\n\n    // ...\n\n}\n\n10.2.1 application.properties\nYou can use aspring.profiles.active Environment property to specify which profiles are active, for example, you could include it in your application.properties, as shown in the following example:\nspring.profiles.active=prod\n#---\nspring.config.activate.on-profile=prod\nspring.profiles.active=metrics\n\nIn RestaurantManger we have three application.properties docs:\n\nDefault profile (application.properties)\nIn-memory profile (application-memory.properties)\nLocal profile (application-local.properties)\n\nThese profiles allow you to run your application in different environments with specific configurations.\nDefault Profile (application.properties)\nThis is the base configuration file that sets up common properties for all profiles:\n\nSets the application name to “restaurantManager”\nActivates the “local” profile by default\nConfigures H2 database and JPA settings\nSets up Swagger documentation paths\nImports environment variables from a .env file\nConfigures an endpoint URL for customers\n\n\nspring.application.name=restaurantManager\n\n# application.properties\nspring.profiles.active=local\n\n\n\n# H2 DATABASE SERVER\nspring.datasource.driverClassName=org.h2.Driver\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\nspring.h2.console.enabled=true\n\n# DDL OPTIONS: create-drop, create, update, none, validate\n#spring.jpa.hibernate.ddl-auto=create-drop\n\n\n# SWAGGER\nspringdoc.api-docs.path=/api-docs\nspringdoc.swagger-ui.path=/swagger-ui.html\n\n\n# ENDPOINTS\n# Import .env file\nspring.config.import=optional:file:.env\n# import from environment variables\nendpoint.url.customers=${ENDPOINT_URL_CUSTOMERS}\n#endpoint.url.customers=/api/v1/customers/\n\n# Enable debug logging\n#logging.level.org.springframework=DEBUG\n#logging.level.dev.example.restaurantManager=DEBUG\n\nIn-Memory Profile (application-memory.properties)\nThis profile is designed for running the application with an in-memory H2 database:\n\nConfigures the H2 database to run in-memory\nSets database username and password\nUses “create-drop” as the DDL auto option, which is suitable for testing as it recreates the schema each time the application starts\n\n\n\n# H2 IN MEMORY\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.username=sa\nspring.datasource.password=\n\n\n# DDL OPTIONS: create-drop, create, update, none, validate\nspring.jpa.hibernate.ddl-auto=create-drop\n# create ? Hibernate first drops existing tables and then creates new tables.\n# create-drop ? similar to create, with the addition that\n# Hibernate will drop the database after all operations are completed;\n# typically used for unit testing\n#https://albertprofe.dev/springboot/sblab0-5.html#ddl\nLocal Profile (application-local.properties)\nThis profile is for running the application with a local H2 database file:\n\nConfigures the H2 database to use a file-based storage\nSets database username and password\nUses “update” as the DDL auto option, which updates the schema without dropping existing tables\n\n\n# H2 LOCAL DB SERVER\nspring.datasource.url=jdbc:h2:/home/albert/MyProjects/DataBase/customerdb\nspring.datasource.username=albert\nspring.datasource.password=1234\n\n# DDL OPTIONS: create-drop, create, update, none, validate\nspring.jpa.hibernate.ddl-auto=update\n# create ? Hibernate first drops existing tables and then creates new tables.\n# update ? The object model created based on the mappings\n# (annotations or XML) is compared with the existing schema,\n# and then Hibernate updates the schema according to the diff.\n# It never deletes the existing tables or columns\n# even if they are no longer required by the application.\n# https://albertprofe.dev/springboot/sblab0-5.html#ddl\n\n\n10.2.1.1 How to Use These Profiles\n\nDefault Behavior: By default, the application will use the “local” profile as specified in application.properties:\nspring.profiles.active=local\nSwitching Profiles: To use a different profile, you can:\n\nChange the spring.profiles.active property in application.properties.\nSet it as a command-line argument:\njava -jar your-app.jar --spring.profiles.active=memory\nSet it as an environment variable:\nexport SPRING_PROFILES_ACTIVE=memory\n\nProfile-Specific Properties: Spring Boot will load properties from application.properties and then override/add properties from the active profile-specific file (e.g., application-memory.properties or application-local.properties).\n\nThis setup allows you to easily switch between running your application with an in-memory database (useful for testing) and a local file-based database (useful for development or production) without changing your code. It also provides a flexible way to manage different configurations for various environments.\n\n\n10.2.1.2 Precedence\nWhen a property like spring.jpa.hibernate.ddl-auto is defined in both application.properties and a profile-specific properties file (e.g., application-dev.properties), the value from the active profile will override the one in application.properties.\nTherefore, if the profile is active and specifies ddl-auto=create, it will take precedence over ddl-auto=update in application.properties.\n\nThe order of execution is determined by the active profiles and their precedence over the default properties.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-3.html#env",
    "href": "springboot/sblab8-3.html#env",
    "title": "Lab#SB08-3: H2 and API Rest",
    "section": "10.3 .env",
    "text": "10.3 .env\n\n\nENDPOINT_URL_CUSTOMERS=/api/v1/customers/\nThe process loading environment variables from a .env file into application.properties, and then using those variables in your Spring Boot application works like this:\n\nLoading from .env file: In your application.properties, you have the following line:\nspring.config.import=optional:file:.env\nThis instructs Spring Boot to import variables from a .env file if it exists. The “optional:” prefix means the application won’t fail if the file is missing.\nDefining the property: In application.properties, you have:\nendpoint.url.customers=${ENDPOINT_URL_CUSTOMERS}\nThis sets the endpoint.url.customers property to the value of the ENDPOINT_URL_CUSTOMERS environment variable.\nUsing the property in the controller: In CustomerController, we’re injecting this property:\n@Value(\"${endpoint.url.customers}\")\nprivate String endpointUrlCustomers;\nThis injects the value of endpoint.url.customers into the endpointUrlCustomers variable.\nAccessing the property: In showEndpointCustomers() method, we’re returning the value of endpointUrlCustomers.\n\nHere’s how it all comes together:\n\nWhen the application starts, it looks for a .env file and loads any variables defined there.\nThe ENDPOINT_URL_CUSTOMERS variable from .env (or from the system environment if not in .env) is used to set the endpoint.url.customers property in application.properties.\nSpring Boot injects this property value into the controller.\nThe controller can now use this value, as demonstrated in the showEndpointCustomers() method.\n\nThis approach allows to keep sensitive or critical environment-specific information (like API endpoints, passwords, users names, roles, etc) out of source code, making it easier to manage different configurations for various environments (development, staging, production, etc.).\n\n10.3.0.1 IntelliJIdea IDE settings 2024\n\n\n\n\nCheck these settings at IntelliJIdea IDE:\n\nInstall the correct plugins: Make sure you have both the “EnvFile” and “.env files support” plugins installed16. These plugins provide better support for .env files in IntelliJ IDEA.\nConfigure file type associations: Go to Settings | Editor | File Types and ensure that both *.env and .env patterns are assigned to the “DotEnv” file type3. This will help IntelliJ recognize the file correctly.\nSet up run configurations: For each run configuration where you need to use the .env file: Open Run | Edit Configurations\n\nSelect your configuration: Go to the EnvFile tab\nEnable EnvFile support and add your .env file to the list\nSelect directory .env\n\nRestart IntelliJ: After making these changes, restart IntelliJ IDEA to ensure all settings are applied correctly.\nCheck file location: Ensure your .env file is in the correct location, typically the root of your project.\nVerify file content: Make sure your .env file is formatted correctly, with each variable on a new line in the format KEY=VALUE.\nUse absolute paths: If IntelliJ still can’t find your .env file, try using an absolute path in your run configuration",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-3: H2 and API Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-scaling.html",
    "href": "springboot/boot-concepts-scaling.html",
    "title": "Spring Boot: Scaling",
    "section": "",
    "text": "📘 JPA Scaling\nKey strategies for scaling Spring Boot applications.\nEach approach addresses different aspects of application scaling, from data management to processing efficiency and API design, providing us with a comprehensive toolkit for building robust, scalable Spring Boot applications:\n\nDTOs optimize data transmission between layers, reducing network overhead and decoupling models.\nAuditing tracks and logs data changes, enhancing integrity and traceability.\nPagination efficiently handles large datasets, improving performance and reducing memory usage.\nSpring Batch provides a framework for robust batch processing, ideal for ETL operations and data migrations.\nCaching improves application performance by storing frequently accessed data in memory, easily implemented with Spring Boot’s annotations.\nWrappers encapsulate or extend object functionality for various purposes, such as standardizing API responses or implementing lazy loading.\n\nThese strategies, when implemented correctly, can significantly enhance the scalability, performance, and maintainability of Spring Boot applications.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Scaling"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-scaling.html#dto-data-transfer-object",
    "href": "springboot/boot-concepts-scaling.html#dto-data-transfer-object",
    "title": "Spring Boot: Scaling",
    "section": "1.1 DTO: Data Transfer Object",
    "text": "1.1 DTO: Data Transfer Object\n\nData Transfer Objects (DTOs) are crucial for efficient data transmission between different layers of an application. They help reduce network overhead and decouple the internal data model from the external API representation.\n\nIn Spring Boot, DTOs are often used with RESTful APIs to control what data is exposed to clients. Here’s a simple example:\npublic class UserDTO {\n    private Long id;\n    private String username;\n    private String email;\n\n    // Constructors, getters, and setters\n}\nTo map between entities and DTOs, you can use libraries like ModelMapper or MapStruct. For instance, with MapStruct:\n@Mapper(componentModel = \"spring\")\npublic interface UserMapper {\n    UserDTO userToUserDTO(User user);\n    User userDTOToUser(UserDTO userDTO);\n}\nDTOs are particularly useful when working with complex domain models or when you need to aggregate data from multiple entities.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Scaling"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-scaling.html#auditing",
    "href": "springboot/boot-concepts-scaling.html#auditing",
    "title": "Spring Boot: Scaling",
    "section": "1.2 Auditing",
    "text": "1.2 Auditing\n\nAuditing is the process of tracking and logging changes to data over time. Spring Data JPA provides built-in support for auditing through annotations and interfaces.\n\nTo enable auditing, add the @EnableJpaAuditing annotation to a configuration class:\n@Configuration\n@EnableJpaAuditing\npublic class JpaConfig {\n}\nThen, use auditing annotations in your entity classes:\n@Entity\n@EntityListeners(AuditingEntityListener.class)\npublic class User {\n    @CreatedDate\n    private Instant createdDate;\n\n    @LastModifiedDate\n    private Instant lastModifiedDate;\n\n    @CreatedBy\n    private String createdBy;\n\n    @LastModifiedBy\n    private String lastModifiedBy;\n\n    // Other fields, getters, and setters\n}\nTo provide the current user for @CreatedBy and @LastModifiedBy, implement the AuditorAware interface.\nFor more details on auditing, refer to the Spring Data JPA Auditing documentation.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Scaling"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-scaling.html#pagination",
    "href": "springboot/boot-concepts-scaling.html#pagination",
    "title": "Spring Boot: Scaling",
    "section": "1.3 Pagination",
    "text": "1.3 Pagination\n\nBooksPageable\n\n\nPagination is essential for handling large datasets efficiently.\nSpring Data JPA provides built-in support for pagination through the Pageable interface and Page object.\n\nTo use pagination in a repository method:\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    Page&lt;User&gt; findByLastName(String lastName, Pageable pageable);\n}\nIn your service or controller:\n@GetMapping(\"/users\")\npublic Page&lt;User&gt; getUsers(@RequestParam(defaultValue = \"0\") int page,\n                           @RequestParam(defaultValue = \"10\") int size) {\n    Pageable pageable = PageRequest.of(page, size);\n    return userRepository.findAll(pageable);\n}\nThis approach allows clients to request specific pages of data, improving performance and reducing memory usage.\nFor more information on pagination and sorting, see the Spring Data JPA documentation on Paging and Sorting.\n\n1.3.1 Interfaces\n\n\n\n\n\nclassDiagram\n    class Pageable {\n        +int getPageNumber()\n        +int getPageSize()\n        +Sort getSort()\n        +boolean hasPrevious()\n        +Pageable next()\n        +Pageable previousOrFirst()\n    }\n    \n    class PageRequest {\n        +static PageRequest of(int page, int size, Sort sort)\n    }\n    \n    class Slice {\n        +List&lt;T&gt; getContent()\n        +boolean hasNext()\n        +Pageable nextPageable()\n    }\n    \n    class Page {\n        +long getTotalElements()\n        +int getTotalPages()\n    }\n    \n    Pageable &lt;|-- PageRequest\n    Slice &lt;|-- Page\n\n\n\n\n\n\n\nFor official documentation on Pageable, Page, Slice, and PageRequest in Spring Boot, you can refer to the following links:\n\nPageable: Spring Data Core API Documentation.\nPage: Spring Data Core API Documentation.\nSlice: Spring Data Core API Documentation.\nPageRequest: Typically used to create a Pageable instance, details are included in the Pageable documentation.\n\n\nPagination is managed using the Pageable, Page, Slice, and PageRequest interfaces:\n\n\nPageable: This interface defines pagination parameters such as page number, page size, and sorting options. It is commonly instantiated using PageRequest.\nPageRequest: A concrete implementation of Pageable that allows you to specify the page index (zero-based), size, and sorting.\nPage: Extends Slice and provides additional metadata like total number of pages and total elements. It is used when you need complete pagination details.\nSlice: Represents a subset of data without total count information, useful for simple “next” and “previous” navigation.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Scaling"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-scaling.html#spring-batch",
    "href": "springboot/boot-concepts-scaling.html#spring-batch",
    "title": "Spring Boot: Scaling",
    "section": "1.4 Spring Batch",
    "text": "1.4 Spring Batch\n\nSpring Batch is a lightweight, comprehensive framework designed for robust batch processing. It’s particularly useful for ETL operations, data migrations, and periodic data processing tasks.\n\nA basic Spring Batch job consists of one or more steps, each with a reader, processor, and writer:\n@Configuration\n@EnableBatchProcessing\npublic class BatchConfig {\n\n    @Bean\n    public Job importUserJob(JobBuilderFactory jobBuilderFactory,\n                             Step step1) {\n        return jobBuilderFactory.get(\"importUserJob\")\n                .incrementer(new RunIdIncrementer())\n                .flow(step1)\n                .end()\n                .build();\n    }\n\n    @Bean\n    public Step step1(StepBuilderFactory stepBuilderFactory,\n                      ItemReader&lt;User&gt; reader,\n                      ItemProcessor&lt;User, User&gt; processor,\n                      ItemWriter&lt;User&gt; writer) {\n        return stepBuilderFactory.get(\"step1\")\n                .&lt;User, User&gt;chunk(10)\n                .reader(reader)\n                .processor(processor)\n                .writer(writer)\n                .build();\n    }\n}\nSpring Batch provides robust error handling, restart capability, and parallel processing options, making it ideal for large-scale data operations.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Scaling"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-scaling.html#caching",
    "href": "springboot/boot-concepts-scaling.html#caching",
    "title": "Spring Boot: Scaling",
    "section": "1.5 Caching",
    "text": "1.5 Caching\n\nCaching is a powerful technique to improve application performance by storing frequently accessed data in memory. Spring Boot provides easy integration with various caching providers.\n\nTo enable caching, add the @EnableCaching annotation to a configuration class:\n@Configuration\n@EnableCaching\npublic class CacheConfig {\n}\nThen, use caching annotations in your service methods:\n@Service\npublic class UserService {\n\n    @Cacheable(\"users\")\n    public User getUserById(Long id) {\n        // Method implementation\n    }\n\n    @CachePut(value = \"users\", key = \"#user.id\")\n    public User updateUser(User user) {\n        // Method implementation\n    }\n\n    @CacheEvict(value = \"users\", key = \"#id\")\n    public void deleteUser(Long id) {\n        // Method implementation\n    }\n}\nSpring Boot auto-configures a suitable CacheManager based on the classpath dependencies. You can customize the caching behavior using properties in application.properties or application.yml.\nFor more advanced caching scenarios, consider using distributed caches like Redis or Hazelcast.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Scaling"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-scaling.html#wrappers",
    "href": "springboot/boot-concepts-scaling.html#wrappers",
    "title": "Spring Boot: Scaling",
    "section": "1.6 Wrappers",
    "text": "1.6 Wrappers\n\nWrappers in Spring Boot often refer to classes that encapsulate or extend the functionality of other objects. They can be used for various purposes, such as adding cross-cutting concerns, adapting interfaces, or providing additional functionality.\n\nOne common use of wrappers is in the context of response entities. For example, you might create a wrapper class to standardize API responses:\npublic class ApiResponse&lt;T&gt; {\n    private T data;\n    private String message;\n    private boolean success;\n\n    // Constructors, getters, and setters\n}\nYou can then use this wrapper in your controllers:\n@GetMapping(\"/users/{id}\")\npublic ResponseEntity&lt;ApiResponse&lt;User&gt;&gt; getUser(@PathVariable Long id) {\n    User user = userService.getUserById(id);\n    ApiResponse&lt;User&gt; response = new ApiResponse&lt;&gt;(user, \"User retrieved successfully\", true);\n    return ResponseEntity.ok(response);\n}\nAnother example is using wrappers for lazy loading in JPA:\n@Entity\npublic class User {\n    @OneToMany(fetch = FetchType.LAZY)\n    private List&lt;Order&gt; orders;\n\n    // Other fields and methods\n}\nHere, orders is wrapped in a proxy object that loads the actual data only when accessed, improving performance for large datasets.\nWrappers can also be used for decorating beans, implementing the decorator pattern, or creating custom type converters in Spring Boot applications.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Scaling"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html",
    "href": "springboot/sblab8-2.html",
    "title": "Lab#SB08-2: Vaadin",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-2: RestaurantManager Vaadin We are going to evolve the current Java SE Restaurant project into a Spring Boot Restaurant Management System with an H2 DB and web interface using Vaadin.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#model-entities",
    "href": "springboot/sblab8-2.html#model-entities",
    "title": "Lab#SB08-2: Vaadin",
    "section": "1.1 Model & Entities",
    "text": "1.1 Model & Entities\n\n\n\n\n\n\nCreate a Menu Entity: To represent a menu item in the restaurant management system, create a Menu @Entity\n\n\nIt could include attributes such as name, price, description, category (appetizer, main course, dessert, etc.), and availability status.\n\n\nCreate a Customer Entity: To represent a customer in the system, create a Customer entity that includes attributes such as customer ID, name, phone number, email, and reservation history.\nCreate Booking Entity: To represent a booking in the system, create a Booking entity that includes attributes such as booking date, time, number of people, tables, and associated customer.\nCreate Staff Entity: To represent staff members in the system, create a Staff entity that includes attributes such as staff ID, name, position, shift schedules, and assigned tables.\n\n\n\n\n\n\nDomains: @Controller, @Service and @Repository\n\nCreate Repositories: To access the data stored in the database, create repositories for each entity. The repositories will provide the methods to create, read, update, and delete the data.\nCreate Services: Create services that will implement the business logic of the system by calling the repository methods.\n\n\nThe services will provide the methods to search for available tables, make a reservation, update menu items, process orders, manage staff schedules, handle customer feedback, and generate reports on restaurant performance.\n\n\nCreate Controllers: Create controllers that will handle the requests from the Vaadin UI by calling the service methods.\n\n\nThe controllers will provide the methods to create a customer account, search for available tables, make a reservation, view and update menu items, place an order, manage staff schedules, submit customer feedback, and generate various reports.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#atmosphere",
    "href": "springboot/sblab8-2.html#atmosphere",
    "title": "Lab#SB08-2: Vaadin",
    "section": "2.1 atmosphere",
    "text": "2.1 atmosphere\nVaadin uses the Atmosphere framework to facilitate robust client-server communication, particularly for real-time and push-based features. \nAtmosphere is an open-source project that provides a powerful abstraction layer for various asynchronous communication protocols, including WebSockets, Server-Sent Events, and long-polling.\nVaadin integrates Atmosphere to handle its server push functionality, allowing servers to send updates to clients without the need for client-side polling. This integration enables Vaadin applications to create responsive, real-time user interfaces with minimal developer effort.\n\n\n\n\n\nAtmosphere’s key features utilized by Vaadin include:\n\nProtocol negotiation and fallback mechanisms\nAutomatic selection of the best available transport method\nHandling of connection management and reconnection scenarios\nCross-browser compatibility\n\n\nBy building on Atmosphere, Vaadin abstracts away the complexities of low-level communication protocols, allowing developers to focus on application logic while still benefiting from efficient, real-time communication between client and server.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#binding",
    "href": "springboot/sblab8-2.html#binding",
    "title": "Lab#SB08-2: Vaadin",
    "section": "2.2 Binding",
    "text": "2.2 Binding\n\nData Binding\nLoading & Saving Business Objects\nBinding Data to Forms\n\nIn Vaadin, the Binder is a data binding class used to connect UI components to Java beans. It is not a container but rather a utility that facilitates the transfer and validation of data between the user interface and backend objects.\nBinder reads values from business objects, converts them to the format required by UI fields, and vice versa, supporting validation to ensure data integrity. This makes it essential for creating dynamic and interactive forms in Vaadin applications.\n\n\n\n\n\n\nThere can be only one Binder\n\n\n\nThere can be only one Binder instance for each form.\nYou should use this instance for all the fields in the form.\n\n\nClient To Server: How to Bind Form Data\nThe following steps include everything needed to load, edit, and save values for a form. Java 8 method references are used.\n\n// Create a Binder instance for the Person class\n1Binder&lt;Person&gt; binder = new Binder&lt;&gt;(Person.class);\n\n// Create a TextField for the title\n2TextField titleField = new TextField();\n\n// Bind the titleField to the Person class\nbinder.forField(titleField)\n    .bind(\n        // Callback that loads the title from a person instance\n3        Person::getTitle,\n        // Callback that saves the title in a person instance\n        Person::setTitle);\n\n// Create a TextField for the name\n4TextField nameField = new TextField();\n\n// Shorthand for cases without extra configuration\n5binder.bind(nameField, Person::getName,\n        Person::setName);\n\n1\n\nCreate a Binder instance for the Person class.\n\n2\n\nCreate a TextField for the title.\n\n3\n\nBind the titleField to the Person class using method references.\n\n4\n\nCreate a TextField for the name.\n\n5\n\nBind the nameField to the Person class using method references.\n\n\n\n\nMethod references are one-linners to simplify code\n\n Method references are used to simplify the code and make it more readable. Here are the key points:\nReference to an Instance Method of a Particular Object\n\nThe method reference binder.forField(titleField).bind(Person::getTitle, Person::setTitle) is used. Here, Person::getTitle and Person::setTitle refer to the instance methods getTitle and setTitle of the Person class. This is equivalent to a lambda expression that calls these methods on a Person object.\n\nReference to an Instance Method of a Particular Object (Shorthand)\n\nThe shorthand binder.bind(nameField, Person::getName, Person::setName) is used, which is another example of referencing instance methods getName and setName of the Person class.\n\nExample Breakdown\nbinder.forField(titleField)\n      .bind(Person::getTitle, Person::setTitle);\nThis is equivalent to:\nbinder.forField(titleField)\n      .bind(person -&gt; person.getTitle(), (person, title) -&gt; person.setTitle(title));\nSimilarly,\nbinder.bind(nameField, Person::getName, Person::setName);\nis equivalent to:\nbinder.bind(nameField, person -&gt; person.getName(), (person, name) -&gt; person.setName(name));\nMethod references here replace the need for explicit lambda expressions, making the code more concise and easier to read.\n\nServer to Client: Reading & Writing Automatically\nWriting automatically to business objects when the user makes changes in the UI is usually the most convenient option. You can bind the values directly to an instance by allowing Binder to save automatically values from the fields.\nIn the example here, field values are saved automatically:\nBinder&lt;Person&gt; binder = new Binder&lt;&gt;();\n\n// Field binding configuration omitted.\n// It should be done here.\n\nPerson person = new Person(\"John Doe\", 1957);\n\n// Loads the values from the person instance.\n// Sets person to be updated when any bound field\n// is updated.\nbinder.setBean(person);\n\nButton saveButton = new Button(\"Save\", event -&gt; {\n    if (binder.validate().isOk()) {\n        // Person is always up-to-date as long as\n        // there are no validation errors.\n\n        MyBackend.updatePersonInDatabase(person);\n    }\n});",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#create-vaadin-views",
    "href": "springboot/sblab8-2.html#create-vaadin-views",
    "title": "Lab#SB08-2: Vaadin",
    "section": "2.3 Create Vaadin Views",
    "text": "2.3 Create Vaadin Views\nTo create the web interface of the system, create Vaadin views for each of the main functionalities. The views will be used to display the data and handle user interactions.\n\nVaadin allows you to create rich, interactive UIs using Java code. It provides a wide range of UI components and layouts that you can use to build your application’s interface.\n\nExample of a simple Vaadin view:\n\n@Route(\"menu\")\npublic class MenuView extends VerticalLayout {\n    private final MenuService menuService;\n\n    public MenuView(MenuService menuService) {\n        this.menuService = menuService;\n        \n        H1 title = new H1(\"Restaurant Menu\");\n        Grid&lt;Menu&gt; grid = new Grid&lt;&gt;(Menu.class);\n        grid.setItems(menuService.getAllMenuItems());\n        \n        add(title, grid);\n    }\n}\n\nThis view creates a page with a title and a grid showing all menu items.\nKey Vaadin Concepts:\n\nServer-side Architecture: Vaadin primarily runs on the server, which means your business logic stays secure and you can leverage the full power of Java.\nComponent-based UI: Build UIs by combining and customizing existing components or creating your own.\nData Binding: Easily bind UI components to data sources, including JPA entities.\nThemes and Styling: Customize the look and feel of your application using CSS and Vaadin’s theming capabilities.\nIntegration with Spring Boot: Vaadin integrates seamlessly with Spring Boot, allowing you to use Spring’s dependency injection and other features.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#commit-6a3c9f1",
    "href": "springboot/sblab8-2.html#commit-6a3c9f1",
    "title": "Lab#SB08-2: Vaadin",
    "section": "6.1 Commit 6a3c9f1",
    "text": "6.1 Commit 6a3c9f1\nCommits on Oct 2, 2024:\n\ncreate project customer entity\nadding layout\ndecoupling layout\nminor changes",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#commit-3333400",
    "href": "springboot/sblab8-2.html#commit-3333400",
    "title": "Lab#SB08-2: Vaadin",
    "section": "6.2 Commit 3333400",
    "text": "6.2 Commit 3333400\nCommit on Nov 12, 2024: add UI components: data picker, dialog, combo, accordion\n\nCode\nCode: /view/CustomerView.java\n\nH2 LOCAL server\n\nView\nThe new view Vaadin code defines a CustomerView class facilitates CRUD operations on customer data through a user interface that includes form fields for customer details (name, email, phonenumber), buttons for saving and deleting records, and a grid for displaying customer information.\nThe layout is structured into three columns, with a progress bar and additional components like a ComboBox for customer types and a DatePicker for selecting start dates.\nEvent listeners handle user interactions, ensuring data is saved or deleted as needed while maintaining synchronization with the underlying database via the CustomerRepository.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#commit-33b1284",
    "href": "springboot/sblab8-2.html#commit-33b1284",
    "title": "Lab#SB08-2: Vaadin",
    "section": "6.3 Commit 33b1284",
    "text": "6.3 Commit 33b1284\nCommits on Nov 12, 2024: MainLayout, BookingView, RouterLink and drawer\n\nCode\n\nThis setup accomplishes the following:\n\nThe CustomerView and BookingView classes are annotated with @Route, specifying their respective URL paths (“customer” and “booking”) and setting MainLayout as their parent layout14.\nThe MainLayout class extends AppLayout, which provides a header and a responsive drawers.\nIn the MainLayout, we create a header with a logo and a drawer toggle button.\nThe drawer is populated with RouterLink components for both the Customer and Booking views, allowing for navigation between them.\nThe setHighlightCondition method is used to highlight the current active link in the drawer.\n\n\nWith this setup, users can navigate to /customer to see the Customer view and /booking to see the Booking view. The main layout provides a consistent structure across both views, with a header and a navigation drawer that can be toggled on smaller screens",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#commit-b67d768",
    "href": "springboot/sblab8-2.html#commit-b67d768",
    "title": "Lab#SB08-2: Vaadin",
    "section": "6.4 Commit b67d768",
    "text": "6.4 Commit b67d768\nCommits on Nov 13, 2024: Login, LoginView and Configuration\n\nSecurity Vaadin v24.4\n\n/home is public:\n\nAny other view/page needs auth:\n\nBob may navigate with (USER_ROLE):\n\nOnce, Bob is logged (USER_ROLE), there are some view/page (/booking) with ADMIN_ROLE\n\nADMIN_ROLE & /booking:",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab1.html",
    "href": "springboot/sblab1.html",
    "title": "Lab#SB01-1: DataBase",
    "section": "",
    "text": "Welcome to the cifojava2022-4 wiki!",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB01-1: DataBase"
    ]
  },
  {
    "objectID": "springboot/sblab1.html#what-is-h2-database",
    "href": "springboot/sblab1.html#what-is-h2-database",
    "title": "Lab#SB01-1: DataBase",
    "section": "1.1 What is H2 Database",
    "text": "1.1 What is H2 Database\nH2 is pure Java SQL database, which means you can embed H2 directly in your Java applications without any database installation.\n\nVery fast, open source, JDBC API compatible.\nYou can use H2 in different modes, depending on your need:in-memory, embedded or client/server.\nH2 provides a browser-based console application which you can use to access SQL database.\nLightweight: about 2.5MB jar file size. With such features, H2 can be used for rapid prototype development,testing purpose or embedded in Java applications.\n\nH2 Java DataBase",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB01-1: DataBase"
    ]
  },
  {
    "objectID": "springboot/sblab1.html#java-jdbc",
    "href": "springboot/sblab1.html#java-jdbc",
    "title": "Lab#SB01-1: DataBase",
    "section": "1.2 Java JDBC",
    "text": "1.2 Java JDBC\n\n1.2.1 demoMavenH2\nJava™ database connectivity (JDBC) is the JavaSoft specification of a standard application programming interface (API) that allows Java programs to access database management systems. The JDBC API consists of a set of interfaces and classes written in the Java programming language.\nUsing these standard interfaces and classes, programmers can write applications that connect to databases, send queries written in structured query language (SQL), and process the results.\nSince JDBC is a standard specification, one Java program that uses the JDBC API can connect to any database management system (DBMS), as long as a driver exists for that particular DBMS.\n\nProject Code GitHub repo\nProject Documentation",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB01-1: DataBase"
    ]
  },
  {
    "objectID": "springboot/sblab1.html#entity-manager-api",
    "href": "springboot/sblab1.html#entity-manager-api",
    "title": "Lab#SB01-1: DataBase",
    "section": "1.3 Entity Manager API",
    "text": "1.3 Entity Manager API\n\n1.3.1 test-hibernate-jpa\nJava Persistence API is a Java Specification and Standard for Object Relational Mapping (ORM). In Object Relational Mapping we create Java Objects which represents the database entities. ORM also provides an EntityManager which provides methods to create, delete, update and find the objects from database.\nWe don’t need to write low level queries, we just need to use entity manager and access the entities through java objects.\n\nProject Code GitHub repo\nProject Documentation",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB01-1: DataBase"
    ]
  },
  {
    "objectID": "springboot/sblab1.html#jpa-data-spring-boot",
    "href": "springboot/sblab1.html#jpa-data-spring-boot",
    "title": "Lab#SB01-1: DataBase",
    "section": "1.4 JPA Data Spring Boot",
    "text": "1.4 JPA Data Spring Boot\n\n1.4.1 libraryH2Command\nProject repo\nBase project:\n\nPOM\nDataBase H2\nApplication.Properties\nCommand Line Runner with methods to test\n@Entity Book\n@BookService Read and Create operations\n@BookRepository JPA 2.0",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB01-1: DataBase"
    ]
  },
  {
    "objectID": "springboot/sblab2.html",
    "href": "springboot/sblab2.html",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "",
    "text": "Welcome to the cifojava2022-3 wiki!",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB02-1: `JPA` Relationships"
    ]
  },
  {
    "objectID": "springboot/sblab2.html#basic-spring-boot-project",
    "href": "springboot/sblab2.html#basic-spring-boot-project",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.1 Basic Spring Boot project",
    "text": "1.1 Basic Spring Boot project\n\nPreliminary works:\n\nCreate project on Spring Init\nImages, step-by-step to create project\nLombok to make entities simplier\nJava-Faker to create entities\nBe careful with devtools!! You must go to settings and mark it, CTRL+ALT+S    on Advanced Settings: Allow Auto-make\nVery simple project: no database, @BookService with an ArrayList&lt;Book&gt; books where books are stored\n@RestController and @Controller to publish JSON data and an HTML web with Thymeleaf\n\nversion 1.0 : spring boot executions, api REST and web\nversion 2.0 : just some little modifications to explain what th: is\n\nProjects Table",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB02-1: `JPA` Relationships"
    ]
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-book-crud-with-postmanswagger",
    "href": "springboot/sblab2.html#api-rest-book-crud-with-postmanswagger",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.2 API Rest Book CRUD with Postman/Swagger",
    "text": "1.2 API Rest Book CRUD with Postman/Swagger\n\nBase project:\n\nPOM\nAPI REST Read CRUD\nDataBase H2\nApplication.properties\nCommand Line Runner with methods to test\nPostman to test API REST, Postman web\n@Entity, @RestController, @Service, @CrudRepository JPA 2.0, @Component\n\nRepo Code GitHub\nLibrary1 Documentation\n\nProjects Table",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB02-1: `JPA` Relationships"
    ]
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-author-book-onetomany-crud-with-swagger",
    "href": "springboot/sblab2.html#api-rest-author-book-onetomany-crud-with-swagger",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.3 API Rest Author-Book @OneToMany CRUD with Swagger",
    "text": "1.3 API Rest Author-Book @OneToMany CRUD with Swagger\n\nBase project:\n\nLibrary1\nTwo entities related @OneToMany, that is, 1:n\n\nLibrary2 Documentation\nRepo\n\nProjects Table",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB02-1: `JPA` Relationships"
    ]
  },
  {
    "objectID": "springboot/sblab2.html#library-book-manytomany-and-onetoone-crud",
    "href": "springboot/sblab2.html#library-book-manytomany-and-onetoone-crud",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.4 Library-Book @ManyToMany and @OneToOne CRUD",
    "text": "1.4 Library-Book @ManyToMany and @OneToOne CRUD\n\nBase project:\n\nLibrary2\nTwo/Three entities related @ManyToMany, that is, n:m and @OneToOne 1:1\n\nLibrary3 Documentation\nRepo GitHub Code\n\nProjects Table",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB02-1: `JPA` Relationships"
    ]
  },
  {
    "objectID": "springboot/sblab2.html#api-rest-library-book-author-manytomany-onetomany-crud-with-swagger-and-inherence",
    "href": "springboot/sblab2.html#api-rest-library-book-author-manytomany-onetomany-crud-with-swagger-and-inherence",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.5 API Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence",
    "text": "1.5 API Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence\n\nBase project:\n\nLibrary2 and Library3\nInherence and Interficies\nAudit and JavaFaker\nJPQL\n\nBatch operations and Pagination\n\nLibrary4 Documentation\nRepo GitHub Code\n\nProjects Table",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB02-1: `JPA` Relationships"
    ]
  },
  {
    "objectID": "springboot/sblab2.html#thymeleaf-web-project",
    "href": "springboot/sblab2.html#thymeleaf-web-project",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.6 ThymeLeaf Web Project",
    "text": "1.6 ThymeLeaf Web Project\n\nBase project:\n\nLibrary\nTemplates HTML Thymeleaf, Templates Engine\n@Controller instead of @RestController\n\nLibrary5 Documentation\nRepo GitHub Code\n\nProjects Table",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB02-1: `JPA` Relationships"
    ]
  },
  {
    "objectID": "springboot/sblab2.html#pagination-thymeleaf-rest-web-project",
    "href": "springboot/sblab2.html#pagination-thymeleaf-rest-web-project",
    "title": "Lab#SB02-1: JPA Relationships",
    "section": "1.7 Pagination ThymeLeaf-Rest Web Project",
    "text": "1.7 Pagination ThymeLeaf-Rest Web Project\n\nBase project:\n\nLibrary\nTemplates HTML Thymeleaf, Templates Engine\n@RestController\nPagination and Sorting\n\nLibrary6 Documentation\nRepo GitHub Code\n\nProjects Table",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB02-1: `JPA` Relationships"
    ]
  },
  {
    "objectID": "springboot/boot-what-basics.html",
    "href": "springboot/boot-what-basics.html",
    "title": "Spring Boot: fundamentals",
    "section": "",
    "text": "📘 Spring Boot\nWhat?\nJava Spring Framework (Spring Framework) is a popular, open source, enterprise-level framework for creating standalone, production-grade applications that run on the Java Virtual Machine (JVM).\nWhy?\nSpring makes programming Java quicker, easier, and safer for everybody.\nSpring’s focus on speed, simplicity, and productivity has made it the world’s most popular Java framework.\nSpring Boot provides a set of pre-configured options and defaults, as well as a set of tools for quickly creating and running an application .\nSpring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can just run.\nWe take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.\nIf you’re looking for information about a specific version, or instructions about how to upgrade from an earlier release, check out the project release notes section on the wiki.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: fundamentals"
    ]
  },
  {
    "objectID": "springboot/boot-what-basics.html#basic-concepts",
    "href": "springboot/boot-what-basics.html#basic-concepts",
    "title": "Spring Boot: fundamentals",
    "section": "1 Basic Concepts",
    "text": "1 Basic Concepts\nSpring Boot is a framework for building applications based on the Spring Framework. It aims to simplify the development process by providing a set of pre-configured options and defaults, as well as a set of tools for quickly creating and running an application. Some key concepts of Spring Boot include:\n\nAuto-configuration: Spring Boot automatically configures your application based on the dependencies that you have added, eliminating the need for manual configuration.\nStarters: Spring Boot provides a set of “starters” that are pre-configured dependencies for common functionality, such as web development, data access, and security.\nActuator: Spring Boot includes an “Actuator” that provides endpoints for monitoring and managing your application, such as health checks, metrics, and trace information.\nCommand Line Interface: Spring Boot provides a command line interface (CLI) for quickly creating and running applications.\nSpring Initializer: Spring Initializer is a web service that provides a simple way to generate a basic structure for a Spring Boot application.\n\nAll of these concepts are designed to make it easy to build and run a Spring-based application, with minimal configuration and setup required.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: fundamentals"
    ]
  },
  {
    "objectID": "springboot/boot-what-basics.html#fundamentals",
    "href": "springboot/boot-what-basics.html#fundamentals",
    "title": "Spring Boot: fundamentals",
    "section": "2 Fundamentals",
    "text": "2 Fundamentals\n\n\n\nSpring Boot\n\n\nSpring Boot is built on top of the Spring Framework, which is a Java-based framework for building enterprise applications. Some of the key concepts of Spring Boot and how it functions include:\n\nBeans: In Spring, a bean is a Java object that is managed by the Spring container. Beans are typically defined in configuration files, and the Spring container is responsible for instantiating, configuring, and managing the lifecycle of these beans.\nDependency Injection: Spring uses dependency injection to manage the dependencies between beans. This means that instead of instantiating and configuring dependencies manually, you can use annotations or configuration files to tell the Spring container which dependencies a bean has and how they should be instantiated.\nObject-Oriented Programming: Spring is based on object-oriented programming principles, and it uses interfaces and inheritance to create a modular and reusable codebase.\nAspect-Oriented Programming: Spring also provides support for Aspect-Oriented Programming (AOP), which allows you to separate cross-cutting concerns such as logging, security, and transaction management from the core business logic of your application.\nData Access: Spring Boot provides a set of starters and libraries for connecting to databases and performing data access operations. It also provides support for Object-Relational Mapping (ORM) frameworks such as Hibernate and JPA.\nWeb Development: Spring Boot provides a set of starters and libraries for building web applications and RESTful web services. It also provides support for web technologies such as Spring MVC and Thymeleaf.\nAnnotations: Spring Boot uses annotations extensively to configure beans and manage dependencies. Understanding the different annotations available in Spring, such as @Bean, @Autowired, and @Component, can help you effectively use the framework.\nMVC (Model-View-Controller): Spring Boot provides support for the MVC architectural pattern, which separates the application into three layers: the model (data), the view (presentation), and the controller (logic). Understanding how MVC works in Spring Boot can help you structure your application effectively.\nREST (Representational State Transfer): Spring Boot provides support for building RESTful web services. Understanding the principles of REST and how to create RESTful web services using Spring Boot can help you effectively use the framework.\n\nOverall, Spring Boot functions by providing a set of pre-configured options and defaults, as well as a set of tools for quickly creating and running an application using the Spring Framework.\nIt uses concepts such as beans, dependency injection, and OOP to make it easy to build and run a Spring-based application, with minimal configuration and setup required.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: fundamentals"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html",
    "href": "springboot/boot-concepts-th.html",
    "title": "Spring Boot: Thymeleaf",
    "section": "",
    "text": "📘 Thymeleaf\nThymeleaf is a modern server-side Java template engine for both web and standalone environments.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#overview",
    "href": "springboot/boot-concepts-th.html#overview",
    "title": "Spring Boot: Thymeleaf",
    "section": "1 Overview",
    "text": "1 Overview\nThymeleaf uses HTML attributes to add functionality and dynamic behavior to web pages, allowing for server-side rendering and template processing.\n&lt;p th:text=\"'Thymeleaf will display this'\"&gt;text&lt;/p&gt;\nHere Thymeleaf will process the text inside the th:text attribute, and replace the contents of the &lt;p&gt; tag with it.\nThymeleaf works by replacing the contents of the tags that its attributes are defined on. so the final in the browser output will be:\n&lt;p&gt;Thymeleaf will display this&lt;/p&gt;\nNotice that the special attributes are now gone, as well as the text “text” which is now replace with the contents of the Thymeleaf attribute.\nA more complicated example:\n&lt;tr th:each=\"prod : ${prods}\"&gt;\n    &lt;td th:text=\"${prod.name}\"&gt;Onions&lt;/td&gt;\n    &lt;td th:text=\"${prod.price}\"&gt;2.41&lt;/td&gt;\n&lt;tr&gt;\nHere Thymeleaf will repeat the &lt;tr&gt; with the list of products, this is defined by the attribute th:each, it will also remove the dummy content in both the &lt;td&gt; tags, and replace them with the content that is evaluated from th:text=\"${prod.name}\" and th:text=\"${prod.price}\".",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#configuration",
    "href": "springboot/boot-concepts-th.html#configuration",
    "title": "Spring Boot: Thymeleaf",
    "section": "2 Configuration",
    "text": "2 Configuration\nIn order to use thymeleaf in a project, we need to add the following starter to the dependency:\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n&lt;/dependency&gt;\nThe starter spring-boot-starter-thymeleaf added to the project, thanks to the auto-configuration mechanism. Default values include:\n\nHTML templates should be in the resources/templates directory (this is the so-called root)\nfiles should have the html extension (so we won’t have to duplicate this information in the code)\nviewResolver has an appropriate implementation (thymeleafViewResolver)",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#passing-data-to-views-controller-and-view",
    "href": "springboot/boot-concepts-th.html#passing-data-to-views-controller-and-view",
    "title": "Spring Boot: Thymeleaf",
    "section": "3 Passing data to views: @Controller and View",
    "text": "3 Passing data to views: @Controller and View\nThe @Controller will retrun a String object: it will display an HTML view with the appropriate message at the address:\n\nhttp://localhost:8080/\n\nThymeleaf allows you to define templates of HTML views. In order to be able to use additional Thymeleaf functionalities we need to add the appropriate **namespace** to the HTML document (and the html tag):\n\nxmlns:th=“http://www.thymeleaf.org”\n\n\n\n\n\n\n\nDefine the places to replace in the HTML template as follows:\n\n\n\nin the tag we indicate the attribute that should be replaced with the name. We precede this attribute with the name namespace and the character :, e.g.:\n\n&lt;p th:text=...&gt;&lt;/p&gt;\n\nindicate the value to be replaced inside the braces and precede it with a dollar sign, e.g. ${myCustomAttributeName}",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#messages",
    "href": "springboot/boot-concepts-th.html#messages",
    "title": "Spring Boot: Thymeleaf",
    "section": "4 Messages",
    "text": "4 Messages\nThymeleaf by default allows you to define such messages in the messages.properties file, which by default should be located directly in the resources directory.\nIn this file we store the keys and the corresponding values. In the HTML template, we refer to the key using the # sign:\n\nhi.msg=Hi there!\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;body&gt;\n    &lt;p th:text=\"#{hi.msg}\"&gt;&lt;/p\n\n    &lt;a href=\"?lang=fr\"&gt;Français&lt;/a&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\nIn application.properties, we should define locale:\n\nspring.mvc.locale=en\n\nWe could add another lenguage by creating a new file named messages_fr.properties (messages_cat.properties, messages_es.properties, messages_ja.properties) in the same directory.\n\nresources (examples)\n\nThis approach also allows the implementation of internationalization by means of the so-called interceptors:\n@Bean\npublic LocaleResolver localeResolver() {\n    SessionLocaleResolver resolver = new SessionLocaleResolver();\n    resolver.setDefaultLocale(Locale.ENGLISH);\n    return resolver;\n}\n\n@Bean\npublic LocaleChangeInterceptor localeChangeInterceptor() {\n    LocaleChangeInterceptor interceptor = new LocaleChangeInterceptor();\n    interceptor.setParamName(\"lang\");\n    return interceptor;\n}\n\n@Override\npublic void addInterceptors(InterceptorRegistry registry) {\n    registry.addInterceptor(localeChangeInterceptor());\n}",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#thymeleaf-templates-engine",
    "href": "springboot/boot-concepts-th.html#thymeleaf-templates-engine",
    "title": "Spring Boot: Thymeleaf",
    "section": "5 ThymeLeaf Templates Engine",
    "text": "5 ThymeLeaf Templates Engine\nMost Thymeleaf attributes allow their values to be set as or containing expressions, which we will call Standard Expressions because of the dialects they are used in. These can be of five types:\n\n\n\n\n\n\nThymeleaf expresssions\n\n\n\n\n${…} : Variable expressions.\n*{…} : Selection expressions.\n#{…} : Message (i18n) expressions.\n@... : Link (URL) expressions.\n~{…} : Fragment expressions.\n__{…} : use an element inside another\n\n\n\nAttributes th:\n\n\n\n\n\n\nThyemleaf attributes\n\n\n\n\nmessage: &lt;p th:text=\"#{msg.welcome}\"&gt;Welcome everyone!&lt;/p&gt;\nlist: &lt;li th:each=\"book : ${books}\" th:text=\"${book.title}\"&gt;En las Orillas del Sar&lt;/li&gt;\nlink: &lt;form th:action=\"@{/createOrder}\"&gt;\naction: &lt;input type=\"button\" th:value**=\"#{form.submit}\" /&gt;\npath: &lt;a th:href=\"@{/admin/users}\"&gt;\n\n\n\nHow to write th:\n\n\n\nThymeLeaf how TH: works (1/3)",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#fragments",
    "href": "springboot/boot-concepts-th.html#fragments",
    "title": "Spring Boot: Thymeleaf",
    "section": "6 Fragments",
    "text": "6 Fragments\n\nThymeleaf Views: fragments\nemployeeCourse repository\n\n\n\nUsing fragments in Thymeleaf can make it easier to maintain and update web pages, as changes to a fragment will be reflected in all pages that include it.\nIn Thymeleaf, a fragment is a reusable piece of a web page that can be included in multiple pages. It can contain HTML markup, Thymeleaf expressions, and other Thymeleaf features.\nFragments are defined in Thymeleaf using the th:fragment attribute, which is added to any HTML element.\nThe value of the attribute is the name of the fragment. For example:\n&lt;div th:fragment=\"header\"&gt;\n   &lt;h1&gt;Welcome to my website!&lt;/h1&gt;\n&lt;/div&gt;\nThis defines a fragment called “header” that contains a heading element. This fragment can then be included in other pages using the th:replace or th:include attributes.\nFor example:\n&lt;html&gt;\n   &lt;body&gt;\n      &lt;div th:replace=\"fragments/header :: header\"&gt;&lt;/div&gt;\n      &lt;p&gt;This is the content of my page.&lt;/p&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\nThis code includes the “header” fragment in the page using the th:replace attribute. The :: syntax is used to specify the fragment name, and the fragments/header prefix specifies the location of the fragment file.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#layout",
    "href": "springboot/boot-concepts-th.html#layout",
    "title": "Spring Boot: Thymeleaf",
    "section": "7 Layout",
    "text": "7 Layout\n\nemployeeCourse repository\n\n\n\nUsing the Layout Dialect can make it easier to maintain a consistent layout across your web pages, and simplify the process of creating new pages.\nThymeleaf Layout Dialect is a third-party dialect that provides a way to define a common layout for a set of web pages in Thymeleaf.\nWith the Layout Dialect, you can define a template that contains the common structure and layout of your web pages, and then include the content of each page in the appropriate section of the template.\nTo use the Layout Dialect, you need to add the dialect dependency (for Maven):\n&lt;dependency&gt;\n   &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt;\n   &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt;\n   &lt;version&gt;2.5.1&lt;/version&gt;\n&lt;/dependency&gt;\nOnce you have added the dependency, you can use the Layout Dialect in your Thymeleaf templates. Here’s an example of how to define a layout:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;title&gt;My Website&lt;/title&gt;\n   &lt;/head&gt;\n   &lt;body&gt;\n      &lt;header th:replace=\"fragments/header :: header\"&gt;&lt;/header&gt;\n      &lt;div layout:fragment=\"content\"&gt;&lt;/div&gt;\n      &lt;footer th:replace=\"fragments/footer :: footer\"&gt;&lt;/footer&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\nThis template defines a layout that includes a header and a footer. The layout:fragment attribute is used to define a section where the content of each page will be included.\nTo use this layout in a page, you can create a new template that includes the layout and defines the content:\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"&gt;\n   &lt;head&gt;\n      &lt;title&gt;My Page&lt;/title&gt;\n   &lt;/head&gt;\n   &lt;body&gt;\n      &lt;div layout:decorator=\"layout/template\"&gt;\n         &lt;div layout:fragment=\"content\"&gt;\n            &lt;p&gt;This is the content of my page.&lt;/p&gt;\n         &lt;/div&gt;\n      &lt;/div&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\nThis page includes the layout by setting the layout:decorator attribute to the path of the layout template. The content of the page is defined inside the layout:fragment attribute.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#cheatsheet",
    "href": "springboot/boot-concepts-th.html#cheatsheet",
    "title": "Spring Boot: Thymeleaf",
    "section": "8 CheatSheet",
    "text": "8 CheatSheet\n\nThymeleaf CheatSheet\n\n\n\n\n\n\n\nFeature\nDescription\nSyntax\n\n\n\n\nth:text\nSets the text of an element\n&lt;p th:text=\"${someValue}\"&gt;Default Text&lt;/p&gt;\n\n\nth:if\nConditionally renders an element\n&lt;p th:if=\"${someCondition}\"&gt;Visible when condition is true&lt;/p&gt;\n\n\nth:each\nLoops over a collection and renders an element for each item\n&lt;ul&gt;&lt;li th:each=\"item : ${items}\" th:text=\"${item}\"&gt;Default Text&lt;/li&gt;&lt;/ul&gt;\n\n\nth:object\nBinds a form to an object and sets its properties\n&lt;form th:object=\"${user}\"&gt;&lt;input th:field=\"*{name}\" /&gt;&lt;/form&gt;\n\n\nth:action\nSets the URL for a form’s submission\n&lt;form th:action=\"@{/submit}\" method=\"post\"&gt;\n\n\nth:href\nSets the URL for an anchor tag\n&lt;a th:href=\"@{/page}\"&gt;Link Text&lt;/a&gt;\n\n\nth:src\nSets the source URL for an image tag\n&lt;img th:src=\"@{/image.jpg}\" alt=\"Alt Text\" /&gt;\n\n\nth:value\nSets the value of an input field\n&lt;input th:value=\"${someValue}\" /&gt;\n\n\nth:selected\nConditionally selects an option in a select field\n&lt;select&gt;&lt;option th:selected=\"${isSelected}\"&gt;Option Text&lt;/option&gt;&lt;/select&gt;\n\n\nth:disabled\nConditionally disables an input field\n&lt;input th:disabled=\"${isDisabled}\" /&gt;\n\n\nth:readonly\nConditionally sets an input field as read-only\n&lt;input th:readonly=\"${isReadOnly}\" /&gt;\n\n\nth:classappend\nConditionally appends a CSS class to an element\n&lt;div class=\"default\" th:classappend=\"${additionalClass}\"&gt;&lt;/div&gt;\n\n\nth:style\nSets the style attribute of an element\n&lt;div th:style=\"'background-color:' + ${bgColor} + ';'\"&gt;&lt;/div&gt;\n\n\nth:attr\nSets any attribute of an element\n&lt;input th:attr=\"data-id=${itemId}\" /&gt;\n\n\nth:replace\nReplaces an element with another\n&lt;div th:replace=\"fragments/header :: header\"&gt;&lt;/div&gt;\n\n\nth:include\nIncludes a fragment of a template\n&lt;div th:include=\"fragments/footer :: footer\"&gt;&lt;/div&gt;\n\n\nth:unless\nConditionally renders an element when a condition is false\n&lt;p th:unless=\"${someCondition}\"&gt;Visible when condition is false&lt;/p&gt;\n\n\nth:inline\nSets the inline mode of an element\n&lt;script th:inline=\"javascript\"&gt;alert([[${message}]]);&lt;/script&gt;\n\n\nth:textappend\nAppends text to an element\n&lt;span th:textappend=\"${additionalText}\"&gt;Default Text&lt;/span&gt;\n\n\nth:with\nSets a local variable in the current context\n&lt;div th:with=\"varName=${someValue}\"&gt;&lt;/div&gt;\n\n\n\n\nA Cheat Sheet for using the Thymeleaf templating Engine\nMVC and Thymeleaf",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-controller.html",
    "href": "springboot/boot-concepts-controller.html",
    "title": "Spring Boot: Controller",
    "section": "",
    "text": "In Spring Boot, the Model-View-Controller (MVC) pattern is used to separate the application logic into three components: Model - View -Controller",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Controller"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#overwiew",
    "href": "springboot/boot-concepts-controller.html#overwiew",
    "title": "Spring Boot: Controller",
    "section": "1 Overwiew",
    "text": "1 Overwiew\nIn Spring Boot, a controller is a class that handles incoming HTTP requests and returns an HTTP response. There are two ways to handle the HTTP response in Spring Boot controllers: using a model (or ModelMap) or a model and view.\n\n1.1 Model\nA model is an object that holds data to be rendered by a view.\nTo use a model in a @Controller, you need to add the @Controller annotation to the class and use the Model interface as a parameter for the method that handles the HTTP request.\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n\n    @GetMapping(\"/\")\n    public String getHome(Model model) {\n        model.addAttribute(\"message\", \"Welcome to my Spring Boot app!\");\n        return \"home\";\n    }\n}\n\n\nIn this example, the getHome method takes a Model object as a parameter and adds a message to it using the addAttribute method.\n\nThe getHome method returns the name of the view home (html), which will be resolved by Spring Boot to the appropriate view file.\n\n\n\n1.2 Model and View\nA model and view is a combination of a model object and the name of the view to be rendered. To use a model and view in a controller, you need to add the @Controller annotation to the class and use the ModelAndView class as the return type for the method that handles the HTTP request.\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\npublic class HomeController {\n\n    @GetMapping(\"/\")\n    public ModelAndView getHome() {\n        ModelAndView modelAndView = new ModelAndView();\n        modelAndView.addObject(\"message\", \"Welcome to my Spring Boot app!\");\n        modelAndView.setViewName(\"home\");\n        return modelAndView;\n    }\n}\n\n\nIn this example, the getHome method creates a new ModelAndView object and adds a message to the model using the addObject method. The method also sets the name of the view home using the setViewName method.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Controller"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#using-annotations",
    "href": "springboot/boot-concepts-controller.html#using-annotations",
    "title": "Spring Boot: Controller",
    "section": "2 Using Annotations",
    "text": "2 Using Annotations\nIn this table, we will explore some of the most commonly used annotations in Spring Boot. These annotations can be used to map HTTP requests to controller methods, extract data from the request, bind data to model attributes, and handle exceptions. Understanding these annotations is essential for building Spring Boot applications that are reliable, scalable, and maintainable.\n\nSpring Boot Annotations\n\n\n\n\n\n\nAnnotation\nDescription\n\n\n\n\n@Controller\nIndicates that a class serves as a Spring Boot controller.\n\n\n@RequestMapping\nMaps HTTP requests to controller methods.\n\n\n@GetMapping\nMaps HTTP GET requests to controller methods.\n\n\n@PostMapping\nMaps HTTP POST requests to controller methods.\n\n\n@PutMapping\nMaps HTTP PUT requests to controller methods.\n\n\n@DeleteMapping\nMaps HTTP DELETE requests to controller methods.\n\n\n@PathVariable\nExtracts a variable from the URL path.\n\n\n@RequestParam\nExtracts a variable from the query string or request body.\n\n\n@ModelAttribute\nBinds a method parameter to a model attribute.\n\n\n@SessionAttribute\nBinds a method parameter to a session attribute.\n\n\n@InitBinder\nInitializes a web data binder for a specific controller method.\n\n\n@ExceptionHandler\nHandles exceptions thrown by a controller method.\n\n\n@ResponseStatus\nSets the HTTP status code for a controller method.\n\n\n@ResponseBody\nIndicates that a controller method returns a response body instead of a view.\n\n\n@ControllerAdvice\nProvides global exception handling for controllers.\n\n\n\nGET, POST, PUT, PATCH, and DELETE are HTTP methods that are used to perform CRUD (Create, Read, Update, and Delete) operations on resources in a RESTful API.\n\nGET: retrieves a representation of a resource from the server.\nPOST: creates a new resource on the server.\nPUT: updates an existing resource on the server.\nPATCH: partially updates an existing resource on the server.\nDELETE: deletes a resource from the server.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Controller"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#example1-model",
    "href": "springboot/boot-concepts-controller.html#example1-model",
    "title": "Spring Boot: Controller",
    "section": "3 Example1: Model",
    "text": "3 Example1: Model\nThe most commonly used annotation is @GetMapping, which maps HTTP GET requests to a specific method.\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n\n    @GetMapping(\"/\")\n    public String home(Model model) {\n        model.addAttribute(\"message\", \"Welcome to my Spring Boot app!\");\n        return \"home\";\n    }\n}\n\n\nIn this example, the @GetMapping(\"/\") annotation maps HTTP GET requests to the root URL (“/”) to the home method.\nExample1 View",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Controller"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#example2-pathvariable-and-requestbody",
    "href": "springboot/boot-concepts-controller.html#example2-pathvariable-and-requestbody",
    "title": "Spring Boot: Controller",
    "section": "4 Example2: @PathVariable and @RequestBody",
    "text": "4 Example2: @PathVariable and @RequestBody\n@GetMapping(\"/hello\")\npublic String hello() {\n    return \"Hello, World!\";\n}\n\n@PostMapping(\"/users\")\npublic void createUser(@RequestBody User user) {\n    userService.createUser(user);\n}\n\n@GetMapping(\"/users/{id}\")\npublic String getUserById(@PathVariable(\"id\") Long id, Model model) {\n    User user = userService.getUserById(id);\n    model.addAttribute(\"user\", user);\n    return \"user\";\n}\n\n\nIn these examples, the @GetMapping and @PostMapping annotations are used to map HTTP GET and POST requests to specific methods.\n\nThe @PathVariable annotation is used to extract a variable from the URL path, and the @RequestBody annotation is used to map the request body to a Java object.\n\nAn alternative implementation where the User object is created directly in the @Controller:\n@Controller\npublic class UserController {\n    \n    private List&lt;User&gt; users = new ArrayList&lt;&gt;();\n    \n    @PostMapping(\"/users\")\n    public void createUser(@RequestBody User user) {\n        users.add(user);\n    }\n    \n    @GetMapping(\"/users/{id}\")\n    public String getUserById(@PathVariable(\"id\") Long id, Model model) {\n        User user = null;\n        for (User u : users) {\n            if (u.getId() == id) {\n                user = u;\n                break;\n            }\n        }\n        if (user == null) {\n            // handle error case\n        } else {\n            model.addAttribute(\"user\", user);\n        }\n        return \"user\";\n    }\n}\nIn this implementation, we have replaced the userService dependency with an in-memory List&lt;User&gt; to store the user objects.\nIn the createUser() method, we simply add the User object to the list.\nIn the getUserById() method, we search for the User object with the given id in the list and add it to the model if it exists. If the user is not found, we can handle the error case appropriately.\nExample2 View",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Controller"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#example3-requestparam",
    "href": "springboot/boot-concepts-controller.html#example3-requestparam",
    "title": "Spring Boot: Controller",
    "section": "5 Example3: @RequestParam",
    "text": "5 Example3: @RequestParam\nLet’s create a method that uses the @RequestParam annotation to extract a variable from the query string:\n@Controller\npublic class ExampleController {\n\n    @GetMapping(\"/hello\")\n    public String example(@RequestParam(\"name\") String name, Model model) {\n        model.addAttribute(\"message\", \"Hello, \" + name + \"!\");\n        return \"home\";\n    }\n}\nIn this example, the @GetMapping annotation maps HTTP GET requests to the /hello endpoint.\nThe @RequestParam(\"name\") annotation extracts a variable named name from the query string and binds it to the String name method parameter.\nThe Model parameter is used to add an attribute to the model, which will be used to render the view. Finally, the method returns the name of the view, which in this case is home.\n\n\nFor example, if you visit the URL /hello?name=John, the message will say “Hello, John!”.\nAssuming that you have a view named home.html in your application’s templates directory, this controller method will render a message that says “Hello, {name}!” when you visit the URL:\n\n/hello?name=John.\n\nThe value of {name} will be taken from the name parameter in the query string.\nExample3 View\n\n5.1 @RequestParam and @PathVariable\n\n\n\n\n\n\n@RequestParam and @PathVariable\n\n\n\nIn Spring Boot, @RequestParam and @PathVariable are both annotations used to extract data from an HTTP request.\nThe main difference between the two is the source of the data they extract:\n\n@RequestParam : query string or request body\n@PathVariable : URL path\n\n\n\n@RequestParam extracts data from the query string or request body, whereas @PathVariable extracts data from the URL path.\nFor example, if you have a URL like:\n\n/users?name=john\n\nyou can use @RequestParam to extract the name parameter value john from the query string.\nOn the other hand, if you have a URL like:\n\n/users/123\n\nyou can use @PathVariable to extract the id parameter value 123 from the URL path.\nIn general, use @RequestParam when you need to extract data from the query string or request body, and use @PathVariable when you need to extract data from the URL path.\n\nSpring MVC RequestMapping Annotation Example with Controller, Methods, Headers, Params, @RequestParam, @PathVariable.\nAnnotation Interface RequestMapping",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Controller"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-controller.html#url-structure",
    "href": "springboot/boot-concepts-controller.html#url-structure",
    "title": "Spring Boot: Controller",
    "section": "6 URL structure",
    "text": "6 URL structure\n\n\n\nURL Structure Protocol Credential Host Path Username ( Optional ) Password ( Optional ) Hostname Port ( Optional ) Pathname Query Strings ( Optional ) Subdomain ( s ) ( Optional ) Domain Top Level Domain\n\n\n\nKeep a simple URL structure\nWhat is a URL\nURL Structure cheatsheet",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Controller"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-3.html",
    "href": "springboot/boot-concepts-jpa-3.html",
    "title": "Spring Boot: JPA Relationships",
    "section": "",
    "text": "📘 JPA Relationships\nSpring Boot provides an implementation of the Java Persistence API (JPA) to simplify database access: ORM (Object-Relational Mapping)\nIn JPA, entity classes represent tables in the database, and relationships between entities are mapped using annotations.\nThere are three basic relationships:\n\nOneToOne: Represents a single-valued association\nOneToMany / ManyToOne: Represents a multi-valued association\nManyToMany: Represents a multi-valued association where multiple instances",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Relationships"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-3.html#onetomany-and-manytoone",
    "href": "springboot/boot-concepts-jpa-3.html#onetomany-and-manytoone",
    "title": "Spring Boot: JPA Relationships",
    "section": "1.1 OneToMany and ManyToOne",
    "text": "1.1 OneToMany and ManyToOne\n\n\n\nEntity @oneToMany\n\n\nOneToMany Unidirectional\n\nOne entity has a collection of another entity\nOnly the owning side (the “One” side) has a reference to the other entity\nExample: One Department has many Employees\n\n@Entity\npublic class Department {\n    @OneToMany\n    private List&lt;Employee&gt; employees;\n}\n\n@Entity\npublic class Employee {\n    // No reference to Department\n}\n\n1.1.1 @OneToMany attributes\n\n\nEager loading fetches all required data upfront when an object is first loaded. It immediately initializes and loads related entities or resources, ensuring everything is readily available.\nThis approach can improve performance for frequently accessed data but may increase initial load times and memory usage.\n\nLazy loading, conversely, defers data loading until it’s explicitly requested. It retrieves only the essential data initially, loading related entities or resources on-demand when accessed.\nThis method can enhance initial performance and reduce memory consumption, particularly for large datasets or infrequently used resources.\nHowever, it may introduce slight delays when accessing lazy-loaded data for the first time\n\n\nfetch: Specifies whether to lazily or eagerly load the related entities. Default is FetchType.LAZY.\ncascade: Specifies which operations should cascade to child entities. Options include ALL, PERSIST, MERGE, REMOVE, etc.\norphanRemoval: If true, removes child entities when they are removed from the collection. Default is false.\nmappedBy: Specifies the field that owns the relationship in the child entity.\noptional: If false, a non-null relationship must always exist.\n\n\n\n\n\n\n\nEager vs Lazy\n\n\n\nEager loading fetches all related data immediately, making everything available upfront. It can be faster for frequent access but may use more memory.\nLazy loading, on the other hand, loads related data only when requested, initializing it on-demand. This approach saves memory but might cause slight delays on first access.\n\n\nKey Points\n\nFor @OneToMany and @ManyToMany, the default fetch type is LAZY.\nFor @ManyToOne and @OneToOne, the default fetch type is EAGER5.\nUsing FetchType.LAZY is generally recommended to avoid performance issues, especially for collections.\nThe cascade attribute determines which operations should be cascaded from parent to child entities.\nThe orphanRemoval attribute is useful for automatically removing child entities when they are no longer referenced by the parent.\n\nManyToOne Unidirectional\n\n\nManyToOne Unidirectional example: Order and Customer\n\nMany entities are associated with one entity\nOnly the owning side (the “Many” side) has a reference to the other entity\nExample: Many Employees belong to one Department\n\n@Entity\npublic class Employee {\n    @ManyToOne\n    private Department department;\n}\n\n@Entity\npublic class Department {\n    // No reference to Employee\n}\nBidirectional Relationships\n\n\nBidirectional Relationships example:\n\nLibrary2: API Rest Author Book @OneToMany CRUD with Swagger\nTestCreateBookingTable() with JPA, TableRestaurant 1:n Booking bidirectional relationship\n\n\nBoth entities have references to each other\nThe “Many” side is usually the owning side\nExample: One Department has many Employees, and each Employee belongs to one Department\n\n@Entity\npublic class Department {\n    @OneToMany(mappedBy = \"department\")\n    private List&lt;Employee&gt; employees;\n}\n\n@Entity\npublic class Employee {\n    @ManyToOne\n    private Department department;\n}\n\nIn bidirectional relationships, use mappedBy on the non-owning side to indicate the owning side’s field name.\n\n\n\n\n\n\n\nWhy Serialization is Needed?\n\n\n\nSerialization is the process of converting an object or class into a byte stream. This byte stream can then be easily saved to a file, sent over a network, or stored in a database.\nHibernate uses serialization to create deep copies of entity objects for various purposes, such as detached entities, Session Management or caching.\nFor example: Collections within entities (like an ArrayList&lt;Menu&gt; menus within a Order entity ) are often serialized to store them efficiently in the database or to manage state changes.\nImplementing Serializable is not always the best solution. In some cases, it might be better to adjust your entity relationships (@OneToMany) or use different mapping strategies (@ElementCollection for simple collections).\n\n\n\n\n1.1.2 Casting\nThe original code avoids these issues by declaring orderToSave directly as TakeAwayOrder, eliminating the need for casting. This approach is generally preferred when possible, as it’s safer and more straightforward.\n\n// Assume OrderRestaurant is a superclass of TakeAwayOrder\nOrderRestaurant orderToSave = new TakeAwayOrder(\n    \"T11\", new Date(), \"Alice\", 1, 10.99,\n    true, new ArrayList&lt;&gt;(Arrays.asList(menu1)), null );\n\n// We need to cast here\n((TakeAwayOrder) orderToSave).setCustomerTakeAway(customer1);\n\n// We might need to cast here too, depending on the repository's type parameter\ntakeAwayOrderRepository.save((TakeAwayOrder) orderToSave);\n\n\nUpcasting: When we assigned a TakeAwayOrder object to an OrderRestaurant variable, we performed an implicit upcast. This is always safe because a TakeAwayOrder is an OrderRestaurant.\nDowncasting: When we cast orderToSave back to TakeAwayOrder, we’re performing a downcast. This is potentially risky because not all OrderRestaurant objects are TakeAwayOrder objects.\n\n\n\n\n\n\n\nWhy casting can be problematic?\n\n\n\n\nType safety: Downcasting can lead to runtime errors if the object isn’t actually of the type you’re casting to.\nCode readability: Excessive casting can make code harder to read and understand.\nPerformance: While minor, casting does involve a runtime check.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Relationships"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-3.html#manytomany",
    "href": "springboot/boot-concepts-jpa-3.html#manytomany",
    "title": "Spring Boot: JPA Relationships",
    "section": "1.2 ManyToMany",
    "text": "1.2 ManyToMany\nManyToMany Unidirectional\n\nMultiple entities are associated with multiple entities of another type\nOnly one side has a reference to the other entity\nExample: Many Students can enroll in many Courses\n\n\n\n\n@ManyToMany RestaurantManger: ORDER\n@ManyToMany RestaurantManger: MENU\n\n@Entity\npublic class Student {\n    @ManyToMany\n    @JoinTable(name = \"STUDENT_COURSE\",\n        joinColumns = @JoinColumn(name = \"STUDENT_ID\"),\n        inverseJoinColumns = @JoinColumn(name = \"COURSE_ID\"))\n    private Set&lt;Course&gt; courses;\n}\n\n@Entity\npublic class Course {\n    // No reference to Student\n}\nManyToMany Bidirectional\n\nBoth entities have references to each other\nOne side is designated as the owning side, the other the inverse side\n\nExample: Many Students can enroll in many Courses, and each Course can have many Students\n\n\n@Entity\npublic class Student {\n    @ManyToMany\n    @JoinTable(name = \"STUDENT_COURSE\",\n        joinColumns = @JoinColumn(name = \"STUDENT_ID\"),\n        inverseJoinColumns = @JoinColumn(name = \"COURSE_ID\"))\n    private Set&lt;Course&gt; courses;\n}\n\n@Entity\npublic class Course {\n    @ManyToMany(mappedBy = \"COURSES\")\n    private Set&lt;Student&gt; students;\n}\n\nIn bidirectional ManyToMany relationships, use mappedBy on the non-owning side to indicate the owning side’s field name. The @JoinTable annotation is used to specify the join table details.\n\n\n\n\n\n\n\nManyToMany Considerations\n\n\n\n\nManyToMany relationships often require a join table in the database\nConsider using an intermediate entity for complex relationships or when additional attributes are needed for the relationship\nBe cautious of performance implications with large datasets\n\n\n\n\n1.2.1 OrphanRemoval and Cascade\n\nCascade propagates operations from parent to child entities, while orphanRemoval automatically deletes child entities no longer associated with a parent.\n\nCascade affects specified actions (e.g., PERSIST, REMOVE), whereas orphanRemoval only deals with removing disassociated children.\n\n\n\n\n\n\nCascade vs OrphanRemoval\n\n\n\nThe main differences between cascade and orphanRemoval in JPA are:\n\nScope of operation:\n\nCascade applies to all operations specified (e.g. PERSIST, MERGE, RE`MOVE, etc.) and propagates them from parent to child entities&lt;.\nOrphanRemoval only deals with removing child entities that are no longer associated with the parent .\n\nWhen they take effect:\n\nCascade operations occur when the specified action is performed on the parent entity .\nOrphanRemoval occurs when a child entity is disassociated from its parent, even without explicitly calling remove.\n\nUse cases:\n\nCascade is useful for propagating operations like persist or remove from parent to children.\nOrphanRemoval is useful for automatically deleting child entities that are no longer referenced by a parent.\n\nBehavior:\n\nCascadeType.REMOVE will only delete child entities when the parent is explicitly removed.\nOrphanRemoval will delete child entities as soon as they are disassociated from the parent, even if the parent is not removed\n\nCombining them:\n\nThey can be used together. CascadeType.ALL with orphanRemoval=true provides the most comprehensive cascading behavior.\n\n\n\n\n\n1.2.1.1 Example: Student and Course Entities\n\n\n\n\n\nclassDiagram\ndirection RL\n    class Student {\n        -Long id\n        -String name\n        -Set&lt;Course&gt; courses\n        +enrollInCourse(Course course)\n        +dropCourse(Course course)\n    }\n    class Course {\n        -Long id\n        -String title\n        -Set&lt;Student&gt; students\n    }\n    class SchoolService {\n        -StudentRepository studentRepository\n        -CourseRepository courseRepository\n        +manageEnrollment()\n    }\n\n    Student \"*\" -- \"*\" Course : enrolls in\n    SchoolService --&gt; Student : uses\n    SchoolService --&gt; Course : uses\n    SchoolService &lt;-- StudentRepository : uses\n    SchoolService &lt;-- CourseRepository : uses\n\n    \n    \n\n\n\n\n\n\n\nLet’s see an example involving Student and Course entities in a school system, where orphan removal is meaningful.\nStudent @Entity owner-side\nimport javax.persistence.*;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    private String name;\n\n    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, \n    orphanRemoval = true)\n    @JoinTable(\n        name = \"student_course\",\n        joinColumns = @JoinColumn(name = \"STUDENT_ID\"),\n        inverseJoinColumns = @JoinColumn(name = \"COURSE_ID\")\n    )\n    private Set&lt;Course&gt; courses = new HashSet&lt;&gt;();\n\n    // Constructors, getters, setters, and utility methods\n\n    public void enrollInCourse(Course course) {\n        courses.add(course);\n        course.getStudents().add(this); \n        // Maintain bidirectional relationship\n    }\n\n    public void dropCourse(Course course) {\n        courses.remove(course);\n        course.getStudents().remove(this); \n        // Maintain bidirectional relationship\n    }\n}\nCourse @Entity inverse-side\nimport javax.persistence.*;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\npublic class Course {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    private String title;\n\n    @ManyToMany(mappedBy = \"COURSES\")\n    private Set&lt;Student&gt; students = new HashSet&lt;&gt;();\n\n    // Constructors, getters, setters, and utility methods\n}\nHere’s how we use these entities in a service or test:\npublic class SchoolService {\n\n    @Autowired\n    private StudentRepository studentRepository;\n\n    @Autowired\n    private CourseRepository courseRepository;\n\n    public void manageEnrollment() {\n        // Create some courses\n        Course math = new Course(\"Mathematics\");\n        Course science = new Course(\"Science\");\n\n        // Save courses\n        courseRepository.save(math);\n        courseRepository.save(science);\n\n        // Create a student and enroll in courses\n        Student issac = new Student(\"Isaac Boncodi\");\n        issac.enrollInCourse(math);\n        issac.enrollInCourse(science);\n\n        // Save the student (this will also\n        // save the relationships)\n        studentRepository.save(issac);\n\n        // Drop the Science course\n        issac.dropCourse(science);\n\n        // Now if we save issac again, the Science course\n        // will be removed from the database\n        // if no other students are enrolled in it.\n        studentRepository.save(issac);\n        \n        // The Science course will be removed\n        // if it's no longer associated with any students.\n    }\n}\n\nEntities: Student and Course are related through a many-to-many relationship with a join table (student_course).\nOrphan Removal: The orphanRemoval = true attribute in the Student class means that if a Student drops a Course, and no other students are enrolled in that course, it will be removed from the database.\nMethods:\n\nenrollInCourse: Adds a course to a student’s list and maintains the bidirectional relationship.\ndropCourse: Removes a course from a student’s list and maintains the bidirectional relationship.\n\nUsage: When you drop a course and save the Student, if that course is no longer associated with any other students, it will be deleted from the database.\n\n\n\n\n1.2.2 ManyToMany with Join Table @Entity\n\n@Entity @ManyToMany with Join Table: in this particular case we will use two @OneToMany relationships to create a many-to-many, centered and owned by the join table.\n\n\nRepresents a many-to-many relationship using an intermediate entity\nThe join table becomes an entity itself, with two one-to-many relationships\nProvides more flexibility and allows additional attributes on the relationship\nExample: Students enrolled in Courses, with additional enrollment information\n\n@Entity\npublic class Student {\n    @OneToMany(mappedBy = \"student\")\n    private List&lt;Enrollment&gt; enrollments;\n}\n\n@Entity\npublic class Course {\n    @OneToMany(mappedBy = \"course\")\n    private List&lt;Enrollment&gt; enrollments;\n}\n\n@Entity\npublic class Enrollment {\n    @ManyToOne\n    private Student student;\n\n    @ManyToOne\n    private Course course;\n\n    private LocalDate enrollmentDate;\n    private String grade;\n}\nIn this approach:\n\nThe Enrollment entity serves as the join table\nIt has two @ManyToOne relationships: one to Student and one to Course\nAdditional fields like enrollmentDate and grade can be added to the Enrollment entity\nBoth Student and Course have @OneToMany relationships to Enrollment\nThe mappedBy attribute in @OneToMany indicates the owning side of the relationship\n\n\nThis structure allows for more detailed modeling of the relationship between students and courses, enabling the storage of relationship-specific data and easier querying of the association.\n\nKey Points\nThis structure allows you to:\n\nAdd additional fields to the relationship (e.g., enrollmentDate)\nEasily query the relationship from both sides\nMaintain better control over the lifecycle of the relationship\n\n\n\n1.2.3 When two objects are equal? Object Identity\n\nThe difference between comparing objects based on object identity and comparing them based on field values lies in how equality is determined:\n\nby identity, that is, by using their memory addresses\nby their field values\n\n\nObject Identity\n\nObject Identity refers to comparing objects using their memory addresses (i.e., whether they are the same instance in memory).\nIn Java, this is done using the == operator.\nTwo objects are considered equal based on object identity if they refer to the same memory location.\n\nField Values\n\nField Values refer to comparing objects based on the values of their fields.\nIn Java, this is typically done using the equals method.\nTwo objects are considered equal based on field values if their corresponding fields have the same values, even if they are different instances in memory.\n\nExample:\nConsider the following MenuRestaurant class:\n\npublic class MenuRestaurant {\n    private int id;\n    private String name;\n\n    // Constructors, getters, and setters\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        MenuRestaurant that = (MenuRestaurant) o;\n        return id == that.id && Objects.equals(name, that.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id, name);\n    }\n}\n\nComparing Based on Object Identity\nMenuRestaurant menu1 = \n    new MenuRestaurant(1, \"Pizza\");\nMenuRestaurant menu2 = \n    new MenuRestaurant(1, \"Pizza\");\n\nSystem.out.println(menu1 == menu2);\n// false, because they are different instances\nComparing Based on Field Values\nMenuRestaurant menu1 =\n    new MenuRestaurant(1, \"Pizza\");\nMenuRestaurant menu2 =\n    new MenuRestaurant(1, \"Pizza\");\n\nSystem.out.println(menu1.equals(menu2));\n// true, because their fields are equal\n\n\n1.2.4 Using AssertJ with Comparator\n\npublic void testAddingMenusToOrder()\nHeap and Stack\n\n\nusingElementComparator(Comparator.comparing(MenuRestaurant::getId))\n\nWhen you use the above expression, you are specifying that the comparison should be based on the id field of the MenuRestaurant objects:\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nList&lt;MenuRestaurant&gt; menuList = Arrays.asList(menu1, menu2, menu3);\n\nassertThat(menuList)\n    .usingElementComparator(Comparator.comparing(MenuRestaurant::getId))\n    .containsExactlyInAnyOrder(menu1, menu2, menu3);\n\nIn this case, the comparison is based on the id field, not the object identity or the default equals method. This allows you to verify that the collection contains the expected elements based on their IDs, regardless of their memory addresses.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Relationships"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-3.html#onetomany",
    "href": "springboot/boot-concepts-jpa-3.html#onetomany",
    "title": "Spring Boot: JPA Relationships",
    "section": "2.1 @OneToMany",
    "text": "2.1 @OneToMany\n@OneToMany: This annotation is used to represent a one-to-many relationship between two entities.\n\n\nFor example, if a customer can have multiple orders, you can define a @OneToMany relationship between the Customer entity and the Order entity.\n\n\n\n\n\n\nTip\n\n\n\nExample:\nAPI Rest Author-Book @OneToMany CRUD with Swagger",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Relationships"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-3.html#manytoone",
    "href": "springboot/boot-concepts-jpa-3.html#manytoone",
    "title": "Spring Boot: JPA Relationships",
    "section": "2.2 @ManyToOne",
    "text": "2.2 @ManyToOne\n@ManyToOne: This annotation is used to represent a many-to-one relationship between two entities.\n\n\nFor example, if an order belongs to a customer, you can define a @ManyToOne relationship between the Order entity and the Customer entity.\n\n\n\n\n\n\nTip\n\n\n\nExample:\nLibrary-Book @ManyToMany and @OneToOne CRUD",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Relationships"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-3.html#manytomany-1",
    "href": "springboot/boot-concepts-jpa-3.html#manytomany-1",
    "title": "Spring Boot: JPA Relationships",
    "section": "2.3 @ManyToMany",
    "text": "2.3 @ManyToMany\n@ManyToMany: This annotation is used to represent a many-to-many relationship between two entities.\n\n\nFor example, if a book can have multiple authors and an author can have written multiple books, you can define a @ManyToMany relationship between the Book entity and the Author entity.\n\n\n\n\n\n\nExample:\n\n\n\nAPI Rest Library-Book-Author @ManyToMany @OneToMany CRUD with Swagger and Inherence",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Relationships"
    ]
  },
  {
    "objectID": "springboot/resources.html",
    "href": "springboot/resources.html",
    "title": "Spring Boot Resources",
    "section": "",
    "text": "MarkUp Resources",
    "crumbs": [
      "Spring Boot readings",
      "Spring Boot Resources"
    ]
  },
  {
    "objectID": "springboot/resources.html#webs",
    "href": "springboot/resources.html#webs",
    "title": "Spring Boot Resources",
    "section": "1 Webs",
    "text": "1 Webs\n\n1.1 The PetClinic example\n\nThe Spring PetClinic Community\nThe Spring PetClinic Demo\nSpringBoot github\n\n\n\n1.2 employeeCourse\n\nemployeeCourse github code\nemployeeCourse wiki",
    "crumbs": [
      "Spring Boot readings",
      "Spring Boot Resources"
    ]
  },
  {
    "objectID": "springboot/resources.html#books",
    "href": "springboot/resources.html#books",
    "title": "Spring Boot Resources",
    "section": "2 Books",
    "text": "2 Books\n\nMicroservices for Java Developers\n\n\n2.1 Stratospheric\n\n\n\nStratospheric\n\n\n\nFrom Zero to Production with Spring Boot and AWS\n\n\n\n2.2 Quarkus for Spring Developers\n\nQuarkus for Spring Developers\nQuarkus for Spring Developers GitHub\nQuarkus for Spring Developers Book\n\n\n\n2.3 Microservices Patterns\n\n\n\nMicroservices Example ftgo\n\n\n\nMicroservices Patterns\nMicroservices Patterns GitHub\nMicroservices Patterns e-book\n\n\n\n2.4 Introduction to Quarkus, MicroProfile, and Kubernetes\n\nIntroduction to Quarkus, MicroProfile, and Kubernetes",
    "crumbs": [
      "Spring Boot readings",
      "Spring Boot Resources"
    ]
  },
  {
    "objectID": "devops/devops-what-lifecycle.html",
    "href": "devops/devops-what-lifecycle.html",
    "title": "Software Lifecycle",
    "section": "",
    "text": "And a developer needs such a set skill due to the wide and integral software lifecycle that allows to build apps.\n\n\n\n\n\nThe software development lifecycle (SDLC) is a process that describes the stages involved in creating and deploying software. It typically includes the following six steps:\n\nPlanning: This stage involves identifying the goals and objectives of the software, as well as determining the resources and timelines required to develop it.\nDesign: In this stage, the software’s architecture and user interface are created, and the functional and non-functional requirements are defined.\nTest: This stage involves the implementation of test-driven development (TDD). It starts by writing automated test cases based on the requirements and design of the software. The developer then writes the minimum amount of code needed to pass the test, and repeat this process until all the requirements are met.\nDevelop: The actual coding of the software takes place during this stage. This may involve writing code in a specific programming language or using certain development tools.\nMaintain: Once the software is tested and developed, it will be integrated into the primary source code through developer efforts, usually by leveraging training environments to detect further errors or defects.\nDeploy: The final stage is deployment, where the software is made available to users. This may involve installing the software on individual computers or deploying it to a server for multiple users to access.",
    "crumbs": [
      "What is DevOps",
      "Software Lifecycle"
    ]
  },
  {
    "objectID": "devops/devops-network-grpc.html",
    "href": "devops/devops-network-grpc.html",
    "title": "Network: gRPC",
    "section": "",
    "text": "1 Overview\ngRPC, which stands for Remote Procedure Call, is an open-source framework developed by Google. It is designed for building efficient and scalable microservices, APIs, and other distributed systems. gRPC uses a binary serialization format called Protocol Buffers (protobuf) for data interchange and supports multiple programming languages.\nKey features of gRPC include:\n\nRPC Style Communication: gRPC enables communication between distributed systems using a Remote Procedure Call (RPC) style. This allows methods to be called on a server as if they were local procedures.\nProtocol Buffers: gRPC uses Protocol Buffers as its interface definition language (IDL) for describing the structure of the data being sent between the client and server. Protocol Buffers offer a language-agnostic, efficient, and extensible way to serialize structured data.\nHTTP/2 Protocol: gRPC uses HTTP/2 as its transport protocol. HTTP/2 provides features such as multiplexing, header compression, and flow control, making communication more efficient compared to traditional HTTP/1.x.\nBidirectional Streaming: gRPC supports bidirectional streaming, allowing both the client and server to send a stream of messages to each other. This is useful for scenarios where continuous communication is required.\nPluggable: gRPC is designed to be extensible, and it supports authentication, load balancing, retries, and other features through pluggable components.\nCode Generation: gRPC generates client and server code in various programming languages based on the service definition specified in Protocol Buffers. This helps developers focus on business logic rather than dealing with low-level networking details.\nLanguage Support: gRPC supports a variety of programming languages, including but not limited to C++, Java, Python, Go, Ruby, C#, and more.\n\ngRPC is commonly used in microservices architectures, where it facilitates communication between different services in a scalable and efficient manner.\nIt has gained popularity for its performance, language-agnostic support, and features suitable for modern distributed systems.\n\n\n2 Introduction\n\n\nNew to gRPC? Start with the following pages:\n\nIntroduction to gRPC\nCore concepts, architecture and lifecycle\nFAQ\n\n\n\n\n3 Working with Protocol Buffers\nBy default, gRPC uses Protocol Buffers, Google’s mature open source mechanism for serializing structured data (although it can be used with other data formats such as JSON).\nThe first step when working with protocol buffers is to define the structure for the data you want to serialize in a proto file: this is an ordinary text file with a .proto extension.\nProtocol buffer data is structured as messages, where each message is a small logical record of information containing a series of name-value pairs called fields.\nHere’s a simple example:\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  bool has_ponycopter = 3;\n}\nThen, once you’ve specified your data structures, you use the protocol buffer compiler protoc to generate data access classes in your preferred language(s) from your proto definition. These provide simple accessors for each field, like name() and set_name(), as well as methods to serialize/parse the whole structure to/from raw bytes. So, for instance, if your chosen language is C++, running the compiler on the example above will generate a class called Person. You can then use this class in your application to populate, serialize, and retrieve Person protocol buffer messages.\nYou define gRPC services in ordinary proto files, with RPC method parameters and return types specified as protocol buffer messages:\n// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\ngRPC uses protoc with a special gRPC plugin to generate code from your proto file: you get generated gRPC client and server code, as well as the regular protocol buffer code for populating, serializing, and retrieving your message types.\n\n\n4 References\n\ngRPC in java\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Network protocols",
      "Network: gRPC"
    ]
  },
  {
    "objectID": "devops/devops-lab-springbookss3.html",
    "href": "devops/devops-lab-springbookss3.html",
    "title": "Lab 3: Spring Boot and AWS S3 publisher",
    "section": "",
    "text": "Spring Boot deploy\n\n\nSpring Boot app build with Jenkins via Github and deployed to AWS:\n\ncreate Spring Boots projects\ncommit && push to GitHub\ncreate .jar executable from Github with Jenkins\nUpload .jar to AWS S3 with s3publisher\nconnect AWS S3 to AWS AEB\nAWS AEB deploy and publish\n\n\n1 References\n\nSpring Boot AWS S3\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 3: Spring Boot and AWS S3 publisher"
    ]
  },
  {
    "objectID": "devops/devops-vc-github.html",
    "href": "devops/devops-vc-github.html",
    "title": "GitHub",
    "section": "",
    "text": "GitHub logo",
    "crumbs": [
      "Version Control",
      "GitHub"
    ]
  },
  {
    "objectID": "devops/devops-vc-github.html#overview",
    "href": "devops/devops-vc-github.html#overview",
    "title": "GitHub",
    "section": "1 Overview",
    "text": "1 Overview\nGitHub is a software development platform in the cloud. It’s used for storing, tracking, and collaborating on software projects.\nGitHub users create accounts, upload files, and create coding projects. But the real work of GitHub happens when users begin to collaborate.",
    "crumbs": [
      "Version Control",
      "GitHub"
    ]
  },
  {
    "objectID": "devops/devops-vc-github.html#install-cli-gh",
    "href": "devops/devops-vc-github.html#install-cli-gh",
    "title": "GitHub",
    "section": "2 Install CLI gh",
    "text": "2 Install CLI gh\nInstalling gh on Linux and BSD\ntype -p curl &gt;/dev/null || sudo apt install curl -y\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&& sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&& echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list &gt; /dev/null \\\n&& sudo apt update \\\n&& sudo apt install gh -y\nif for some reasson gh does not install, try it another time:\nsudo apt update\nsudo apt install gh\nGitHub CLI manual",
    "crumbs": [
      "Version Control",
      "GitHub"
    ]
  },
  {
    "objectID": "devops/devops-vc-github.html#login-and-logout-to-github.com-from-cli-gh-on-linux",
    "href": "devops/devops-vc-github.html#login-and-logout-to-github.com-from-cli-gh-on-linux",
    "title": "GitHub",
    "section": "3 Login and logout to GitHub.com from CLI gh on linux",
    "text": "3 Login and logout to GitHub.com from CLI gh on linux\n\n3.1 Global variables\nCreating global credential, if working in a VM\nGitHub tasks:\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n$git config --global user.name \"Mona Lisa\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.paasword \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\n\n\n3.2 CLI gh\n\n\n\nLog in CLI set-up\n\n\n\n\n\nRedirection to browser and input code\n\n\n\n\n\nLogin succesfull\n\n\n\n\n\nLog out\n\n\n\nmore info on\n\n\n3.3 Register an existing account with a token with IntelliJ IDEA 2022.3\nIntelliJ IDEA lets you manage Git projects hosted on GitHub directly from the IDE: clone repositories, share your projects, create forks, share code through gists, create pull requests and review incoming pull requests.\nRegister an existing account with a token",
    "crumbs": [
      "Version Control",
      "GitHub"
    ]
  },
  {
    "objectID": "devops/devops-network-ping.html",
    "href": "devops/devops-network-ping.html",
    "title": "Network: Ping",
    "section": "",
    "text": "1 Overview\nPing, a network utility, is used to test the reachability of a host on an Internet Protocol (IP) network. It also measures the round-trip time for messages sent from the originating host to a destination computer. \nThe name “ping” comes from the sonar sound used by submarines to detect other objects in the water.\nIn the context of networking, “ping” is analogous to sending a signal to determine if a remote host is responsive.\nThe basic syntax of the ping command is as follows:\nping [options] destination\nHere, “destination” can be an IP address or a domain name. The command sends Internet Control Message Protocol (ICMP) Echo Request messages to the destination and waits for Echo Reply messages. The round-trip time and other statistics are displayed as output.\nPing is a valuable tool for network troubleshooting and diagnostics, providing insights into network connectivity and latency.\n\n\n\n2 Reference\n\nWhat is a ping?\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Network protocols",
      "Network: Ping"
    ]
  },
  {
    "objectID": "devops/devops-what-intro.html",
    "href": "devops/devops-what-intro.html",
    "title": "DevOps: Introduction",
    "section": "",
    "text": "📘 DevOps\nDevOps is a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.",
    "crumbs": [
      "What is DevOps",
      "DevOps: Introduction"
    ]
  },
  {
    "objectID": "devops/devops-what-intro.html#overview",
    "href": "devops/devops-what-intro.html#overview",
    "title": "DevOps: Introduction",
    "section": "",
    "text": "📘 DevOps\nDevOps is a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.",
    "crumbs": [
      "What is DevOps",
      "DevOps: Introduction"
    ]
  },
  {
    "objectID": "devops/devops-what-intro.html#what-devops-isnt",
    "href": "devops/devops-what-intro.html#what-devops-isnt",
    "title": "DevOps: Introduction",
    "section": "2 What DevOps Isn’t",
    "text": "2 What DevOps Isn’t\n\n\n\n\n\nGiven that DevOps is a philosophy… a management approach… and the combination of multiple IT disciplines… it might be easier to quickly look at some of what it isn’t.\n\nDevOps is not Agile. That said, your teams might indeed use Agile as a development methodology within an overall DevOps-style approach. Agile is certainly DevOps-compatible, and, like DevOps, values short, continual improvement.\nDevOps is not Continuous Integration. That said, CI is often a part of DevOps-style behavior. The two can be really closely related, in fact - so closely that it’s hard to tell the difference. I suppose you could argue that it’s difficult to practice the DevOps philosophy without using CI as an enabling implementation, but you can definitely have CI without behaving like a DevOps organization, so the two aren’t exactly the same thing.\nDevOps isn’t “the developers running Operations.” If anything, it’s Operations automating things to the point where Operations runs itself in response to authorized actions taken by other roles, including developers.\nDevOps isn’t a software development methodology. See the first bullet, above. DevOps is what happens while software development is happening, and largely what happens when software development (or a cycle of it), is done. You still need to manage your software development - you just need to use a methodology that’s DevOps-compatible.\nDevOps is not automation. However, you can’t have DevOps without automation. Automation is perhaps the biggest thing that Operations brings to the DevOps table, in fact.\n\n\nFurther, it actually seems to be an unstated goal of many DevOps champions to avoid the creation of any kind of trademarked, rigid, rulebook of “how to do DevOps,” as ITIL or TQM or something. This book certainly doesn’t attempt to provide “rules;” the goal here is to provide some understanding of what DevOps’ broad goals are.\n\nDevOps by DevOps Training",
    "crumbs": [
      "What is DevOps",
      "DevOps: Introduction"
    ]
  },
  {
    "objectID": "devops/devops-what-intro.html#what-is-devops-2",
    "href": "devops/devops-what-intro.html#what-is-devops-2",
    "title": "DevOps: Introduction",
    "section": "3 What Is DevOps? (2)",
    "text": "3 What Is DevOps? (2)\nDevOps is a new term emerging from the collision of two major related trends. The first was also called “agile infrastructure” or “agile operations”; it sprang from applying Agile and Lean approaches to operations work. The second is a much expanded understanding of the value of collaboration between development and operations staff throughout all stages of the development lifecycle when creating and operating a service, and how important operations has become in our increasingly service-oriented world (cf. Operations: The New Secret Sauce).\n\nOne definition Jez Humble proposed to me is that DevOps is “a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.”\n\nWhat Is DevOps by the agile admin",
    "crumbs": [
      "What is DevOps",
      "DevOps: Introduction"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html",
    "href": "devops/devops-doc-quarto.html",
    "title": "How to document: Quarto and Obsidian",
    "section": "",
    "text": "In the 2024 software development ecosystem, thorough documentation is essential for several reasons:\n\n\nKnowledge Transfer: Documentation ensures that project knowledge is not siloed within individuals but shared across the team and organization[.\nOnboarding: Well-documented projects significantly reduce the time needed for new team members to become productive.\nMaintenance: Clear documentation makes it easier to maintain and update software over time, reducing technical debt.\nUser Adoption: Comprehensive documentation, like that of Kubernetes, facilitates user adoption and reduces support overhead.\nCollaboration: Documentation fosters collaboration among team members and with the wider community, especially in open-source projects.",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html#quarto",
    "href": "devops/devops-doc-quarto.html#quarto",
    "title": "How to document: Quarto and Obsidian",
    "section": "3.2 Quarto",
    "text": "3.2 Quarto\n\nSpecialty: Scientific and technical publishing\nStrength: Supports multiple languages (R, Python, Julia)\n\nAnalyze. Share. Reproduce. You have a story to tell with data—tell it with Quarto.\n\nQuarto Intro-Basics\nQuarto Create Project\nQuarto Publish\nQuarto Code\nmore info on: tip-a-day",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html#obsidian",
    "href": "devops/devops-doc-quarto.html#obsidian",
    "title": "How to document: Quarto and Obsidian",
    "section": "3.3 Obsidian",
    "text": "3.3 Obsidian\n\nFocus: Personal knowledge management\nKey Feature: Networked thought with bidirectional linking\n\nObsidian\nObsidian is both a Markdown editor and a knowledge base app.\nUsed in the most basic way, you can edit and preview Markdown files. But its true power lies in managing a densely networked knowledge base.",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-tools-aws.html",
    "href": "devops/devops-tools-aws.html",
    "title": "Amazon Web Services AWS",
    "section": "",
    "text": "Amazon Web Services",
    "crumbs": [
      "DevOps tools",
      "Amazon Web Services AWS"
    ]
  },
  {
    "objectID": "devops/devops-tools-aws.html#importance-for-programmers",
    "href": "devops/devops-tools-aws.html#importance-for-programmers",
    "title": "Amazon Web Services AWS",
    "section": "1.1 Importance for Programmers",
    "text": "1.1 Importance for Programmers\nScalability and Flexibility AWS provides a scalable and flexible cloud infrastructure, allowing developers to dynamically scale resources based on demand. This elasticity ensures that applications can handle varying workloads efficiently, optimizing performance and cost-effectiveness.\nCost Efficiency By leveraging AWS services, developers can avoid the high upfront costs associated with traditional infrastructure. AWS’s pay-as-you-go pricing model allows programmers to pay only for the resources they use, promoting cost efficiency and enabling startups and enterprises alike to scale without major capital investments.\nGlobal Reach AWS operates in multiple geographic regions worldwide, enabling developers to deploy applications closer to end-users for improved latency and responsiveness. This global reach is particularly beneficial for building international applications with a broad user base.\nRobust Security Measures AWS prioritizes security, offering a variety of tools and features to secure applications and data. These include identity and access management, encryption, and compliance certifications, instilling confidence in both developers and businesses to handle sensitive information.",
    "crumbs": [
      "DevOps tools",
      "Amazon Web Services AWS"
    ]
  },
  {
    "objectID": "devops/devops-tools-aws.html#industry-adoption",
    "href": "devops/devops-tools-aws.html#industry-adoption",
    "title": "Amazon Web Services AWS",
    "section": "1.2 Industry Adoption",
    "text": "1.2 Industry Adoption\nStandardization AWS has set industry standards for cloud computing, making it a preferred choice for developers and enterprises. Familiarity with AWS services facilitates collaboration and interoperability, as many organizations rely on similar cloud architectures.\nEcosystem and Community The extensive AWS ecosystem encompasses a vast array of services, tools, and integrations. A large and active community, along with ample documentation and resources, makes it easier for programmers to learn and troubleshoot, contributing to its widespread adoption.\nInnovation and Agility AWS continually introduces new services and updates existing ones, fostering innovation and enabling developers to stay at the forefront of technology. This agility aligns with the fast-paced nature of the industry, allowing programmers to adopt the latest advancements seamlessly.",
    "crumbs": [
      "DevOps tools",
      "Amazon Web Services AWS"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html",
    "href": "devops/devops-ide-visualcode.html",
    "title": "IDE: Visual Code",
    "section": "",
    "text": "Visual Code User Interface\nAt its heart, Visual Studio Code is a code editor. Like many other code editors, VS Code adopts a common user interface and layout of an explorer on the left, showing all of the files and folders you have access to, and an editor on the right, showing the content of the files you have opened.\nUser Interface",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#react",
    "href": "devops/devops-ide-visualcode.html#react",
    "title": "IDE: Visual Code",
    "section": "1 React",
    "text": "1 React\n\n\n\nUsing React in Visual Studio Code\n\n\nReact is a popular JavaScript library developed by Facebook for building user interfaces. The Visual Studio Code editor supports React.js IntelliSense and code navigation out of the box\nReact in visual code",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#intellisense",
    "href": "devops/devops-ide-visualcode.html#intellisense",
    "title": "IDE: Visual Code",
    "section": "2 IntelliSense",
    "text": "2 IntelliSense\n\n\n\nIntelliSense\n\n\nIntelliSense is a general term for various code editing features including: code completion, parameter info, quick info, and member lists. IntelliSense features are sometimes called by other names such as “code completion”, “content assist”, and “code hinting.”\nIntelliSense",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#quick-file-navigation",
    "href": "devops/devops-ide-visualcode.html#quick-file-navigation",
    "title": "IDE: Visual Code",
    "section": "3 Quick file navigation",
    "text": "3 Quick file navigation\n\n\n\nAlt text\n\n\n\n\n\n\n\n\nNote\n\n\n\nTip: You can open any file by its name when you type Ctrl+P (Quick Open).\n\n\nQuick file navigation",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#refactoring",
    "href": "devops/devops-ide-visualcode.html#refactoring",
    "title": "IDE: Visual Code",
    "section": "4 Refactoring",
    "text": "4 Refactoring\n\n\n\nrefactoring\n\n\nRefactoring",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#using-git-source-control-in-vs-code",
    "href": "devops/devops-ide-visualcode.html#using-git-source-control-in-vs-code",
    "title": "IDE: Visual Code",
    "section": "5 Using Git source control in VS Code",
    "text": "5 Using Git source control in VS Code\n\n\n\nUsing Git source control in VS Code\n\n\nUsing Git source control in VS Code",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#keyboard-shortcuts-reference",
    "href": "devops/devops-ide-visualcode.html#keyboard-shortcuts-reference",
    "title": "IDE: Visual Code",
    "section": "6 Keyboard Shortcuts Reference",
    "text": "6 Keyboard Shortcuts Reference\n\n\n\nKeyboard Shortcuts Reference\n\n\nKeyboard Shortcuts Reference",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#auto-close-tag",
    "href": "devops/devops-ide-visualcode.html#auto-close-tag",
    "title": "IDE: Visual Code",
    "section": "7 Auto Close Tag",
    "text": "7 Auto Close Tag\n\n\n\nAuto Close Tag\n\n\nAuto Close Tag",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#settings-sync",
    "href": "devops/devops-ide-visualcode.html#settings-sync",
    "title": "IDE: Visual Code",
    "section": "8 Settings Sync",
    "text": "8 Settings Sync\n\n\n\nSettings Sync\n\n\nType Sync in command Palette in order to view all commands.\nSettings Sync",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#prettier-code-formatter",
    "href": "devops/devops-ide-visualcode.html#prettier-code-formatter",
    "title": "IDE: Visual Code",
    "section": "9 Prettier – Code formatter",
    "text": "9 Prettier – Code formatter\n\n\n\nPrettier\n\n\nPrettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.\nhttps://prettier.io/\nPrettier – Code formatter",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#css-peek",
    "href": "devops/devops-ide-visualcode.html#css-peek",
    "title": "IDE: Visual Code",
    "section": "10 CSS Peek",
    "text": "10 CSS Peek\n\n\n\nCSS Peek\n\n\nCSS Peek",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#polacode",
    "href": "devops/devops-ide-visualcode.html#polacode",
    "title": "IDE: Visual Code",
    "section": "11 Polacode",
    "text": "11 Polacode\n\n\n\nPolacode\n\n\nYou have spent countless hours finding the perfect JavaScript grammar, matching it with a sleek-looking VS Code theme, trying out all the best programming fonts.\nPolacode",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#gitlens",
    "href": "devops/devops-ide-visualcode.html#gitlens",
    "title": "IDE: Visual Code",
    "section": "12 GitLens",
    "text": "12 GitLens\n\n\n\nGitLens\n\n\nGitLens supercharges Git inside VS Code and unlocks untapped knowledge within each repository. It helps you to visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more.\nGitLens",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#import-cost",
    "href": "devops/devops-ide-visualcode.html#import-cost",
    "title": "IDE: Visual Code",
    "section": "13 Import cost",
    "text": "13 Import cost\n\n\n\nImport cost\n\n\nThis extension will display inline in the editor the size of the imported package. The extension utilizes webpack in order to detect the imported size.\nImport cost",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#eslint",
    "href": "devops/devops-ide-visualcode.html#eslint",
    "title": "IDE: Visual Code",
    "section": "14 ESLint",
    "text": "14 ESLint\n\n\n\nESLint\n\n\nThe extension uses the ESLint library installed in the opened workspace folder. If the folder doesn’t provide one the extension looks for a global install version. If you haven’t installed ESLint either locally or globally do so by running npm install eslint in the workspace folder for a local install or npm install -g eslint for a global install.\nESLint",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#github-copilot",
    "href": "devops/devops-ide-visualcode.html#github-copilot",
    "title": "IDE: Visual Code",
    "section": "15 Github Copilot",
    "text": "15 Github Copilot\n\n\n\nGithub Copilot\n\n\nGitHub Codespaces provides cloud-hosted development environments for any activity - whether it’s a long-term project, or a short-term task like reviewing a pull request. You can connect to Codespaces from Visual Studio Code or a browser-based editor that’s accessible anywhere.\nGithub Copilot",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#live-share",
    "href": "devops/devops-ide-visualcode.html#live-share",
    "title": "IDE: Visual Code",
    "section": "16 Live share",
    "text": "16 Live share\n\n\n\nLive share\n\n\nVisual Studio Live Share enables you to collaboratively edit and debug with others in real time, regardless what programming languages you’re using or app types you’re building. It allows you to instantly (and securely) share your current project, and then as needed, share debugging sessions, terminal instances, localhost web apps, voice calls, and more! Developers that join your sessions receive all of their editor context from your environment (e.g. language services, debugging), which ensures they can start productively collaborating immediately, without needing to clone any repos or install any SDKs.\nLive share",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#thunder-client",
    "href": "devops/devops-ide-visualcode.html#thunder-client",
    "title": "IDE: Visual Code",
    "section": "17 Thunder Client",
    "text": "17 Thunder Client\n\n\n\nThunder Client\n\n\nThunder Client",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#path-intellisense",
    "href": "devops/devops-ide-visualcode.html#path-intellisense",
    "title": "IDE: Visual Code",
    "section": "18 Path Intellisense",
    "text": "18 Path Intellisense\n\n\n\nPath Intellisense\n\n\nPath Intellisense",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-ide-visualcode.html#quokka",
    "href": "devops/devops-ide-visualcode.html#quokka",
    "title": "IDE: Visual Code",
    "section": "19 Quokka",
    "text": "19 Quokka\n\n\n\nQuokka",
    "crumbs": [
      "IDEs",
      "IDE: Visual Code"
    ]
  },
  {
    "objectID": "devops/devops-network-protocols.html",
    "href": "devops/devops-network-protocols.html",
    "title": "Network Protocols",
    "section": "",
    "text": "Note\n\n\n\nThe client-server architecture serves as a cornerstone, providing a structured framework for distributed systems.\nNetwork protocols serve as the linchpin in facilitating data exchange, ensuring standardized communication across diverse systems.\n\n\nFrom the ubiquitous HTTP/HTTPS governing web applications to the specialized protocols like SQL for database communication, each plays a crucial role in orchestrating the flow of information.\n\n\n\nAPI-protocols\n\n\nThis article is about the significance of these protocols in maintaining efficiency, security, and standardization in client-server systems.\nUnderstanding these protocols is imperative for professionals and students alike, as they form the bedrock upon which modern distributed systems are built.\n\n\nAPI (Application Programming Interface)\nAn Application Programming Interface (API) is a set of protocols, routines, and tools that allows different software applications to communicate with each other.\nServing as an intermediary, an API abstracts the underlying complexity of software components, providing a standardized and simplified interface for developers to access the functionality or data of a particular service or application. APIs define the methods, data formats, and conventions through which applications can request and exchange information, facilitating seamless integration and interaction between disparate systems.\n\n\nThey play a crucial role in promoting interoperability and collaboration by enabling developers to leverage functionalities without delving into the intricacies of the underlying codebase. APIs are pivotal in modern software development, empowering the creation of robust and modular applications that can interact with a diverse range of services.\n\nAn API is like a menu in a restaurant. It provides a list of dishes (functions or features) you can order, along with a description of how to ask for them. The waiter (API) takes your order, communicates with the chef (software), and brings back the result to your table. APIs define how different software parts interact, making it easier for developers to use certain functionalities without dealing with the complex inner workings.\n\nProtocol\nA protocol in the context of computing is a set of rules or standards that governs the way in which data is transmitted and communicated over a network. These rules ensure consistent and efficient communication between devices or software systems.\nProtocols define the format and structure of data, the procedures for establishing and terminating connections, and the handling of errors during transmission.\n\n\nThey are essential for enabling devices from different manufacturers or software applications written in different programming languages to understand each other and communicate effectively. Protocols operate at various layers of the OSI model, such as the transport layer (e.g., TCP, UDP) or the application layer (e.g., HTTP, FTP), playing a foundational role in establishing the guidelines for seamless and reliable data exchange in networked environments.\n\nA protocol is like a recipe for baking a cake. It specifies the exact ingredients, their measurements, and the steps to follow. Everyone following the same recipe can bake the same cake. Similarly, in the digital world, protocols are rules that ensure devices or software communicate effectively. They define how data is packaged, sent, and received. Different systems, like different chefs, can follow the same protocol to understand and exchange information.",
    "crumbs": [
      "Network protocols",
      "Network Protocols"
    ]
  },
  {
    "objectID": "devops/devops-network-protocols.html#api-vs.-protocol",
    "href": "devops/devops-network-protocols.html#api-vs.-protocol",
    "title": "Network Protocols",
    "section": "",
    "text": "API (Application Programming Interface)\nAn Application Programming Interface (API) is a set of protocols, routines, and tools that allows different software applications to communicate with each other.\nServing as an intermediary, an API abstracts the underlying complexity of software components, providing a standardized and simplified interface for developers to access the functionality or data of a particular service or application. APIs define the methods, data formats, and conventions through which applications can request and exchange information, facilitating seamless integration and interaction between disparate systems.\n\n\nThey play a crucial role in promoting interoperability and collaboration by enabling developers to leverage functionalities without delving into the intricacies of the underlying codebase. APIs are pivotal in modern software development, empowering the creation of robust and modular applications that can interact with a diverse range of services.\n\nAn API is like a menu in a restaurant. It provides a list of dishes (functions or features) you can order, along with a description of how to ask for them. The waiter (API) takes your order, communicates with the chef (software), and brings back the result to your table. APIs define how different software parts interact, making it easier for developers to use certain functionalities without dealing with the complex inner workings.\n\nProtocol\nA protocol in the context of computing is a set of rules or standards that governs the way in which data is transmitted and communicated over a network. These rules ensure consistent and efficient communication between devices or software systems.\nProtocols define the format and structure of data, the procedures for establishing and terminating connections, and the handling of errors during transmission.\n\n\nThey are essential for enabling devices from different manufacturers or software applications written in different programming languages to understand each other and communicate effectively. Protocols operate at various layers of the OSI model, such as the transport layer (e.g., TCP, UDP) or the application layer (e.g., HTTP, FTP), playing a foundational role in establishing the guidelines for seamless and reliable data exchange in networked environments.\n\nA protocol is like a recipe for baking a cake. It specifies the exact ingredients, their measurements, and the steps to follow. Everyone following the same recipe can bake the same cake. Similarly, in the digital world, protocols are rules that ensure devices or software communicate effectively. They define how data is packaged, sent, and received. Different systems, like different chefs, can follow the same protocol to understand and exchange information.",
    "crumbs": [
      "Network protocols",
      "Network Protocols"
    ]
  },
  {
    "objectID": "devops/devops-vc-gitgh.html",
    "href": "devops/devops-vc-gitgh.html",
    "title": "Git and GitHub 2023 CLI",
    "section": "",
    "text": "In the fast-paced world of software development, collaborating with remote teams and utilizing version control systems like GitHub has become an indispensable part of the process of software devolopment.\nWorking with a remote repository and daily commits via CLI is vital in modern software development. It fosters collaboration, streamlines version control, and encourages best practices.\n\nCollaboration: Remote repos enable seamless teamwork by providing a shared codebase.\nVersion Control: Daily commits maintain a clear history, aiding debugging and change tracking.\nBackup: The remote repo serves as a backup, safeguarding your work.\nCode Quality: Regular commits promote modular, well-documented code and best practices.\nCI/CD: Automated testing and deployment are triggered by code commits.\nRemote Work: Facilitates remote work and flexible development.\nDocumentation: Commit messages document changes and aid in understanding code history.\nCode Review: Daily commits simplify code reviews and collaboration.\nLearning: A consistent opportunity for learning and growth through commit history analysis.",
    "crumbs": [
      "Version Control",
      "Git and GitHub 2023 CLI"
    ]
  },
  {
    "objectID": "devops/devops-vc-gitgh.html#overview-how-with-cli-create-local-and-remote-repo-and-commitpush",
    "href": "devops/devops-vc-gitgh.html#overview-how-with-cli-create-local-and-remote-repo-and-commitpush",
    "title": "Git and GitHub 2023 CLI",
    "section": "",
    "text": "In the fast-paced world of software development, collaborating with remote teams and utilizing version control systems like GitHub has become an indispensable part of the process of software devolopment.\nWorking with a remote repository and daily commits via CLI is vital in modern software development. It fosters collaboration, streamlines version control, and encourages best practices.\n\nCollaboration: Remote repos enable seamless teamwork by providing a shared codebase.\nVersion Control: Daily commits maintain a clear history, aiding debugging and change tracking.\nBackup: The remote repo serves as a backup, safeguarding your work.\nCode Quality: Regular commits promote modular, well-documented code and best practices.\nCI/CD: Automated testing and deployment are triggered by code commits.\nRemote Work: Facilitates remote work and flexible development.\nDocumentation: Commit messages document changes and aid in understanding code history.\nCode Review: Daily commits simplify code reviews and collaboration.\nLearning: A consistent opportunity for learning and growth through commit history analysis.",
    "crumbs": [
      "Version Control",
      "Git and GitHub 2023 CLI"
    ]
  },
  {
    "objectID": "devops/devops-vc-gitgh.html#set-up-tools",
    "href": "devops/devops-vc-gitgh.html#set-up-tools",
    "title": "Git and GitHub 2023 CLI",
    "section": "2 Set up tools",
    "text": "2 Set up tools\n\nGitHub account\nInstall git local\nPermssion to write GitHub\nCLI gh\n\n\n\n\nHow does git work What makes Git so popular? How does it work?",
    "crumbs": [
      "Version Control",
      "Git and GitHub 2023 CLI"
    ]
  },
  {
    "objectID": "devops/devops-vc-gitgh.html#create-localremote-repos-and-first-commitpush",
    "href": "devops/devops-vc-gitgh.html#create-localremote-repos-and-first-commitpush",
    "title": "Git and GitHub 2023 CLI",
    "section": "3 Create local/remote repos and first commit/push",
    "text": "3 Create local/remote repos and first commit/push\nIn these six steps, you’re setting up and pushing a project to a remote GitHub repository.\n\nFirstly, you initialize a local Git repository with git init, creating a version control system.\nThen, you stage all changes with git add –all, preparing them for commit.\nIn step 3, you use the GitHub CLI to create a new public repository on GitHub.\nStep 4 involves committing your changes with git commit –all, accompanied by a commit message.\nIn step 5, you set up a connection to the remote repository using git remote add origin.\nFinally, you push your local changes to GitHub with git push origin master, effectively syncing your local and remote repositories.\n\n\n3.1 Step1: Initialization local repo\nalbert@albert-virtual-machine:~/Desktop/git$ git init\nInitialized empty Git repository in /home/albert/Desktop/git/.git/\nIn this initial step, you’re initializing a new Git repository on your local machine.\n\n\n\nInitializing a new Git repository\n\n\nThe command git init is used to create an empty Git repository. After executing this command, Git responds with a message indicating that it has successfully initialized an empty repository in the specified directory, which in this case is /home/albert/Desktop/git/.git/.\nThis means you’ve set up a local Git repository on your computer where you can start tracking and versioning your project.\n\n\n3.2 Step2: Adding Files\nalbert@albert-virtual-machine:~/Desktop/git$ git add --all\n\n\n--all or dot (.)\n\nadd . or add * indexes all the new and modified files and stages them for a commit, except for the files that have been removed.\nadd -u stages all modified and removed files for a commit, except for the new files created.\nadd -A or add –all is a combination of both add . & add -u. It will add all new files, modified files and removed files, for staging.\n\ngit add * (asterisk) vs git add . (period)\nIn this step, you’re using the git add –all command to stage all the changes in your working directory for the next commit.\nStaging means you’re telling Git which files you want to include in the next commit.\nBy using the –all option, you’re adding all changes, including new files, modifications, and deletions, to the staging area.\n\n\n3.3 Step3: GitHub remote Repo\nalbert@albert-virtual-machine:~/Desktop/git$ gh repo create testcli --public\n✓ Created repository AlbertProfe/testcli on GitHub\nHere, you’re creating a new GitHub repository named “testcli” and making it public using the GitHub CLI (gh).\n\n\n\nCreating a new GitHub repository named “testcli”\n\n\nThe command gh repo create testcli –public initiates the repository creation process.\nAfter successful execution, you receive a confirmation message that the repository “AlbertProfe/testcli” has been created on GitHub.\n\n\n3.4 Step4: Commit\ngit commit --all\n[master (root-commit) 0afa074] hi\n 1 file changed, 2 insertions(+)\n create mode 100644 person.md\nWith this step, you’ve committed your changes to the local Git repository.\nThe command git commit –all has committed your staged changes with a commit message “hi.”\nThe response from Git shows that one file was changed, adding two insertions, and a new file named “person.md” was created.\n\n\n3.5 Step5: Link Local to Remote\nalbert@albert-virtual-machine:~/Desktop/git$ git remote add origin https://github.com/AlbertProfe/testcli.git\nYou’re setting the remote repository for your local Git repository.\nThe command git remote add origin https://github.com/AlbertProfe/testcli.git associates your local Git repository with the GitHub repository you created earlier.\nThis allows you to push your local commits to the remote repository on GitHub.\n\n\n3.6 Step6: Push\nalbert@albert-virtual-machine:~/Desktop/git$ git push origin master\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 218 bytes | 109.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/AlbertProfe/testcli.git\n * [new branch]      master -&gt; master\nIn the final step, you’re pushing your local commits to the remote repository on GitHub. The command git push origin master sends your changes to the “master” branch of the remote repository.\nGit enumerates the objects, counts them, and writes them to the remote repository, effectively updating the GitHub repository with your local changes.\nThe output shows the progress and confirms that the “master” branch on GitHub has been updated with the changes from your local repository.",
    "crumbs": [
      "Version Control",
      "Git and GitHub 2023 CLI"
    ]
  },
  {
    "objectID": "devops/devops-vc-gitgh.html#pullfetch",
    "href": "devops/devops-vc-gitgh.html#pullfetch",
    "title": "Git and GitHub 2023 CLI",
    "section": "4 pull/fetch",
    "text": "4 pull/fetch\ngit pull and git fetch are two commonly used commands for updating your local repository with changes from a remote repository. They serve similar purposes but work in slightly different ways.\n\n4.1 git pull\ngit pull is a combination of two operations: git fetch followed by git merge.\nWhen you run git pull, Git fetches the changes from the remote repository and then automatically merges them into your local branch.\nThis can be convenient for a quick update but may lead to automatic merges, potentially resulting in conflicts that you need to resolve.\ngit pull origin main\n\n\n4.2 git fetch\ngit fetch only fetches changes from the remote repository but does not automatically merge them into your local branch.\nThis is useful when you want to inspect the changes before integrating them into your branch. It allows you to review the changes and decide when and how to merge them.\ngit fetch origin",
    "crumbs": [
      "Version Control",
      "Git and GitHub 2023 CLI"
    ]
  },
  {
    "objectID": "devops/devops-network-dns.html",
    "href": "devops/devops-network-dns.html",
    "title": "Network: DNS",
    "section": "",
    "text": "The Domain Name System (DNS) is a fundamental protocol in computer networking that translates human-readable domain names into IP addresses. It acts as a distributed and hierarchical database, providing a crucial service for navigating the vast landscape of the internet. DNS plays a pivotal role in making internet resources accessible by allowing users to use domain names like www.example.com instead of remembering numeric IP addresses like 192.168.1.1.\n\n\nDNS operates in a hierarchical structure, organized into zones. The highest level is the root domain, represented by a dot (‘.’). Beneath the root, there are top-level domains (TLDs), such as .com, .org, and .net. Further down, domain names become more specific, leading to fully qualified domain names (FQDNs) like www.example.com.\nEach domain level is separated by a dot, forming a tree-like structure. For instance, the FQDN www.example.com can be broken down into labels: “www” is a subdomain of “example,” which is under the top-level domain “com.”\n\n\n\nWhen a user enters a domain name in a web browser, the DNS resolution process begins. The following steps illustrate this process:\n\nLocal DNS Cache Check: The user’s device checks its local DNS cache to see if it already knows the corresponding IP address for the requested domain. If found, the process concludes.\nRecursive DNS Server: If the IP address is not in the local cache, the device queries a recursive DNS server. This server is responsible for obtaining the information on behalf of the user.\nRoot DNS Server: If the recursive DNS server doesn’t have the information, it queries the root DNS server. The root server directs the request to the appropriate TLD server based on the top-level domain of the requested domain name.\nTLD DNS Server: The TLD server, responsible for the specific top-level domain of the requested domain, directs the recursive server to the authoritative DNS server of the next domain level.\nAuthoritative DNS Server: The authoritative DNS server holds the specific IP address associated with the requested domain and provides this information to the recursive server.\nRecursive DNS Server Response: The recursive server caches the obtained IP address and responds to the user’s device.\nLocal DNS Cache Update: The user’s device updates its local DNS cache with the resolved IP address for future use.\n\n\n\n\nDNS uses various record types to store different types of information. The most common ones include:\n\nA (Address) Record: Maps a domain to an IPv4 address.\nExample: www.example.com. IN A 192.168.1.1\nAAAA (IPv6 Address) Record: Maps a domain to an IPv6 address.\nExample: www.example.com. IN AAAA 2001:0db8:85a3:0000:0000:8a2e:0370:7334\nCNAME (Canonical Name) Record: Alias of one domain to another.\nExample: www.example.com. IN CNAME example.com\nMX (Mail Exchange) Record: Specifies mail servers responsible for receiving emails.\nExample: example.com. IN MX 10 mail.example.com\nNS (Name Server) Record: Indicates authoritative DNS servers for a domain.\nExample: example.com. IN NS ns1.example.com\n\n\n\n\nIn conclusion, DNS is a critical protocol that simplifies internet navigation by translating human-readable domain names into machine-readable IP addresses. Understanding its hierarchical structure, resolution process, and various record types is essential for anyone working with computer networks. DNS plays a foundational role in making the internet accessible and user-friendly.",
    "crumbs": [
      "Network protocols",
      "Network: DNS"
    ]
  },
  {
    "objectID": "devops/devops-network-dns.html#structure-and-hierarchy",
    "href": "devops/devops-network-dns.html#structure-and-hierarchy",
    "title": "Network: DNS",
    "section": "",
    "text": "DNS operates in a hierarchical structure, organized into zones. The highest level is the root domain, represented by a dot (‘.’). Beneath the root, there are top-level domains (TLDs), such as .com, .org, and .net. Further down, domain names become more specific, leading to fully qualified domain names (FQDNs) like www.example.com.\nEach domain level is separated by a dot, forming a tree-like structure. For instance, the FQDN www.example.com can be broken down into labels: “www” is a subdomain of “example,” which is under the top-level domain “com.”",
    "crumbs": [
      "Network protocols",
      "Network: DNS"
    ]
  },
  {
    "objectID": "devops/devops-network-dns.html#dns-resolution-process",
    "href": "devops/devops-network-dns.html#dns-resolution-process",
    "title": "Network: DNS",
    "section": "",
    "text": "When a user enters a domain name in a web browser, the DNS resolution process begins. The following steps illustrate this process:\n\nLocal DNS Cache Check: The user’s device checks its local DNS cache to see if it already knows the corresponding IP address for the requested domain. If found, the process concludes.\nRecursive DNS Server: If the IP address is not in the local cache, the device queries a recursive DNS server. This server is responsible for obtaining the information on behalf of the user.\nRoot DNS Server: If the recursive DNS server doesn’t have the information, it queries the root DNS server. The root server directs the request to the appropriate TLD server based on the top-level domain of the requested domain name.\nTLD DNS Server: The TLD server, responsible for the specific top-level domain of the requested domain, directs the recursive server to the authoritative DNS server of the next domain level.\nAuthoritative DNS Server: The authoritative DNS server holds the specific IP address associated with the requested domain and provides this information to the recursive server.\nRecursive DNS Server Response: The recursive server caches the obtained IP address and responds to the user’s device.\nLocal DNS Cache Update: The user’s device updates its local DNS cache with the resolved IP address for future use.",
    "crumbs": [
      "Network protocols",
      "Network: DNS"
    ]
  },
  {
    "objectID": "devops/devops-network-dns.html#dns-record-types",
    "href": "devops/devops-network-dns.html#dns-record-types",
    "title": "Network: DNS",
    "section": "",
    "text": "DNS uses various record types to store different types of information. The most common ones include:\n\nA (Address) Record: Maps a domain to an IPv4 address.\nExample: www.example.com. IN A 192.168.1.1\nAAAA (IPv6 Address) Record: Maps a domain to an IPv6 address.\nExample: www.example.com. IN AAAA 2001:0db8:85a3:0000:0000:8a2e:0370:7334\nCNAME (Canonical Name) Record: Alias of one domain to another.\nExample: www.example.com. IN CNAME example.com\nMX (Mail Exchange) Record: Specifies mail servers responsible for receiving emails.\nExample: example.com. IN MX 10 mail.example.com\nNS (Name Server) Record: Indicates authoritative DNS servers for a domain.\nExample: example.com. IN NS ns1.example.com",
    "crumbs": [
      "Network protocols",
      "Network: DNS"
    ]
  },
  {
    "objectID": "devops/devops-network-dns.html#conclusion",
    "href": "devops/devops-network-dns.html#conclusion",
    "title": "Network: DNS",
    "section": "",
    "text": "In conclusion, DNS is a critical protocol that simplifies internet navigation by translating human-readable domain names into machine-readable IP addresses. Understanding its hierarchical structure, resolution process, and various record types is essential for anyone working with computer networks. DNS plays a foundational role in making the internet accessible and user-friendly.",
    "crumbs": [
      "Network protocols",
      "Network: DNS"
    ]
  },
  {
    "objectID": "devops/devops-what-immutable.html",
    "href": "devops/devops-what-immutable.html",
    "title": "Immutable Infrastructure",
    "section": "",
    "text": "Immutable infrastructure is an approach to managing services and software deployments on IT resources wherein components are replaced rather than changed. An application or service is effectively redeployed each time any change occurs.\n\n\n\n\n\n\n\n\nThere are no server updates which can be problematic at times. That means lower IT complexity and failures.\nReduces support calls: it resolves the issues by deleting the instance that causes the problem.\nImproves security and incident resolution: incident becomes an exception. The exception problem is solved by machine learning (Weka)from manual rules to automatic.\nCost savings by encouraging reduced hardware usage.\nConfiguration management can run faster than manual system.\nLess dependency on third party resources at deployment.\nRequires a learning curve due to new tools.\n\n\n\n\nBelow are some examples of using the tools and services for accomplishing immutable infrastructure. However, the list only includes a few. There are many more.\n\nGit commits\nPuppet\nDocker\nAnsible\nJenkins\nTerraform server\n\n\n\n\nDevOps adopt this infrastructure concept as it makes creating new servers affordable and accessible. If there is a requirement for improvements or updates, you have to replace the entire server and not change a part of it.\nImmutable infrastructure is very much in tune with the idea of infrastructure as a code. You can do all the planning of components like networking, instances, and security with infrastructure as a code. Once done, you can push it into your dev ecosystem. It becomes easy to test and prod as you promote them in the dev environment and consistently repeat these steps.\nDevOps tools and culture are to work together to achieve supply development with continuous delivery. And you know continuous delivery drives immutable infrastructure.\nmore info on",
    "crumbs": [
      "What is DevOps",
      "Immutable Infrastructure"
    ]
  },
  {
    "objectID": "devops/devops-what-immutable.html#introduction",
    "href": "devops/devops-what-immutable.html#introduction",
    "title": "Immutable Infrastructure",
    "section": "",
    "text": "Immutable infrastructure is an approach to managing services and software deployments on IT resources wherein components are replaced rather than changed. An application or service is effectively redeployed each time any change occurs.\n\n\n\n\n\n\n\n\nThere are no server updates which can be problematic at times. That means lower IT complexity and failures.\nReduces support calls: it resolves the issues by deleting the instance that causes the problem.\nImproves security and incident resolution: incident becomes an exception. The exception problem is solved by machine learning (Weka)from manual rules to automatic.\nCost savings by encouraging reduced hardware usage.\nConfiguration management can run faster than manual system.\nLess dependency on third party resources at deployment.\nRequires a learning curve due to new tools.\n\n\n\n\nBelow are some examples of using the tools and services for accomplishing immutable infrastructure. However, the list only includes a few. There are many more.\n\nGit commits\nPuppet\nDocker\nAnsible\nJenkins\nTerraform server\n\n\n\n\nDevOps adopt this infrastructure concept as it makes creating new servers affordable and accessible. If there is a requirement for improvements or updates, you have to replace the entire server and not change a part of it.\nImmutable infrastructure is very much in tune with the idea of infrastructure as a code. You can do all the planning of components like networking, instances, and security with infrastructure as a code. Once done, you can push it into your dev ecosystem. It becomes easy to test and prod as you promote them in the dev environment and consistently repeat these steps.\nDevOps tools and culture are to work together to achieve supply development with continuous delivery. And you know continuous delivery drives immutable infrastructure.\nmore info on",
    "crumbs": [
      "What is DevOps",
      "Immutable Infrastructure"
    ]
  },
  {
    "objectID": "devops/devops-lab-springawsdeploy.html",
    "href": "devops/devops-lab-springawsdeploy.html",
    "title": "Lab 6: Spring Boot AWS codecommit",
    "section": "",
    "text": "AWS CodeCommit is a popular choice among DevOps professionals for managing source code repositories securely in the cloud.\nIt offers a fully-managed Git-based version control service that scales seamlessly to meet the needs of development teams. With CodeCommit, developers can store their Spring Boot project’s source code securely and collaborate with team members efficiently.\nWhen it comes to deploying a Spring Boot project using AWS services, AWS CodePipeline plays a crucial role. CodePipeline is a continuous integration and continuous delivery (CI/CD) service that automates the build, test, and deployment phases of your application.\nHere’s how you can set up a pipeline to deploy a Spring Boot project:\n\nSource Stage (CodeCommit): Configure your pipeline to pull the source code from your CodeCommit repository. This stage triggers the pipeline whenever changes are pushed to the repository.\nBuild Stage (CodeBuild): Use CodeBuild to compile your Spring Boot application, run tests, and package it into an executable JAR file. You can define a buildspec.yml file to specify the build commands and environment settings required for your project.\nDeploy Stage (AWS Elastic Beanstalk or AWS ECS): Depending on your deployment strategy, you can choose either AWS Elastic Beanstalk, AWS ECS, or AWS Fargate to deploy your Spring Boot application.\n\nAWS Elastic Beanstalk: If you prefer a fully-managed platform for deploying web applications, Elastic Beanstalk is a suitable option. You can create an Elastic Beanstalk environment configured with the appropriate runtime for running Spring Boot applications (e.g., Java with Tomcat). Configure your pipeline to deploy the generated JAR file to Elastic Beanstalk.\nAWS ECS: For containerized deployments, AWS ECS provides a scalable and highly customizable platform. You can use Docker to containerize your Spring Boot application and define a task definition and ECS service for running containers. Configure your pipeline to build and push the Docker image to Amazon ECR (Elastic Container Registry) and update the ECS service with the latest image.\nAWS Fargate: AWS Fargate is a serverless compute engine for containers that allows you to run containers without managing the underlying infrastructure. You can define a Fargate task definition for your Spring Boot application and configure your pipeline to deploy it to Fargate.\n\nApproval Stage (Optional): Optionally, you can add a manual approval stage to the pipeline to review and approve changes before deploying them to production.\n\nBy setting up a CI/CD pipeline with AWS CodePipeline, you can automate the deployment process of your Spring Boot project, ensuring faster delivery of features and improvements to your application while maintaining reliability and consistency.",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 6: Spring Boot AWS codecommit"
    ]
  },
  {
    "objectID": "devops/devops-lab-springawsdeploy.html#deploy-springboot-application-in-aws-codecommit-overview-and-repository-making",
    "href": "devops/devops-lab-springawsdeploy.html#deploy-springboot-application-in-aws-codecommit-overview-and-repository-making",
    "title": "Lab 6: Spring Boot AWS codecommit",
    "section": "2.1 Deploy SpringBoot Application in AWS || CodeCommit overview and Repository Making",
    "text": "2.1 Deploy SpringBoot Application in AWS || CodeCommit overview and Repository Making",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 6: Spring Boot AWS codecommit"
    ]
  },
  {
    "objectID": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-creating-credential-for-codecommit",
    "href": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-creating-credential-for-codecommit",
    "title": "Lab 6: Spring Boot AWS codecommit",
    "section": "2.2 Deploy SpringBoot on AWS || Creating Credential For CodeCommit",
    "text": "2.2 Deploy SpringBoot on AWS || Creating Credential For CodeCommit",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 6: Spring Boot AWS codecommit"
    ]
  },
  {
    "objectID": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-uploading-code-in-aws-codecommit",
    "href": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-uploading-code-in-aws-codecommit",
    "title": "Lab 6: Spring Boot AWS codecommit",
    "section": "2.3 Deploy SpringBoot on AWS || Uploading Code in AWS CodeCommit",
    "text": "2.3 Deploy SpringBoot on AWS || Uploading Code in AWS CodeCommit",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 6: Spring Boot AWS codecommit"
    ]
  },
  {
    "objectID": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-changing-build-spec-yml-and-appspec-yml-and-creating-load-balancer",
    "href": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-changing-build-spec-yml-and-appspec-yml-and-creating-load-balancer",
    "title": "Lab 6: Spring Boot AWS codecommit",
    "section": "2.4 Deploy SpringBoot on AWS || Changing Build Spec yml and Appspec yml and Creating load balancer",
    "text": "2.4 Deploy SpringBoot on AWS || Changing Build Spec yml and Appspec yml and Creating load balancer",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 6: Spring Boot AWS codecommit"
    ]
  },
  {
    "objectID": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-creating-the-pipeline",
    "href": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-creating-the-pipeline",
    "title": "Lab 6: Spring Boot AWS codecommit",
    "section": "2.5 Deploy SpringBoot on AWS | | Creating the Pipeline",
    "text": "2.5 Deploy SpringBoot on AWS | | Creating the Pipeline",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 6: Spring Boot AWS codecommit"
    ]
  },
  {
    "objectID": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-finishing-the-deployment-and-test-the-api",
    "href": "devops/devops-lab-springawsdeploy.html#deploy-springboot-on-aws-finishing-the-deployment-and-test-the-api",
    "title": "Lab 6: Spring Boot AWS codecommit",
    "section": "2.6 Deploy SpringBoot on AWS | | Finishing the Deployment and Test the Api",
    "text": "2.6 Deploy SpringBoot on AWS | | Finishing the Deployment and Test the Api",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 6: Spring Boot AWS codecommit"
    ]
  },
  {
    "objectID": "devops/devops-network-graphql.html",
    "href": "devops/devops-network-graphql.html",
    "title": "Network: graphQL",
    "section": "",
    "text": "1 Overview: GraphQL\nGraphQL is a query language and runtime for APIs that was developed by Facebook. It provides a more efficient and flexible alternative to traditional REST APIs by allowing clients to request only the data they need. GraphQL empowers clients to specify the structure of the response, reducing over-fetching and under-fetching of data.\nIn GraphQL, clients send queries to the server, specifying the data they require, and the server responds with a JSON object that matches the structure of the query. This allows for a more efficient and precise data retrieval process.\nKey features of GraphQL include:\n\nHierarchical Structure: Queries in GraphQL follow a hierarchical structure, mirroring the structure of the data being requested. This makes it easy to understand and compose queries.\nSingle Endpoint: Unlike REST APIs that often have multiple endpoints for different resources, GraphQL typically has a single endpoint for all interactions. Clients can request various resources in a single query.\nStrong Typing: GraphQL uses a type system to define the structure of data. Clients receive predictable and strongly typed responses, improving the reliability of applications.\nReal-time Data: GraphQL supports real-time data updates through subscriptions, allowing clients to receive updates when data changes on the server.\nIntrospection: GraphQL APIs are self-documenting. Clients can query the schema to discover the types, fields, and operations available, making it easier to explore and understand the API.\n\nExample:\nA simple GraphQL query and its response:\nGraphQL Query:\nquery {\n  user(id: 1) {\n    name\n    email\n    posts {\n      title\n      content\n    }\n  }\n}\nGraphQL Response:\n\n{\n  \"data\": {\n    \"user\": {\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"posts\": [\n        {\n          \"title\": \"GraphQL Basics\",\n          \"content\": \"An introduction to GraphQL.\"\n        },\n        {\n          \"title\": \"GraphQL Best Practices\",\n          \"content\": \"Tips for using GraphQL effectively.\"\n        }\n      ]\n    }\n  }\n}\n\n\n\n2 Reference\n\nGrahhQL\nGithub repo\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Network protocols",
      "Network: graphQL"
    ]
  },
  {
    "objectID": "devops/devops-tools-nagios.html",
    "href": "devops/devops-tools-nagios.html",
    "title": "Nagios",
    "section": "",
    "text": "📘 What is Nagios\nNagios is one of the top DevOps tools used for monitoring purposes.\nIt monitors the entire infrastructure that includes the system, servers, applications, networking protocols, etc. It is an open-source tool that is used by most of big companies.\n\n\n1 Overview\nNagios Add-on Products extend Core’s functionality with Nagios agents. You can retrieve the code for any of these agents from our GitHub.\n\nNagios Cross Platform Agent (NCPA)\n\nA cross-platform monitoring agent that can be installed on Windows, Linux/Unix, and Mac OS/X machines. NCPA features active and passive checks, remote management, and a local monitoring interface.\n\nNagios Remote Plugin Executor (NRPE)\n\nAn agent that allows you to remotely execute Nagios plugins on Linux/Unix machines and monitor remote machine metrics (disk usage, CPU load, etc.). NRPE can also communicate with Windows agent add-ons like NSClient++, so you can check metrics on remote Windows machines.\n\nNagios Remote Data Processor (NRDP)\n\nNRDP is a flexible data transport mechanism and processor for Nagios that uses standard port protocols (HTTP(S) and XML) and can be implemented as a replacement for NSCA. Designed with a simple and robust architecture, NRDP can be easily extended and customized to fit individual users’ needs.\n\n\nNagios Data Output Utilities (NDOUtils)\n\nNDOUtils is an add-on that lets you store current and historical status and event information from one or more Nagios instances on a MySQL/MariaDB database. Several community add-ons use this as one of their data sources.\n\nNagios Service Check Acceptor (NSCA)\n\nNSCA allows you to integrate passive alerts and checks from remote machines and applications with Nagios. This agent is useful for processing security alerts as well as deploying redundant and distributed Nagios setups.\n\n\n\n\n2 Why Nagios is so popular\nNagios is a popular choice among DevOps professionals due to several factors.\nFirstly, it offers comprehensive monitoring capabilities, allowing users to monitor their entire IT infrastructure, including servers, applications, services, and network devices.\n\n\nNagios’ combination of comprehensive monitoring, customization, alerting, and scalability contributes to its popularity among DevOps professionals.\nSecondly, Nagios’ flexible and customizable nature enables users to define their own monitoring checks and thresholds, tailored to their specific needs.\nAdditionally, Nagios provides real-time alerting and notifications, allowing users to quickly respond to incidents and outages. The platform also offers robust reporting and visualization features, helping users gain insights into their infrastructure’s performance and trends over time. Its active community and extensive documentation further support users in troubleshooting and learning.\nMoreover, Nagios’ modular architecture allows for easy integration with third-party tools and extensions, extending its functionality and adaptability.\nLastly, Nagios’ scalability and support for distributed monitoring make it suitable for organizations of all sizes, from small businesses to large enterprises.\n\n\n3 References\n\nThe Open Source Standard In Monitoring\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps tools",
      "Nagios"
    ]
  },
  {
    "objectID": "devops/devops-lab-k8sdigitalocean.html",
    "href": "devops/devops-lab-k8sdigitalocean.html",
    "title": "Lab 5: k8s on Digital Ocean",
    "section": "",
    "text": "1 References\n\nSpring boot on digital ocean\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 5: k8s on Digital Ocean"
    ]
  },
  {
    "objectID": "devops/devops-lab-springbooksintro.html",
    "href": "devops/devops-lab-springbooksintro.html",
    "title": "Lab 2: Spring Boot AWS AEB manually",
    "section": "",
    "text": "Spring Boot deploy\n\n\nSpring Boot app build with Jenkins via Github and deployed to AWS:\n\ncreate Spring Boots projects\ncommit && push to GitHub\ncreate .jar executable from Github with Jenkins\nUpload manually .jar to AWS S3\nconnect AWS S3 to AWS AEB\nAWS AEB deploy and publish\n\n\n1 References\n\nSpring Boot AWS AEB\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 2: Spring Boot AWS AEB manually"
    ]
  },
  {
    "objectID": "devops/resources.html",
    "href": "devops/resources.html",
    "title": "DevOps Resources",
    "section": "",
    "text": "DevOps Resources\n\n\n\n1 Resources\n\ndevopscifo\nntu.edu\ngetting-gitops-practical-platform-openshift-argo-cd-and-tekton\n\nGit-cheat-sheet-Red-Hat-Developer\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps readings",
      "DevOps Resources"
    ]
  },
  {
    "objectID": "javase/se-pattern-abstractfactory.html",
    "href": "javase/se-pattern-abstractfactory.html",
    "title": "Abstract Factory",
    "section": "",
    "text": "About this site\n\n\n\n Back to top",
    "crumbs": [
      "Java Design Patterns",
      "Abstract Factory"
    ]
  },
  {
    "objectID": "javase/se-pattern-facade.html",
    "href": "javase/se-pattern-facade.html",
    "title": "Facade",
    "section": "",
    "text": "The facade pattern is a design pattern in computer programming and Java that is used to provide a simple interface to access complex systems.\nThe facade design pattern is like a simplified front door to a complex building. The building has many rooms, levels, and systems, but from the outside, all you see is the front door. The facade pattern provides a simple, unified interface to the complex building, so you only have to worry about interacting with the door, rather than navigating the entire building.\nSimilarly, in software development, the facade pattern provides a simple interface to a complex system, so that client code can interact with the system without having to understand all of its complexities. The facade acts as an intermediary, handling the interaction with the underlying components, and providing a cleaner, easier-to-use interface to the client code. This can make the code easier to maintain and test, and allow developers to change the implementation of the complex system without affecting the client code.",
    "crumbs": [
      "Java Design Patterns",
      "Facade"
    ]
  },
  {
    "objectID": "javase/se-pattern-facade.html#example-building-a-bank-account",
    "href": "javase/se-pattern-facade.html#example-building-a-bank-account",
    "title": "Facade",
    "section": "1 Example: Building a Bank account",
    "text": "1 Example: Building a Bank account\n\nIdentify the complex system: Let’s say we have a complex system that provides functionality for making a payment, checking the balance of an account, and sending a confirmation email.\nCreate the facade class: We create a class named “PaymentSystemFacade” that acts as the facade for the complex system. This class will have methods for making a payment, checking the balance, and sending a confirmation email.\n\nclass PaymentSystemFacade {\n  private Payment payment;\n  private Account account;\n  private Email email;\n  \n  public PaymentSystemFacade() {\n    payment = new Payment();\n    account = new Account();\n    email = new Email();\n  }\n  \n  public void makePayment(double amount) {\n    if (account.checkBalance(amount)) {\n      payment.makePayment(amount);\n      email.sendConfirmation();\n    }\n  }\n  \n  public double checkBalance() {\n    return account.checkBalance();\n  }\n}\n\nImplement the underlying components: We implement the classes “Payment”, “Account”, and “Email” that represent the underlying components of the complex system.\n\nclass Payment {\n  public void makePayment(double amount) {\n    // Code for making a payment\n  }\n}\n\nclass Account {\n  public boolean checkBalance(double amount) {\n    // Code for checking balance\n  }\n  \n  public double checkBalance() {\n    // Code for checking balance\n  }\n}\n\nclass Email {\n  public void sendConfirmation() {\n    // Code for sending confirmation email\n  }\n}\n\nUse the facade: Finally, we use the facade by creating an instance of the PaymentSystemFacade class and calling its methods.\n\nPaymentSystemFacade facade = new PaymentSystemFacade();\nfacade.makePayment(100.0);\ndouble balance = facade.checkBalance();\nThis is a simple example of how you can use the facade pattern to simplify the interaction with a complex system in Java. The facade provides a unified interface to the complex system, making it easier to use and understand, and reducing the impact of changes to the underlying components on the client code.",
    "crumbs": [
      "Java Design Patterns",
      "Facade"
    ]
  },
  {
    "objectID": "javase/se-principles-polymorphism.html",
    "href": "javase/se-principles-polymorphism.html",
    "title": "Java SE: Polymorphism",
    "section": "",
    "text": "📘 Polymorphism\nPolymorphism is a fundamental concept in object-oriented programming. It is the ability of an object to take on different forms.\nIn other words, it is the ability of a single object to behave differently in different contexts.\n\n\nPolymorphism is an important concept in object-oriented programming because it allows developers to write code that is more flexible and reusable. By using polymorphism, developers can write code that can operate on objects of different types, without knowing the specific type of the object in advance.\n\n\n\nJava SE Basic Principles OOP Polymorphishm\n\n\nIn Java, polymorphism is achieved through the use of inheritance and interfaces. A subclass can implement multiple interfaces, and an interface can be implemented by multiple classes. This allows objects of different types to share a common set of methods, which can be called on the objects without knowing their specific type.\nHere is an example of polymorphism in Java using the Animal, Dog, and Cat classes from the previous examples:\npublic class Main {\n    public static void main(String[] args) {\n        // Create a Dog object\n        Dog dog = new Dog(\"Buddy\", 5);\n\n        // Create a Cat object\n        Cat cat = new Cat(\"Whiskers\", 3);\n\n        // Call the makeNoise() method on the Dog object\n        dog.makeNoise();\n\n        // Call the makeNoise() method on the Cat object\n        cat.makeNoise();\n    }\n}\nIn this example, the Dog class and the Cat class both implement the Animal class, which defines the makeNoise() method. This means that the Dog and Cat classes both have their own implementations of the makeNoise() method.\nWhen the makeNoise() method is called on the dog object, it executes the implementation in the Dog class, which prints the “Woof!” message to the console. When the makeNoise() method is called on the cat object, it executes the implementation in the Cat class, which prints the “Meow!” message to the console.",
    "crumbs": [
      "Java Principles",
      "Java SE: Polymorphism"
    ]
  },
  {
    "objectID": "javase/se-principles-polymorphism.html#overview",
    "href": "javase/se-principles-polymorphism.html#overview",
    "title": "Java SE: Polymorphism",
    "section": "",
    "text": "📘 Polymorphism\nPolymorphism is a fundamental concept in object-oriented programming. It is the ability of an object to take on different forms.\nIn other words, it is the ability of a single object to behave differently in different contexts.\n\n\nPolymorphism is an important concept in object-oriented programming because it allows developers to write code that is more flexible and reusable. By using polymorphism, developers can write code that can operate on objects of different types, without knowing the specific type of the object in advance.\n\n\n\nJava SE Basic Principles OOP Polymorphishm\n\n\nIn Java, polymorphism is achieved through the use of inheritance and interfaces. A subclass can implement multiple interfaces, and an interface can be implemented by multiple classes. This allows objects of different types to share a common set of methods, which can be called on the objects without knowing their specific type.\nHere is an example of polymorphism in Java using the Animal, Dog, and Cat classes from the previous examples:\npublic class Main {\n    public static void main(String[] args) {\n        // Create a Dog object\n        Dog dog = new Dog(\"Buddy\", 5);\n\n        // Create a Cat object\n        Cat cat = new Cat(\"Whiskers\", 3);\n\n        // Call the makeNoise() method on the Dog object\n        dog.makeNoise();\n\n        // Call the makeNoise() method on the Cat object\n        cat.makeNoise();\n    }\n}\nIn this example, the Dog class and the Cat class both implement the Animal class, which defines the makeNoise() method. This means that the Dog and Cat classes both have their own implementations of the makeNoise() method.\nWhen the makeNoise() method is called on the dog object, it executes the implementation in the Dog class, which prints the “Woof!” message to the console. When the makeNoise() method is called on the cat object, it executes the implementation in the Cat class, which prints the “Meow!” message to the console.",
    "crumbs": [
      "Java Principles",
      "Java SE: Polymorphism"
    ]
  },
  {
    "objectID": "javase/se-principles-polymorphism.html#conclusion",
    "href": "javase/se-principles-polymorphism.html#conclusion",
    "title": "Java SE: Polymorphism",
    "section": "2 Conclusion",
    "text": "2 Conclusion",
    "crumbs": [
      "Java Principles",
      "Java SE: Polymorphism"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html",
    "href": "javase/se-concepts-static.html",
    "title": "Java SE: static modifier",
    "section": "",
    "text": "📘 static modifier\nIn Java, the static modifier is used to indicate that a class or class member belongs to the class itself, rather than to an instance of the class.\nIn other words, the static modifier indicates that the class or class member is associated with the class as a whole, rather than with a specific instance of the class.",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html#static-code-block",
    "href": "javase/se-concepts-static.html#static-code-block",
    "title": "Java SE: static modifier",
    "section": "1.1 static code block",
    "text": "1.1 static code block\nIn Java, we have a special block known as aStatic Initialization Block. A Static Initialization Block is executed before the main() method, it will execute once. This block will not return anything and we can not use the this keyword since it does not have any instance.\nFor example:\n\n\nMovieManager.java\n\nstatic {            \n    int count = 0;\n    String name =\"Alien\";\n    double priceMovie = 45.50;\n};",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html#static-field",
    "href": "javase/se-concepts-static.html#static-field",
    "title": "Java SE: static modifier",
    "section": "1.2 static field",
    "text": "1.2 static field\nWhen applied to a field, the static modifier indicates that the field belongs to the class itself, rather than to an instance of the class. This means that all instances of the class share the same value for the static field.\nFor example:\n\n\nCounter.java\n\npublic class Counter {\n    // Static field\n    private static int count = 0;\n\n    // Constructor\n    public Counter() {\n        count++;\n    }\n\n    // Getter method for the count field\n    public static int getCount() {\n        return count;\n    }\n}\n\n\n\nIn this example, the count field is marked as static, which means that all instances of the Counter class share the same value for the count field. When a new instance of the Counter class is created, the count field is incremented, and the new value is shared by all instances of the class.\nAnother example:\n\n\nAccount.java\n\npublic class Account {\n    // Static field\n    private static int nextAccountNumber = 1;\n\n    // Private instance variables\n    private int accountNumber;\n    private String name;\n    private double balance;\n\n    // Constructor\n    public Account(String name, double balance) {\n        this.accountNumber = nextAccountNumber++;\n        this.name = name;\n        this.balance = balance;\n    }\n\n    // Getter method for the accountNumber field\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    // Getter method for the name field\n    public String getName() {\n        return name;\n    }\n\n    // Getter method for the balance field\n    public double getBalance() {\n        return balance;\n    }\n\n    // Method for depositing money into the account\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    // Method for withdrawing money from the account\n    public void withdraw(double amount) {\n        balance -= amount;\n    }\n}\n\n\n\nIn this example, the Account class defines a nextAccountNumber field that is marked as static. This means that the nextAccountNumber field belongs to the Account class itself, rather than to an instance of the Account class. This means that all instances of the Account class share the same value for the nextAccountNumber field.\nWhen a new instance of the Account class is created, the nextAccountNumber field is incremented, and the new value is shared by all instances of the class. This allows each instance of the Account class to have a unique accountNumber field, which is generated automatically using the nextAccountNumber field.",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html#static-method",
    "href": "javase/se-concepts-static.html#static-method",
    "title": "Java SE: static modifier",
    "section": "1.3 static method",
    "text": "1.3 static method\nWhen applied to a method, the static modifier indicates that the method belongs to the class itself, rather than to an instance of the class. This means that the static method can be called on the class itself, rather than on an instance of the class.\nFor example:\n\n\nMathUtils.java\n\npublic class MathUtils {\n    // Static method\n    public static double squareRoot(double number) {\n        return Math.sqrt(number);\n    }\n}\n\n\n\nIn this example, the squareRoot() method is marked as static, which means that it can be called on the MathUtils class itself, rather than on an instance of the MathUtils class. This allows the squareRoot() method to be called without creating an instance of the MathUtils class, which can be useful in some situations.\nFor example:\n\n\nMovieManager.java\n\npublic class MovieManager {\n\n    // Static method\n    public static boolean createMovie(Movie movie) {\n        boolean result = false;\n        // to-do algorithmic to solve this method\n        return result;\n    }\n\n    // Static method\n    public static boolean deleteMovie(String idMovie) {\n        boolean result = false;\n        // to-do algorithmic to solve this method\n        return result;\n    }\n\n    // Static method\n    public static boolean updateMovie(Movie movie) {\n        boolean result = false;\n        // to-do algorithmic to solve this method\n        return result;\n    }\n\n    // Static method\n    public static List&lt;Movie&gt; getAllMovies() {\n        List&lt;Movie&gt; movies = new ArrayList&lt;&gt;();\n        // to-do algorithmic to solve this method\n        return movies;\n    }\n\n    // Static method\n    public static List&lt;Movie&gt; findMovie(String title) {\n        List&lt;Movie&gt; movies = new ArrayList&lt;&gt;();\n        // to-do algorithmic to solve this method\n        return movies;\n    }\n    \n}\n\n\n\n\n\n\n\nclassDiagram\n  class Movie {\n    -title: String\n    -reviews: List&lt;Review&gt;\n    -director: Director\n  }\n  \n  class Critic {\n    -publications: int\n  }\n  \n  class Director {\n    -oscars: int\n  }\n  class Review {\n    -rating: int\n    -comment: String\n    -critic: Critic\n  }\n  class Person {\n    -name: String\n  }\n  \n  class MovieManager {\n    -static boolean deleteMovie(id)$\n    -static boolean createMovie(id)$\n    -static boolean updateMovie(id)$\n    -getAllMovies()$ List~Movie~\n    -findMovie(id)$ List~Movie\n  }\n\n  MovieManager -- Movie\n  Movie *-- Review\n  Movie *-- Director\n  Review o-- Critic\n  Person &lt;-- Director\n  Person &lt;-- Critic",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html#static-class",
    "href": "javase/se-concepts-static.html#static-class",
    "title": "Java SE: static modifier",
    "section": "1.4 static class",
    "text": "1.4 static class\nWhen applied to a class, the static modifier indicates that the class is a nested class. In other words, the static class is defined inside another class, and is associated with the outer class.\n\n\nAccount.java\n\npublic class Account {\n    // Static field\n    private static int nextAccountNumber = 1;\n\n    // Private instance variables\n    private int accountNumber;\n    private String name;\n    private double balance;\n\n    // Static nested class\n    public static class Transaction {\n        // Private instance variables\n        private int transactionNumber;\n        private double amount;\n        private String type;\n\n        // Constructor\n        public Transaction(double amount, String type) {\n            this.transactionNumber = nextAccountNumber++;\n            this.amount = amount;\n            this.type = type;\n        }\n\n        // Getter method for the transactionNumber field\n        public int getTransactionNumber() {\n            return transactionNumber;\n        }\n\n        // Getter method for the amount field\n        public double getAmount() {\n            return amount;\n        }\n\n        // Getter method for the type field\n        public String getType() {\n            return type;\n        }\n    }\n\n    // Constructor\n    public Account(String name, double balance) {\n        this.accountNumber = nextAccountNumber++;\n        this.name = name;\n        this.balance = balance;\n    }\n\n    // Getter method for the accountNumber field\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    // Getter method for the name field\n    public String getName() {\n        return name;\n    }\n\n    // Getter method for the balance field\n    public double getBalance() {\n        return balance;\n    }\n\n}\n\n\n\nHere is an example of how the static modifier can be used when applied to a class in Java, using an Account class and a nested Transaction class as examples:",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html#key-points",
    "href": "javase/se-concepts-static.html#key-points",
    "title": "Java SE: static modifier",
    "section": "4.1 Key Points",
    "text": "4.1 Key Points\n\nFinal variables must be initialized either at declaration or in the constructor.\nStatic final variables are often used to define constants.\nFinal methods in interfaces are redundant, as interface methods are implicitly final.\nThe final keyword can improve performance in some cases, as the compiler can optimize final methods and variables.",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html#final",
    "href": "javase/se-concepts-static.html#final",
    "title": "Java SE: static modifier",
    "section": "6.1 Final",
    "text": "6.1 Final\n\nApplies to variables, methods, and classes.\nFor variables, prevents reassignment of the reference, but not modification of the object’s state.\nEnsures the variable will always point to the same object reference.\n\nfinal List&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Item\"); // Valid: Modifying object state\n// list = new ArrayList&lt;&gt;(); // Invalid: Reassignment not allowed",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html#immutable",
    "href": "javase/se-concepts-static.html#immutable",
    "title": "Java SE: static modifier",
    "section": "6.2 Immutable",
    "text": "6.2 Immutable\n\nApplies to objects, not variables.\nPrevents any changes to the object’s state after creation.\nThe object’s internal values cannot be modified once initialized.\n\nString str = \"Hello\";\n// str.toLowerCase(); // Returns a new String, doesn't modify original\n// String is immutable, so its state can't be changed",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-concepts-static.html#key-distinctions",
    "href": "javase/se-concepts-static.html#key-distinctions",
    "title": "Java SE: static modifier",
    "section": "6.3 Key Distinctions",
    "text": "6.3 Key Distinctions\n\nScope: final is about reference constancy, while immutability is about object state constancy.\nMutability: A final variable can still refer to a mutable object, whereas an immutable object’s state cannot be changed at all.\nImplementation: final is a keyword in Java, while immutability is a design principle implemented by the programmer.\nFlexibility: You can have a non-final reference to an immutable object, allowing the reference to be reassigned while the object remains unchangeable.\nCombination: An object can be both final and immutable, like the String class in Java.",
    "crumbs": [
      "Java Concepts",
      "Java SE: static modifier"
    ]
  },
  {
    "objectID": "javase/se-what-basics.html",
    "href": "javase/se-what-basics.html",
    "title": "Java Standard Edition: Basics",
    "section": "",
    "text": "📘 Java SE\nJava is a high-level, class-based, object-oriented and general-purpose programming language and computing platform intended to let programmers write once, run anywhere (WORA). The type system is static, strong and safe.\nIt is widely used for developing applications for web, mobile, and desktop environments. Java is known for its reliability and security, making it a perfect choice for developing enterprise-level applications, that is JEE (Java Enterprise Edition).",
    "crumbs": [
      "What is Java SE",
      "Java Standard Edition: Basics"
    ]
  },
  {
    "objectID": "javase/se-what-basics.html#introduction",
    "href": "javase/se-what-basics.html#introduction",
    "title": "Java Standard Edition: Basics",
    "section": "",
    "text": "📘 Java SE\nJava is a high-level, class-based, object-oriented and general-purpose programming language and computing platform intended to let programmers write once, run anywhere (WORA). The type system is static, strong and safe.\nIt is widely used for developing applications for web, mobile, and desktop environments. Java is known for its reliability and security, making it a perfect choice for developing enterprise-level applications, that is JEE (Java Enterprise Edition).",
    "crumbs": [
      "What is Java SE",
      "Java Standard Edition: Basics"
    ]
  },
  {
    "objectID": "javase/se-what-basics.html#java-se",
    "href": "javase/se-what-basics.html#java-se",
    "title": "Java Standard Edition: Basics",
    "section": "2 Java SE",
    "text": "2 Java SE\nJava SE (Java Platform, Standard Edition) is a set of libraries, tools, and technologies that provide a complete environment for developing and deploying Java-based applications. Java SE includes the:\n\nJava Development Kit (JDK), which contains the tools and libraries necessary for developing and running Java programs,\nas well as the Java Runtime Environment (JRE), which is used to run Java programs on a computer.\n\n\n\n\n\n\nJava SE and Java EE - Sergelucas, CC BY-SA 3.0, via Wikimedia Commons\n\n\nJava SE is the core platform for Java-based software development, and is used by millions of developers around the world to create a wide variety of applications, from desktop and mobile applications to enterprise-level systems.\n\nThe Java Version Almanac\n\n\n\nJava SE also includes a set of standard libraries, which provide a wide range of functionality, including basic input/output, networking, security, and graphical user interface (GUI) components.",
    "crumbs": [
      "What is Java SE",
      "Java Standard Edition: Basics"
    ]
  },
  {
    "objectID": "javase/se-what-basics.html#programming-steps",
    "href": "javase/se-what-basics.html#programming-steps",
    "title": "Java Standard Edition: Basics",
    "section": "3 Programming steps",
    "text": "3 Programming steps\n\n\n\nJava Programming Steps\n\n\nhe steps in writing a Java program is illustrated as above:\n\nWrite the source code Person.java.\nCompile the source code Person.java into Java portable bytecode (or machine code) Person.class using the JDK’s Java compiler by issuing the command javac Person.java.\nRun the compiled bytecode Person.class, using the JDK’s Java Runtime by issuing the command java Person..",
    "crumbs": [
      "What is Java SE",
      "Java Standard Edition: Basics"
    ]
  },
  {
    "objectID": "javase/se-what-basics.html#type-system",
    "href": "javase/se-what-basics.html#type-system",
    "title": "Java Standard Edition: Basics",
    "section": "4 Type system",
    "text": "4 Type system\n\nSafe: Java’s type system helps to prevent errors by ensuring that values stored in variables are always of the correct type. This helps to avoid type-related runtime errors and makes Java programs more reliable.\nStatic: Java is a statically-typed language, which means that the type of a variable is determined at compile time, rather than at runtime. This allows the Java compiler to catch type errors before the program is executed, making it easier to find and fix errors in your code.\nStrong: Java has a strong type system, which means that type conversions (also known as typecasting) between different types are not allowed unless they are explicitly specified by the programmer. This helps to prevent unintended type errors and makes Java programs more predictable and easier to understand.",
    "crumbs": [
      "What is Java SE",
      "Java Standard Edition: Basics"
    ]
  },
  {
    "objectID": "javase/se-what-basics.html#and-..-what-is-jee",
    "href": "javase/se-what-basics.html#and-..-what-is-jee",
    "title": "Java Standard Edition: Basics",
    "section": "5 And .. what is JEE?",
    "text": "5 And .. what is JEE?\n\n\n\n\n\n\nJava EE\n\n\n\nJEE (Java Platform, Enterprise Edition) is a collection of technologies and standards for building enterprise-level applications using the Java programming language.\n\n\nEE provides a set of APIs and tools for developing distributed, transactional, and secure Java applications that can run on a variety of devices and environments, including web and mobile.\nJEE is often used for building large-scale, complex, and mission-critical applications in industries such as finance, healthcare, and e-commerce.\nJava Vocabulary",
    "crumbs": [
      "What is Java SE",
      "Java Standard Edition: Basics"
    ]
  },
  {
    "objectID": "javase/se-what-moocsyllabus.html",
    "href": "javase/se-what-moocsyllabus.html",
    "title": "Java MOOC Helsinki Syllabus",
    "section": "",
    "text": "Part 1: Printing, input, Variables, Calculating with numbers, Conditional statements\nPart 2: Recurring problems and patterns, Repeating functionality, More loops, Methods\nPart 3: Discovering errors, Lists, Arrays, Using strings\nPart 4: Introduction to object-oriented, Programming Objects in a list, Files and reading data\nPart 5: Learning object-oriented programming, overloading methods and constructors, Primitive and reference variables, Objects and references\nPart 6: Objects on a list and a list as part of an object, Separating the user interface from program logic, Introduction to testing\nPart 7: Programming paradigms, Algorithms, Larger programming exercises\n\n\n\n\n\nPart 8: Hashmaps, fetching and grouping information\nPart 9: Class inheritance, Interfaces, Interfaces, Object polymorphism\nPart 10: Handling collections as streams, The Comparable Interface, Other useful techniques\nPart 11: Class diagrams, Packages, Exceptions, Processing files\nPart 12: Type parameters, ArrayList and hash table, Randomness, Multidimensional data\nPart 13: Graphical user interfaces, UI components and their layout, Event handling, Application’s launch parameters, Multiple views\nPart 14: Data visualization, Multimedia in programs, Larger application: Asteroids, Maven and third-party libraries",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki Syllabus"
    ]
  },
  {
    "objectID": "javase/se-what-moocsyllabus.html#java-programming-i-1",
    "href": "javase/se-what-moocsyllabus.html#java-programming-i-1",
    "title": "Java MOOC Helsinki Syllabus",
    "section": "Java Programming I",
    "text": "Java Programming I\n\nPart 1\n\nThe first part focuses on taking the plunge with programming and getting familiar with all the required tools.\n\n1. Printing:\n\nLearn to write a program that prints text.\nBecome familiar with executing programs.\nKnow what the term “parameter” means.\n\n2. Reading input:\n\nLearn to write a program that reads text written by a user.\nKnow what a “string” refers to in programming.\nKnow how to join (i.e., “concatenate”) strings together.\n\n3. Variables:\n\nUnderstand the concept of a variable. You know what variable types, names, and values are.\nKnow how to create and use string, integer, floating-point, and boolean variables.\n\n4. Calculating with numbers:\n\nLearn to perform calculations with the help of variables.\nKnow how to form printable statements including both calculations (expressions) and strings.\n\n5. Conditional statements and conditional operation:\n\nBecome familiar with the idea of a conditional statement and know how to create a program containing optional operations through the use of conditional statements.\nBecome familiar with comparison and logical operators commonly used in conditional statements.\nKnow how to compare both numbers and strings, remembering the equals-command for strings.\nBecome familiar with the order of execution for a conditional statement, and know that the parsing of a conditional statement stops at the first condition whose statement evaluates to true.\n\n\n\n\n\n\n\nProgramming in our society\n\n\n\nContext introduction to coding now a days.\n\n\n\n\nPart 2\n\nThe second part focuses on repetition in programs and on how to divide functionality into distinct units.\n\n1. Recurring problems and patterns to solve them:\n\nYou recognize that certain sub-problems, such as reading input or calculations, recur in programs.\nYou’re aware of solution models to certain sub-problems.\nYou practice combining solution patterns used on sub-problems to solve broader ones.\n\n2. Repeating functionality:\n\nYou are familiar with loops and know how to create a program that contains one.\nYou know how to use the break command to end a loop’s execution.\nYou know how to use continue command to return to the beginning of a loop.\nYou are able to create a program that reads inputs from a user until a specific input is given. For example, the number 0 or the string “end”, after which the program prints something about the provided inputs (e.g., the input count, and in the case of numbers their sum and average).\n\n3. More loops:\n\nYou’re familiar with the condition of the while loop condition.\nYou know how to use the for loop.\nYou recognize situations where a while loop should be used and those where a for loop is more appropriate.\n\n4. Methods and dividing the program into smaller parts:\n\nYou are familiar with the concepts of a method parameter, a method’s return value, and a program’s call stack.\nYou know how to create methods and how to call them from both the main program (the main method) as well as from inside other methods.\nYou can create parameterized and non-parameterized methods, and you can create methods that return a value.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nWe took our first steps towards managing program complexity: loop structures can be used to execute program code time and again and custom methods allow for dividing a program into smaller, more manageable parts.\n\n\n\n\n\nPart 3\n\nThe main themes in the third part are adding information to list and array data structures, and handling information in string form.\n\n1. Discovering errors:\n\nKnow the term perceptual blindness, and can learn to recognize essential (and non-essential) information with practice.\nKnow ways to comment code, and understand the importance of variable names on readability of your code.\nKnow the concept print-debugging, and know how to search for errors in the source code by printing.\n\n2. Lists:\n\nYou are familiar with the list structure and know how to use a list in a program.\nYou are familiar with the concept of an index, you can add values to a list, and you know how to retrieve information from a list’s indices.\nYou know how to iterate over a list with multiple different loop types.\nYou know how to check if a value exists in a list, and also know how to remove values from a list.\nYou are aware of the list being a reference-type variable, and become familiar with using lists as method parameters.\n\n3. Arrays:\n\nYou know what an Array is and how to use it.\nYou can create an Array, assign a value to a given index and iterate over it.\nYou recognize that an Array is a reference type and know how to use an array as a parameter of a method.\n\n4. Using strings:\n\nRevising reading, printing and comparing Strings.\nKnowing how to split a string into several pieces.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nIn this part we have taken the first steps towards effective data management: by using lists and arrays we can store almost unlimited amounts of data for the duration of program execution.\nWe have also practiced string handling and splitting strings into smaller substrings.\n\n\n\n\n\nPart 4\n\nThe main theme of the fourth part is object-oriented programming. You will learn to read data from files and to represent and handle information with the help of objects.\n\n1. Introduction to object-oriented programming:\n\nYou’re familiar with the concepts of class, object, constructor, object methods, and object variables.\nYou understand that a class defines an object’s methods and that the values of instance (object) variables are object-specific.\nYou know how to create classes and objects, and know how to use objects in your programs.\n\n2. Objects in a list:\n\nYou can add objects to a list.\nYou can go through objects in a list.\n\n3. Files and reading data:\n\nYou’ll review reading keyboard input.\nYou know what a file and a filesystem are, and are able to add an empty text file into the filesystem.\nYou know how to create and write a program that reads data from a file.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nWe learned classes and objects to suit our programming needs.\nWe defined constructors, methods, and object variables for the classes, and grew used to printing object-related information with their toString method. We also practised handling objects on a list.\n\n\n\n\n\nPart 5\n\nThe fifth part continues with object-oriented programming, which was introduced in the fourth part.\n\n1. Learning object-oriented programming:\n\nTo revise the concepts of class and object.\nTo realize that a program that has been written without objects can also be written using objects.\nTo realize that the use of objects can make a program more understandable.\n\n2. Removing repetitive code (overloading methods and constructors):\n\nBecoming familiar with the term overloading.\nCreating multiple constructors for a class.\nCreating multiple methods with the same name in a class.\n\n3. Primitive and reference variables:\n\nYou understand the terms primitive and reference variable.\nYou know the types of primitive variables in Java, and also that there can be practically an infinite number of different reference variables.\nYou know the differences in behavior between primitive and reference variables when values are assigned to them, or when they’re used as method parameters.\n\n4. Objects and references:\n\nYou will brush up on using classes and objects.\nYou know what a null reference is, and what causes the NullPointerException error.\nYou can use an object as an object variable and a method parameter.\nYou can create a method that returns an object.\nYou can create the method equals, which can be used to check if two objects of the same type have the same contents or state.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nWe took a deep dive into the world of objects.\nWe examined the differences between primitive and reference variables.\nWe learned to overload methods and constructors, and we practiced using objects as object variables, method parameters, and method return values.\nWe created methods that compare objects with each other, and we saw how objects are handled with objects in them.\n\n\n\n\n\nPart 6\n\nThe sixth part handles objects consisting of objects, and we’ll take a look at separating the text user interface and the program logic.\n\n1. Objects on a list and a list as part of an object:\n\nYou review the use of lists.\nYou know how to use a list as an instance variable.\n\n2. Separating the user interface from program logic:\n\nUnderstand creating programs so that the user interface and the application logic are separated\nCan create a textual user interface, which takes program specific application logic and a Scanner object as parameters.\n\n3. Introduction to testing:\n\nCan tell about some issues caused by software bugs.\nYou know what a stack trace is, the steps taken in troubleshooting, and can give textual test inputs to a Scanner.\nYou know what unit testing is all about and you can write unit tests.\nYou know about test-driven software development.\n\n\n\n\n\n\n\nComplex programs\n\n\n\n\nWhen you learn programming, you also develop a better eye for reading code (yours and others). In this part we understood the use of lists and practiced separating the UI from the program logic.\n\n\n\n\n\nPart 7\n\nIn the seventh part we’ll focus on general programming paradigms and algorithms.\n\n1. Programming paradigms:\n\nYou know the concept of a programming paradigm.\nYou know what is meant by procedural and object-oriented programming.\n\n2. Algorithms:\n\nYou understand the concept of algorithms and you are familiar with a few algorithms.\nYou can explain how selection sort works.\nYou can explain how the linear search and binary search algorithms work.\n\n3. Larger programming exercises:\n\nSome extensive exercises. There is no predefined structure for these tasks — think about the classes and objects that will help you complete the task while you’re completing it.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nDuring the first seven parts you’ve become familiar with the basics of programming and produced many functioning program.\nYou now know how to use variables, conditionals, loops and methods.\nYou know that the naming of variables and methods affects the understandability of your programs.\nYou’ve also dived deeper into the world of object-oriented programming, and structuring your programs in an object-oriented fashion.",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki Syllabus"
    ]
  },
  {
    "objectID": "javase/se-what-moocsyllabus.html#java-programming-ii-1",
    "href": "javase/se-what-moocsyllabus.html#java-programming-ii-1",
    "title": "Java MOOC Helsinki Syllabus",
    "section": "Java Programming II",
    "text": "Java Programming II\n\nPart 8\n\nRecap parts 1 - 7, Hashmaps, fetching and grouping information.\n\n1. Short recap:\n\nYou will brush up on the contents of the parts 1-7\n\n\n\nPart 9\n\nThe ninth part focuses on two essential concepts of object oriented programming, namely inheritance and interfaces. You will learn to create classes that inherit another classes, and also classes that implement one or more interfaces. You are also going to notice that an object can be represented by any of its actual types.\n\n1. Class inheritance:\n\nYou know that in the Java programming language every class inherits the Object class, and you understand why every object has methods toString, equals, and hashCode.\nYou are familiar with the concepts of inheritance, superclass, and subclass.\nYou can create classes that inherit some of their properties from another class.\nYou can call a constructor or method that is defined in a superclass.\nYou know how an object’s executed method is determined, and you are familiar with the concept of polymorphism.\nYou can assess when to use inheritance, and you can come up with an example that is ill-suited for inheritance.\n\n2. Interfaces:\n\nYou’re familiar with the concept of an interface, can define your own interfaces, and implement an interface in a class.\nYou know how to use interfaces as variable types, method parameters and method return values.\nYou’re aware of some of the interfaces that come with Java.\n\n2. Object polymorphism:\n\nYou are familiar with the concept of inheritance hierarchy.\nYou understand that an object can be represented through all of its actual types.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nYou learned some of the properties of object-oriented programming.\nProgrammers can expect all objects to have the methods toString, hashCode and equals because each object is of type Object in addition to their own type.\nInheritance and interfaces allow use to implement methods and constructors that handle many kinds of objects. This enables us to easily extend programs and it helps with solving problems with classes and objects.\n\n\n\n\n\nPart 10\n\nIn the tenth part we introduce handling collections with streams. You’ll learn how to create a stream from a collection, filter the values of a stream, transform the values of a stream, and collect values of a stream to another collection. We introduce the concept lambda expression, and you’ll learn to use it in your programs. You will also learn how to order objects using the Java Comparable interface, and some other useful techniques like regular expressions, enumerate type and iterator.\n\n1. Handling collections as streams:\n\nYou can handle collections using streams.\nYou know what a lambda-statement means.\nYou know the most common stream methods and are able to categorize them into intermediate and terminal operations.\n\n2. The Comparable Interface:\n\nYou’re aware of Java’s Comparable class and now how to implement it in your own classes.\nYou know how to use Java’s tools for sorting lists and stream elements.\nYou know how to sort list elements using multiple criteria (e.g., you know how to sort a person based on name and age).\n\n3. Other useful techniques:\n\nYou understand the traditional for-loop.\nYou understand the issues related to string concatenation and know how to avoid them with the StringBuilder class.\nYou understand regular expressions and can write your own ones.\nYou understand enumerated (enum) types and know when to use them.\nYou know how to use an iterator to go through collections of data.\n\n\n\nPart 11\n\nIn the eleventh part you’ll learn to decypher simple class diagrams. You’ll become familiar with packages in Java and learn what the different parts of an import statement mean. You’ll practise using exceptions in Java: how to throw and handle them. You’ll take another look at reading data from a file, and learn to write data to a file.\n\n1. Class diagrams:\n\nKnow how to draw class diagrams and how to describe classes and their attributes, constructors, and methods.\nKnow how to describe connections between classes and describe inheritance and interface implementation.\nCan implement a class based on a class diagram\n\n2. Packages:\n\nYou know what packages are and can place classes in them.\nYou know what the import statement used in Java is composed of.\n\n3. Exceptions:\n\nKnow what exceptions are and how to handle them.\nCan throw exceptions.\nKnow that some exceptions have to be handled and that some exceptions do not have to be handled.\n\n4. Processing files:\n\nYou will refresh your memories of reading from files.\nYou will be able to write to a file.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nSelf-reflexion on learning goals.\n\n\n\n\n\nPart 12\n\nIn the twelfth part we will introduce type parameters and you will learn what ArrayList&lt;String&gt;; actually means. You will learn to implement classes that use type parameters. You will get to understand how ArrayList and HashMap are implemented, and you will implement your own versions as well. You will learn how to create random numbers, and practice using some Java tools to create random numbers. You will learn how multidimensional data can be presented, and how to use multidimensional arrays.\n\n1. Type parameters:\n\nYou know what is meant with the concept of a generic type parameter.\nYou are familiar with already existing Java classes that make use of generic type parameters.\nYou can create classes of your own that make use of generic type parameters.\n\n2. ArrayList and hash table:\n\nYou know how to implement a generic list that has changing size.\nYou know of one possible method to implement a class like Java’s ArrayList.\nYou know how to implement a hash table.\nYou are aware of one possible method to implement a class like Java’s HashMap.\n\n3. Randomness:\n\nKnow how to generate random numbers, and know some situations where random numbers are needed.\nCan use Java Random class to generate random numbers.\n\n4. Multidimensional data:\n\nKnow ways to represent multidimensional data.\nCan create and use multidimensional arrays.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nLists and hashmap are the most commonly used datastructures in programming.\nUnderstanding and using these datastructures are a part of every computers scientists (and programmers) basic knowledge.\nIn this part we looked into the implementation of hashmaps and lists and got introduced to generics in java.\nWe also touched on randomness and multidimensional data.\n\n\n\n\n\nPart 13\n\nThe thirteenth part introduces the topics of creating graphical user interfaces and the kinds of components that are used in them. You will learn to handle different events that occur in graphical user interfaces, and practise creating applications that contain multiple views.\n\n1. Graphical user interfaces:\n\nYou know what user interfaces (UIs) consist of and know how to launch a graphical user interfaces (GUIs).\n\n2. UI components and their layout:\n\nYou are aware of some interface components and know how to add them to a user interface.\nYou’re familiar with methods for configuring user interface components.\n\n3. Event handling:\n\nYou’re familiar with the concept of an event handler and are able to handle user interface events.\n\n4. Application’s launch parameters:\n\nYou know how to pass parameters to a graphical user interface.\n\n5. Multiple views:\n\nYou practice adding multiple views to a graphical interface.\nYou know methods for changing the view.\nYou know methods for separating the application logic and the user interface logic.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nWe took our first steps towards creating a graphical user interface.\nWe learned to use program windows, add UI components and event handling.\nAltough we used the JavaFX library the principles of graphical user interfaces are the same in other libraris.\nWe also learned event based programming.\n\n\n\n\n\nPart 14\n\nIn the fourteenth part you will learn methods for data visualization and acquaint yourself with Java’s existing charts (line chart, bar chart). You will learn to make simple drawings and take a look at image processing. You will also learn to play audio files.\n\n1. Data visualization:\n\nYou are aware of data visualizations methods.\nYou know how to use Java’s ready-made data visualization interface components.\nYou know a way to visualize information that changes dynamically.\n\n2. Multimedia in programs:\n\nKnow ways to use multimedia as a part of graphical UI.\nCan draw a graphical UI.\nCan display images on a graphical UI.\nCan play sound from a graphical UI.\n\n3. Larger application: Asteroids:\n\nYou know a way of implementing an interactive game.\nYou are able to picture how a larger application is built on step by step.\nYou practice following step by step instructions for building a larger application.\n\n4. Maven and third-party libraries:\n\nKnow the term library and know some third party libraries.\nKnow where to search for libraries.\nCan implement an application which uses a third party library.\nKnow that an application can be packaged and shared with others, and that applications shared this way do not require a development environment to work.\n\n\n\n\n\n\n\nConclusion\n\n\n\n\nWe looked into data visualization, displaying media programmatically and some third party libraries.\nWith the knowledge from this course you should be able to create your own programs with some research and it’s in fact recommended to hone your programming skills with small projects.\nSome of the things left out of this course are: test and deployment automation, build systems, web server programming and much more.",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki Syllabus"
    ]
  },
  {
    "objectID": "javase/selab2-1.html",
    "href": "javase/selab2-1.html",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "",
    "text": "📘 Linux Lab#SE02-1: Movie Review and Rating\n\nCreate a Maven/Gradle Java SE Project.\nAdd the needed dependencies:\n\nLombok\nJunit\nJava Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\nMovie: The Movie class represents a movie that is being reviewed. It has the following attributes:\n\ntitle: a String representing the title of the movie\nreviews: a Set of Review objects representing the reviews that have been written for this movie\nCritic: The Critic class represents a critic who writes reviews.\n\nThe Critic class has the following attributes:\n\nname: a String representing the name of the critic\nReview: The Review class represents a review of a movie written by a critic.\n\nThe Review class has the following attributes:\n\nmovie: a Movie object representing the movie being reviewed\ncritic: a Critic object representing the critic who wrote the review\nrating: an int representing the rating given by the critic (on a scale of 1 to 5)\ncomment: a String representing the comment written by the critic about the movie\n\n\nWith Junit dependency create unitary test to test objects and operations.\nFrom here you should add new features once all the test are passed.\n\nOperations, you could think in a Manager Class o similar\nNew fields/attributes and new classes\nNew compositions and inherence: expand your model\nUse Factory design pattern to create new objects",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-1: Movie/Review, Model"
    ]
  },
  {
    "objectID": "javase/selab2-1.html#core-classes-and-dependencies",
    "href": "javase/selab2-1.html#core-classes-and-dependencies",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "1 Core classes and dependencies",
    "text": "1 Core classes and dependencies\nYou could then use these classes as follows:\n\n\nmoviemodel.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Movie {\n  private String title;\n  private int year;\n  private Filmmaker filmmaker;\n  private Set&lt;Actor&gt; crew;\n  private Set&lt;Review&gt; reviews;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Critic {\n  private String name;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Actor {\n  private String name;\n}\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Filmmaker {\n  private String name;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Review {\n  private Movie movie;\n  private Critic critic;\n  private int rating;\n  private String comment;\n}\n\n\n1.1 Dependency: Lombok\nUse Lombok, link:\n\nThe @Data annotation is a Lombok annotation that generates getters and setters for the fields of a class, as well as equals, hashCode, and toString methods based on the fields.\nThe @AllArgsConstructor annotation is a Lombok annotation that generates a constructor with all of the class’s fields as arguments.\nThe @NoArgsConstructor annotation is a Lombok annotation that generates a no-argument constructor for a class.\n\n@Data All together now: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, @Setter on all non-final fields, and @RequiredArgsConstructor.\nAdding lombok to your pom file: to include lombok as a provided dependency, add it to your In your Java code: block like so:\n\n\npom.xml\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;version&gt;1.18.24&lt;/version&gt;\n        &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n\n\n1.2 Dependency: Java Faker\nUse Java Faker:\nIn pom.xml, add the following xml dependency between  … \n\n\npom.xml\n\n&lt;dependencies&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;com.github.javafaker&lt;/groupId&gt;\n      &lt;artifactId&gt;javafaker&lt;/artifactId&gt;\n      &lt;version&gt;1.0.2&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\nIn your Java code:\n\n\ntestfaker.java\n\nimport com.github.javafaker.Faker;\nimport org.junit.jupiter.api.Test;\n\nFaker faker = new Faker();\n\nString name = faker.name().fullName(); // Miss Samanta Schmidt\nString firstName = faker.name().firstName(); // Emory\nString lastName = faker.name().lastName(); // Barton\n\nString streetAddress = faker.address().streetAddress(); // 60018 Sawayn Brooks Suite 449\n\n\n\n1.3 Dependency: JUnit 5\nTo configure support for JUnit Jupiter based tests, configure test scoped dependencies on the JUnit Jupiter API and the JUnit Jupiter TestEngine implementation similar to the following.\nmore on Java SE TDD\n\n\npom.xml\n\n&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n      &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n      &lt;version&gt;5.9.1&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-1: Movie/Review, Model"
    ]
  },
  {
    "objectID": "javase/selab2-1.html#solving-discussion",
    "href": "javase/selab2-1.html#solving-discussion",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "2 Solving discussion",
    "text": "2 Solving discussion\n\n2.1 UMLs\nThis first UML diagram for the Movie class represents a design where a movie has many critics, and a critic has many reviews of movies.\nThis is reflected in the multiplicity of the associations between the classes: the Movie class has a many multiplicity with the Critic class, indicating that a movie can have zero or more critics, and the Critic class has a many multiplicity with the Review class, indicating that a critic can have zero or more reviews.\n\n\n\n\n\n\nclassDiagram\n  class Movie {\n    -title: String\n    -critics: Set&lt;Critic&gt;\n  }\n  class Critic {\n    -name: String\n    -reviews: Set&lt;Review&gt;\n  }\n  class Review {\n    -movie: Movie\n    -critic: Critic\n    -rating: int\n    -comment: String\n  }\n  Movie *-- Critic\n  Critic *-- Review\n  Review o-- Movie\n\n\n\n\n\n\n\n\nThis second UML diagram for the Movie class represents a design where a movie has many reviews, and each review is written by a critic.\nThis is reflected in the multiplicity of the associations between the classes: the Movie class has a many multiplicity with the Review class, indicating that a movie can have zero or more reviews, and the Review class has a 1 multiplicity with the Critic class, indicating that a review is written by exactly one critic.\n\n\n\n\n\n\nclassDiagram\n  class Movie {\n    -title: String\n    -reviews: Set&lt;Review&gt;\n  }\n  class Critic {\n    -name: String\n  }\n  class Review {\n    -movie: Movie\n    -critic: Critic\n    -rating: int\n    -comment: String\n  }\n  Movie *-- Review\n  Review o-- Critic\n\n\n\n\n\n\n\n\n\n\n\n2.2 Basic tests\n\n\nGeneraltest.java\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport com.github.javafaker.Faker;\nimport org.junit.jupiter.api.Test;\n\n@Test\npublic void testCreateMovie() {\n  // create a movie\n  Movie movie = new Movie(\"The Shawshank Redemption\");\n  \n  // check that the movie was created correctly\n  assertEquals(\"The Shawshank Redemption\", movie.getTitle());\n  assertNotNull(movie.getReviews());\n  assertTrue(movie.getReviews().isEmpty());\n}\n\n@Test\npublic void testCreateCritic() {\n  // create a critic\n  Critic critic = new Critic(\"Roger Ebert\");\n  pom.xmlte a movie and a critic\n  Movie movie = new Movie(\"The Shawshank Redemption\");\n  Critic critic = new Critic(\"Roger Ebert\");\n  \n  // create a review\n  Review review = new Review(movie, critic, 5, \"One of the greatest films ever made\");\n  \n  // check that the review was created correctly\n  assertEquals(movie, review.getMovie());\n  assertEquals(critic, review.getCritic());\n  assertEquals(5, review.getRating());\n  assertEquals(\"One of the greatest films ever made\", review.getComment());\n}\n\n\n\n2.3 Create a superclass Person\nThe Critic, Filmmaker, and Actor classes all extend the Person class, meaning they inherit its fields and methods. In addition, they each have their own field:\n\nThe Critic class has a reviews field, a Set of Review objects representing the reviews written by the critic.\nThe Filmmaker class has a movies field, a Set of Movie objects representing the movies made by the filmmaker.\nThe Actor class has a movies field, a Set of Movie objects representing the movies in which the actor has appeared.\n\n\n\npersonmodel.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Person {\n  private String name;\n  private Date birthDate;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Critic extends Person {\n  private Set&lt;Review&gt; reviews;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Filmmaker extends Person {\n  private Set&lt;Movie&gt; movies;\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\nclass Actor extends Person {\n  private Set&lt;Movie&gt; movies;\n}\n\n\n\n\n\n\n\n\nclassDiagram\n\n  class Person {\n    -name: String\n    -birthDate: Date\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\n  class Critic extends Person {\n    -reviews: Set&lt;Review&gt;\n  }\n\n  class Filmmaker extends Person {\n    -movies: Set&lt;Movie&gt;\n  }\n\n  class Actor extends Person {\n    -movies: Set&lt;Movie&gt;\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\n\n  class Person {\n    -name: String\n    -birthDate: Date\n  }\n\n  Person &lt;|-- Critic\n  Person &lt;|-- Filmmaker\n  Person &lt;|-- Actor",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-1: Movie/Review, Model"
    ]
  },
  {
    "objectID": "javase/selab1-1.html",
    "href": "javase/selab1-1.html",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "",
    "text": "Create a Maven/Gradle Java SE Project with three classes and Junit to test objects and operations.\n\n\n\n\n\n\nContext Goal Tasks Optional\n\n\n\n\n\n\nIn order to complete this project, you will need to have a basic understanding of the Java programming language, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\n\n\nOverall, this project will provide an opportunity for you to learn and apply the basics of Java programming, as well as gain experience with Maven or Gradle, JUnit, user input via the console and some discussion about composition and how classes work.\n\n\nAdditionally, you will need to have in mind that this project would center around a banking point of view.\n\n\nBy completing this project, you will have a starting foundation in these technologies and be able to build more complex and sophisticated Java applications in the future. You may go to Lab 2 (go Lab#SE01-2)\n\n\n\n\n\n\nThe goal of this project is to create three classes in Java (Person, Account and Manager) that implement different algorithms or data structures, and to test them using JUnit.  These classes could include, for example, creating new objects, a data structure for storing and manipulating data (List), or a utility class for performing common operations (static).\n\n\n\n\n\n\nThe tasks involved in this project include: \n\n\nDecide where your project will weight: Person or Account.\n\n\nCreating a new Maven or Gradle project and setting up the project structure.\n\n\nModifying the project’s pom.xml or build.gradle file to import the necessary dependencies, including JUnit for testing.\n\n\nImplementing the three required classes in Java, using appropriate algorithms and data structures.\n\n\nImplementing as well two basic pattern-designs: singleton and composition.\n\n\nWriting JUnit tests to verify that the classes work as expected.\n\n\n\nYou may attach the JUnit Test HTML results to documentation.\n\n\n\n\n\n\n\nAs an optional task, you could also consider allowing the user to input data via the console, rather than using hard-coded test data in your JUnit tests.  This would allow you to test the classes with a variety of different input data, and to interact with the classes in a more dynamic way.\n\n\nAfter mplementing two basic pattern-designs: singleton, composition your may think about factory.\n\n\n\n\n\n\n\n\n\nHere, the Person class represents a person with a name, address and others. In the same way, Account class is a bank account. The AccountManager class contains static methods to perform withdrawal, transfer, and change pin operations on a Person and Account object.\npublic class Person {\n  private String name;\n  private String address;\n  // Other properties for a Person...\n\n  public Person(String name, String address) {\n    this.name = name;\n    this.address = address;\n  }\n\n  // Getters and setters for Person properties...\n}\n\n\npublic class Account {\n  private String accountNumber;\n  private String pin;\n  private double balance;\n  // Other properties for an Account...\n\n  public Account(String accountNumber, String pin, double balance) {\n    this.accountNumber = accountNumber;\n    this.pin = pin;\n    this.balance = balance;\n  }\n\n  // Getters and setters for Account properties...\n}\n\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount &gt; 0 && amount &lt;= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount &gt; 0 && amount &lt;= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\npublic class Person {\n  private String name;\n  private String surname;\n  private int age;\n  private Account account;\n\n  public Person(String name, String surname, int age, Account account) {\n    this.name = name;\n    this.surname = surname;\n    this.age = age;\n    this.account = account;\n  }\n\n  public Account getAccount() {\n    return this.account;\n  }\n\n  public void setAccount(Account account) {\n    this.account = account;\n  }\n   // Getters and setters for Account properties...\n}\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n  -account: Account\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n}\n\nPerson *-- Account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n\nparticipant AccountManager as AccountManager\nparticipant Account as Account\nparticipant Person as Person\n\nAccountManager-&gt;&gt;Person: transfer(amount, sender, receiver)\nPerson-&gt;&gt;Account: updateBalance(-amount, sender)\nPerson-&gt;&gt;Account: updateBalance(-amount, receiver)\nAccount--&gt;&gt;Person: transferDone(receipt)\nPerson--&gt;&gt;AccountManager: transferDone(receipt)\n\n\n\n\n\n\n\n\n\n\n\nTo use the Singleton design pattern with a Person and Account class, you could create a singleton AccountManager class that manages the creation and operations of the Person and Account objects.\nThe AccountManager class would have a private constructor, to prevent multiple instances from being created, and a static getInstance method that returns the singleton instance of the class.\nThe AccountManager class would then have methods for performing various operations on the Person and Account objects, such as transferring money between accounts, withdrawing money from an account, or changing the PIN for an account.\nThese methods would be implemented using the Person and Account classes, and would be accessible to other classes through the singleton AccountManager instance.\nFor example, you could define the AccountManager, Person, and Account classes as follows:\npublic class AccountManager {\n  private static AccountManager instance;\n  private Person person;\n  private Account account;\n\n  private AccountManager() {\n    // Private constructor to prevent multiple instances\n  }\n\n  public static AccountManager getInstance() {\n    if (instance == null) {\n      instance = new AccountManager();\n    }\n    return instance;\n  }\n\n  public void transfer(Account from, Account to, double amount) {\n    // Transfer money from one account to another\n  }\n\n  public void withdraw(Account account, double amount) {\n    // Withdraw money from an account\n  }\n\n  public void changePin(Account account, String newPin) {\n    // Change the PIN for an account\n  }\n\n  // Other methods for managing Person and Account objects...\n}\nTo use the AccountManager class, other classes would simply need to call the getInstance method to obtain the singleton instance of the class, and then use the instance’s methods to perform operations on the Person and Account objects. For example:\n// Create a new Person and Account\n// be careful: where will these four Person objects go? \nAccountManager manager = AccountManager.getInstance();\nmanager.person = new Person(\"John Doe\", \"123 Main St.\");\nmanager.person = new Person(\"Carla Jameson\", \"323 Main St.\");\nmanager.person = new Person(\"Rafael Martin\", \"3 Glorious St.\");\nmanager.person = new Person(\"Pau Vila\", \"63 Sesamo St.\");\nBut maybe, this is not the best approach for several reasons …\n\n\n\nIt may work as follows. In fact, if we want to manage accounts (as a banking-centered problem, not a person-centered one), it could be better that Account has Person:\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n  -person: Person\n}\n\nAccount *-- Person\n\n\n\n\n\n\n\n\npublic class Account {\n  private Person person;\n  //other fields\n\n  public Account(Person person) {\n    this.person = person;\n  }\n\n  public Person getPerson() {\n    return this.person;\n  }\n\n  public void setPerson(Person person) {\n    this.person = person;\n    \n    //constructor, getters, setters and methods\n  }\n}\nSo, in this case, we could use a List object to save all the Account objects with the list:\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class AccountManager {\n  private List&lt;Account&gt; accounts;\n\n  private AccountManager() {\n    this.accounts = new ArrayList&lt;&gt;();\n  }\n\n  public List&lt;Account&gt; getAccounts() {\n    return this.accounts;\n  }\n\n  // we should manage how to add/remove accounts to/from accounts list\n\n  public static void deposit(Account account, double amount) {\n    // Code to deposit the specified amount to the account\n  }\n\n  public static void changePin(Account account, int newPin) {\n    // Code to change the PIN of the specified account\n  }\n\n  public static void transfer(Account fromAccount, Account toAccount, double amount) {\n    // Code to transfer the specified amount from the fromAccount to the toAccount\n  }\n  \n  public static void withdrawal(Account account, double amount) {\n    // Code to withdraw the specified amount from the given account\n  }\n}\n\n\n\nIn this approach:\n\nAccount has Person\nAccountManager is Singleton and there is no static-methods anywhere\nand we create just one object form AccountManager to manage accounts\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class AccountManager {\n  private static AccountManager manager = new AccountManager();\n  private List&lt;Account&gt; accounts;\n\n  // we should manage how to add/remove accounts to/from accounts list\n\n  private AccountManager() {\n    this.accounts = new ArrayList&lt;&gt;();\n  }\n\n  public static AccountManager getInstance() {\n    return manager;\n  }\n\n  public List&lt;Account&gt; getAccounts() {\n    return this.accounts;\n  }\n\n  public  void deposit(Account account, double amount) {\n    // Code to deposit the specified amount to the account\n  }\n\n  public  void changePin(Account account, int newPin) {\n    // Code to change the PIN of the specified account\n  }\n\n  public  void transfer(Account fromAccount, Account toAccount, double amount) {\n    // Code to transfer the specified amount from the fromAccount to the toAccount\n  }\n  \n  public  void withdrawal(Account account, double amount) {\n    // Code to withdraw the specified amount from the given account\n  }\n}\n\n\n\nAccountManagerTest could be like this:\n\nwith AccountManager all static-methods no-singleton\nAccount has Person\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccountManagerTest {\n  @Test\n  public void testDeposit() {\n    Account account = new Account(new Person(\"John Doe\"));\n    double initialBalance = account.getBalance();\n    double depositAmount = 100.00;\n\n    AccountManager.deposit(account, depositAmount);\n    double finalBalance = account.getBalance();\n\n    assertEquals(initialBalance + depositAmount, finalBalance);\n  }\n\n  @Test\n  public void testChangePin() {\n    Account account = new Account(new Person(\"John Doe\"));\n    int initialPin = account.getPin();\n    int newPin = 1234;\n\n    AccountManager.changePin(account, newPin);\n    int finalPin = account.getPin();\n\n    assertEquals(newPin, finalPin);\n  }\n\n  @Test\n  public void testTransfer() {\n    Account fromAccount = new Account(new Person(\"John Doe\"));\n    Account toAccount = new Account(new Person(\"Jane Doe\"));\n    double initialFromAccountBalance = fromAccount.getBalance();\n    double initialToAccountBalance = toAccount.getBalance();\n    double transferAmount = 100.00;\n\n    AccountManager.transfer(fromAccount, toAccount, transferAmount);\n    double finalFromAccountBalance = fromAccount.getBalance();\n    double finalToAccountBalance = toAccount.getBalance();\n\n    assertEquals(initialFromAccountBalance - transferAmount, finalFromAccountBalance);\n    assertEquals(initialToAccountBalance + transferAmount, finalToAccountBalance);\n  }\n  \n  @Test\n  public void testWithdrawal() {\n    Account fromAccount = new Account(new Person(\"John Doe\"));\n    Account toAccount = new Account(new Person(\"Jane Doe\"));\n    double initialFromAccountBalance = fromAccount.getBalance();\n    double withdrawalAmount = 100.00;\n\n    AccountManager.withdrawal(fromAccount, withdrawalAmount);\n    double finalFromAccountBalance = fromAccount.getBalance();\n\n    assertEquals(initialFromAccountBalance - withdrawalAmount, finalFromAccountBalance);\n  }\n}\n\n\n\n\n\nCreate Maven Project with JUnit\nCreate Person class\nCreate Account class\nTest Person and Account objects\nWrite operations (withdrawal, transfer,change pin) as a static methods in AccountManager\nTest Person and Account objects and features\nAdd singleton pattern to AccountManager class\nTest AccountManager class",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE01-1: Maven/Gradle Person and Account"
    ]
  },
  {
    "objectID": "javase/selab1-1.html#overview",
    "href": "javase/selab1-1.html#overview",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "",
    "text": "Create a Maven/Gradle Java SE Project with three classes and Junit to test objects and operations.\n\n\n\n\n\n\nContext Goal Tasks Optional\n\n\n\n\n\n\nIn order to complete this project, you will need to have a basic understanding of the Java programming language, as well as some familiarity with Maven or Gradle for managing dependencies and building the project.\n\n\nOverall, this project will provide an opportunity for you to learn and apply the basics of Java programming, as well as gain experience with Maven or Gradle, JUnit, user input via the console and some discussion about composition and how classes work.\n\n\nAdditionally, you will need to have in mind that this project would center around a banking point of view.\n\n\nBy completing this project, you will have a starting foundation in these technologies and be able to build more complex and sophisticated Java applications in the future. You may go to Lab 2 (go Lab#SE01-2)\n\n\n\n\n\n\nThe goal of this project is to create three classes in Java (Person, Account and Manager) that implement different algorithms or data structures, and to test them using JUnit.  These classes could include, for example, creating new objects, a data structure for storing and manipulating data (List), or a utility class for performing common operations (static).\n\n\n\n\n\n\nThe tasks involved in this project include: \n\n\nDecide where your project will weight: Person or Account.\n\n\nCreating a new Maven or Gradle project and setting up the project structure.\n\n\nModifying the project’s pom.xml or build.gradle file to import the necessary dependencies, including JUnit for testing.\n\n\nImplementing the three required classes in Java, using appropriate algorithms and data structures.\n\n\nImplementing as well two basic pattern-designs: singleton and composition.\n\n\nWriting JUnit tests to verify that the classes work as expected.\n\n\n\nYou may attach the JUnit Test HTML results to documentation.\n\n\n\n\n\n\n\nAs an optional task, you could also consider allowing the user to input data via the console, rather than using hard-coded test data in your JUnit tests.  This would allow you to test the classes with a variety of different input data, and to interact with the classes in a more dynamic way.\n\n\nAfter mplementing two basic pattern-designs: singleton, composition your may think about factory.\n\n\n\n\n\n\n\n\n\nHere, the Person class represents a person with a name, address and others. In the same way, Account class is a bank account. The AccountManager class contains static methods to perform withdrawal, transfer, and change pin operations on a Person and Account object.\npublic class Person {\n  private String name;\n  private String address;\n  // Other properties for a Person...\n\n  public Person(String name, String address) {\n    this.name = name;\n    this.address = address;\n  }\n\n  // Getters and setters for Person properties...\n}\n\n\npublic class Account {\n  private String accountNumber;\n  private String pin;\n  private double balance;\n  // Other properties for an Account...\n\n  public Account(String accountNumber, String pin, double balance) {\n    this.accountNumber = accountNumber;\n    this.pin = pin;\n    this.balance = balance;\n  }\n\n  // Getters and setters for Account properties...\n}\n\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount &gt; 0 && amount &lt;= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount &gt; 0 && amount &lt;= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\npublic class Person {\n  private String name;\n  private String surname;\n  private int age;\n  private Account account;\n\n  public Person(String name, String surname, int age, Account account) {\n    this.name = name;\n    this.surname = surname;\n    this.age = age;\n    this.account = account;\n  }\n\n  public Account getAccount() {\n    return this.account;\n  }\n\n  public void setAccount(Account account) {\n    this.account = account;\n  }\n   // Getters and setters for Account properties...\n}\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n  -account: Account\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n}\n\nPerson *-- Account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n\nparticipant AccountManager as AccountManager\nparticipant Account as Account\nparticipant Person as Person\n\nAccountManager-&gt;&gt;Person: transfer(amount, sender, receiver)\nPerson-&gt;&gt;Account: updateBalance(-amount, sender)\nPerson-&gt;&gt;Account: updateBalance(-amount, receiver)\nAccount--&gt;&gt;Person: transferDone(receipt)\nPerson--&gt;&gt;AccountManager: transferDone(receipt)\n\n\n\n\n\n\n\n\n\n\n\nTo use the Singleton design pattern with a Person and Account class, you could create a singleton AccountManager class that manages the creation and operations of the Person and Account objects.\nThe AccountManager class would have a private constructor, to prevent multiple instances from being created, and a static getInstance method that returns the singleton instance of the class.\nThe AccountManager class would then have methods for performing various operations on the Person and Account objects, such as transferring money between accounts, withdrawing money from an account, or changing the PIN for an account.\nThese methods would be implemented using the Person and Account classes, and would be accessible to other classes through the singleton AccountManager instance.\nFor example, you could define the AccountManager, Person, and Account classes as follows:\npublic class AccountManager {\n  private static AccountManager instance;\n  private Person person;\n  private Account account;\n\n  private AccountManager() {\n    // Private constructor to prevent multiple instances\n  }\n\n  public static AccountManager getInstance() {\n    if (instance == null) {\n      instance = new AccountManager();\n    }\n    return instance;\n  }\n\n  public void transfer(Account from, Account to, double amount) {\n    // Transfer money from one account to another\n  }\n\n  public void withdraw(Account account, double amount) {\n    // Withdraw money from an account\n  }\n\n  public void changePin(Account account, String newPin) {\n    // Change the PIN for an account\n  }\n\n  // Other methods for managing Person and Account objects...\n}\nTo use the AccountManager class, other classes would simply need to call the getInstance method to obtain the singleton instance of the class, and then use the instance’s methods to perform operations on the Person and Account objects. For example:\n// Create a new Person and Account\n// be careful: where will these four Person objects go? \nAccountManager manager = AccountManager.getInstance();\nmanager.person = new Person(\"John Doe\", \"123 Main St.\");\nmanager.person = new Person(\"Carla Jameson\", \"323 Main St.\");\nmanager.person = new Person(\"Rafael Martin\", \"3 Glorious St.\");\nmanager.person = new Person(\"Pau Vila\", \"63 Sesamo St.\");\nBut maybe, this is not the best approach for several reasons …\n\n\n\nIt may work as follows. In fact, if we want to manage accounts (as a banking-centered problem, not a person-centered one), it could be better that Account has Person:\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n  -person: Person\n}\n\nAccount *-- Person\n\n\n\n\n\n\n\n\npublic class Account {\n  private Person person;\n  //other fields\n\n  public Account(Person person) {\n    this.person = person;\n  }\n\n  public Person getPerson() {\n    return this.person;\n  }\n\n  public void setPerson(Person person) {\n    this.person = person;\n    \n    //constructor, getters, setters and methods\n  }\n}\nSo, in this case, we could use a List object to save all the Account objects with the list:\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class AccountManager {\n  private List&lt;Account&gt; accounts;\n\n  private AccountManager() {\n    this.accounts = new ArrayList&lt;&gt;();\n  }\n\n  public List&lt;Account&gt; getAccounts() {\n    return this.accounts;\n  }\n\n  // we should manage how to add/remove accounts to/from accounts list\n\n  public static void deposit(Account account, double amount) {\n    // Code to deposit the specified amount to the account\n  }\n\n  public static void changePin(Account account, int newPin) {\n    // Code to change the PIN of the specified account\n  }\n\n  public static void transfer(Account fromAccount, Account toAccount, double amount) {\n    // Code to transfer the specified amount from the fromAccount to the toAccount\n  }\n  \n  public static void withdrawal(Account account, double amount) {\n    // Code to withdraw the specified amount from the given account\n  }\n}\n\n\n\nIn this approach:\n\nAccount has Person\nAccountManager is Singleton and there is no static-methods anywhere\nand we create just one object form AccountManager to manage accounts\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class AccountManager {\n  private static AccountManager manager = new AccountManager();\n  private List&lt;Account&gt; accounts;\n\n  // we should manage how to add/remove accounts to/from accounts list\n\n  private AccountManager() {\n    this.accounts = new ArrayList&lt;&gt;();\n  }\n\n  public static AccountManager getInstance() {\n    return manager;\n  }\n\n  public List&lt;Account&gt; getAccounts() {\n    return this.accounts;\n  }\n\n  public  void deposit(Account account, double amount) {\n    // Code to deposit the specified amount to the account\n  }\n\n  public  void changePin(Account account, int newPin) {\n    // Code to change the PIN of the specified account\n  }\n\n  public  void transfer(Account fromAccount, Account toAccount, double amount) {\n    // Code to transfer the specified amount from the fromAccount to the toAccount\n  }\n  \n  public  void withdrawal(Account account, double amount) {\n    // Code to withdraw the specified amount from the given account\n  }\n}\n\n\n\nAccountManagerTest could be like this:\n\nwith AccountManager all static-methods no-singleton\nAccount has Person\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccountManagerTest {\n  @Test\n  public void testDeposit() {\n    Account account = new Account(new Person(\"John Doe\"));\n    double initialBalance = account.getBalance();\n    double depositAmount = 100.00;\n\n    AccountManager.deposit(account, depositAmount);\n    double finalBalance = account.getBalance();\n\n    assertEquals(initialBalance + depositAmount, finalBalance);\n  }\n\n  @Test\n  public void testChangePin() {\n    Account account = new Account(new Person(\"John Doe\"));\n    int initialPin = account.getPin();\n    int newPin = 1234;\n\n    AccountManager.changePin(account, newPin);\n    int finalPin = account.getPin();\n\n    assertEquals(newPin, finalPin);\n  }\n\n  @Test\n  public void testTransfer() {\n    Account fromAccount = new Account(new Person(\"John Doe\"));\n    Account toAccount = new Account(new Person(\"Jane Doe\"));\n    double initialFromAccountBalance = fromAccount.getBalance();\n    double initialToAccountBalance = toAccount.getBalance();\n    double transferAmount = 100.00;\n\n    AccountManager.transfer(fromAccount, toAccount, transferAmount);\n    double finalFromAccountBalance = fromAccount.getBalance();\n    double finalToAccountBalance = toAccount.getBalance();\n\n    assertEquals(initialFromAccountBalance - transferAmount, finalFromAccountBalance);\n    assertEquals(initialToAccountBalance + transferAmount, finalToAccountBalance);\n  }\n  \n  @Test\n  public void testWithdrawal() {\n    Account fromAccount = new Account(new Person(\"John Doe\"));\n    Account toAccount = new Account(new Person(\"Jane Doe\"));\n    double initialFromAccountBalance = fromAccount.getBalance();\n    double withdrawalAmount = 100.00;\n\n    AccountManager.withdrawal(fromAccount, withdrawalAmount);\n    double finalFromAccountBalance = fromAccount.getBalance();\n\n    assertEquals(initialFromAccountBalance - withdrawalAmount, finalFromAccountBalance);\n  }\n}\n\n\n\n\n\nCreate Maven Project with JUnit\nCreate Person class\nCreate Account class\nTest Person and Account objects\nWrite operations (withdrawal, transfer,change pin) as a static methods in AccountManager\nTest Person and Account objects and features\nAdd singleton pattern to AccountManager class\nTest AccountManager class",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE01-1: Maven/Gradle Person and Account"
    ]
  },
  {
    "objectID": "javase/selab1-1.html#solving-discussion",
    "href": "javase/selab1-1.html#solving-discussion",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "",
    "text": "Here, the Person class represents a person with a name, address and others. In the same way, Account class is a bank account. The AccountManager class contains static methods to perform withdrawal, transfer, and change pin operations on a Person and Account object.\npublic class Person {\n  private String name;\n  private String address;\n  // Other properties for a Person...\n\n  public Person(String name, String address) {\n    this.name = name;\n    this.address = address;\n  }\n\n  // Getters and setters for Person properties...\n}\n\n\npublic class Account {\n  private String accountNumber;\n  private String pin;\n  private double balance;\n  // Other properties for an Account...\n\n  public Account(String accountNumber, String pin, double balance) {\n    this.accountNumber = accountNumber;\n    this.pin = pin;\n    this.balance = balance;\n  }\n\n  // Getters and setters for Account properties...\n}\n\npublic class AccountManager {\n    public static boolean withdrawal(Person person, double amount) {\n        if (amount &gt; 0 && amount &lt;= person.getBalance()) {\n            person.setBalance(person.getBalance() - amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean transfer(Person sender, Person receiver, double amount) {\n        if (amount &gt; 0 && amount &lt;= sender.getBalance()) {\n            sender.setBalance(sender.getBalance() - amount);\n            receiver.setBalance(receiver.getBalance() + amount);\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean changePin(Person person, String oldPin, String newPin) {\n        if (person.getPin().equals(oldPin)) {\n            person.setPin(newPin);\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\npublic class Person {\n  private String name;\n  private String surname;\n  private int age;\n  private Account account;\n\n  public Person(String name, String surname, int age, Account account) {\n    this.name = name;\n    this.surname = surname;\n    this.age = age;\n    this.account = account;\n  }\n\n  public Account getAccount() {\n    return this.account;\n  }\n\n  public void setAccount(Account account) {\n    this.account = account;\n  }\n   // Getters and setters for Account properties...\n}\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n  -account: Account\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n}\n\nPerson *-- Account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsequenceDiagram\n\nparticipant AccountManager as AccountManager\nparticipant Account as Account\nparticipant Person as Person\n\nAccountManager-&gt;&gt;Person: transfer(amount, sender, receiver)\nPerson-&gt;&gt;Account: updateBalance(-amount, sender)\nPerson-&gt;&gt;Account: updateBalance(-amount, receiver)\nAccount--&gt;&gt;Person: transferDone(receipt)\nPerson--&gt;&gt;AccountManager: transferDone(receipt)\n\n\n\n\n\n\n\n\n\n\n\nTo use the Singleton design pattern with a Person and Account class, you could create a singleton AccountManager class that manages the creation and operations of the Person and Account objects.\nThe AccountManager class would have a private constructor, to prevent multiple instances from being created, and a static getInstance method that returns the singleton instance of the class.\nThe AccountManager class would then have methods for performing various operations on the Person and Account objects, such as transferring money between accounts, withdrawing money from an account, or changing the PIN for an account.\nThese methods would be implemented using the Person and Account classes, and would be accessible to other classes through the singleton AccountManager instance.\nFor example, you could define the AccountManager, Person, and Account classes as follows:\npublic class AccountManager {\n  private static AccountManager instance;\n  private Person person;\n  private Account account;\n\n  private AccountManager() {\n    // Private constructor to prevent multiple instances\n  }\n\n  public static AccountManager getInstance() {\n    if (instance == null) {\n      instance = new AccountManager();\n    }\n    return instance;\n  }\n\n  public void transfer(Account from, Account to, double amount) {\n    // Transfer money from one account to another\n  }\n\n  public void withdraw(Account account, double amount) {\n    // Withdraw money from an account\n  }\n\n  public void changePin(Account account, String newPin) {\n    // Change the PIN for an account\n  }\n\n  // Other methods for managing Person and Account objects...\n}\nTo use the AccountManager class, other classes would simply need to call the getInstance method to obtain the singleton instance of the class, and then use the instance’s methods to perform operations on the Person and Account objects. For example:\n// Create a new Person and Account\n// be careful: where will these four Person objects go? \nAccountManager manager = AccountManager.getInstance();\nmanager.person = new Person(\"John Doe\", \"123 Main St.\");\nmanager.person = new Person(\"Carla Jameson\", \"323 Main St.\");\nmanager.person = new Person(\"Rafael Martin\", \"3 Glorious St.\");\nmanager.person = new Person(\"Pau Vila\", \"63 Sesamo St.\");\nBut maybe, this is not the best approach for several reasons …\n\n\n\nIt may work as follows. In fact, if we want to manage accounts (as a banking-centered problem, not a person-centered one), it could be better that Account has Person:\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n  -name: String\n  -surname: String\n  -age: int\n}\n\nclass Account {\n  -accountNumber: String\n  -pin: int\n  -balance: double\n  -person: Person\n}\n\nAccount *-- Person\n\n\n\n\n\n\n\n\npublic class Account {\n  private Person person;\n  //other fields\n\n  public Account(Person person) {\n    this.person = person;\n  }\n\n  public Person getPerson() {\n    return this.person;\n  }\n\n  public void setPerson(Person person) {\n    this.person = person;\n    \n    //constructor, getters, setters and methods\n  }\n}\nSo, in this case, we could use a List object to save all the Account objects with the list:\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class AccountManager {\n  private List&lt;Account&gt; accounts;\n\n  private AccountManager() {\n    this.accounts = new ArrayList&lt;&gt;();\n  }\n\n  public List&lt;Account&gt; getAccounts() {\n    return this.accounts;\n  }\n\n  // we should manage how to add/remove accounts to/from accounts list\n\n  public static void deposit(Account account, double amount) {\n    // Code to deposit the specified amount to the account\n  }\n\n  public static void changePin(Account account, int newPin) {\n    // Code to change the PIN of the specified account\n  }\n\n  public static void transfer(Account fromAccount, Account toAccount, double amount) {\n    // Code to transfer the specified amount from the fromAccount to the toAccount\n  }\n  \n  public static void withdrawal(Account account, double amount) {\n    // Code to withdraw the specified amount from the given account\n  }\n}\n\n\n\nIn this approach:\n\nAccount has Person\nAccountManager is Singleton and there is no static-methods anywhere\nand we create just one object form AccountManager to manage accounts\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class AccountManager {\n  private static AccountManager manager = new AccountManager();\n  private List&lt;Account&gt; accounts;\n\n  // we should manage how to add/remove accounts to/from accounts list\n\n  private AccountManager() {\n    this.accounts = new ArrayList&lt;&gt;();\n  }\n\n  public static AccountManager getInstance() {\n    return manager;\n  }\n\n  public List&lt;Account&gt; getAccounts() {\n    return this.accounts;\n  }\n\n  public  void deposit(Account account, double amount) {\n    // Code to deposit the specified amount to the account\n  }\n\n  public  void changePin(Account account, int newPin) {\n    // Code to change the PIN of the specified account\n  }\n\n  public  void transfer(Account fromAccount, Account toAccount, double amount) {\n    // Code to transfer the specified amount from the fromAccount to the toAccount\n  }\n  \n  public  void withdrawal(Account account, double amount) {\n    // Code to withdraw the specified amount from the given account\n  }\n}\n\n\n\nAccountManagerTest could be like this:\n\nwith AccountManager all static-methods no-singleton\nAccount has Person\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AccountManagerTest {\n  @Test\n  public void testDeposit() {\n    Account account = new Account(new Person(\"John Doe\"));\n    double initialBalance = account.getBalance();\n    double depositAmount = 100.00;\n\n    AccountManager.deposit(account, depositAmount);\n    double finalBalance = account.getBalance();\n\n    assertEquals(initialBalance + depositAmount, finalBalance);\n  }\n\n  @Test\n  public void testChangePin() {\n    Account account = new Account(new Person(\"John Doe\"));\n    int initialPin = account.getPin();\n    int newPin = 1234;\n\n    AccountManager.changePin(account, newPin);\n    int finalPin = account.getPin();\n\n    assertEquals(newPin, finalPin);\n  }\n\n  @Test\n  public void testTransfer() {\n    Account fromAccount = new Account(new Person(\"John Doe\"));\n    Account toAccount = new Account(new Person(\"Jane Doe\"));\n    double initialFromAccountBalance = fromAccount.getBalance();\n    double initialToAccountBalance = toAccount.getBalance();\n    double transferAmount = 100.00;\n\n    AccountManager.transfer(fromAccount, toAccount, transferAmount);\n    double finalFromAccountBalance = fromAccount.getBalance();\n    double finalToAccountBalance = toAccount.getBalance();\n\n    assertEquals(initialFromAccountBalance - transferAmount, finalFromAccountBalance);\n    assertEquals(initialToAccountBalance + transferAmount, finalToAccountBalance);\n  }\n  \n  @Test\n  public void testWithdrawal() {\n    Account fromAccount = new Account(new Person(\"John Doe\"));\n    Account toAccount = new Account(new Person(\"Jane Doe\"));\n    double initialFromAccountBalance = fromAccount.getBalance();\n    double withdrawalAmount = 100.00;\n\n    AccountManager.withdrawal(fromAccount, withdrawalAmount);\n    double finalFromAccountBalance = fromAccount.getBalance();\n\n    assertEquals(initialFromAccountBalance - withdrawalAmount, finalFromAccountBalance);\n  }\n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE01-1: Maven/Gradle Person and Account"
    ]
  },
  {
    "objectID": "javase/selab1-1.html#step-by-step",
    "href": "javase/selab1-1.html#step-by-step",
    "title": "Lab#SE01-1: Maven/Gradle Person and Account",
    "section": "",
    "text": "Create Maven Project with JUnit\nCreate Person class\nCreate Account class\nTest Person and Account objects\nWrite operations (withdrawal, transfer,change pin) as a static methods in AccountManager\nTest Person and Account objects and features\nAdd singleton pattern to AccountManager class\nTest AccountManager class",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE01-1: Maven/Gradle Person and Account"
    ]
  },
  {
    "objectID": "javase/selab0-2.html",
    "href": "javase/selab0-2.html",
    "title": "Lab#SE00-2: Maven Clinic",
    "section": "",
    "text": "📘 Linux Lab#SE00-2: Maven Clinic\n\nCreate a Maven/Gradle Java SE Project with the UML and classes defined below.\nAdd Lombok, JUnit and Faker dependencies\nRefactor: remove boilerplate code (getters, setters and so on) and work with Lombok from Person, MyDate and Clinic\nCreate Junit tests to test objects. Use Faker to create objects:\n\nTest createPerson: check weather the object Person creation works properly.\nTest createMyDate: check weather the object Car creation works properly.\nTest createClinic: check weather the object Book creation works properly.\n\nComplete these mehtods within Clinic class:\n\npublic boolean isAccepted(Person person) {}: return true when weightIndex() &lt; lowestWeightIndex\npublic void addAsMember(Person person) {}: add as a member if member isAccepted(Person person)\npublic Person personWithHighestWeightIndex() {}: return Person object with the highest WeightIndex()\n\nCreate Junit tests to test the previous three new methods created at Clinic class.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-2: Maven Clinic"
    ]
  },
  {
    "objectID": "javase/selab0-2.html#uml",
    "href": "javase/selab0-2.html#uml",
    "title": "Lab#SE00-2: Maven Clinic",
    "section": "1 UML",
    "text": "1 UML\n\nThe class diagram represents three classes, Person, MyDate, and Clinic.\n\nThe Person class has four private fields name, age, height, and weight and one field birthMyDate of type MyDate .\nThe MyDate class has three private fields day, month, and year.\nThe Clinic class has two private fields lowestWeightIndex and name, and a field members which is an ArrayList of Person objects.\n\nThe relationship between Person and MyDate is a Composition relationship, where as the relationship between Clinic and Person is also a Composition relationship but trough an ArraList.\n\n\n\n\n\n\n\nclassDiagram\nclass Person {\n  -name: String\n  -age: int\n  -height: int\n  -weight: int\n  -birthMyDate: MyDate\n}\n\nclass MyDate {\n  -day: int\n  -month: int\n  -year: int\n}\n\nclass Clinic {\n  -lowestWeightIndex: double\n  -name: String\n  -members: ArrayList~Person~\n}\n\nPerson *-- MyDate: Composition\nClinic *-- Person: Composition",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-2: Maven Clinic"
    ]
  },
  {
    "objectID": "javase/selab0-2.html#base-classes",
    "href": "javase/selab0-2.html#base-classes",
    "title": "Lab#SE00-2: Maven Clinic",
    "section": "2 Base Classes",
    "text": "2 Base Classes\n\n2.1 Person Class\nHere, the Person class represents a person with a name, address and others.\n\n\n\nCode Person\n\n\n\nPerson.java\n\n\n  package exemple3;\n\npublic class Person {\n\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n    //composition relationship\n    private MyDate birthMyDate;\n\n    public Person(String name) {\n        this(name, 0); // run here the other constructor's code and set the age parameter to 0\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.weight = 0;\n        this.height = 0;\n    }\n    \n    public Person(String name, int height, int weigth) {\n        this.name = name;\n        this.age = 0;\n        this.weight = weigth;\n        this.height = height;\n    }\n\n    public Person(String name, int day, int month, int year) {\n        this.name = name;\n        this.weight = 0;\n        this.height = 0;\n        this.birthMyDate = new MyDate(day, month, year);\n    }\n    \n    public Person(String name, int age, int day, int month, int year) {\n        this.name = name;\n        this.age = age;\n        this.weight = 0;\n        this.height = 0;\n        this.birthMyDate = new MyDate(day, month, year);\n    }\n\n    public void printPerson() {\n        System.out.println(this.name + \" I am \" + this.age + \" years old\");\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public void becomeOlder(int years) {\n        this.age = this.age + years;\n    }\n\n    public boolean isAdult() {\n        if (this.age &lt; 18) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public double weightIndex() {\n        double heightInMeters = this.height / 100.0;\n\n        return this.weight / (heightInMeters * heightInMeters);\n    }\n    \n    public boolean olderThan(Person compared) {\n        if (this.age &gt; compared.getAge()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public String toString() {\n        return this.name + \" I am \" + this.age + \" years old, my weight index is \" + this.weightIndex() + \", born \"\n                + this.birthMyDate;\n    }\n\n    //setters and getters\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    public int getHeight() {\n        return this.height;\n    }\n\n    public int getWeight() {\n        return this.weight;\n    }\n\n    public void setWeight(int weight) {\n        this.weight = weight;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n    \n    public int getAge() {\n        return this.age;\n    }\n}\n\n\n\n\n\n2.2 MyDate Class\nHere, the MyDate class represents a date with a day, month and year.\n\n\n\nCode MyDate\n\n\n\nMyDate.java\n\n\npackage exemple3;\n\npublic class MyDate {\n    private int day;\n    private int month;\n    private int year;\n\n    public MyDate(int day, int month, int year) {\n        this.day = day;\n        this.month = month;\n        this.year = year;\n    }\n\n    public String toString() {\n        return this.day + \".\" + this.month + \".\" + this.year;\n    }\n\n    public boolean earlier(MyDate compared) {\n        // first we'll compare years\n        if (this.year &lt; compared.year) {\n            return true;\n        }\n\n        // if the years are the same, we'll compare the months\n        if (this.year == compared.year && this.month &lt; compared.month) {\n            return true;\n        }\n\n        // years and months the same, we'll compare the days\n        if (this.year == compared.year && this.month == compared.month && this.day &lt; compared.day) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\n\n\n2.3 Clinic Class\nHere, the Clinic class represents a clinic with a name, lowestWeightIndex and members.\n\n\n\nCode Clinic\n\n\n\nClinic.java\n\n\npackage exemple3;\n\nimport java.util.ArrayList;\n\npublic class Clinic {\n\n    private double lowestWeightIndex;\n    private String name;\n    private ArrayList&lt;Person&gt; members;\n\n    public Clinic(String name, double lowestWeightIndex) {\n        this.lowestWeightIndex = lowestWeightIndex;\n        this.name = name;\n        this.members = new ArrayList&lt;Person&gt;();\n    }\n\n    public boolean isAccepted(Person person) {\n        // to-do\n    }\n\n    public void addAsMember(Person person) {\n        // to-do\n    }\n\n    public Person personWithHighestWeightIndex() {\n        // to-do\n    }\n\n    public String toString() {\n        String membersAsString = \"\";\n\n        for (Person member : this.members) {\n            membersAsString += \"  \" + member + \"\\n\";\n        }\n\n        return \"Clinic:\\n \" + this.name + \" (\" + this.lowestWeightIndex +  \") \" + \"  \\n members: \\n\" + membersAsString;\n    }\n\n    //getters and setters\n    public double getLowestWeightIndex() {\n        return lowestWeightIndex;\n    }\n\n    public void setLowestWeightIndex(double lowestWeightIndex) {\n        this.lowestWeightIndex = lowestWeightIndex;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public ArrayList&lt;Person&gt; getMembers() {\n        return members;\n    }\n\n    public void setMembers(ArrayList&lt;Person&gt; members) {\n        this.members = members;\n    }\n\n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-2: Maven Clinic"
    ]
  },
  {
    "objectID": "javase/se-principles-inheritance.html",
    "href": "javase/se-principles-inheritance.html",
    "title": "Java SE: Inherence",
    "section": "",
    "text": "📘 Inheritance\nInheritance is a fundamental concept in object-oriented programming. It is the process of creating new classes from existing classes.\nIn other words, it is the process of deriving new classes from existing classes, which allows developers to reuse and extend the functionality of existing classes.\n\n\nIn Java, inheritance is achieved through the use of the extends keyword. A class that extends another class is called a subclass, and the class it extends is called the superclass.\nThe subclass inherits all of the methods and fields of the superclass, and can also define its own methods and fields.\n\n\n\nJava SE Basic Principles OOP Inherence",
    "crumbs": [
      "Java Principles",
      "Java SE: Inherence"
    ]
  },
  {
    "objectID": "javase/se-principles-inheritance.html#overview",
    "href": "javase/se-principles-inheritance.html#overview",
    "title": "Java SE: Inherence",
    "section": "",
    "text": "📘 Inheritance\nInheritance is a fundamental concept in object-oriented programming. It is the process of creating new classes from existing classes.\nIn other words, it is the process of deriving new classes from existing classes, which allows developers to reuse and extend the functionality of existing classes.\n\n\nIn Java, inheritance is achieved through the use of the extends keyword. A class that extends another class is called a subclass, and the class it extends is called the superclass.\nThe subclass inherits all of the methods and fields of the superclass, and can also define its own methods and fields.\n\n\n\nJava SE Basic Principles OOP Inherence",
    "crumbs": [
      "Java Principles",
      "Java SE: Inherence"
    ]
  },
  {
    "objectID": "javase/se-principles-inheritance.html#inherence-reserved-words",
    "href": "javase/se-principles-inheritance.html#inherence-reserved-words",
    "title": "Java SE: Inherence",
    "section": "2 Inherence Reserved words",
    "text": "2 Inherence Reserved words\n\nextends is used to indicate that a class is a subclass of another class.\nsuper is used to refer to the immediate parent class of the current class. It is commonly used to access methods or fields of the parent class that have been overridden in the current class.\n\n\n2.1 Final\n\nfinal is a keyword in Java that can be used to indicate that a class, method, or variable cannot be overridden or modified. A final class cannot be extended, a final method cannot be overridden and a final variable is a constant and its value cannot be modified.",
    "crumbs": [
      "Java Principles",
      "Java SE: Inherence"
    ]
  },
  {
    "objectID": "javase/se-principles-inheritance.html#example1",
    "href": "javase/se-principles-inheritance.html#example1",
    "title": "Java SE: Inherence",
    "section": "3 Example1",
    "text": "3 Example1\nHere is an example of inheritance in Java:\npublic class Animal {\n    // Private instance variable\n    private String name;\n\n    // Constructor\n    public Animal(String name) {\n        this.name = name;\n    }\n\n    // Getter method for the name variable\n    public String getName() {\n        return name;\n    }\n\n    // Method for making the animal make a noise\n    public void makeNoise() {\n        // Code for making the animal make a noise\n    }\n}\n\npublic class Dog extends Animal {\n    // Private instance variable\n    private int age;\n\n    // Constructor\n    public Dog(String name, int age) {\n        super(name);\n        this.age = age;\n    }\n\n    // Getter method for the age variable\n    public int getAge() {\n        return age;\n    }\n\n    // Method for making the dog bark\n    @Override\n    public void makeNoise() {\n        System.out.println(\"Woof!\");\n    }\n}\n\n\nTthis example shows how to use inheritance in Java. By extending the Animal class, the Dog class is able to reuse and extend the functionality of the Animal class, and define its own methods and fields. This allows the Dog class to inherit the characteristics of the Animal class, and add its own unique characteristics as well.\nIn this example, the Animal class is a superclass, and the Dog class is a subclass that extends the Animal class. The Dog class inherits all of the methods and fields of the Animal class, including the name field and the makeNoise() method.\nThe Dog class also has its own age field, which is not defined in the Animal class. It also provides its own implementation of the makeNoise() method, which overrides the implementation in the Animal class. This allows the Dog class to define its own behavior for the makeNoise() method, based on its specific characteristics.",
    "crumbs": [
      "Java Principles",
      "Java SE: Inherence"
    ]
  },
  {
    "objectID": "javase/se-principles-inheritance.html#example2",
    "href": "javase/se-principles-inheritance.html#example2",
    "title": "Java SE: Inherence",
    "section": "4 Example2",
    "text": "4 Example2\nHere is an example of how to create a Cat class in Java that extends the Animal class from the previous example:\npublic class Cat extends Animal {\n    // Private instance variable\n    private int age;\n\n    // Constructor\n    public Cat(String name, int age) {\n        super(name);\n        this.age = age;\n    }\n\n    // Getter method for the age variable\n    public int getAge() {\n        return age;\n    }\n\n    // Method for making the cat meow\n    @Override\n    public void makeNoise() {\n        System.out.println(\"Meow!\");\n    }\n}\nThe Cat class also has its own age field, which is not defined in the Animal class. It also provides its own implementation of the makeNoise() method, which overrides the implementation in the Animal class. This allows the Cat class to define its own behavior for the makeNoise() method, based on its specific characteristics.",
    "crumbs": [
      "Java Principles",
      "Java SE: Inherence"
    ]
  },
  {
    "objectID": "javase/se-concepts-coupling.html",
    "href": "javase/se-concepts-coupling.html",
    "title": "Java SE: Coupling and DDD",
    "section": "",
    "text": "📘 Coupling/coherence\nCoupling refers to the degree to which one class or module depends on another class or module.\nHigh/tight coupling means that one class or module depends heavily on another class or module, while low/loose coupling means that one class or module has minimal dependencies on other classes or modules.\nCoupling refers to the degree of dependence, decoupling, on the other hand, refers to the process of reducing the degree of coupling between different classes or modules in a system. By decoupling classes or modules, you can make the system more modular, scalable, flexible, and maintainable.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Coupling and DDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-coupling.html#key-concept",
    "href": "javase/se-concepts-coupling.html#key-concept",
    "title": "Java SE: Coupling and DDD",
    "section": "1 Key-concept",
    "text": "1 Key-concept\nThe importance of decoupling in Java lies in its ability to improve the modularity, flexibility, and maintainability of a system. When classes or modules are highly coupled, changes to one class or module can have a cascading effect on other classes or modules, which can make the system difficult to modify and maintain. By decoupling classes or modules, you can reduce the dependencies between them, which can make the system more modular and easier to modify and maintain.\n\n\n\nCoupling and cohesion by Евгений Мирошниченко, CC0, via Wikimedia Common\n\n\nAdditionally, decoupling can help to improve the reusability of classes or modules. When classes or modules are highly coupled, it can be difficult to reuse them in other contexts or situations. By decoupling classes or modules, you can make them more self-contained and independent, which can make them more easily reusable in other contexts.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Coupling and DDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-coupling.html#what-is-the-domain-ddd",
    "href": "javase/se-concepts-coupling.html#what-is-the-domain-ddd",
    "title": "Java SE: Coupling and DDD",
    "section": "2 What is the Domain? DDD?",
    "text": "2 What is the Domain? DDD?\nTo define domain-driven design, we should first establish what we mean by domain in this context (and in development in general).\nThe standard dictionary definition of domain is: “A sphere of knowledge or activity.” Drilling down a bit from that, the domain in software engineering commonly refers to the subject area on which the application is intended to apply.\nIn other words, during application development, the domain is the sphere of knowledge and activity around which the application logic revolves.\n\n\n\n\n\n\nDomain-Driven Design: worth reading!\n\n\n\nCoupling degree in a project is highly related to the project desing stage. Using a Domain-Driven Design strategy can reduce the coupling between the different entities, value objects, domain events, etc…\n\n\n\n2.1 Ubiquitous Language\nUbiquitous Language is the term Eric Evans uses in Domain Driven Design for the practice of building up a common, rigorous language between developers and users.\nThis language should be based on the Domain Model used in the software - hence the need for it to be rigorous, since software doesn’t cope well with ambiguity.\n\n\n2.2 Extreme Programming (XP)\nExtreme Programming (XP) is a software development methodology developed primarily by Kent Beck.\nXP was one of the first agile methods, indeed XP was the dominant agile method in the late 90s and early 00s before Scrum became dominant as the noughties passed: XP was the primary catalyst that got attention to agile methods.\n\n\n2.3 Technical debt\nSoftware systems are prone to the build up of cruft - deficiencies in internal quality that make it harder than it would ideally be to modify and extend the system further.\n\n\n2.4 Building Blocks\nDomain Driven Design also defines several high-level concepts that can be used in conjunction with one another to create and modify domain models:\n\nEntity\nValue Object\nDomain Event\nAggregate\nService\nRepository\nFactories\nController\nTest\nManager",
    "crumbs": [
      "Java Concepts",
      "Java SE: Coupling and DDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-coupling.html#example-carfactory",
    "href": "javase/se-concepts-coupling.html#example-carfactory",
    "title": "Java SE: Coupling and DDD",
    "section": "3 Example: CarFactory",
    "text": "3 Example: CarFactory\nHere is an example of decoupling in Java, using a CarFactory class to create different types of cars:\n\n\nCarFactory.java\n\npublic class CarFactory {\n    // Private constructor to prevent instantiation\n    private CarFactory() { }\n\n    // Factory method for creating cars\n    public static Car createCar(String type) {\n        switch (type) {\n            case \"sedan\":\n                return new Sedan(\"Toyota\", \"Camry\", 2019);\n            case \"hatchback\":\n                return new Hatchback(\"Honda\", \"Fit\", 2019);\n            case \"suv\":\n                return new SUV(\"Jeep\", \"Grand Cherokee\", 2019);\n            default:\n                throw new IllegalArgumentException(\"Invalid car type: \" + type);\n        }\n    }\n}\n\n\n\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type. The createCar() method takes a type parameter, which specifies the type of car to create, and returns an instance of the appropriate concrete class.\nBy decoupling the CarFactory class from the code that uses the cars, you can make the code that uses the cars more flexible and reusable. For example, you could define a CarDriver class that takes a Car object as a parameter, and uses the Car object to drive the car. Because the CarDriver class doesn’t depend on the CarFactory class, you can use the CarDriver class to drive any type of car, regardless of how the car was created.\nAdditionally, by decoupling the CarFactory class from the code that uses the cars, you can make the logic for creating the cars more modular and maintainable. For example, if you want to add a new type of car, such as a truck, you can simply add a new Truck class that extends the Car class, and then update the CarFactory class to include logic for creating instances of the Truck class. Because the CarFactory class is decoupled from the code that uses the cars, you don’t have to change any other code in the system in order to add the new car type.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Coupling and DDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-coupling.html#conclusion",
    "href": "javase/se-concepts-coupling.html#conclusion",
    "title": "Java SE: Coupling and DDD",
    "section": "4 Conclusion",
    "text": "4 Conclusion\nOverall, decoupling is an important concept in Java programming, and can help to improve the modularity, flexibility, and maintainability of a system.\n\n\n\n\n\n\nTip\n\n\n\nBy reducing the dependencies between classes or modules, you can make the system more modular and easier to modify and maintain, and you can improve the reusability of individual classes or modules.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Coupling and DDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-interface.html",
    "href": "javase/se-concepts-interface.html",
    "title": "Java SE: Abstract/Interface",
    "section": "",
    "text": "📘 Abstract/Interface\nAbstraction and particulary Interfaces provide a way for multiple classes to share a common set of methods or properties, without inheriting from a common base class.\nInterfaces are the tool when the code needs order, be clear and be easly readable.",
    "crumbs": [
      "Java Concepts",
      "Java SE:  Abstract/Interface"
    ]
  },
  {
    "objectID": "javase/se-concepts-interface.html#abstractinterface",
    "href": "javase/se-concepts-interface.html#abstractinterface",
    "title": "Java SE: Abstract/Interface",
    "section": "1 Abstract/Interface",
    "text": "1 Abstract/Interface\nData abstraction is the process of hiding certain details and showing only essential information to the user.\nAbstraction can be achieved with either:\n\nabstract classes or\ninterfaces\n\n\n\n\nFrom regular class to Interface passing by Abstract class\n\n\nAn interface is a completely “abstract class” that is used to group related methods with empty bodies\n\n1.1 Abstract class\nThe abstract keyword is a non-access modifier, used for classes and methods:\n\nAbstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).\nAbstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).\n\n\n\nmoviemodel.java\n\n// Abstract class\nabstract class Animal {\n  // Abstract method (does not have a body)\n  public abstract void animalSound();\n  // Regular method\n  public void sleep() {\n    System.out.println(\"Zzz\");\n  }\n}\n\n// Subclass (inherit from Animal)\nclass Pig extends Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n}\n\n\n\n1.2 Interface\nTo access the interface methods, the interface must be “implemented” (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the “implement” class:\n\n\nmoviemodel.java\n\n// Interface\ninterface Animal {\n  public void animalSound(); // interface method (does not have a body)\n  public void sleep(); // interface method (does not have a body)\n}\n\n// Pig \"implements\" the Animal interface\nclass Pig implements Animal {\n  public void animalSound() {\n    // The body of animalSound() is provided here\n    System.out.println(\"The pig says: wee wee\");\n  }\n  public void sleep() {\n    // The body of sleep() is provided here\n    System.out.println(\"Zzz\");\n  }\n}\n\n\n\n\n\n\n\nNote\n\n\n\n\nLike abstract classes, interfaces cannot be used to create objects\nInterface methods do not have a body - the body is provided by the “implement” class\nOn implementation of an interface, you** must override all of its methods**\nInterface methods are by default abstract and public\nInterface attributes are by default public, static and final\nAn interface cannot contain a constructor (as it cannot be used to create objects)",
    "crumbs": [
      "Java Concepts",
      "Java SE:  Abstract/Interface"
    ]
  },
  {
    "objectID": "javase/se-concepts-interface.html#pros-cons-of-interfaces",
    "href": "javase/se-concepts-interface.html#pros-cons-of-interfaces",
    "title": "Java SE: Abstract/Interface",
    "section": "2 Pros & cons of interfaces",
    "text": "2 Pros & cons of interfaces\n\n2.1 Pros of using interfaces:\n\nInterfaces provide a way to define a contract that classes must implement, ensuring that certain methods or properties are present. Interfaces allow for multiple inheritance, allowing a class to implement multiple interfaces.\nInterfaces promote code reuse by allowing multiple classes to share a common set of methods or properties.\nJava’s support for default methods in interfaces allows for the addition of new methods to an interface without breaking existing code that implements the interface.\nInterfaces can be used to define a common API for different implementations of a specific functionality.\n\n\n\n2.2 Cons of using interfaces:\n\nAn interface does not provide any implementation for its methods or properties, so classes that implement an interface must provide their own implementation.\nInterfaces can lead to more complex code, as it may require more effort to understand how the different classes and interfaces relate to each other.\nInterfaces can make it more difficult to understand the relationships between classes, as it may not be immediately clear which classes implement a specific interface.\nInterfaces can lead to a proliferation of small, highly-specialized interfaces, which may make the codebase harder to understand and maintain.\n\n\n\n\n\n\n\nImportant\n\n\n\nJava does not support “multiple inheritance” (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can implement multiple interfaces.",
    "crumbs": [
      "Java Concepts",
      "Java SE:  Abstract/Interface"
    ]
  },
  {
    "objectID": "javase/se-concepts-projectgit.html",
    "href": "javase/se-concepts-projectgit.html",
    "title": "Java SE: Project push GitHub",
    "section": "",
    "text": "4 ways to sync local project on local repo to remote repo on GitHub:\n\nMaven Project push to GitHub: CLI gh & clone\nMaven Project push to GitHub: from IntelliJ IDEA VCS\nMaven Project shortest way: from IntelliJ IDEA git init\nMaven Project push to GitHub: CLI git",
    "crumbs": [
      "Java Create Project",
      "Java SE: Project push GitHub"
    ]
  },
  {
    "objectID": "javase/se-concepts-projectgit.html#maven-project-push-to-github-cli-gh-clone",
    "href": "javase/se-concepts-projectgit.html#maven-project-push-to-github-cli-gh-clone",
    "title": "Java SE: Project push GitHub",
    "section": "1 Maven Project push to GitHub: CLI gh & clone",
    "text": "1 Maven Project push to GitHub: CLI gh & clone\nTo connect a local project on IntelliJ IDEA to GitHub.com, you will need to create a repository on GitHub and then push your local project to the repository. Here’s a step-by-step guide:\nFrom CLI gh:\n\nGo to browser and create an account on GitHub.com\nOpen on your terminal and install git: install git\nOpen your terminal and install cli gh: install CLI gh and log in to GitHub.com\nCreate repository on GitHub.com: Create a repo\nAt the top of your GitHub repository’s Quick Setup page, click the clipboard icon to copy clone GitHub CLI: gh repo clone AlbertProfe/wiki. This will initialize the local directory as a Git repository with a copy of remote repository.\nCreate Maven Project within that directory/repository local git: create Maven Project\nUpload/sync/push: git commit and push from CLI or from IntelliJ IDEA: Commit and push changes to Git repository\n\n\n1.1 Screen-shoots step-by-step after installing git and github (2022-12-19)\nFirst, install git and CLI gh and create a GitHub.con account.\n\n\n\nLog in via CLI gh to GitHub.com, in this case using a browser where you are logged in GitHub.com\n\n\n\n\n\nCreate a repo at GitHub.com: button new\n\n\n\n\n\nCreate a repo at GitHub.com: name and configuration\n\n\n\n\n\nCreate a repo at GitHub.com: created\n\n\n\n\n\nGet the code to clone the repo: copy\n\n\n\n\n\nCreate/select a folder where the repo will be created\n\n\n\n\n\nGo to the terminal and paste it\n\n\n\n\n\nCreate maven project: create\n\n\n\n\n\nCreate maven project: created and structure checked\n\n\n\n\n\nLet’s add and commit this project\n\n\n\n\n\n8 added files\n\n\n\n\n\nNow it is time to commit, first write it\n\n\n\n\n\nVisual Code and git making the commit\n\n\n\n\n\nCommit done, now, the push to remote repo\n\n\n\n\n\nAfter push button Visual Code demands confirmation\n\n\n\n\n\nPushing …. and pushed\n\n\n\n\n\nCheck GitHub.com repo has got the project pushed",
    "crumbs": [
      "Java Create Project",
      "Java SE: Project push GitHub"
    ]
  },
  {
    "objectID": "javase/se-concepts-projectgit.html#maven-project-push-to-github-from-intellij-idea-vcs",
    "href": "javase/se-concepts-projectgit.html#maven-project-push-to-github-from-intellij-idea-vcs",
    "title": "Java SE: Project push GitHub",
    "section": "2 Maven Project push to GitHub: from IntelliJ IDEA VCS",
    "text": "2 Maven Project push to GitHub: from IntelliJ IDEA VCS\n\n\n\nIntellJIdea Main Menu\n\n\n\n\n\nIntellJIdea Main Menu\n\n\n\nOpen your IntelliJ IDEA project.\nIn the VCS menu, select the option to enable version control integration.\nSelect Git as the version control system.\nAdd the files in your new local repository. This stages them for the first commit.\nCommit the files that you’ve staged in your local repository.\nIn the VCS menu, select the option to create a new repository.\nChoose the location for the repository and click the Create button.\nIn the VCS menu, select the option to push changes.\nEnter your GitHub login credentials and click the Push button.\n\nNow your local project is connected to the repository on GitHub and any changes you make locally will be reflected in the repository on GitHub.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Project push GitHub"
    ]
  },
  {
    "objectID": "javase/se-concepts-projectgit.html#maven-project-shortest-way-from-intellij-idea-git-init",
    "href": "javase/se-concepts-projectgit.html#maven-project-shortest-way-from-intellij-idea-git-init",
    "title": "Java SE: Project push GitHub",
    "section": "3 Maven Project shortest way: from IntelliJ IDEA git init",
    "text": "3 Maven Project shortest way: from IntelliJ IDEA git init\n\nVersion Control &gt; Create Git Repository\n\n\n\n\nVersion Control &gt; Create Git Repository\n\n\n\n\n\nSelect local directory to git init\n\n\n\n\n\nLocal Directory Maven Project\n\n\n\nCreate Remote Repo on GitHub.com and copy HHTPS direction\n\n\n\n\nIntellJIdea Main Menu\n\n\n\n\n\ncopy HHTPS direction 1/2\n\n\n\n\n\ncopy HHTPS direction 2/2\n\n\n\nCommit and Push and when IntellJIdea ask for Remote Repo Direcion paste it\n\n\n\n\nSelect all files: git add. and Commit and push 1/2\n\n\n\n\n\nCommit and push 2/2\n\n\n\n\n\nPush Command to MovieManager: master &gt; define remote\n\n\n\n\n\npaste URL 1/2\n\n\n\n\n\npaste URL 2/2",
    "crumbs": [
      "Java Create Project",
      "Java SE: Project push GitHub"
    ]
  },
  {
    "objectID": "javase/se-concepts-projectgit.html#maven-project-push-to-github-cli-git",
    "href": "javase/se-concepts-projectgit.html#maven-project-push-to-github-cli-git",
    "title": "Java SE: Project push GitHub",
    "section": "4 Maven Project push to GitHub: CLI git",
    "text": "4 Maven Project push to GitHub: CLI git\nOnce the Maven Project Java SE is created, we are going to control its versions with git and upload to GitHub.com by CLI git/gh.\n\nHow to create a remote repo\nHow to log in with gh browser auth\n\nWe need:\n\nGithub.com account created and logged in\ngit and gh installed\ngh logged to GitHub.com\nMaven Project Java SE created\n\n\n\n\nThe Maven Project Java SE Hello11 is already created and ready to work with git\n\n\n\n\n\nLet’s create the git local repository with git init\n\n\n\n\n\nNow this folder is git local repository\n\n\n\n\n\nLet’s identify the user, and then we track the files and commit them\n\n\n\n\n\nWith the gh CLI we create a remote repo called Hello11\n\n\n\n\n\nRemote repository created\n\n\n\n\n\nNow it is time to add our remote repository Hello11 to our local repository. It will names as origin\n\n\n\n\n\nLet’s push the project\n\n\n\n\n\nProject pushed\n\n\n\n\n\nCode bash linux git/gh\n\n\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$ git init\nhint: Using 'master' as the name for the initial branch. This default branch name\nhint: is subject to change. To configure the initial branch name to use in all\nhint: of your new repositories, which will suppress this warning, call:\nhint: \nhint:   git config --global init.defaultBranch &lt;name&gt;\nhint: \nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\nhint: 'development'. The just-created branch can be renamed via this command:\nhint: \nhint:   git branch -m &lt;name&gt;\nInitialized empty Git repository in /home/albert/MyProjects/Sandbox/Hello11/.git/\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$ git config user.name \"albert\"\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$ git config user.email \"albertprofe@gmail.com\"\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$ git add .\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$ git commit -m \"crete project\"\n[master (root-commit) 4cd7009] crete project\n 7 files changed, 171 insertions(+)\n create mode 100644 .gitignore\n create mode 100644 .idea/.gitignore\n create mode 100644 .idea/encodings.xml\n create mode 100644 .idea/misc.xml\n create mode 100644 pom.xml\n create mode 100644 src/main/java/org/example/App.java\n create mode 100644 src/test/java/org/example/AppTest.java\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$ gh repo create hello11 --public\n✓ Created repository AlbertProfe/hello11 on GitHub\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$ git remote add origin https://github.com/AlbertProfe/hello11.git\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$ git push -u origin master\nEnumerating objects: 19, done.\nCounting objects: 100% (19/19), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (10/10), done.\nWriting objects: 100% (19/19), 2.64 KiB | 675.00 KiB/s, done.\nTotal 19 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/AlbertProfe/hello11.git\n * [new branch]      master -&gt; master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\nalbert@albert-VirtualBox:~/MyProjects/Sandbox/Hello11$",
    "crumbs": [
      "Java Create Project",
      "Java SE: Project push GitHub"
    ]
  },
  {
    "objectID": "javase/selab2-3.html",
    "href": "javase/selab2-3.html",
    "title": "Lab#SE02-3: Movie/Review, factory",
    "section": "",
    "text": "📘 Linux Lab#LI02-3: singleton and factory\nA singleton is a design pattern that ensures a class has only one instance and provides a global point of access to that instance.\n\nWe could modify the MovieManager class to implement the singleton pattern.\n\nA factory pattern is a design pattern that provides an interface for creating objects in a super class, but allows subclasses to alter the type of objects that will be created.\n\nWe could modify the MovieManager class to implement the factory pattern.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-3: Movie/Review, factory"
    ]
  },
  {
    "objectID": "javase/selab2-3.html#singleton",
    "href": "javase/selab2-3.html#singleton",
    "title": "Lab#SE02-3: Movie/Review, factory",
    "section": "1 Singleton",
    "text": "1 Singleton\nYou could then use these:\n\n\nMovieManager.java\n\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class MovieManager {\n    private static MovieManager instance = null;\n    private int qty;\n    private double size;\n    private HashMap&lt;String, Movie&gt; movies;\n    private Date lastModified;\n    \n    private MovieManager() {\n        this.qty = 0;\n        this.size = 0;\n        this.movies = new HashMap&lt;&gt;();\n        this.lastModified = new Date();\n    }\n\n    public static MovieManager getInstance() {\n        if (instance == null) {\n            instance = new MovieManager();\n        }\n        return instance;\n    }\n    //other class methods\n}\n\nIn this version of the class, the constructor is private, so it can only be called by the class itself.\nThe class also contains a static instance variable that holds the unique instance of the class, and a static getInstance() method that returns the instance.\nIf the instance doesn’t exist yet, it will be created, otherwise it will return the existing one.\n\n\ntest.java\n\n MovieManager manager = MovieManager.getInstance();\n\n manager.addMovie(new Movie(\"The Shawshank Redemption\",\"Frank Darabont\",\"Crime\"));\n manager.addMovie(new Movie(\"The Godfather\",\"Francis Ford Coppola\",\"Crime\"));\n manager.saveToCSV();\n\n\n\n\n\n\n\nNote\n\n\n\nKeep in mind that the Singleton pattern is useful when exactly one instance of a class is needed to control the action throughout the execution. However, it’s important to use singletons judiciously, as they can make your code more difficult to reason about and test if overused.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-3: Movie/Review, factory"
    ]
  },
  {
    "objectID": "javase/selab2-3.html#factory",
    "href": "javase/selab2-3.html#factory",
    "title": "Lab#SE02-3: Movie/Review, factory",
    "section": "2 Factory",
    "text": "2 Factory\n\n\nMovieManager.java\n\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class MovieManager {\n    private static MovieManager instance = null;\n    private int qty;\n    private double size;\n    private HashMap&lt;String, Movie&gt; movies;\n    private Date lastModified;\n    private MovieFactory movieFactory;\n    \n    private MovieManager() {\n        this.qty = 0;\n        this.size = 0;\n        this.movies = new HashMap&lt;&gt;();\n        this.lastModified = new Date();\n        this.movieFactory = new MovieFactory();\n    }\n\n    public static MovieManager getInstance() {\n        if (instance == null) {\n            instance = new MovieManager();\n        }\n        return instance;\n    }\n    public void addMovie(String title,\n                         String director, String genre, double size) {\n        Movie movie = movieFactory.createMovie(title, director, genre, size);\n        this.movies.put(title, movie);\n        this.qty++;\n        this.size += movie.getSize();\n        this.lastModified = new Date();\n    }\n    // other class methods\n}\n\n\n\nMovieFactory.java\n\ninterface MovieFactory {\n    Movie createMovie(String title,\n                      String director, String genre, double size);\n}\n\n\n\nDefaultMovieFactory.java\n\nclass DefaultMovieFactory implements MovieFactory {\n\n    @Override\n    public Movie createMovie(String title,\n                             String director, String genre, double size) {\n        return new Movie(title, director, genre, size);\n                             }\n}\n\nIn this version of the MovieManager class, a movieFactory field is added to the class, it is an instance of the MovieFactory interface. The MovieManager class has a new addMovie(String title, String director, String genre, double size) method that takes 4 parameters and it uses the movieFactory object to create a new Movie object with the provided parameters.\nThe MovieFactory interface defines a single method createMovie(String title, String director, String genre, double size) that creates a Movie object. The DefaultMovieFactory class is an implementation of this interface that creates the Movie objects by calling its constructor.\n\n\n\n\n\n\nImportant\n\n\n\nThe MovieManager uses the factory method createMovie() to create the movie objects rather than calling the constructor directly.\n\n\nThis way, if the implementation of how Movie objects are created needs to change in the future, only the DefaultMovieFactory class needs to be modified. The rest of the MovieManager class remains unchanged, so it provides flexibility to change the implementation in future.\n\n\n\n\n\n\nTip\n\n\n\nYou can also have other implementation of MovieFactory, say like a SecureMovieFactory to create secure movies or any other such implementation. This way you can change the way movie object is created in future without modifying the code of MovieManager\nIt is worth noting that this is a simple example of the factory pattern and it can be applied in many ways based on the requirements and use cases.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-3: Movie/Review, factory"
    ]
  },
  {
    "objectID": "javase/se-pattern-strategy.html",
    "href": "javase/se-pattern-strategy.html",
    "title": "Strategy",
    "section": "",
    "text": "The strategy pattern is a behavioral design pattern that allows for flexible behavior by encapsulating algorithms into separate classes for interchangeability and modularity.\nThe Strategy design pattern is a behavioral design pattern that allows for flexible behavior implementation by encapsulating algorithms into separate classes. This pattern is based on the principle of “composition over inheritance,” which means that it’s better to use composition and interfaces rather than inheritance to achieve flexibility and modularity.\nIn a typical implementation of the Strategy pattern, an interface or abstract class defines a set of methods that encapsulate a specific behavior or algorithm. Concrete classes implement these methods with their own specific implementation of the behavior. The context object that needs to use the behavior holds a reference to the abstract class or interface, and at runtime, the concrete implementation is chosen based on the current context.\nThe advantage of using the Strategy pattern is that it allows for interchangeable behavior implementation. By encapsulating the algorithms into separate classes, it’s easy to swap out one implementation for another at runtime, without changing the code of the context object. This makes the code more flexible, maintainable, and extensible.",
    "crumbs": [
      "Java Design Patterns",
      "Strategy"
    ]
  },
  {
    "objectID": "javase/se-pattern-strategy.html#example-sorting",
    "href": "javase/se-pattern-strategy.html#example-sorting",
    "title": "Strategy",
    "section": "1 Example: Sorting",
    "text": "1 Example: Sorting\nHere’s an example of implementing the Strategy design pattern in Java step by step:\n\nDefine the Strategy Interface:\n\npublic interface SortingStrategy {\n    public void sort(int[] data);\n}\nThis interface defines the behavior for the sorting strategy, which can be implemented by multiple concrete classes.\n\nImplement the Concrete Strategies\n\npublic class BubbleSort implements SortingStrategy {\n    public void sort(int[] data) {\n        // Implement the bubble sort algorithm here\n    }\n}\n\npublic class QuickSort implements SortingStrategy {\n    public void sort(int[] data) {\n        // Implement the quick sort algorithm here\n    }\n}\nThese classes implement the SortingStrategy interface and provide specific implementations of the sorting algorithms.\n\nImplement the Context Class:\n\npublic class Sorter {\n    private SortingStrategy sortingStrategy;\n    \n    public Sorter(SortingStrategy sortingStrategy) {\n        this.sortingStrategy = sortingStrategy;\n    }\n    \n    public void sort(int[] data) {\n        sortingStrategy.sort(data);\n    }\n}\nThis class represents the context in which the sorting behavior will be used. It holds a reference to a SortingStrategy object and delegates the sorting operation to it.\n\nUse the Context Class with Different Strategies\n\nint[] data = {4, 2, 1, 5, 3};\nSorter sorter = new Sorter(new BubbleSort());\nsorter.sort(data); // Sort using bubble sort\n\nSorter sorter2 = new Sorter(new QuickSort());\nsorter2.sort(data); // Sort using quick sort\nThis code creates two instances of the Sorter class, one with a BubbleSort object and another with a QuickSort object. It then calls the sort() method on each instance, which delegates the sorting operation to the respective strategy object.\nBy using the Strategy pattern in this way, the behavior of the sorting operation can be easily changed by creating a new concrete strategy object and passing it to the Sorter object. This makes the code more flexible and easy to maintain, as changes to the sorting behavior can be made without modifying the Sorter class itself.",
    "crumbs": [
      "Java Design Patterns",
      "Strategy"
    ]
  },
  {
    "objectID": "javase/se-pattern-factory.html",
    "href": "javase/se-pattern-factory.html",
    "title": "Factory",
    "section": "",
    "text": "The factory pattern is a design pattern that is used to create objects in a structured and standardized way. The factory pattern defines a factory method, which is a method that is responsible for creating objects of a specific type.\n\nThe factory pattern is useful when you want to centralize the logic for creating objects, and to provide a consistent and standard way of creating objects of different types. This can help to reduce duplication of code, and to make the code more maintainable and extensible.\nIn the context of the factory pattern, decoupling refers to the idea of separating the logic for creating objects from the code that uses those objects. By decoupling these two aspects of the system, you can make the code that uses the objects more flexible and reusable, and you can make the logic for creating the objects more modular and maintainable.",
    "crumbs": [
      "Java Design Patterns",
      "Factory"
    ]
  },
  {
    "objectID": "javase/se-pattern-factory.html#overview",
    "href": "javase/se-pattern-factory.html#overview",
    "title": "Factory",
    "section": "",
    "text": "The factory pattern is a design pattern that is used to create objects in a structured and standardized way. The factory pattern defines a factory method, which is a method that is responsible for creating objects of a specific type.\n\nThe factory pattern is useful when you want to centralize the logic for creating objects, and to provide a consistent and standard way of creating objects of different types. This can help to reduce duplication of code, and to make the code more maintainable and extensible.\nIn the context of the factory pattern, decoupling refers to the idea of separating the logic for creating objects from the code that uses those objects. By decoupling these two aspects of the system, you can make the code that uses the objects more flexible and reusable, and you can make the logic for creating the objects more modular and maintainable.",
    "crumbs": [
      "Java Design Patterns",
      "Factory"
    ]
  },
  {
    "objectID": "javase/se-pattern-factory.html#example-carfactory",
    "href": "javase/se-pattern-factory.html#example-carfactory",
    "title": "Factory",
    "section": "2 Example CarFactory",
    "text": "2 Example CarFactory\nHere is an example of how to implement the factory pattern in Java, using a CarFactory class to create different types of cars:\npublic class CarFactory {\n    // Private constructor to prevent instantiation\n    private CarFactory() { }\n\n    // Factory method for creating cars\n    public static Car createCar(String type) {\n        switch (type) {\n            case \"sedan\":\n                return new Sedan(\"Toyota\", \"Camry\", 2019);\n            case \"hatchback\":\n                return new Hatchback(\"Honda\", \"Fit\", 2019);\n            case \"suv\":\n                return new SUV(\"Jeep\", \"Grand Cherokee\", 2019);\n            default:\n                throw new IllegalArgumentException(\"Invalid car type: \" + type);\n        }\n    }\n}\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type.\nThe createCar() method takes a type parameter, which specifies the type of car to create. Depending on the value of the type parameter, the createCar() method creates and returns an instance of the Sedan, Hatchback, or SUV class.\nTo use the CarFactory class, you would call the createCar() method, passing in the type of car.\nUsing the @Data annotation from the Lombok library to automatically generate getters, setters, and constructors for the Sedan, Hatchback, and SUV classes:\n // Sedan class\n    @Data\n    public static class Sedan implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\n// Hatchback class\n    @Data\n    public static class Hatchback implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\n// SUV class\n    @Data\n    public static class SUV implements Car {\n        private String make;\n        private String model;\n        private int year;\n    }\nIn this example, the CarFactory class defines a createCar() method, which is marked as public and static. This method is the factory method, which is responsible for creating objects of the Car type.\nThe createCar() method takes a type parameter, which specifies the type of car to create. Depending on the value of the type parameter, the createCar() method creates and returns an instance of the Sedan, Hatchback, or SUV class.\nThe Sedan, Hatchback, and SUV classes are nested classes inside the CarFactory class. Each of these classes is marked with the @Data annotation from the Lombok library, which generates the appropriate getters, setters, and constructors for the class. This means that you don’t have to write these methods manually, which can save a lot of time and effort.\nTo use the CarFactory class, you would call the createCar() method, passing in the type of car you want to create. For example:\nCar sedan = CarFactory.createCar(\"sedan\");\nThis code would create and return an instance of the Sedan class, with the specified make, model, and year.",
    "crumbs": [
      "Java Design Patterns",
      "Factory"
    ]
  },
  {
    "objectID": "javase/se-pattern-factory.html#carfactory-decoupling",
    "href": "javase/se-pattern-factory.html#carfactory-decoupling",
    "title": "Factory",
    "section": "3 CarFactory decoupling",
    "text": "3 CarFactory decoupling\nThe factory pattern is often used in conjunction with the concept of decoupling, which is the idea of separating different components or aspects of a system in order to make the system more modular, flexible, and maintainable.\nBy decoupling the CarFactory class from the code that uses the cars, you can make the code that uses the cars more flexible and reusable. For example, you could define a CarDriver class that takes a Car object as a parameter, and uses the `",
    "crumbs": [
      "Java Design Patterns",
      "Factory"
    ]
  },
  {
    "objectID": "javase/se-what-principles.html",
    "href": "javase/se-what-principles.html",
    "title": "Java Standard Edition: Principles",
    "section": "",
    "text": "Object-oriented programming (OOP) is a programming paradigm that is based on the concepts of objects and classes, which can contain data and code that manipulates that data. OOP is based on several key principles, including the following:\n\n\n\n\n\nJava SE Basic Principles OOP\n\n\n\nEncapsulation: Encapsulation refers to the idea of combining data and the code that manipulates that data into a single unit, or object. This allows for better organization and modularity of code, and helps to hide the internal details of an object from other parts of the program.\nAbstraction: Abstraction is the process of representing essential features without including the details. In OOP, abstraction is often achieved through the use of interfaces or abstract classes, which define a set of common methods that can be implemented by different classes in different ways. This allows for greater flexibility and reusability of code.\nInheritance: Inheritance is the ability of a class to inherit the attributes and behaviors of another class. In OOP, a class can inherit from a parent class, also known as a superclass, and can override or extend the methods of the parent class to add new functionality. This allows for code reuse and makes it easier to create hierarchies of classes.\nPolymorphism: Polymorphism is the ability of an object to take on multiple forms. In OOP, polymorphism allows for the use of a single interface to refer to objects of different types. This allows for greater flexibility and code reuse, as the same method can be used on objects of different types and the appropriate implementation will be called based on the type of the object.\n\nOverall, the principles of encapsulation, abstraction, inheritance, and polymorphism are fundamental to OOP and form the basis for many of its benefits, such as modularity, flexibility, code reuse, and ease of maintenance.\n\n\nObjects can interact with each other by sending and receiving messages, or method calls, to access and modify their data.\nObjects are created from classes, which are templates that define the structure and behavior of objects.\n\n\n\nExample object in Java\n\n\n\n📘 Object-oriented programming (OOP)\nIn object-oriented programming (OOP), an object is a self-contained unit that combines data and the code that manipulates that data.\nAn object is a data structure that contains:\n\nattributes, or properties, that describe the object, defines the state’s object\nand methods, or functions, that define the behavior of the object.\n\n\n\nIn Java, objects are created using the new keyword, and their attributes and methods can be accessed using the dot (.) operator. Objects are an important concept in OOP and are central to many of its benefits, such as modularity, code reuse, and flexibility.\n\nPerson carla = new Person(\"Carla\", 21, \"red hair\", 45.000);\n\n\n\nIn object-oriented programming (OOP):\n\nThe constructor is a special type of method that is used to create and initialize an object. In Java, a constructor is a method that has the same name as the class and is used to create an instance of the class. A constructor can take arguments, which are used to initialize the object’s attributes, or properties.\nThe state of an object refers to the values of its attributes at a given moment in time.\nThe behavior of an object refers to the actions or operations that it can perform. In Java, the behavior of an object is defined by its methods, which are functions that are associated with the object and can be called to perform actions on the object.\n\nOverall, a constructor, state, and behavior are important concepts in OOP and are closely related.\nA constructor is used to create and initialize an object, and its state and behavior are defined by its attributes and methods, respectively. In Java SE, these concepts are central to the creation and use of objects, and are fundamental to the flexibility and power of the Java language.",
    "crumbs": [
      "What is Java SE",
      "Java Standard Edition: Principles"
    ]
  },
  {
    "objectID": "javase/se-what-principles.html#java-oop",
    "href": "javase/se-what-principles.html#java-oop",
    "title": "Java Standard Edition: Principles",
    "section": "",
    "text": "Object-oriented programming (OOP) is a programming paradigm that is based on the concepts of objects and classes, which can contain data and code that manipulates that data. OOP is based on several key principles, including the following:\n\n\n\n\n\nJava SE Basic Principles OOP\n\n\n\nEncapsulation: Encapsulation refers to the idea of combining data and the code that manipulates that data into a single unit, or object. This allows for better organization and modularity of code, and helps to hide the internal details of an object from other parts of the program.\nAbstraction: Abstraction is the process of representing essential features without including the details. In OOP, abstraction is often achieved through the use of interfaces or abstract classes, which define a set of common methods that can be implemented by different classes in different ways. This allows for greater flexibility and reusability of code.\nInheritance: Inheritance is the ability of a class to inherit the attributes and behaviors of another class. In OOP, a class can inherit from a parent class, also known as a superclass, and can override or extend the methods of the parent class to add new functionality. This allows for code reuse and makes it easier to create hierarchies of classes.\nPolymorphism: Polymorphism is the ability of an object to take on multiple forms. In OOP, polymorphism allows for the use of a single interface to refer to objects of different types. This allows for greater flexibility and code reuse, as the same method can be used on objects of different types and the appropriate implementation will be called based on the type of the object.\n\nOverall, the principles of encapsulation, abstraction, inheritance, and polymorphism are fundamental to OOP and form the basis for many of its benefits, such as modularity, flexibility, code reuse, and ease of maintenance.\n\n\nObjects can interact with each other by sending and receiving messages, or method calls, to access and modify their data.\nObjects are created from classes, which are templates that define the structure and behavior of objects.\n\n\n\nExample object in Java\n\n\n\n📘 Object-oriented programming (OOP)\nIn object-oriented programming (OOP), an object is a self-contained unit that combines data and the code that manipulates that data.\nAn object is a data structure that contains:\n\nattributes, or properties, that describe the object, defines the state’s object\nand methods, or functions, that define the behavior of the object.\n\n\n\nIn Java, objects are created using the new keyword, and their attributes and methods can be accessed using the dot (.) operator. Objects are an important concept in OOP and are central to many of its benefits, such as modularity, code reuse, and flexibility.\n\nPerson carla = new Person(\"Carla\", 21, \"red hair\", 45.000);\n\n\n\nIn object-oriented programming (OOP):\n\nThe constructor is a special type of method that is used to create and initialize an object. In Java, a constructor is a method that has the same name as the class and is used to create an instance of the class. A constructor can take arguments, which are used to initialize the object’s attributes, or properties.\nThe state of an object refers to the values of its attributes at a given moment in time.\nThe behavior of an object refers to the actions or operations that it can perform. In Java, the behavior of an object is defined by its methods, which are functions that are associated with the object and can be called to perform actions on the object.\n\nOverall, a constructor, state, and behavior are important concepts in OOP and are closely related.\nA constructor is used to create and initialize an object, and its state and behavior are defined by its attributes and methods, respectively. In Java SE, these concepts are central to the creation and use of objects, and are fundamental to the flexibility and power of the Java language.",
    "crumbs": [
      "What is Java SE",
      "Java Standard Edition: Principles"
    ]
  },
  {
    "objectID": "javase/se-concepts-createproject.html",
    "href": "javase/se-concepts-createproject.html",
    "title": "Java SE: Create Maven Project",
    "section": "",
    "text": "To create a Maven project with a standard directory structure using IntelliJ IDEA, you can follow these steps:\n\nInstall the Maven plugin in IntelliJ IDEA.\n\nOpen IntelliJ IDEA and navigate to the Plugins settings.\nSearch for Maven and install the plugin.\n\nIn IntelliJ IDEA, click Create New Project.\n\nIn the New Project dialog, select Maven Archetype from the list of Generators.\nSelect the maven-archetype-quickstart archetype. This archetype creates a standard Maven project with a directory structure for source code and unit tests.\nRemember to use apache archetype (template).\n\nChoose from system or download the JDK to use\nClick Advanced Settings and enter the GroupId and ArtifactId for your project. These are used to identify your project uniquely across all projects.\nClick Create to create the project.\n\n\nCreating a Maven project\nCreate a new Maven project\n\n\n\nCatalog\nspecify which Maven repository you want to use in your project.\nThe internal Maven catalog is a default one. You can also select the local repository that is located in the .m2 directory, or you can select Maven central repository.\nYour project will be created with the following directory structure:\n  my-project\n  ├── pom.xml\n  └── src\n      ├── main\n      │   └── Person.java\n      │       Account.java\n      │       AccountManager.java    \n      └── test\n          └── AccountManagerTest.java\n          \nThe src/main/java directory is where you should put your Java source code, and the src/test/java directory is where you should put your unit tests.\n\n\n\nMaven project folder-tree\n\n\nTo specify the version of Maven to use, you can edit the pom.xml file and add a &lt;version&gt; element to the &lt;project&gt; element. For example:\n&lt;project&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.example&lt;/groupId&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n  &lt;version&gt;3.6.3&lt;/version&gt;\n  ...\n&lt;/project&gt;\nThis will use version 3.6.3 of Maven for the project.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Create Maven Project"
    ]
  },
  {
    "objectID": "javase/se-concepts-createproject.html#create-maven-project",
    "href": "javase/se-concepts-createproject.html#create-maven-project",
    "title": "Java SE: Create Maven Project",
    "section": "",
    "text": "To create a Maven project with a standard directory structure using IntelliJ IDEA, you can follow these steps:\n\nInstall the Maven plugin in IntelliJ IDEA.\n\nOpen IntelliJ IDEA and navigate to the Plugins settings.\nSearch for Maven and install the plugin.\n\nIn IntelliJ IDEA, click Create New Project.\n\nIn the New Project dialog, select Maven Archetype from the list of Generators.\nSelect the maven-archetype-quickstart archetype. This archetype creates a standard Maven project with a directory structure for source code and unit tests.\nRemember to use apache archetype (template).\n\nChoose from system or download the JDK to use\nClick Advanced Settings and enter the GroupId and ArtifactId for your project. These are used to identify your project uniquely across all projects.\nClick Create to create the project.\n\n\nCreating a Maven project\nCreate a new Maven project\n\n\n\nCatalog\nspecify which Maven repository you want to use in your project.\nThe internal Maven catalog is a default one. You can also select the local repository that is located in the .m2 directory, or you can select Maven central repository.\nYour project will be created with the following directory structure:\n  my-project\n  ├── pom.xml\n  └── src\n      ├── main\n      │   └── Person.java\n      │       Account.java\n      │       AccountManager.java    \n      └── test\n          └── AccountManagerTest.java\n          \nThe src/main/java directory is where you should put your Java source code, and the src/test/java directory is where you should put your unit tests.\n\n\n\nMaven project folder-tree\n\n\nTo specify the version of Maven to use, you can edit the pom.xml file and add a &lt;version&gt; element to the &lt;project&gt; element. For example:\n&lt;project&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.example&lt;/groupId&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n  &lt;version&gt;3.6.3&lt;/version&gt;\n  ...\n&lt;/project&gt;\nThis will use version 3.6.3 of Maven for the project.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Create Maven Project"
    ]
  },
  {
    "objectID": "javase/se-concepts-createproject.html#step-by-step-screenshots",
    "href": "javase/se-concepts-createproject.html#step-by-step-screenshots",
    "title": "Java SE: Create Maven Project",
    "section": "2 Step-by-step screenshots",
    "text": "2 Step-by-step screenshots\n2022-12-14\nSlider-presentation Create project Java SE Maven\n2024-01-14\n\n\n\n\n\n\n\n\nCreate Maven JavaSE Project Idea 2024: New Project wizard\n\n\n\n\n\n\n\nCreate Maven JavaSE Project Idea 2024: Project structure\n\n\n\n\n\n\nFigure 1: Create Maven JavaSE Project Idea 2024\n\n\n\n\nIntelliJ IDEA 2023.3.2 (Community Edition)\nBuild #IC-233.13135.103, built on December 20, 2023 Runtime version: 17.0.9+7-b1087.9 amd64 VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o. Linux 5.15.0-91-generic",
    "crumbs": [
      "Java Create Project",
      "Java SE: Create Maven Project"
    ]
  },
  {
    "objectID": "javase/se-concepts-createproject.html#idea-configurations",
    "href": "javase/se-concepts-createproject.html#idea-configurations",
    "title": "Java SE: Create Maven Project",
    "section": "3 Idea configurations",
    "text": "3 Idea configurations\n\n\n\nCreate Maven JavaSE Project Idea 2024: Idea configurations, File\n\n\n\n\n\nCreate Maven JavaSE Project Idea 2024: Project structure,SDK and lenguage level\n\n\n\n\n\nCreate Maven JavaSE Project Idea 2024: modules and sources\n\n\n\n\n\nCreate Maven JavaSE Project Idea 2024: modules and dependencies",
    "crumbs": [
      "Java Create Project",
      "Java SE: Create Maven Project"
    ]
  },
  {
    "objectID": "javase/se-concepts-createproject.html#what-did-we-create",
    "href": "javase/se-concepts-createproject.html#what-did-we-create",
    "title": "Java SE: Create Maven Project",
    "section": "4 What did we create?",
    "text": "4 What did we create?\n\n\n\nAnatomy of our first Class\n\n\nThis Java code defines a class named “HelloWorld” with a main method. When executed, it prints “Hello World!” to the console using the System.out.println statement.\nThe main method serves as the entry point for the program.\nThis simple program is a common introductory example, demonstrating the basic structure of a Java application and how to output text to the console.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Create Maven Project"
    ]
  },
  {
    "objectID": "javase/se-pattern-builder.html",
    "href": "javase/se-pattern-builder.html",
    "title": "Builder",
    "section": "",
    "text": "The builder pattern is a design pattern in computer programming and Java that is used to separate complex object construction from its representation..\n\n\nThe Builder design pattern is a software design pattern in which the construction of a complex object is separated from its representation, so that the same construction process can create different representations.\nThe Builder design pattern is used in cases where a class has several attributes and the creation of an instance of that class can be complex. By using the Builder pattern, the construction process of the complex class is separated into several steps, each of which is performed by a specific method of the Builder object. This allows the construction process to be more flexible and easier to understand, as each step is performed independently.\nThis pattern is very useful in cases where the class has many configuration options and you want to avoid using a constructor with many parameters or when you want the construction process to be independent of the built object.",
    "crumbs": [
      "Java Design Patterns",
      "Builder"
    ]
  },
  {
    "objectID": "javase/se-pattern-builder.html#definition",
    "href": "javase/se-pattern-builder.html#definition",
    "title": "Builder",
    "section": "",
    "text": "The builder pattern is a design pattern in computer programming and Java that is used to separate complex object construction from its representation..\n\n\nThe Builder design pattern is a software design pattern in which the construction of a complex object is separated from its representation, so that the same construction process can create different representations.\nThe Builder design pattern is used in cases where a class has several attributes and the creation of an instance of that class can be complex. By using the Builder pattern, the construction process of the complex class is separated into several steps, each of which is performed by a specific method of the Builder object. This allows the construction process to be more flexible and easier to understand, as each step is performed independently.\nThis pattern is very useful in cases where the class has many configuration options and you want to avoid using a constructor with many parameters or when you want the construction process to be independent of the built object.",
    "crumbs": [
      "Java Design Patterns",
      "Builder"
    ]
  },
  {
    "objectID": "javase/se-pattern-builder.html#example-building-a-house",
    "href": "javase/se-pattern-builder.html#example-building-a-house",
    "title": "Builder",
    "section": "2 Example: Building a House",
    "text": "2 Example: Building a House\nHere’s an example of building a house using the Builder pattern in Java step by step:\n\nCreate a House class with various fields such as walls, roof, doors, etc.:\n\npublic class House {\n    private String walls;\n    private String roof;\n    private String doors;\n    // getters and setters for each field\n}\n\nCreate a ConcreteHouseBuilder class that builds each part of the house:\n\npublic class ConcreteHouseBuilder {\n    private House house;\n\n    public ConcreteHouseBuilder() {\n        this.house = new House();\n    }\n\n    public void buildWalls() {\n        house.setWalls(\"concrete walls\");\n    }\n\n    public void buildRoof() {\n        house.setRoof(\"concrete roof\");\n    }\n\n    public void buildDoors() {\n        house.setDoors(\"wooden doors\");\n    }\n\n    public House getHouse() {\n        return this.house;\n    }\n}\n\nCreate a HouseDirector class that controls the building process using the ConcreteHouseBuilder class:\n\npublic class HouseDirector {\n    private ConcreteHouseBuilder builder;\n\n    public HouseDirector() {\n        this.builder = new ConcreteHouseBuilder();\n    }\n\n    public void buildHouse() {\n        builder.buildWalls();\n        builder.buildRoof();\n        builder.buildDoors();\n    }\n    public House getHouse(){\n        return builder.getHouse();\n    }\n}\n\nIn the main method, we can create an instance of the HouseDirector, and use the Director to build the house:\n\n    public static void main(String[] args) {\n        HouseDirector director = new HouseDirector();\n        director.buildHouse();\n        House house = director.getHouse();\n    }\nIn this example, the House class represents the complex object that we want to build, the ConcreteHouseBuilder class implements the steps for building the house and the HouseDirector class controls the building process using the ConcreteHouseBuilder class.",
    "crumbs": [
      "Java Design Patterns",
      "Builder"
    ]
  },
  {
    "objectID": "javase/se-concepts-maven.html",
    "href": "javase/se-concepts-maven.html",
    "title": "Java SE: Maven",
    "section": "",
    "text": "📘 Dependency Management: Maven\nApache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information.\nThese tools allow developers to specify the dependencies for their project in a file, and then automatically handle the process of downloading and installing those dependencies. This can save a lot of time and effort for developers, and helps ensure that all of the necessary dependencies are present and up-to-date in a project.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Maven"
    ]
  },
  {
    "objectID": "javase/se-concepts-maven.html#maven-central-repository",
    "href": "javase/se-concepts-maven.html#maven-central-repository",
    "title": "Java SE: Maven",
    "section": "1.1 Maven Central Repository",
    "text": "1.1 Maven Central Repository\nLink: Maven Central Repository\nMaven repository is a directory where all the dependencies such as jars, library files, plugins, or other artifacts that will be required by the projects are stored.\nThese repositories help us to store and maintain useful resources so that they can be used in our maven projects while building and deploying the artifacts.\nAll the layout and structure of the underlying repositories of maven of any type are completely hidden for maven users.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Maven"
    ]
  },
  {
    "objectID": "javase/se-concepts-maven.html#maven-lifecycle",
    "href": "javase/se-concepts-maven.html#maven-lifecycle",
    "title": "Java SE: Maven",
    "section": "1.2 Maven Lifecycle",
    "text": "1.2 Maven Lifecycle\nMaven is a build automation tool for Java projects. It is used to manage the build, reporting, and documentation of a project. Maven has a defined lifecycle that outlines the steps required to build and distribute a project.\n\n\n\nMaven lifecycle\n\n\nThe Maven lifecycle has three main phases:\n\nclean: This phase is used to clean up any previous build artifacts.\ndefault: This is the main phase of the lifecycle, where the project is built, tested, and packaged.\nsite: This phase is used to generate the project’s documentation and site information.\n\nEach phase of the Maven lifecycle consists of a set of build phases, which are executed in a specific order.\nFor example, the default phase consists of the following build phases:\n\n\nEach build phase consists of a set of build goals, which are the specific tasks that are executed to accomplish the phase’s objectives. For example, the compile phase has a build goal called compiler:compile that is responsible for compiling the project’s source code.\n\nvalidate: Validate the project’s configuration and dependencies.\ncompile: Compile the project’s source code.\ntest: Run the project’s tests.\npackage: Package the compiled code into a distributable format (e.g., a JAR file).\ninstall: Install the packaged code into the local repository.\ndeploy: Deploy the packaged code to a remote repository for others to use.\n\nBy following the defined Maven lifecycle, developers can easily build, test, and distribute their Java projects in a consistent and repeatable manner.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Maven"
    ]
  },
  {
    "objectID": "javase/se-concepts-maven.html#jdk-skd-and-language-level",
    "href": "javase/se-concepts-maven.html#jdk-skd-and-language-level",
    "title": "Java SE: Maven",
    "section": "3.1 JDK, SKD and language level",
    "text": "3.1 JDK, SKD and language level\nIn a Maven IntelliJ IDEA project, the SDK (Software Development Kit) represents the Java version used for compilation and execution, determining the available libraries and features. The language level, on the other hand, specifies the language features and syntax level within that SDK.\nWhile the SDK sets the overall compatibility, the language level refines language-specific settings.\n\n\nFor example, using JDK 11 as the SDK with language level 8 means leveraging JDK 11 capabilities while restricting language features to those compatible with Java 8 syntax.\nProper alignment between SDK and language level ensures both Java version compatibility and language feature availability.\nSDK, JDK, JRE\nSDK (Software Development Kit) is a broader term encompassing tools and libraries for software development.\nJDK (Java Development Kit) specifically refers to the Java SDK, providing tools and resources for Java development, including the Java Runtime Environment (JRE), compiler, and libraries.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Maven"
    ]
  },
  {
    "objectID": "javase/se-concepts-maven.html#archetype-groupid-artifactid",
    "href": "javase/se-concepts-maven.html#archetype-groupid-artifactid",
    "title": "Java SE: Maven",
    "section": "3.2 Archetype, GroupId, ArtifactId",
    "text": "3.2 Archetype, GroupId, ArtifactId\n\n\n\n\n\n\nNote\n\n\n\nAn archetype is a template for a project. It provides a predefined structure and files for a project, so that you don’t have to create them manually.\n\n\nGroupId and artifactId are two important elements of a Maven project.\n\nThe groupId is a unique identifier for a project, and is typically used to group related projects together.\nThe artifactId is the unique identifier for a specific project, and is used to identify the project within the group.\n\nTogether, the groupId and artifactId help to uniquely identify a project within the Maven ecosystem.",
    "crumbs": [
      "Java Create Project",
      "Java SE: Maven"
    ]
  },
  {
    "objectID": "javase/se-concepts-objects.html",
    "href": "javase/se-concepts-objects.html",
    "title": "Java SE: Class and Objects",
    "section": "",
    "text": "📘 What is a Java Class\nA Java class is a template for creating objects, defining object data types and methods. A class is a blueprint for objects, and an object is an instance of a class.\nIn other words, a class def&gt;ines the properties and behaviors that objects created from the class will have.\nFor example, if you have a class called “Dog,” objects created from that class might have properties like “breed” and “age,” as well as behaviors like “bark” and “fetch.” Classes are an important concept in object-oriented programming, and are a fundamental building block of Java programs",
    "crumbs": [
      "Java Concepts",
      "Java SE: Class and Objects"
    ]
  },
  {
    "objectID": "javase/se-concepts-objects.html#class",
    "href": "javase/se-concepts-objects.html#class",
    "title": "Java SE: Class and Objects",
    "section": "1 Class",
    "text": "1 Class\nLet’s create a class called Person.\nWhat would we want to know about a person? What we want to know depends on what problem we are trying to solve. In one situation, perhaps when creating an address book, we might want to know the person’s name and phone number and email.\nHere’s a possible Person class with:\n\nfields or attributes (instance variables),\nconstructor,\nand methods.\n\n\n\n\nPerson java class\n\n\n\n\n\n\n\n\nPerson class\n\n\n\n\n\n\n\nPerson.java\n\n\npublic class Person {\n  //fields  \n  private int age;\n  private String name;\n  private String address;\n  private double salary;\n  private String phoneNumber;\n  private String email; \n  \n  //constructor\n  public Person(int age, String name, String address, double salary) {\n    this.age = age;\n    this.name = name;\n    this.address = address;\n    this.salary = salary;\n    this.email = email;\n    this.phoneNumber = phoneNumber;\n  }\n\n    //constructor\n  public Person(int age, String name, String email, String phoneNumber) {\n    this.age = age;\n    this.name = name;\n    this.address = address;\n    this.salary = salary;\n    this.email = email;\n    this.phoneNumber = phoneNumber;\n  }\n  \n  //methods\n  public int getAge() {\n    return age;\n  }\n  \n  public void setAge(int age) {\n    this.age = age;\n  }\n  \n  public String getName() {\n    return name;\n  }\n  \n  public void setName(String name) {\n    this.name = name;\n  }\n  \n  public String getAddress() {\n    return address;\n  }\n  \n  public void setAddress(String address) {\n    this.address = address;\n  }\n  \n  public double getSalary() {\n    return salary;\n  }\n  \n  public void setSalary(double salary) {\n    this.salary = salary;\n  }\n  \n  public void study() {\n    // Do some work here\n  }\n  \n  public void receivePaycheck() {\n    // Process salary and distribute paychecks\n  }\n\n  public void getOlder() {\n    this.age++;\n  }\n}",
    "crumbs": [
      "Java Concepts",
      "Java SE: Class and Objects"
    ]
  },
  {
    "objectID": "javase/se-concepts-objects.html#objects",
    "href": "javase/se-concepts-objects.html#objects",
    "title": "Java SE: Class and Objects",
    "section": "2 Objects",
    "text": "2 Objects\nEach object has its own unique identity, and it maintains its own state by storing the values of its attributes. The object’s behavior is defined by the methods that operate on its attributes, and these methods can be invoked by other code to ask the object to perform a specific action.\n\n\n\nJava SE Basic Principles OOP Class and Object\n\n\n\n\nObjects are an essential concept in object-oriented programming, and they are used to model real-world entities in a program. For example, you could create an object to represent a particular person, with attributes such as name, age, and address, and methods that operate on these attributes, such as a method to calculate their age in a particular year.\nIn Java, you can create objects by using the new keyword and the class constructor to allocate memory for the object, and then you can access the object’s attributes and methods by using the . (dot) operator. For example, if you have a class called Person, you could create an object of that class like this:\nPerson carla = new Person();\nAnd then you could access the object’s attributes and methods like this:\ncarla.name = \"Carla Whitesand\";\ncarla.setAddress(\"123 Main Street\");\nint age = carla.calc&gt;ulateAge(2022);\n\n\nIn this example, name and setAddress() are attributes and methods of the Person class, and person is an object of that class. You can use this object to store and manipulate data according to the rules defined by the class.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Class and Objects"
    ]
  },
  {
    "objectID": "javase/se-concepts-objects.html#creating-objects",
    "href": "javase/se-concepts-objects.html#creating-objects",
    "title": "Java SE: Class and Objects",
    "section": "3 Creating Objects",
    "text": "3 Creating Objects\nfrom The Java™ Tutorials\nAs you know, a class provides the blueprint for objects; you create an object from a class. Each of the following statements taken from the CreateObjectDemo program creates an object and assigns it to a variable:\nPoint originOne = new Point(23, 94);\nRectangle rectOne = new Rectangle(originOne, 100, 200);\nRectangle rectTwo = new Rectangle(50, 100);\nThe first line creates an object of the Point class, and the second and third lines each create an object of the Rectangle class.\nEach of these statements has three parts (discussed in detail below):\n\nDeclaration: The code set in bold are all variable declarations that associate a variable name with an object type.\nInstantiation: The new keyword is a Java operator that creates the object.\nInitialization: The new operator is followed by a call to a constructor, which initializes the new object.\n\n\n3.1 Declaring a Variable to Refer to an Object\nPreviously, you learned that to declare a variable, you write:\ntype name;\nThis notifies the compiler that you will use name to refer to data whose type is type. With a primitive variable, this declaration also reserves the proper amount of memory for the variable.\nYou can also declare a reference variable on its own line. For example:\nPoint originOne;\n\n\n\n\n\n\nJust a reference variable: is empty\n\n\n\nIf you declare originOne like this, its value will be undetermined until an object is actually created and assigned to it. Simply declaring a reference variable does not create an object.\n\n\nFor that, you need to use the new operator, as described in the next section. You must assign an object to originOne before you use it in your code. Otherwise, you will get a compiler error.\nA variable in this state, which currently references no object, can be illustrated as follows (the variable name, originOne, plus a reference pointing to nothing):\noriginOne –&gt; null\n\n\n\n“originOne –&gt; null” figure part 1",
    "crumbs": [
      "Java Concepts",
      "Java SE: Class and Objects"
    ]
  },
  {
    "objectID": "javase/se-concepts-objects.html#instantiating-a-class",
    "href": "javase/se-concepts-objects.html#instantiating-a-class",
    "title": "Java SE: Class and Objects",
    "section": "4 Instantiating a Class",
    "text": "4 Instantiating a Class\n\n📘 Instantiating a Class\nThe new operator instantiates a class by allocating memory for a new object and returning a reference to that memory. The new operator also invokes the object constructor.\n\n\n\n\n\n\n\nInstantiating a class\n\n\n\nThe phrase “instantiating a class” means the same thing as “creating an object.” When you create an object, you are creating an “instance” of a class, therefore “instantiating” a class.\nThe new operator requires a single, postfix argument: a call to a constructor. The name of the constructor provides the name of the class to instantiate.\n\n\nThe new operator returns a reference to the object it created. This reference is usually assigned to a variable of the appropriate type, like:\nPoint originOne = new Point(23, 94);\noriginOne –&gt; Point object\n\n\n\n“originOne –&gt; Point object” figure part 2\n\n\nThe reference returned by the new operator does not have to be assigned to a variable. It can also be used directly in an expression. For example:\nint height = new Rectangle().height;\nThis statement will be discussed in the next section or you can go here.\n\n4.1 Initializing an Object\nHere’s the code for the Point class:\npublic class Point {\n    public int x = 0;\n    public int y = 0;\n    //constructor\n    public Point(int a, int b) {\n        x = a;\n        y = b;\n    }\n}\nThis class contains a single constructor. You can recognize a constructor because its declaration uses the same name as the class and it has no return type.\nThe constructor in the Point class takes two integer arguments, as declared by the code (int a, int b). The following statement provides 23 and 94 as values for those arguments: Linux Lab#LI01-1: Export env user with grep and pipe\nPoint originOne = new Point(23, 94);\n\n\n4.2 Example UML: class and object\n\n\n\nThe class body may contain member variables, constructors, public methods, private helper methods and others.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Class and Objects"
    ]
  },
  {
    "objectID": "javase/se-concepts-objects.html#ways-to-create-an-object",
    "href": "javase/se-concepts-objects.html#ways-to-create-an-object",
    "title": "Java SE: Class and Objects",
    "section": "5 Ways to create an object",
    "text": "5 Ways to create an object\nThere are several ways to create objects in Java:\n\nUsing the new operator: this is the most common way to create an object in Java. It involves using the new operator followed by the class name and constructor arguments. For example:Implicit casting\n\nPerson carla = new Person(\"Carla\", 30, \"123 Main St.\");\n\nUsing the clone() method: if you want to create a copy of an existing object, you can use the clone() method.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThis method is defined in the java.lang.Object class, which is the superclass of all Java classes. To use the clone() method, you’ll need to implement the Cloneable interface in your class and override the clone() method.\n\n\n\n\nUsing factory methods: A factory method is a static method that returns an instance of a class. Factory methods are often used to create objects when you need more flexibility or control over the object creation process.\nUsing reflection: Reflection is a feature of the Java language that allows you to inspect and manipulate the structure of a class at runtime.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can use reflection to create objects by invoking the newInstance() method on the Constructor object for a particular class.\n\n\n\n\nUsing object deserialization: You can use object deserialization to create an object from its serialized form, which is a stream of bytes that represents the object’s state.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nTo do this, you’ll need to implement the Serializable interface in your class and use the ObjectInputStream and ObjectOutputStream classes to serialize and deserialize the object.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Class and Objects"
    ]
  },
  {
    "objectID": "javase/se-concepts-objects.html#casting-typecasting",
    "href": "javase/se-concepts-objects.html#casting-typecasting",
    "title": "Java SE: Class and Objects",
    "section": "6 Casting (typecasting)",
    "text": "6 Casting (typecasting)\nCasting is the process of converting one type of data to another type. There are two types of casting: explicit and implicit.\n\n6.1 Explicit casting\nExplicit casting is when you specify the type you want the data to be converted to. An example of explicit casting is:\nint x = (int) 3.14;\nIn this case, the double value of 3.14 is being explicitly cast to an int.\n\n\n6.2 Implicit casting\nImplicit casting, also known as widening, is when the conversion happens automatically without the need for a specific type to be specified. An example of implicit casting is:\ndouble x = 3;\n\n\nIt’s important to note that casting can cause data loss if the type being converted to cannot hold the value of the original type. For example, casting a large double value to an int would result in the decimal places being truncated and lost.\nIn this case, the int value of 3 is being implicitly cast to a double.\n\n\n6.3 Casting in compilation/execution time\n\n\n\n\n\n\nNote\n\n\n\nIt is important to consider the class of the object and the type of its reference variable when casting, as it can affect both the compilation time and execution time of a program.\n\n\n\nDuring compilation, the compiler checks the source code for any type errors and other issues related to casting, such as trying to cast an object to a class that it is not compatible with. If any errors are found, the compiler will display them and the program will not be able to run until they are fixed. This means that understanding the class of an object and the type of its reference variable is crucial for avoiding casting errors during compilation.\n\n\n\nCompilation time refers to the period of time during which the source code of a program is translated into machine code by a compiler. This is the initial phase of program execution.\n\nAt execution time, casting can also have an impact on the performance and behavior of a program. For example, if a program tries to cast an object to a type that is not compatible with its class, a runtime exception will be thrown, causing the program to crash.\n\n\n\nExecution time refers to the period of time during which the compiled program runs and performs its intended operations. This is the phase of the program when it’s executed by the CPU and its instructions are executed.\nOn the other hand, if the casting is done properly and the object is compatible with the target type, it can improve the performance and efficiency of the program.\n\n\n\n\n\n\nImportant\n\n\n\nKnowing the class of an object and the type of its reference variable is also important for making sure the program is using the right methods and properties of the object, and for avoiding unexpected behavior.\n\n\n\n\n6.4 Upcasting and downcasting\nBefore reading this section you must read and understand how does inherence work\n\n\n\nA process of converting one data type to another is known as Casting (typecasting) and Upcasting and Downcasting defines weather it is up or down in a inherence relationship\n\n\n\n\n6.5 Upcasting\nUpcasting is casting a subtype to a supertype, upward to the inheritance tree. Upcasting happens automatically and we don’t have to explicitly do anything.\n\n\nTypeCasrting.java\n\n// Base Class\npublic class Animal\n{\n    public void talk() { System.out.println(\"I am talking\"); }\n}\n// Inherited class\nclass Cat extends Animal\n{\n    // This method overrides show() of Parent\n    @Override\n    public void talk() { System.out.println(\"Miauuu, miauuuu, miauuu!!!\"); }\n}\n \npublic class Test\n{\n    public void testUpCasting(){\n    \n        Animal cat = new Cat();\n        cat.talk();\n        // output: Miauuu, miauuuu, miauuu!!!)\n    }\n}\n\n\n\n6.6 Downcasting\nWhen Subclass type refers to the object of Parent class, it is known as downcasting. If we perform it directly, compiler gives Compilation error. If you perform it by typecasting, ClassCastException is thrown at runtime (sometimes we may use instanceof operator, then downcasting is possible)\n\n\nTypeCasrting.java\n\n// Base Class\npublic class Animal\n{\n    public void talk() { System.out.println(\"I am talking\"); }\n}\n// Inherited class\nclass Cat extends Animal\n{\n    // This method overrides show() of Parent\n    @Override\n    public void talk() { System.out.println(\"Miauuu, miauuuu, miauuu!!!\"); }\n}\n \npublic class Test\n{\n    public void testDownCasting(){\n\n        Cat cat = new Animal();\n        // compiling time error, try to cast but it can not\n        Animal animal = new Animal();\n        // creatng an object of the superclass is ok\n        Cat cat = (Cat) animal;\n        // downcasting\n        cat.talk();\n        // output: Miauuu, miauuuu, miauuu!!!)\n    }\n}",
    "crumbs": [
      "Java Concepts",
      "Java SE: Class and Objects"
    ]
  },
  {
    "objectID": "javase/se-principles-abstraction.html",
    "href": "javase/se-principles-abstraction.html",
    "title": "Java SE: Abstraction",
    "section": "",
    "text": "📘 Abstraction\nAbstraction is the process of focusing on the essential characteristics of an object, while ignoring the non-essential details.\n\n\nOne of the OOP concepts in Java is abstraction, which is the act of representing key features without including supporting information.\nIt is a method for developing a brand-new data type appropriate for a particular application.\nIt avoids providing extraneous or pointless facts and only displays the precise portion the user has requested. It is crucial since it prevents you from performing the same task more than once.\n\n\n\nJava SE Basic Principles OOP Abstraction\n\n\nHere is an example of abstraction in Java:\npublic abstract class Account {\n    // This is an abstract class because it has an abstract method\n\n    public abstract void withdraw(double amount);\n\n    // Non-abstract methods\n    public void deposit(double amount) {\n        // Code for depositing money\n    }\n\n    public void checkBalance() {\n        // Code for checking account balance\n    }\n}\nIn this example, the Account class is an abstract class because it contains an abstract method called withdraw(). An abstract method is a method that is declared but not implemented. This means that subclasses of the Account class must implement the withdraw() method in order to use it.",
    "crumbs": [
      "Java Principles",
      "Java SE: Abstraction"
    ]
  },
  {
    "objectID": "javase/se-principles-abstraction.html#overview",
    "href": "javase/se-principles-abstraction.html#overview",
    "title": "Java SE: Abstraction",
    "section": "",
    "text": "📘 Abstraction\nAbstraction is the process of focusing on the essential characteristics of an object, while ignoring the non-essential details.\n\n\nOne of the OOP concepts in Java is abstraction, which is the act of representing key features without including supporting information.\nIt is a method for developing a brand-new data type appropriate for a particular application.\nIt avoids providing extraneous or pointless facts and only displays the precise portion the user has requested. It is crucial since it prevents you from performing the same task more than once.\n\n\n\nJava SE Basic Principles OOP Abstraction\n\n\nHere is an example of abstraction in Java:\npublic abstract class Account {\n    // This is an abstract class because it has an abstract method\n\n    public abstract void withdraw(double amount);\n\n    // Non-abstract methods\n    public void deposit(double amount) {\n        // Code for depositing money\n    }\n\n    public void checkBalance() {\n        // Code for checking account balance\n    }\n}\nIn this example, the Account class is an abstract class because it contains an abstract method called withdraw(). An abstract method is a method that is declared but not implemented. This means that subclasses of the Account class must implement the withdraw() method in order to use it.",
    "crumbs": [
      "Java Principles",
      "Java SE: Abstraction"
    ]
  },
  {
    "objectID": "javase/se-principles-abstraction.html#abstract-class-and-interface",
    "href": "javase/se-principles-abstraction.html#abstract-class-and-interface",
    "title": "Java SE: Abstraction",
    "section": "2 Abstract class and Interface",
    "text": "2 Abstract class and Interface\nAbstraction is an important concept in object-oriented programming because it allows developers to create complex systems by building upon simpler components.\nThis makes it possible to manage large and complex code bases without becoming overwhelmed by the details.\nIn other words, abstraction means representing the essential features of an object without including the non-essential details. In Java, abstraction is achieved through the use of abstract classes and interfaces.\n\n\n\n\n\n\nNote\n\n\n\n📘 How abstraction is done\nIn Java, abstraction is achieved through the use of abstract classes and interfaces.\n\n\n\nAn abstract class is a class that contains one or more abstract methods. An abstract method is a method that is declared but not implemented. This means that subclasses of the abstract class must implement the abstract methods in order to use them.\nHere is an example of an abstract class in Java:\npublic abstract class Shape {\n    // This is an abstract class because it has an abstract method\n\n    public abstract double getArea();\n\n    // Non-abstract methods\n    public void draw() {\n        // Code for drawing the shape\n    }\n\n    public void move(int x, int y) {\n        // Code for moving the shape\n    }\n}\nIn this example, the Shape class is an abstract class because it contains an abstract method called getArea(). Subclasses of the Shape class, such as Circle or Rectangle, must implement the getArea() method in order to use it. This allows each subclass to provide its own implementation of the getArea() method, based on its specific characteristics.\nInterfaces are another way to achieve abstraction in Java. An interface is a collection of abstract methods and constant variables. A class that implements an interface must implement all of the abstract methods and constant variables defined in the interface.\nHere is an example of an interface in Java:\npublic interface Shape {\n    // This is an interface because it has only abstract methods\n\n    double getArea();\n\n    void draw();\n\n    void move(int x, int y);\n\n    // Constant variable\n    int MAX_SIZE = 100;\n}\nIn this example, the Shape interface defines three abstract methods and one constant variable. Any class that implements the Shape interface must implement all of the abstract methods and provide a value for the constant variable. This allows the class to define its own implementation of the abstract methods, based on its specific characteristics.\nHere is an example of how to implement the Shape interface in Java with Circle class:\npublic class Circle implements Shape {\n    // Private instance variable\n    private double radius;\n\n    // Constructor\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public double getArea() {\n        return Math.PI * radius * radius;\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public void draw() {\n        // Code for drawing the circle\n    }\n\n    // Implementation of abstract method from Shape interface\n    @Override\n    public void move(int x, int y) {\n        // Code for moving the circle\n    }\n}\nIn this example, the Circle class implements the Shape interface. This means that the Circle class must implement all of the abstract methods defined in the Shape interface. The Circle class also has a private instance variable called radius, which is used to store the radius of the circle.\nThe Circle class provides its own implementation of the getArea() method, which calculates the area of the circle based on its radius. It also provides its own implementation of the draw() and move() methods, which are used to draw and move the circle on the screen.\nOverall, this example shows how to implement an interface in Java. By implementing the Shape interface, the Circle class can provide its own implementation of the abstract methods defined in the interface, based on its specific characteristics.",
    "crumbs": [
      "Java Principles",
      "Java SE: Abstraction"
    ]
  },
  {
    "objectID": "javase/se-principles-abstraction.html#conclusion",
    "href": "javase/se-principles-abstraction.html#conclusion",
    "title": "Java SE: Abstraction",
    "section": "3 Conclusion",
    "text": "3 Conclusion\nOverall, abstraction is a powerful concept that allows developers to create complex systems by building upon simpler components. It helps to manage the complexity of large code bases by focusing on the essential features of objects, while ignoring the non-essential details.",
    "crumbs": [
      "Java Principles",
      "Java SE: Abstraction"
    ]
  },
  {
    "objectID": "javase/se-concepts-tdd.html",
    "href": "javase/se-concepts-tdd.html",
    "title": "Java SE: JUnit and TDD",
    "section": "",
    "text": "📘 JUnit\nJUnit is a unit testing framework for the Java programming language. It is used to write and run repeatable tests for Java code. JUnit provides a set of annotations and assertions that make it easy to write and run tests, as well as a simple framework for organizing and running tests.",
    "crumbs": [
      "Java Create Project",
      "Java SE: JUnit and TDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-tdd.html#junit-unit-test",
    "href": "javase/se-concepts-tdd.html#junit-unit-test",
    "title": "Java SE: JUnit and TDD",
    "section": "1 JUnit: unit test",
    "text": "1 JUnit: unit test\n\n\n\nJUnit 5\n\n\nUnit tests are the smallest elements in the test automation process. With the help of unit tests, the developer can check the business logic of any class. So JUnit plays a vital role in the development of a test-driven development framework.\n\n\nLink: Junit and User guide\n\n\nMyFirstJUnitJupiterTests.java\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport example.util.Calculator;\nimport org.junit.jupiter.api.Test;\n\nclass MyFirstJUnitJupiterTests {\n\n    private final Calculator calculator = new Calculator();\n\n    @Test\n    void addition() {\n        assertEquals(2, calculator.add(1, 1));\n    }\n\n}\n\n\n\nThe following example provides a glimpse at the minimum requirements for writing a test in JUnit Jupiter. Subsequent sections of this chapter will provide further details on all available features.",
    "crumbs": [
      "Java Create Project",
      "Java SE: JUnit and TDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-tdd.html#tdd",
    "href": "javase/se-concepts-tdd.html#tdd",
    "title": "Java SE: JUnit and TDD",
    "section": "2 TDD",
    "text": "2 TDD\nTest-driven development is a development technique where the developer must first write a test that fails before writing a new functional code&lt;. It ensures a proven way to ensure effective unit testing; however, it does not replace traditional testing. We believe that TDD is an excellent practice that all software developers should consider during the development process.\nSteps for the same are given below:\n\nFirstly, add a test.\nRun all the tests and see if any new test fails.\nUpdate the code to make it pass the new tests.\nRerun the test and if they fail, then debug the code again and fix any related error. Rinse and repeat.",
    "crumbs": [
      "Java Create Project",
      "Java SE: JUnit and TDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-tdd.html#static-vs.-non-static",
    "href": "javase/se-concepts-tdd.html#static-vs.-non-static",
    "title": "Java SE: JUnit and TDD",
    "section": "3 static vs. non-static",
    "text": "3 static vs. non-static\n\n3.1 Pros & cons usage static methods\n\n\n\n\n\n\n\nPros of making a method static\nCons of making a method static\n\n\n\n\nCan be called directly on the class, without needing to create an instance\nCannot access non-static fields and methods of the class\n\n\nCan be used as utility methods that don’t depend on the state of an object\nCan only work with the parameters passed to it and not use information unique to each object or instance\n\n\nCan be used to access only static variables and methods, making it more efficient\nCan be challenging to make sure all instances of a class are modified consistently when using static methods\n\n\n\n\n\n3.2 Pros & cons usage non-static methods\n\n\n\n\n\n\n\nPros of making a method non-static\nCons of making a method non-static\n\n\n\n\nCan access both static and non-static fields and methods of the class, allowing it to use the state of an object to determine its behavior\nCan only be called on an instance of the class, so you need to create an object of a class before using the method\n\n\nAre associated with an instance of the class, so they can use the information that is unique to each object\nCan cause confusion when working with non-static methods because it could be called on different instances, which could cause unexpected behavior\n\n\nObject-oriented design principles promote the use of non-static methods because they can be overridden by subclasses to change their behavior",
    "crumbs": [
      "Java Create Project",
      "Java SE: JUnit and TDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-tdd.html#example-test",
    "href": "javase/se-concepts-tdd.html#example-test",
    "title": "Java SE: JUnit and TDD",
    "section": "4 Example: @Test",
    "text": "4 Example: @Test\nFirst, to configure support for JUnit Jupiter based tests, configure test scoped dependencies on theJUnit Jupiter API and the JUnit Jupiter TestEngine implementation similar to the following.\n\n\npom.xml\n\n&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n      &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n      &lt;version&gt;5.9.1&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n\n\nUnlike previous versions of JUnit, JUnit 5 is composed of several different modules from three different sub-projects.\nJUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage\n\nJUnit 5 requires Java 8 (or higher) at runtime. However, you can still test code that has been compiled with previous versions of the JDK.\n\nSecond, we would write a test for the add method, which should take two numbers as arguments and return their sum. Here is an example of how this test might look using JUnit:\n\n\nMyFirstJUnitJupiterTests.java\n\nimport org.junit.jupiter.api.Test;\npublic class CalculatorTest {\n\n  @Test\n  public void testAdd() {\n    Calculator calc = new Calculator();\n    double result = calc.add(2, 3);\n    assertEquals(5, result, 0);\n  }\n\n}\n\n\n\nHere is an example of how TDD could be applied in a Java project using JUnit. Let’s say we are building a class that represents a simple calculator.\nNext, we would run the test to see if it fails. Since we have not yet implemented the add method, the test should fail with a message indicating that the add method is not yet implemented.\nNext, we would write the code for the add method. Here is an example of how this method might look:\n\n\nMyFirstJUnitJupiterTests.java\n\npublic class Calculator {\n\n  public double add(double a, double b) {\n    return a + b;\n  }\n\n}\n\n\n\nWe want the calculator to have methods for adding, subtracting, multiplying, and dividing two numbers.\nFinally, we would run the test again to ensure that it passes. If the test passes, we know that the add method is working correctly and we can move on to the next feature. We would repeat this process for each of the calculator’s methods, writing a test for each one, implementing the code, and then running the test to ensure it passes.\nThis is just one example of how TDD can be applied in a Java project using JUnit. There are many other ways to approach TDD, and the specific steps and details will vary depending on the project and the requirements.",
    "crumbs": [
      "Java Create Project",
      "Java SE: JUnit and TDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-tdd.html#most-popular-asserts",
    "href": "javase/se-concepts-tdd.html#most-popular-asserts",
    "title": "Java SE: JUnit and TDD",
    "section": "5 Most popular asserts",
    "text": "5 Most popular asserts\nAssertions is a collection of utility methods that support asserting conditions in tests.\n\n\nUnless otherwise noted, a failed assertion will throw an AssertionFailedError or a subclass thereof.\n\n\nMyFirstJUnitJupiterTests.java\n\n@API(status=STABLE, since=\"5.0\")\npublic final class Assertions\nextends Object\n\nAssertions 5.8.2\n\nMost Pouplar Asserts: description\n\n\n\n\n\n\n\nNumber\nAssert\nDescription\n\n\n\n\n1\nassertEquals(expected, actual)\nTests that two values are equal.\n\n\n2\nassertTrue(condition)\nTests that a condition is true.\n\n\n3\nassertFalse(condition)\nTests that a condition is false.\n\n\n4\nassertNotNull(object)\nTests that an object is not null.\n\n\n5\nassertNull(object)\nTests that an object is null.\n\n\n6\nassertArrayEquals(expected, actual)\nTests that two arrays are equal.\n\n\n7\nassertSame(expected, actual)\nTests that two references refer to the same object.\n\n\n8\nassertNotSame(expected, actual)\nTests that two references don’t refer to the same object.\n\n\n9\nassertAll(executables)\nAllows to group several assertions and execute them all.\n\n\n10\nassertThrows(exceptionType, executable)\nTests that a specific exception is thrown.\n\n\n\n\n\nMost Pouplar Asserts: code\n\n\n\n\n\n\nNumber\nExample Code\n\n\n\n\n1\nassertEquals(5, add(2,3));\n\n\n2\nassertTrue(checkRole(\"admin\"));\n\n\n3\nassertFalse(checkRole(\"user\"));\n\n\n4\nassertNotNull(new Object());\n\n\n5\nassertNull(null);\n\n\n6\nassertArrayEquals(new int[]{1,2,3}, new int[]{1,2,3});\n\n\n7\nObject obj = new Object(); assertSame(obj, obj);\n\n\n8\nObject obj1 = new Object(); Object obj2 = new Object(); assertNotSame(obj1, obj2);\n\n\n9\nassertAll(\"Person properties\", () -&gt; assertEquals(\"John\", person.getFirstName()), () -&gt; assertEquals(\"Doe\", person.getLastName()));\n\n\n10\nassertThrows(IllegalArgumentException.class, () -&gt; { Integer.parseInt(\"Not a number\"); });",
    "crumbs": [
      "Java Create Project",
      "Java SE: JUnit and TDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-tdd.html#naming-the-test-class",
    "href": "javase/se-concepts-tdd.html#naming-the-test-class",
    "title": "Java SE: JUnit and TDD",
    "section": "6 Naming the test class",
    "text": "6 Naming the test class\nWe use common conventions in naming the test class. Let’s start with the name of the class which is being tested and assume the name of that class is Student. In that case, the name of the test class should be StudentTest. We have to append Test to it. The same naming convention is used in the case of methods. If there is a method DisplayStudentAddress(), then the name of the method in testing should be testDisplayStudentAddress().\n\n\n\nNaming in Production\nNaming in Testing\n\n\n\n\nStudent\nStudentTest\n\n\nDisplayStudentAddress()\ntestDisplayStudentAddress()",
    "crumbs": [
      "Java Create Project",
      "Java SE: JUnit and TDD"
    ]
  },
  {
    "objectID": "javase/se-concepts-package.html",
    "href": "javase/se-concepts-package.html",
    "title": "Java SE: Packages",
    "section": "",
    "text": "📘 Design-patterns\nIn Java, a package is a collection of related classes and interfaces that provide a higher-level abstraction for organizing and modularizing your code.\nPackages allow you to group similar classes and interfaces together, and to provide a convenient namespace for accessing those classes and interfaces from other parts of your program.\n\n\nWhen you create a new class or interface in Java, you can place it in a package by using the package keyword at the top of the file, followed by the name of the package.\n\n\nExample.java\n\npackage com.example;\n\npublic class Example {\n    // Class code goes here...\n}\n\n\n\nFor example, the following code shows how to create a new class called Example and place it in the com.example package\nBy placing the Example class in the com.example package, you can access the class from other parts of your program by using the fully-qualified class name, which includes the package name as well as the class name.\nFor example, the following code shows how to use the Example class from within another class called Main:\n\n\nMain.java\n\npublic class Main {\n    public static void main(String[] args) {\n        // Use fully-qualified class name to access Example class\n        com.example.Example example = new com.example.Example();\n    }\n}\n\n\n\nIn this example, the Main class uses the com.example.Example class by specifying the fully-qualified class name, which includes the package name as well as the class name. This allows the Main class to access the Example class from within the com.example package.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Packages"
    ]
  },
  {
    "objectID": "javase/se-concepts-package.html#overview",
    "href": "javase/se-concepts-package.html#overview",
    "title": "Java SE: Packages",
    "section": "",
    "text": "📘 Design-patterns\nIn Java, a package is a collection of related classes and interfaces that provide a higher-level abstraction for organizing and modularizing your code.\nPackages allow you to group similar classes and interfaces together, and to provide a convenient namespace for accessing those classes and interfaces from other parts of your program.\n\n\nWhen you create a new class or interface in Java, you can place it in a package by using the package keyword at the top of the file, followed by the name of the package.\n\n\nExample.java\n\npackage com.example;\n\npublic class Example {\n    // Class code goes here...\n}\n\n\n\nFor example, the following code shows how to create a new class called Example and place it in the com.example package\nBy placing the Example class in the com.example package, you can access the class from other parts of your program by using the fully-qualified class name, which includes the package name as well as the class name.\nFor example, the following code shows how to use the Example class from within another class called Main:\n\n\nMain.java\n\npublic class Main {\n    public static void main(String[] args) {\n        // Use fully-qualified class name to access Example class\n        com.example.Example example = new com.example.Example();\n    }\n}\n\n\n\nIn this example, the Main class uses the com.example.Example class by specifying the fully-qualified class name, which includes the package name as well as the class name. This allows the Main class to access the Example class from within the com.example package.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Packages"
    ]
  },
  {
    "objectID": "javase/se-concepts-package.html#package-in-java-se-or-java-ee-is-not-similiar",
    "href": "javase/se-concepts-package.html#package-in-java-se-or-java-ee-is-not-similiar",
    "title": "Java SE: Packages",
    "section": "2 Package in Java SE or Java EE is not similiar",
    "text": "2 Package in Java SE or Java EE is not similiar\n\n\n\n\n\n\nImportant\n\n\n\nThe package that a class is placed in can be an important factor in how the framework resolves requests. This is because the Spring Framework uses the package structure of a project to help determine the path of a request, and to map the request to the appropriate controller or handler.\n\n\nFor example, consider a Spring MVC application that contains a com.example.web package, which contains a HomeController class that is used to handle requests to the application’s home page. In this case, the HomeController class is placed in the com.example.web package, which means that the path of a request to the home page would include the package name as part of the URL.\nFor instance, if the application’s base URL is http://localhost:8080, then a request to the home page might have a URL like the following:\nhttp://localhost:8080/com.example.web/home\nIn this case, the com.example.web package is part of the path that resolves the request to the HomeController class, which is responsible for handling the request and generating a response.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Packages"
    ]
  },
  {
    "objectID": "javase/se-concepts-package.html#conclusion",
    "href": "javase/se-concepts-package.html#conclusion",
    "title": "Java SE: Packages",
    "section": "3 Conclusion",
    "text": "3 Conclusion\nOverall, packages are an important concept in Java, and can help to improve the modularity, organization, and maintainability of your code. By grouping related classes and interfaces together into packages, you can provide a convenient namespace for accessing those classes and interfaces, and you can better manage the dependencies between different parts of your program.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Packages"
    ]
  },
  {
    "objectID": "javase/selab3-3.html",
    "href": "javase/selab3-3.html",
    "title": "Lab#SE03-3: Library/Book, Expand Model",
    "section": "",
    "text": "📘 Linux Lab#SE03-3: LibraryProject Expand Model\nIn LibraryProject, the User and Staff classes could have different operations that they are authorize/able to perform.\nThe User class could have the following operations:\n\nSearch for books\nBorrow a book\nReturn a book\nCheck the status of borrowed books\nUpdate personal information\n\nThe Staff class could have the following operations:\n\nAdd a new book\nRemove a book\nUpdate the book details\nRegister a new user\nRemove a user\nUpdate the user details\nGenerate reports on library operations\n\nTo implement these operations, we could define three separate interfaces:\n\nUserOperations\nStaffOperations\nGeneralOpeations",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-3: Library/Book, Expand Model"
    ]
  },
  {
    "objectID": "javase/selab3-3.html#interfaces",
    "href": "javase/selab3-3.html#interfaces",
    "title": "Lab#SE03-3: Library/Book, Expand Model",
    "section": "1 Interfaces",
    "text": "1 Interfaces\nThe three interfaces GeneralOperations, UserOperations, and StaffOperations provide a clear separation of concerns and responsibilities within the library management system.\n\n\nIn a library project, having separate interfaces for different types of operations will help to keep the code organized and maintainable.\n\nGeneralOperations interface provides methods that are commonly used by both users and staff, such as searching for books and creating an account.\n\n\nUserOperations interface includes methods that are specific to users, such as updating personal information, borrowing and returning books, and checking their borrowed books.\n\n\nStaffOperations interface includes methods that are specific to staff members, such as adding, removing, and updating book details, as well as registering and updating user details and generating reports.\n\nBy separating these different functionalities into interfaces, it becomes easier to implement and maintain the system.\n\n\nFor example, a developer could create different classes that implement the UserOperations interface, such as Student or Faculty, which will all have their own implementation of the methods defined in the interface.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-3: Library/Book, Expand Model"
    ]
  },
  {
    "objectID": "javase/selab3-3.html#abstract-class",
    "href": "javase/selab3-3.html#abstract-class",
    "title": "Lab#SE03-3: Library/Book, Expand Model",
    "section": "2 Abstract class",
    "text": "2 Abstract class\nFinally, the LibraryMember abstract class is a parent class for users and staff members, which includes common fields such as id, address, and phoneNumber.\nBy defining these fields in an abstract class, it allows for different types of users and staff members to inherit them and avoid duplication of code.\npublic interface GeneralOperations {\n    public void searchBooks(String query);\n    public void createAccount();\n    \n}\n\npublic interface UserOperations {\n    public void updatePersonalInformation();\n    public void borrowBook(Book booLab#SE00-3: Library Modelk);\n    public void returnBook(Book book);\n    public void checkBorrowedBooks();\n}\n\npublic interface StaffOperations {\n    public void addBook(Book book);\n    public void removeBook(Book book);\n    public void updateBookDetails(Book book);\n    public void registerUser(User user);\n    public void removeUser(User user);\n    public void updateUserDetails(User user);\n    public void generateReports();\n}\n\n\nUsing interfaces and abstract classes in this way can make the code more modular and easier to maintain, as it allows for greater flexibility and extensibility.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-3: Library/Book, Expand Model"
    ]
  },
  {
    "objectID": "javase/selab3-3.html#uml",
    "href": "javase/selab3-3.html#uml",
    "title": "Lab#SE03-3: Library/Book, Expand Model",
    "section": "3 UML",
    "text": "3 UML\n\n3.1 Previous UML proposals\nThe two UML diagrams describe the core features of a libraryProject, specifically the use cases for borrowing and issuing books, as well as the roles and responsibilities of users and librarians/staff members.\n\nThe first diagram, Core features: borrow and issue, depicts the interaction between the user and the system, as well as the system and the librarian:\n\n\nCore features: borrow and issue\n\n\nThe second diagram, Core features: user and librarian (staff), expands on the roles and responsibilities of users and librarians/staff members.\n\n\nCore features: user and librarian (staf)\n\n\n\n3.2 Solving discussion: actors UML\nTHE UML diagram describes our LibraryProject that includes three interfaces: GeneralOperations, UserOperations, and StaffOperations.\n\nGeneralOperations provides two methods, createAccount() and searchBooks(String query), that allow users to create an account and search for books.\nUserOperations provides four methods that allow users to update their personal information, borrow and return books, and check the books they have borrowed.\nStaffOperations provides several methods that allow staff to add, remove, and update books, as well as register, remove, and update user details and generate reports.\n\n\n\n\n\n\n\n\nclassDiagram\n\n class GeneralOperations {\n   &lt;&lt;interface&gt;&gt;\n    +createAccount(): void\n    +searchBooks(query: String): void \n  }\n\n   class UserOperations {\n     &lt;&lt;interface&gt;&gt;\n    +borrowBook(book: Book): void\n    +returnBook(book: Book): void\n    +checkBorrowedBooks(): void\n  }\n\n  class LibraryMember {\n    &lt;&lt;abstract&gt;&gt;\n    +id: String\n    +address: String\n    +phoneNumber: String\n  }\n\n  class Member {\n    &lt;&lt;abstract&gt;&gt;\n    +name: String\n    +surname: String\n    nationality: String\n    +birthdate: Date\n  \n  }\n\n class StaffOperations {\n     &lt;&lt;interface&gt;&gt;\n    +addBook(book: Book): void\n    +removeBook(book: Book): void\n    +updateBookDetails(book: Book): void\n    +registerUser(user: User): void\n    +removeUser(user: User): void\n    +updateUserDetails(user: User): void\n    +generateReports(): void\n  }\n\n  class User {\n    -libraryCardNumber: String\n    -borrowedBooks: ArrayList&lt;Book&gt;\n    +User()\n  }\n\n   class Author {\n    -deathdate: Date\n    -books: Book\n    +author()\n  }\n  \n  \n  class Staff {\n    -staffId: String\n    -position: String\n    -registeredUsers: ArrayList&lt;User&gt;\n    -libraryBooks: ArrayList&lt;Book&gt;\n    +Staff()\n  }\n\n  class Book {\n    -title: String\n    -author: Author\n    -publisher: String\n    -year: int\n    -isbn: String\n    -status: String\n    +Book()\n    +getStatus(): String\n  }\n  \n  Author *-- Book\n  UserOperations &lt;|..  User \n  GeneralOperations &lt;|..  LibraryMember  \n  LibraryMember &lt;|.. User\n  LibraryMember &lt;|.. Staff\n  Member &lt;|.. Author\n  Member &lt;|.. LibraryMember\n  StaffOperations  &lt;|.. Staff\n\n\n\n\n\n\n\n\n\n\n\n3.3 Solving discussion: actors UML & core-model\n\n\n\nActors and core-model UML\n\n\n\n\nThe diagram also includes four classes: User, Author, Staff, and Book.\n\nUser represents a library member with a library card number and a list of borrowed books. Author represents the author of a book, with details including their name, nationality, and birth and death dates.\n\nStaff represents a staff member with a staff ID, position, and lists of registered users and library books. Book represents a book with details including its title, author, publisher, publication year, ISBN, and status.\n\n\n\n\n\nActors and core-model UML\n\n\n\n\n\n\n\n\n\nclassDiagram\n\n\n   class UserOperations {\n     &lt;&lt;interface&gt;&gt;\n    +borrowBook(book: Book): void\n    +returnBook(book: Book): void\n    +checkBorrowedBooks(): void\n  }\n\n  class Member {\n    &lt;&lt;abstract&gt;&gt;\n    +name: String\n    +surname: String\n    +nationality: String\n    +birthdate: Date\n    +abstract printData(): void\n    +calculateAge(): int\n  }\n\n  class User {\n    -email: String\n    -libraryCardNumber: String\n    -borrowedBooks: ArrayList&lt;Book&gt;\n    +user()\n  }\n\n\n class GeneralOperations {\n   &lt;&lt;interface&gt;&gt;\n    +createAccount(): void\n    +searchBooks(query: String): void \n  }\n\n   class Author {\n    -deathdate: Date\n    -books: List~Book~\n    +author()\n  }\n  \n  class Librarian {\n    -staffId: String\n    -position: String\n    -address: String\n    -phoneNumber: String\n    -salary: double\n    +librarian()\n  }\n\n\n    UserOperations &lt;|..  User\n    Member &lt;|.. User\n    Member &lt;|.. Author\n    Member &lt;|.. Librarian\n    GeneralOperations &lt;|..  User\n    GeneralOperations &lt;|..  Librarian",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-3: Library/Book, Expand Model"
    ]
  },
  {
    "objectID": "linux/lilab01-1.html",
    "href": "linux/lilab01-1.html",
    "title": "Linux Lab#LI01-1: Choose Linux",
    "section": "",
    "text": "📘 Linux Lab#LI01-1: Choose Linux\nThis lab may serve many purposes, and you need some idea of what you want to use your lab to achieve.\n\nIf you’re just exploring what’s possible on Linux, installing Linux Mint, CentOS or Ubuntu offers you a flexible and basic environment.\nYou may install OpenSuse for more concrete purposes and test these distributions on a spare computer, a Raspberry Pi, or as a virtual machine (VM) or container.\nIf you want your journey to begin at its destination, you can install Red Hat Enterprise Linux (RHEL) on a supported platform. This gets you started with enterprise-quality Linux, which means that once you perfect your setup, it’s ready to migrate into production.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI01-1: Choose Linux"
    ]
  },
  {
    "objectID": "linux/lilab03-1.html",
    "href": "linux/lilab03-1.html",
    "title": "Linux Lab#LI03-1: Manage users and groups",
    "section": "",
    "text": "📘 Linux Lab#LI03-1: Manage users and groups\n\nUse the /etc/skel directory to define profile settings before adding any user accounts.\nSet password and account expirations using the /etc/login.defs file before adding any user accounts. Use the following password requirements:\n\nPasswords should expire after 90 days, with a five-day warning period.\n\nUse the command line to create five user accounts to use in later activities. You will experiment with permissions and ownership by using these accounts. Give each user a unique name but set them all with the same password (for your own sanity).\nUse the command line to create five groups based on fictitious departments: sales, marketing, human resources, IT, engineering. Place one user from above into each group.\nDelegate the ability to reboot the system to only one user by using sudo.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI03-1: Manage users and groups"
    ]
  },
  {
    "objectID": "linux/linux-what-pipes.html",
    "href": "linux/linux-what-pipes.html",
    "title": "Linux: pipes",
    "section": "",
    "text": "📘 Linux\nA pipe is a command that allows you to redirect the output of one command as the input to another command.\nIt is represented by the vertical bar symbol |.",
    "crumbs": [
      "Linux: concepts",
      "Linux: pipes"
    ]
  },
  {
    "objectID": "linux/linux-what-pipes.html#introduction",
    "href": "linux/linux-what-pipes.html#introduction",
    "title": "Linux: pipes",
    "section": "1 Introduction",
    "text": "1 Introduction\nFor example, you can use the pipe command to list all the files in a directory, and then use the grep command to search for a specific string in those files:\nls | grep \"devtools\"\nThis will list all the files in the current directory and then search for the string “devtools” in the output of the ls command.\nYou can also use multiple pipes to chain together multiple commands. For example:\nls | grep \"devtools\" | sort\nThis will list all the files in the current directory, search for the string “devtools” in the output of the ls command, and then sort the output alphabetically.\n\n\n\npipe linux ls-grep-sort\n\n\n\n1.1 grep\ngrep searches for patterns in text. It stands for global regular expression print, and it allows you to search for specific patterns of characters in one or more files.\nYou can use grep to search for a specific word or phrase in a file, or you can use it to search for more complex patterns using regular expressions.\n\n\nHere are a few examples of how grep can be used:\n\n To search for a specific word in a file:\ngrep \"word\" file.txt\nTo search for a specific word in multiple files:\ngrep \"word\" file1.txt file2.txt file3.txt\nTo search for a word that starts with a specific letter:\ngrep \"^w\" file.txt\nTo search for a word that ends with a specific letter:\ngrep \"w$\" file.txt",
    "crumbs": [
      "Linux: concepts",
      "Linux: pipes"
    ]
  },
  {
    "objectID": "linux/linux-what-pipes.html#using-a-pipe",
    "href": "linux/linux-what-pipes.html#using-a-pipe",
    "title": "Linux: pipes",
    "section": "2 Using a pipe",
    "text": "2 Using a pipe\nExmaple from: Combining multiple commands\nAs we know, we may chaining pipes consecutively. We can for example send the output of wc directly to sort, and then the resulting output to head. This removes the need for any intermediate files.\nWe’ll start by using a pipe to send the output of wc to sort:\n\n\nwc and sort\n\n$ wc -l *.pdb | sort -n\n\n\n\noutput\n\n   9 methane.pdb\n  12 ethane.pdb\n  15 propane.pdb\n  20 cubane.pdb\n  21 pentane.pdb\n  30 octane.pdb\n 107 total\n\nWe can then send that output through another pipe, to head, so that the full pipeline becomes:\n\n\nwc and sort and head\n\n$ wc -l *.pdb | sort -n | head -n 1\n\n\n\noutput\n\n methane.pdb\n\nThe calculation is head of sort of line count of .pdb. The redirection and pipes used in the last few commands are illustrated below:\n\n\n\n$ wc -l *.pdb | sort -n | head -n 1\n\n\n\n2.1 wc, cat, head and sort\n\nwc counts lines, words, and characters in its inputs.\ncat displays the contents of its inputs.\nsort sorts its inputs.\nhead displays the first 10 lines of its input.\ntail displays the last 10 lines of its input.\ncommand &gt; [file] redirects a command’s output to a file (overwriting any existing content).\ncommand &gt;&gt; [file] appends a command’s output to a file.\n[first] | [second] is a pipeline: the output of the first command is used as the input to the second.\nThe best way to use the shell is to use pipes to combine simple single-purpose programs (filters).",
    "crumbs": [
      "Linux: concepts",
      "Linux: pipes"
    ]
  },
  {
    "objectID": "linux/lilab04-3.html",
    "href": "linux/lilab04-3.html",
    "title": "Linux Lab#LI04-3: Distribute the terminal app",
    "section": "",
    "text": "📘 Linux Lab#LI04-2: Distribute the terminal app\nTo create a terminal app using bash scripts, you will need to (from Lab#LI04-1 and Lab#LI04-2):\n\nMake the app available for others to use, either by distributing it as a package (such as a .deb or .rpm file) or by hosting it on a website or repository.\nProvide documentation and usage instructions for the app, so that users know how to use it effectively.",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI04-3: Distribute the terminal app"
    ]
  },
  {
    "objectID": "linux/lilab04-3.html#solving-discussion",
    "href": "linux/lilab04-3.html#solving-discussion",
    "title": "Linux Lab#LI04-3: Distribute the terminal app",
    "section": "1 Solving discussion",
    "text": "1 Solving discussion\nThere are several ways to distribute a Linux bash script, including using apt-get, snap, and zipping the script and distributing it that way. Here are some options:\n\napt-get: This is a package manager for Debian-based systems. You can create a package with your bash script and distribute it using apt-get. This option is suitable if you want to distribute your script to a large number of users.\nsnap: Snap is a universal Linux package manager that allows you to distribute your bash script as a snap package. This option is suitable if you want to distribute your script to users on different Linux distributions.\nZip file: You can zip your bash script and distribute it as a zip file. This is a simple option that is suitable for distributing your script to a small number of users.\nGithub: You can host your bash script on Github and share the link with your users. This option is suitable if you want to allow your users to easily download and update your script.\nWebsite: You can host your bash script on a website and provide a link for users to download it. This option is suitable if you want to make your script easily accessible to a large number of users.\nVisual Code Extension: you can create an extension for Visual Code from your Linux bash script and upload to the marketplace. once your extension is published, users can install it by searching for it in the Visual Studio Code Extension Marketplace or by using the code –install-extension ext-name command in the terminal.\n\n\n\n\nfrom gitHub actions we may publish",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI04-3: Distribute the terminal app"
    ]
  },
  {
    "objectID": "linux/linux-what-sudo.html",
    "href": "linux/linux-what-sudo.html",
    "title": "Linux: su and sudo",
    "section": "",
    "text": "📘 Linux\nsu and sudo are two different commands in Linux that are used to execute commands with the privileges of another user.",
    "crumbs": [
      "Linux: concepts",
      "Linux: su and sudo"
    ]
  },
  {
    "objectID": "linux/linux-what-sudo.html#introduction",
    "href": "linux/linux-what-sudo.html#introduction",
    "title": "Linux: su and sudo",
    "section": "1 Introduction",
    "text": "1 Introduction\nBoth su and sudo are useful tools for managing and interacting with a Linux system, but they have different uses and implications. su allows you to switch to another user account and operate as that user, while sudo allows you to execute a single command with the privileges of another user without switching to that user’s account.\n\nsu stands for switch user, and it allows you to switch to another user account and execute commands with that user’s privileges. For example, if you are currently logged in as a normal user and you want to run a command as the root user, you can use the su command to switch to the root user and then run the command.\nsudo stands for superuser do, and it allows you to execute a single command with the privileges of another user, usually the root user. It is often used to execute commands that require administrative privileges, such as installing software or making system-wide configuration changes.\n\nBut in Linux Mint sudo is often considered to be a better alternative to su for several reasons, it allows you to execute a single command with administrative privileges, logs all command executions, allows for a more fine-grained control over who can execute which commands, prompts for the user’s password before execution, and is more widely used and supported in the Linux community.",
    "crumbs": [
      "Linux: concepts",
      "Linux: su and sudo"
    ]
  },
  {
    "objectID": "linux/linux-what-sudo.html#sudo--i",
    "href": "linux/linux-what-sudo.html#sudo--i",
    "title": "Linux: su and sudo",
    "section": "2 sudo -i",
    "text": "2 sudo -i\nThe sudo -i, The -i flag stands for initialize. command is used to execute a command or start a shell session as another user, usually the root user, with that user’s environment and privileges.\n\nsudo -i causes the command or shell session to be executed as if the target user had logged in directly. This means that the target user’s environment variables, shell settings, and other configuration options will be applied to the command or shell session.\n\n\n\n\nsudo -i",
    "crumbs": [
      "Linux: concepts",
      "Linux: su and sudo"
    ]
  },
  {
    "objectID": "linux/linux-what-sudo.html#sudo-apt-get-update",
    "href": "linux/linux-what-sudo.html#sudo-apt-get-update",
    "title": "Linux: su and sudo",
    "section": "3 sudo apt-get update",
    "text": "3 sudo apt-get update\napt-get is a command line interface for retrieval of packages and information about them from authenticated sources and for installation, upgrade and removal of packages together with their dependencies.\n\n\n\nsudo apt-get update",
    "crumbs": [
      "Linux: concepts",
      "Linux: su and sudo"
    ]
  },
  {
    "objectID": "linux/linux-what-sudo.html#adduser",
    "href": "linux/linux-what-sudo.html#adduser",
    "title": "Linux: su and sudo",
    "section": "4 adduser",
    "text": "4 adduser\nadduser: This command is used to add a new user to the system.\n\nFor example, to add a new user with the username alex, you can use the command sudo adduser alex.\nsudo userdel alex, the userdel command is used to delete a user account and the user’s home directory from the system.\nsudo adduser alex --shell /bin/bash --gid 0, to add a new user named alex with root privileges using sudo adduser.\nTo list all users on a Linux system, you can use the cat command to display the contents of the /etc/passwd file. The /etc/passwd file contains information about all the users on the system, including their username, user ID (UID), and home directory: cat /etc/passwd\nAlternatively, you can use the cut command to extract the username from each line of the /etc/passwd file: cut -d: -f1 /etc/passwd.\n\n\n\n\nsudo adduser newuser && deluser 1/3\n\n\n\n\n\nsudo adduser newuser && deluser 2/3\n\n\n\n\n\nsudo adduser newuser && deluser 3/3",
    "crumbs": [
      "Linux: concepts",
      "Linux: su and sudo"
    ]
  },
  {
    "objectID": "linux/linux-distros-opensuse.html#the-opensuse-ecosystem",
    "href": "linux/linux-distros-opensuse.html#the-opensuse-ecosystem",
    "title": "Linux Distros: openSuse",
    "section": "1.1 The OpenSUSE Ecosystem",
    "text": "1.1 The OpenSUSE Ecosystem\nOpenSUSE is known for its vibrant and supportive community, contributing to the development and improvement of the operating system.\nThe distribution is available in two main flavors:\n\nLeap, providing a stable and enterprise-ready platform,\nand Tumbleweed, offering a rolling release model for cutting-edge updates. Users can choose the edition that best suits their needs, ensuring a tailored experience.",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: openSuse"
    ]
  },
  {
    "objectID": "linux/lilab03-2.html",
    "href": "linux/lilab03-2.html",
    "title": "Linux Lab#LI03-2: Manage files",
    "section": "",
    "text": "📘 Linux Lab#LI03-2: Manage files\n\nCreate directories for each department (sales, marketing, human resources, IT, engineering) at the root of the filesystem.\nConfigure standard Linux permissions and ownership such that each group only has access to its own departmental directories. For example, the sales group has access to the /sales directory but not to other departments’ directories.\n\nAfter completing and testing the previous step, configure ACL permissions to permit the marketing department to have read access to the /sales directory.\nUse ACL permissions to permit one user account to have read permission to the /IT directory.\nConfigure SGID and the sticky bit on the /marketing directory.\n\nEnsure that two of your existing user accounts are now members of the marketing group.\n\nUse each account to create one file in the /marketing directory.\nTest whether one of those accounts can delete the file created by the other account (they should not be able to, due to the sticky bit).\n\nCreate a file called unchangeable.txt, set the immutable attribute on it, and then delete the file.\nConfigure file links.\n\nCreate a file named LinksTest.txt in the /opt directory, and then create a hard link to it in the /tmp directory. Use Vim to add a line of text to the file through the /opt/LinksTest.txt path, and then display the file’s contents by using the /tmp/LinksTest.txt file path.\nCreate a symlink to /tmp/LinksTest.txt in the root user’s home directory and view the file’s contents.\nDelete the /tmp/LinksTest.txt file, and then attempt to view the file’s contents through the /root/LinksTest.txt symlink.\n\nCreate 10 files in the /tmp directory, and then use tar and gzip to bundle and compress the files.\n\nDelete the 10 original files and then restore them from your tarball.\n\nUse the find command to search for the test files in the department directories. Do this task first as the root user, then as a user who is a member of the group that owns the directory, and finally as a user who is not a member of the group that owns the directory.\nAt the command line only, practice mounting and unmounting ISO images.\nCopy a file from the ISO to a directory on the Linux installation.\nConfigure LVM:\n\nDesignate two sections of 50MB each of your remaining empty hard disk drive space to be physical volumes (PVs) used by LVM.\nCombine those to PVs into a single volume group, and then configure a single logical volume (LV) that is 100MB.\nCreate a directory to serve as a mount point for this LV and add an entry to the /etc/fstab so that it is mounted during the system bootup.\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI03-2: Manage files"
    ]
  },
  {
    "objectID": "linux/lilab04-2.html",
    "href": "linux/lilab04-2.html",
    "title": "Linux Lab#LI04-2: Bash scripts as terminal tool",
    "section": "",
    "text": "📘 Linux Lab#LI04-2: Bash scripts as terminal tool\nTo create a terminal app using bash scripts, you will need to (from Lab#LI04-1):\n\nPackage the scripts into a single executable file that can be easily run from the terminal. This may involve creating a wrapper script that calls the other scripts in the correct order.",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI04-2: Bash scripts as terminal tool"
    ]
  },
  {
    "objectID": "linux/lilab04-2.html#solving-discussion",
    "href": "linux/lilab04-2.html#solving-discussion",
    "title": "Linux Lab#LI04-2: Bash scripts as terminal tool",
    "section": "1 Solving discussion",
    "text": "1 Solving discussion\nTo create a terminal app for Linux, you can use a bash script. Here are the steps to create the app with the three basic (help, update, show) options:\n\nCreate a bash script file with the name qtool (without any extension).\nAdd the following lines at the beginning of the script to make it executable:\n\n#!/bin/bash\n\nAdd the following lines to create the “help” option:\n\nif [ \"$1\" == \"help\" ]\nthen\n    echo \"qmdtool is a tool for managing Quarto markdown files (qmd).\"\n    echo \"Available options:\"\n    echo \"  help    Display this help message\"\n    echo \"  update  Update the qmd files in the current directory\"\n    echo \"  show    Display the content of the qmd files in the current directory\"\n    exit 0\nfi\n\nAdd the following lines to create the “update” option:\n\nif [ \"$1\" == \"update\" ]\nthen\n    echo \"Updating qmd files in the current directory...\"\n    # Add code here to update the qmd files\n    exit 0\nfi\n\nAdd the following lines to create the “show” option:\n\nif [ \"$1\" == \"show\" ]\nthen\n    echo \"Displaying content of qmd files in the current directory...\"\n    # Add code here to display the content of the qmd files\n    exit 0\nfi\n\nSave the script and make it executable with the following command:\n\nchmod +x qtool\n\nNow you can use the app by running the following command:\n\n./qtool [option]\nReplace [option] with one of the available options: “help”, “update”, or “show”. For example, to display the help message, you can run the following command:\n./qtool help",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI04-2: Bash scripts as terminal tool"
    ]
  },
  {
    "objectID": "linux/linux-what-basics.html",
    "href": "linux/linux-what-basics.html",
    "title": "Linux: basic concepts",
    "section": "",
    "text": "📘 Linux\nLinux is a free and open-source operating system. It is a Unix-like operating system that is based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is commonly used in web servers, smartphones, and other devices where reliability, security, and performance are important.",
    "crumbs": [
      "Linux: concepts",
      "Linux: basic concepts"
    ]
  },
  {
    "objectID": "linux/linux-what-basics.html#bash",
    "href": "linux/linux-what-basics.html#bash",
    "title": "Linux: basic concepts",
    "section": "1 Bash",
    "text": "1 Bash\nBash is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell. First released in 1989, it has been used as the default login shell for most Linux distributions.\nMore on Bass, next article",
    "crumbs": [
      "Linux: concepts",
      "Linux: basic concepts"
    ]
  },
  {
    "objectID": "linux/linux-what-basics.html#basic-commands",
    "href": "linux/linux-what-basics.html#basic-commands",
    "title": "Linux: basic concepts",
    "section": "2 Basic commands",
    "text": "2 Basic commands\nHere are some basic terminal commands that can be used in Linux Mint:\n\npwd: Print the name of the current working directory (i.e., show the full path to the current directory)\nls: List the contents of the current directory\ncd: Change the current working directory\nmkdir: Create a new directory\nrmdir: Remove an empty directory\ntouch: Create a new file or update the timestamp of an existing file\ncp: Copy a file or directory\nmv: Move or rename a file or directory\nrm: Remove a file\nman: Display the manual page for a command\nsudo: Run a command with superuser privileges\napt-get is a command-line utility for managing packages in the Linux operating system. It is used to install, update, and remove packages from the system. apt-get is part of the Advanced Packaging Tool (APT) system, which is used to manage software packages in the Debian and Ubuntu Linux distributions.\n\nThese are just a few examples of the many commands that are available in Linux. To learn more about a specific command, you can use the man command to view its manual page.\nFor example, to learn more about the ls command, you could type man ls in the terminal.",
    "crumbs": [
      "Linux: concepts",
      "Linux: basic concepts"
    ]
  },
  {
    "objectID": "linux/linux-what-basics.html#getting-software-wget-apt-get-etc",
    "href": "linux/linux-what-basics.html#getting-software-wget-apt-get-etc",
    "title": "Linux: basic concepts",
    "section": "3 Getting software: wget, apt-get, etc",
    "text": "3 Getting software: wget, apt-get, etc\n\nIn Linux, wget is a command-line utility that allows you to download files from the internet. It can be used to download files from HTTP, HTTPS, and FTP servers.\napt-get is a package manager for the Debian and Ubuntu Linux distributions. It allows you to install, update, and remove software packages from your system.\nsnap is a package manager developed by Canonical, the company behind the Ubuntu Linux distribution. It allows you to install and manage software packages in a consistent and secure way, and is designed to work across a wide range of Linux distributions.\nThere are other similar package managers in Linux, such as yum for Red Hat and CentOS, and dnf for Fedora. These package managers allow you to easily install, update, and remove software packages on your system.",
    "crumbs": [
      "Linux: concepts",
      "Linux: basic concepts"
    ]
  },
  {
    "objectID": "linux/linux-what-basics.html#chmod",
    "href": "linux/linux-what-basics.html#chmod",
    "title": "Linux: basic concepts",
    "section": "4 CHMOD",
    "text": "4 CHMOD\n\n\n\nLinux CHMOD cheat-sheet",
    "crumbs": [
      "Linux: concepts",
      "Linux: basic concepts"
    ]
  },
  {
    "objectID": "linux/linux-what-basics.html#cheat-sheet-linux-commands",
    "href": "linux/linux-what-basics.html#cheat-sheet-linux-commands",
    "title": "Linux: basic concepts",
    "section": "5 Cheat-sheet Linux Commands",
    "text": "5 Cheat-sheet Linux Commands\nThis cheat sheet presents a list of command-line executables that are frequently used by developers working on a computer running the Linux operating system. The commands are organized by category.\nLinux-Commands-cheat-sheet-Red-Hat-Developer\nThe $ symbol that proceeds commands in the examples represents the command line prompt\nLinux-Commands-cheat-sheet-Red-Hat-Developer",
    "crumbs": [
      "Linux: concepts",
      "Linux: basic concepts"
    ]
  },
  {
    "objectID": "linux/lilab03-3.html",
    "href": "linux/lilab03-3.html",
    "title": "Linux Lab#LI03-3: Manage software",
    "section": "",
    "text": "📘 Linux Lab#LI03-3: Manage software\n\nUse the rpm command to manage software:\n\nUse the rpm command to inventory all installed software and redirect this inventory list into a text file.\n\nInstall an RPM package by using the rpm command. For example, install the zsh package. Download the package if necessary.\nUse the rpm command to get info on the zsh package, and then use rpm to uninstall the package.\n\n\nUse the dnf command to manage software:\n\nInstall an RPM package with the dnf command. For example, install the ksh package.\nUse the dnf command to get info on the ksh package, and then use dnf to uninstall the package.\n\nFind and download software that you must compile. Go through the process of compiling the software. (GitLab, GitHub, and Sourceforge are popular development repositories.)\nDownload a piece of software that includes an MD5 checksum to verify its integrity. After the download, compare your MD5 results with the result on the website.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI03-3: Manage software"
    ]
  },
  {
    "objectID": "linux/linux-distros-redhat.html",
    "href": "linux/linux-distros-redhat.html",
    "title": "Linux Distros: Red Hat Enterprise",
    "section": "",
    "text": "📘 Red Hat Enterprise Linux (RHEL)\nRed Hat Enterprise Linux (RHEL) is the most developer friendly Linux ever with new developer-centric features like container tools, advanced language support, and application streams.\nRed Hat Enterprise Linux (RHEL):",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Red Hat Enterprise"
    ]
  },
  {
    "objectID": "linux/linux-distros-redhat.html#cheat-sheet",
    "href": "linux/linux-distros-redhat.html#cheat-sheet",
    "title": "Linux Distros: Red Hat Enterprise",
    "section": "1 Cheat-sheet",
    "text": "1 Cheat-sheet",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Red Hat Enterprise"
    ]
  },
  {
    "objectID": "linux/resources.html",
    "href": "linux/resources.html",
    "title": "Linux Resources",
    "section": "",
    "text": "Linux Resources",
    "crumbs": [
      "Linux readings",
      "Linux Resources"
    ]
  },
  {
    "objectID": "linux/resources.html#linux-webs",
    "href": "linux/resources.html#linux-webs",
    "title": "Linux Resources",
    "section": "1 Linux webs",
    "text": "1 Linux webs\n\nLinux and bash resources\n\n\n\n\n\n\nLink\nDescription\n\n\n\n\nAdvanced Linux Commands Cheat Sheet\nThis cheat sheet presents a collection of Linux commands and executables for developers who are using the Linux operating system in advanced programming scenarios. Commands are organized by category and each one is presented with syntax, an explanation of what it is used for, and an example.\n\n\nBash scripting cheatsheet\nBash scripting cheatsheet\n\n\nLearn X in Y minutes Where X=bash\nBash is a name of the unix shell, which was also distributed as the shell for the GNU operating system and as the default shell on most Linux distros. Nearly all examples below can be a part of a shell script or executed directly in the shell.",
    "crumbs": [
      "Linux readings",
      "Linux Resources"
    ]
  },
  {
    "objectID": "linux/resources.html#bash",
    "href": "linux/resources.html#bash",
    "title": "Linux Resources",
    "section": "2 Bash",
    "text": "2 Bash",
    "crumbs": [
      "Linux readings",
      "Linux Resources"
    ]
  },
  {
    "objectID": "linux/resources.html#bash-scripting",
    "href": "linux/resources.html#bash-scripting",
    "title": "Linux Resources",
    "section": "3 Bash scripting",
    "text": "3 Bash scripting\n\nThe Bash Guide, A quality-driven guide through the shell’s many features. The Bash Guide\nGreg’s Wiki: Bash Guide\nBash Guide for Beginners, Machtelt Garrels: Bash Guide for Beginners\nGNU Bash Reference Manual: Bash Features",
    "crumbs": [
      "Linux readings",
      "Linux Resources"
    ]
  },
  {
    "objectID": "linux/resources.html#bash-scripting-cheatsheet",
    "href": "linux/resources.html#bash-scripting-cheatsheet",
    "title": "Linux Resources",
    "section": "4 Bash scripting cheatsheet",
    "text": "4 Bash scripting cheatsheet",
    "crumbs": [
      "Linux readings",
      "Linux Resources"
    ]
  },
  {
    "objectID": "scrum/scrum-week10.html",
    "href": "scrum/scrum-week10.html",
    "title": "Week 10: Before SCRUM",
    "section": "",
    "text": "📘 Summary: SCRUM Week 10 - Before SCRUM\nBefore SCRUM, software development primarily followed methodologies like Waterfall, V-Model, Incremental Model, and Spiral Model, which had their advantages but lacked flexibility and early adaptability.\nThe Project Management Office (PMO) provided organizational standards.\nAgile principles evolved from Toyota’s manufacturing principles, Lean Manufacturing, Crystal Clear, and Refactoring. In the 1990s, Jeff Sutherland and Ken Schwaber independently developed SCRUM, formalizing roles and events.\nThe Agile Manifesto in 2001 marked a pivotal moment. SCRUM’s integration with Toyota Production System at Toyota Connected exemplifies its effectiveness in Lean Production. Embracing SCRUM requires understanding complexity, teamwork, and continual improvement. Agile isn’t a goal; it’s an outcome.",
    "crumbs": [
      "Weeks",
      "Week 10: Before SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week10.html#agile-and-managment-1945-2000",
    "href": "scrum/scrum-week10.html#agile-and-managment-1945-2000",
    "title": "Week 10: Before SCRUM",
    "section": "1.1 Agile and Managment 1945-2000",
    "text": "1.1 Agile and Managment 1945-2000\nBefore SCRUM, software development primarily followed methodologies like Waterfall, V-Model, Incremental Model, and Spiral Model:\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethodology\nDescription\nCharacteristics\nAdvantages\nDisadvantages\nYear Created\nDecades Most Used\n\n\n\n\nWaterfall Model\nLinear and sequential approach to software development.\nSequential phases: requirements, design, implementation, testing, deployment, and maintenance.\nEasy to understand, well-suited for small projects.\nLack of flexibility, late detection of errors.\n1950s\n1960s-1980s\n\n\nV-Model\nExtension of the Waterfall model emphasizing verification and validation at each stage.\nTesting phase corresponds to each development stage, forming a V-shape.\nEarly detection of issues, specific deliverables.\nSimilar inflexibility as the Waterfall model.\n1980s\n1990s-2000s\n\n\nIncremental Model\nDivides system functionality into small, manageable modules or increments.\nEach increment builds on the functionality of the previous one, with the final product formed by integrating all increments.\nPartial implementation, early delivery, easier testing.\nRequires careful planning, potential integration issues.\n1970s\n1980s-1990s\n\n\nSpiral Model\nCombines iterative development with aspects of the Waterfall model, incorporating risk assessment and mitigation.\nInvolves cycles with planning, risk analysis, engineering, testing, and evaluation.\nBetter risk management, accommodates changes.\nComplex, extensive documentation, not suitable for small projects.\n1988\n1990s-2000s\n\n\nPMO (Project Management Office)\nOrganizational structure defining and maintaining project management standards and practices.\nProvides governance, establishes best practices, ensures alignment with business goals, and offers support to project managers.\nStandardization, support, alignment with goals.\nMay not directly manage projects, requires proper implementation.\n20th Century\n1990s-Present",
    "crumbs": [
      "Weeks",
      "Week 10: Before SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week10.html#taiichi-ohno",
    "href": "scrum/scrum-week10.html#taiichi-ohno",
    "title": "Week 10: Before SCRUM",
    "section": "3.1 Taiichi Ohno",
    "text": "3.1 Taiichi Ohno\n\n\n\nTaiichi Ohno\n\n\nTaiichi Ohno philosophy:\n\nYou are a cost &gt;&gt;&gt; First reduce waste.\nFirst say, “I can do it.” &gt;&gt;&gt; And try before everything.\nThe workplace is a teacher &gt;&gt;&gt; You can find answers only in the workplace.\nDo anything immediately &gt;&gt;&gt; Starting something right now is the only way to win.\nOnce you start something, persevere with it &gt;&gt;&gt; Do not give up until you finish it.\nExplain difficult things in an easy-to-understand manner &gt;&gt;&gt; Repeat things that are easy to understand.\nWaste is hidden. Do not hide it &gt;&gt;&gt; Make problems visible.\nValueless motions are equal to shortening one’s life.\nRe-improve what was improved for further improvement.\nWisdom is given equally to everybody. The point is whether one can exercise it.",
    "crumbs": [
      "Weeks",
      "Week 10: Before SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week10.html#why-do-managers-hate-agile",
    "href": "scrum/scrum-week10.html#why-do-managers-hate-agile",
    "title": "Week 10: Before SCRUM",
    "section": "4.1 Why Do Managers Hate Agile?",
    "text": "4.1 Why Do Managers Hate Agile?\n\nWhy Do Managers Hate Agile?\n\n\nWhy don’t Agile and management get along? In a poll last Wednesday of some 400 people working in many different firms where the practices known as Agile and Scrum are being implemented,\n88% reported tension between the way Agile/Scrum teams are managed in their organization and the way the rest of the organization is managed.\nOnly 8% reported “no tension.”\n\n\n\n\nThe vertical world of hierachical bureaucracy\n\n\nAs Gary Hamel has noted, hierarchical bureaucracy solved two essential problems:\n\ngetting semiskilled employees to perform repetitive activities competently and efficiently;\ncoordinating those efforts so that products could be produced in large quantities.\n\nIn a stable environment, these liabilities didn’t matter much.\nChange wasn’t important. (…) With semi-skilled employees performing repetitive tasks, collaboration wasn’t important. And who really cared if the workers were dispirited? It was enough that they had their job and their paycheck.\nThen the world became turbulent\nBut the world changed and the marketplace became turbulent. There were a number of factors: Globalization, deregulation, and new technology, particularly the Internet. The Internet changed everything.\nThe answer was, collaboration, teamwork, Agile.\n\n\n\nThe horizontal world of Agile",
    "crumbs": [
      "Weeks",
      "Week 10: Before SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week10.html#banc-de-sabadell-british-bank-tsb",
    "href": "scrum/scrum-week10.html#banc-de-sabadell-british-bank-tsb",
    "title": "Week 10: Before SCRUM",
    "section": "4.2 Banc de Sabadell & British bank TSB",
    "text": "4.2 Banc de Sabadell & British bank TSB\nWhat broke the bank",
    "crumbs": [
      "Weeks",
      "Week 10: Before SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week10.html#delta-and-northwest-merger",
    "href": "scrum/scrum-week10.html#delta-and-northwest-merger",
    "title": "Week 10: Before SCRUM",
    "section": "4.3 Delta and Northwest merger",
    "text": "4.3 Delta and Northwest merger\nHow to Merge Two Airlines",
    "crumbs": [
      "Weeks",
      "Week 10: Before SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week10.html#how-cisco-it-uses-agile-development",
    "href": "scrum/scrum-week10.html#how-cisco-it-uses-agile-development",
    "title": "Week 10: Before SCRUM",
    "section": "4.4 How Cisco IT Uses Agile Development",
    "text": "4.4 How Cisco IT Uses Agile Development\nHow Cisco IT Uses Agile Development with Distributed Teams and Complex Projects",
    "crumbs": [
      "Weeks",
      "Week 10: Before SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week10.html#microsoft",
    "href": "scrum/scrum-week10.html#microsoft",
    "title": "Week 10: Before SCRUM",
    "section": "4.5 Microsoft",
    "text": "4.5 Microsoft\n\nSurprise: Microsoft Is Agile\nMicrosoft’s 16 Keys To Being Agile At Scale\nWhat is Scrum?\nAzure Boards",
    "crumbs": [
      "Weeks",
      "Week 10: Before SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week8.html",
    "href": "scrum/scrum-week8.html",
    "title": "Week 8: Team & the Specialist",
    "section": "",
    "text": "📘 Summary: SCRUM Week 8 - Team & the specialist\nIn SCRUM, the Development Team plays a pivotal role in delivering a potentially releasable product increment at the end of each Sprint.\nThe team’s self-organizing and cross-functional nature, combined with the absence of formal titles or sub-teams, ensures collective accountability.\nHowever, recognizing individual members’ specialized skills is crucial, even if it does not belong to formal SCRUM.\nThe introduction of specialists can significantly contribute to a project’s success by providing deep expertise in specific domains.\nWhile deviations from standard roles are permissible, adherence to SCRUM principles remains essential. Specialists, such as Security Analysts, Data Scientists, UX/UI Designers, and others, bring valuable expertise for solving complex problems within their domains. The SCRUM guide emphasizes maintaining the essence of SCRUM while accommodating organizational needs, making it vital to clearly define a specialist’s role, responsibilities, and interactions within the SCRUM framework for effective implementation.",
    "crumbs": [
      "Weeks",
      "Week 8: Team & the Specialist"
    ]
  },
  {
    "objectID": "scrum/scrum-week8.html#specialist-examples",
    "href": "scrum/scrum-week8.html#specialist-examples",
    "title": "Week 8: Team & the Specialist",
    "section": "2.1 Specialist examples",
    "text": "2.1 Specialist examples\n\nSecurity Analyst in Cybersecurity:\n\nRole: Analyzing and enhancing the security infrastructure of a software product.\nExpertise: Deep knowledge of security vulnerabilities, threat modeling, and best practices for secure coding.\n\nData Scientist in Analytics:\n\nRole: Extracting meaningful insights from data to inform business decisions.\nExpertise: Statistical analysis, machine learning, and data visualization techniques.\n\nUX/UI Designer in User Experience:\n\nRole: Crafting the user interface and overall user experience of a digital product.\nExpertise: Information architecture, usability principles, and design thinking.\n\nDevOps Engineer in Operations:\n\nRole: Streamlining the development-to-operations pipeline for faster and more reliable software delivery.\nExpertise: Automation, continuous integration/continuous deployment (CI/CD), and infrastructure as code.\n\nNetwork Architect in Networking:\n\nRole: Designing and implementing the organization’s network infrastructure.\nExpertise: Routing and switching protocols, network security, and scalability.\n\nMachine Learning Engineer in Artificial Intelligence:\n\nRole: Developing and deploying machine learning models for predictive analytics.\nExpertise: Algorithms, model training, and evaluation, deep learning frameworks.\n\nForensic Accountant in Finance:\n\nRole: Investigating financial discrepancies and providing expert testimony in legal cases.\nExpertise: Accounting principles, fraud detection, and financial analysis.\n\nClinical Researcher in Healthcare:\n\nRole: Conducting and overseeing clinical trials to advance medical research.\nExpertise: Regulatory compliance, patient safety, and data integrity in clinical studies.\n\nSEO Specialist in Digital Marketing:\n\nRole: Optimizing online content to improve search engine rankings.\nExpertise: Keyword analysis, on-page optimization, and staying current with search engine algorithms.\n\nHardware Engineer in Electronics:\n\nRole: Designing and developing electronic components and systems.\nExpertise: Circuit design, PCB layout, and knowledge of electronic components.",
    "crumbs": [
      "Weeks",
      "Week 8: Team & the Specialist"
    ]
  },
  {
    "objectID": "scrum/scrum-week9.html",
    "href": "scrum/scrum-week9.html",
    "title": "Week 9: Albertus’ Dilemma",
    "section": "",
    "text": "📘 Summary: SCRUM Week 9 - Albertus’ Dilemma\nAlbertus’ Dilemma explores the mental challenges faced by programmers throughout the workweek, symbolized by a diminishing canteen of creative energy.\nThe dilemma arises from the misconception that working harder will replenish this energy, leading to exhaustion and a productivity trap: the well.\nTo break free, programmers must strategically pause, reflect, and make informed decisions.\nEmbracing intermittent coding preserves mental energy, ensuring a successful journey from code to relaxation.\nAlbertus’ Dilemma serves as a guiding philosophy for maintaining balance, resulting in a clear-minded, stress-free programmer celebrating a job well done by week’s end.\n\n\n\nKeywords: Week 9 - Albertus’ Dilemma\nAlbertus’ Dilemma, Mental Challenges, Creative-Mind-Brain Energy, Productivity Trap, Strategic Pause, Informed Decisions, Intermittent Coding, Balance, Clear-minded, Stress-free, Coding Desert, Journey, Programmer’s Oasis, Reflection, Decision-making, Desert Wisdom, Coding Legacy\n\n\n\n\n\nProgramming means choosing a path where there is no path and few resources and each decision conditions the next and drains resources\n\n\n\n1 What is a dilemma?\n\n\n\nDictionary dilemma\n\n\n\n\n2 Albertus’ Dilemma: The Comic\n\n\n\n\n\n\nAlbertus’ Dilemma - Navigating the Programmer’s Oasis\n\n\n\n\n\n\n\nIn the vast landscape of the workweek\n\n\nIn the vast landscape of the workweek, each programmer embarks with a canteen full of precious water, symbolizing their mental energy. Monday marks the beginning of the journey, the oasis brimming with potential. But as the relentless sun of tasks beats down, the water supply diminishes.\nBy Tuesday, the once-full canteen is distressingly dry—a programmer stranded in the midweek desert, parched for creativity and focus. The Albertus Dilemma unfolds as a dilemma rooted in the illusion that working harder and longer will miraculously refill the canteen.\nThe paradox arises: the more they toil in the arid landscape, the deeper they dig themselves into a well of exhaustion. The coding well, ever-expanding with each line of code, becomes a trap. Blind to their own depletion, programmers find themselves ensnared, the oasis of productivity slipping further away.\n\n\n\nTo break free from Albertus Dilemma\n\n\nTo break free from Albertus Dilemma, programmers must recognize the futility of digging deeper. Instead, they must pause, survey the desert, and conserve the remaining droplets of mental energy. The oasis can only be replenished through strategic reflection and intelligent decision-making.\n\n\n\nCoding without a clear path forward is akin to stumbling into the well\n\n\nCoding without a clear path forward is akin to stumbling into the well—a descent into a labyrinth of confusion. The remedy lies in restraint, in knowing when to pause and when to resume. The oasis is not lost, merely obscured by the mirage of perpetual productivity.\n\n\n\nThe trap well of ignorance and bad decision-making\n\n\nThus, the sage programmer embraces the art of intermittent coding, preserving mental water in the vast desert. They understand that productivity is not a bottomless well, but a delicate oasis to be nurtured. Albertus’ Dilemma teaches the profound lesson that the journey from coding to completion requires a balance of diligence, strategic thinking, and the wisdom to discern when to rest and when to forge ahead.\n\n\n\nThe code produced throughout the week reflects the clarity of their mind\n\n\nAs the week unfolds, the sage programmer, having embraced the lessons of Albertus Dilemma, emerges unscathed by the pitfalls of the coding desert. By judiciously preserving mental energy, they reach Friday with a canteen still brimming with vitality. Instead of succumbing to exhaustion, they find themselves relaxed and content, basking in the success of their strategic approach.\n\n\n\nThe unwise code of Friday’s night working hard\n\n\nFriday becomes a celebration, not just the end of the workweek, but a culmination of intelligent choices. The sage programmer, stress-free and clear-minded, revels in the satisfaction of a job well done. With a fully replenished canteen, they embark on the weekend with boundless energy to share with friends, enjoying leisure without the burden of unwise coding decisions.\n\n\n\nFriday becomes a celebration\n\n\nThe code produced throughout the week reflects the clarity of their mind—a clean and elegant manifestation of thoughtful problem-solving. The sage programmer, having navigated the desert wisely, not only secures their own well-being but crafts a legacy of efficient and mindful coding. Albertus Dilemma becomes not just a dilemma to overcome but a guiding philosophy, ensuring that the oasis of productivity is always within reach, and the journey from code to relaxation is a harmonious and successful one.\n\n\n\n\n3 Overview\n\n\n\n\n\nflowchart LR\n\nA[Problem] --&gt; B(Let's code & See what happens...)\nC[The Pitt]\nD(Optimal Solution)\nC --&gt; B\nB --&gt; C\nC --&gt; A\n\n\n\n\n\n\n\n\n\n\n4 Introduction\nAs a future developer I want to relate the struggles and reflect the mentality that you, my fellow reader and potential developer, should avoid.\nMy purpose is to stablish some patterns of productive thinking to help you to get out from the Valley of Despair a.k.a. (and from now on) The Pitt that most likely you would fall into. Trust me, I’ve been there…Actually I AM constantly there, that’s why I want to reflect that in this kind of journal.\n\n\n\n\n\n\nAnyway\n\n\n\n\n\nThat’s the tricky part, I don’t know how as of today (01/19/2023). But hopefully I will. First of all you need to understand the concept of iteration, my friend. With that in mind, we just need to start.\n\n\n\n\n\n5 Albertus’ Dilemma… What are we talking about?\nYou surely noticed the flowchart above. It’s such a common pattern for us who just started programming. Have you ever feel identified with it?\nAs you keep progressing in your coding lessons, problems are going to be slightly more difficult and complex every time. Until you reach to a point when you can’t completely see the solution in your mind.\nYou’ll probably see straight how to get from A to B, but from B to C you see it blurry… Well, then you just have to get to B so you can see more clear how to get to C better, right?\nYes, I always trick to myself like that…\n\n\n\n\n\n\nWhen we talk about Albertus’ Dilemma:\n\n\n\nIt is that moment when you either need to stop, take two steps back and think what led you into this or keep hitting the wall (and the keyboard with your pointless code).\n\n\nI’m going to try to develop that idea on some exercises based on this lab:\n\n\n\n\n\n\n📘 Linux Lab#SE02-1: Movie Review and Rating\nCreate a Maven/Gradle Java SE Project.\n\nAdd the needed dependencies:\n    Lombok\n    Junit\n    Java Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\n    Movie: The Movie class represents a movie that is being reviewed. It has the following attributes:\n        title: a String representing the title of the movie\n        reviews: a Set of Review objects representing the reviews that have been written for this movie\n        Critic: The Critic class represents a critic who writes reviews.\n\n    The Critic class has the following attributes:\n        name: a String representing the name of the critic\n        Review: The Review class represents a review of a movie written by a critic.\n\n    The Review class has the following attributes:\n        movie: a Movie object representing the movie being reviewed\n        critic: a Critic object representing the critic who wrote the review\n        rating: an int representing the rating given by the critic (on a scale of 1 to 5)\n        comment: a String representing the comment written by the critic about the movie\n\n\n\nSo I have this requirement:\n\nMake a program that can manage information about movies such as:\n\nMovie name.\nIts director (e.g. so I can plan a themed marathon with my friends.)\n\nDirector’s prestige: I want to know how many Oscars has the director won through his career.\n\nIt also needs to include its critics made by the best professionals and to know how well or poorly rated it is.\n\n\nUser Story #1 - The easiest and certain way to hit the wall.\nLet’s just start coding:\n\npublic Class MovieManager  {\n    public static void main(String[])\n}\n\n\n\n\n\n\nflowchart LR\nA[Problema] --&gt; B[Decision]\nB --&gt; C(Code & See)\nB --&gt; D(Piensa)\nD --&gt; E[Sabes lo que haces?]\nC --&gt; G[El Pozo]\nD --&gt; F[Te enamoraste de tu primera idea?]\nG --&gt; A\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Weeks",
      "Week 9: Albertus' Dilemma"
    ]
  },
  {
    "objectID": "scrum/scrum-what-guide.html",
    "href": "scrum/scrum-what-guide.html",
    "title": "SCRUM Guide",
    "section": "",
    "text": "The 2020 Scrum Guide\nThis HTML version of the Scrum Guide is a direct port of the November 2020 version available as a PDF here or original 2013.\n\n\n\n\nResource Center\nThe Scrum Framework by Scrum Inc..\nSuggested Reading for Professional Scrum Master\nGuia rápida implementar SCRUM\n\n\n\n\n\n\n\n\nAgile Software Development\n\n\nWe are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:\nThrough this work we have come to value\n\n\nTransparency, Inspection and adaptation\n\n\n\n\nIndividuals and interactions over processes and tools\nWorking software over comprehensive documentatio\nCustomer collaboration over contract negotiation\nResponding to change over following a plan\n\nThat is, while there is value in the items on the right, we value the items on the left more.\n\n\n\n12 principles",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Guide"
    ]
  },
  {
    "objectID": "scrum/scrum-what-guide.html#the-2020-scrum-guide",
    "href": "scrum/scrum-what-guide.html#the-2020-scrum-guide",
    "title": "SCRUM Guide",
    "section": "",
    "text": "The 2020 Scrum Guide\nThis HTML version of the Scrum Guide is a direct port of the November 2020 version available as a PDF here or original 2013.",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Guide"
    ]
  },
  {
    "objectID": "scrum/scrum-what-guide.html#agile-essentials-scrum-overwiew",
    "href": "scrum/scrum-what-guide.html#agile-essentials-scrum-overwiew",
    "title": "SCRUM Guide",
    "section": "",
    "text": "Resource Center\nThe Scrum Framework by Scrum Inc..\nSuggested Reading for Professional Scrum Master\nGuia rápida implementar SCRUM",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Guide"
    ]
  },
  {
    "objectID": "scrum/scrum-what-guide.html#manifesto-for-agile-software-development",
    "href": "scrum/scrum-what-guide.html#manifesto-for-agile-software-development",
    "title": "SCRUM Guide",
    "section": "",
    "text": "Agile Software Development\n\n\nWe are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:\nThrough this work we have come to value\n\n\nTransparency, Inspection and adaptation\n\n\n\n\nIndividuals and interactions over processes and tools\nWorking software over comprehensive documentatio\nCustomer collaboration over contract negotiation\nResponding to change over following a plan\n\nThat is, while there is value in the items on the right, we value the items on the left more.\n\n\n\n12 principles",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Guide"
    ]
  },
  {
    "objectID": "scrum/scrum-what-guide.html#backlog",
    "href": "scrum/scrum-what-guide.html#backlog",
    "title": "SCRUM Guide",
    "section": "2.1 Backlog",
    "text": "2.1 Backlog\n\n\n\n\n\n\nSprint Velocity\n\n\n\nNumber of Story Points completed per Sprint\n\n\n\n\n\nAll actors in SCRUM\n\n\n\n\n\n\n\n\nProduct Backlog\n\n\n\nis an always changing, dynamically prioritized list of requirements ordered by Business Value. Requirements are broken down into User Stories by the Product Owner. Definition of Done (DoD) at the Backlog level.\n\n\n\n\n\n\n\n\nSprint Backlog\n\n\n\ncontains all committed User Stories for the current Sprint broken down into Tasks by the Team. All items on the Sprint Backlog should be developed, tested, documented and integrated to fulfill the Team commitment.\n\n\n\n\n\nBurndown Chart\n\n\n\n\n\n\n\n\nBurndown Chart\n\n\n\nshows the amount of work remaining per Sprint. It shows the correlation between work remaining at any point in time and the progress of the Team.",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Guide"
    ]
  },
  {
    "objectID": "scrum/scrum-what-guide.html#purpose",
    "href": "scrum/scrum-what-guide.html#purpose",
    "title": "SCRUM Guide",
    "section": "4.1 Purpose",
    "text": "4.1 Purpose\nWhile learning the details of each is very important for effective Scrum, at the highest level*, the purpose of each is actually quite simple:\n\nSprint - All work in Scrum is done in a series of short projects called Sprints. This enables rapid feedback loops.\nSprint Planning - The Sprint starts with a planning session in which the Developers plan the work they intend to do in the Sprint. This plan creates a shared understanding and alignment among the team.\nDaily Scrum - The Developers meet daily to inspect their progress toward the Sprint Goal, discuss any challenges they’ve run into and tweak their plan for the next day as needed.\nSprint Review - At the end of the Sprint, the Sprint Team meets with stakeholders to show what they have accomplished and get feedback.\nSprint Retrospective - Finally, the Scrum Team gets together to discuss how the Sprint went and if there are things they could do differently and improve in the next Sprint.",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Guide"
    ]
  },
  {
    "objectID": "scrum/scrumlab2.html",
    "href": "scrum/scrumlab2.html",
    "title": "SCRUM Lab#SC02: Spaguetti Challenge",
    "section": "",
    "text": "📘 SCRUM Lab#SC02: Spaguetti Challenge\nThe Agile Spaghetti Challenge Tower is an innovative team-building activity that embodies Agile principles.\n\nParticipants work in teams to construct the tallest tower using only spaghetti and marshmallows within a time constraint.\n\nThis exercise mirrors Agile’s iterative approach, encouraging collaboration, adaptability, and quick decision-making. Teams continuously inspect and adapt their tower, incorporating feedback from short cycles to optimize performance.\nThe challenge emphasizes Agile values such as flexibility, communication, and incremental progress. It offers a hands-on experience for participants to grasp Agile concepts in a tangible context, fostering a deeper understanding of teamwork and Agile methodologies.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC02: Spaguetti Challenge"
    ]
  },
  {
    "objectID": "scrum/scrumlab2.html#the-set-up",
    "href": "scrum/scrumlab2.html#the-set-up",
    "title": "SCRUM Lab#SC02: Spaguetti Challenge",
    "section": "1.1 The Set Up",
    "text": "1.1 The Set Up\nStudents work in teams of four to build the tallest tower they can using only the provided materials.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC02: Spaguetti Challenge"
    ]
  },
  {
    "objectID": "scrum/scrumlab2.html#build-launch-and-fail",
    "href": "scrum/scrumlab2.html#build-launch-and-fail",
    "title": "SCRUM Lab#SC02: Spaguetti Challenge",
    "section": "1.2 Build, Launch (and Fail!)",
    "text": "1.2 Build, Launch (and Fail!)\nWith only 18 minutes to build their towers, teams often follow a similar construction timeline:\n\n~3 minutes: Figuring out who is in charge\n~10 minutes: Planning\n~4 minutes: Taping spaghetti together\n~1 minute: Putting their marshmallow on top\n~1 second: Watching the tower crumble under the (surprising) weight of the marshmallow",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC02: Spaguetti Challenge"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html",
    "href": "scrum/scrum-week1.html",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "",
    "text": "📘 Summary: SCRUM Week 1 - Meetings, Impediments and Iterations\nEffective and well-organized meetings are fundamental to SCRUM Agile, playing a pivotal role in collaboration, decision-making, and achieving organizational goals. The key to productive meetings lies in clear goal-setting, defined roles, and an optimal number of participants. Time management is crucial, ensuring discussions remain focused and purposeful. Common issues like late arrivals and multitasking can hinder productivity and should be addressed proactively.\nImpediments, in the SCRUM framework, are viewed through a negative logic perspective, considering them as opportunities for improvement rather than obstacles. This approach promotes transparency, early issue identification, continuous improvement, collaboration, adaptability to change, and a culture of accountability within the team.\nIterations are essential in SCRUM, aligning with the “keep it simple” concept, the Lindy effect, and path dependence. By breaking down complex tasks into manageable units, SCRUM teams ensure incremental progress, frequent feedback loops, and adaptive evolution. Time-boxing activities in SCRUM, based on cognitive load and focus principles, enhances efficiency, promotes simplicity, and facilitates continuous improvement through clear differentiation of activities and follow-through.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#goal-meeting",
    "href": "scrum/scrum-week1.html#goal-meeting",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "1.1 Goal Meeting",
    "text": "1.1 Goal Meeting\n\nClearly defined goals give purpose to a meeting and help participants understand the expected outcomes. Begin by stating the meeting’s objectives at the outset, ensuring that they align with the organization’s overall mission.\nBreak down larger goals into manageable tasks and prioritize them. This approach keeps discussions on track and ensures that participants leave with a sense of accomplishment.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#roles-number-of-participants",
    "href": "scrum/scrum-week1.html#roles-number-of-participants",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "1.2 Roles & Number of Participants",
    "text": "1.2 Roles & Number of Participants\nHaving clearly defined roles helps streamline the meeting process and ensures that each aspect is adequately addressed.\n\nAssigning specific roles ensures that everyone contributes to the meeting’s success.\nDesignate a facilitator to guide the discussion, a note-taker to record key points, and a timekeeper to manage the schedule.\nDetermining the appropriate number of participants is crucial. Too many attendees can lead to a lack of focus and increased likelihood of off-topic discussions. On the other hand, too few participants may result in a limited range of perspectives. Aim for a balance that allows for diverse input without sacrificing efficiency.\nConsider inviting only those individuals whose presence is essential to achieving the meeting’s goals.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#time-management",
    "href": "scrum/scrum-week1.html#time-management",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "1.3 Time Management",
    "text": "1.3 Time Management\n\nTime is a precious resource, and effective time management is key to a successful meeting. Begin by setting a realistic agenda with specific time allocations for each agenda item.\nStick to the schedule to avoid wasting time and ensure that discussions remain focused and purposeful. Assign a timekeeper to help monitor the clock and remind participants of time constraints.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#common-boycotts",
    "href": "scrum/scrum-week1.html#common-boycotts",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "1.4 Common Boycotts",
    "text": "1.4 Common Boycotts\n\nMeetings are susceptible to various behaviors that can hinder productivity. Common issues include late arrivals, multitasking, and disengagement. Encourage punctuality by starting and ending on time, implement a no-device policy to minimize distractions, and actively involve all participants to maintain engagement. Addressing these issues head-on fosters a more respectful and focused meeting environment.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#next-to",
    "href": "scrum/scrum-week1.html#next-to",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "1.5 Next to",
    "text": "1.5 Next to\nA well-concluded meeting not only ensures that goals are met but also sets the stage for future productive collaborations.\n\nConclude the meeting by summarizing key takeaways and action items.\nAssign responsibilities for follow-up tasks and set deadlines.\nProvide a forum for participants to share feedback on the meeting process, allowing for continuous improvement.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#less-wrong",
    "href": "scrum/scrum-week1.html#less-wrong",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "3.1 Less Wrong",
    "text": "3.1 Less Wrong\n\n\n\nLess Wrong\n\n\nIn human behavior and decision-making, being less wrong involves acknowledging the uncertainty inherent in complex situations. Instead of seeking absolute certainty, individuals focus on minimizing errors and learning from mistakes.\nIt emphasizes a humble approach to decision-making, recognizing that perfection is elusive, and continuous improvement comes from adapting based on feedback and experience.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#keep-it-simple",
    "href": "scrum/scrum-week1.html#keep-it-simple",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "3.2 Keep It Simple",
    "text": "3.2 Keep It Simple\n\n\n\nKiss\n\n\nThe “keep it simple” concept is a fundamental principle in agile methodologies, including Scrum. By breaking down complex tasks into smaller, more manageable units, Scrum teams can maintain focus and clarity. Iteration, in the form of sprints in Scrum, embodies this simplicity principle.\n\nIncremental Progress: Scrum emphasizes short, time-boxed iterations (sprints) where the team delivers a potentially shippable product increment. This incremental approach allows for continuous improvement and simplifies the development process.\nFeedback Loops: Frequent iterations provide opportunities for regular feedback from stakeholders. This ensures that the product aligns with evolving requirements, promoting simplicity by addressing issues early in the development process.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#lindy-effect-turkey-parable",
    "href": "scrum/scrum-week1.html#lindy-effect-turkey-parable",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "3.3 Lindy Effect & Turkey Parable",
    "text": "3.3 Lindy Effect & Turkey Parable\n\n\n\nTurkey pavoland\n\n\nNassim Nicholas Taleb’s Turkey Parable illustrates the idea of the Lindy effect, suggesting that the longer something survives, the longer its life expectancy. Sometimes a dramatic event and unexpected terminates the expectatives and lifecycle of the product.\n\nThe problem that Taleb is really attacking in his book is forecasting, particularly economic forecasting, and the practice of using past events to predict the future.\n\nIn the context of Scrum:\n\nIncremental Learning: Each iteration in Scrum is an opportunity for the team to learn and adapt. The Lindy effect supports the idea that the longer a project survives and adapts through iterations, the more likely it is to continue thriving and improving.\nRisk Mitigation: The Turkey Parable serves as a cautionary tale about avoiding assumptions. In Scrum, regular iterations provide opportunities to reassess assumptions, identify risks early, and adapt plans accordingly, reducing the likelihood of unwarranted assumptions leading to project failure.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#path-dependence",
    "href": "scrum/scrum-week1.html#path-dependence",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "3.4 Path Dependence",
    "text": "3.4 Path Dependence\n\n\n\nStart-Ups Are Path Dependent\n\n\nPath dependence refers to the idea that the current state and future developments are influenced by historical factors and decisions.\n\n\n\n\n\n\nImportant\n\n\n\nWhat Is Path Dependency?\nPath dependency in economics refers to the tendency to rely on past practices, decisions, and actions for the outcome rather than current conditions.\nThus, those who repeat the same strategies will almost certainly get the same results.\nAs a result, it can greatly impact economic or market development.\n\n\nIn the context of Scrum iterations:\n\nAdaptive Evolution: Scrum’s iterative nature acknowledges that the development path is not always predictable. Path dependence suggests that the current state of the project is influenced by past decisions. Scrum embraces this reality by allowing teams to adapt and change direction as needed during each iteration.\nContinuous Improvement: Each iteration builds on the progress of the previous ones. The path taken by the team is influenced by past decisions and learning experiences. Scrum’s focus on inspecting and adapting allows the team to continuously improve their path based on feedback and changing circumstances.\n\n\nThe iteration is crucial in Scrum because it aligns with the “keep it simple” concept, embodies the Lindy effect by promoting incremental learning and risk mitigation, and acknowledges the influence of past decisions through the concept of path dependence. Embracing these principles helps Scrum teams navigate complexity, manage risk, and achieve continuous improvement in a dynamic and ever-changing environment.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-week1.html#managing-cognitive-load-and-focus",
    "href": "scrum/scrum-week1.html#managing-cognitive-load-and-focus",
    "title": "Week 1: Meetings, Impediments and Iterations",
    "section": "4.1 Managing cognitive load and focus",
    "text": "4.1 Managing cognitive load and focus\nIn Scrum Agile, successful teamwork involves managing cognitive load and maintaining focus during time-boxed iterations.\n\nCognitive load refers to the mental effort needed for tasks. Teams benefit from breaking work into clear, differentiated activities, aiding understanding.\nFollow-through ensures that planned tasks are completed within each iteration, promoting efficiency.\nAdaptation is key; teams adjust strategies based on feedback.\n\nThese principles emphasize simplicity, focus, and responsiveness, making Agile iterations effective for iterative development.\n\n\n\n\n\n\nTip\n\n\n\nBy balancing cognitive load, clear tasks, follow-through, and adaptability, teams optimize their performance within the time constraints of each iteration, fostering continuous improvement.\n\n\n\n4.1.1 Cognitive Load and Focus\n\nPlanning Phase: During the planning phase, the team engages in activities such as backlog refinement and sprint planning. The cognitive load is high as team members need to understand the requirements, estimate effort, and plan tasks. Time-boxing these activities ensures focused attention on defining the work for the upcoming sprint.\nExecution Phase: Once the planning is complete, the team enters the execution phase where they concentrate on implementing the planned work. Time-boxing this phase allows for sustained focus on coding, testing, and delivering the product increment.\nReview and Reflection Phase: The end of each sprint involves a review and reflection period. This time-boxed session provides an opportunity to assess the increment against the Definition of Done, gather feedback, and reflect on what went well and what could be improved. Managing cognitive load during this phase supports effective learning and adaptation.\n\n\n\n4.1.2 Differentiation of Activities\n\nSprint Planning: Allocating a specific time for sprint planning helps the team differentiate this strategic activity from the more tactical execution. This ensures that the team is clear about what needs to be achieved in the upcoming sprint.\nDaily Stand-ups: The daily stand-up meetings are short and focused, providing a platform for quick updates on progress, potential impediments, and coordination. By time-boxing these daily interactions, the team ensures that communication remains concise, relevant, and doesn’t add unnecessary cognitive load.\nRetrospective: The retrospective is a dedicated time for the team to reflect on their processes and collaboration. Time-boxing this phase allows the team to delve into constructive discussions without overwhelming cognitive load, promoting a more effective and focused retrospective.\n\n\n\n4.1.3 Follow-Through and Adaptation\n\nTime-Boxed Sprints: Scrum works on the principle of time-boxed iterations, typically lasting two to four weeks. This ensures that the team can focus on delivering a potentially shippable product increment within a set timeframe. The time-boxing helps manage the cognitive load associated with longer planning and execution cycles.\nContinuous Improvement: By having regular retrospectives and adapting processes incrementally, Scrum allows the team to manage the cognitive load associated with learning and improvement. This avoids the overwhelming prospect of making drastic changes all at once.\n\n\nIn essence, Scrum’s approach to timing, with its emphasis on time-boxing key activities, helps manage the cognitive load associated with different phases of development. This approach allows the team to maintain focus, differentiate between planning and execution, and follow through on iterative cycles of improvement, ultimately contributing to a more effective and adaptive development process.",
    "crumbs": [
      "Weeks",
      "Week 1: Meetings, Impediments and Iterations"
    ]
  },
  {
    "objectID": "scrum/scrum-what-agile-manifesto.html",
    "href": "scrum/scrum-what-agile-manifesto.html",
    "title": "Agile Manifesto & Values",
    "section": "",
    "text": "Through this work we have come to value\nPrinciples behind the Agile Manifesto\n\n\n\nAgile Software Development\n\n\n\n\nOur highest priority is to satisfy the customer through early and continuous delivery of valuable software.\n\n\nWelcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.\n\n\nDeliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\n\n\nBusiness people and developers must work together daily throughout the project.\n\n\nBuild projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\n\n\nThe most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\n\n\nWorking software is the primary measure of progress.\n\n\nAgile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\n\n\nContinuous attention to technical excellence and good design enhances agility.\n\n\nSimplicity–the art of maximizing the amount of work not done–is essential.\n\n\nThe best architectures, requirements, and designs emerge from self-organizing teams.\n\n\nAt regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.",
    "crumbs": [
      "What is SCRUM",
      "Agile Manifesto & Values"
    ]
  },
  {
    "objectID": "scrum/scrum-what-agile-manifesto.html#values",
    "href": "scrum/scrum-what-agile-manifesto.html#values",
    "title": "Agile Manifesto & Values",
    "section": "2.1 Values",
    "text": "2.1 Values\n\n\n\n\n\n\nNote\n\n\n\nValues are the principles we view as important in the way we live and work. They are the core beliefs that guide our actions, behavior and decisions. Examples of personal core values may include: family-first, honesty, kindness, patience, authenticity and many others. Understanding our personal values helps us understand what’s important to us. Using our values to guide our behavior, actions and decision-making provides us a sense of direction and purpose.\n\n\nThe Scrum Framework articulates a set of Scrum Values to help guide the work, actions and behavior of Scrum Team members.",
    "crumbs": [
      "What is SCRUM",
      "Agile Manifesto & Values"
    ]
  },
  {
    "objectID": "scrum/scrum-what-agile-manifesto.html#the-scrum-values",
    "href": "scrum/scrum-what-agile-manifesto.html#the-scrum-values",
    "title": "Agile Manifesto & Values",
    "section": "2.2 The Scrum Values",
    "text": "2.2 The Scrum Values\nThe Scrum Values are:\n\nCourage - Scrum Team members need courage to do the right thing and face tough problems. For example, they should exhibit courage to explore the unknown, to change direction, to share information and to engage in courteous disagreements.\nFocus - The Scrum Team focuses on the work of the Sprint and its goals. Examples of this include focusing on: creating value, what’s currently most important and getting to Done.\nCommitment - Each Scrum Team member commits to achieving the team’s goals and to support each other. This involves commitment or dedication to:\n\nDelivering value;\nQuality;\nWorking toward the Sprint and Product Goals;\nUsing empiricism.\n\nRespect - It’s necessary for Scrum Team members to respect each other as skilled professionals. Scrum Team members should respect each other’s differing expertise and perspectives and be respectful when they disagree.\nOpenness - The Scrum Team and its stakeholders agree to be open about all of the work and the challenges with performing the work. Scrum Team members should be open about the struggles they face. They should share feedback and learn from each other and from their stakeholders.\n\nEach of the Scrum Values may be interpreted by each team member differently. Language and cultural differences may contribute to this. Gunther Verheyen, a Professional Scrum Trainer created a well-regarded description of the Scrum Values. On thescrumvalues.org you’ll find this description and its translation into over two dozen different languages.",
    "crumbs": [
      "What is SCRUM",
      "Agile Manifesto & Values"
    ]
  },
  {
    "objectID": "scrum/scrum-week14.html",
    "href": "scrum/scrum-week14.html",
    "title": "Week 14: Beyond SCRUM",
    "section": "",
    "text": "📘 Summary: SCRUM Week 14 - Beyond SCRUM\nThe article “Beyond SCRUM” delves into unconventional yet effective approaches to project management, drawing insights from SpaceX and Big Tech.\nSpaceX initially adopted Lean Startup practices, engaging in unorthodox strategies like purchasing rocket spares from regular stores.This departure from traditional aerospace norms allowed them to outcompete industry giants. Elon Musk’s Agile 5 steps emphasize making requirements smarter, constantly refining processes, simplifying, accelerating cycle time, and automating. The accompanying video presentations provide a deeper understanding of these principles.\nIn contrast, the exploration of how Big Tech manages projects reveals a diverse landscape where success varies based on company size and industry focus. Notably, the absence of dedicated Project Managers or Product Owners in Big Tech emphasizes the role of Product Managers in defining strategy and execution steps.\nAdditionally, the mention of LeSS (Large-Scale Scrum) underscores the application of Scrum principles to multiple teams working collaboratively on a single product.",
    "crumbs": [
      "Weeks",
      "Week 14: Beyond SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week14.html#spacex",
    "href": "scrum/scrum-week14.html#spacex",
    "title": "Week 14: Beyond SCRUM",
    "section": "1.1 SpaceX",
    "text": "1.1 SpaceX\n\nIs SpaceX using Scrum?\n\nElevator Pitch",
    "crumbs": [
      "Weeks",
      "Week 14: Beyond SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week14.html#approach",
    "href": "scrum/scrum-week14.html#approach",
    "title": "Week 14: Beyond SCRUM",
    "section": "1.2 Approach",
    "text": "1.2 Approach\n\n\n\nSpaceX is currently using a methodologies pool\n\n\nAt the very beginning, when they were just a startup, they used all Lean Startup tips to achieve the success. They did unscalable things, bought some spares for rockets in usual computer shops, made some spares by themselves, etc.\n\n\nAll of these were a total craziness for classical aerospace companies. But it was the key benefit how they competed mastodons, like Lockheed and Boeing.\nTesting of hypotheses, tight budgets, and continuous innovations made the appreciable contribution to company success.\n\nAll Elon’s companies use Silicon Valley startup approach to achieve success. And this is what distinguishes them among all other classical companies from the industry\n\nPerhaps, it’s not a classical Scrum approach like software companies use, but it’s from the field of Kaizen and The Toyota Way. This is how startups should behave.",
    "crumbs": [
      "Weeks",
      "Week 14: Beyond SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week14.html#difficulties",
    "href": "scrum/scrum-week14.html#difficulties",
    "title": "Week 14: Beyond SCRUM",
    "section": "1.3 Difficulties",
    "text": "1.3 Difficulties",
    "crumbs": [
      "Weeks",
      "Week 14: Beyond SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week14.html#elon-musk-spacex-agile-5-steps",
    "href": "scrum/scrum-week14.html#elon-musk-spacex-agile-5-steps",
    "title": "Week 14: Beyond SCRUM",
    "section": "1.4 Elon Musk SpaceX Agile 5 steps",
    "text": "1.4 Elon Musk SpaceX Agile 5 steps\n\n\n\n\nMake requirements less dumb\n\nYour requirements are dumb especially if a smart person gives them to you because you may not question them enough. Everyone is wrong sometimes.\nPeople will put you in an unnecessarily small box. Make your box bigger.\nRequirements must have an owner (a person not a department) who is responsible for maintaining information about the need to continue.\n\nAlways be deleting part of the process\n\nIf you are not occasionally adding things back in, you are not deleting enough.\nThe bias tends to be adding things to processes which are “in case we need it”.\nThis is how processes get out of control and lengthier than truly needed\n\nSimplify or optimize\n\nIt is very common for smart people to optimize processes that should not exist.\nWe are trained to answer questions and solve problems… don’t be afraid to say that this problem is dumb\n\nAccelerate cycle time\n\nGo faster through each process.\nDon’t do this before you get through the first 3 steps\n\nAutomate\n\nFind ways to achieve process steps with little or no human intervention or cycle time.\nCreate automated feedback and process controls",
    "crumbs": [
      "Weeks",
      "Week 14: Beyond SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week14.html#presentation",
    "href": "scrum/scrum-week14.html#presentation",
    "title": "Week 14: Beyond SCRUM",
    "section": "1.5 Presentation",
    "text": "1.5 Presentation",
    "crumbs": [
      "Weeks",
      "Week 14: Beyond SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week14.html#how-big-tech-runs-projects",
    "href": "scrum/scrum-week14.html#how-big-tech-runs-projects",
    "title": "Week 14: Beyond SCRUM",
    "section": "2.1 How Big Tech Runs Projects",
    "text": "2.1 How Big Tech Runs Projects\n\n\n\nProject Management Approaches in the Industry\n\n\nBig Tech differ in how they approach executing tech projects, compared to the rest of the industry. I gathered data by talking with people at well-known publicly traded tech companies. Here is how they typically get things done:\n\n\n\nProject Management Approaches in the Industry",
    "crumbs": [
      "Weeks",
      "Week 14: Beyond SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week14.html#product-managers-yes-project-managers-no",
    "href": "scrum/scrum-week14.html#product-managers-yes-project-managers-no",
    "title": "Week 14: Beyond SCRUM",
    "section": "2.2 Product Managers: Yes, Project Managers: No",
    "text": "2.2 Product Managers: Yes, Project Managers: No\nAnother curious difference between Big Tech and everyone else is the role of Product Managers, and the lack of Project Managers or Product Owners who are dedicated to teams.\nThe role of product managers at these companies is defining the strategy at the team – the “why” – and the steps to execute this strategy – the “how”. As Facebook product manager Will Lawrence phrases this:\n\n“The role of a product manager is to figure out what game we’re playing and how we’re going to play it. Strategy is choosing the game we’re playing. It’s finding worthwhile areas to invest in and creating a compelling vision for how we can succeed in this game. (…) Execution is how we play the game. It’s the day-to-day processes, decisions and actions we take to make progress towards our mission.”\n\n\n\n\nBen Erez post, PM facebook\n\n\nTweet #1420495389770145795",
    "crumbs": [
      "Weeks",
      "Week 14: Beyond SCRUM"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html",
    "href": "scrum/scrum-week5.html",
    "title": "Week 5: Mindset, the key to everything",
    "section": "",
    "text": "📘 Summary: SCRUM Week 5 - Mindset, the key to everything\nWeek 5 of SCRUM focuses on the pivotal role of mindset in personal and professional success.\nThe mindset, defined as a set of beliefs shaping one’s perception of the world, influences decision-making, habits, and problem-solving.\nStanford psychologist Carol Dweck’s research distinguishes between fixed and growth mindsets, emphasizing the transformative power of cultivating a growth mindset. Those with a growth mindset embrace challenges, persist in setbacks, and view effort as a path to mastery, fostering resilience and a passion for lifelong development.\nThe discussion extends to the importance of purpose in life, emphasizing happiness, impact, and service. The process of understanding personal purpose involves continual self-reflection. Additionally, the episode delves into the benefits of journaling for immediate and long-term health.\nThe Soviet-Harvard delusion challenges the idea that academic knowledge alone is superior, advocating for a process of random tinkering, heuristics, practice, and apprenticeship.\nThe shift in management paradigms, customer-centric approaches, and the significance of having “skin in the game” are explored. The concept of antifragility is introduced, encouraging individuals and organizations to thrive and grow stronger in the face of adversity.",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html#mindset-matters",
    "href": "scrum/scrum-week5.html#mindset-matters",
    "title": "Week 5: Mindset, the key to everything",
    "section": "3.1 Mindset matters",
    "text": "3.1 Mindset matters\nDid you know that professionals who demonstrate a mindset of Growth show significantly higher levels of resilience, wellbeing, learning agility and emotional intelligence?\n\n\nSurvival vs. Growth Mindset via Caspar de Carteret’s Post\n\nYet a performance-limiting 66% of people are stuck in Survival.\n\n\n\nMindset matters",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html#what-do-we-want-from-life",
    "href": "scrum/scrum-week5.html#what-do-we-want-from-life",
    "title": "Week 5: Mindset, the key to everything",
    "section": "4.1 What do we want from life?",
    "text": "4.1 What do we want from life?\nThe first step is to understand what we want from life. Although the answer is unique for each of us, there is a general answer underlying our responses, a common canvas and palette awaiting our brush strokes. At the most basic level, we all want:\n\nTo be happy. Also described as “fulfillment,” “life satisfaction” or “feeling good.” A happy life is built with experiences of pleasant mood, meaning and engagement.\nTo have an impact. People sometimes call this “success” or “making the world a better place.” When one asks “Do I matter?” he is asking whether he affects the world in a meaningful way. A simple way of thinking about impact is “helping others.” While “helping others” is typically associated with non-profit work, we can view all work through the lens of service.\nOn a long enough time scale, products, services and roles must be valuable to someone or they will not last. It should be noted that the rewards associated with impact (compensation, recognition, etc) are only worthwhile in so far as they lead to our happiness or service to others (such as providing for our family).",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html#your-personal-purpose",
    "href": "scrum/scrum-week5.html#your-personal-purpose",
    "title": "Week 5: Mindset, the key to everything",
    "section": "4.2 Your Personal Purpose",
    "text": "4.2 Your Personal Purpose\n\n\n\n\n\nThe Buddha and the Badass\n\n\nThe Buddha and the Badass\nThe purpose process, then, is a series of questions you ask yourselves throughout your life.\nDay by day, you affirm your worthiness to lead a happy life and your ability to make a positive impact on the world. You endeavor to discover what is most powerful, most motivated and most moral in you and seek to use that to serve the needs of others.",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html#journaling",
    "href": "scrum/scrum-week5.html#journaling",
    "title": "Week 5: Mindset, the key to everything",
    "section": "4.3 Journaling",
    "text": "4.3 Journaling\n\n20 de nov. 2023 Huberman Lab\n\nIn this episode, I explain a specific writing protocol shown in hundreds of scientific studies to significantly improve immediate and long-term health. I explain how to implement this specific protocol, which takes only four days and 15-30 minutes per day.\nI also explain the mechanism for how the four-day writing protocol affects neuroplasticity (brain rewiring) and brain function in the short and long term. I explain how these brain changes positively impact our physical health, including our system’s immune function and thus our ability to combat infections, improve sleep, reduce feelings of physical and emotional pain, lower anxiety, and bring about healing from traumas.\nThis episode ought to be of interest to anyone seeking better mental and/or physical health through the use of brief yet highly effective science-supported protocols.",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html#mindset-goal",
    "href": "scrum/scrum-week5.html#mindset-goal",
    "title": "Week 5: Mindset, the key to everything",
    "section": "4.4 Mindset goal",
    "text": "4.4 Mindset goal",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html#coca-cola-commercial-hilltop",
    "href": "scrum/scrum-week5.html#coca-cola-commercial-hilltop",
    "title": "Week 5: Mindset, the key to everything",
    "section": "10.1 Coca-Cola commercial “Hilltop”",
    "text": "10.1 Coca-Cola commercial “Hilltop”\n\nInterpreting the Coca-Cola commercial from 1971, known as “Hilltop”, through the lens of Ian McGilchrist’s right hemisphere perspective involves focusing on its emotional and experiential elements, emphasizing connection, unity, and the present moment. The right hemisphere is often associated with holistic thinking, creativity, and a sense of interconnectedness.\n\n\n\n\n\n\nNote\n\n\n\nIn this interpretation, the commercial can be seen as a celebration of shared human experiences, emphasizing the joy of coming together. The vibrant scenes of people from different cultures atop a hill, singing “I’d Like to Buy the World a Coke,” can be viewed as a representation of a harmonious and utopian world. The right hemisphere tends to appreciate the beauty of the whole rather than breaking it down into individual components, so the emphasis is on the collective experience of enjoying a Coca-Cola.\n\n\nThe commercial’s setting on a hilltop, away from the complexities of daily life, may be seen as an escape into a simpler, more idealized reality. It portrays a vision of a world where people connect on a deeper, emotional level, transcending the divisions that exist in the everyday world. The right hemisphere often engages with experiences in a more intuitive and non-linear manner, so the dreamlike quality of the commercial may resonate with this perspective, emphasizing feelings and connections over logical analysis.\nThe absence of specific product details or practical considerations in the commercial aligns with the right hemisphere’s tendency to focus on the overall experience rather than the details. It fosters a sense of unity and common humanity, tapping into the emotional and experiential aspects of sharing a simple pleasure like a Coca-Cola.",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html#great-leap-forward-in-china-during-the-late-1950s",
    "href": "scrum/scrum-week5.html#great-leap-forward-in-china-during-the-late-1950s",
    "title": "Week 5: Mindset, the key to everything",
    "section": "10.2 Great Leap Forward in China during the late 1950s",
    "text": "10.2 Great Leap Forward in China during the late 1950s\n\nOne historical example of hierarchical structures dominated by left hemisphere thinking, leading to disastrous consequences, is the planning and execution of the Great Leap Forward in China during the late 1950s. This initiative was spearheaded by Mao Zedong, the leader of the Chinese Communist Party, and aimed at rapidly transforming China from an agrarian society into an industrialized socialist nation.\nGreat Leap Forward (1958-1962):\n\nLeft Hemisphere Dominance: The campaign was characterized by an authoritarian, top-down approach, reflecting left hemisphere traits such as centralized planning, strict control, and a focus on quantitative measures. The emphasis was on achieving ambitious economic and agricultural targets through detailed plans and directives.\nDisastrous Consequences: The rigid and hierarchical structure of the Great Leap Forward led to catastrophic results. Agricultural practices were restructured without considering the practical knowledge of local farmers, and unrealistic production targets were set. The emphasis on quantity over quality and the suppression of dissenting opinions resulted in widespread famine, economic collapse, and a significant loss of life.\nLack of Feedback and Adaptability: The hierarchical nature of the campaign stifled open communication and constructive feedback. Lower-level officials and workers were often afraid to report failures or question the feasibility of the set goals, contributing to the implementation of impractical policies and the concealment of actual conditions.\n\n\n\n\n\n\n\nImportant\n\n\n\nThe Great Leap Forward resulted in one of the most significant humanitarian disasters in history, with estimates of tens of millions of deaths due to famine, malnutrition, and related causes. This example underscores the potential dangers of hierarchical structures dominated by left hemisphere thinking when practical realities, local knowledge, and adaptability are disregarded in pursuit of ideologically driven goals.",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week5.html#nixons-purpose-of-life",
    "href": "scrum/scrum-week5.html#nixons-purpose-of-life",
    "title": "Week 5: Mindset, the key to everything",
    "section": "10.3 Nixon’s purpose of life",
    "text": "10.3 Nixon’s purpose of life\n\n\nThis attitude toward hard work and a sense of purpose was one of his most deeply ingrained beliefs.",
    "crumbs": [
      "Weeks",
      "Week 5: Mindset, the key to everything"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html",
    "href": "scrum/scrum-week2.html",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "",
    "text": "📘 Summary: SCRUM Week 2 - User stories, Tasks and Habits\nIn Scrum Agile, the effective management of user stories, tasks, and habits plays a pivotal role in achieving successful sprint deliveries.\nUser stories, often expressed as Product Backlog Items (PBIs), drive the development process by focusing on end-user needs. They keep the team oriented towards problem-solving and encourage collaboration, creativity, and momentum. Writing user stories involves defining the “done” state, outlining subtasks, considering user personas, and incorporating ordered steps.\nTasks, specific actionable pieces of work, contribute to completing PBIs during a sprint. They break down work, promote collaboration, and provide clarity on incremental product delivery. The INVEST criteria guide the creation of quality PBIs, emphasizing characteristics like independence, negotiability, and value.\nPlanning poker, a consensus-based estimation technique, aids in assigning story points to tasks. While popular, it has potential drawbacks, such as time consumption and potential biases, necessitating a balance between efficiency and precision.\nThemes and epics categorize stories by business goals and serve as larger requirements, respectively. User stories or work items are components of epics, and tasks contribute to building stories. Developing good habits is essential, and James Clear’s “Atomic Habits” provides a proven framework for habit formation, emphasizing identity-based habits and the habit loop.\nHaving the right size for the Backlog items and the tasks is crucial for smooth and successful sprint delivery.\nAgile and Scrum is a User Story or Product Backlog Item (PBI) driven approach, this approach is overcoming some of the major notches in delivering the product that customer is seeking to have.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#how-to-write-user-stories",
    "href": "scrum/scrum-week2.html#how-to-write-user-stories",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "1.1 How to write user stories",
    "text": "1.1 How to write user stories\nConsider the following when writing user stories:\n\nDefinition of “done” — The story is generally “done” when the user can complete the outlined task, but make sure to define what that is.\nOutline subtasks or tasks — Decide which specific steps need to be completed and who is responsible for each of them.\nUser personas — For whom? If there are multiple end users, consider making multiple stories.\nOrdered Steps — Write a story for each step in a larger process.\nListen to feedback — Talk to your users and capture the problem or need in their words. No need to guess at stories when you can source them from your customers.\nTime — Time is a touchy subject. Many development teams avoid discussions of time altogether, relying instead on their estimation frameworks. Since stories should be completable in one sprint, stories that might take weeks or months to complete should be broken up into smaller stories or should be considered their own epic.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#user-story-templates",
    "href": "scrum/scrum-week2.html#user-story-templates",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "1.2 User story templates",
    "text": "1.2 User story templates\n\n\n\nUser stories are often expressed in a simple sentence, structured as above\n\n\n\n“As a [persona]”: Who are we building this for? We’re not just after a job title, we’re after the persona of the person. Max. Our team should have a shared understanding of who Max is. We’ve hopefully interviewed plenty of Max’s. We understand how that person works, how they think and what they feel. We have empathy for Max.\n“Wants to”: Here we’re describing their intent — not the features they use. What is it they’re actually trying to achieve? This statement should be implementation free — if you’re describing any part of the UI and not what the user goal is you’re missing the point.\n“So that”: how does their immediate desire to do something this fit into their bigger picture? What’s the overall benefit they’re trying to achieve? What is the big problem that needs solving?\n\n\n\n\nUser stories are often expressed in a simple sentence, structured as above\n\n\n\n1.2.1 Scrum Alliance Website\nThe following example user stories were written to describe the functionality in an early version of the Scrum Alliance website. These stories were written in early 2004. Some stories are good, some aren’t.\n\nExample User Stories",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#definition-of-done-vs-acceptance-criteria",
    "href": "scrum/scrum-week2.html#definition-of-done-vs-acceptance-criteria",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "1.3 Definition of Done vs Acceptance Criteria",
    "text": "1.3 Definition of Done vs Acceptance Criteria\n\n\n\n\n\n\nImportant\n\n\n\nDefinition of Done (DoD) is a list of requirements that a user story must adhere to for the team to call it complete.\nWhile the Acceptance Criteria of a User Story consist of set of Test Scenarios that are to be met to confirm that the software is working as expected.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#invest",
    "href": "scrum/scrum-week2.html#invest",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "2.1 Invest",
    "text": "2.1 Invest\nhe INVEST mnemonic for Agile software development projects was created by Bill Wake as a reminder of the characteristics of a good quality Product Backlog Item (commonly written in user story format, but not required to be) or PBI for short.\nSuch PBIs may be used in a Scrum backlog, Kanban board, or XP project.\n\n\n\n\n\n\n\n\nLetter\nMeaning\nDescription\n\n\n\n\nI\nIndependent\nThe PBI should be self-contained.\n\n\nN\nNegotiable\nPBIs are not explicit contracts and should leave space for discussion.\n\n\nV\nValuable\nA PBI must deliver value to the stakeholders.\n\n\nE\nEstimable\nYou must always be able to estimate the size of a PBI.\n\n\nS\nSmall\nPBIs should not be so big as to become impossible to plan/task/prioritize within a level of accuracy.\n\n\nT\nTestable\nThe PBI or its related description must provide the necessary information to make test development possible.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#planning-poker",
    "href": "scrum/scrum-week2.html#planning-poker",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "2.2 Planning poker",
    "text": "2.2 Planning poker\n\n\n\nPlanning poker following Fibonacci numbers\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlanning poker, also called Scrum poker, is a consensus-based, gamified technique for estimating, mostly used for timeboxing in Agile principles.\nIn planning poker, members, estimators of the group make estimates by playing numbered cards face-down to the table, instead of speaking them aloud.\n\n\n\n\nThe use of the Fibonacci sequence (e.g., 1, 2, 3, 5, 8, 13) in estimation during Agile practices like Scrum is not rooted in neuroscience per se but is more aligned with cognitive and psychological principles. The Fibonacci sequence is often used to represent story points, which are a measure of effort or complexity.\nEach estimator has a physical or virtual deck of cards. These Planning Poker cards display values like 1, 2, 3, 5, 8, 13, 20, 40 and 100 (the modified Fibonacci numbers sequence). The values represent the number of story points, ideal days, or other units in which the team estimates.\nSo, the cards are revealed, and the estimates are then discussed. By hiding the figures in this way, the group can avoid the cognitive bias of anchoring, where the first number spoken aloud sets a precedent for subsequent estimates.\n\n\nWelcome to my open source Planning Poker web app",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#criticism",
    "href": "scrum/scrum-week2.html#criticism",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "2.3 Criticism",
    "text": "2.3 Criticism\nWhile Planning Poker is a popular estimation technique in Scrum, it has potential drawbacks.\nIt can be time-consuming, especially in larger teams, leading to extended planning sessions. The subjective nature of the method may result in biased estimates, as individuals with more influence can sway the consensus. Additionally, team members might hesitate to challenge senior members’ estimates, hindering accurate assessments.\nMisinterpretation of story points and the gamification aspect may also undermine the seriousness of the process. Striking a balance between efficiency and precision is crucial to mitigate these issues and ensure Planning Poker’s effectiveness in Scrum.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#themes",
    "href": "scrum/scrum-week2.html#themes",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "3.1 Themes",
    "text": "3.1 Themes\nA collection of stories by category. Like a jar for cookies, it’s a container of stories. By its nature, an epic can also be a theme in itself. They should refer to a business goal.\n\nAn example of a theme: “Agile Board”.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#epics",
    "href": "scrum/scrum-week2.html#epics",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "3.2 Epics",
    "text": "3.2 Epics\nAn epic is a larger story. A requirement that is too big to deliver in a single sprint and need to be broken into smaller deliverables (stories). Epics are progressively broken into a set of smaller user stories at the appropriate time.\n\nAn example epic: “As a team leader, I want to be have an agile SCRUM board so that I can easily manage the work of my team”.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#user-stories-or-just-stories",
    "href": "scrum/scrum-week2.html#user-stories-or-just-stories",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "3.3 User-Stories or just stories",
    "text": "3.3 User-Stories or just stories\nOften referred to as Product Backlog Item or Work Item.\n\nAn example user story: “As a team leader, I want to be able to see tasks as cards on an agile SCRUM board so that I can easily see who’s working on what”.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#tasks-1",
    "href": "scrum/scrum-week2.html#tasks-1",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "3.4 Tasks",
    "text": "3.4 Tasks\nhe elements that build up for a story. Some teams don’t divide their stories into tasks, as they prefer to work vertically. Splitting stories into tasks encourages teams to split work horizontally.\n\nAn example of a task: “Create collapse/expand buttons”.\n\n\n\n\n\n\n\nNote\n\n\n\nTasks often follow the SMART acronym: specific, measurable, achievable, relevant, time-boxed (although what the letters stand for seems to be hotly debated).",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#atomic-habits",
    "href": "scrum/scrum-week2.html#atomic-habits",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "4.1 Atomic Habits",
    "text": "4.1 Atomic Habits\nAtomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones\nNo matter your goals, Atomic Habits offers a proven framework for improving—every day. James Clear, one of the world’s leading experts on habit formation, reveals practical strategies that will teach you exactly how to form good habits, break bad ones, and master the tiny behaviors that lead to remarkable results.\nIf you’re having trouble changing your habits, the problem isn’t you. The problem is your system.\nBad habits repeat themselves again and again not because you don’t want to change, but because you have the wrong system for change. You do not rise to the level of your goals. You fall to the level of your systems. Here, you’ll get a proven system that can take you to new heights.\nJames Clear is known for his ability to distill complex topics into simple behaviors that can be easily applied to daily life and work. Here, he draws on the most proven ideas from biology, psychology, and neuroscience to create an easy-to-understand guide for making good habits inevitable and bad habits impossible.\nLearn how to:\n\nMake time for new habits (even when life gets crazy);\nOvercome a lack of motivation and willpower;\nDesign your environment to make success easier;\nGet back on track when you fall of",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#build-identity-based-habits",
    "href": "scrum/scrum-week2.html#build-identity-based-habits",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "4.2 Build identity-based habits",
    "text": "4.2 Build identity-based habits\n\n\n\nOutcome-based habits vs Identity-based habits\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe ultimate form of intrinsic motivation is when a habit becomes part of your identity.\nIf you want to build a reading habit, your goal is not to read books but to become a reader. If you want to build a running habit, your goal is not to run a marathon but to become a runner.",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week2.html#the-habit-loop",
    "href": "scrum/scrum-week2.html#the-habit-loop",
    "title": "Week 2: User stories, Tasks and Habits",
    "section": "4.3 The Habit Loop",
    "text": "4.3 The Habit Loop\nThe cue triggers a craving. Then it motivates a response. And it provides a reward, which satisfies the craving and finally becomes associated with the cue.\n\nCue\nCraving\nResponse\nReward\n\n\n\n\nCue -&gt; Craving -&gt; Response -&gt; Reward\n\n\n\n\n\nCue: make it obvious; Craving: make it attractive; Response: make it easy; Reward: make it satisfying",
    "crumbs": [
      "Weeks",
      "Week 2: User stories, Tasks and Habits"
    ]
  },
  {
    "objectID": "scrum/scrum-week3.html",
    "href": "scrum/scrum-week3.html",
    "title": "Week 3: Delivering Value & Communication",
    "section": "",
    "text": "📘 Summary: SCRUM Week 3 - Delivering Value & Communication\nIn SCRUM Agile methodology, effective communication and value delivery play pivotal roles in fostering collaboration and project success. Communication should be clear, concise, and tailored to the audience, ensuring messages resonate with their needs and interests. Actively listening, providing practical solutions, and setting clear expectations are essential components of effective communication. Encouraging a feedback loop and following up on interactions contribute to ongoing improvement and commitment.\nThe importance of a common vocabulary cannot be overstated. Using the right words ensures clarity, reduces misunderstandings, and promotes shared understanding—crucial for effective collaboration. This principle extends to both written and spoken communication. In writing, clarity is paramount, and a feedback loop ensures the message is received as intended. In speaking, prioritizing clarity, adapting to the audience, and utilizing positive reinforcement contribute to impactful communication.\nAdditionally, the Pareto Principle underscores the significance of focusing efforts on the vital few aspects that yield the most significant results. Multitasking is discouraged as it hampers productivity and quality, leading to cognitive deficits. Finally, an awareness of cognitive biases, such as the halo effect, emphasizes the need for objective judgment to avoid distorted perceptions.",
    "crumbs": [
      "Weeks",
      "Week 3: Delivering Value & Communication"
    ]
  },
  {
    "objectID": "scrum/scrum-week3.html#the-mom-test",
    "href": "scrum/scrum-week3.html#the-mom-test",
    "title": "Week 3: Delivering Value & Communication",
    "section": "2.1 The mom test",
    "text": "2.1 The mom test\nThe Mom Test: How to talk to customers & learn if your business is a good idea when everyone is lying to you\n\n\nThe Communication Book provides 44 communication techniques that can be used in everyday situations to improve communication skills.\n\nThe book says you shouldn’t ask your mom whether your business is a good idea, because she loves you and will lie to you. This is technically true, but it misses the point.\nYou shouldn’t ask anyone if your business is a good idea.\nIt’s a bad question and everyone will lie to you at least a little.\nAs a matter of fact, it’s not their responsibility to tell you the truth: It’s your responsibility to find it and it’s worth doing right.",
    "crumbs": [
      "Weeks",
      "Week 3: Delivering Value & Communication"
    ]
  },
  {
    "objectID": "scrum/scrum-week3.html#words-common-vocabulary",
    "href": "scrum/scrum-week3.html#words-common-vocabulary",
    "title": "Week 3: Delivering Value & Communication",
    "section": "2.2 Words: common vocabulary",
    "text": "2.2 Words: common vocabulary\n\n\n\n\n\n\nTip\n\n\n\nUsing the right words and a common vocabulary is crucial for effective communication.\n\n\nIt ensures clarity, reduces misunderstandings, and promotes a shared understanding.\nPrecision in language choice minimizes confusion and facilitates seamless dialogue in various contexts—be it professional interactions or personal relationships.\nA common and concrete vocabulary establishes a baseline for meaningful communication, fostering connection and collaboration.\n\nVocabulary SCRUM",
    "crumbs": [
      "Weeks",
      "Week 3: Delivering Value & Communication"
    ]
  },
  {
    "objectID": "scrum/scrum-week3.html#writing",
    "href": "scrum/scrum-week3.html#writing",
    "title": "Week 3: Delivering Value & Communication",
    "section": "2.3 Writing",
    "text": "2.3 Writing\n\n\n\nJeff Bezos on Why, What, etc..\n\n\n\n\n;document.getElementById(\"tweet-91995\").innerHTML = tweet[\"html\"];\nIn effective writing, clarity is paramount. Clearly articulate your message, tailoring it to your audience’s needs.\nUse concise language to convey ideas efficiently, avoiding unnecessary complexity. Employ a feedback loop, welcome input, and adapt your writing style accordingly. Illustrate points with relevant examples for enhanced understanding. Positive reinforcement in your writing can engage readers, and thoughtful follow-up ensures the communication loop is complete. By concentrating on these principles—clarity, conciseness, adaptability, engagement, and follow-up—you create written communication that is not only informative but also impactful and conducive to meaningful interactions.\n\nWritting",
    "crumbs": [
      "Weeks",
      "Week 3: Delivering Value & Communication"
    ]
  },
  {
    "objectID": "scrum/scrum-week3.html#speaking",
    "href": "scrum/scrum-week3.html#speaking",
    "title": "Week 3: Delivering Value & Communication",
    "section": "2.4 Speaking",
    "text": "2.4 Speaking\nIn effective speaking, prioritize clarity and conciseness to convey your message with precision. Tailor your spoken words to your audience, considering their needs and understanding.\nActively listen, responding thoughtfully to promote engagement. Positive reinforcement in speech fosters a collaborative atmosphere. Adapt your speaking style based on feedback, ensuring effective communication. Utilize relevant examples and visuals to enhance understanding. Follow up verbally to reinforce key points and maintain connections. By concentrating on clarity, audience adaptation, engagement, feedback, and reinforcement, your spoken communication becomes not just informative but also impactful, fostering meaningful interactions and connections with your audience.\n\nTips",
    "crumbs": [
      "Weeks",
      "Week 3: Delivering Value & Communication"
    ]
  },
  {
    "objectID": "scrum/scrum-week4.html",
    "href": "scrum/scrum-week4.html",
    "title": "Week 4: ScrumMaster, how it works",
    "section": "",
    "text": "📘 Summary: SCRUM Week 4 - ScrumMaster, how it works\nThe role of a ScrumMaster stands out as crucial for success in Agile methodologies. Acting as a linchpin between stakeholders, product owners, and development teams, a ScrumMaster takes on multifaceted responsibilities.\nThey ensure cohesion, motivation, and adherence to timelines within budget constraints. Akin to a servant-leader, a ScrumMaster coaches, facilitates, and removes impediments, steering teams towards high-value increments and adherence to the Definition of Done.\nContrary to traditional leadership, a ScrumMaster shares power, prioritizing the team’s growth and well-being. They do not engage in traditional managerial tasks but focus on help teams to self-manage and excel.\nThe ScrumMaster serves the Scrum Team, Product Owner, and the organization at large, playing a pivotal role in Scrum adoption and implementation.",
    "crumbs": [
      "Weeks",
      "Week 4: ScrumMaster, how it works"
    ]
  },
  {
    "objectID": "scrum/scrum-week4.html#team-leader-vs-scrum-master",
    "href": "scrum/scrum-week4.html#team-leader-vs-scrum-master",
    "title": "Week 4: ScrumMaster, how it works",
    "section": "5.1 Team Leader vs Scrum Master",
    "text": "5.1 Team Leader vs Scrum Master\nThe Scrum Master role is definitely not a “manager” role, and the Scrum Master is not directly in charge of any person or piece of work.\n\n\nTeam Leader is an old and established role. Its real meaning varies from context to context. And from what type of team and what type of specialist.\nEarlier versions of the Scrum Guide emphasised this and referred to the role as a servant leader role.\nWhile they are not a manager, and definitely not a project manager, a good Scrum Master is in fact a leader.\nThey are meant to challenge the team and push them out of their comfort zone. They are not meant to be a passive listener and just a meeting organizer or facilitator.",
    "crumbs": [
      "Weeks",
      "Week 4: ScrumMaster, how it works"
    ]
  },
  {
    "objectID": "scrum/scrum-week4.html#team-canvas",
    "href": "scrum/scrum-week4.html#team-canvas",
    "title": "Week 4: ScrumMaster, how it works",
    "section": "6.1 Team canvas",
    "text": "6.1 Team canvas\n\n\n\nTeam canvas is Business Model Canvas\n\n\n\n\n\n\n\nBusiness Model Generation\n\n\nBusiness Model Generation teaches you how to systematically understand, design and differentiate your business model.\nThe Team canvas is Business Model Canvas for teamwork. It is a free tool for leaders, facilitators and consultants to organize team alignment meetings and bring members on the same page, resolve conflicts and build productive culture, fast.",
    "crumbs": [
      "Weeks",
      "Week 4: ScrumMaster, how it works"
    ]
  },
  {
    "objectID": "scrum/scrum-week4.html#the-5-stages-of-team-development",
    "href": "scrum/scrum-week4.html#the-5-stages-of-team-development",
    "title": "Week 4: ScrumMaster, how it works",
    "section": "7.1 The 5 Stages of Team Development",
    "text": "7.1 The 5 Stages of Team Development\nUnderstanding the five stages of team development enables you to get teams started, resolve conflicts more smoothly, share information effectively, achieve top results, and then review outcomes to keep finding ways to improve.\n\n\n\nStages Team\n\n\n\nForming: This is where team members first meet. It’s important for team leaders to facilitate the introductions and highlight each person’s skills and background. Team members are also given project details and the opportunity to organize their responsibilities.\nStorming: At this stage, team members openly share ideas and use this as an opportunity to stand out and be accepted by their peers. Team leaders help teams in this stage by having a plan in place to manage competition among team members, make communication easier, and make sure projects stay on track.\nNorming: By now, teams have figured out how to work together. There’s no more internal competition, and responsibilities and goals are clear. Each person works more efficiently because he or she has learned how to share their ideas and listen to feedback while working toward a common goal.\nPerforming: There’s a high level of cohesion and trust between team members. Teams are functioning at peak efficiency with less oversight from team leaders. Issues still come up, but at this point, teams have strategies for resolving problems without compromising timelines and progress.\nAdjourning: Teams complete their project and debrief on what went well and what could be improved for future projects. Afterwards, team members move on to new projects. Now let’s look at how to use this model to amplify",
    "crumbs": [
      "Weeks",
      "Week 4: ScrumMaster, how it works"
    ]
  },
  {
    "objectID": "spring/spring-servlets.html",
    "href": "spring/spring-servlets.html",
    "title": "Springs Servlets",
    "section": "",
    "text": "📘 Servlet\nA servlet in Java is a server-side technology that enables the handling of requests and responses between a client and a server.\nServlets are Java classes that extend the functionality of web servers and allow developers to dynamically generate web pages and other resources based on user requests.",
    "crumbs": [
      "Spring Legacy",
      "Springs Servlets"
    ]
  },
  {
    "objectID": "spring/spring-servlets.html#jsps-are-internally-compiled-into-java-servlets",
    "href": "spring/spring-servlets.html#jsps-are-internally-compiled-into-java-servlets",
    "title": "Springs Servlets",
    "section": "2.1 JSPs are Internally Compiled into Java Servlets",
    "text": "2.1 JSPs are Internally Compiled into Java Servlets\nThat is to say, anything that can be done using JSPs can also be accomplished using Java servlets.\nHowever, it is important to note that servlets and JSPs are complementary technologies, NOT replacement of each other.\n\nServlet can be viewed as HTML inside Java, which is better for implementing business logic - as it is Java dominant.\nJSP, on the other hand, is Java inside HTML, which is superior for creating presentation - as it is HTML dominant.\n\nIn a typical Model-View-Control (MVC) application:\n\nservlets are often used for the Controller (C), which involves complex programming logic.\nJSPs are often used for the View (V), which mainly deals with presentation.\nThe Model (M) is usually implemented using JavaBean or EJB.\n\n\n\n\nServlet life cycle",
    "crumbs": [
      "Spring Legacy",
      "Springs Servlets"
    ]
  },
  {
    "objectID": "spring/spring-servlets.html#apache-tomcat-server",
    "href": "spring/spring-servlets.html#apache-tomcat-server",
    "title": "Springs Servlets",
    "section": "2.2 Apache Tomcat Server",
    "text": "2.2 Apache Tomcat Server\nJSPs, like servlets, are server-side programs run inside a HTTP server.\n\n\n\n\n\n\nTomcat\n\n\n\nTo support JSP/servlet, a Java-capable HTTP server is required.\nTomcat Server is the official reference implementation (RI) for Java servlet and JSP, provided free by Apache.",
    "crumbs": [
      "Spring Legacy",
      "Springs Servlets"
    ]
  },
  {
    "objectID": "spring/spring-servlets.html#example-java-inside-html",
    "href": "spring/spring-servlets.html#example-java-inside-html",
    "title": "Springs Servlets",
    "section": "2.3 Example: Java inside HTML",
    "text": "2.3 Example: Java inside HTML\n\n\n\nRequest-Response cycle with URL and Java Methods: Spring 2.x\n\n\n\n2.3.1 Code example\nThis JSP code generates a random number and displays a message to the user based on the value of the number.\nIf the number is greater than 0.95, the user is told they will have a lucky day, and if the number is less than or equal to 0.95, the user is told that life goes on.\n\n\n\nDemoApplication.java\n\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;First JSP&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n  &lt;%\n    double num = Math.random();\n    if (num &gt; 0.95) {\n  %&gt;\n      &lt;h2&gt;You'll have a luck day!&lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt;\n  &lt;%\n    } else {\n  %&gt;\n      &lt;h2&gt;Well, life goes on ... &lt;/h2&gt;&lt;p&gt;(&lt;%= num %&gt;)&lt;/p&gt;\n  &lt;%\n    }\n  %&gt;\n  &lt;a href=\"&lt;%= request.getRequestURI() %&gt;\"&gt;&lt;h3&gt;Try Again&lt;/h3&gt;&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nThe random number is displayed along with the message, and the user is given the option to try again by clicking on a link that reloads the page.",
    "crumbs": [
      "Spring Legacy",
      "Springs Servlets"
    ]
  },
  {
    "objectID": "spring/spring-servlets.html#ejb-vs-spring",
    "href": "spring/spring-servlets.html#ejb-vs-spring",
    "title": "Springs Servlets",
    "section": "3.1 EJB vs Spring",
    "text": "3.1 EJB vs Spring\nEJB (Enterprise JavaBeans) and Spring are frameworks for developing enterprise applications in Java.\n\n\n\n\n\nEJB vs Spring\n\n\nBoth offer solutions for managing application components and facilitating enterprise-level features like transaction management and security. However, they differ in several key aspects.\nEJB is part of the Java EE platform, providing a standardized approach to building enterprise applications, while Spring is a lightweight and modular framework offering comprehensive support for dependency injection, aspect-oriented programming, and MVC architecture.\nSpring promotes loosely coupled components and easier unit testing compared to EJB, which traditionally requires a full-fledged Java EE container for deployment.\n\n\n\nEJB vs Spring",
    "crumbs": [
      "Spring Legacy",
      "Springs Servlets"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021backlog-product-24.html",
    "href": "ifcd0021-24/ifcd0021backlog-product-24.html",
    "title": "IFCD0021 Product Backlog",
    "section": "",
    "text": "Backlog course",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021backlog-product-24.html#september-2024",
    "href": "ifcd0021-24/ifcd0021backlog-product-24.html#september-2024",
    "title": "IFCD0021 Product Backlog",
    "section": "September 2024",
    "text": "September 2024\n\nBacklog course September 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#01\n1\n09/09/2024\n- Mindset - Presentation: web, why i do not like full stack definition (netflix definition), what is a dev (2022-25), scrum/agile? AI?, what is this course and what is not (personal tutor, university, an oportunity to learn and code and not getting a title, java), learning is (your responsibility: ask, debate, speak, be active, balance in class: positive emotions and active dynamics), how to learn - POO & Java (SE & EE: Spring Boot)  - Systems: gitHub, Linux (VirtualBox SSD ext), VCode, IntellIJIdea, MOOC Helsinki, Markdown, NextCloud, FlameShot, Jitsi  -  Lateralization   - Homework: what is Pareto Principle?\n- albertprofe.dev  - Unveiling the Technological Marvels behind Netflix’s Seamless Experience  - Jit Si Meet fullstack2024\n\n\n\n2\n10/09/2024\n- Lateralization, how to learn, pareto  - SCRUM fundamentals  - Java Dependencies Management: Maven  - POO: methods  - GitHub: create repo, commit, push,..  - UML    Homework: Pareto examples, Kind of problems? Simple, Complicated, Complex, Kaotic, SCRUM Guide\n- git basics  - gh auth login - UML- Maven Create Project  - Push to git  - UML Mermaid\n\n\n\n3\n12/09/2024\n- POO: methods & static modifier  - UML:  (1) Keep it simple, Do not run, Foucs and get things done  (2) Class Diagram, Core Classes, DDD  ++ Comunication relevance: job interview, team, good prompts, defining bugs  UML: multiplicity, 1:1, 1:n, n:m\n- Projects UML  - Git  - Git tutorial  \n\n\n\n4\n13/09/2024\n- POO: class, object, model, MVC, methods, new  - UML\n- Lab#SE04-1  - MOOC: Objects and references  - Restaurant Java\n\n\n#02\n5\n16/09/2024\n- Metrics: plan-execute-review-reflexionate - Lab#Restaurant:  (1) DDD  (2) Model  (3) Hashmap data structure  (4) core concepts: micro & macro and then architecture  (5) Data & Operation flux  - Git\n- POO: objects  - Lab#SE04-1  - MOOC: Objects and references  - Restaurant Java: calculateTotalPayment() methods, static and scope and hash\n\n\n\n6\n17/09/2024\n- Lab#Restaurant:  (1) JUnit  (2) Model  (3) Fake data: database with HashMap  - Git: fork,clone, branch, commit, push and pull request\n- POO: scope  - Lab#SE04-1  - MOOC: Objects and references  - Restaurant Java: calculateTotalPayment() implemented  - Git Checkout  - gh repo fork\n\n\n\n7\n18/09/2024\n- Lab#Restaurant:  (1) Business Logic & Controller  (2) Entity Manager  (3) utils domain: create and use Entities - Git: pull request management from IDE  - SCRUM  Project management: project-DDD-UML-code\n- POO: static  - Lab#SE04-1  - Restaurant Java: DDD, utils & repo  - Restaurant Java: testOrder() and printStatusTable() in Utilities\n\n\n\n8\n19/09/2024\n- Lab#Restaurant:  (1) Business Logic & Controller  (2) Entity Manager  - Git   HW: 3 keywords for Restaurant domains \n- POO: TDD  - Lab#SE04-1  - Restaurant Java: controller domain implemented with testOrder() and printStatusTable()  - Restaurant Java: managers domain created and testOrder() to manager\n\n\n\n9\n20/09/2024\n- Lab#Restaurant:  (1) UML diagrams flux data  (2) skeleton MenuManager and TableManager  (3) createOrder() pseudo-code  - SCRUM:  (1) plan-execute-review-reflexionate  (2) Albertu’s dylema \n- POO: Coupling  - Restaurant Java: skeleton TableManager and MenuManager  - createOrder  - how to iterate hashMap\n\n\n#03\n10\n23/09/2024\n- Lab#Restaurant:  (1) Business Logic & Controller: createOrder  (2) Entity Manager (Table, Menu)  (3) createOrder: decopule, foreach, return, printOrder, order saved, error try/catch, table to busy, key id   HW: plan this week \n- POO: Coupling  - createOrder  - createOrder v3.0  - How to iterate hashMap  - Lab#SE02-2: HashMaps  - HashMaps Example  - HashMpas Tutorial \n\n\n\n11\n25/09/2024\n- Lab#Restaurant:  (1) Business Logic & Controller: createOrder  (2) Entity Manager (Table, Menu)  (3) createOrder: decopule, foreach, return, printOrder, order saved, error try/catch, table to busy, key id  - Git: Udea \n- createOrder v4.0  - createOrder v5.0  - createOrder v3.4  - How to iterate hashMap  - Lab#SE04-1  - Lab#SE02-2: HashMaps  - HashMaps Example  - HashMpas Tutorial  - Idea: manage commits  - Idea Git\n\n\n\n12\n26/09/2024\n- Lab#Restaurant:  (1) Business Logic & Controller  (2) Entity Manager (Table, Menu)  (3) createOrder: test JUnit and Mockito- Git  - SCRUM: Why planning is so important \n- POO: TDD  - dependency Mockito  - createOrder test  - JUnit 5  - Mockito - SCRUM: concepts - SCRUM: guide -  Git \n\n\n\n13\n27/09/2024\n- Lab#Restaurant:  (1) Business Logic & Controller  (2) Entity Manager (Table, Menu)  (3) createOrder: test JUnit and Mockito and use-case no-table available  (4) Booking table class & status management (present and future)  (5) Take Away: inherence, type object or two classes?  - Git  - SCRUM: plan-execute-review-reflexionate \n- SCRUM: concepts - SCRUM: guide - createOrder tests: calculateTotalPayment - Git",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021backlog-product-24.html#october-2024",
    "href": "ifcd0021-24/ifcd0021backlog-product-24.html#october-2024",
    "title": "IFCD0021 Product Backlog",
    "section": "October 2024",
    "text": "October 2024\n\nBacklog course October 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#04\n14\n30/09/2024\n- Time management: habits, metrics and time-boxing - Sprring:  (1) What is Spring  (2) Spring Boot  (3) Create a Spring Boot Project\n- Spring  - Spring Boot  - Spring Init  - Spring Boot: create project - Lab#SB08-1\n\n\n\n15\n01/10/2024\n- Time management: bad habits and mindset, growth, fixed, survival  - Spring Boot:  (1) @Controler and @RestController  (2) Project structure & Spring Architecture  (3) application.properties   (4) Model  ++ DevOps strategies MV: timeshift, clone, virtualBox snapshot, docs at cloud  ++ Pavoland\n- Pavoland     - SCRUM: mindset  - Spring Boot  - Spring Boot: create project  - Spring Boot: create full project  - Lab#SB08-1\n\n\n\n16\n02/10/2024\n- Lab#SB08-1 Spring Boot RestaurantVaadin:  (1) @RestController and @Service  (2) Project structure & Architecture  (3) JPA and H2  (4) view: Vaadin  (4) Model: @Entity\n  - RestaurantVaadin - Lab#SB08-1  - Spring Boot: Data  - Spring Boot: JPA  - Spring Boot: Model  - Vaadin tutorial  - Vaadin start app  - Vaadin demo  - API rest\n\n\n\n17\n03/10/2024\n- Lab#SB08-1 Spring Boot RestaurantManager:  (1) Model @Entity Customer  (2) Template: TH  (3) @RestController & @Controller  (4) application.properties (5) JPA and H2 -  Git \n  - Lab#SB08-1  - Spring Boot: Rest  - RestaurantManager code  - Thymeleaf - H2 DB  - Spring TH  - Spring Boot Data\n\n\n\n18\n04/10/2024\n- Lab#SB08-1 Spring Boot RestaurantManager:  (1) Model Restaurant @Entity  (2) CRUD @RestController  (3) Interface @Service and @ServiceImpl  ++ Query creation from method names  ++ Swagger - Git  ++ Markdown: document\n- Lab#SB08-1  - Spring Boot: Rest  - Defining Query Methods - Query creation from method names  - Swagger  - Redis  - Spirng Boot create H2 TH  - Markdown\n\n\n#05\n19\n07/10/2024\n- Lab#SB08-3 Spring Boot RestaurantManager:  (1) Model @Entity Customer (& Order)  (2) API Rest: @RestController with Swagger  (3) @CustomerService and @CustomerServiceImpl  (4) application.properties (5) JPA and H2  ++ Spring MVC, Boot, JEE and Jakarta  ++ ResponseEntity\n  - Lab#SB08-3  - Transition from Java EE to Jakarta EE  - Spring MVC\n\n\n\n20\n08/10/2024\n- Lab#SB08-3 Spring Boot RestaurantManager:  (1) Model @Entity Customer & Order  (2) API Rest: @RestController with Swagger  (3) @OrderService and @OrderServiceImpl  (4) application.properties with local H2 DB  (5) JPA and H2    HW: @Table, @Menu RestController, Interface Service and ServiceImpl, Repository with UUID \n- Lab#SB08-3 \n\n\n\n21\n09/10/2024\n- Lab#SB08-3 Spring Boot RestaurantManager:  (1) Model @Entity Customer & Order  (2) API Rest: @RestController with Swagger  (3) @OrderService and @OrderServiceImpl   (4) application.properties with local H2 DB  (5) JPA and H2: JUnit to test DB  (6) Query methods JPA - ResponseEntity\n- Lab#SB08-3  - Defining Query Methods  - Query by Example  - JPA Query Methods  - Spring Boot: JPA & DI\n\n\n\n22\n10/10/2024\n- Lab#SB08-3 Spring Boot RestaurantManager:  (1) Model @Entitiy Table and Menu  (2) Inherence: Order (3) application.properties profiling: memory/local   - Git: gitTutorial project \n- Lab#SB08-3  - gitTutorial  - Git\n\n\n\n23\n11/10/2024\n- Lab#SB08-3 Spring Boot RestaurantManager:  (1) Model @Entitiy Table and Menu  (2) Inherence: Order  (3) .env   - Git: gitTutorial project  ++ JPA Entities Lifecycle\n- Lab#SB08-3  -Git Checkout  - JPA Entity Lifecycle Statuses: A Comprehensive Guide\n\n\n#06\n24\n14/10/2024\n- Planning Spring#6  - Lab#SB08-3 Spring Boot RestaurantManager:  (1) JPQL Queries & JUnit Tests  - Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Order  (2) Inherence: Order  (3) @ManyToOne relationship  (4) ORM (5) Annotations  -  ResponseEntity  - UML Inherence: Order\n- Lab#SB08-4  - Library2: API Rest Author Book @OneToMany CRUD with Swagger - Spring Boot: Data & DB  - Spring Boot: JPA & DI  -Spring Boot: JPA Mappings  - AOP    \n\n\n\n25\n15/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Order & Customer  (2) Inherence: Order &gt; OrderRestaurant  (3) @ManyToOne relationship  (4) ORM: mappings  (5) Annotations  ++ (6) Unidirectional and Bidirectional  ++ Serializable\n- Spring Boot: Data & DB  - Spring Boot: JPA & DI  - Spring Boot: JPA Mappings  - Lab#SB08-4 \n\n\n\n26\n16/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Order, Bookings and Table  (2) @ManyToMany relationship  (3) @ManyToOne relationship  (4) ORM (5) Annotations  (6) Bidirectional relationship 1:n  (7) Casting \n- Spring Boot: Data & DB  - Spring Boot: JPA & DI  - Spring Boot: JPA Mappings  - Lab#SB08-4  \n\n\n\n27\n17/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Order  (2) Inherence: Order implementation  (3) Refactor and update TestCreateOrder()  (4) API Rest url, controller and faker to populate whole project - Git: gitTutorial project  \n- Lab#SB04-1: JPA Inherence  -Spring Boot Projects JPA Inherence strategies  - Lab#SB08-4  - commit 85a23ab    - Lab#SB08-4\n\n\n\n28\n18/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Order & Booking n:m join table  (2) Inherence: Order implementation  ++ (3) All classes Model to @Entity  - Git: gitTutorial project:  (1) reset, revert, remove  ++ (2) Script: Automate GhSync Fork to Local \n- Lab#SB04-1: JPA Inherence  - Spring Boot Projects JPA Inherence strategies  - Git Changes  - Lab#SB08-4  - Who’s Using Amazon Web Services? [2023]  - Your app’s front door  - Choosing the Right DynamoDB Partition Key  - Automate GhSync Fork to Local  - JSON editor / WebHookCool\n\n\n#07\n29\n21/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Order & Menu  (2) Model @Entity Menu & MenuItems  (3) @ManyToMany relationship: Order & Menu  (4) Test JUnit: assign  (5) Annotations: @JoinTable   ++ Agile:  (0) Decision Making: why we do not choose the simple steps? (1) KEEP IT SIMPLE vs THINK BIG  (2) How to create an effective anti-gas policy?\n- Spring Boot: Data & DB  - Spring Boot: JPA & DI  - Spring Boot: JPA Mappings  - Lab#SB08-4  - The soviet union delusion  - Pattern UML Customer-Product\n\n\n\n30\n22/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Order & Menu  (2) Model @Entity Menu & MenuItems  (3) @ManyToMany relationship: Order & Menu  (4) Test JUnit: assign many-to-many  (5) Annotations   ++ Booking: designing many-to-many join table as @Entity  ++ Order inherence: interface? abstract?\n- Spring Boot: Data & DB  - Spring Boot: JPA & DI  - Spring Boot: JPA Mappings  - Lab#SB08-4   \n\n\n\n31\n23/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Customer, Booking and Table  (2) Model @Entity Booking Join Table  (3) Many-To-Many relationship:Customer, Booking and Table  (4) Test JUnit: assign  (5) Annotations    ++ Equals : identity by memory address or fields\n- Spring Boot: Data & DB  - Spring Boot: JPA & DI  - Spring Boot: JPA Mappings  - Lab#SB08-4   - public void testAddingMenusToOrder() no-equals  - public void testAddingMenusToOrder() equals  - Heap and Stack\n\n\n\n32\n24/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Customer, Booking and Table  (2) Model @Entity Booking Join Table  (3) Many-To-Many relationship:Customer, Booking and Table  (4) Test JUnit: assign  (5) Annotations  \n- Spring Boot: Data & DB  - Spring Boot: JPA & DI  - Spring Boot: JPA Mappings  - Lab#SB08-4   - Cascade and OrphanRemoval  - Example OrphanRemoval\n\n\n\n33\n25/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Model @Entity Customer, Booking and Table   - Git: gitTutorial project:  (1) clean, reset, revert, remove  (2) merge, rebase \n- Git Changes  - Lab#SB08-4    - Git Rebase  - Git CheatSheet  Merge vs. Rebase  - Conscious Competence Learning Model\n\n\n#08\n34\n28/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Inherence: Order implementation  (2) Order: Interface? Abstract? Record? Sealed?  (3) Order n:m Menu refactor  (4) H2-DB to local  (5) Populate H2-DB data and relationships  - Git: gitTutorial project:  (1) undo  (2) Rebase vs. Merge    ++ DevOps: bash, curl\n- Lab#SB08-4  - Java meets TypeScript  - A Spring Developers Guide to Navigating the Frontend  - simplify-boot  - GitHub zip code to dropbox  - PRA04: Refactoring Many-to-Many Relationship in RestaurantManager\n\n\n\n35\n29/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Inherence: Order implementation  (2) Order: Interface? Abstract?   (3) Order n:m Menu refactor  ++ (4) API Rest: data structure and nested objects  - Git: gitTutorial project:  (1) undo  (2) Rebase vs. Merge  ++ API-First paradigm\n- Lab#SB08-4  - Guide to API-first  - CrackJson  - API rest data structure\n\n\n\n36\n30/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Inherence: Order implementation  (2) Order: Interface? Abstract?  (3) @Service and @RestController of all @Entitty  (4) Profile Local H2  (5) DataLoader and DataPopulate  \n- Lab#SB08-4  - DataLoader  \n\n\n\n37\n31/10/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Inherence: Order implementation  (2) Order: Interface? Abstract?  (3) @Service and @RestController  (4) Inherence: type strategies to save data   ++ Implement Order as Abstract:  (1) branch: feature-order-abstract\n- Lab#SB08-4  - JPA 1: Dependence Injection - JPA 2: Mappings - JPA 3: Relationships - JPA 4: Queries - JPA 5: Inherence  - JPA Inherence strategies  - OrderRestaurant refactor to abstract class and test createOrdersTest()  - @MappedSuperClass  - SINGLE_TABLE  - JOINED  - TABLE_PER_CLASS",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021backlog-product-24.html#november-2024",
    "href": "ifcd0021-24/ifcd0021backlog-product-24.html#november-2024",
    "title": "IFCD0021 Product Backlog",
    "section": "November 2024",
    "text": "November 2024\n\nBacklog course November 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#09\n38\n04/11/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Inherence: Order implementation  (2) Inherence: type strategies to save data  (3) Implement Order as Abstract (4) branch: feature-order-abstract  (5) Test: @Transient & @Transactional  - JPA Annotations  - POJO, @Bean and @Entity  ++ Java Pagination:  (1) Pageable  (2) Page  (2) PageRequest\n- Lab#SB08-4  - JPA 1: Dependency Injection - JPA 2: Mappings - JPA 3: Relationships - JPA 4: Queries - JPA 5: Inherence - JPA Annotations  - JPA Inherence strategies  - OrderRestaurant refactor &gt; abstract  - @MappedSuperClass / - SINGLE_TABLE / - JOINED / - TABLE_PER_CLASS   - Library6 / - BooksPageable\n\n\n\n39\n05/11/2024\n- Lab#SB08-4 Spring Boot RestaurantManager:  (1) Inherence: Order implementation  (2) Inherence: type strategies to save data  (3) Implement Order as Abstract (4) branch: feature-order-abstract  (5) Test: @Transient   - PRA05: Spring Boot JPA Inheritance and Abstraction \n- Lab#SB08-4  - Interface  - Inherence\n\n\n\n40\n06/11/2024\n- Scaling Spring Boot:  (1) DTO: Data Transfer Object  (2) Auditing  (3) Pagination  (4) Spring Batch  (5) Caching  (6) Wrappers    ++ API Rest Testing: from Bash to JUnit with H2 local server\n- Lab#SB08-5  - Scaling  - Auditing  - Transactionality  - Paging, Iterating Large Results, Sorting & Limiting  - DTO Book example\n\n\n\n41\n07/11/2024\n- Scaling Spring Boot:  (1) DTO: Data Transfer Object  (2) Auditing  (3) Pagination  (4) Spring Batch  (5) Caching  (6) Wrappers  ++ Test JUnit Order &lt;1:n&gt; Qty: OrderRepositoryTest\n- Lab#SB08-4: Test Order-Qty  - Lab#SB08-5   - Scaling  - Auditing  - Transactionality  - Paging, Iterating Large Results, Sorting & Limiting  - Uncle Bob: good architecture  - This is How I Scrape 99% of Sites\n\n\n\n42\n08/11/2024\n- Git: gitTutorial project:  (1) undo  (2) Rebase vs. Merge   ++ AWS Intro\n- Undoing Commits & Changes  - Git Repository Management Scripts  - AWS Main Services  \n\n\n#10\n43\n11/11/2024\n\n\n\n\n\n44\n12/11/2024\n\n\n\n\n\n45\n13/11/2024\n\n\n\n\n\n46\n14/11/2024\n\n\n\n\n\n47\n15/11/2024\n\n\n\n\n\n48\n18/11/2024\n\n\n\n\n\n49\n19/11/2024",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021deliveries-24.html",
    "href": "ifcd0021-24/ifcd0021deliveries-24.html",
    "title": "IFCD0021 Calendar & Deliveries",
    "section": "",
    "text": "Calendar & Deliveries\n\n\n\nCalendar 2024\n\nInici-final de curs: 09/09/2024-19/11/2024\n\n\n\n\nCalendar 2024\n\n\n\nCalendar 2024\n\n\n\nPlanificació didàctica\n\n\n\nPlanificació didàctica de l’ACCIÓ Formativa\n\n\n\n\nDeliveries\nAlways in Quarto/Wiki .md format and code in GitHub repositories (or Organizations). Deliveries via github or similar:\n\n\nDeliveries table\n\n\n\n\n\n\n\nCode\nLink doc\nDescription\n\n\n\n\nMF01\nPull Request to AlbertProfe github\n\n\n\nMF02\n- PRA01\nSpring Boot JPA Repository and Entity Class Exercise\n\n\nMF03\n- PRA02 - PRA03\nImplementing OneToMany and ManyToOne Relationships in JPA / Implementing ManyToMany Relationships in JPA \n\n\nMF04\n- PRA04  - PRA05\nRefactoring Many-to-Many Relationship in RestaurantManager / Spring Boot JPA Inheritance and Abstraction\n\n\nMF05\n- PRA06\nSpring Boot Conference Management with Vaadin\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Calendar & Deliveries"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044.html",
    "href": "ifcd044/ifcd044.html",
    "title": "IFCD044 Docs",
    "section": "",
    "text": "Nom del Curs: Desenvolupament de programari amb metodologies àgils: SCRUM\nHores: 110 h\nFamília professional: Informàtica i Comunicacions\nÀrea Professional: Desenvolupament\nEspecialitat: IFCD044\nNivell: 3",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Docs"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044.html#identificació-del-certificat-de-professionalitat",
    "href": "ifcd044/ifcd044.html#identificació-del-certificat-de-professionalitat",
    "title": "IFCD044 Docs",
    "section": "",
    "text": "Nom del Curs: Desenvolupament de programari amb metodologies àgils: SCRUM\nHores: 110 h\nFamília professional: Informàtica i Comunicacions\nÀrea Professional: Desenvolupament\nEspecialitat: IFCD044\nNivell: 3",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Docs"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044.html#programa-formatiu-.pdf",
    "href": "ifcd044/ifcd044.html#programa-formatiu-.pdf",
    "title": "IFCD044 Docs",
    "section": "Programa formatiu (.pdf)",
    "text": "Programa formatiu (.pdf)\n\nDesenvolupament de programari amb metodologies àgils: SCRUM\nFitxa Desenvolupament de programari amb metodologies àgils: SCRUM",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Docs"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044.html#calendar-2023-scrum-ifcd044",
    "href": "ifcd044/ifcd044.html#calendar-2023-scrum-ifcd044",
    "title": "IFCD044 Docs",
    "section": "Calendar 2023 SCRUM IFCD044",
    "text": "Calendar 2023 SCRUM IFCD044\n\nInici i final de curs: des de 15 de Novembre a 15 de Desembre\nTotal Sprints: #5\n\n\n\n\nCalendar IFCD044",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Docs"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044.html#continguts",
    "href": "ifcd044/ifcd044.html#continguts",
    "title": "IFCD044 Docs",
    "section": "Continguts",
    "text": "Continguts\n\nMòdul 1: Desenvolupament de programari amb metodologies àgils: SCRUM\n\nMetodologies àgils\nMètodes\nScrum\nEines de gestió\n\n\n\nObjectius\n\nGestionar projectes de desenvolupament de programari aplicant la metodologia àgil SCRUM.\n\n\n\nEntorn professional i ocupacions\nEl/la professional gestiona la planificació, el desenvolupament i la execució dels projectes TIC adaptant-se a les incidències que puguin sortir per tal de portar-ho a bon terme fent servir les metodologies àgils com SCRUM.\nOcupacions: Consultors, analistes, analistes-programadors, tècnics, administradors i personal que hagi de gestionar o participar en projectes informàtics o de l’àmbit tecnològic.",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Docs"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044backlog-sprint.html",
    "href": "ifcd044/ifcd044backlog-sprint.html",
    "title": "IFCD044 Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044backlog-sprint.html#sprint5-team-dynamics-beforebeyond-scrum-december",
    "href": "ifcd044/ifcd044backlog-sprint.html#sprint5-team-dynamics-beforebeyond-scrum-december",
    "title": "IFCD044 Sprint Backlog",
    "section": "Sprint#5: Team Dynamics & Before/Beyond SCRUM (December)",
    "text": "Sprint#5: Team Dynamics & Before/Beyond SCRUM (December)\n\n\nSprint Backlog course December 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#5\n16\n11/12/2023\n- Before SCRUM  - Team Dynamics: We are not Rationals   - Mindset: survival vs growth  ++ smarter not harder: decision making (0) the illusion of knowledge  (1) agile: impediments, iteration and grow +1%  (3) intuition & creativity\n- Before SCRUM  - The soviet union delusion  - Antifragile  - Mindset matters  - S&P 500: $100 in 1957 → $67,136.47 in 2023 / S&P-1 / S&P-2\n\n\n\n17\n12/12/2023\n- Emotions and Thoughts  - Moral Emotions and Rider/Elephant   - Team Dynamics: We are not Rationals  - What is the illusion of knowledge? There is a unique tool, master-key, to solve all questions: knowing everything  - Debate: the main source of knowledge acquisition\n- Team Dynamics  - The illusion of knowledge II  \n\n\n\n18\n13/12/2023\n- Emotions and Thoughts  - Moral Emotions and Rider/Elephant \nEmotions and Thoughts\n\n\n\n19\n14/12/2023\nFCOO03 Inserció Laboral, sensibilització medi ambiental igualtat de gènere   - Decision Making  ++ Steps to decision making:  (1) info, purpose, mental-energy  (2) place, time, ritual  (3) decision comes to you via intuition  ++ How to create your own Clear Thinking to make good decisions  (1) physical path: nutrition, exercise, stress, mental health  (2) own habits to create context where you make decisions: music, walk, sea or mountain, silence, shower  (3) learn to recognize intuition  - Book: Range & Generalists  - Books presentation: Focus, Master and his Emissary, The Righteous Mind\n- Range: Why Generalists triumph in a specialized world  - Range  - List of emotions  - The zone\n\n\n\n20\n15/12/2023\nFCOO03 Inserció Laboral, sensibilització medi ambiental igualtat de gènere   - Beyond SCRUM  - Recommended books  - Finance: basics  - Mental Energy: basics  ++ We face impediments to understand our client through iterations and goals. This understanding in key to decision making and finding out the proper balances:  (1) mindset: fixed, growth, survival  (2) anti-fragile and lateralization  (3) identity, change and moral emotions (status game and rider/elephant)  (4) productivity vs. creativity\n- SCRUM test  - Books  - Brain Energy  - The Compound Effect\n\n\n\n\n\n\n\n\n\n\nLegend\n\n\n\n\n- &gt; topic planned and done\n- done &gt; topic not done in class (pending)\n++ &gt; not-planned new topic",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210deliveries-24.html",
    "href": "ifcd0210-24/ifcd0210deliveries-24.html",
    "title": "IFCD0210 Calendar & Deliveries",
    "section": "",
    "text": "Calendar & Deliveries\n\n\n\nCalendar 2023/2024\n\nInici-final de curs: 19/12/2023-27/06/2024\nPràctiques: July 2024\n\n\n2023\n\nDimarts 19/12/2023, Dijous 21/12/2023, Divendres 22/12/2023 (Calendar 2023)\n\n\n\n2024\n\n\n\nCalendar 2024\n\n\n\nCalendar 2024\n\n\n\n\nSyllabus\n\n\nIFCD0210, Desenvolupament d’aplicacions amb tecnologies web, 600h table\n\n\n\n\n\n\n\n\nCode\nDescription\nSyllabus\nHours\n\n\n\n\nMF0491_3\nProgramació web en l’entorn client\n\n180h\n\n\nUF1841\nElaboració de documents web mitjançant llenguatges de marca\nMarkUp intro, Quarto, Markdown tutorial, CSS Tutorial, W3.CSS Tutorial\n60h\n\n\nUF1842\nDesenvolupament i reutilització de components programari i multimèdia mitjançant llenguatges de guió\nDeep Dive Into Modern Web Development, Full Stack Web Development, Full Stack\n90h\n\n\nUF1843\nAplicacions tècniques d’usabilitat i accessibilitat a l’entorn client\nReact, Learn React: Describing the UI\n30h\n\n\nMF0492_3\nProgramació web en l’entorn servidor\n\n240h\n\n\nUF1844\nDesenvolupament d’aplicacions web a l’entorn servidor\nMooc Java, Spring Boot, Git\n90h\n\n\nUF1845\nAccés a dades en aplicacions web de l’entorn servidor\nSpring Data\n90h\n\n\nUF1846\nDesenvolupament d’aplicacions web distribuïdes\nSpring JPA H2\n60h\n\n\nMF0493_3\nImplantació d’aplicacions web en entorns d’internet, intranet i extranet\n\n90h\n\n\nFCOO03\nFormació complementària\n\n10h\n\n\nMP0391\nMòdul de pràctiques professionals no laborals\n\n80h\n\n\n\n\n\n\nDeliveries\nAlways in Quarto/Wiki .md format and code in GitHub repositories (or Organizations). Deliveries via github or similar:\n\nDeliveries table\n\n\n\n\n\n\n\nCode\nDate\nDescription\n\n\n\n\nMF01-0491\n19/12/2023\nFront-end\n\n\nUF01-1841\n19/01/2024\nMarkup: HTML/MD/React\n\n\nUF02-1842\n19/02/2024\nPOOC: Components\n\n\nUF03-1843\n27/02/2024\nCSS/Router: Responsive & Multipage\n\n\nMF01-0491\n27/02/2024\n1. Prova objectiva: test 15 preguntes\n\n\n\n\n2. Avaluació Continuada: Java Mooc, React.dev exercises, Git exercises, Mindset tasks, Personal Project\n\n\n\n\n3. Prova pràctica, Web App front-end:  - Option A Quarto Web: Prototip WebApp Quarto: web multipage, markdwon/HTML, with github repository and gh-pages deployement, advanced features: markdown basics, figures, tables, Mermaid Diagrams, callout, cross-references, code highlighted, Document Listings  - Option B React Web: crete React App, 3 pages with Router and mapping JSON, 3 objects, print tables, cards and lists, navbar and footer\n\n\nMF02-0492\n29/02/2024\nBack-end\n\n\nUF01-1844\n\nLaboratori app MVC amb Spring Boot Thyemeleaf (alternatiu Rest) un objecte amb totes les operacions CRUD\n\n\nUF02-1845\n\nLaboratori app Spring Boot Thyemeleaf (opcional Rest) amb H2 JPA (alternatiu objectes amb Composition/Inherence)\n\n\nUF03-1846\n\nLaboratori app web amb React Hooks\n\n\nMF02-0492\n24/05/2024\nProva objectiva i prova pràctica (triar una opció) - Laboratori app Spring Boot amb React  - Laboratori Spring Boot Server-Data API Rest amb Spring Boot Client-Web-Thymeleaf  - Laboratori app Spring Boot Thynmeleaf deployat a AWS  - Laboratori app web amb React Hooks amb Data API Rest\n\n\nMF03-0493\n27/05/2024\nProject\n\n\nUF01\n\nCrear app web CRUD amb db en servidor remot Spring Boot i gestió de dades amb API fetch (opcional altres tech) JS React\n\n\nMF03-0493\n21/06/2024\nProva objectiva i prova pràctica\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Calendar & Deliveries"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210-24.html",
    "href": "ifcd0210-24/ifcd0210-24.html",
    "title": "IFCD0210 Official Docs",
    "section": "",
    "text": "Denominació: Desenvolupament d’aplicacions amb tecnologies web\nCodi: IFCD0210\nHores: 600h\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 3\nQualificació professional de referència: IFC154_3 - Desenvolupament d’aplicacions amb tecnologies web\n\n\n\n\nIFCD0210 fitxa\n\n\n\nIFCD0210 fitxa-es .pdf\nIFCD0210 fitxa-cat .pdf\nIFCD0210 official document",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210-24.html#identificació-del-certificat-de-professionalitat",
    "href": "ifcd0210-24/ifcd0210-24.html#identificació-del-certificat-de-professionalitat",
    "title": "IFCD0210 Official Docs",
    "section": "",
    "text": "Denominació: Desenvolupament d’aplicacions amb tecnologies web\nCodi: IFCD0210\nHores: 600h\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 3\nQualificació professional de referència: IFC154_3 - Desenvolupament d’aplicacions amb tecnologies web\n\n\n\n\nIFCD0210 fitxa\n\n\n\nIFCD0210 fitxa-es .pdf\nIFCD0210 fitxa-cat .pdf\nIFCD0210 official document",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210-24.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "href": "ifcd0210-24/ifcd0210-24.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "title": "IFCD0210 Official Docs",
    "section": "Relació d’unitats de competència que configuren el certificat de professionalitat",
    "text": "Relació d’unitats de competència que configuren el certificat de professionalitat\n\nUC0491_3: Desenvolupar elements de programari en l’entorn client.\nUC0492_3: Desenvolupar elements de programari en l’entorn servidor.\nUC0493_3: Implementar, verificar i documentar aplicacions web en entorns internet, intranet i extranet.",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210-24.html#competència-general",
    "href": "ifcd0210-24/ifcd0210-24.html#competència-general",
    "title": "IFCD0210 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDesenvolupar documents i components de programari que constitueixin aplicacions informàtiques en entorns distribuïts utilitzant tecnologies web, partint d’un disseny tècnic ja elaborat, i duent a terme la seva verificació, documentació i implantació.",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Official Docs"
    ]
  },
  {
    "objectID": "reactjs/rjslab3.html",
    "href": "reactjs/rjslab3.html",
    "title": "Lab#RE03-1: to-do app",
    "section": "",
    "text": "📘 React JS Lab#RE03-1: to-do app\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications.\nWe will use the Semantic React library to paint some CSS.\n\nWe could use a table or list\n\nWe could use HighCharts to represent data.\nHooks we are going to use:\n\nto create the basic app: useReducer, useContext,\nto persist the state values between renders: useEffect, useRef.\nto manage others states o variables: useState.\n\n\nThe lab will demonstrate how to use a react-router-dom with React to build a functional web application.\nReference:",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-1: to-do app"
    ]
  },
  {
    "objectID": "reactjs/rjslab3.html#user-story-mock-up",
    "href": "reactjs/rjslab3.html#user-story-mock-up",
    "title": "Lab#RE03-1: to-do app",
    "section": "1 user-story & mock-up",
    "text": "1 user-story & mock-up\nThis lab is a basic implementation of a Todo List application using React. It utilizes React hooks such as useReducer and useContext for state management.\nWe will define an initial set of todos and a reducer function that handles various actions like adding a new todo, deleting a todo, marking a todo as completed, and resetting the list.\nActions definition:\n\nadd action: Adds a new todo item to the list.\ndelete action: Removes a todo item from the list.\ncompleted action: Toggles the completed status of a todo item.\nreset action: Resets the todo list to its initial state.\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: \"lean how to comunicate\",\n    completed: true,\n    author: \"Faby\",\n    due: 1 / 5 / 2022\n  },\n  {\n    id: 2,\n    text: \"road out of hell\",\n    complete: false,\n    author: \"Alex\",\n    due: 1 / 6 / 2022\n  }\n];\n\n\nThe Object type represents one of JavaScript’s data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.\nObject\nThe TodoApp component uses the useReducer hook to manage the state of todos and dispatch actions based on user interactions. It renders a header, a button to create new todos, and a TodosList component that displays the list of todos.\n\n\n\ninital render app\n\n\n\n\n\ncalendar picker to set date\n\n\n\n\n\ncreating new todos",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-1: to-do app"
    ]
  },
  {
    "objectID": "reactjs/rjslab3.html#step-by-step-code",
    "href": "reactjs/rjslab3.html#step-by-step-code",
    "title": "Lab#RE03-1: to-do app",
    "section": "2 step-by-step code",
    "text": "2 step-by-step code\n\n2.1 Project creation\n\n\n\n\n\nstep-by-step cheatsheet\n\n\nFirst at all we create the React project with Route and Semantic css Library.\nThen, the reducer component: &lt;ToDoApp /&gt;.\nIt uses React’s useReducer hook to manage the state of the todo items. The initial todos are predefined, and the app supports actions like adding a new todo, deleting a todo, and marking a todo as completed. The state of the todos is stored in an array.\nWe crete a placeholder useReducer:\nimport { Button, Input, Checkbox } from \"semantic-ui-react\";\nimport { useReducer } from \"react\";\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: \"lean how to comunicate\",\n    completed: true,\n    author: \"Faby\",\n    due: 1 / 5 / 2022\n  },\n  {\n    id: 2,\n    text: \"road out of hell\",\n    complete: false,\n    author: \"Alex\",\n    due: 1 / 6 / 2022\n  }\n];\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"bla\": {\n      return;\n    }\n    case \"blabla\": {\n      return;\n    }\n    default: {\n      return state;\n    }\n  }};\n\n\nexport default function ToDoApp(){\n    const [state, dispacher] = useReducer (reducer, initialTodos);\n\n    return (\n      &lt;&gt;\n        &lt;br /&gt;\n        &lt;span&gt;ToDo&lt;/span&gt;\n        &lt;Button&gt;Delete&lt;/Button&gt;\n        &lt;Input placeholder=\"Write something\" /&gt;\n        &lt;Checkbox toggle /&gt;\n        &lt;br /&gt;\n      &lt;/&gt;\n    );\n};\n\n\n2.2 create new todo\nStep-by-step new todo creation:\n\nThe &lt;Button&gt; component is rendered with an onClick event handler,\nwhen the button is clicked, it dispatches an action of type \"add\" using the dispatch function\nand calls the reducer.\nThe reducer executes a case add creating a new state.\nAs a new state is created,\na new render is painted.\n\n\n\n\n\n\nHighchart Pie example\n\n\nimport { Button, Input, Checkbox } from \"semantic-ui-react\";\nimport { useReducer } from \"react\";\n\nconst initialTodos = [\n  // todos objects\n];\n\nfunction reducer(state, action) {\n  switch (action.type) {\n     case \"add\": {\n      return [\n        ...state,\n        {\n          id: Date.now(),\n          text: \"\",\n          author: \"\",\n          due: \"\",\n          completed: false\n        }\n      ];\n    }\n    case \"blabla\": {\n      return;\n    }\n    default: {\n      return state;\n    }\n  }};\n\n\nexport default function ToDoApp(){\n    const [state, dispatch] = useReducer(reducer, initialTodos);\n\n    return (\n      &lt;&gt;\n      &lt;div style={{margin: \"40px\"}}&gt;        \n        &lt;br /&gt;\n        &lt;Button onClick={\n          () =&gt; dispatch({ type: \"add\" })}&gt;Create Todo&lt;/Button&gt;\n        &lt;br /&gt;\n        &lt;span&gt;todo id&lt;/span&gt; {\" \"}\n        &lt;Button&gt;Delete&lt;/Button&gt;\n        &lt;Input placeholder=\"Write something\" /&gt;\n        &lt;Checkbox toggle /&gt;\n        &lt;br /&gt;\n        &lt;/div&gt;\n\n      &lt;/&gt;\n    );\n};\nThe &lt;Button&gt; component is rendered with an onClick event handler. When the button is clicked, it dispatches an action of type \"add\" using the dispatch function and calls the reducer.\n  &lt;Button onClick={() =&gt; dispatch({ type: \"add\" })}&gt;Create Todo&lt;/Button&gt;\nIn the reducer, the spread operator (...state) is used to create a new array that includes all the existing elements without mutating the original state.\nimport { Button, Input, Checkbox } from \"semantic-ui-react\";\nimport { useReducer } from \"react\";\n\nconst initialTodos = [\n  // todos objects\n];\n\nfunction reducer(state, action) {\n  switch (action.type) {\n     case \"add\": {\n      return [\n        ...state,\n        {\n          id: Date.now(),\n          text: \"\",\n          author: \"\",\n          due: \"\",\n          completed: false\n        }\n      ];\n    }\n    case \"blabla\": {\n      return;\n    }\n    default: {\n      return state;\n    }\n  }};\n\n\nexport default function ToDoApp(){\n   // render\n};\nThe spread operator (...state) is used to create a new array that includes all the elements from the existing state array. This is done to avoid mutating the original state.\nA new object is created with the following properties:\n\nid: A unique identifier generated using Date.now(). This will ensure that each new item has a unique identifier.\ntext: An empty string.\nauthor: An empty string.\ndue: An empty string.\ncompleted: A boolean value set to false, indicating that the item is not completed.\n\nThe new object is then added to the end of the new array created at initial load using the spread operator (…state).\nThis ensures that the new item is appended to the existing items in the state array.\nFinally, the updated array is returned from the reducer function, representing the new state with the newly added item.\n\n\n2.3 read and render todo\nimport React, { useReducer } from \"react\";\n\nconst initialTodos = [\n  // todos initial\n];\n\nfunction appReducer(state, action) {\n  switch (action.type) {\n    // cases\n}\n\nexport default function TodoApp() {\n  const [state, dispatch] = useReducer(appReducer, initialTodos);\n\n  return (\n    &lt;&gt;\n      &lt;h3&gt;List: add, delete, complete and refresh&lt;/h3&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"add\" })}&gt;\n        Create Todo\n      &lt;/button&gt;{\" \"}\n      &lt;button&gt;Clear Todo&lt;/button&gt;\n      &lt;br /&gt; &lt;br /&gt;\n      &lt;div style={{ margin: \"20px\" }}&gt;\n        {state.map((item) =&gt; (\n          &lt;&gt;\n            &lt;input type=\"checkbox\"/&gt;\n            &lt;input type=\"text\" defaultValue={item.text} /&gt;{\" \"}\n            &lt;input type=\"text\" defaultValue={item.author} /&gt;{\" \"}\n            &lt;input type=\"date\" defaultValue={item.due} /&gt;{\" \"}\n            &lt;button&gt;\n              Delete\n            &lt;/button&gt;\n            &lt;br /&gt;\n          &lt;/&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}\nWe are going to map over our state and generating a list of htmml elements based on its contents.\n\n\nMozilla map docs\nWithin the mapping function, each item in the state array is rendered as a set of elements enclosed within an empty fragment (&lt;&gt;...&lt;/&gt;).\n\n\n(&lt;&gt;...&lt;/&gt;): this is a common technique in React to group multiple elements without adding unnecessary wrapper elements to the DOM.\nFor each item in the state array, the code generates the following elements:\n\n&lt;input type=\"checkbox\"&gt;: This is a checkbox input element.\n\nThe checked attribute is bound to the item.completed property, which presumably determines whether the checkbox should be checked or not.\n\n&lt;input type=\"text\"&gt;: Two text input elements are rendered, each with the defaultValue attribute bound:\n\nto item.text and\nitem.author respectively.\nThese inputs display the default values of the corresponding text and author properties of the item object.\n\n&lt;input type=\"date\"&gt;: This is a date input element with the defaultValue attribute bound to item.due.\n\nIt displays the default due date value of the item object.\n\n&lt;button&gt;: A button element is rendered with the label “Delete”.\n\n\n\n2.4 delete todo\nWe define the operation delete:\n\nevent onClick on button\ncase delete on reducer\nreducer creates new state which triggers new render with new state\n\nThe button element, when clicked, triggers an action to delete an item. It uses an onClick event handler that dispatches  a “delete” action with the item’s ID as the payload, allowing the application to handle the deletion logic based on the dispatched action.\n  &lt;Button\n    onClick={() =&gt; dispatch({ type: \"delete\", payload: item.id })}&gt;\n    Delete\n  &lt;/Button&gt;\nThe reducer case statement for handling the “delete” action filters the state array based on the item’s ID, removing the item with the matching ID from the state.\nfunction appReducer(state, action) {\n  switch (action.type) {\n    //.. other cases\n\n    case \"delete\": {\n      return state.filter((item) =&gt; item.id !== action.payload);\n    }\n    \n    //.. other cases  \n  }\n}\n\n\n2.5 update chekbox todo\n\n\n\n\n\n\nJSX elements directly inside a map() call always need keys!\n\n\n\nKeys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\n\n\n\nRendering Lists - Why does React need keys?\nFor example, React.Fragment and a key for our list:\n{state.map((item) =&gt; (\n      &lt;React.Fragment key={item.id}&gt;\n        \n      &lt;/React.Fragment&gt;\n))}\nWe could update the complete field by using a event onChange that dispatchs as a payload the item.id with the completed type:\n &lt;input\n    type=\"checkbox\"\n    checked={item.completed}\n    onChange={\n      () =&gt; dispatch({ type: \"completed\", payload: item.id })}\n/&gt;\nAnd the reducer with the completed action:\nfunction appReducer(state, action) {\n  switch (action.type) {\n    // other cases\n    case \"completed\": {\n      return state.map((item) =&gt; {\n        if (item.id === action.payload) {\n          return {\n            ...item,\n            completed: !item.completed\n          };\n        }\n        return item;\n      });\n    }\n    // default case\n}\n\n\n2.6 update input todo\nWe could update the input common fields -text, author, due- by creating a handler function handleUpdate:\nconst handleUpdate = (id, field, value) =&gt; {\n    dispatch({\n      type: \"update\",\n      payload: {\n        id,\n        field,\n        value\n      }\n    });\n};\nThe inputs onChange, now, will call the handleUpdate function with the field:\n&lt;input\n  type=\"text\"\n  value={item.text}\n  onChange={(e) =&gt; handleUpdate(item.id, \"text\", e.target.value)}\n/&gt;{\" \"}\n&lt;input\n  type=\"text\"\n  value={item.author}\n  onChange={(e) =&gt; handleUpdate(item.id, \"author\", e.target.value)}\n/&gt;{\" \"}\n&lt;input\n  type=\"date\"\n  value={item.due}\n  onChange={(e) =&gt; handleUpdate(item.id, \"due\", e.target.value)}\n/&gt;{\" \"}\nAnd the reducer with the update action:\nfunction appReducer(state, action) {\n  switch (action.type) {\n    // other cases\n    case \"update\": {\n      const { id, field, value } = action.payload;\n      return state.map((item) =&gt; {\n        if (item.id === id) {\n          return {\n            ...item,\n            [field]: value\n          };\n        }\n        return item;\n      });\n    }\n    // default case\n}\n\n\nAn object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces {}.\nconst { id, field, value } = action.payload;\nObject_initializer\n\n\n2.7 useContext, useEffect, useRef todo\nThe useEffect, useRef, and useContext hooks are used to handle different aspects of state management and render lifecycle.\n\nuseEffect: is used to update the stateRef.current value whenever the state changes.\n\nIt ensures that the stateRef always holds the latest value of state.\nThe effect is triggered whenever the state dependency changes, which means it will run after every state update.\n\nuseRef: the stateRef variable is created using useRef. It creates a mutable reference that persists across renders. \n\nstateRef is used to hold the current value of state.\nBy using useRef, the value can be updated without causing a re-render, and it can be accessed inside the useEffect hook.\n\nuseContext: the Context is created using React.createContext(), and it is used to share the dispatch function with child components.\n\nBy wrapping the components inside &lt;Context.Provider value={dispatch}&gt;, the dispatch function is made available to all components within the Context.Provider scope.\nThe child component, TodosList, accesses the dispatch function using the useContext hook.\n\n\nfunction appReducer(state, action) {\n  // ---\n}\n\nconst Context = React.createContext();\n\n\nexport default function TodoApp() {\n  const [state, dispatch] = useReducer(appReducer, initialTodos);\n  const stateRef = useRef(state);\n\n  useEffect(() =&gt; {\n    stateRef.current = state;\n  }, [state]);\n\n  return (\n    &lt;Context.Provider value={dispatch}&gt;\n      &lt;h3&gt;List: add, delete, complete and refresh&lt;/h3&gt;\n      &lt;button onClick={\n        () =&gt; dispatch({ type: \"add\" })}&gt;Create Todo&lt;/button&gt;\n      &lt;br /&gt;\n      &lt;br /&gt;\n      &lt;TodosList items={stateRef.current} /&gt;\n    &lt;/Context.Provider&gt;\n  );\n}\n\nfunction TodosList({ items }) {\n  return items.map((item) =&gt; &lt;TodoItem key={item.id} {...item} /&gt;);\n}\n\n}\n\nfunction TodoItem({ id, completed, author, text, due }) {\n  const dispatch = useContext(Context);\n  //..\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-1: to-do app"
    ]
  },
  {
    "objectID": "reactjs/rjslab3.html#versions",
    "href": "reactjs/rjslab3.html#versions",
    "title": "Lab#RE03-1: to-do app",
    "section": "3 Versions",
    "text": "3 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\ntodoApp 0.0\ncreate project with route: todoApp 0.0\ninitial tree-folder\nrender home\n\n\ntodoApp 0.1\ncreate new todo: todoApp 0.1\n-\ninitial render - todo created render\n\n\ntodoApp 0.2\nrender todos, clear, delete todo: todoApp 0.2\n-\ninitial render - todo created render",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-1: to-do app"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-events.html",
    "href": "reactjs/reactjs-app-events.html",
    "title": "React JS App: events",
    "section": "",
    "text": "📘 events React lets you add event handlers to your JSX.\nEvent handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: events"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-events.html#overview",
    "href": "reactjs/reactjs-app-events.html#overview",
    "title": "React JS App: events",
    "section": "",
    "text": "📘 events React lets you add event handlers to your JSX.\nEvent handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: events"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-events.html#adding-event-handlers",
    "href": "reactjs/reactjs-app-events.html#adding-event-handlers",
    "title": "React JS App: events",
    "section": "2 Adding event handlers",
    "text": "2 Adding event handlers\nYou can make it show a message when a user clicks by following these three steps:\n\nDeclare a function called handleClick inside your Button component.\nImplement the logic inside that function (use alert to show the message).\nAdd onClick={handleClick} to the &lt;button&gt; JSX.\n\nEvent handler functions are usually defined inside your components\n\n\napp.jsx\n\nexport default function Button() {\n  function handleClick() {\n    alert('You clicked me!');\n  }\n\n  return (\n    &lt;button onClick={handleClick}&gt;\n      Click me\n    &lt;/button&gt;\n  );\n}\n\n\n\n\n\n\nBy convention, it is common to name event handlers as handle followed by the event name. You’ll often see onClick={handleClick}, onMouseEnter={handleMouseEnter}, and so on.\n\n\n\n\n\n\nAlert\n\n\n\nYou defined the handleClick function and then passed it as a prop to &lt;button&gt;. handleClick is an event handler\n\n\n\n\n\n\nImportant\n\n\n\nFunctions passed to event handlers must be passed, not called. For example:\n\npassing a function (correct): &lt;button onClick={handleClick}&gt;\n\ncalling a function (incorrect): &lt;button onClick={handleClick()}&gt;\n\nThe difference is subtle. In the first example, the handleClick function is passed as an onClick event handler. This tells React to remember it and only call your function when the user clicks the button.\nIn the second example, the () at the end of handleClick() fires the function immediately during rendering, without any clicks. This is because JavaScript inside the JSX { and } executes right away.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: events"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-events.html#passing-event-handlers-as-props",
    "href": "reactjs/reactjs-app-events.html#passing-event-handlers-as-props",
    "title": "React JS App: events",
    "section": "3 Passing event handlers as props",
    "text": "3 Passing event handlers as props\nOften you’ll want the parent component to specify a child’s event handler. Consider buttons: depending on where you’re using a Button component, you might want to execute a different function—perhaps one plays a movie and another uploads an image.\nTo do this, pass a prop the component receives from its parent as the event handler like so:\n\n\nindex.js\n\nfunction Button({ onClick, children }) {\n  return (\n    &lt;button onClick={onClick}&gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n\nfunction PlayButton({ movieName }) {\n  function handlePlayClick() {\n    alert(`Playing ${movieName}!`);\n  }\n\n  return (\n    &lt;Button onClick={handlePlayClick}&gt;\n      Play \"{movieName}\"\n    &lt;/Button&gt;\n  );\n}\n\nfunction UploadButton() {\n  return (\n    &lt;Button onClick={() =&gt; alert('Uploading!')}&gt;\n      Upload Image\n    &lt;/Button&gt;\n  );\n}\n\nexport default function Toolbar() {\n  return (\n    &lt;div&gt;\n      &lt;PlayButton movieName=\"Kiki's Delivery Service\" /&gt;\n      &lt;UploadButton /&gt;\n    &lt;/div&gt;\n  );\n}\n\n\n\n\n\n\nExecuting index.js:\n\n\n\n\n\n\nFirst, Toolbar component renders PlayButton and UploadButton components. Second, both of them call their functions and then, each one call Button to render the button\n\n\n\nHere, the Toolbar component renders a PlayButton and an UploadButton:\n\nPlayButton passes handlePlayClick as the onClick prop to the Button inside.\nUploadButton passes() =&gt; alert('Uploading!') as the onClick prop to the Button inside.\n\nFinally, your Button component accepts a prop called onClick. It passes that prop directly to the built-in browser &lt;button&gt; with onClick={onClick}. This tells React to call the passed function on click.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: events"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-functions.html",
    "href": "reactjs/reactjs-js-functions.html",
    "title": "JavaScript: functions",
    "section": "",
    "text": "📘 JavaScript Functions\nFunctions are a way of packaging functionality that you wish to reuse.\nIt’s possible to define a body of code as a function that executes when you call the function name in your code. This is a good alternative to repeatedly writing the same code.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: functions"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-functions.html#where-do-i-find-functions",
    "href": "reactjs/reactjs-js-functions.html#where-do-i-find-functions",
    "title": "JavaScript: functions",
    "section": "1.1 Where do I find functions?",
    "text": "1.1 Where do I find functions?\nIn JavaScript, you’ll find functions everywhere.\nIn fact, we’ve been using functions all the way through the course so far; we’ve just not been talking about them very much. Now is the time, however, for us to start talking about functions explicitly, and really exploring their syntax.\nPretty much anytime you make use of a JavaScript structure that features a pair of parentheses — () — and you’re not using a common built-in language structure like a for loop, while or do...while loop, or if...else statement, you are making use of a function.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: functions"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-functions.html#built-in-browser-functions",
    "href": "reactjs/reactjs-js-functions.html#built-in-browser-functions",
    "title": "JavaScript: functions",
    "section": "1.2 Built-in browser functions",
    "text": "1.2 Built-in browser functions\nWe’ve used functions built into the browser a lot in this course.\nEvery time we manipulated a text string, for example:\n\n\nApp.js\n\nconst myText = \"I am a string\";\nconst newString = myText.replace(\"string\", \"sausage\");\nconsole.log(newString);\n// the replace() string function takes a source string,\n// and a target string and replaces the source string,\n// with the target string, and returns the newly formed string\n\nOr every time we manipulated an array:\n\n\nApp.js\n\nconst myArray = [\"I\", \"love\", \"chocolate\", \"frogs\"];\nconst madeAString = myArray.join(\" \");\nconsole.log(madeAString);\n// the join() function takes an array, joins\n// all the array items together into a single\n// string, and returns this new string\n\nOr every time we generate a random number:\n\n\nApp.js\n\nconst myNumber = Math.random();\n// the random() function generates a random number between\n// 0 and up to but not including 1, and returns that number\n\nThe JavaScript language has many built-in functions to allow you to do useful things without having to write all that code yourself.\nIn fact, some of the code you are calling when you invoke (a fancy word for run, or execute) a built-in browser function couldn’t be written in JavaScript — many of these functions are calling parts of the background browser code, which is written largely in low-level system languages like C++, not web languages like JavaScript.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: functions"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-functions.html#functions-versus-methods",
    "href": "reactjs/reactjs-js-functions.html#functions-versus-methods",
    "title": "JavaScript: functions",
    "section": "1.3 Functions versus methods",
    "text": "1.3 Functions versus methods\nFunctions that are part of objects are called methods.\nYou don’t need to learn about the inner workings of structured JavaScript objects yet — you can wait until our later module that will teach you all about the inner workings of objects, and how to create your own.\nThe built-in code we’ve made use of so far comes in both forms: functions and methods.\nYou can check the full list of the built-in functions, as well as the built-in objects and their corresponding methods here.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: functions"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-functions.html#invoking-functions",
    "href": "reactjs/reactjs-js-functions.html#invoking-functions",
    "title": "JavaScript: functions",
    "section": "1.4 Invoking functions",
    "text": "1.4 Invoking functions\nYou are probably clear on this by now, but just in case, to actually use a function after it has been defined, you’ve got to run — or invoke — it.\nThis is done by including the name of the function in the code somewhere, followed by parentheses.\n\n\nApp.js\n\n\nfunction myFunction() {\n  alert(\"hello\");\n}\n\nmyFunction();\n// calls the function once\n\n\n\n\n\n\n\nNote\n\n\n\nThis form of creating a function is also known as function declaration. It is always hoisted so that you can call the function above the function definition and it will work fine.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: functions"
    ]
  },
  {
    "objectID": "reactjs/rjslab1.html",
    "href": "reactjs/rjslab1.html",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "",
    "text": "📘 React JS Lab#RE01-1: API Rest and Axios\nIn this lab, we will be using:\n\nthe Open Library API, which is a RESTful API, to create a React app that will display a list of books.\nWe will use the Axios library to make HTTP requests to the API and retrieve the data in JSON format.\nWe will display the book data in a table with four fields for each book: title, year, ISBN, pages, and author.\nWe will also add a loading state to show the user that the app is retrieving data from the API.\n\nThe lab will demonstrate how to use a RESTful API with React to build a functional web application.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE01-1: API Rest Axios"
    ]
  },
  {
    "objectID": "reactjs/rjslab1.html#install-nodejs-npm",
    "href": "reactjs/rjslab1.html#install-nodejs-npm",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "1 Install nodejs & npm",
    "text": "1 Install nodejs & npm\nReferences:\n\nnodejs\nnpm\nNode Version Manager\n\n\n1.1 from repo\n\n\n\nsudo apt-get install nodejs\n\n\n\n\n\nsudo apt-get install npm\n\n\n\n\n1.2 update/last version\n\n1.2.1 download\n\n\n\ninstall nodejs from nodejs\n\n\n\n\n1.2.2 terminal\nOften the installed Node.js version from the repositories will be outdated. If you need to upgrade Node.js to the latest version you can use module n.\nThe module n will take care for the upgrade of Node.js when it’s installed from PPA.\nInstall module n by:\n\n\nThe command \"npm install n -g\" is used to install the \"n\" package globally on a system.\nThe \"n\" package is a node version manager, which allows you to easily switch between different versions of Node.js on your system. With this package, you can install multiple versions of Node.js on your system and easily switch between them as needed.\nThe \"-g\" flag indicates that the package should be installed globally, which means that it will be available to all users on the system, and not just the current user.\nnpm install n -g\nThen you can install the stable Node.js by:\nn stable\nor the latest:\nn latest\n\n\n\n1.3 Node Version Manager\n“n” and “nvm” are both popular Node.js version managers, but they differ in some key ways.\n\n“n” is a simple, lightweight Node.js version manager that is designed to be easy to use and install. It has a small footprint and allows you to quickly switch between different versions of Node.js using a command-line interface. “n” is also designed to be compatible with other package managers like npm, so you can easily install and manage Node.js modules alongside different versions of Node.js.\n\n\nIn contrast, “nvm” (Node Version Manager) is a more complex and feature-rich version manager. It allows you to manage multiple versions of Node.js, as well as install different versions of npm and use them alongside each Node.js version. It also has more advanced features, such as the ability to specify default Node.js versions and aliases for specific versions.\n\nnvm allows you to quickly install and use different versions of node via the command line.\nNode Version Manager",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE01-1: API Rest Axios"
    ]
  },
  {
    "objectID": "reactjs/rjslab1.html#api-rest",
    "href": "reactjs/rjslab1.html#api-rest",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "2 API Rest",
    "text": "2 API Rest\n\n\n\nREST (Representational State Transfer) - Open Library API is a RESTful API\n\n\n\n\nAn API (Application Programming Interface) is a set of protocols, routines, and tools that allow different software applications to communicate with each other. An API acts as a messenger that takes a request from one application and returns a response back to the requesting application.\nREST (Representational State Transfer) is a software architectural style for building web services. It is based on HTTP (Hypertext Transfer Protocol) and is commonly used for creating APIs. A RESTful API allows different software applications to communicate with each other by using HTTP methods like GET, POST, PUT, and DELETE to access and manipulate data.\n\n\nAn Open API is an API that is publicly available and can be used by developers to build software applications. An Open API typically includes documentation and developer tools to help developers understand how to use the API.\nThe Open Library API is a RESTful API that provides access to the data stored in the Open Library project. The Open Library project aims to create a web page for every book ever published. The API allows developers to retrieve information about books, authors, subjects, and more.\nThe two Open Library API endpoints we are going to use are:\n\nOpen Library Books This endpoint provides documentation for the Open Library Books API. It includes information on how to use the API to search for books, retrieve book details, and access other book-related information.\nOpen Library Books: get 100 books This endpoint is used to retrieve a list of up to 100 books from the Open Library API. The q=* parameter is used to search for all books, and the limit=100 parameter limits the results to 100 books. The response data is in JSON format and includes information like the book title, author, publication date, and more.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE01-1: API Rest Axios"
    ]
  },
  {
    "objectID": "reactjs/rjslab1.html#create-app",
    "href": "reactjs/rjslab1.html#create-app",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "3 Create app",
    "text": "3 Create app\nFirst, let’s create a new React app using Create React App by running the following command in your terminal:\n\n\nnpx.bash\n\nnpx create-react-app books\n\nto create a React App named books, or\nnpx create-react-app hola\nto create a React App named hola.\n\n\n\nnpx create-react-app books\n\n\n\n\n\ntree-folder project\n\n\nOnce the app is created, navigate into the project folder and install Axios, a popular library for making HTTP requests:\ncd books\nnpm install axios\nNow, let’s create a new component called BookList that will fetch and display the list of books:\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst BookList = () =&gt; {\n  const [books, setBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    const fetchBooks = async () =&gt; {\n      \n        const response = await axios.get(\n          'https://openlibrary.org/search.json?q=*&limit=100'\n        );\n        const booksData = response.data.docs;\n        setBooks(booksData);\n        setIsLoading(false);\n    \n    };\n    fetchBooks();\n  }, []);\n\n  return (\n    &lt;&gt;\n    &lt;h1&gt;Books&lt;/h1&gt;\n      {isLoading ? (\n        &lt;p&gt;Loading...&lt;/p&gt;\n      ) : (\n        &lt;ul&gt;\n          {books.map((book) =&gt; (\n            &lt;li key={book.key}&gt;\n              &lt;strong&gt;Title:&lt;/strong&gt; {book.title} &lt;br /&gt;\n              &lt;strong&gt;Year:&lt;/strong&gt; {book.publish_year} &lt;br /&gt;\n              &lt;strong&gt;ISBN:&lt;/strong&gt; {book.isbn[0]} &lt;br /&gt;\n              &lt;strong&gt;Pages:&lt;/strong&gt; {book.number_of_pages} &lt;br /&gt;\n              &lt;strong&gt;Author:&lt;/strong&gt; {book.author_name}\n              &lt;/li&gt;\n          ))}\n        &lt;/ul&gt;\n      )}\n    &lt;/&gt;\n  );\n};\n\nexport default BookList;\nNow, let’s add the BookList component to our App component:\nimport React from \"react\";\nimport BookList from \"./BookList\";\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;BookList /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\nFinally, let’s start the development server and see the list of books in our browser:\nnpm start\nOpen yo browser on http://localhost:3000/ or http://localhost:3001/ if 3000 is occupied.\n\n\n\nrender localhost:3001: loading…\n\n\n\n\n\nrender localhost:3001: load books",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE01-1: API Rest Axios"
    ]
  },
  {
    "objectID": "reactjs/rjslab1.html#handle-error",
    "href": "reactjs/rjslab1.html#handle-error",
    "title": "Lab#RE01-1: API Rest Axios",
    "section": "4 handle error",
    "text": "4 handle error\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst BookList = () =&gt; {\n  const [books, setBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() =&gt; {\n    const fetchBooks = async () =&gt; {\n      try {\n        const response = await axios.get(\n          'https://openlibrary.org/search.json?q=*&limit=100'\n        );\n        const booksData = response.data.docs;\n        setBooks(booksData);\n        setIsLoading(false);\n      } catch (error) {\n        setIsError(true);\n        setIsLoading(false);\n      }\n    };\n    fetchBooks();\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Books&lt;/h1&gt;\n      {isLoading && !isError && &lt;p&gt;Loading...&lt;/p&gt;}\n      {!isLoading && isError && &lt;p&gt;Error: Could not fetch books&lt;/p&gt;}\n      {!isLoading && !isError && (\n        &lt;ul&gt;\n          {books.map((book) =&gt; (\n            &lt;li key={book.key}&gt;\n              &lt;strong&gt;Title:&lt;/strong&gt; {book.title} &lt;br /&gt;\n              &lt;strong&gt;Year:&lt;/strong&gt; {book.publish_year} &lt;br /&gt;\n              &lt;strong&gt;ISBN:&lt;/strong&gt; {book.isbn[0]} &lt;br /&gt;\n              &lt;strong&gt;Pages:&lt;/strong&gt; {book.number_of_pages} &lt;br /&gt;\n              &lt;strong&gt;Author:&lt;/strong&gt; {book.author_name}\n            &lt;/li&gt;\n          ))}\n        &lt;/ul&gt;\n      )}\n    &lt;/&gt;\n  );\n};\n\nexport default BookList;",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE01-1: API Rest Axios"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-3.html",
    "href": "reactjs/rjslab3-3.html",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "",
    "text": "📘 React JS Lab#RE03-3: API Rest CRUD\nA CRUD (Create, Read, Update, Delete) Todo app with RESTful API integration:\n\nUsing Axios and Fetch\n\nAxios and Fetch are JavaScript libraries used for making HTTP requests to the API endpoints.\nAxios or Fetch can be used to send HTTP requests to these endpoints, allowing data manipulation through CRUD operations.\n\nFake server-side implemented with MockAPI:\n\nby utilizing MockAPI, developers can create custom API endpoints to mimic server-side functionality.\n\nThe Todo app allows users to create, read, update, and delete tasks.\nThis integration will build a fully functional Todo application with API communication and data persistence.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-3: API Rest Mono"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-3.html#overview",
    "href": "reactjs/rjslab3-3.html#overview",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "1 Overview",
    "text": "1 Overview\nFrom previous lab, we are going to persist data on server by API Rest using Axios (or fetch)`.\n\n1.1 References:\n\nThe easiest way to mock REST APIs\nQuick start guide mockapi.io\n\n\n1.1.1 Todo\n\ncodesanbox api rest CRUD axios/fetch: todo-app-4",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-3: API Rest Mono"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-3.html#mock-api",
    "href": "reactjs/rjslab3-3.html#mock-api",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "2 mock api",
    "text": "2 mock api\n\nMockAPI.io is a web service that allows developers to create and simulate RESTful APIs for testing and development purposes.\n\n\n\n\nmockapi creating scheme-model\n\n\nWith MockAPI.io, developers can easily generate custom API endpoints and define the responses they want to receive when those endpoints are called. It provides a user-friendly interface to create, manage, and configure mock APIs, making it simple to simulate different scenarios and test how an application interacts with an API.\nMockAPI.io supports various HTTP methods, request headers, query parameters, and response types, allowing developers to mimic real API behavior. It’s a valuable tool for rapid prototyping, integration testing, and mocking data during development.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-3: API Rest Mono"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-3.html#axios",
    "href": "reactjs/rjslab3-3.html#axios",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "3 axios",
    "text": "3 axios\n\nAxios is a JavaScript library used for making HTTP requests in React applications.\n\nIt provides an easy-to-use and consistent API for performing asynchronous operations, such as fetching data from an API.\n\n\n\nAxios example Request Config\n\n\nAxios supports features like interceptors, automatic request/response transformation, and error handling. It works both in the browser and Node.js environments and offers support for various request methods (GET, POST, PUT, DELETE, etc.).\nAxios simplifies the process of making HTTP requests by providing a higher-level abstraction and allowing developers to handle responses and errors more efficiently.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-3: API Rest Mono"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-3.html#fetch",
    "href": "reactjs/rjslab3-3.html#fetch",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "4 fetch",
    "text": "4 fetch\n\nFetch is a built-in web API in modern browsers that allows making HTTP requests in React applications and other JavaScript environments.\n\nIt provides a native and low-level way of fetching resources from a server.\nFetch operates using Promises, enabling asynchronous operations and providing a more modern alternative to the older XMLHttpRequest (XHR) approach.\nFetch supports sending requests and receiving responses, but it lacks some advanced features provided by libraries like Axios, such as automatic request/response transformation and interceptors.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-3: API Rest Mono"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-3.html#step-by-step-todo-api-rest",
    "href": "reactjs/rjslab3-3.html#step-by-step-todo-api-rest",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "5 step-by-step todo api rest",
    "text": "5 step-by-step todo api rest\n\n\n\nRender todo with grid, cards and CRUD operations, render deployed\n\n\n\n5.1 General idea: schema\n\n5.1.1 Components\nLet’s create first at all our core components:\n\nThe CreateTodo component is responsible for rendering a form to create a new Todo item. It uses React’s useState hook to manage the state of input fields.\nThe UpdateTodo component displays a checkbox that represents the completion status of a Todo item. It receives the Todo object as a prop and handles the update of the completion status.\nThe ReadTodos component renders a list of Todo items fetched from an API. It uses React’s useState hook to manage the state of the Todo items.\nThe DeleteTodo component displays a button to delete a Todo item. It receives the Todo object as a prop and handles the deletion.\n\n\nThe main Todos component is responsible for managing the state of all Todo items.\n\nIt fetches the Todo items from an API using the useEffect hook and stores them in the state using the useState hook.\n\n\n\nGeneral schema\n\n\nIt also provides the necessary functions to manipulate the Todo items through the ApiContext, which is created using React’s createContext hook:\n\naddTodo\nupdateTodo\ndeleteTodo\nfetchTodos\n\nThe ApiContext.Provider wraps these components to provide access to the Todo items and manipulation functions throughout the component tree.\nAt the end, the main component Todos component renders the CreateTodo component and the ReadTodos component within a container.\n\n\nToDoGrid.jsx\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport {Container, Card, Checkbox, Button, Form, Divider,Icon } \nfrom \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// https://github.com/mockapi-io/docs/wiki/Quick-start-guide\n// API Context\nconst ApiContext = React.createContext();\n\n// API_URL mockapi.io\nconst API_URL = \"https://645fbe7.mockapi.io/v1/\";\n\n// Custom Hook to use API Context\nconst useApiContext = () =&gt; useContext(ApiContext);\n\n// CreateTodo Component\nconst CreateTodo = () =&gt; {\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [due, setDue] = useState(\"\");\n  const { addTodo } = useApiContext();\n\n  // to-do\n\n  return (\n    &lt;Form&gt;\n    \n    &lt;/Form&gt;\n  );\n};\n\n// UpdateTodo Component\nconst UpdateTodo = ({ todo }) =&gt; {\n  // to-do\n  return (\n    &lt;Checkbox toggle checked={todo.completed} \n      onChange={handleUpdateTodo} /&gt;\n  );\n};\n\n// ReadTodos Component\nconst ReadTodos = () =&gt; {\n  // to-do\n\n  return (\n    &lt;Card.Group&gt;\n      {todos.map((todo) =&gt; (\n        // to-do\n      ))}\n    &lt;/Card.Group&gt;\n  );\n};\n\n// DeleteTodo Component\nconst DeleteTodo = ({ todo }) =&gt; {\n  // to-do\n  return &lt;Button onClick={handleDeleteTodo}&gt;Delete&lt;/Button&gt;;\n};\n\n\n\n5.1.2 Axios and Main Component\nMain component and Axios functions.\n\nWe use the ApiContext.Provider component to provide a context that includes the todos array, addTodo function, updateTodo function, and deleteTodo function to its child components. \nThe todos state is initialized as an empty array using the useState hook.\nAxios functions:\n\nfetchTodos retrieves todos from the API and sets them in the state.\naddTodo sends a new todo to the API and updates the local state.\nupdateTodo toggles the completed property of a todo.\ndeleteTodo removes a todo from the API and updates the state.\n\nThe component renders child components within a Container component, including a:\n\nheading,\na component for creating new todos (CreateTodo),\na divider, and\na component for reading/displaying existing todos (ReadTodos).\n\n\n\n\nToDoGrid.jsx\n\n// -------------------------------------------------------------\n// Main Todos Component ----------------------------------------\n//--------------------------------------------------------------\nconst Todos = () =&gt; {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() =&gt; {\n    fetchTodos();\n  }, []);\n\n  const fetchTodos = async () =&gt; {\n    // to-do\n  };\n\n\n  const addTodo = (newTodo) =&gt; {\n    // to-do\n  };\n\n  const updateTodo = async (id) =&gt; {\n    // to-do\n  };\n\n  const deleteTodo = async (id) =&gt; {\n    // to-do\n  };\n\n  return (\n    &lt;ApiContext.Provider \n      value={{ todos, addTodo, updateTodo, deleteTodo }}&gt;\n      &lt;Container&gt;\n        &lt;h1&gt;Todos&lt;/h1&gt;\n        &lt;CreateTodo /&gt;\n        &lt;Divider /&gt;\n        &lt;ReadTodos /&gt;\n      &lt;/Container&gt;\n    &lt;/ApiContext.Provider&gt;\n  );\n};\n\nexport default Todos;\n\n\n\n5.1.3 context\nWe create a empty custom context called ApiContext using React.createContext().\n\n\n\n\n\n\nKey-idea context\n\n\n\nApiContext is used to provide data and functions related to todos to its child components.\nThe data and functions (todos, addTodo, updateTodo, deleteTodo) are passed as values to the ApiContext.Provider component.\nThis makes them accessible to any descendant component that consumes the ApiContext using the useContext hook.\n\n\n\n\n5.1.4 async\n\n\n\n\n\n\nasync\n\n\n\nThe async function declaration declares an async function where the await keyword is permitted within the function body.\nThe async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\nAsync functions may also be defined as expressions.\n\n\nReferences:\n\nasync\nasync docs mozilla\n\n\n\n\n5.2 General idea: implemented\nCode ToDoGrid.js uses this libreries and tools:\n\nSemantic CSS\nAxios Api Rest\nComponents .jsx\nReact Hooks: useState, useEffect and useContext (as API Context custom)\nuuidv4\nmockapi.io\nand NodeJS/npm\n\n\n5.2.1 createContext\n\n\nToDoGrid.jsx\n\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Container,\n  Card,\n  Checkbox,\n  Button,\n  Form,\n  Divider,\n  Icon\n} from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// https://github.com/mockapi-io/docs/wiki/Quick-start-guide\n// API Context\nconst ApiContext = React.createContext();\n\n// API_URL mockapi.io\nconst API_URL = \"https://y45yh6y55dgfh.mockapi.io/v1/\";\n\n// Custom Hook to use API Context\nconst useApiContext = () =&gt; useContext(ApiContext);\n\n//....\n\n\n\n\n\n\n\n\nLine\nExplanations\n\n\n\n\nconst ApiContext =  React.createContext();\nCreates a new context object called ApiContext using the createContext, this context object will be used to share data and functions between components.\n\n\nconst API_URL = \"https://y45yh6y55dgfh.mockapi.io/v1/\";\nSets the value of the constant API_URL to be the URL of a mock API. This URL is used to make HTTP requests and interact with the API in the application.\n\n\nconst useApiContext =  () =&gt; useContext(ApiContext);\nDefines a custom hook called useApiContext. This hook uses the useContext hook from React to retrieve the current value of the ApiContext. It provides a convenient way to access the context and its associated data and functions within components.\n\n\n\n\n\n5.2.2 CreateTodo\n\n\nToDoGrid.jsx\n\n//....\n// CreateTodo Component\nconst CreateTodo = () =&gt; {\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [due, setDue] = useState(\"\");\n  const { addTodo } = useApiContext();\n\n  const handleAddTodo = () =&gt; {\n    addTodo({\n      id: uuidv4(),\n      text,\n      author,\n      due\n    });\n\n    setText(\"\");\n    setAuthor(\"\");\n    setDue(\"\");\n  };\n\n  return (\n    &lt;Form&gt;\n      &lt;Form.Group&gt;\n        &lt;Card&gt;\n          &lt;Card.Content&gt;\n            &lt;Card.Header&gt;Create Todo&lt;/Card.Header&gt;\n            &lt;Card.Meta&gt;\n              &lt;p&gt;{uuidv4()}&lt;/p&gt;\n            &lt;/Card.Meta&gt;\n            &lt;br /&gt;\n            &lt;Form.Field&gt;\n              &lt;label&gt;Text&lt;/label&gt;\n              &lt;input\n                type=\"text\"\n                value={text}\n                onChange={(e) =&gt; setText(e.target.value)}\n                placeholder=\"Enter todo text\"\n              /&gt;\n            &lt;/Form.Field&gt;\n            &lt;Form.Field&gt;\n              &lt;label&gt;Author&lt;/label&gt;\n              &lt;input\n                type=\"text\"\n                value={author}\n                onChange={(e) =&gt; setAuthor(e.target.value)}\n                placeholder=\"Enter author name\"\n              /&gt;\n            &lt;/Form.Field&gt;\n            &lt;Form.Field&gt;\n              &lt;label&gt;Date&lt;/label&gt;\n              &lt;input\n                type=\"date\"\n                value={author}\n                onChange={(e) =&gt; setDue(e.target.value)}\n                placeholder=\"Enter author name\"\n              /&gt;\n            &lt;/Form.Field&gt;\n            &lt;Divider /&gt;\n            &lt;Form.Field&gt;\n              &lt;Checkbox label=\"use fetch/axios\" /&gt;\n            &lt;/Form.Field&gt;\n\n            &lt;Divider /&gt;\n\n            &lt;Button onClick={handleAddTodo}&gt;Add Todo&lt;/Button&gt;\n          &lt;/Card.Content&gt;\n          &lt;Card.Content extra&gt;\n            &lt;a&gt;\n              &lt;Icon name=\"time\" /&gt;\n              UTC Central\n            &lt;/a&gt;\n          &lt;/Card.Content&gt;\n        &lt;/Card&gt;\n      &lt;/Form.Group&gt;\n    &lt;/Form&gt;\n  );\n};\n//....\n\n\n\n5.2.3 updateTodo\nThe line of code const { addTodo } = useApiContext(); is using the useApiContext custom hook to access the addTodo function from the API context.\n\n\n\n\n\n\nconst { addTodo } = useApiContext();\n\n\n\nThis line of code enables the component to call the addTodo function and utilize its functionality, such as adding a new todo item to the application’s state or performing any other actions associated with adding todos.\n\n\nThe useApiContext hook is a custom hook that internally uses the useContext hook from React. It allows components to access the values provided by the ApiContext.Provider higher up in the component tree.\nBy calling useApiContext, the component can retrieve the addTodo function from the API context.\n\n\nThe destructuring assignment { addTodo } extracts the addTodo function from the returned object, making it available for use within the component.\n\n\nToDoGrid.jsx\n\n// UpdateTodo Component\nconst UpdateTodo = ({ todo }) =&gt; {\n  const { updateTodo } = useApiContext();\n\n  const handleUpdateTodo = () =&gt; {\n    updateTodo(todo.id);\n  };\n\n  return (\n    &lt;Checkbox toggle checked={todo.completed} \n    onChange={handleUpdateTodo} /&gt;\n  );\n};\n//....\n\n\n\n5.2.4 ReadTodos\n\n\nToDoGrid.jsx\n\n// ReadTodos Component\nconst ReadTodos = () =&gt; {\n  const { todos } = useApiContext();\n\n  return (\n    &lt;Card.Group&gt;\n      {todos.map((todo) =&gt; (\n        &lt;Card key={todo.id}&gt;\n          &lt;Card.Content&gt;\n            &lt;Card.Description&gt;id: {todo.id}\n            &lt;/Card.Description&gt;\n            &lt;Card.Header&gt;{todo.text}\n            &lt;/Card.Header&gt;\n            &lt;Card.Meta&gt;Author: {todo.author}\n            &lt;/Card.Meta&gt;\n            &lt;Card.Description&gt;Due: {todo.due}\n            &lt;/Card.Description&gt;\n            &lt;br /&gt;\n            &lt;UpdateTodo todo={todo} /&gt;\n          &lt;/Card.Content&gt;\n          &lt;Card.Content extra&gt;\n            &lt;DeleteTodo todo={todo} /&gt;\n          &lt;/Card.Content&gt;\n        &lt;/Card&gt;\n      ))}\n    &lt;/Card.Group&gt;\n  );\n};\n//....\n\n\n\n5.2.5 DeleteTodo\n\n\nToDoGrid.jsx\n\n// DeleteTodo Component\nconst DeleteTodo = ({ todo }) =&gt; {\n  const { deleteTodo } = useApiContext();\n\n  const handleDeleteTodo = () =&gt; {\n    deleteTodo(todo.id);\n  };\n\n  return &lt;Button \n  onClick={handleDeleteTodo}&gt;Delete&lt;/Button&gt;;\n};\n//....\n\n\n\n5.2.6 Main component: Todos\nMain component and Axios implemented functions:\n\nThe fetchTodos function is called when the component mounts, which retrieves todos from an API endpoint using axios and sets the todos in the state.\nThe addTodo function sends a new todo object to the API endpoint using a POST request and updates the local todos state with the new todo. It also handles error cases.\nThe updateTodo function toggles the completed property of a todo item with a given id by sending a PUT request to the API endpoint and updating the local todos state accordingly.\nThe deleteTodo function deletes a todo item with a given id by sending a DELETE request to the API endpoint and updates the local todos state by filtering out the deleted todo.\n\n\n\nToDoGrid.jsx\n\n// Main Todos Component\nconst Todos = () =&gt; {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() =&gt; {\n    fetchTodos();\n  }, []);\n\n  const fetchTodos = async () =&gt; {\n    try {\n      const response = \n      await axios.get(`${API_URL}/todo`);\n      setTodos(response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  const addTodo = (newTodo) =&gt; {\n    fetch(`${API_URL}/todo/`, {\n      method: \"POST\",\n      headers: { \"content-type\": \"application/json\" },\n      // Send your data in the request body as JSON\n      body: JSON.stringify(newTodo)\n    })\n      .then((res) =&gt; {\n        setTodos([...todos, newTodo]);\n        const response = {};\n        if (response.ok) {\n          return response.json();\n        }\n        // handle error\n      })\n      .then((task) =&gt; {\n        // do something with the new task\n      })\n      .catch((error) =&gt; {\n        // handle error\n      });\n  };\n\n  const updateTodo = async (id) =&gt; {\n    try {\n      const updatedTodos = todos.map((todo) =&gt; {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n        return todo;\n      });\n\n      await axios.put(`${API_URL}/todo/${id}`, updatedTodos);\n      setTodos(updatedTodos);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const deleteTodo = async (id) =&gt; {\n    try {\n      await axios.delete(`${API_URL}/todo/${id}`);\n      const filteredTodos = \n      todos.filter((todo) =&gt; todo.id !== id);\n      setTodos(filteredTodos);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    &lt;ApiContext.Provider \n    value={{ todos, addTodo, updateTodo, deleteTodo }}&gt;\n      &lt;Container&gt;\n        &lt;h1&gt;Todos&lt;/h1&gt;\n        &lt;CreateTodo /&gt;\n\n        &lt;Divider /&gt;\n\n        &lt;ReadTodos /&gt;\n      &lt;/Container&gt;\n    &lt;/ApiContext.Provider&gt;\n  );\n};\n\nexport default Todos;\n\nThe context enables the sharing of todos data and related functions across multiple components without the need for prop drilling.\nThe CreateTodo component uses the useApiContext custom hook to access the addTodo function from the context. It allows users to create a new todo and calls the addTodo function to add the new todo to the list.\nSimilarly, the UpdateTodo component uses the useApiContext hook to access the updateTodo function from the context. It provides a checkbox to toggle the completion status of a todo.\nThe ReadTodos component uses the useApiContext hook to access the todos array from the context. It displays the existing todos and provides the ability to update and delete them.\n\n\n\n5.3 Creating domains: decoupling\nReferences:\n\nYou Might Not Need an Effect\nSyncronyzing with effects: Fetching Data\n\nBefore coding it let’s discuss the right approach to work it with domains at next lab, Lab#RE03-4.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-3: API Rest Mono"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-3.html#versions",
    "href": "reactjs/rjslab3-3.html#versions",
    "title": "Lab#RE03-3: API Rest Mono",
    "section": "6 Versions",
    "text": "6 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\ntodoApp 0.3\nadd ToDoGrid component to project: todoApp 0.3\ninitial tree-folder\nrender todoGrid",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-3: API Rest Mono"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-arrow.html",
    "href": "reactjs/reactjs-es6-arrow.html",
    "title": "React JS ES6: arrow functions",
    "section": "",
    "text": "📘 Arrow function\nAn arrow function is a type of anonymous function expression in JavaScript, with a syntax that is shorter and more concise than a regular function expression.\nArrow functions are also known as fat arrow functions, due to the use of the fat arrow operator (=&gt;) to define the function.\n\n\nHere is the basic syntax for defining an arrow function:\n\n\nprofile.js\n\n(parameters) =&gt; { statements }\n\nThe parameters are the input values that are passed to the function, and the statements are the code that the function executes. For example, here is a simple arrow function that takes a single number parameter and returns the square of that number:\n\n\nprofile.js\n\nconst square = (x) =&gt; {\n  return x * x;\n};\n\nIf the function has only one parameter, you can omit the parentheses around the parameter:\n\n\nprofile.js\n\nconst square = x =&gt; {\n  return x * x;\n};\n\nIf the function has no parameters, you can use an empty pair of parentheses:\n\n\nprofile.js\n\nconst greet = () =&gt; {\n  console.log('Hello, World!');\n};\n\nIf the function consists of a single statement that returns a value, you can omit the curly braces and the “return” keyword:\nconst square = (x) =&gt; x * x;\n\n\nArrow functions are often used in modern JavaScript as a concise alternative to regular function expressions, especially when defining callback functions or working with higher-order functions.\n\n\n\n\n\n\nImportant\n\n\n\nThey do not have their own this value, and they cannot be used as constructors.",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: arrow functions"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-arrow.html#overview",
    "href": "reactjs/reactjs-es6-arrow.html#overview",
    "title": "React JS ES6: arrow functions",
    "section": "",
    "text": "📘 Arrow function\nAn arrow function is a type of anonymous function expression in JavaScript, with a syntax that is shorter and more concise than a regular function expression.\nArrow functions are also known as fat arrow functions, due to the use of the fat arrow operator (=&gt;) to define the function.\n\n\nHere is the basic syntax for defining an arrow function:\n\n\nprofile.js\n\n(parameters) =&gt; { statements }\n\nThe parameters are the input values that are passed to the function, and the statements are the code that the function executes. For example, here is a simple arrow function that takes a single number parameter and returns the square of that number:\n\n\nprofile.js\n\nconst square = (x) =&gt; {\n  return x * x;\n};\n\nIf the function has only one parameter, you can omit the parentheses around the parameter:\n\n\nprofile.js\n\nconst square = x =&gt; {\n  return x * x;\n};\n\nIf the function has no parameters, you can use an empty pair of parentheses:\n\n\nprofile.js\n\nconst greet = () =&gt; {\n  console.log('Hello, World!');\n};\n\nIf the function consists of a single statement that returns a value, you can omit the curly braces and the “return” keyword:\nconst square = (x) =&gt; x * x;\n\n\nArrow functions are often used in modern JavaScript as a concise alternative to regular function expressions, especially when defining callback functions or working with higher-order functions.\n\n\n\n\n\n\nImportant\n\n\n\nThey do not have their own this value, and they cannot be used as constructors.",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: arrow functions"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-spread.html",
    "href": "reactjs/reactjs-es6-spread.html",
    "title": "React JS ES6: spread operator",
    "section": "",
    "text": "📘 spread operator\nThe JavaScript spread operator ... allows us to quickly copy all or part of an existing array or object into another array or object.\n\n\nThe spread operator is a useful tool for working with arrays and can make your code more concise and easier to read.\n\n\nApp.js\n\nconst numbersOne = [1, 2, 3];\nconst numbersTwo = [4, 5, 6];\nconst numbersCombined = [...numbersOne, ...numbersTwo];\n\nThe spread operator is often used in combination with destructuring.\n\n\nApp.js\n\nconst numbers = [1, 2, 3, 4, 5, 6];\n\nconst [one, two, ...rest] = numbers;\n\nThe spread operator can also be used to spread the elements of an array into the arguments of a function:\n\n\nApp.js\n\nfunction add(a, b, c) {\n  return a + b + c;\n}\n\nconst arr = [1, 2, 3];\nconsole.log(add(...arr)); // 6",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: spread operator"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-spread.html#overview",
    "href": "reactjs/reactjs-es6-spread.html#overview",
    "title": "React JS ES6: spread operator",
    "section": "",
    "text": "📘 spread operator\nThe JavaScript spread operator ... allows us to quickly copy all or part of an existing array or object into another array or object.\n\n\nThe spread operator is a useful tool for working with arrays and can make your code more concise and easier to read.\n\n\nApp.js\n\nconst numbersOne = [1, 2, 3];\nconst numbersTwo = [4, 5, 6];\nconst numbersCombined = [...numbersOne, ...numbersTwo];\n\nThe spread operator is often used in combination with destructuring.\n\n\nApp.js\n\nconst numbers = [1, 2, 3, 4, 5, 6];\n\nconst [one, two, ...rest] = numbers;\n\nThe spread operator can also be used to spread the elements of an array into the arguments of a function:\n\n\nApp.js\n\nfunction add(a, b, c) {\n  return a + b + c;\n}\n\nconst arr = [1, 2, 3];\nconsole.log(add(...arr)); // 6",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: spread operator"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-spread.html#copying-objects-with-the-spread-syntax",
    "href": "reactjs/reactjs-es6-spread.html#copying-objects-with-the-spread-syntax",
    "title": "React JS ES6: spread operator",
    "section": "2 Copying objects with the spread syntax",
    "text": "2 Copying objects with the spread syntax\n\n\n\n\n\n\nImportant\n\n\n\nWe need to use spread operator to quickly copy part of the existing Person object (state variable) into another new object (state variable).\n\n\nNote that the … spread syntax is “shallow”—it only copies things one level deep. This makes it fast, but it also means that if you want to update a nested property, you’ll have to use it more than once.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleChange(e) {\n    setPerson({\n      ...person,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  return (\n    &lt;&gt;\n      &lt;label&gt;\n        First name:\n        &lt;input\n          name=\"firstName\"\n          value={person.firstName}\n          onChange={handleChange}\n        /&gt;\n      &lt;/label&gt;\n      &lt;label&gt;\n        Last name:\n        &lt;input\n          name=\"lastName\"\n          value={person.lastName}\n          onChange={handleChange}\n        /&gt;\n      &lt;/label&gt;\n      &lt;label&gt;\n        Email:\n        &lt;input\n          name=\"email\"\n          value={person.email}\n          onChange={handleChange}\n        /&gt;\n      &lt;/label&gt;\n      &lt;p&gt;\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      &lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nRe-render with handleChange(e)\n\n\n\nHere, you want to also copy the existing data into the new object to be rendered next render (that is lastName and email) because only one of the fields has changed: firstName from input and e.target.value to trigger setPerson.\n\nSo with big objects we must use spread operator.\n\n\n\nApp.js\n\nsetPerson({\n  firstName: e.target.value, // New first name from the input\n  lastName: person.lastName,\n  email: person.email\n  // ..\n  // imagine a big object with 50 fields\n  // ..\n});\n\nUse spread operator to create a new object and pass it to setPerson.\n\nYou can use the … object spread syntax so that you don’t need to copy every property separately.\n\n\n\nApp.js\n\nsetPerson({\n  ...person, // Copy the old fields\n  firstName: e.target.value // But override this one\n});",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: spread operator"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html",
    "href": "reactjs/reactjs-hook-context.html",
    "title": "React JS: useContext",
    "section": "",
    "text": "📘 useContext\nuseContext is a React Hook that lets you read and subscribe to context from your component.\nconst value = useContext(SomeContext)\nuseContext allows you to consume context values from a nearest ancestor Context.Provider. Here’s a brief overview of the three steps to use useContext:",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useContext"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#basic-example",
    "href": "reactjs/reactjs-hook-context.html#basic-example",
    "title": "React JS: useContext",
    "section": "1 Basic example",
    "text": "1 Basic example\nIn this example, the MyContext context is created using the React.createContext function, with a default value of default value. The MyComponent component consumes the context value using the useContext hook, and displays the value in the DOM.\n\n\nApp.js\n\nconst MyContext = React.createContext('default value');\n\nfunction MyComponent() {\n  const value = useContext(MyContext);\n  return &lt;div&gt;{value}&lt;/div&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;MyContext.Provider value=\"Hello, world!\"&gt;\n      &lt;MyComponent /&gt;\n    &lt;/MyContext.Provider&gt;\n  );\n}\n\n\n\nUsing useContext in this way allows you to easily share values between components, without the need to pass props down through multiple levels of the component tree.\nThe App component wraps the MyComponent component with aMyContext.Provider component, and passes the value ‘Hello, world!’ as a prop.\nThis makes the context value available to the MyComponent component, which will use the value passed by the provider rather than the default value.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useContext"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#usecontextsomecontext",
    "href": "reactjs/reactjs-hook-context.html#usecontextsomecontext",
    "title": "React JS: useContext",
    "section": "2 useContext(SomeContext)",
    "text": "2 useContext(SomeContext)\n\n\nApp.js\n\nimport { useContext } from 'react';\n\nfunction MyComponent() {\n  const theme = useContext(ThemeContext);\n  // ..\n\n\n\nCall useContext at the top level of your component to read and subscribe to context.\n\n2.1 Parameters\n\nsomeContext: The context that you’ve previously created with createContext. The context itself does not hold the information, it only represents the kind of information you can provide or read from components.\n\n\n\n2.2 Returns\n\nuseContext returns the context value for the calling component. It is determined as the value passed to the closest SomeContext. Provider above the calling component in the tree.\n\n\nIf there is no such provider, then the returned value will be the defaultValue you have passed to createContext for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useContext"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#usage-passing-data-deeply-into-the-tree",
    "href": "reactjs/reactjs-hook-context.html#usage-passing-data-deeply-into-the-tree",
    "title": "React JS: useContext",
    "section": "3 Usage: passing data deeply into the tree",
    "text": "3 Usage: passing data deeply into the tree\n\n3.1 The Problem\nThe big issue that comes up is figuring out how components should communicate with each other.\n\n\n\nEight simple strategies for communicating between React components\n\n\n\n\n3.2 The Solution: context\nContext works similarly to props, but instead of providing data to a single child, it can be used to provide data to an entire subtree.\n\nContext can only send data down the tree (parent to subtree). It can be paired with callback functions to pass data back up.\n\nuseContext React documentation and React useContext Hook w3 schools",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useContext"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#example1",
    "href": "reactjs/reactjs-hook-context.html#example1",
    "title": "React JS: useContext",
    "section": "4 Example#1",
    "text": "4 Example#1\n\ncreateContext, useContext, useState working together\n\nIn this example, there is a currentUser state variable which holds an object.\nWe combine { currentUser, setCurrentUser } into a single object and pass it down through the context inside the value={}.\nThis lets any component below, such as LoginButton, read both currentUser and setCurrentUser, and then call setCurrentUser when needed.\n\n\nApp.js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    &lt;CurrentUserContext.Provider\n      value={{\n        currentUser,\n        setCurrentUser\n      }}\n    &gt;\n      &lt;Form /&gt;\n    &lt;/CurrentUserContext.Provider&gt;\n  );\n}\n\nfunction Form({ children }) {\n  return (\n    &lt;Panel title=\"Welcome\"&gt;\n      &lt;LoginButton /&gt;\n    &lt;/Panel&gt;\n  );\n}\n\nfunction LoginButton() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(CurrentUserContext);\n\n  if (currentUser !== null) {\n    return &lt;p&gt;You logged in as {currentUser.name}.&lt;/p&gt;;\n  }\n\n  return (\n    &lt;Button onClick={() =&gt; {\n      setCurrentUser({ name: 'Advika' })\n    }}&gt;Log in as Advika&lt;/Button&gt;\n  );\n}\n\nfunction Panel({ title, children }) {\n  return (\n    &lt;section className=\"panel\"&gt;\n      &lt;h1&gt;{title}&lt;/h1&gt;\n      {children}\n    &lt;/section&gt;\n  )\n}\n\nfunction Button({ children, onClick }) {\n  return (\n    &lt;button className=\"button\" onClick={onClick}&gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nInitial render\n\n\n\nExamples of updating context",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useContext"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-context.html#example2",
    "href": "reactjs/reactjs-hook-context.html#example2",
    "title": "React JS: useContext",
    "section": "5 Example#2",
    "text": "5 Example#2\nReference:\n\nUnderstanding the React Context API\n\nIn this example we’ll explain how to use the new context API in as few words as possible. We’ll create a simple Locale context that provides the language preference between English and French to components in the app.\nTo create a new context, use React’s new createContext function:\nexport const LocaleContext = React.createContext('en');\n\n5.1 Provider\nThe Provider component is used to wrap components in the tree that will need access to the value from the context.\nHere let’s create a LocaleProvider component that wraps our LocaleContext’s provider and offers a way to change the context’s locale value:\nimport React, { useState } from 'react';\n\nexport const LocaleContext = React.createContext();\n\nconst LocaleProvider = (props) =&gt; {\n  const [locale, setLocale] = useState('en');\n\n  const changeLocale = () =&gt; {\n    setLocale(prevLocale =&gt; \n    prevLocale === 'en' ? 'fr' : 'en');\n  };\n\n  const state = {\n    locale,\n    changeLocale\n  };\n\n  return (\n    &lt;LocaleContext.Provider value={state}&gt;\n      {props.children}\n    &lt;/LocaleContext.Provider&gt;\n  );\n};\n\nexport default LocaleProvider;\n\n\n5.2 Using the provider\nWe can make use of our provider at the top level of our App component:\nimport React from 'react';\nimport LocaleProvider from './context/LocaleContext';\nimport Greeting from './Greeting';\nimport ToggleLocale from './ToggleLocale';\n\nconst App = () =&gt; {\n  return (\n    &lt;LocaleProvider&gt;\n      &lt;Greeting /&gt;\n      &lt;ToggleLocale /&gt;\n    &lt;/LocaleProvider&gt;\n  );\n};\n\nexport default App;\n\n\n5.3 Consumer\nNow all that’s left to do is access the values from the context using the Consumer component.\nOur Greeting component looks like this:\nimport React, { useContext } from 'react';\nimport { LocaleContext } from './context/LocaleContext';\n\nconst Greeting = () =&gt; {\n  const localeVal = useContext(LocaleContext);\n\n  return (\n    &lt;&gt;\n      {localeVal.locale === 'en' ? \n      &lt;h1&gt;Welcome!&lt;/h1&gt; : &lt;h1&gt;Bienvenue!&lt;/h1&gt;}\n    &lt;/&gt;\n  );\n};\n\nexport default Greeting;\nAnd our ToggleLocale component looks like this:\nimport React, { useContext } from 'react';\nimport { LocaleContext } from './context/LocaleContext';\n\nconst ToggleLocale = () =&gt; {\n  const localeVal = useContext(LocaleContext);\n\n  return (\n    &lt;LocaleContext.Consumer&gt;\n      {(localeVal) =&gt; (\n        &lt;button \n        onClick={localeVal.changeLocale}&gt;Change language&lt;/button&gt;\n      )}\n    &lt;/LocaleContext.Consumer&gt;\n  );\n};\n\nexport default ToggleLocale;",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useContext"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-components.html",
    "href": "reactjs/reactjs-what-components.html",
    "title": "React JS: Components",
    "section": "",
    "text": "📘 Components\nComponents are one of the core concepts of React. They are the foundation upon which you build user interfaces UI.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Components"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#overview",
    "href": "reactjs/reactjs-what-components.html#overview",
    "title": "React JS: Components",
    "section": "",
    "text": "📘 Components\nComponents are one of the core concepts of React. They are the foundation upon which you build user interfaces UI.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Components"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#cop-components-oriented-paradigm",
    "href": "reactjs/reactjs-what-components.html#cop-components-oriented-paradigm",
    "title": "React JS: Components",
    "section": "2 COP: Components-Oriented Paradigm",
    "text": "2 COP: Components-Oriented Paradigm\nCOP, or Components-Oriented Paradigm, is a software design approach that emphasizes the use of reusable, modular components to build complex applications. In this paradigm, an application is typically divided into smaller, independent components that can be easily composed and reused.\n\n\nThe components-oriented paradigm is often associated with modern front-end JavaScript frameworks, such as React, Angular, and Vue.js, which provide tools and libraries for building applications using a component-based approach. However, the principles of COP can be applied to other programming languages and paradigms as well.\nOne of the main benefits of the components-oriented paradigm is that it helps to improve the maintainability and scalability of an application. By encapsulating functionality into discrete, reusable components, it becomes easier to modify and extend the application over time.\nAdditionally, the use of standardized, modular components can make it easier to build larger applications by allowing developers to reuse and compose components rather than building everything from scratch.\n\n\n\n\n\n\nDescribing the UI\n\n\n\nReact is a JavaScript library for rendering user interfaces (UI).\nUI is built from small units like buttons, text, and images.\nReact lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components.\nYour first component",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Components"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#defining-a-component",
    "href": "reactjs/reactjs-what-components.html#defining-a-component",
    "title": "React JS: Components",
    "section": "3 Defining a component",
    "text": "3 Defining a component\nReact puts interactivity first while still using the same technology: a React component is a JavaScript function that you can sprinkle with markup.\n\n\nprofile.jsx\n\nexport default function Profile() {\n  return (\n    &lt;img\n      src=\"https://i.imgur.com/MK3eW3Am.jpg\"\n      alt=\"Katherine Johnson\"\n    /&gt;\n  )\n}\n\n\n\n\n\n\nExecution React component wiht markup image\n\n\n\nExport the component: the export default prefix is a standard JavaScript syntax (not specific to React). It lets you mark the main function in a file so that you can later import it from other files.\nDefine the function: with function Profile() { } you define a JavaScript function with the name Profile.\nAdd markup: the component returns an &lt;img /&gt; tag with src and alt attributes. &lt;img /&gt; is written like HTML, but it is actually JavaScript under the hood!",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Components"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#using-a-component",
    "href": "reactjs/reactjs-what-components.html#using-a-component",
    "title": "React JS: Components",
    "section": "4 Using a component",
    "text": "4 Using a component\nFor example, you can export a Gallery component that uses multiple Profile components:\n\n\nprofile.jsx\n\nfunction Profile() {\n  return (\n    &lt;img\n      src=\"https://i.imgur.com/MK3eW3As.jpg\"\n      alt=\"Katherine Johnson\"\n    /&gt;\n  );\n}\n\nexport default function Gallery() {\n  return (\n    &lt;section&gt;\n      &lt;h1&gt;Amazing scientists&lt;/h1&gt;\n      &lt;Profile /&gt;\n      &lt;Profile /&gt;\n      &lt;Profile /&gt;\n      &lt;p&gt;Working hard for sciende always pay back!&lt;/p&gt;\n      &lt;p&gt;By the way, how are you, Ruben?&lt;/p&gt;\n    &lt;/section&gt;\n  );\n}\n\n\n\n\n\n\nUsing React component wiht markup image and some text\n\n\n\n\n\n\nUsing React component wiht markup image and some text\n\n\n\n\nThere are two primary ways to export values with JavaScript:\n\ndefault exports\nand named exports.\n\nSo far, our examples have only used default exports. But you can use one or both of them in the same file. A file can have no more than one default export, but it can have as many named exports as you like.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Components"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-components.html#writing-a-component",
    "href": "reactjs/reactjs-what-components.html#writing-a-component",
    "title": "React JS: Components",
    "section": "5 Writing a component",
    "text": "5 Writing a component\n\n5.1 Option#1: export default function BookList() {}\nThis option uses the function declaration syntax to define the BookList component and immediately exports it as the default export. This syntax is more familiar to developers who have experience with ES6 modules.\nexport default function BookList() { \n  return ( \n    &lt;div&gt; \n      &lt;h1&gt;Book List&lt;/h1&gt;\n        &lt;ul&gt; \n          &lt;li&gt;Book 1&lt;/li&gt;\n          &lt;li&gt;Book 2&lt;/li&gt;\n          &lt;li&gt;Book 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n  ); \n}\n\n\n5.2 Option#2: const BookList = () =&gt; {}\nThis option uses the arrow function syntax to define the BookList component as a constant. Arrow functions have a concise syntax and can automatically bind this to the current scope, which can be helpful when working with React components.\nconst BookList = () =&gt; {\n   return ( \n    &lt;div&gt; \n      &lt;h1&gt;Book List&lt;/h1&gt;\n        &lt;ul&gt; \n          &lt;li&gt;Book 1&lt;/li&gt;\n          &lt;li&gt;Book 2&lt;/li&gt;\n          &lt;li&gt;Book 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n  ); \n}\n\n\n5.3 Option#3: function BookList() {} export default BookList;\nThis option uses a function declaration to define the BookList component and then exports it as the default export on a separate line. This syntax is similar to option 1, but separates the function declaration from the export statement.\nfunction BookList() {\n return ( \n    &lt;div&gt; \n      &lt;h1&gt;Book List&lt;/h1&gt;\n        &lt;ul&gt; \n          &lt;li&gt;Book 1&lt;/li&gt;\n          &lt;li&gt;Book 2&lt;/li&gt;\n          &lt;li&gt;Book 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n  ); \n}\nexport default BookList;\nIn terms of behavior, all three options will create a function that can be used as a React component. However, the arrow function syntax in option 2 may provide some additional benefits in terms of performance and readability, especially for smaller components.\n\n\n5.4 export default\nIn JavaScript, export is a keyword used to export functions, objects, or values from one module so that they can be used in another module.\n\nWhen a module exports a function or object using the export keyword, it can be imported in another module using the import keyword.\n\nThe default keyword, when used with the export keyword, allows a module to export only one item as the “default” export.\n\nThis means that when another module imports from this module without specifying a specific import name, it will receive the default exported item.\n\nThe BookList function is being exported as the default export of the module.\nThis means that if another module imports from this module without specifying a specific import name, it will receive the BookList function as the default exported item.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Components"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html",
    "href": "reactjs/reactjs-app-styling.html",
    "title": "React JS App: styling",
    "section": "",
    "text": "📘 styling Sass is a CSS pre-processor. Sass files are executed on the server and sends CSS to the browser.\n\n\nSCSS (Sassy CSS) is a CSS preprocessor, which means that it adds additional features to CSS that allow you to write more powerful and efficient stylesheets. SCSS is an extension of the CSS syntax, and uses the same structure and principles as regular CSS, with a few additional features.\nOne of the main advantages of SCSS is that it allows you to use variables in your stylesheets. This means that you can define a value once and use it multiple times throughout your stylesheet, which can make it easier to maintain and update your styles.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#overview",
    "href": "reactjs/reactjs-app-styling.html#overview",
    "title": "React JS App: styling",
    "section": "",
    "text": "📘 styling Sass is a CSS pre-processor. Sass files are executed on the server and sends CSS to the browser.\n\n\nSCSS (Sassy CSS) is a CSS preprocessor, which means that it adds additional features to CSS that allow you to write more powerful and efficient stylesheets. SCSS is an extension of the CSS syntax, and uses the same structure and principles as regular CSS, with a few additional features.\nOne of the main advantages of SCSS is that it allows you to use variables in your stylesheets. This means that you can define a value once and use it multiple times throughout your stylesheet, which can make it easier to maintain and update your styles.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#install",
    "href": "reactjs/reactjs-app-styling.html#install",
    "title": "React JS App: styling",
    "section": "2 Install",
    "text": "2 Install\n\n\nreactSass.sh\n\nnpm i sass",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#create-a-sass-file",
    "href": "reactjs/reactjs-app-styling.html#create-a-sass-file",
    "title": "React JS App: styling",
    "section": "3 Create a sass file",
    "text": "3 Create a sass file\nCreate a Sass file the same way as you create CSS files, but Sass files have the file extension .scss\nIn Sass files you can use variables and other Sass functions:\n\n\nmycss.scss\n\n$myColor: red;\n\nh1 {\n  color: $myColor;\n}\n\n\n\nSCSS also supports other features, such as mixins, nested rules, and functions, which can make it easier to write and maintain complex stylesheets.\nImport the Sass file the same way as you imported a CSS file:\n\n\nindex.js\n\nindex.js:\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './my-sass.scss';\n\nconst Header = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Hello Car!&lt;/h1&gt;\n      &lt;p&gt;Add a little style!.&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(&lt;Header /&gt;);\n\n\n\n\n\n\nExecuting index.js, &lt;Header /&gt; component and importing mycss.scss",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#tailwind",
    "href": "reactjs/reactjs-app-styling.html#tailwind",
    "title": "React JS App: styling",
    "section": "4 Tailwind",
    "text": "4 Tailwind\nReferences:\n\nTailwind\nHow To Build a CRUD App with React Hooks and the Context API and Tailwind\n\n\nTailwind CSS is a utility-first CSS framework that focuses on providing a wide range of pre-built classes for building responsive and customizable user interfaces in React. With its intuitive class-based approach, developers can rapidly prototype and style components, achieving consistent and clean designs.\n\nTailwind also offers a wide range of utility classes for spacing, typography, colors, and more, giving developers fine-grained control over their UI.\nIt’s highly configurable and optimized for performance, making it an excellent choice for modern React projects.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#semantic",
    "href": "reactjs/reactjs-app-styling.html#semantic",
    "title": "React JS App: styling",
    "section": "5 Semantic",
    "text": "5 Semantic\n\nSemantic UI React is a library that brings the Semantic UI framework’s elegant and intuitive design language to React applications.\n\nIt provides a set of reusable components that are fully responsive and accessible out of the box. With Semantic UI React, developers can quickly build beautiful and consistent user interfaces with minimal effort.\nThe library supports theming and customization, allowing developers to adapt the UI to their specific project requirements easily. Semantic UI React follows best practices for React development and integrates seamlessly into React applications.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#material",
    "href": "reactjs/reactjs-app-styling.html#material",
    "title": "React JS App: styling",
    "section": "6 Material",
    "text": "6 Material\n\nMaterial-UI is a popular React UI library that implements the Material Design principles developed by Google.\n\nIt offers a comprehensive set of components, icons, and styling options to create modern and visually appealing user interfaces. Material-UI’s components are highly customizable and can be easily themed to match any design requirement.\nThe library provides a rich set of features, including responsive layouts, form validation, animations, and transitions, making it a versatile choice for building React applications with a polished and consistent look and feel.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#w3-css",
    "href": "reactjs/reactjs-app-styling.html#w3-css",
    "title": "React JS App: styling",
    "section": "7 w3-css",
    "text": "7 w3-css\n\nW3.CSS for React is an integration of the lightweight W3.CSS framework into React projects.\n\nW3.CSSoffers a collection of CSS classes that provide a solid foundation for building responsive and modern user interfaces. With W3.CSS for React, developers can leverage the simplicity and ease of use of the W3.CSS framework within their React applications.\nThe framework emphasizes simplicity and minimalism while offering a range of utility classes for styling elements and creating responsive layouts. W3.CSS for React is a lightweight option for developers who prefer a lean and straightforward CSS framework for their React projects.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-styling.html#bootstrap",
    "href": "reactjs/reactjs-app-styling.html#bootstrap",
    "title": "React JS App: styling",
    "section": "8 bootstrap",
    "text": "8 bootstrap\nReferences:\n\ncodesandbox basic example with bootstrap\nReactstrap is a React component library for Bootstrap\n\nBootstrap for React is an integration of the popular Bootstrap framework into React applications.\nBootstrap provides a robust and comprehensive set of CSS and JavaScript components that enable developers to quickly build responsive and mobile-first user interfaces.\nThe React version of Bootstrap provides React components that encapsulate Bootstrap’s functionality, making it easier to integrate with React projects.\nWith Bootstrap for React, developers can take advantage of the extensive documentation and community support available for Bootstrap, making it an efficient choice for building feature-rich and visually appealing React applications.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: styling"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-flux.html",
    "href": "reactjs/reactjs-js-flux.html",
    "title": "JavaScript: flux control",
    "section": "",
    "text": "📘 JavaScript: flux control",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: flux control"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-flux.html#the-forof-and-forin-loops",
    "href": "reactjs/reactjs-js-flux.html#the-forof-and-forin-loops",
    "title": "JavaScript: flux control",
    "section": "2.1 The for…of and for…in loops",
    "text": "2.1 The for…of and for…in loops\nA small announcement for advanced readers.\nThis article covers only basic loops: while, do..while, and for(..;..;..).\nIf you came to this article searching for other types of loops, here are the pointers:\n\nSee for…in to loop over object properties.\nSee for…of and iterables for looping over arrays and iterable objects.\n\nOtherwise, please read on.\n\n2.1.1 The “while” loop\nThe while loop has the following syntax:\nwhile (condition) {\n  // code\n  // so-called \"loop body\"\n}\nWhile the condition is truthy, the code from the loop body is executed.\nFor instance, the loop below outputs i while i &lt; 3:\nlet i = 0;\nwhile (i &lt; 3) { // shows 0, then 1, then 2\n  alert(i);\n  i++;\n}\nA single execution of the loop body is called an iteration. The loop in the example above makes three iterations.\nIf i++ was missing from the example above, the loop would repeat (in theory) forever. In practice, the browser provides ways to stop such loops, and in server-side JavaScript, we can kill the process.\nAny expression or variable can be a loop condition, not just comparisons: the condition is evaluated and converted to a boolean by while.\nFor instance, a shorter way to write while (i != 0) is while (i):\nlet i = 3;\nwhile (i) { // when `i` becomes 0, the condition becomes falsy, and the loop stops\n  alert(i);\n  i--;\n}\nCurly braces are not required for a single-line body.\nIf the loop body has a single statement, we can omit the curly braces {…}:\nlet i = 3;\nwhile (i) alert(i--);",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: flux control"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html",
    "href": "reactjs/reactjs-hook-ref.html",
    "title": "React JS: useRef",
    "section": "",
    "text": "📘 hookRef\nuseRef is a React Hook that lets you reference a value that’s not needed for rendering: allows you to persist values between renders.\nconst ref = useRef(initialValue)",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useRef"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html#userefinitialvalue",
    "href": "reactjs/reactjs-hook-ref.html#userefinitialvalue",
    "title": "React JS: useRef",
    "section": "1 useRef(initialValue)",
    "text": "1 useRef(initialValue)\nCall useRef at the top level of your component to declare a ref.\n\n\nApp.js\n\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n  const intervalRef = useRef(0);\n  const inputRef = useRef(null);\n  // ...\n\n\n\nIt can be used to store a mutable value that does not cause a re-render when updated. It can be used to access a DOM element directly.\n\n1.1 Parameters\n\ninitialValue: The value you want the ref object’s current property to be initially. It can be a value of any type. This argument is ignored after the initial render.\n\n\n\n1.2 Returns\nuseRef returns an object with a single property:\n\ncurrent: Initially, it’s set to the initialValue you have passed. You can later set it to something else. If you pass the ref object to React as a ref attribute to a JSX node, React will set its current property.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useRef"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html#example-1",
    "href": "reactjs/reactjs-hook-ref.html#example-1",
    "title": "React JS: useRef",
    "section": "2 Example 1",
    "text": "2 Example 1\nIf you show {ref.current} in the JSX, the number won’t update on click. This is because setting ref.current does not trigger a re-render. Information that’s used for rendering should be state instead.\n\n\nApp.js\n\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={handleClick}&gt;\n        Click me!\n      &lt;/button&gt;\n      // Do not write or read ref.current during rendering.\n      // React expects that the body of your component\n      // behaves like a pure function\n      // We do now just for this example\n      // If you need use: useState\n      &lt;p&gt;You have pressed the button {ref.current} times&lt;/p&gt;\n    &lt;/&gt; \n  );\n}\n\n\n\n\n\n\ninital render\n\n\n\n\n\n\nClicking button and no-renders\n\n\n\nExamples of manipulating the DOM with useRef",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useRef"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html#example-2",
    "href": "reactjs/reactjs-hook-ref.html#example-2",
    "title": "React JS: useRef",
    "section": "3 Example 2",
    "text": "3 Example 2\nThe useRef Hook can also be used to keep track of previous state values.\nThis is because we are able to persist useRef values between renders.\n\n\nApp.js\n\nimport { useState, useEffect, useRef } from \"react\";\n\nexport default function Counter() {\n const [inputValue, setInputValue] = useState(\"\");\n  const previousInputValue = useRef(\"\");\n\n  useEffect(() =&gt; {\n    previousInputValue.current = inputValue;\n  }, [inputValue]);\n\n  return (\n    &lt;&gt;\n      &lt;input\n        type=\"text\"\n        value={inputValue}\n        onChange={(e) =&gt; setInputValue(e.target.value)}\n      /&gt;\n      &lt;h2&gt;Current Value: {inputValue}&lt;/h2&gt;\n      &lt;h2&gt;Previous Value: {previousInputValue.current}&lt;/h2&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\ninital render\n\n\n\n\n\n\nInput and not rendering when onChange={} gets the new inputs, but we see input by using useEffect\n\n\n\nThis time we use a combination of useState, useEffect, and useRef to keep track of the previous state.\nIn the useEffect, we are updating the useRef current value each time the inputValue is updated by entering text into the input field.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useRef"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-ref.html#example-3",
    "href": "reactjs/reactjs-hook-ref.html#example-3",
    "title": "React JS: useRef",
    "section": "4 Example 3",
    "text": "4 Example 3\n\nExamples of referencing a value with useRef\n\nThis example uses a combination of state and refs.\nBoth startTime and now are state variables because they are used for rendering. But we also need to hold an interval ID so that we can stop the interval on button press.\n\n\nYou may use console.count('counter') to count how many times React renders.\nSince the interval ID is not used for rendering, it’s appropriate to keep it in a ref, and manually update it\n\n\nStopwatch.jsx\n\nimport { useState, useRef } from 'react';\n\nexport default function Stopwatch() {\n  const [startTime, setStartTime] = useState(null);\n  const [now, setNow] = useState(null);\n  const intervalRef = useRef(null);\n\n  function handleStart() {\n    setStartTime(Date.now());\n    setNow(Date.now());\n\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() =&gt; {\n      setNow(Date.now());\n    }, 10);\n  }\n\n  function handleStop() {\n    clearInterval(intervalRef.current);\n  }\n\n  let secondsPassed = 0;\n  if (startTime != null && now != null) {\n    secondsPassed = (now - startTime) / 1000;\n  }\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Time passed: {secondsPassed.toFixed(3)}&lt;/h1&gt;\n      &lt;button onClick={handleStart}&gt;\n        Start\n      &lt;/button&gt;\n      &lt;button onClick={handleStop}&gt;\n        Stop\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useRef"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html",
    "href": "reactjs/reactjs-hook-effect.html",
    "title": "React JS: useEffect",
    "section": "",
    "text": "📘 useEfect\nuseEffect allows you to perform side effects in your components. Some examples of side effects are: fetching data, directly updating the DOM, and timers.\nuseEffect lets you synchronize a component with an external system.\nuseEffect(setup, dependencies?)",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useEffect"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#introduction",
    "href": "reactjs/reactjs-hook-effect.html#introduction",
    "title": "React JS: useEffect",
    "section": "1 Introduction",
    "text": "1 Introduction\nuseEffect accepts two arguments. The second argument is optional.\n\n\n“The question is not ‘when does this effect run,’ the question is ‘with which state does this effect synchronize?’” – Ryan Florence\n\nuseEffect(setup, dependencies?)\n\n\n\nApp.js\n\nimport { useEffect } from 'react';\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() =&gt; {\n    const connection = createConnection(serverUrl, roomId);\n    connection.connect();\n    return () =&gt; {\n      connection.disconnect();\n    };\n  }, [serverUrl, roomId]);\n  // ...\n}\n\n\n\nuseEffect is a Hook, so you can only call it at the top level of your component or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n\nIf you’re not trying to synchronize with some external system, you probably don’t need an Effect.\n\n\n1.1 Parameters\n\nsetup: The function with your Effect’s logic.\n\nYour setup function may also optionally return a cleanup function.\nWhen your component is first added to the DOM, React will run your setup function.\nAfter every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values.\nAfter your component is removed from the DOM, React will run your cleanup function one last time.\n\noptional dependencies: The list of all reactive values referenced inside of the setup code.\n\nReactive values include** props, state, and all the variables and functions declared directly inside your component bod**y.\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\n\n\nWhen Strict Mode is on, React will run one extra development-only setup+cleanup cycle before the first real setup.\nIf some of your dependencies are objects or functions defined inside the component, there is a risk that they will cause the Effect to re-run more often than needed.\nIf your Effect wasn’t caused by an interaction (like a click), React will let the browser paint the updated screen first before running your Effect.\nIf your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replace useEffect with useLayoutEffect.\nEven if your Effect was caused by an interaction (like a click), the browser may repaint the screen before processing the state updates inside your Effect.\nEffects only run on the client. They don’t run during server rendering.\n\n\n\n\n\n\n1.2 Returns\n\nuseEffect returns undefined.\n\n\n\n\nReact useEffect return by @_georgemoller\n\n\nDependency array passed to useEffect:\n\nIt’s optional. If you don’t specify it, the effect runs after each render.\nIf it’s empty ([]), the effect runs once, after the initial render.\nIt must — or as we’ll see later, should — contain the list of values used in the effect. The effect runs after any of these values changes (and after the initial render).\nThe array of dependencies is not passed as argument to the effect function.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useEffect"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#synchronizing-with-effects",
    "href": "reactjs/reactjs-hook-effect.html#synchronizing-with-effects",
    "title": "React JS: useEffect",
    "section": "2 Synchronizing with Effects",
    "text": "2 Synchronizing with Effects\n\n\n\n\n\n\nsynchronize is a key-word\n\n\n\n“The question is not ‘when does this effect run,’ the question is ‘with which state does this effect synchronize?’”\n– Ryan Florence\n\n\nEffects let you run some code after rendering so that you can synchronize your component with some system outside of React.\n\n2.1 Effects & events\n\nAn event is an action triggered by the user or the system, while an effect is a consequence of an event, usually referring to a change or action that results from it.\n\nWhat are the effects, really? Examples are:\n\nFetching data\nReading from local storage\nRegistering and deregistering event listeners\nUpadating the DOM\nTimers\nUpdating the document title\nUpdating a state variable based on props change\nCleanup operations\nTriggering animations or transitions\nLogging or analytics tracking\nManaging scroll position\n\nReact’s effects are a completely different animal than the lifecycle methods of class-based components.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useEffect"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#example1",
    "href": "reactjs/reactjs-hook-effect.html#example1",
    "title": "React JS: useEffect",
    "section": "3 Example#1",
    "text": "3 Example#1\nIn this example, the useEffect hook manages a state object with one field: count and a function-setter setCalculation.\n\n\nApp.js\n\nimport { useState, useEffect } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [calculation, setCalculation] = useState(0);\n\n  useEffect(() =&gt; {\n    setCalculation(() =&gt; count * 2);\n  }, [count]); // &lt;- add the count variable here\n\n  return (\n    &lt;&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount((c) =&gt; c + 1)}&gt;+&lt;/button&gt;\n      &lt;p&gt;Calculation: {calculation}&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\nuseEffect inital render\n\n\n\n\n\n\nuseEffect second render\n\n\n\n\n\n\nuseEffect third render",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useEffect"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#example2",
    "href": "reactjs/reactjs-hook-effect.html#example2",
    "title": "React JS: useEffect",
    "section": "4 Example#2",
    "text": "4 Example#2\nBy default useEffect will trigger anytime an update happens to the component.\nThis means if the component receives new props from its parent component or even when you change the state locally, the effect will run again.\n\n\n\n\n\n\nBad use of useEffect\n\n\n\nIf you don’t control the render cycle, you could run into an infinite loop of updates.\n\n\n\n\nCounter.js\n\nconst Counter = () =&gt; {\n  const [counter, setCounter] = React.useState(0);\n\n  React.useEffect(() =&gt; {\n    const s = setInterval(() =&gt; {\n      setCounter(c =&gt; c + 1);\n    }, 1000);\n  }, []);\n\n  return (\n    &lt;div style={{textAlign: 'center'}}&gt;\n      &lt;h1&gt;Counter: {counter}&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n};",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useEffect"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#example3",
    "href": "reactjs/reactjs-hook-effect.html#example3",
    "title": "React JS: useEffect",
    "section": "5 Example#3",
    "text": "5 Example#3\nThis includes data fetching. When dealing with API calls using Axios, it’s essential to handle cleanup to prevent memory leaks and unexpected behavior. Below is a clear function demonstrating how to cancel an Axios API call using the useEffect hook:\n\n\n\nDataSimulation.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst DataSimulation = () =&gt; {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() =&gt; {\n    const source = axios.CancelToken.source();\n\n    const fetchData = async () =&gt; {\n      try {\n        const response = await axios.get('https://api.example.com/data', {\n          cancelToken: source.token,\n        });\n        setData(response.data);\n      } catch (error) {\n        if (axios.isCancel(error)) {\n          console.log('Request canceled:', error.message);\n        } else {\n          setError(error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      source.cancel('Component unmounted - Cancelling API request');\n    };\n  }, []); // Empty dependency array means this effect will only run once\n\n  return (\n    &lt;div&gt;\n      {data && &lt;p&gt;Data: {data}&lt;/p&gt;}\n      {error && &lt;p&gt;Error: {error.message}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n};\n\nexport default DataSimulation;\n\n\nIn this example:\n\nWe import useState and useEffect from React, and Axios for making API requests.\nInside the component, we define state variables data and error to manage API response and errors.\nIn the useEffect hook, we create an Axios cancel token using CancelToken.source().\nWe define an asynchronous function fetchData to make the API request using Axios and handle success/error cases.\nThe cleanup function returned from the useEffect cancels the API request when the component unload.\nThe useEffect hook is called once when the component loads ([] as dependency array).",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useEffect"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-effect.html#refs-articles",
    "href": "reactjs/reactjs-hook-effect.html#refs-articles",
    "title": "React JS: useEffect",
    "section": "6 Refs articles",
    "text": "6 Refs articles\n\ncodesanbox\nExploring the useEffect API with Easy Examples\nReact useEffect hook with code examples\nA complete guide to the useEffect React Hook\nA Complete Guide to useEffect\nReact Core Concept I: Rendering & useState",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useEffect"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-6.html",
    "href": "reactjs/rjslab5-6.html",
    "title": "Lab#RE05-6: chat & ws: front",
    "section": "",
    "text": "📘 React JS Lab#RE05-6: chat & websockets\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\nwebsockets, provided by ReactJS framework and:\n\nuseState\nuseEffect\nuseContext\n\nAWS, Amanzon Web Services, architecture as a server-side:\n\nLambda\nDynamoDB\nAPI Gateway\nCloudwatch\nReference:",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-6: chat & ws: front"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-6.html#socketprovider.js",
    "href": "reactjs/rjslab5-6.html#socketprovider.js",
    "title": "Lab#RE05-6: chat & ws: front",
    "section": "1.1 SocketProvider.js",
    "text": "1.1 SocketProvider.js\n\n\nSocketProvider.js\n\nimport { useState, useRef, useEffect, createContext } from \"react\";\nimport React from \"react\";\n\n//https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n//https://reactjs.org/docs/context.html\n//ceate context we will use as store of websockets\nexport const WebsocketContext = createContext(false, null, () =&gt; {});\n// ..........................................ready...message...send\n\n// Make sure to put WebsocketProvider higher up in\n// the component tree than any consumers\nconst SocketProvider = ({ children }) =&gt; {\n  //two hooks to control states of connection and getting messages\n  const [isReady, setIsReady] = useState(false);\n  const [message, setMessage] = useState(null);\n\n  //hook to control websocket persistence over\n  // re-renders and component tree\n  // to any consumer\n  const websocket = useRef(null);\n  // aws endpoint\n  var protocol = \"wss://\";\n  //var word = \"no-connection\";\n  var word = \"4rytv4evb2\";\n  var domain = \".execute-api.eu-central-1.amazonaws.com/test\";\n  var endpoint = protocol + word + domain;\n\n  //hook to execute every render () =&gt; \n  //{ function, how many renders we want}\n  // void &gt; just one render at first\n  //[] &gt; every new state\n  //[dependency] &gt; depends on functions within dependency\n  useEffect(() =&gt; {\n    //create socket object\n    const socket = new WebSocket(endpoint);\n    //if we open, set isReady to true\n    socket.onopen = () =&gt; setIsReady(true);\n    //if we close, set isReady to false\n    socket.onclose = () =&gt; setIsReady(false);\n    //if we get a message, set message on that event (JSON)\n    socket.onmessage = (event) =&gt; setMessage(event.data);\n    websocket.current = socket;\n    //close socket on return, that is, useEffect may use\n    //this feature as optional, in this case we use it\n    //to clean-up and close when exit the tab\n    return () =&gt; {\n      socket.close();\n    };\n  }, []);\n\n  //create  variable JSON with the 3 websocket-states we will use\n  //along the component tree: connection (isReady), \n  //get messages from server,\n  //sendind messages : function\n  const actionsWebSocket = [\n    isReady,\n    message,\n    //function to send ws WHEN it is called\n    websocket.current?.send.bind(websocket.current)\n  ];\n\n  //ending component: we call context =&gt; WebsoockettContext\n  //so socket provider is a component which returns a context\n  //And this context goes with explicit props: actionsWebSocket\n  return (\n    &lt;WebsocketContext.Provider value={actionsWebSocket}&gt;\n      {children}\n    &lt;/WebsocketContext.Provider&gt;\n  );\n};\n\nexport default SocketProvider;",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-6: chat & ws: front"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-6.html#chat.jsx",
    "href": "reactjs/rjslab5-6.html#chat.jsx",
    "title": "Lab#RE05-6: chat & ws: front",
    "section": "1.2 Chat.jsx",
    "text": "1.2 Chat.jsx\n\n\nChat.jsx\n\nimport React from \"react\";\nimport SocketProvider from \"./SocketProvider\";\nimport ChatRoom from \"./ChatRoom\";\n\nexport default function Chat() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Chat&lt;/h1&gt;\n      &lt;hr /&gt;\n\n      &lt;SocketProvider&gt;\n        &lt;ChatRoom /&gt;\n      &lt;/SocketProvider&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-6: chat & ws: front"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-6.html#chatroom.jsx",
    "href": "reactjs/rjslab5-6.html#chatroom.jsx",
    "title": "Lab#RE05-6: chat & ws: front",
    "section": "1.3 ChatRoom.jsx",
    "text": "1.3 ChatRoom.jsx\n\n\n\nChatRoom component explanation\n\n\n\nDeclare function and export\nuseContext: it just like a hook: useContext gets as initial value\n\nconst [ready, message, send] = useContext(WebsocketContext);\n\ntwo useStates to control inpus from user: userId and chatId\n\nconst [chatId, setChatId] = useState(\"\");\nconst [userId, setUserId] = useState(\"\");\n\nParse message JSON-aws (quasi JSON) from server to JSON and string\nCalculate boolean isLogin: let isLogin = messageString.length &gt; 4;\nif-else with isLogin to print wether the user is logged or not\nfunction to send login data to server\nPacking props to tree-component downstairs\nRender\n\n\n\nChatRoom.jsx\n\nimport React from \"react\";\nimport { useContext, useState } from \"react\";\nimport { WebsocketContext } from \"./SocketProvider\";\nimport Conversation from \"./Conversation\";\n\nexport default function ChatRoom() {\n  //use it just like a hook: useContext gets as initial value\n  //the content WebSocketContext\n  const [ready, message, send] = useContext(WebsocketContext);\n  //two useStates to control inpus from user: userId and chatId\n  const [chatId, setChatId] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n\n  //just to parse message JSON-aws (quasi JSON) \n  //from server to JSON and string\n  let messageToShow = \"\";\n  let messageJSON = JSON.parse(message);\n  const messageString = JSON.stringify(message);\n  //console.log(\"messageJSON: \" + messageJSON);\n  //to print the connection after log in if it exists\n\n  let isLogin = messageString.length &gt; 4;\n  if (!isLogin) messageToShow = \"not logged-in\";\n  else\n    messageToShow =\n      messageJSON.action + \n      \" (connectionId: \" + messageJSON.connectionId + \")\";\n\n  //functio to send login data to server\n  const sendLogin = () =&gt; {\n    let data = {\n      action: \"login\",\n      chatId: chatId,\n      userId: userId\n    };\n    if (ready) send(JSON.stringify(data));\n  };\n\n  //props to tree-component downstairs\n  let props = {\n    userId: userId,\n    chatId: chatId\n  };\n\n  //view.......................................\n  //conditional render.........................\n  return (\n    &lt;&gt;\n      &lt;div&gt;\n        &lt;h3&gt;Chat Room&lt;/h3&gt;\n        &lt;p&gt;\n          Status connection: &lt;b&gt; {JSON.stringify(ready)}&lt;/b&gt;\n        &lt;/p&gt;\n\n        {ready && !isLogin ? (\n          &lt;&gt;\n            &lt;label&gt; UserId &lt;/label&gt;\n            &lt;input\n              type=\"text\"\n              placeholder=\"Alex\"\n              onChange={(e) =&gt; setUserId(e.target.value)}\n            /&gt;\n            &lt;label&gt; ChatId &lt;/label&gt;\n            &lt;input\n              type=\"text\"\n              placeholder=\"chatReactAWS\"\n              onChange={(e) =&gt; setChatId(e.target.value)}\n            /&gt;\n            &lt;br /&gt;\n\n            &lt;button onClick={sendLogin}&gt;Enter chat room&lt;/button&gt;\n\n            &lt;p&gt;\n              Status log in: &lt;b&gt; {messageToShow}&lt;/b&gt;\n            &lt;/p&gt;\n          &lt;/&gt;\n        ) : (\n          \"\"\n        )}\n\n        {isLogin ? &lt;Conversation {...props} /&gt; : \"\"}\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-6: chat & ws: front"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-6.html#conversation.js",
    "href": "reactjs/rjslab5-6.html#conversation.js",
    "title": "Lab#RE05-6: chat & ws: front",
    "section": "1.4 Conversation.js",
    "text": "1.4 Conversation.js\n\n\n\nConversation component explanation\n\n\n\nDeclare function and export\nuseContext: it just like a hook: useContext gets as initial value\n\nconst [ready, message, send] = useContext(WebsocketContext);\n\ndeclare useReducer to manage conversation states\ndeclare useState to manage text to print on screen from messages\nreducer: a reducer function called conversationReducer that handles different actions:\n\nWhen the action type is “send”, it creates a data object with information like action, chatId, userId, and text.\nIf ready is true, it sends the data as a string.\nIt then returns a new state array with a new message object appended.\nWhen the action type is “receive”, it parses the message and creates a new message object with properties like id, time, chatId, userId, and text.\nIt returns a new state array with the new message object appended.\nWhen the action type is “login”, it parses the message and creates a new message object with properties like id, userId, time, and text.\nThe text is constructed using different properties from the parsed message.\nIt returns a new state array with the new message object appended.\nFor any other action type, it simply returns the current state unchanged.\n\nuseEffect: it runs when the message variable changes.\n\nIt checks if the message does not contain the string “sent at”.\nIf it doesn’t, it parses the message JSON and checks if the action property is “conversation”.\nIf it is, it dispatches a “receive” action with the message as the payload; otherwise, it dispatches a “login” action.\nThe variable isConverastion is used to track whether the message is a conversation.\nThe final line logs the value of isConverastion and message to the console.\n\nPacking props to tree-component downstairs\nRender\nfunction ConversationsList\n\n\n\nConversation.jsx\n\nimport React from \"react\";\nimport { useContext, useState, useReducer, useEffect } from \"react\";\nimport { WebsocketContext } from \"./SocketProvider\";\n\nexport default function Conversation(props) {\n  // use it just like a hook\n  const [ready, message, send] = useContext(WebsocketContext);\n  const [state, dispatch] = useReducer(conversationReducer, []);\n  const [text, setText] = useState(\"\");\n\n  function conversationReducer(state, action) {\n    switch (action.type) {\n      case \"send\": {\n        let data = {\n          action: \"conversation\",\n          chatId: props.chatId,\n          userId: props.userId,\n          text: action.payload\n        };\n        if (ready) send(JSON.stringify(data));\n\n        return [\n          ...state,\n          {\n            id: Date.now(),\n            time: Date.now(),\n            chatId: props.chatId,\n            userId: props.userId,\n            text: action.payload\n          }\n        ];\n      }\n      case \"receive\": {\n        return [\n          ...state,\n          {\n            id: Date.now(),\n            time: JSON.parse(message).time,\n            chatId: JSON.parse(message).chatId,\n            userId: JSON.parse(message).userId,\n            text: JSON.parse(message).text\n          }\n        ];\n      }\n      case \"login\": {\n        return [\n          ...state,\n          {\n            id: Date.now(),\n            userId: \"status\",\n            time: JSON.parse(message).time,\n            text:\n              JSON.parse(message).action +\n              \" at \" +\n              JSON.parse(message).time +\n              \" with connection:  \" +\n              JSON.parse(message).connectionId\n          }\n        ];\n      }\n\n      default: {\n        return state;\n      }\n    }\n  }\n\n  useEffect(() =&gt; {\n    var isConverastion = false;\n    let stringMessage = JSON.stringify(message);\n    if (!stringMessage.includes(\"sent at\")) {\n      isConverastion = JSON.parse(message).action === \"conversation\";\n      if (isConverastion) dispatch({ type: \"receive\", payload: message });\n      else dispatch({ type: \"login\", payload: message });\n    }\n    console.log(\"isConverastion: \" \n      + isConverastion + \" - message: \" + message);\n  }, [message]);\n\n  let propsConversationLines = {\n    state: state,\n    userId: props.userId\n  };\n\n  return (\n    &lt;&gt;\n      &lt;div&gt;\n        &lt;h2&gt;Conversation&lt;/h2&gt;\n        &lt;hr /&gt;\n        &lt;div\n          style={{\n            color: \"black\",\n            backgroundColor: \"azure\",\n            padding: \"10px\",\n            width: \"400px\",\n            fontFamily: \"Helvetica\",\n            fontSize: \"13px\"\n          }}\n        &gt;\n          &lt;ConversationsList {...propsConversationLines} /&gt;\n        &lt;/div&gt;\n        &lt;br /&gt;\n        &lt;input\n          type=\"text\"\n          name=\"content\"\n          placeholder=\"say hello\"\n          onChange={(e) =&gt; setText(e.target.value)}\n        /&gt;\n\n        &lt;button onClick={() =&gt; \n          dispatch({ type: \"send\", payload: text })}&gt;\n          {\" \"}\n          Send\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction ConversationsList(propsConversationLines) {\n  return propsConversationLines.state.map((item) =&gt; (\n    &lt;&gt;\n      {propsConversationLines.userId === item.userId ? (\n        &lt;p\n          style={{\n            textAlign: \"right\"\n          }}\n        &gt;\n          {item.userId}: {item.text}\n        &lt;/p&gt;\n      ) : (\n        &lt;p\n          style={{\n            textAlign: \"left\"\n          }}\n        &gt;\n          {item.userId}: {item.text}\n        &lt;/p&gt;\n      )}\n    &lt;/&gt;\n  ));\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-6: chat & ws: front"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html",
    "href": "reactjs/reactjs-app-conditional-render.html",
    "title": "React JS App: conditional render",
    "section": "",
    "text": "📘 conditional render\nReact conditional rendering refers to the technique of rendering different components or elements in a React application based on certain conditions. This allows you to control the rendering of components based on the values of variables or the state of your application.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: conditional render"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#overview",
    "href": "reactjs/reactjs-app-conditional-render.html#overview",
    "title": "React JS App: conditional render",
    "section": "",
    "text": "📘 conditional render\nReact conditional rendering refers to the technique of rendering different components or elements in a React application based on certain conditions. This allows you to control the rendering of components based on the values of variables or the state of your application.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: conditional render"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#basic-conditional-render",
    "href": "reactjs/reactjs-app-conditional-render.html#basic-conditional-render",
    "title": "React JS App: conditional render",
    "section": "2 Basic conditional render",
    "text": "2 Basic conditional render\n\n\nYour components will often need to display different things depending on different conditions.\nHere’s an example of how you might use conditional rendering in a React component:\n\n\nApp.js\n\nfunction MyComponent(props) {\n  if (props.isLoading) {\n    return &lt;div&gt;Loading...&lt;/div&gt;;\n  } else {\n    return &lt;div&gt;Hello, world!&lt;/div&gt;;\n  }\n}\n\n\n\nIn this example, the MyComponent component uses an if statement to determine whether to render a “Loading…” message or a “Hello, world!” message, based on the value of the isLoading prop.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: conditional render"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#ternary-operator",
    "href": "reactjs/reactjs-app-conditional-render.html#ternary-operator",
    "title": "React JS App: conditional render",
    "section": "3 Ternary operator",
    "text": "3 Ternary operator\nYou can also use the ternary operator ?: to conditionally render elements in a more concise way:\n\n\nApp.js\n\nfunction MyComponent(props) {\n  return props.isLoading ? &lt;div&gt;Loading...&lt;/div&gt; : &lt;div&gt;Hello, world!&lt;/div&gt;;\n}\n\n\n\nIn this example, the ternary operator checks the value of the isLoading prop and returns a “Loading…” message if it is true, or a “Hello, world!” message if it is false.\nConditional rendering is a useful technique for controlling the rendering of components in a React application. It allows you to tailor the rendering of your application based on the state of your application or the values of variables.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: conditional render"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#conditionally-returning-jsx",
    "href": "reactjs/reactjs-app-conditional-render.html#conditionally-returning-jsx",
    "title": "React JS App: conditional render",
    "section": "4 Conditionally returning JSX",
    "text": "4 Conditionally returning JSX\nLet’s say you have a PackingList component rendering several Items, which can be marked as packed or not.\n\n\nApp.js\n\nexport default function PackingList() {\n  return (\n    &lt;section&gt;\n      &lt;h1&gt;Sally Ride's Packing List&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;Item \n          isPacked={true} \n          name=\"Space suit\" \n        /&gt;\n        &lt;Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        /&gt;\n        &lt;Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        /&gt;\n      &lt;/ul&gt;\n    &lt;/section&gt;\n  );\n}\n\nNotice that some of the Item components have their isPacked prop set to true instead of false. You want to add a checkmark (✔) to packed items if isPacked={true}.\nIf the isPacked prop is true, this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:\n\n\nApp.js\n\nfunction Item({ name, isPacked }) {\n  if (isPacked) {\n    return &lt;li className=\"item\"&gt;{name} ✔&lt;/li&gt;;\n  }\n  return &lt;li className=\"item\"&gt;{name}&lt;/li&gt;;\n}\n\nexport default function PackingList() {\n  return (\n    &lt;section&gt;\n      &lt;h1&gt;Sally Ride's Packing List&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;Item \n          isPacked={true} \n          name=\"Space suit\" \n        /&gt;\n        &lt;Item \n          isPacked={true} \n          name=\"Helmet with a golden leaf\" \n        /&gt;\n        &lt;Item \n          isPacked={false} \n          name=\"Photo of Tam\" \n        /&gt;\n      &lt;/ul&gt;\n    &lt;/section&gt;\n  );\n}\n\n\n\n\n\n\nExecuting App.js, without conditional rendering\n\n\n\n\n\n\nExecuting App.js, with conditional rendering",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: conditional render"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#example-1",
    "href": "reactjs/reactjs-app-conditional-render.html#example-1",
    "title": "React JS App: conditional render",
    "section": "5 Example 1:",
    "text": "5 Example 1:\nIn this example, when you press send, setIsSent(true) tells React to re-render the UI:\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [isSent, setIsSent] = useState(false);\n  const [message, setMessage] = useState('Hi!');\n  if (isSent) {\n    return &lt;h1&gt;Your message is on its way!&lt;/h1&gt;\n  }\n  return (\n    &lt;form onSubmit={(e) =&gt; {\n      e.preventDefault();\n      setIsSent(true);\n      sendMessage(message);\n    }}&gt;\n      &lt;textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e =&gt; setMessage(e.target.value)}\n      /&gt;\n      &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nfunction sendMessage(message) {\n  // ...\n}\n\n\n\n\n\n\nExecuting App.js, inital render\n\n\n\n\n\n\nExecuting App.js, just filling textarea\n\n\n\n\n\n\nExecuting App.js, re-render, isSent is true, so the first return is executed\n\n\n\n\nHere’s what happens when you click the button Send:\n\nThe onSubmit event handler executes.\nsetIsSent(true) sets isSent to true and queues a new render.\nReact re-renders the component according to the new isSent value.\nThe new rendering with isSent to true prints the first return (#7)",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: conditional render"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-conditional-render.html#example-2-crosswalk",
    "href": "reactjs/reactjs-app-conditional-render.html#example-2-crosswalk",
    "title": "React JS App: conditional render",
    "section": "6 Example 2: crosswalk",
    "text": "6 Example 2: crosswalk\nHere is a crosswalk light component that toggles on when the button is pressed:\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function TrafficLight() {\n  const [walk, setWalk] = useState(true);\n\n  function handleClick() {\n    setWalk(!walk);\n    alert(walk ? 'Stop is next' : 'Walk is next');\n  }\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={handleClick}&gt;\n        Change to {walk ? 'Stop' : 'Walk'}\n      &lt;/button&gt;\n      &lt;h1 style={{\n        color: walk ? 'darkgreen' : 'darkred'\n      }}&gt;\n        {walk ? 'Walk' : 'Stop'}\n      &lt;/h1&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\nExecuting App.js, inital render\n\n\n\n\n\n\nNext Render",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: conditional render"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-1.html",
    "href": "reactjs/rjslab5-1.html",
    "title": "Lab#RE05-1: chat & websockets",
    "section": "",
    "text": "📘 React JS Lab#RE05-1: chat & websockets\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\nwebsockets, provided by ReactJS framework and:\n\nuseState\nuseEffect\nuseContext\n\nAWS, Amanzon Web Services, architecture as a server-side:\n\nLambda\nDynamoDB\nAPI Gateway\nCloudwatch\nReference:",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-1: chat & websockets"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-1.html#overall",
    "href": "reactjs/rjslab5-1.html#overall",
    "title": "Lab#RE05-1: chat & websockets",
    "section": "1 Overall",
    "text": "1 Overall\nWebSockets is a communication protocol that enables real-time, bidirectional communication between a client (usually a web browser) and a server. It provides a persistent connection that allows for efficient data exchange without the need for repeated HTTP requests.\nWebSockets are particularly useful for applications that require instant updates, such as real-time chat applications, collaborative editing tools, and live data streaming.\nIn React, you can leverage the power of WebSockets by using libraries like Socket.IO or the native WebSocket API. These libraries enable you to establish a WebSocket connection, send and receive messages, and handle events for seamless real-time communication in your React applications.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-1: chat & websockets"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-1.html#project-architecture",
    "href": "reactjs/rjslab5-1.html#project-architecture",
    "title": "Lab#RE05-1: chat & websockets",
    "section": "2 Project Architecture",
    "text": "2 Project Architecture\nWe could use Spring Boot as a server for our MyChat app, instead we are going to design an AWS architecture:\n\n\n\nGeneral architecture",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-1: chat & websockets"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-1.html#websockets",
    "href": "reactjs/rjslab5-1.html#websockets",
    "title": "Lab#RE05-1: chat & websockets",
    "section": "3 Websockets",
    "text": "3 Websockets\n\n\n\n\n\n\nNote\n\n\n\nWebSocket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection.\n\n\n\n\nThe current API specification allowing web applications to use this protocol is known as WebSockets.\nWebSockets are a communication protocol that provides a persistent, full-duplex connection between a client and a server over a single, long-lived connection. Unlike traditional HTTP connections, which are stateless and require the client to initiate each request, WebSockets allow for real-time, bidirectional communication between the client and the server.\nHere are some basic ideas and features of WebSockets:\n\nPersistent Connection: WebSockets establish a persistent connection between the client and the server, allowing for continuous communication without the need to send multiple HTTP requests.\nFull-Duplex Communication: WebSockets enable full-duplex communication, meaning both the client and the server can send and receive data simultaneously. This bidirectional nature allows for real-time updates and interactive applications.\nLightweight Overhead: The WebSocket protocol has a minimal overhead compared to HTTP. After the initial handshake, the data exchange occurs using a much smaller header, resulting in reduced latency and bandwidth usage.\nEvent-Driven Architecture: WebSockets use an event-driven architecture, where the server can push data to the connected clients without the need for explicit requests. This makes it suitable for applications that require real-time updates, such as chat applications, live dashboards, and multiplayer games.\nWide Browser Support: WebSockets are supported by modern web browsers, including Chrome, Firefox, Safari, and Edge. This allows for cross-browser compatibility and ensures that WebSockets can be utilized in a variety of web-based applications.\nSecurity: WebSocket connections can be secured using encryption protocols such as SSL/TLS, ensuring the confidentiality and integrity of the transmitted data.\nCompatibility with Existing Web Infrastructure: WebSockets can work alongside existing web infrastructure and technologies. They can be seamlessly integrated into web applications that utilize other protocols like HTTP or REST, allowing for a combination of traditional request-response communication and real-time updates through WebSockets.\n\nWebSockets provide a powerful mechanism for building interactive and real-time web applications, enabling efficient and seamless communication between clients and servers.\n\n3.1 Websocket vs. HTTP\nWebSocket is distinct from HTTP. Both protocols are located at layer 7 in the OSI model and depend on TCP at layer 4.\nAlthough they are different, the WebSocket is designed to work over HTTP ports 443 and 80 as well as to support HTTP proxies and intermediaries, thus making it compatible with HTTP. To achieve compatibility, the WebSocket handshake uses the HTTP Upgrade header to change from the HTTP protocol to the WebSocket protocol.\n\n\n\nWebsocket vs HTTP\n\n\n\n\n3.2 Websocket client\n\n3.2.1 Instance methods\nWebSocket.close(): Closes the connection.\nWebSocket.send(): Enqueues data to be transmitted.\n\n\n3.2.2 Events\nListen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\nclose: Fired when a connection with a WebSocket is closed. Also available via the onclose property\nerror: Fired when a connection with a WebSocket has been closed because of an error, such as when some data couldn’t be sent. Also available via the onerror property.\nmessage: Fired when data is received through a WebSocket. Also available via the onmessage property.\nopen: Fired when a connection with a WebSocket is opened. Also available via the onopen property.\n\n\n3.2.3 Example: Websocket client\n// Creates new WebSocket object with a wss URI as the parameter\nconst socket = new WebSocket('wss://game.example.com/ws/updates');\n\n// Fired when a connection with a WebSocket is opened\nsocket.onopen = function () {\n  setInterval(function() {\n    if (socket.bufferedAmount == 0)\n      socket.send(getUpdateData());\n  }, 50);\n};\n\n// Fired when data is received through a WebSocket\nsocket.onmessage = function(event) {\n  handleUpdateData(event.data);\n};\n\n// Fired when a connection with a WebSocket is closed\nsocket.onclose = function(event) {\n  onSocketClose(event);\n};\n\n// Fired when a connection with a WebSocket has been closed because of an error\nsocket.onerror = function(event) {\n  onSocketError(event);\n};",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-1: chat & websockets"
    ]
  },
  {
    "objectID": "reactjs/rjslab2.html",
    "href": "reactjs/rjslab2.html",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "",
    "text": "📘 React JS Lab#RE02-1: Router & Hooks\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications.\nWe will use the Axios library to make HTTP requests to the API and retrieve the data in JSON format.\nhooks: useState, useEffect, useReducer.\n\nThe lab will demonstrate how to use a react-router-dom with React to build a functional web application.\nReference: codesandbox React Project to-do-11",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE02-1: Router & Hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab2.html#install-react-router-dom",
    "href": "reactjs/rjslab2.html#install-react-router-dom",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "1 Install react-router-dom",
    "text": "1 Install react-router-dom\nFrom: npm pacakge and react router\nnpm i react-router-dom\n\nReact Router enables “client side routing”.\n\nIn traditional websites, the browser requests a document from a web server, downloads and evaluates CSS and JavaScript assets, and renders the HTML sent from the server. When the user clicks a link, it starts the process all over again for a new page.\nClient side routing allows your app to update the URL from a link click without making another request for another document from the server.\nInstead, your app can immediately render some new UI and make data requests with fetch to update the page with new information.\nMain Concepts\n\n\n\n\n\n\nSPA vs MultiPage\n\n\n\nA Single Page Application (SPA) is a web application that loads a single HTML page and dynamically updates the content as the user interacts with the application. The user interface is designed to provide a seamless experience, without the need for page refreshes.\nIn contrast, a Multi-Page Application (MPA) consists of multiple pages, each with its own HTML file, that are loaded separately when the user navigates to a different page. Each page typically has its own styles and scripts, which can result in longer load times and a less seamless user experience compared to SPAs.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE02-1: Router & Hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab2.html#tree-folder-routes",
    "href": "reactjs/rjslab2.html#tree-folder-routes",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "2 Tree-folder & routes",
    "text": "2 Tree-folder & routes\n\nWe use React Router DOM library to create a web application with multiple pages.\nThe import statement at the top imports several components from the React Router DOMlibrary, including BrowserRouter, Routes, Route, and Link.\n\nThese components are used to define the routes and navigation for the application.\n\n\nThe Layout, Home, People, Contact, and NoPage components are defined in separate files and imported at the top of the code.\n\n\n\nThe App component is the main component of the application and is exported as the default component. This component returns JSX, which is a syntax extension to JavaScript used to describe how the user interface should look like.\nThe &lt;BrowserRouter&gt; component wraps the &lt;Routes&gt; component, indicating that this is the root of the application’s routing system.\nWithin the &lt;Routes&gt; component, there is a single &lt;Route&gt; component that has a path attribute set to “/”. This means that any URL that matches the root of the application will render this component.\nThe &lt;Route&gt; component with the path attribute set to “/” has four nested &lt;Route&gt; components inside it, each with a different path attribute and element attribute that points to the component that should be rendered when the corresponding URL is accessed.\n\nThe first nested &lt;Route&gt; component has an index attribute, which means it will be rendered when the root URL is accessed. This component renders the Home component.\nThe second nested &lt;Route&gt; component has a path attribute set to “/people”, which means it will be rendered when the URL ends with “/people”. This component renders the People component.\nThe third nested &lt;Route&gt; component has a path attribute set to “/contact”, which means it will be rendered when the URL ends with “/contact”. This component renders the Contact component.\nThe fourth and final nested &lt;Route&gt; component has a path attribute set to “*” which means it will be rendered when none of the other routes are matched. This component renders the NoPage component, indicating that the page the user is looking for cannot be found.\n\nRoute:\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Layout from \"./route/Layout.jsx\";\nimport Home from \"./pages/home/Home.jsx\";\nimport People from \"./pages/people/People.jsx\";\nimport Contact from \"./pages/contact/Contact.jsx\";\nimport NoPage from \"./route/NoPage\";\n\nexport default function App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n          &lt;Route index element={&lt;Home /&gt;} /&gt;\n          &lt;Route path=\"people\" element={&lt;People /&gt;} /&gt;\n          &lt;Route path=\"contact\" element={&lt;Contact /&gt;} /&gt;\n          &lt;Route path=\"*\" element={&lt;NoPage /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\nLayout, in this particular case we stack all components:\nimport { Outlet, Link } from \"react-router-dom\";\nimport React from \"react\";\nimport Footer from \"./Footer\";\n\nexport default function Layout() {\n  return (\n    &lt;&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n        &lt;span&gt;|&lt;/span&gt;\n        &lt;Link to=\"/people\"&gt;People&lt;/Link&gt;\n        &lt;span&gt;|&lt;/span&gt;\n        &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n        &lt;span&gt;|&lt;/span&gt;\n      &lt;/nav&gt;\n      &lt;Outlet /&gt;\n      &lt;Footer /&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE02-1: Router & Hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab2.html#usereducer-person-profile-form",
    "href": "reactjs/rjslab2.html#usereducer-person-profile-form",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "3 useReducer person profile form",
    "text": "3 useReducer person profile form\nReference:\n\ncodesandbox with handlers functions\ncodesandbox dispatcher onChange, onClick\nReact reference manual: useReducer\n\n\n3.1 Create route\nTo add a PersonForm or Form component to a new route:\n\nfirst import the PersonForm component.\nThen, add a new Route element under the Layout Route element with a path of “person-form” and an element prop with the PersonForm component.\nFinally, update the Layout component to render a Link component to the new route.\n\n\n\n3.2 reducer\nThis new feature on Hola5 defines a React component called “Form” that allows users to modify and display a person’s profile information. It uses the useReducer hook to manage the component’s state, which is initialized with an object that contains the person’s name, surname, and age.\n{   \n  name: \"Taylor\",\n  surname: \"Feels\",\n  age: 42\n}\n\nThe “reducer” function defines how state should be updated based on different types of actions dispatched by the component. The actions include incrementing or decrementing the person’s age and changing their name or surname.\n\n\n\n\nBasic structure component\n\n\nThe component’s state is initialized with an object (1)\nThe component renders a form with input fields for the person’s name and surname and buttons to increment or decrement their age. It also displays the current values of the person’s name, surname, and age.\nWhen the user interacts with the form elements (5), the component dispatches (3) the appropriate action to the reducer function (4), which updates the state and causes the component to re-render with the updated values (5).\nReducer:\nfunction reducer(state, action) {\n\n  switch (action.type) {\n\n    case \"incremented_age\": {\n      return {\n        name: state.name,\n        surname: state.surname,\n        age: state.age + 1\n      };\n    }\n    case \"decremented_age\": {\n      return {\n        name: state.name,\n        surname: state.initialsurname,\n        age: state.age - 1\n      };\n    }\n    case \"changed_name\": {\n      return {\n        name: action.nextName,\n        surname: state.surname,\n        age: state.age\n      };\n    }\n    case \"changed_surname\": {\n      return {\n        name: state.name,\n        surname: action.nextSurName,\n        age: state.age\n      };\n    }\n\n    default: {\n      throw Error(\"Unknown action: \" + action.type);\n    }\n  }\n}\n\n\n\n\n\nrender reducer\n\n\nWith or without handlers functions? Best without extra-functions but be careful with recursion, use arrow functions:\n&lt;button onClick={() =&gt; dispatch({ type: \"incremented_age\" })}&gt;\n\n\nWhy does onClick={x()} causes “too many re-renders” error in React?\n\n\n\nrecursion\n\n\nexport default function Form() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt; Person Profile form&lt;/h1&gt;\n      &lt;hr /&gt;&lt;br /&gt;\n      &lt;h3&gt; Modify data&lt;/h3&gt;\n\n      &lt;label&gt;Name&lt;/label&gt;\n      &lt;input\n        value={state.name}\n        onChange={(e) =&gt;\n          dispatch({\n            type: \"changed_name\",\n            nextName: e.target.value\n          })\n        }\n      /&gt;\n\n      &lt;label&gt;Surame&lt;/label&gt;\n      &lt;input\n        value={state.surname}\n        onChange={(e) =&gt;\n          dispatch({\n            type: \"changed_surname\",\n            nextSurName: e.target.value\n          })\n        }\n      /&gt;\n\n      &lt;button onClick={() =&gt; dispatch({ type: \"incremented_age\" })}&gt;\n        Increment age\n      &lt;/button&gt;\n\n      &lt;button onClick={() =&gt; dispatch({ type: \"decremented_age\" })}&gt;\n        Decrement age\n      &lt;/button&gt;\n      &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;\n\n      &lt;h3&gt;Person Profile&lt;/h3&gt;\n      &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; {state.name}&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Surname:&lt;/strong&gt; {state.surname}&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Age:&lt;/strong&gt; {state.age}&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\nWith handlers, perhaps a more verboise option:\nexport default function Form() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function handleButtonClickIncrement() {\n    dispatch({ type: \"incremented_age\" });\n  }\n\n  function handleButtonClickDecrement() {\n    dispatch({ type: \"decremented_age\" });\n  }\n\n  function handleInputChangeName(e) {\n    dispatch({\n      type: \"changed_name\",\n      nextName: e.target.value\n    });\n  }\n\n  function handleInputChangeSurName(e) {\n    dispatch({\n      type: \"changed_surname\",\n      nextSurName: e.target.value\n    });\n  }\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt; Person Profile form&lt;/h1&gt;\n      &lt;hr /&gt;\n      &lt;br /&gt;\n      &lt;h3&gt; Modify data&lt;/h3&gt;\n\n      &lt;label&gt;Name&lt;/label&gt;{\" \"}\n      &lt;input value={state.name} \n      onChange={handleInputChangeName} /&gt;\n\n      &lt;label&gt; Surame &lt;/label&gt;\n      &lt;input value={state.surname} \n      onChange={handleInputChangeSurName} /&gt;\n\n      &lt;button onClick={handleButtonClickIncrement}&gt;\n      Increment age&lt;/button&gt;\n\n      &lt;button onClick={handleButtonClickDecrement}&gt;\n      Decrement age&lt;/button&gt;\n      \n      &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;\n      &lt;h3&gt;Person Profile&lt;/h3&gt;\n      &lt;p&gt;\n        &lt;strong&gt;Name:&lt;/strong&gt; {state.name}\n      &lt;/p&gt;\n      &lt;p&gt;\n        &lt;strong&gt;Surname:&lt;/strong&gt; {state.surname}\n      &lt;/p&gt;\n      &lt;p&gt;\n        &lt;strong&gt;Age:&lt;/strong&gt; {state.age}\n      &lt;/p&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE02-1: Router & Hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab2.html#usereducer-useeffect-useref-clock",
    "href": "reactjs/rjslab2.html#usereducer-useeffect-useref-clock",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "4 useReducer, useEffect, useRef clock",
    "text": "4 useReducer, useEffect, useRef clock\nReference:\n\ncodesandbox\nReact reference manual: useEffect\nReact reference manual: useRef\n\nThis component creates a simple stopwatch with three buttons: Start, Stop, and Reset.\n\n\n\nrender clock\n\n\nThe state of the stopwatch is managed using the useReducer hook, which takes in a reducer function and an initial state.\nThe reducer function is responsible for updating the state based on actions dispatched by the buttons.\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"start\":\n      return { ...state, isRunning: true };\n    case \"stop\":\n      return { ...state, isRunning: false };\n    case \"reset\":\n      return { isRunning: false, time: 0 };\n    case \"tick\":\n      return { ...state, time: state.time + 1 };\n    default:\n      throw new Error();\n  }\n}\n\n\nThe spread operator ... allows you to expand an iterable object (like an array or an object) into individual elements or properties: here is used to copy all the properties of the state object and then override the isRunning property with the value true.\nThe initial state includes two properties, isRunning and time:\nconst initialState = {\n  isRunning: false,\n  time: 0\n};\nThe useEffect hook is used to start and stop the stopwatch. When the isRunning state is true, a timer is started using setInterval that dispatches a tick action every second. When isRunning state is false, the timer is cleared using clearInterval.\nuseEffect(() =&gt; {\n\n    if (!state.isRunning) {\n      return;\n    }\n\n    idRef.current = setInterval(\n      () =&gt; dispatch({ type: \"tick\" }), 1000);\n    \n    return () =&gt; {\n      clearInterval(idRef.current);\n      idRef.current = 0;\n    };\n\n  }, [state.isRunning]);\n\n\nsetInterval: setInterval(code, delay)\n\nclearInterval: clearInterval(intervalID)\n\n\nThe core business-logic of this code is the combination of:\n\nthe useEffect hook (which synchronizes execution with two different sources) and\nthe render cycle trigger-render-paint (due the change of state of state.time by setInterval and tick).\n\n\nThe key-idea of the useEffect in this particular use (related to a timer problem) is the synchronization of the execution with two different triggers:\n\n\ntimer: setIntervaland clearIntervalwith idRef\n\nuseEffect, first render: when the component is loaded.\nuseEffect, with its dependencies: state.isRunning, when user clicks button start, stop or reset.\n\nThe core business-logic is completed with the render-cycle. The key-idea here is when and who call the render-cycle:\n\nwith the change of the state the component triggers the render cycle: every time clock is ticking, that is, every one second: state.time by setInterval and tick.\n\nThe return statement returns a JSX template that displays the stopwatch: there are three buttons: “Start”, “Stop”, and “Reset” that dispatch start, stop, and reset actions respectively.\n\n\n\ncore business-logic Time Manager code\n\n\nThe idRef is a reference to the timer, and it is updated every time the useEffect hook is called.\n  const idRef = useRef(0);\nThe returned value of setInterval, which represents the ID of the interval, is stored in idRef.current.\n\n\n\nCleanup return\n\n\nThe cleanup function of the useEffect hook allows us to stop side effects that no longer need to be executed before our component is unmounted.\nuseEffect(() =&gt; {\n  // Core business-logic\n  return () =&gt; {\n    // Cleanup\n  }\n}, [dependencies])\nWhen to use a cleanup function:\n\nCanceling a fetch request\nCleaning up Timeouts\nCleaning up Intervals\nCleaning up Event Listeners\nClosing up Web Sockets\n\nuseEffect(() =&gt; {\n\n    // ...\n\n    return () =&gt; {\n      clearInterval(idRef.current);\n      idRef.current = 0;\n    };\n\n  }, [state.isRunning]);\nThis cleanup function will be executed before the next effect execution or when the component unloads (unmounts). Inside the cleanup function:\n\nThe clearInterval function is called with the idRef.current value to clear the interval and stop the associated callback function from executing.\nidRef.current is set to 0 to indicate that the interval has been cleared.\n\nThe cleanup return function ensures that any resources or side effects created by the effect are properly cleaned up and disposed of, preventing memory leaks or unintended behavior.\nIn this case, it ensures that the interval is cleared and any associated callbacks are stopped when the component unmounts or when the isRunning value changes to false.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE02-1: Router & Hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab2.html#api-rest",
    "href": "reactjs/rjslab2.html#api-rest",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "5 api Rest",
    "text": "5 api Rest\n\n5.1 Axios\nInstall axios using npm:\n$ npm install axios\n\nAxios is a promise-based HTTP Client for node.js and the browser.\nIt is isomorphic\nOn the server-side it uses the native node.js http module\nOn the client (browser) it uses XMLHttpRequests.\n\n\n\nisomorphic: it can run in the browser and nodejs with the same codebase.\nWe use the Axios library to fetch data from the JSONPlaceholder API, which provides a fake REST API for testing and prototyping.\n\n\n5.2 Component\nThe component initializes a state variable called data using the useState hook, and sets its initial value to an empty array.\n const [data, setData] = useState([]);\nThe useEffect hook is used to fetch the data from the API and update the data state variable when:\n\nthe component mounts or\nwhen the setData function is called.\n\nThe axios.get() method is called with the URL of the API endpoint:\nconst url = \"https://jsonplaceholder.typicode.com/todos\";\nThe response is handled with a then block that sets the data state variable to the response data. If there is an error, it is logged to the console with a catch block.\nIn the component’s return statement, the fetched data is rendered using the .map() method to loop through each item in the data array.\nThe key prop is added to each item to help React identify the items and improve performance.\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function AxiosApiRest() {\n  const url = \"https://jsonplaceholder.typicode.com/todos\";\n  const [data, setData] = useState([]);\n\n  useEffect(() =&gt; {\n    axios\n      .get(url)\n      .then((response) =&gt; {\n        setData(response.data);\n      })\n      .catch((error) =&gt; {\n        console.log(error);\n      });\n  }, [setData]);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt; My data todos from axios&lt;/h1&gt;\n      {data &&\n        data.map((item) =&gt; {\n          return (\n            &lt;spam key={item.id}&gt;\n              id: {item.id}\n              &lt;spam&gt;userId: {item.userId} &lt;/spam&gt;\n              &lt;spam&gt;title: {item.title} &lt;/spam&gt;\n              &lt;spam&gt;completed: {item.completed} &lt;/spam&gt;\n              &lt;br /&gt;\n            &lt;/spam&gt;\n          );\n        })}\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE02-1: Router & Hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab2.html#usecontext-login",
    "href": "reactjs/rjslab2.html#usecontext-login",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "6 useContext login",
    "text": "6 useContext login\nReference: useContext hook: Example #1\n\n\n\nuseContext: create, provide, consume\n\n\n\n\n\nuseContext: consume in components-tree\n\n\n\ncreateContext, useContext, useState working together\n\nIn this example, there is a currentUser state variable which holds an object.\nWe combine { currentUser, setCurrentUser } into a single object and pass it down through the context inside the value={}.\nThis lets any component below, such as LoginButton, read both currentUser and setCurrentUser, and then call setCurrentUser when needed.\n\n\nApp.js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n  const [currentUser, setCurrentUser] = useState(null);\n  return (\n    &lt;CurrentUserContext.Provider\n      value={{\n        currentUser,\n        setCurrentUser\n      }}\n    &gt;\n      &lt;Form /&gt;\n    &lt;/CurrentUserContext.Provider&gt;\n  );\n}\n\nfunction Form({ children }) {\n  return (\n    &lt;Panel title=\"Welcome\"&gt;\n      &lt;LoginButton /&gt;\n    &lt;/Panel&gt;\n  );\n}\n\nfunction LoginButton() {\n  const {\n    currentUser,\n    setCurrentUser\n  } = useContext(CurrentUserContext);\n\n  if (currentUser !== null) {\n    return &lt;p&gt;You logged in as {currentUser.name}.&lt;/p&gt;;\n  }\n\n  return (\n    &lt;Button onClick={() =&gt; {\n      setCurrentUser({ name: 'Advika' })\n    }}&gt;Log in as Advika&lt;/Button&gt;\n  );\n}\n\nfunction Panel({ title, children }) {\n  return (\n    &lt;section className=\"panel\"&gt;\n      &lt;h1&gt;{title}&lt;/h1&gt;\n      {children}\n    &lt;/section&gt;\n  )\n}\n\nfunction Button({ children, onClick }) {\n  return (\n    &lt;button className=\"button\" onClick={onClick}&gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nInitial render\n\n\n\nExamples of updating context",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE02-1: Router & Hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab2.html#versions",
    "href": "reactjs/rjslab2.html#versions",
    "title": "Lab#RE02-1: Router & Hooks",
    "section": "7 Versions",
    "text": "7 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nHola5 0.0\ncreate project with route: hola5 0.0\ninitial tree-folder\nrender home\n\n\nHola5 0.1\nuseReducer: user Profile hola5 0.1  compoonent useReducer on codesandbox with handlers functions  or codesandbox dispatcher onChange, onClick\nuserReducer tree-folder\nrender user profile\n\n\nHola5 0.2\nuseReducer, userRef, useEffect: clock hola5 0.2  component clock on codesandbox \nclock tree-folder\nrender clock\n\n\nHola5 0.3\napi Rest hola5 0.3  component api Rest codesandbox \napi Rest tree-folder\nrender api Rest\n\n\nHola5 0.4\nuseContext: fake login hola5 0.4\nuseContxt login tree-folder\nrender useContext login - render useContext loged",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE02-1: Router & Hooks"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-render-dom.html",
    "href": "reactjs/reactjs-what-render-dom.html",
    "title": "React JS: render virtual DOM",
    "section": "",
    "text": "📘 Virtual DOM\nThe virtual DOM VDOM is a programming concept where an ideal, or virtual, representation of a UI is kept in memory and synced with the real DOM by a library such as ReactDOM.\nThis process is called reconciliation.\n\n\nInstead of manipulating the browser’s DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the real browser DOM.\nThis approach enables the declarative API of React: you tell React what state you want the UI to be in, and it makes sure the DOM matches that state\nThis abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: render virtual DOM"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-render-dom.html#overview",
    "href": "reactjs/reactjs-what-render-dom.html#overview",
    "title": "React JS: render virtual DOM",
    "section": "",
    "text": "📘 Virtual DOM\nThe virtual DOM VDOM is a programming concept where an ideal, or virtual, representation of a UI is kept in memory and synced with the real DOM by a library such as ReactDOM.\nThis process is called reconciliation.\n\n\nInstead of manipulating the browser’s DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the real browser DOM.\nThis approach enables the declarative API of React: you tell React what state you want the UI to be in, and it makes sure the DOM matches that state\nThis abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: render virtual DOM"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-render-dom.html#how-virtual-dom-and-diffing-works-in-react",
    "href": "reactjs/reactjs-what-render-dom.html#how-virtual-dom-and-diffing-works-in-react",
    "title": "React JS: render virtual DOM",
    "section": "2 How Virtual-DOM and diffing works in React",
    "text": "2 How Virtual-DOM and diffing works in React\n\n\n\nThe virtual DOM VDOM is a lightweight in-memory representation of the actual DOM\n\n\nHow Virtual-DOM and diffing works in React\n\n\nWhen the state of a React component changes, the component re-renders and creates a new VDOM tree. React then compares this new tree to the previous VDOM tree, using a process called “diffing.”\nIn React, the virtual DOM VDOM is a lightweight in-memory representation of the actual DOM. It is a tree-like structure with a hierarchy of node objects that corresponds to the structure of the DOM. Each node in the VDOM tree represents an element in the actual DOM, and has properties that correspond to the attributes and content of that element.\n\n\n\n\n\n\nNote\n\n\n\nDuring the diffing process, React compares the two VDOM trees, node by node, and determines which nodes have changed, added, or removed. React then updates the actual DOM with the minimum number of changes necessary to reflect the changes in the VDOM.\n\n\nThis process helps to improve the performance of React applications, because it reduces the number of DOM manipulations that are required to keep the DOM up-to-date with the component’s state.\nThe diffing algorithm used by React is based on a concept called reconciliation. During reconciliation, React compares the VDOM nodes and their children, and determines the minimum number of steps that are needed to transform the old tree into the new tree.\nThis process helps to minimize the number of DOM manipulations that are required, and makes React updates faster and more efficient.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: render virtual DOM"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-render-dom.html#how-it-works",
    "href": "reactjs/reactjs-what-render-dom.html#how-it-works",
    "title": "React JS: render virtual DOM",
    "section": "3 How it works?",
    "text": "3 How it works?\nReconciliation\nWhen parsing JSX, React uses its internal reconciler, called the Reconciler.\n\n\n\n\n\n\nReconciler\n\n\n\nReconciler works to convert JSX syntax into function calls that create React elements.\nThese elements describe the desired structure and properties of UI components.\n\n\nReact then uses these elements to build a virtual representation of the DOM, known as the “Virtual DOM.”\nThe Reconciler is responsible for comparing the previous and new versions of the Virtual DOM. It identifies the specific changes needed to update the real DOM efficiently. This process is known as “reconciliation” or “diffing.”\nDuring reconciliation, the Reconciler examines the differences between the previous and new Virtual DOM representations and calculates the minimal set of changes required.\nIt determines which parts of the real DOM need to be added, removed, or modified to reflect the updated component state.\nOnce the necessary changes are identified, the Reconciler applies them to the real DOM, selectively updating only the affected elements.\nThis ensures that the actual browser DOM reflects the new component state accurately. The updated content is then rendered on the screen.\nBy using this approach, React optimizes performance by minimizing direct interactions with the browser DOM and only updating the necessary parts.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: render virtual DOM"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html",
    "href": "reactjs/reactjs-what-jsx.html",
    "title": "React JS: JSX",
    "section": "",
    "text": "📘 JSX JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: JSX"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#overview",
    "href": "reactjs/reactjs-what-jsx.html#overview",
    "title": "React JS: JSX",
    "section": "",
    "text": "📘 JSX JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: JSX"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#the-problem",
    "href": "reactjs/reactjs-what-jsx.html#the-problem",
    "title": "React JS: JSX",
    "section": "2 The problem",
    "text": "2 The problem\nJSX: Putting markup into JavaScript\nThe Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript—often in separate files!\nContent was marked up inside HTML while the page’s logic lived separately in JavaScript.\n\nSo, we need a way to put things together.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: JSX"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#the-solution-react-jsx",
    "href": "reactjs/reactjs-what-jsx.html#the-solution-react-jsx",
    "title": "React JS: JSX",
    "section": "3 The solution: React JSX",
    "text": "3 The solution: React JSX\n\n\ntodolist.jsx\n\nexport default function TodoList() {\n  //\n  // business logic and objects: JavaScript\n  //\n  return (\n    //\n    // Render: html + css\n    //\n  )\n}\n\n\n\n\n\n\nJSX: Putting markup into JavaScript",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: JSX"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#react-jsx-is-a-optimal-solution-but",
    "href": "reactjs/reactjs-what-jsx.html#react-jsx-is-a-optimal-solution-but",
    "title": "React JS: JSX",
    "section": "4 React JSX is a optimal solution but",
    "text": "4 React JSX is a optimal solution but\n\n\n\nReact is a optimal solution but there is a lot of work to do yet\n\n\nfrom David Ceddia\n\nReact cares exactly zero about styling. Think of it as generating the barebones HTML. React will put elements on the page, but everything after that is the job of CSS: how they appear, what they look like, how they’re positioned, and how centered or uncentered they are.\n“How to center a div in React” is… not a React problem. It’s a CSS problem. You don’t need “react” in your Google query. Once you figure it out, use React to apply the right CSS class name to your components.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: JSX"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#the-rules-of-jsx",
    "href": "reactjs/reactjs-what-jsx.html#the-rules-of-jsx",
    "title": "React JS: JSX",
    "section": "5 The Rules of JSX",
    "text": "5 The Rules of JSX\n\n\n\n\n\n\nReturn a single root element\n\n\n\nTo return multiple elements from a component, wrap them with a single parent tag.\n\n\n\n\n\n\n\n\nClose all the tags\n\n\n\nJSX requires tags to be explicitly closed: self-closing tags like &lt;img&gt; must become &lt;img /&gt;, and wrapping tags like &lt;li&gt;oranges must be written as &lt;li&gt;oranges&lt;/li&gt;.\n\n\n\n\n\n\n\n\ncamelCase all most of the things!\n\n\n\nJSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can’t contain dashes or be reserved words like class.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: JSX"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-jsx.html#the-trick-js-in-jsx-with-curly-braces",
    "href": "reactjs/reactjs-what-jsx.html#the-trick-js-in-jsx-with-curly-braces",
    "title": "React JS: JSX",
    "section": "6 The trick: JS in JSX with Curly Braces",
    "text": "6 The trick: JS in JSX with Curly Braces\nJSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.\n\n\n\n\n\n\nJSX is a special way of writing JavaScript.\n\n\n\nThat means it’s possible to use JavaScript inside it—with curly braces { }.\n\n\n\n\ntodolist.jsx\n\nexport default function TodoList() {\n  const name = 'Gregorio Y. Zara';\n  return (\n    &lt;h1&gt;{name}'s To Do List&lt;/h1&gt;\n  );\n}\n\n\n\n\n\n\nThe example below first declares a name for the scientist, name, then embeds it with curly braces inside the\n\n\n\n\n\ntodolist.jsx\n\nexport default function TodoList() {\n  return (\n    &lt;ul style={{\n      backgroundColor: 'black',\n      color: 'pink'\n    }}&gt;\n      &lt;li&gt;Improve the videophone&lt;/li&gt;\n      &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt;\n      &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt;\n    &lt;/ul&gt;\n  );\n}\n\n\n\n\n\n\nYou may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases).\n\n\n\n\n\ntodolist.jsx\n\nconst person = {\n  name: 'Gregorio Y. Zara',\n  theme: {\n    backgroundColor: 'black',\n    color: 'pink'\n  }\n};\n\nexport default function TodoList() {\n  return (\n    &lt;div style={person.theme}&gt;\n      &lt;h1&gt;{person.name}'s Todos&lt;/h1&gt;\n      &lt;img\n        className=\"avatar\"\n        src=\"https://i.imgur.com/7vQD0fPs.jpg\"\n        alt=\"Gregorio Y. Zara\"\n      /&gt;\n      &lt;ul&gt;\n        &lt;li&gt;Improve the videophone&lt;/li&gt;\n        &lt;li&gt;Prepare aeronautics lectures&lt;/li&gt;\n        &lt;li&gt;Work on the alcohol-fuelled engine&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\n\n\n\n\n\n\n\nYou can move several expressions into one object, and reference them in your JSX inside curly braces",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: JSX"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html",
    "href": "reactjs/reactjs-what-create.html",
    "title": "React JS: Create a React project",
    "section": "",
    "text": "nvm is a version manager for node.js, designed to be installed per-user, and invoked per-shell.\nnvm works on any POSIX-compliant shell (sh, dash, ksh, zsh, bash), in particular on these platforms: unix, macOS, and windows WSL.\nTo install or update nvm, you should run the install script. To do that, you may either download and run the script manually, or use the following cURL command:\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Use cURL command with bash to install NVM\n\n\n\nnvm install node # \"node\" is an alias for the latest version\n\n\n\nInstalling and Updating nvm",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html#react-directly-in-html",
    "href": "reactjs/reactjs-what-create.html#react-directly-in-html",
    "title": "React JS: Create a React project",
    "section": "2.1 React Directly in HTML",
    "text": "2.1 React Directly in HTML\nStart by including three scripts, the first two let us write React code in our JavaScripts, and the third, Babel, allows us to write JSX syntax and ES6 in older browsers.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin&gt;\n    &lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;div id=\"mydiv\"&gt;&lt;/div&gt;\n\n    &lt;script type=\"text/babel\"&gt;\n      function Hello() {\n        return &lt;h1&gt;Hello World!&lt;/h1&gt;;\n      }\n\n      ReactDOM.render(&lt;Hello /&gt;, document.getElementById('mydiv'))\n    &lt;/script&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html#install-nodejs-and-npm",
    "href": "reactjs/reactjs-what-create.html#install-nodejs-and-npm",
    "title": "React JS: Create a React project",
    "section": "2.2 Install Nodejs and npm",
    "text": "2.2 Install Nodejs and npm\nTo create a new React app, you will need to have the following software installed on your computer:\n\nNode.js: This is a JavaScript runtime that is used to execute JavaScript code outside of a web browser. You can download the latest version of Node.js from the official website (https://nodejs.org/) or through a package manager like Homebrew (Mac) or Chocolatey (Windows).\nnpm: This is the package manager for Node.js, which is used to manage the libraries and dependencies that your app uses. npm is included with Node.js, so you don’t need to install it separately.\n\n\n\n\n\n\n\nTip\n\n\n\nnpx is a tool that is included with npm, the package manager for Node.js. It allows you to execute packages that are installed locally or globally in your project’s node_modules directory.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html#create-react-app",
    "href": "reactjs/reactjs-what-create.html#create-react-app",
    "title": "React JS: Create a React project",
    "section": "2.3 create-react-app",
    "text": "2.3 create-react-app\nWhether you’re using React or another library, Create React App lets you focus on code, not build tools.\nTo create a project called my-app, run this command:\nnpx create-react-app my-app\n\n\n\nCreate project",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html#install-create-react-app",
    "href": "reactjs/reactjs-what-create.html#install-create-react-app",
    "title": "React JS: Create a React project",
    "section": "2.4 Install create-react-app",
    "text": "2.4 Install create-react-app\nUpdating your build tooling is typically a daunting and time-consuming task. When new versions of Create React App are released, you can upgrade using a single command:\nnpm install react-scripts@latest",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html#react-developer-tools",
    "href": "reactjs/reactjs-what-create.html#react-developer-tools",
    "title": "React JS: Create a React project",
    "section": "2.5 React Developer Tools",
    "text": "2.5 React Developer Tools\n\n\n\nThe easiest way to debug websites built with React is to install the React Developer Tools browser extension.\n\n\nUse React Developer Tools to inspect React components, edit props and state, and identify performance problems.\n\nInstall for Chrome\nInstall for Firefox\nInstall for Edge\n\nFor other browsers (for example, Safari), install the react-devtools npm package:\n# Yarn\nyarn global add react-devtools\n\n# Npm\nnpm install -g react-devtools",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html#tree-folder",
    "href": "reactjs/reactjs-what-create.html#tree-folder",
    "title": "React JS: Create a React project",
    "section": "2.6 Tree-folder",
    "text": "2.6 Tree-folder\nThe React application automatically creates the basic tree-folder, as follows:\n\n\n\nInitial Tree-folder\n\n\n\n.gitignore: this file is the standard file which is used by source control tool git to identify which files and folders are need to be ignored while committing the code. Until and unless this file exists, the create-react-app command will not create a git repo in this folder.\npackage.json: this file contains dependencies and scripts required for the project.\n\nname - points to name of your app.\nversion - refers to the current version that the application is using.\nprivate: true - is a foolproof setting which avoids accidentally publishing of your react app as a public package in npm ecosystem.\ndependencies will contain all required node modules and versions required for the application. By default, 2 dependencies are added which include React and React-Dom that allow using JavaScript. In our demo, we are using React version 16.8.\nScripts specify aliases that can be used to access some React command in a more efficient manner.\n\npackage-lock.json contain exact dependency tree to be installed in /node_modules. It helps while a team is working on private apps to ensure that they are working on the same version of dependencies and sub-dependencies. It also maintains a history of changes done in package.json so, that at any point of time, when required previous changes can be looked back in the package-lock.json file.\nnode_modules - This folder contains all dependencies and sub-dependencies specified in package.json used by React app. It contains more than 800 subfolders, this folder is automatically added in the .gitignore file.\npublic - This folder contains files which don’t require additional processing by webpack. The index.html file is considered as an entry point for the web application. Here, the favicon is a header icon and manifest.xml file contains configuration when your application is used for Android app.\nsrc - This folder is the heart of React application as it contains JavaScript which needs to be processed by webpack. In this folder, there is a main component App.js, its related styles (App.css), test suite (App.test.js). index.js, and its style (index.css); which provide an entry point into the App. Lastly, it contains registerServiceWorker.js which takes care of caching and updating files for the end user. It helps in offline capability and faster page loading after the first visit.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html#reactjs-project-structure",
    "href": "reactjs/reactjs-what-create.html#reactjs-project-structure",
    "title": "React JS: Create a React project",
    "section": "2.7 ReactJs Project Structure",
    "text": "2.7 ReactJs Project Structure\nThe folder structure looks like this.\n\n\n\nReactJs Project Structure\n\n\n\nAssets: As the name says, it contains assets of our project. It consists of images and styling files. Here we can store our global styles. We are centralizing the project so we can store the page-based or component-based styles over here. But we can even keep style according to the pages folder or component folder also. But that depends on developer comfortability.\nLayouts: As the name says, it contains layouts available to the whole project like header, footer, etc. We can store the header, footer, or sidebar code here and call it.\nComponents: Components are the building blocks of any react project. This folder consists of a collection of UI components like buttons, modals, inputs, loader, etc., that can be used across various files in the project. Each component should consist of a test file to do a unit test as it will be widely used in the project.\nPages: The files in the pages folder indicate the route of the react application. Each file in this folder contains its route. A page can contain its subfolder. Each page has its state and is usually used to call an async operation. It usually consists of various components grouped.\nMiddleware: This folder consists of middleware that allows for side effects in the application. It is used when we are using redux with it. Here we keep all our custom middleware.\nRoutes: This folder consists of all routes of the application. It consists of private, protected, and all types of routes. Here we can even call our sub-route.\nConfig: This folder consists of a configuration file where we store environment variables in config.js. We will use this file to set up multi-environment configurations in your application.\nServices : This folder will be added if we use redux in your project. Inside it, there are 3 folders named actions, reducers, and constant subfolders to manage states. The actions and reducers will be called in almost all the pages, so create actions, reducers & constants according to pages name.\nUtils: Utils folder consists of some repeatedly used functions that are commonly used in the project. It should contain only common js functions & objects like dropdown options, regex condition, data formatting, etc.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-create.html#debugging-reactjs",
    "href": "reactjs/reactjs-what-create.html#debugging-reactjs",
    "title": "React JS: Create a React project",
    "section": "2.8 Debugging ReactJS",
    "text": "2.8 Debugging ReactJS\nThere there are several steps you can take to make the debugging process easier:\n\nCheck the Console: Open the browser’s console and look for any error messages. Often, errors will be logged in the console, which will give you an idea of where to start debugging. You can learn more about using the browser console to debug JavaScript here: [MDN Web Docs - Console](https://developer.mozilla.org/en-US/docs/Web/API/Console)\nUse React Developer Tools: React Developer Tools is a browser extension that provides a suite of tools for debugging and profiling React components. It allows you to inspect React component hierarchies and track the flow of data between components. You can learn more about using React Developer Tools here: [React Developer Tools](https://github.com/facebook/react-devtools)\nUse Console.log(): Place console.log() statements throughout your code to print out variables and see how they change as the code executes. You can learn more about using console.log() for debugging here: [MDN Web Docs - Debugging JavaScript](https://developer.mozilla.org/en-US/docs/Web/javascript/Reference/Statements/console)\nBreakpoints: Set breakpoints in your code using the browser’s developer tools or an integrated development environment (IDE) like Visual Studio Code. This allows you to pause the execution of your code and step through it line by line, inspecting variables and the state of your components. You can learn more about using breakpoints for debugging here: [Chrome DevTools - Debugging JavaScript](https://developers.google.com/web/tools/chrome-devtools/javascript)",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Create a React project"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-objects.html",
    "href": "reactjs/reactjs-js-objects.html",
    "title": "JavaScript: objects",
    "section": "",
    "text": "📘 JavaScript: Objects\nAn object is a collection of related data and/or functionality. These usually consist of several variables and functions (which are called properties and methods when they are inside objects).",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: objects"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-objects.html#dot-notation",
    "href": "reactjs/reactjs-js-objects.html#dot-notation",
    "title": "JavaScript: objects",
    "section": "1.1 Dot notation",
    "text": "1.1 Dot notation\nAbove, you accessed the object’s properties and methods using dot notation.\nThe object name (person) acts as the namespace — it must be entered first to access anything inside the object.\nNext you write a dot, then the item you want to access — this can be the name of a simple property, an item of an array property, or a call to one of the object’s methods.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: objects"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-objects.html#what-is-this",
    "href": "reactjs/reactjs-js-objects.html#what-is-this",
    "title": "JavaScript: objects",
    "section": "1.2 What is “this”",
    "text": "1.2 What is “this”\nYou may have noticed something slightly strange in our methods. Look at this one for example:\n\n\nApp.js\n\nintroduceSelf() {\n  console.log(`Hi! I'm ${this.name[0]}.`);\n}\n\nYou are probably wondering what this is. The this keyword refers to the current object the code is being written inside — so in this case this is equivalent to person. So why not just write person instead?\nWell, when you only have to create a single object literal, it’s not so useful. But if you create more than one, this enables you to use the same method definition for every object you create.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: objects"
    ]
  },
  {
    "objectID": "reactjs/rjslab4-2.html",
    "href": "reactjs/rjslab4-2.html",
    "title": "Lab#RE04-2: Spring Boot & ReactJS",
    "section": "",
    "text": "📘 React JS Lab#RE04-1: Spring Boot and ReactJS\nIn this lab, we will be using Spring Boot server to feed our React Todo app through API Rest.\nFor many reasons described in the previous article the use of a React App with a Spring Boot is a very good option:\n\nSpring Boot: Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.\nReact, the library for web and native user interfaces.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-2: Spring Boot & ReactJS"
    ]
  },
  {
    "objectID": "reactjs/rjslab4-2.html#user-story-and-mock-up",
    "href": "reactjs/rjslab4-2.html#user-story-and-mock-up",
    "title": "Lab#RE04-2: Spring Boot & ReactJS",
    "section": "1 user-story and mock-up",
    "text": "1 user-story and mock-up\n\n\n\nBasic architecture Spring Boot and ReactJS todo\n\n\n\n\n\n\n\nMock-up Spring Boot and ReactJS todo\n\n\n\n1.1 Adding a task to the Todo List\n\nAs a user, I want to be able to add a task to my todo list, So that I can keep track of what I need to do.\n\n\n1.1.1 Acceptance Criteria\n\nWhen I visit the todo web application, I should see an input field where I can enter a task description.\nAfter entering the task description, I should be able to submit it by pressing the “Add” button or hitting the Enter key.\nOnce I add a task, it should appear as a new item on my todo list.\nIf I enter an empty task description, the system should not allow me to add it and display an error message.\nAfter successfully adding a task, the input field should be cleared and ready for me to enter another task.\n\n\n\n\n1.2 Deleting a Task from the Todo List\n\nAs a user, I want to be able to delete a task from my todo list, So that I can remove completed or unnecessary tasks.\n\n\n1.2.1 Acceptance Criteria\n\nWhen I view the todo list, each task should have a delete button or an option to mark it for deletion.\nWhen I click on the delete button or mark a task for deletion, the system should remove the task from the todo list.\nIf I accidentally mark a task for deletion, there should be an option to undo the deletion and restore the task to the todo list.\nThe system should provide a confirmation prompt before permanently deleting a task.\nAfter deleting a task, the todo list should update automatically to reflect the changes.\nIf the todo list is empty after deleting a task, the system should display a message indicating that there are no tasks remaining.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-2: Spring Boot & ReactJS"
    ]
  },
  {
    "objectID": "reactjs/rjslab4-2.html#general-step-by-step",
    "href": "reactjs/rjslab4-2.html#general-step-by-step",
    "title": "Lab#RE04-2: Spring Boot & ReactJS",
    "section": "2 general step-by-step",
    "text": "2 general step-by-step\nTo create an architecture using Spring Boot, MongoDB, and React for managing a Todo object, you can follow the steps outlined below:\n\n2.1 Backend Architecture (Spring Boot and MongoDB):\n\nSet up the Spring Boot project:\n\nCreate a new Spring Boot project using your preferred IDE or use the Spring Initializr.\nInclude the necessary dependencies, such as Spring Web, Spring Data MongoDB, and any additional libraries you might need.\n\nCreate the Todo model:\n\nDefine a Todo class with the required fields (e.g., id, title, description, status, etc.).\nAnnotate the class with @Document to map it to a MongoDB collection.\nUse appropriate annotations like @Id, @Field, etc., to define the mapping of the fields.\n\nCreate a CRUD repository:\n\nCreate an interface that extends MongoRepository&lt;Todo, String&gt;.\nThis repository will provide the basic CRUD operations (create, read, update, delete) for the Todo model.\nCustomize the repository with additional methods if needed.\n\nCreate a REST controller:\n\nCreate a controller class annotated with @RestController.\nInject the Todo repository into the controller using @Autowired.\nDefine REST endpoints using @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, etc., for CRUD operations.\nImplement the necessary request mappings for each operation using the repository methods.\n\n\n\n\n2.2 Frontend Architecture (React with Axios and Context):\n\nSet up the React project:\n\nCreate a new React project using create-react-app or your preferred method.\nSet up any additional configurations or dependencies required.\n\nCreate a data access layer:\n\nCreate a file for making HTTP requests using Axios (e.g., api.js).\nDefine functions for each CRUD operation, making the corresponding API calls to the backend.\nHandle responses and errors as needed.\n\nSet up a context:\n\nCreate a context file (e.g., TodoContext.js) to manage the state and actions related to the Todo object.\nDefine the necessary context provider component, which will wrap the root component.\nImplement state management functions (e.g., addTodo, deleteTodo, updateTodo) within the context provider.\n\nCreate React components:\n\nCreate React components for displaying Todo objects (e.g., TodoList, TodoItem, TodoAdd).\nUse the context to access and modify the Todo state and perform CRUD operations.\nRender the Todo components within your application’s layout.\n\n\nWith this architecture in place, your Spring Boot backend will expose RESTful endpoints for CRUD operations on the Todo object, while the React frontend can consume those APIs using Axios for data retrieval, creation, updating, and deletion.\nThe context-axios layer in React will handle state management and provide access to the Todo data throughout the application.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-2: Spring Boot & ReactJS"
    ]
  },
  {
    "objectID": "reactjs/rjslab4-2.html#api-rest-documentation",
    "href": "reactjs/rjslab4-2.html#api-rest-documentation",
    "title": "Lab#RE04-2: Spring Boot & ReactJS",
    "section": "3 API rest documentation",
    "text": "3 API rest documentation\nThis documentation provides an overview of the REST API endpoints implemented using Spring Boot’s Rest Controller, which will be consumed by a React JS frontend. The API endpoints allow CRUD (Create, Read, Update, Delete) operations on a “todo” resource.\nPublished docs by Postman.\n\n\n\nPublished docs API Rest\n\n\n\nBase URL : http://localhost:9898\nPort: 9898\nPath: /todo\n\n\n\n\n\n\n\n\n\n\nOperation\nQuery\nJSON\nDescription\n\n\n\n\nGET\n/\n{todo items}\nRetrieves a list of all todo items.\n\n\nPOST\n/createTodo\n{todo item} body/raw/JSON\nCreates a new todo item.\n\n\nDELETE\n/?id=4\nid as a param\nDeletes all todo items.\n\n\nPUT\nupdateTodo/6\nid as a pathvariable {todo item} body/raw/JSON\nUpdates an existing todo item.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-2: Spring Boot & ReactJS"
    ]
  },
  {
    "objectID": "reactjs/rjslab4-2.html#step-by-step-code",
    "href": "reactjs/rjslab4-2.html#step-by-step-code",
    "title": "Lab#RE04-2: Spring Boot & ReactJS",
    "section": "4 step-by-step code",
    "text": "4 step-by-step code\n\n4.1 UML: Spring Boot - ReactJS todo\n\n\n\nUML Spring Boot ReactJS, viewer draw.io by Ruben B.\n\n\n\n\n4.2 MongoDB\nTo connect a Spring Boot project to MongoDB, you can configure the connection string in the application.properties file.\nHere’s a short intro and very general on how to do that:\nFirst, make sure you have added the necessary dependencies for MongoDB in your pom.xml file. Include the following dependencies:\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.mongodb&lt;/groupId&gt;\n    &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;\n&lt;/dependency&gt;\nNext, open the application.properties file located in the src/main/resources directory of your Spring Boot project.\nAdd the following properties to the file to configure the MongoDB connection:\nspring.data.mongodb.host=your-mongodb-host\nspring.data.mongodb.port=your-mongodb-port\nspring.data.mongodb.database=your-mongodb-database\nReplace the placeholders (your-mongodb-host, your-mongodb-port, and your-mongodb-database) with the appropriate values for your MongoDB instance.\nOptionally, if your MongoDB server requires authentication, you can add the following properties to the application.properties file:\nspring.data.mongodb.username=your-mongodb-username\nspring.data.mongodb.password=your-mongodb-password\nReplace your-mongodb-username and your-mongodb-password with the appropriate credentials for your MongoDB instance.\n\n\n\nmongoDB\n\n\nMongoDB will store this kind of object:\n{\n   \"_id\":\"4\",\n   \"text\":\"test rafa 3\",   \n   \"author\":\"rafa\",\n   \"due\":{\"$date\":{\"$numberLong\":\"1685311200000\"}},\n   \"completed\":true,\n   \"_class\":\"com.example.myFirstSpring.model.Todo\"}\n\n\n4.3 Backend: Spring Boot todo\nFirst, create and install dependencies (pom.xml) Spring Boot:\n\n\n\nfolder-tree Spring Boot, IntellIJIdea, todo\n\n\nYou may read about Spring Boot creation here\n\n4.3.1 pom.xml\n\n\nTodo.java\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.0.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;LibraryManagement&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n    &lt;name&gt;controllerView&lt;/name&gt;\n    &lt;description&gt;Demo project for Spring Boot Composition and TH&lt;/description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;17&lt;/java.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n            &lt;artifactId&gt;h2&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.github.javafaker&lt;/groupId&gt;\n            &lt;artifactId&gt;javafaker&lt;/artifactId&gt;\n            &lt;version&gt;1.0.2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n\n\n\n4.3.2 Java classes\nModel:\n\n\nTodo.java\n\npackage com.example.myFirstSpring.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport java.time.LocalDate;\nimport org.bson.types.Binary;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Document(collection = \"todo\")\npublic class Todo {\n\n    @Id\n    private String id;\n    private String text;\n    private String author;\n    private LocalDate due;\n    private boolean completed;\n    //private Binary image;\n}\n\n\n\n4.3.3 @CrossOrigin\nBy default, web browsers enforce the same-origin policy, which means that a web page can only make requests to the same origin (domain, protocol, and port) from which it was loaded.\nHowever, in the case of a React.js app consuming a Spring Boot API running on a different origin (such as http://localhost:3000 for the React.js development server), the same-origin policy would block the API requests.\nThe @CrossOrigin(origins = \"http://localhost:3000\") annotation in the Spring Boot controller allows the API to respond to requests from the specified origin, in this case, http://localhost:3000, which is where the React.js app is hosted during development.\nThis enables the React.js app to successfully consume the API’s endpoints and access the necessary data.\n\n\nTodo.java\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@CrossOrigin(origins = \"http://localhost:3000\")\n@Document(collection = \"todo\")\npublic class Todo {\n   //...\n}\n\nTodoRepository\n\n\nTodoRepository.java\n\npackage com.example.myFirstSpring.repository;\n\nimport com.example.myFirstSpring.model.Todo;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport java.util.Optional;\n\npublic interface TodoRepository extends MongoRepository&lt;Todo, String&gt; {\n    Optional&lt;Todo&gt; findTodoById(String id);\n    void deleteTodoById(String id);\n}\n\nTodoRestController\n\n\nTodoRestController.java\n\npackage com.example.myFirstSpring.restcontroller;\n\nimport com.example.myFirstSpring.model.Todo;\nimport com.example.myFirstSpring.repository.TodoRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.HashMap;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/todo\")\npublic class TodoRestController {\n    //here we are creating our end-point rest API\n    @Autowired\n    TodoRepository todoRepository;\n\n\n    //CRUD: read\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping\n    public ResponseEntity&lt;Iterable&lt;Todo&gt;&gt; getAllTodos() {\n        //\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"findAll\");\n        headers.add(\"version\", \"api 1.0\");\n        headers.add(\"statusOperation\", \"success\");\n\n        return ResponseEntity.accepted()\n         .headers(headers)\n         .body(todoRepository\n         .findAll());\n    }\n\n\n\nTodoRestController.java\n\n\n  @DeleteMapping\n   public ResponseEntity&lt;Todo&gt; deleteTodo(@RequestParam String id) {\n      //\n      HttpHeaders headers = new HttpHeaders();\n      headers.add(\"operation\", \"deleteBook\");\n      headers.add(\"version\", \"api 1.0\");\n\n      Optional&lt;Todo&gt; todoFound = todoRepository.findTodoById(id);\n      boolean isTodo = todoFound.isPresent();\n      if (isTodo) {\n         //Optional&lt;Book&gt; deletedBook = \n         //bookservice.deleteBookById(id);\n         todoRepository.deleteTodoById(id);\n         headers.add(\"operationStatus\", \"deleted\");\n         return ResponseEntity.accepted()\n            .headers(headers)\n            .body(todoFound\n            .get());\n      } else {\n         headers.add(\"operationStatus\", \"not found\");\n         return ResponseEntity.accepted().body(null);\n      }\n   }\n\n\n\nTodoRestController.java\n\n\n   @PostMapping(path = \"createTodo\", consumes = \"application/JSON\")\n   public ResponseEntity&lt;Todo&gt; addTodo(@RequestBody Todo todo) {\n      //\n      HttpHeaders headers = new HttpHeaders();\n      headers.add(\"operation\", \"createTodo\");\n      headers.add(\"version\", \"api 1.0\");\n      headers.add(\"statusOperation\", \"success\");\n\n      Todo todoCreated = todoRepository.save(todo);\n\n      if (todoCreated != null) {\n         headers.add(\"statusOperation\", \"success\");\n         return ResponseEntity.accepted()\n            .headers(headers)\n            .body(todoCreated);\n      } else {\n         headers.add(\"statusOperation\", \"not created\");\n         return ResponseEntity.accepted().body(null);\n      }\n   }\n\nupdateTodo, we could update just the completed field but to test the method we updated all the whole object.\n\n\nTodoRestController.java\n\n@PutMapping(\"/updateTodo/{id}\")\n    public ResponseEntity&lt;Todo&gt; \n      updateTodo(@PathVariable String id, @RequestBody Todo dataTodo) {\n\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"completeTodo\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;Todo&gt; todoFound = todoRepository.findTodoById(id);\n\n\n        if (todoFound.isPresent()){\n            //System.out.println(todoFound.get() \n            //+ \" -- \" +  dataTodo);\n            todoRepository.save(dataTodo);\n            headers.add(\"operationStatus\",\"updated\");\n            return  ResponseEntity.accepted()\n               .headers(headers)\n               .body(todoFound\n               .get());\n        } else {\n            headers.add(\"operationStatus\",\"not found\");\n            return ResponseEntity.accepted()\n               .headers(headers)\n                  .body(null);}\n\n\n    }\n\n\n\n\n4.4 FrontEnd: ReactJS todo\n\n\n\nfolder-tree ReactJS, Visual Code, todo\n\n\n\n4.4.1 UI\nFirst, the UI React .jsx components:\n\nTodoDomainsApp\nTodoDomainsAdd\nTodoDomainsList\n\n\n\nTodoDomainsApp.jsx\n\nimport React, { useContext } from \"react\";\nimport TodoDomainsAdd from \"../components/TodoDomainsAdd\";\n//import TodoList from \"./TodoList\";\nimport { TodoContext, TodoProvider } from \"../service/TodoContext.js\";\nimport {\n  Container,Divider\n} from \"semantic-ui-react\";\nimport TodoDomainsList from \"./TodoDomainsList\";\n\nconst TodoDomains = () =&gt; {\n  const { createTodo} = useContext(TodoContext);\n\n  const handleCreateTodo = (todo) =&gt; {\n    createTodo(todo);\n  };\n\n  \n  return (\n    &lt;Container&gt;\n      &lt;br /&gt;\n      &lt;h1&gt;Todo App&lt;/h1&gt;\n      &lt;p&gt;\n        A todo grid/cards with API Rest mockapi.io, with a useSate, semantic and\n        a service layer: axios and context. High decoupled version.\n      &lt;/p&gt;\n      &lt;TodoDomainsAdd onCreate={handleCreateTodo} /&gt;\n      &lt;Divider /&gt;\n\n      &lt;TodoDomainsList /&gt;\n    &lt;/Container&gt;\n  );\n};\n\nconst TodoDomainsApp = () =&gt; {\n  return (\n    &lt;TodoProvider&gt;\n      &lt;TodoDomains /&gt;\n    &lt;/TodoProvider&gt;\n  );\n};\n\nexport default TodoDomainsApp; \n\n\n\nTodoDomainsAdd.jsx\n\nimport React from \"react\";\nimport {\n  Card,\n  Checkbox,\n  Button,\n  Form,\n  Divider,\n  Icon,\n} from \"semantic-ui-react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// CRUD: create\nconst TodoDomainsAdd = ({ onCreate }) =&gt; {\n  const [text, setText] = React.useState(\"\");\n  const [author, setAuthor] = React.useState(\"\");\n  const [due, setDue] = React.useState(\"\");\n\n  const handleSubmit = () =&gt; {\n    onCreate({\n      id: uuidv4(),\n      text: text,\n      author: author,\n      due: due,\n      completed: false,\n    });\n  };\n\n  return (\n    &lt;&gt;\n      &lt;Form onSubmit={handleSubmit}&gt;\n        &lt;Form.Group&gt;\n          &lt;Card&gt;\n            &lt;Card.Content&gt;\n              &lt;Card.Header&gt;Create Todo&lt;/Card.Header&gt;\n              &lt;Card.Meta&gt;\n               \n              &lt;/Card.Meta&gt;\n              &lt;br /&gt;\n              &lt;Form.Field&gt;\n                &lt;label&gt;Text&lt;/label&gt;\n                &lt;input\n                  type=\"text\"\n                  value={text}\n                  onChange={(e) =&gt; setText(e.target.value)}\n                  placeholder=\"Enter todo text\"\n                /&gt;\n              &lt;/Form.Field&gt;\n              &lt;Form.Field&gt;\n                &lt;label&gt;Author&lt;/label&gt;\n                &lt;input\n                  type=\"text\"\n                  value={author}\n                  onChange={(e) =&gt; setAuthor(e.target.value)}\n                  placeholder=\"Enter author name\"\n                /&gt;\n              &lt;/Form.Field&gt;\n              &lt;Form.Field&gt;\n                &lt;label&gt;Date&lt;/label&gt;\n                &lt;input\n                  type=\"date\"\n                  value={due}\n                  onChange={(e) =&gt; setDue(e.target.value)}\n                  placeholder=\"Enter date to handle\"\n                /&gt;\n              &lt;/Form.Field&gt;\n              &lt;Divider /&gt;\n              &lt;Form.Field&gt;\n                &lt;Checkbox label=\"use fetch/axios\" /&gt;\n              &lt;/Form.Field&gt;\n\n              &lt;Divider /&gt;\n\n              &lt;Button&gt;Add Todo&lt;/Button&gt;\n            &lt;/Card.Content&gt;\n            &lt;Card.Content extra&gt;\n              &lt;a&gt;\n                &lt;Icon name=\"time\" /&gt;\n                UTC Central\n              &lt;/a&gt;\n            &lt;/Card.Content&gt;\n          &lt;/Card&gt;\n        &lt;/Form.Group&gt;\n      &lt;/Form&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default TodoDomainsAdd;\n\n\n\nTodoDomainsList.jsx\n\nimport {\n  Card,\n  Checkbox,\n  Button\n} from \"semantic-ui-react\";\n// CRUD: read and create list\nimport { TodoContext } from \"../service/TodoContext.js\";\nimport React, { useContext } from \"react\";\n// UpdateTodo Component\n\n\nconst UpdateTodo = ({ todo }) =&gt; {\n    const { updateTodo } = useContext(TodoContext);\n\n    const handleUpdateTodo = () =&gt; {\n        updateTodo(todo);\n    };\n\n    return (\n        &lt;Checkbox toggle checked={todo.completed} onChange={handleUpdateTodo} /&gt;\n    );\n};\n\n\n// DeleteTodo Component\nconst DeleteTodo = ({ todo }) =&gt; {\n    const { deleteTodo } = useContext(TodoContext);\n\n    const handleDeleteTodo = () =&gt; {\n        deleteTodo(todo.id);\n    };\n\n    return &lt;Button onClick={handleDeleteTodo}&gt;Delete&lt;/Button&gt;;\n};\n\n\nconst TodoDomainsList = () =&gt; {\n  const { todos } = useContext(TodoContext);\n\n  //console.log(\"todos list\", todos);\n  if (todos === null) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n\n  return (\n    &lt;&gt;\n      &lt;h2&gt;Todos List&lt;/h2&gt;\n      &lt;hr /&gt;\n      &lt;Card.Group&gt;\n        {todos.map((todo) =&gt; (\n          &lt;Card key={todo.id}&gt;\n            &lt;Card.Content&gt;\n              &lt;Card.Description&gt;id: {todo.id}&lt;/Card.Description&gt;\n              &lt;Card.Header&gt;{todo.text}&lt;/Card.Header&gt;\n              &lt;Card.Meta&gt;Author: {todo.author}&lt;/Card.Meta&gt;\n              &lt;Card.Description&gt;Due: {todo.due}&lt;/Card.Description&gt;\n              &lt;br /&gt;\n              &lt;UpdateTodo todo={todo} /&gt;\n            &lt;/Card.Content&gt;\n            &lt;Card.Content extra&gt;\n              &lt;DeleteTodo todo={todo}  /&gt;\n            &lt;/Card.Content&gt;\n          &lt;/Card&gt;\n        ))}\n      &lt;/Card.Group&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default TodoDomainsList;\n\n\n\n4.4.2 Service\nSecond, the Data Access Layer with TodoService.js and TodoContex.js:\n\n\nTodoService.js\n\nimport axios from \"axios\";\n\n///`${API_URL}/todo`\n// https://github.com/mockapi-io/docs/wiki/Quick-start-guide\n// API_URL mockapi.io\n//const API_BASE_URL = \"https://645fbe78ca2d89f7e74cf4c9.mockapi.io/v1\";\n\nconst API_BASE_URL = \"http://localhost:9898\";\n\nconst TodoService = {\n  getAllTodos: async () =&gt; {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/todo`);\n      //console.log(\"retrieving todos:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error retrieving todos:\", error);\n      throw error;\n    }\n  },\n\n  createTodo: async (todo) =&gt; {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/todo/createTodo`, todo);\n      console.error(\"Data:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error creating todo:\", error);\n      throw error;\n    }\n  },\n\n  updateTodo: async (todo) =&gt; {\n    try {\n      const response = await axios.put(`${API_BASE_URL}/todo/updateTodo/${todo.id}`, todo);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating todo:\", error);\n      throw error;\n    }\n  },\n\n  deleteTodo: async (todoId) =&gt; {\n    try {\n      const response = await axios.delete(`${API_BASE_URL}/todo?id=${todoId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n      throw error;\n    }\n  },\n};\n\nexport default TodoService;\n\n\n\nTodoContext.js\n\nimport React, { createContext, useState, useEffect } from \"react\";\nimport TodoService from \"./TodoService\";\n\nconst TodoContext = createContext();\n\nconst TodoProvider = ({ children }) =&gt; {\n  const [todos, setTodos] = useState([]);\n\n  //\n  useEffect(() =&gt; {\n    fetchTodos();\n  }, []);\n\n  //\n  const fetchTodos = async () =&gt; {\n    try {\n      const todos = await TodoService.getAllTodos();\n      setTodos(todos);\n      //console.log(\"todos:\", todos);\n    } catch (error) {\n      console.error(\"Error fetching todos:\", error);\n    }\n  };\n\n  //\n  const createTodo = async (todo) =&gt; {\n    try {\n      const createdTodo = await TodoService.createTodo(todo);\n      setTodos((prevTodos) =&gt; [...prevTodos, createdTodo]);\n    } catch (error) {\n      console.error(\"Error creating todo:\", error);\n    }\n  };\n\n const updateTodo = async (todoToUpdate) =&gt; {\n   try {\n     const updatedTodo = {\n       ...todoToUpdate,\n       completed: !todoToUpdate.completed,\n     };\n     await TodoService.updateTodo(updatedTodo);\n     setTodos((prevTodos) =&gt; {\n       const updatedTodos = [...prevTodos];\n       const todoIndex = updatedTodos.findIndex(\n         (todo) =&gt; todo.id === updatedTodo.id\n       );\n       updatedTodos[todoIndex] = updatedTodo;\n       return updatedTodos;\n     });\n   } catch (error) {\n     console.error(\"Error updating todo:\", error);\n   }\n };\n\n  //\n  const deleteTodo = async (todoId) =&gt; {\n    try {\n      await TodoService.deleteTodo(todoId);\n      setTodos((prevTodos) =&gt; prevTodos.filter((todo) =&gt; todo.id !== todoId));\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n    }\n  };\n\n  //\n  return (\n    &lt;TodoContext.Provider value={{ todos, createTodo, updateTodo, deleteTodo }}&gt;\n      {children}\n    &lt;/TodoContext.Provider&gt;\n  );\n};\n\nexport { TodoContext, TodoProvider };",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-2: Spring Boot & ReactJS"
    ]
  },
  {
    "objectID": "reactjs/rjslab4-2.html#versions",
    "href": "reactjs/rjslab4-2.html#versions",
    "title": "Lab#RE04-2: Spring Boot & ReactJS",
    "section": "5 Versions",
    "text": "5 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\ntodoApp-server 0.1\nToDo: Just a refactored draft, only findAll works - todoApp-Back 0.1\nfolder-tree Spring Boot, IntellIJIdea\n-\n\n\ntodoApp-front 0.1\nToDo: Just a refactored draft, only findAll works - todoApp-Front 0.1\nfolder-tree ReactJS, Visual Code\n-\n\n\ntodoApp-server 0.2\nToDo: all operations CRUD working todoApp-Back 0.2\n-\n-\n\n\ntodoApp-front 0.2\nToDo: all operations CRUD working todoApp-Front 0.2\n-\n1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 - 11\n\n\ntodoApp 0.3\nPending task: create .jsx/.js component/context/axios to upload images, spring boot @RestController done: TodoImageRepository, TodoImage, TodoImageRestController\n-\n-",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-2: Spring Boot & ReactJS"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html",
    "href": "reactjs/reactjs-es6-destructuring.html",
    "title": "React JS ES6: destructuring",
    "section": "",
    "text": "📘 Destructuring arrays\nArray destructuring is a way to extract values from an array and assign them to separate variables.\nIt allows you to unpack the values of an array into separate variables.",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: destructuring"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html#overview",
    "href": "reactjs/reactjs-es6-destructuring.html#overview",
    "title": "React JS ES6: destructuring",
    "section": "",
    "text": "📘 Destructuring arrays\nArray destructuring is a way to extract values from an array and assign them to separate variables.\nIt allows you to unpack the values of an array into separate variables.",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: destructuring"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html#why-do-we-need-it",
    "href": "reactjs/reactjs-es6-destructuring.html#why-do-we-need-it",
    "title": "React JS ES6: destructuring",
    "section": "2 Why do we need it",
    "text": "2 Why do we need it\n\nArray destructuring can be a useful tool for extracting values from arrays and assigning them to separate variables. It can make your code more concise and easier to read, especially when working with large or complex arrays.\n\nHere is the old way of assigning array items to a variable:\n\n\nApp.js\n\nconst vehicles = ['mustang', 'f-150', 'expedition'];\n\n// old way\nconst car = vehicles[0];\nconst truck = vehicles[1];\nconst suv = vehicles[2];\n\nHere is the new way of assigning array items to a variable With destructuring:\n\n\nApp.js\n\nconst vehicles = ['mustang', 'f-150', 'expedition'];\n\nconst [car, truck, suv] = vehicles;",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: destructuring"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html#how-to-use-destructuring",
    "href": "reactjs/reactjs-es6-destructuring.html#how-to-use-destructuring",
    "title": "React JS ES6: destructuring",
    "section": "3 How to use destructuring",
    "text": "3 How to use destructuring\nHere’s an example of array destructuring:\n\n\nApp.js\n\nconst arr = [1, 2, 3];\nconst [a, b, c] = arr;\n\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\n\nYou can also use destructuring to skip elements or assign default values:\n\n\nApp.js\n\nconst arr = [1, 2, 3];\nconst [a, , c] = arr;\n\nconsole.log(a); // 1\nconsole.log(c); // 3\n\nconst arr2 = [1];\nconst [a2, b2 = 2, c2 = 3] = arr2;\n\nconsole.log(a2); // 1\nconsole.log(b2); // 2\nconsole.log(c2); // 3\n\nIn the first example, the second element of the arr array is skipped, and in the second example, default values are assigned to the b2 and c2 variables if the corresponding elements of the arr2 array are not present.\n\n\nArray destructuring can be a convenient way to extract values from arrays and assign them to separate variables. It can make your code more concise and easier to read.\nYou can also use destructuring to skip elements or assign default values:\n\n\nApp.js\n\nconst arr = [1, 2, 3, 4];\nconst [a, , c, d] = arr;\n\nconsole.log(a); // 1\nconsole.log(c); // 3\nconsole.log(d); // 4\n\nconst arr2 = [1];\nconst [a2, b2 = 2, c2 = 3, d2 = 4] = arr2;\n\nconsole.log(a2); // 1\nconsole.log(b2); // 2\nconsole.log(c2); // 3\nconsole.log(d2); // 4",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: destructuring"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-destructuring.html#more-examples",
    "href": "reactjs/reactjs-es6-destructuring.html#more-examples",
    "title": "React JS ES6: destructuring",
    "section": "4 More examples",
    "text": "4 More examples\n\n4.1 Nested arrays\nYou can use destructuring to extract values from nested arrays:\n\n\nApp.js\n\nconst arr = [[1, 2], [3, 4]];\nconst [[a, b], [c, d]] = arr;\n\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\nconsole.log(d); // 4\n\n\n\n4.2 Rest syntax\nThe rest syntax allows you to capture the remaining elements of an array in a separate variable:\n\n\nApp.js\n\nconst arr = [1, 2, 3, 4, 5];\nconst [a, b, ...rest] = arr;\n\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(rest); // [3, 4, 5]\n\n\n\n4.3 Swapping variables\nYou can use destructuring to easily swap the values of two variables:\n\n\nApp.js\n\nlet a = 1;\nlet b = 2;\n\n[a, b] = [b, a];\n\nconsole.log(a); // 2\nconsole.log(b); // 1\n\n\n\n4.4 Function arguments\nYou can use destructuring to specify function arguments:\n\n\nApp.js\n\nfunction add([a, b]) {\n  return a + b;\n}\n\nconsole.log(add([1, 2])); // 3\n\n\n\n4.5 Object destructuring\nYou can also use destructuring with objects. Here’s an example:\n\n\nApp.js\n\nconst obj = {\n  foo: 1,\n  bar: 2\n};\n\nconst { foo, bar } = obj;\n\nconsole.log(foo); // 1\nconsole.log(bar); // 2",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: destructuring"
    ]
  },
  {
    "objectID": "reactjs/resources.html",
    "href": "reactjs/resources.html",
    "title": "ReactJS Resources",
    "section": "",
    "text": "MarkUp Resources",
    "crumbs": [
      "React JS readings",
      "ReactJS Resources"
    ]
  },
  {
    "objectID": "reactjs/resources.html#webs",
    "href": "reactjs/resources.html#webs",
    "title": "ReactJS Resources",
    "section": "1 Webs",
    "text": "1 Webs\n\nAwesome React\nReact From The Inside Out\nReact Docs BETA Official\nReact Tutorial w3 schools\nReact Hooks in Action, With Suspense and Concurrent Mode",
    "crumbs": [
      "React JS readings",
      "ReactJS Resources"
    ]
  },
  {
    "objectID": "about/about-this-me.html",
    "href": "about/about-this-me.html",
    "title": "About me",
    "section": "",
    "text": "About",
    "crumbs": [
      "About me and this site",
      "About me"
    ]
  },
  {
    "objectID": "about/about-this-me.html#introduction",
    "href": "about/about-this-me.html#introduction",
    "title": "About me",
    "section": "Introduction",
    "text": "Introduction\nHi, this is alberprofe speaking! My fields of expertise are:\n\nA software architect is a person who is responsible for the overall design and architecture of a software system.\n\n\nA team leader is a person who is responsible for leading and managing a team of individuals.\n\n\nA professor is an individual who teaches at a college or university.\n\n\nAn entrepreneur is a person who starts and runs their own business. They are responsible for identifying a business opportunity, developing a business plan, and managing the day-to-day operations of the business.\n\n\nThese four roles are all different and may be held by different individuals.\nA software architect is focused on the technical design and implementation of a software system, a team leader is focused on managing and coordinating the work of a team, a professor is focused on teaching and research in a particular field of study, and an entrepreneur is focused on starting and running a business.\n\n\nContact\n\nprofessor: professor (albertprofe at gmail dot com)\nprofessional: professional (ayarza at inspiratgames dot com)\n\n\n\nLinkedin\nlinkedin.com/in/albert-yarza-demur/",
    "crumbs": [
      "About me and this site",
      "About me"
    ]
  },
  {
    "objectID": "about/about-this-developer.html",
    "href": "about/about-this-developer.html",
    "title": "About a developer",
    "section": "",
    "text": "About",
    "crumbs": [
      "About me and this site",
      "About a developer"
    ]
  },
  {
    "objectID": "about/about-this-developer.html#what-is-a-developer-2022",
    "href": "about/about-this-developer.html#what-is-a-developer-2022",
    "title": "About a developer",
    "section": "What is a developer (2022)",
    "text": "What is a developer (2022)\nA developer, also known as a software programmer, needs a wide range of skills in order to be successful in their role. Some of the most important skills for a programmer include:\n\nStrong problem-solving skills: A programmer needs to be able to analyze complex problems and develop effective solutions using code. Logical thinking: Programming involves creating logical structures and processes that a computer can follow, so a programmer needs to have strong logical and analytical skills.\nKnowledge of programming languages and technologies: A programmer needs to have a deep understanding of the programming languages and technologies that they use, as well as the ability to learn new languages and technologies as needed.\nAttention to detail: Programming involves working with complex systems and large amounts of data, so a programmer needs to have a keen eye for detail and the ability to spot errors and inconsistencies.\nCommunication skills: A programmer often works as part of a team, so they need to be able to communicate effectively with other developers and stakeholders.\nTime management and organizational skills: A programmer typically has multiple tasks and deadlines to manage, so they need to be able to prioritize their work and stay organized.\n\nIn addition to these core skills, a programmer may also benefit from having knowledge of software development methodologies, such as Agile or Waterfall, as well as experience with version control systems and other tools commonly used in software development.",
    "crumbs": [
      "About me and this site",
      "About a developer"
    ]
  },
  {
    "objectID": "about/about-this-developer.html#how-can-we-get-it",
    "href": "about/about-this-developer.html#how-can-we-get-it",
    "title": "About a developer",
    "section": "How can we get it?",
    "text": "How can we get it?\nTo be a good programmer, you need to have a strong foundation in computer science and software development principles, as well as the ability to learn and adapt to new technologies and languages. Some specific ways that you can improve your skills as a programmer include:\n\nPractice regularly: The best way to improve your programming skills is to write code regularly and work on a variety of projects. This will help you develop your problem-solving skills and build your knowledge of different languages and technologies.\nLearn from others: There are many resources available online, such as tutorials, blogs, and forums, where you can learn from experienced programmers and ask questions. You can also learn by working on open-source projects and collaborating with other developers.\nStay up-to-date: The field of software development is constantly evolving, so it is important to stay up-to-date with the latest technologies and best practices. This can help you stay ahead of the curve and keep your skills relevant.\nTake on new challenges: To continue growing as a programmer, you should strive to take on new and challenging projects that push you to learn and improve. This can help you develop new skills and broaden your expertise.\nSeek feedback: It can be helpful to seek feedback from experienced programmers, mentors, or peers on your work. This can help you identify areas for improvement and learn from others who have more experience.\n\nIn general, being a good programmer requires a combination of technical skills, problem-solving abilities, and a willingness to learn and grow. By focusing on these areas and continually striving to improve, you can become a successful and effective programmer.",
    "crumbs": [
      "About me and this site",
      "About a developer"
    ]
  },
  {
    "objectID": "about/about-this-developer.html#and-reading-books",
    "href": "about/about-this-developer.html#and-reading-books",
    "title": "About a developer",
    "section": "And reading books?",
    "text": "And reading books?\nReading books can help improve your skills as a programmer in several ways. Some specific benefits of reading books for programmers include:\n\nExpanding your knowledge: Books can provide a wealth of information on a wide range of topics related to programming. By reading books, you can learn about new technologies, programming languages, and best practices that you may not have been aware of before.\nImproving your problem-solving skills: Many books on programming include examples and exercises that you can use to practice your problem-solving skills. By working through these exercises, you can improve your ability to analyze complex problems and develop effective solutions using code.\nBroadening your perspective: Reading books written by other programmers can provide valuable insights into how they approach problems and solve them. This can help you learn new techniques and strategies that you can apply to your own work.\nBuilding your vocabulary: Many technical books on programming include specialized terminology and concepts that you may not be familiar with. By reading these books, you can expand your vocabulary and become more fluent in the language of programming.\nStaying up-to-date: Reading books can help you keep up with the latest trends and developments in the field of software development. This can help you stay ahead of the curve and ensure that your skills remain relevant and in-demand.\n\nOverall, reading books can be a valuable way to improve your skills as a programmer. By reading books written by experienced programmers, you can learn new techniques and strategies, expand your knowledge, and stay up-to-date with the latest developments in the field.",
    "crumbs": [
      "About me and this site",
      "About a developer"
    ]
  },
  {
    "objectID": "books/relaxationrevolution.html#more-info",
    "href": "books/relaxationrevolution.html#more-info",
    "title": "The Relaxation Revolution",
    "section": "More info",
    "text": "More info\n\nThe Relaxation Response\nBriefly stated, the relaxation response is defined as the response that is the opposite of the fight-or-flight or stress response. It is characterized by the following: decreased metabolism, heart rate, blood pressure, and rate of breathing; a decrease or “calming” in brain activity; an increase in attention and decision-making functions of the brain; and changes in gene activity that are the opposite of those associated with stress.”\nThe relaxation response. As Benson says above, it’s basically the opposite of the fight-or-flight response that most of us spend way too much of our time in these days. Our bodies are brilliantly architected in such a way that, when faced with a life-threatening danger, all systems necessary for our survival are activated: from our hearts pumping blood to our legs so we can make a quick exit to adrenalin flooding our system so we’re as strong as possible for a potential fight.\nNow, back in the day when we needed to worry about saber-tooth tigers having us for lunch, that fight-or-flight response mechanism was pretty sweet. Unfortunately, our body’s evolution hasn’t quite kept up with our mind’s evolution and now a sideways glance from our boss or someone cutting us off in traffic often elicits the same response. All. Day. Long. That constant barrage takes a significant toll on our well-being. And, researchers have discovered that our ability to induce its opposite relaxation response is huge.\n\n\nSummary\nEnhancing Your Personal Health Through the Science and Genetics of Mind Body Healing\n\nSummary by Philosophers Notes Brian Johnson"
  },
  {
    "objectID": "books/range.html#about-the-book",
    "href": "books/range.html#about-the-book",
    "title": "Range",
    "section": "About the book",
    "text": "About the book\nWhat’s the most effective path to success in any domain? It’s not what you think.\nPlenty of experts argue that anyone who wants to develop a skill, play an instrument, or lead their field should start early, focus intensely, and rack up as many hours of deliberate practice as possible. If you dabble or delay, you’ll never catch up to the people who got a head start.\nBut a closer look at research on the world’s top performers, from professional athletes to Nobel laureates, shows that early specialization is the exception, not the rule.\nDavid Epstein examined the world’s most successful athletes, artists, musicians, inventors, forecasters and scientists. He discovered that in most fields—especially those that are complex and unpredictable—generalists, not specialists, are primed to excel.\nGeneralists often find their path late, and they juggle many interests rather than focusing on one. They’re also more creative, more agile, and able to make connections their more specialized peers can’t see.\nProvocative, rigorous, and engrossing, Range makes a compelling case for actively cultivating inefficiency. Failing a test is the best way to learn. Frequent quitters end up with the most fulfilling careers. The most impactful inventors cross domains rather than deepening their knowledge in a single area. As experts silo themselves further while computers master more of the skills once reserved for highly focused humans, people who think broadly and embrace diverse experiences and perspectives will increasingly thrive."
  },
  {
    "objectID": "books/range.html#more-info",
    "href": "books/range.html#more-info",
    "title": "Range",
    "section": "More info",
    "text": "More info\n\nRange: Why Generalists Triumph in a Specialized World"
  },
  {
    "objectID": "books/ConsciousnessExplained.html#more-info",
    "href": "books/ConsciousnessExplained.html#more-info",
    "title": "Consciousness Explained",
    "section": "More info",
    "text": "More info\n\nConsciousness Explained\nConsciousness Explained"
  },
  {
    "objectID": "books/MapsOfMeaning.html#more-info",
    "href": "books/MapsOfMeaning.html#more-info",
    "title": "Maps of Meaning",
    "section": "More info",
    "text": "More info\n\nMaps of Meaning: The Architecture of Belief"
  },
  {
    "objectID": "books/YourNextFiveMoves.html#more-info",
    "href": "books/YourNextFiveMoves.html#more-info",
    "title": "Your Next Five Moves",
    "section": "More info",
    "text": "More info\n\nYour Next Five Moves: Master the Art of Business Strategy"
  },
  {
    "objectID": "books/c.html#more-info",
    "href": "books/c.html#more-info",
    "title": "C",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/sre.html#more-info",
    "href": "books/sre.html#more-info",
    "title": "Site Reliability Engineering",
    "section": "More info",
    "text": "More info\n\nSRE site: books\nSRE site: Site Reliability Engineering: How Google Runs Production Systems\nGoogle books: Site Reliability Engineering: How Google Runs Production Systems\n\n\nHope is not a strategy. - Traditional SRE saying\n\n\nIf a human operator needs to touch your system during normal operations, you have a bug. The definition of normal changes as your systems grow. - Carla Geisser, Google SRE\n\n\nThe price of reliability is the pursuit of the utmost simplicity. - C.A.R. Hoare, Turing Award lecture"
  },
  {
    "objectID": "books/sre.html#devops-or-sre",
    "href": "books/sre.html#devops-or-sre",
    "title": "Site Reliability Engineering",
    "section": "DevOps or SRE?",
    "text": "DevOps or SRE?\nThe term “DevOps” emerged in industry in late 2008 and as of this writing (early 2016) is still in a state of flux. Its core principles—involvement of the IT function in each phase of a system’s design and development, heavy reliance on automation versus human effort, the application of engineering practices and tools to operations tasks—are consistent with many of SRE’s principles and practices. One could view DevOps as a generalization of several core SRE principles to a wider range of organizations, management structures, and personnel. One could equivalently view SRE as a specific implementation of DevOps with some idiosyncratic extensions.\nSRE and DevOps ask two different but equally valuable questions:\n\nDevOps asks what needs to be done.\nSRE asks how that can be done."
  },
  {
    "objectID": "books/sre.html#site-reliability-engineers-day-to-day",
    "href": "books/sre.html#site-reliability-engineers-day-to-day",
    "title": "Site Reliability Engineering",
    "section": "Site reliability engineers day to day",
    "text": "Site reliability engineers day to day\nSite reliability engineers measure service level indicators (SLIs) and service level objectives (SLOs), while DevOps teams measure the failure rate plus the success rate over time. SREs share responsibilities related to the following DevOps pillars of infrastructural improvement:\n\nReduce organizational silos SREs don’t discuss how many silos exist in company, but they encourage everyone else to discuss the issue. This discussion is accomplished by using the tools and techniques across the company, helping to spread ownership across all employees.\n\n\nAccept failure as normal SREs need to make sure that there aren’t too many errors or failures. To do so, they use a formula composed of SLI and SLO scores. SLIs count failures per request, by calculating request latency, throughput of requests per second, or failures per request per time. SLOs are derived from threshold and percentage, and represent the success of SLIs over a certain amount of time.\n\n\nImplement gradual change SREs are all in for change, but in a slow, methodical way. Because companies want to move faster, they demand frequent releases, continually updating the product. So DevOps and SREs must respond quickly but maintain a steady, controlled pace.\n\n\nLeverage tooling and automation Automate as long as it provides value to developers and operations by removing manual tasks.\n\n\nMeasure everything SRE teams need to know that everything is moving in the right direction. This can be accomplished by setting up alerts for various scenarios, embracing peer code review, and/or using unit tests."
  },
  {
    "objectID": "books/sre.html#references",
    "href": "books/sre.html#references",
    "title": "Site Reliability Engineering",
    "section": "References",
    "text": "References\n\nWhat is site reliability engineering (SRE)?"
  },
  {
    "objectID": "books/theRighteousMind.html#more-info",
    "href": "books/theRighteousMind.html#more-info",
    "title": "The Righteous Mind",
    "section": "More info",
    "text": "More info\nThe Righteous Mind\nThe Righteous Mind is about one of the hottest topics in the sciences: morality. It’s about how we evolved to live in moral “matrices,” which bind us together around sacred values and then blind us to the truth. It’s about righteousness, moral diversity, politics and religion."
  },
  {
    "objectID": "books/theRighteousMind.html#book-introduction",
    "href": "books/theRighteousMind.html#book-introduction",
    "title": "The Righteous Mind",
    "section": "Book Introduction",
    "text": "Book Introduction\n“Can we all get along?” That appeal was made famous on May 1, 1992, by Rodney King, a black man who had been beaten nearly to death by four Los Angeles police officers a year earlier. The entire nation had seen a videotape of the beating, so when a jury failed to convict the officers, their acquittal triggered widespread outrage and six days of rioting in Los Angeles. Fifty three people were killed and more than seven thousand buildings were torched. Much of the mayhem was carried live by news cameras from helicopters circling overhead. After a particularly horrific act of violence against a white truck driver, King was moved to make his appeal for peace.\nKing’s appeal is now so overused that it has become cultural kitsch, a catch phrase more often said for laughs then as a serious plea for mutual understanding. I therefore hesitated to use King’s words as the opening line of this book, but I decided to go ahead, for two reasons. First, because most Americans nowadays are asking King’s question, not about race relations but about political relations and the collapse of cooperation across party lines. Many Americans feel as though the nightly news from Washington is sent to us from helicopters circling over the city–dispatches from the war zone.\nThe second reason I decided to open this book with an overused phrase is because King followed it up with something lovely, something rarely quoted. As he stumbled through his television interview, fighting back tears and often repeating himself, he found these words: “Please, we can get along here. We all can get along. I mean, we’re all stuck here for a while. Let’s try to work it out.”\nThis book is about why it’s so hard for us to get along. We are indeed all stuck here for a while, so while we’re waiting, let’s at least try to understand why we are so easily divided into hostile groups, each one certain of its righteousness."
  },
  {
    "objectID": "books/theMasterAndHisEmissary.html#more-info",
    "href": "books/theMasterAndHisEmissary.html#more-info",
    "title": "The Master and His Emissary",
    "section": "More info",
    "text": "More info\nSummary"
  },
  {
    "objectID": "books/theMasterAndHisEmissary.html#why-is-the-brain-divided",
    "href": "books/theMasterAndHisEmissary.html#why-is-the-brain-divided",
    "title": "The Master and His Emissary",
    "section": "Why is the brain divided?",
    "text": "Why is the brain divided?\nThe difference between right and left hemispheres has been puzzled over for centuries. Drawing upon a vast body of brain research, the renowned psychiatrist, author, and thinker Iain McGilchrist reveals that the difference between the two sides is profound―two whole, coherent, but incompatible ways of experiencing the world.\n\nThe detail-oriented left hemisphere prefers mechanisms to living things and is inclined to self-interest, while the right hemisphere has greater breadth, flexibility, and generosity.\n\nMcGilchrist takes the reader on a journey through the history of Western culture, illustrating the tension between these two worlds as revealed in the thought and belief of thinkers and artists from the ancient to the modern, from Aeschylus to Magritte.\nHe ultimately argues that, despite its inferior grasp of reality, the left hemisphere is increasingly taking precedence in today’s world―with potentially disastrous consequences."
  },
  {
    "objectID": "books/theMasterAndHisEmissary.html#key-ideas",
    "href": "books/theMasterAndHisEmissary.html#key-ideas",
    "title": "The Master and His Emissary",
    "section": "Key-ideas",
    "text": "Key-ideas\n\nThe different functions of the two hemispheres of your brain and what this means for how you experience the world.\nHow language and categorisation can stifle and give the false illusion of understanding our own reality.\nHow the types of attention we pay to the world dramatically impact the way we perceive the world."
  },
  {
    "objectID": "books/theMasterAndHisEmissary.html#brain-modes-cycle",
    "href": "books/theMasterAndHisEmissary.html#brain-modes-cycle",
    "title": "The Master and His Emissary",
    "section": "Brain modes cycle",
    "text": "Brain modes cycle\nWhich tool are we looking for?\n\nIntuition, imagination\nAnalysis, reason, science\nAha, Eureka, Fit in?, I see it!\n\nHow do you approach it?\n\nPicnic\nBuilder job\nRabbit hole, let it go, wait & see\n\nHow does it work?\n\nContext, directions, flow, connections, whole, dynamic, meaning\nParts, categories, black or white, static, mechanics. just isolated elements.\nMaps of meaning, deep understanding."
  },
  {
    "objectID": "books/TheChangingWorldOrder.html#more-info",
    "href": "books/TheChangingWorldOrder.html#more-info",
    "title": "The Changing World Order",
    "section": "More info",
    "text": "More info\nA few years ago, Ray Dalio noticed a confluence of political and economic conditions he hadn’t encountered before. They included huge debts and zero or near-zero interest rates that led to massive printing of money in the world’s three major reserve currencies; big political and social conflicts within countries, especially the US, due to the largest wealth, political, and values disparities in more than 100 years; and the rising of a world power (China) to challenge the existing world power (US) and the existing world order. The last time that this confluence occurred was between 1930 and 1945. This realization sent Dalio on a search for the repeating patterns and cause/effect relationships underlying all major changes in wealth and power over the last 500 years.\n\nThe Changing World Order: Why Nations Succeed and Fail\nPRINCIPLES: YOUR GUIDED JOURNAL CREATE YOUR OWN PRINCIPLES TO GET THE WORK AND LIFE YOU WANT"
  },
  {
    "objectID": "books/Desanimdelucre.html#more-info",
    "href": "books/Desanimdelucre.html#more-info",
    "title": "Desànim de lucre",
    "section": "More info",
    "text": "More info\nEn aquest assaig de perspectiva europea, Abel Cutillas explica com des de la Segona Guerra Mundial tots els discursos a Occident estan pensats per explotar la feblesa i frenar la història.\nGairebé un segle després de la profecia d’Adorno segons la qual la cultura quedaria subjugada al mercat, la indústria cultural governa i la banalitat regna.\nLes idees, però, es mantenen intactes, i les biblioteques segueixen obertes: “Els homes continuen pensant. La vida continua”.\n\nDesànim de lucre"
  },
  {
    "objectID": "books/TheSecondBrain.html#more-info",
    "href": "books/TheSecondBrain.html#more-info",
    "title": "The Second Brain",
    "section": "More info",
    "text": "More info\nDr. Michael Gershon has devoted his career to understanding the human bowel (the stomach, esophagus, small intestine, and colon). His thirty years of research have led to an extraordinary rediscovery: nerve cells in the gut that act as a brain. This “second brain” can control our gut all by itself. Our two brains the one in our head and the one in our bowel must cooperate. If they do not, then there is chaos in the gut and misery in the head everything from “butterflies” to cramps, from diarrhea to constipation. Dr. Gershon’s work has led to radical new understandings about a wide range of gastrointestinal problems including gastroenteritis, nervous stomach, and irritable bowel syndrome.\n\nThe Second Brain: A Groundbreaking New Understanding Of Nervous Disorders Of The Stomach And Intestine"
  },
  {
    "objectID": "books/modern-java-ee-design-patterns.html#more-info",
    "href": "books/modern-java-ee-design-patterns.html#more-info",
    "title": "Modern Java EE Design Patterns",
    "section": "More info",
    "text": "More info\n\nModern Java EE Design Patterns PDF\nModern Java EE Design Patterns\n\n\nCreating Distributed Java EE Architecture\nWith the ascent of DevOps, microservices, containers, and cloud-based development platforms, the gap between state-of-the-art solutions and the technology that enterprises typically support has greatly increased.\nCan it be done? Is it even a good idea? This report thoroughly explores the possibility and provides savvy advice for enterprises that want to move ahead.\n\nThe issue is complex: Java EE wasn’t built with the distributed application approach in mind, but rather as one monolithic server runtime or cluster hosting many different applications.\n\nIf you’re part of an enterprise development team investigating the use of microservices with Java EE, there are several items to consider:\n\nUnderstand the challenges of starting a greenfield development vs tearing apart an existing brownfield application into services\nExamine your business domain to see if microservices would be a good fit\nExplore best practices for automation, high availability, data separation, and performance\nAlign your development teams around business capabilities and responsibilities\nInspect design patterns such as aggregator, proxy, pipeline, or shared resources to model service interactions"
  },
  {
    "objectID": "books/TheMatterWithThings.html#more-info",
    "href": "books/TheMatterWithThings.html#more-info",
    "title": "The Matter With Things",
    "section": "More info",
    "text": "More info\nThe Matter with Things, the new 2-volume book from the author of the widely acclaimed The Master and his Emissary: The Divided Brain and the Making of the Western World (over 100,000 copies sold worldwide).\nIs the world essentially inert and mechanical – nothing but a collection of things for us to use? Are we ourselves nothing but the playthings of chance, embroiled in a war of all against all? Why, indeed, are we engaged in destroying everything that is valuable to us? In this landmark new book, Iain McGilchrist addresses some of the oldest and hardest questions humanity faces – ones that, however, have a practical urgency for all of us today:\nWho are we? What is the world? How can we understand consciousness, matter, space and time? Is the cosmos without purpose or value? Can we really neglect the sacred and divine? In doing so, he argues that we have become enslaved to an account of things dominated by the brain’s left hemisphere, one that blinds us to an awe-inspiring reality that is all around us, had we but eyes to see it. He suggests that in order to understand ourselves and the world we need science and intuition, reason and imagination, not just one or two; that they are in any case far from being in conflict; and that the brain’s right hemisphere plays the most important part in each. And he shows us how to recognise the ‘signature’ of the left hemisphere in our thinking, so as to avoid making decisions that bring disaster in their wake.\nFollowing the paths of cutting-edge neurology, philosophy and physics, he reveals how each leads us to a similar vision of the world, one that is both profound and beautiful – and happens to be in line with the deepest traditions of human wisdom.\nIt is a vision that returns the world to life, and us to a better way of living in it: one we must embrace if we are to survive\n\nThe Matter With Things: Our Brains, Our Delusions, and the Unmaking of the World"
  },
  {
    "objectID": "books/budddhaandBadasss.html#more-info",
    "href": "books/budddhaandBadasss.html#more-info",
    "title": "The Buddha and the Badass",
    "section": "More info",
    "text": "More info\n\nIt’s a modern myth that hard work and hustle are the paths to success. Inside you is a soul. And once you unleash it fully into the domain of work, magic happens.\n\n\nWell, it is not magic, just iterating, removing some impediments and being careful of using a big tricky toolbox!\nWell, in fact, it is magic because the big tricky toolbox is not enough and sometimes needs to grow and at that point, people must transgress their boundaries …"
  },
  {
    "objectID": "books/budddhaandBadasss.html#archetypes",
    "href": "books/budddhaandBadasss.html#archetypes",
    "title": "The Buddha and the Badass",
    "section": "Archetypes",
    "text": "Archetypes\nIf you’re the average person in the developed world, you spend 70 percent of your waking hours at work. And if you’re the average person, you’re miserable for most of those hours. This is simply not an acceptable state of affairs for your one shot at life.\nNo matter your station, you possess incredible unique powers. It’s a modern myth that hard work and hustle are the paths to success. Inside you is a soul. And once you unleash it fully into the domain of work, magic happens. Awakening the Buddha and the Badass inside you is a process that will disrupt the way you work altogether. You’ll gain access to tools that bend the very rules of reality.\n\nThe Buddha is the archetype of the spiritual master. The person who can live in this world but also move with an ease, grace, and flow that comes from inner awareness and alignment.\nThe Badass is the archetype of the changemaker. This is the person who is out there creating change, building, coding, writing, inventing, leading. The badass represents the benevolent disruptor—the person challenging the norms so we can be better as a species.\n\nOnce you integrate the skill sets of both archetypes, you will experience life at a different level from most people. You will operate from a space of bliss, ease, inspiration, and abundance. The Buddha and the Badass: The Secret Spiritual Art of Succeeding at Work will show you how. Author of the New York Times bestseller The Code of the Extraordinary Mind and founder of Mindvalley, Vishen Lakhiani has turned his own life and company into his research lab. He’s codified everything he’s learned into the how-to steps in this book. The Buddha and the Badass teaches you how to master your work and your life.\n\nThe Buddha and the Badass: The Secret Spiritual Art of Succeeding at Work"
  },
  {
    "objectID": "books/MyLifeasQuant.html#more-info",
    "href": "books/MyLifeasQuant.html#more-info",
    "title": "My Life as Quant",
    "section": "More info",
    "text": "More info\nIn My Life as a Quant, Emanuel Derman relives his exciting journey as one of the first high-energy particle physicists to migrate to Wall Street. Page by page, Derman details his adventures in this field–analyzing the incompatible personas of traders and quants, and discussing the dissimilar nature of knowledge in physics and finance. Throughout this tale, he also reflects on the appropriate way to apply the refined methods of physics to the hurly-burly world of markets.\n\nMy Life as Quant"
  },
  {
    "objectID": "books/TheLinuxcommandline.html#more-info",
    "href": "books/TheLinuxcommandline.html#more-info",
    "title": "The Linux command line",
    "section": "More info",
    "text": "More info\nDesigned for the new command line user, this 555-page volume covers the same material as LinuxCommand.org but in much greater detail. In addition to the basics of command line use and shell scripting, The Linux Command Line includes chapters on many common programs used on the command line, as well as more advanced topics.\n\nThe Linux command line"
  },
  {
    "objectID": "books/antifragile.html#more-info",
    "href": "books/antifragile.html#more-info",
    "title": "Antifragile",
    "section": "More info",
    "text": "More info\n\nAntifragile: Things That Gain from Disorder (Incerto)"
  },
  {
    "objectID": "books/MindManagementNotTimeManagement.html#more-info",
    "href": "books/MindManagementNotTimeManagement.html#more-info",
    "title": "Mind Management Not Time Management",
    "section": "More info",
    "text": "More info\n\nMind Management, Not Time Management (epub/mobi ebook)\nMind Management (Not Time Management)\nHow the Seven Mental States of Creative Work guide your art through The Four Stages of Control\nArrange your time and tasks according to these seven mental states, and you’ll be a creativity machine\nDavid Kadavy\n\n\nYou have the time. Do you have the energy? Do you have the proper mental approach for the moment?\n\nYou’ve done everything you can to save time. Every productivity tip, every “life hack,” every time management technique.\nBut the more time you save, the less time you have. The more overwhelmed, stressed, exhausted you feel.\n“Time management” is squeezing blood from a stone."
  },
  {
    "objectID": "books/MindManagementNotTimeManagement.html#three-important-questions",
    "href": "books/MindManagementNotTimeManagement.html#three-important-questions",
    "title": "Mind Management Not Time Management",
    "section": "Three Important Questions",
    "text": "Three Important Questions\n\nWhat kind of work do I need to do right now? Is there anything extremely pressing, or can I let my mental state guide the work that I decide to do right now?\n\n\nWhat kind of mental state am I in right now? Am I in the mood for draft writing, outlining, researching, exploring, or polishing?\n\n\nIs there something I can do to get myself into the right mental state? There are different “hacks” or rituals that would help me switch mental states: exercising, massages, different types of music, different types of teas, epsom salt baths, and neurotransmitter-supporting amino acids all eventually served their own purposes."
  },
  {
    "objectID": "books/MindManagementNotTimeManagement.html#four-tips",
    "href": "books/MindManagementNotTimeManagement.html#four-tips",
    "title": "Mind Management Not Time Management",
    "section": "Four tips",
    "text": "Four tips\nHere are a few takeaways and tactics:\n\nYour brain is plastic\nEvery time your neurons fire, it makes it easier for those same pathways to fire again. It used to believed that the brain was a static organ once you reached adulthood, but now we know that the brain changes throughout life.\n\nIntertia Law\nEach time you perform a thought or action, you make it easier for your brain to reproduce that thought or action.\n\nThis has some pretty clear implications for positive vs. negative thoughts, and explains why meditation is so powerful (which I’ll get to in a bit).\n\n\nLove your prefrontal cortex\nYour prefrontal cortex is the “newest” (in terms of evolution) part of your brain. Your prefrontal cortex is in charge of things like prioritization, planning, and suppressing urges. But, your prefrontal cortex is small, but energy-hungry. So when it gets tired, it’s hard for you to think about the overarching purpose of what it is you’re doing right now, or to keep yourself from checking Facebook and Twitter every 2 minutes.\n\nRest\nIt’s important to get mental rest to keep your prefrontal cortex working well, and to set aside special time dedicated only to prioritization.\n\n\n\nFight your amygdala\nYour amygdala is the oldest one of the older (in terms of evolution) parts of your brain. Your amygdala is extremely fear-driven, and is programmed to save you from danger. The really tough part is that your amygdala communicates with your body even before the rest of your brain (which can handle much more complex thinking).\n\nSurvivor’s mindset\nYour amygdala always wants you take the “safe” route, and will stifle your creativity, so you have to be wary of its power and be aware how she disconects you from your prefrontal cortex.\n\n\n\nRestorative things are productive\nGiven this struggle between your prefrontal cortex and amygdala, and the fact that your prefrontal cortex is so easily fatigued, it shoustruggle between your prefrontal cortex and amygdala,ld be no surprise that rest is important to using your mind effectively.\nIf you think you’re getting more work done by working until you collapse every night, I’d argue that you probably aren’t. You’re probably depleting your prefrontal cortex, and instead of thinking strategically, are filling up the time with reactionary, fear-driven (amygdala-driven) “work.”\n\nFeed your soul\nRestorative activities, such as exercising, sleeping, and spending time with loved ones help your brain reorganize. If you’re skeptical, there’s research showing that positive mood and sleep encourage insightful thinking, and that close relationships strongly affect happiness."
  },
  {
    "objectID": "books/statusGame.html#more-info",
    "href": "books/statusGame.html#more-info",
    "title": "The Status Game",
    "section": "More info",
    "text": "More info\nThe Status Game: On Social Position and How We Use It - Review\nFor centuries, philosophers and scholars have described human behaviour in terms of sex, power and money. In The Status Game, bestselling author Will Storr radically turns this thinking on its head by arguing that it is our irrepressible craving for status that ultimately defines who we are.\nFrom the era of the hunter-gatherer to today, when we exist as workers in the globalised economy and citizens of online worlds, the need for status has always been wired into us. A wealth of research shows that how much of it we possess dramatically affects not only our happiness and wellbeing but also our physical health – and without sufficient status, we become more ill, and live shorter lives. It’s an unconscious obsession that drives the best and worst of us: our innovation, arts and civilisation as well as our murders, wars and genocides. But why is status such an all-consuming prize? What happens if it’s taken away from us? And how can our unquenchable thirst for it explain cults, moral panics, conspiracy theories, the rise of social media and the ‘culture wars’ of today?\nOn a breathtaking journey through time and culture, The Status Game offers a sweeping rethink of human psychology that will change how you see others – and how you see yourself"
  },
  {
    "objectID": "books/BuildingaSecondBrain.html#more-info",
    "href": "books/BuildingaSecondBrain.html#more-info",
    "title": "Building a Second Brain",
    "section": "More info",
    "text": "More info\n\nBuilding a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential"
  },
  {
    "objectID": "books/DoNotBelieveEverythingYouThink.html#more-info",
    "href": "books/DoNotBelieveEverythingYouThink.html#more-info",
    "title": "Don’t Believe Everything You Think",
    "section": "More info",
    "text": "More info\n\nDon’t Believe Everything You Think: Why Your Thinking Is The Beginning & End Of Suffering (Beyond Suffering)"
  },
  {
    "objectID": "books/CleanCode.html#more-info",
    "href": "books/CleanCode.html#more-info",
    "title": "Clean Code",
    "section": "More info",
    "text": "More info\n\nClean Code: A Handbook of Agile Software Craftsmanship"
  },
  {
    "objectID": "books/theMomTest.html#more-info",
    "href": "books/theMomTest.html#more-info",
    "title": "The mom test",
    "section": "More info",
    "text": "More info\n\nEl Mom Test\nThe Mom Test"
  },
  {
    "objectID": "books/execution.html#more-info",
    "href": "books/execution.html#more-info",
    "title": "Execution",
    "section": "More info",
    "text": "More info\nWhen Execution was first published, it changed the way we did our jobs by focusing on the critical importance of the discipline of execution the ability to make the final leap to success by actually getting things done.\nLarry Bossidy and Ram Charan now reframe their message for a world in which the old rules have been shattered, radical change is becoming routine, and the ability to execute is more important than ever. Now and for the foreseeable future:\n\nGrowth will be slower. But the company that executes well will have the confidence, speed, and resources to move fast as new opportunities emerge.\nCompetition will be fiercer, with companies searching for any possible advantage in every area from products and technologies to location and management.\nGovernments will take on new roles in their national economies, some as partners to business, others imposing constraints. Companies that execute well will be more attractive to government entities as partners and suppliers and better prepared to adapt to a new wave of regulation.\nRisk management will become a top priority for every leader. Execution gives you an edge in detecting new internal and external threats and in weathering crises that can never be fully predicted.\n\nExecution shows how to link together people, strategy, and operations, the three core processes of every business. Leading these processes is the real job of running a business, not formulating a “vision” and leaving the work of carrying it out to others.\nBossidy and Charan show the importance of being deeply and passionately engaged in an organization and why robust dialogues about people, strategy, and operations result in a business based on intellectual honesty and realism."
  },
  {
    "objectID": "books/execution.html#execution",
    "href": "books/execution.html#execution",
    "title": "Execution",
    "section": "Execution",
    "text": "Execution\nExecution is often thought about as doing things more effectively, more carefully, or with more attention to the details:\n\nExecution is a discipline, and integral to strategy.\nExecution is the major job of the business leader.\nExecution must be a core element of an organization’s culture.\n\nThe core processes are tightly linked together and need to be connected to the everyday realities of the business by creating a discipline of execution around:\n\nPeople\nStrategy\nBudgeting/Operations"
  },
  {
    "objectID": "books/execution.html#key-elements-of-core-processes",
    "href": "books/execution.html#key-elements-of-core-processes",
    "title": "Execution",
    "section": "Key elements of core processes",
    "text": "Key elements of core processes\nThe leader must be in charge of getting things done by running the three core processes: 1) by picking other leaders, 2) setting the strategic direction, and 3) conducting operations. Businesses that execute prosecute these core processes with rigor, intensity, and depth. But leading for execution is not about micromanaging or being “hands on,” it’s about active involvement and doing the things that leaders should be doing.\n\nPeople\n\nDefines who’s going to achieve the strategy. If you don’t get the people process right, you will never fulfill the potential of your business. roles\nUse leadership messaging to guide the culture, clarify the goals and issues, and to change employees’ attitudes. scrumMaster and productOwner\nBehaviors are beliefs turned into action, and behaviors deliver the results. habits\nFocus on how people execute, not merely the outcomes. metrics\nCoach others and help them learn how to execute. scrumMaster\nHold people** accountable and provide constant feedback** on progress. dailyScrum\nA big shortcoming is to be backward-looking; focused on evaluating the jobs people are doing today. Instead, focus on whether individuals can handle the jobs of tomorrow. who-will-you-be-5yfn\n\n\n\nStrategy\n\nDefines where the business wants to go. productBacklog\nCorporate-level strategy is the vehicle for allocating resources among all of the business units. time and mental-energy\nIn shaping the plan, involve all of the people who are responsible for the strategic plan’s outcome. scrum\nSet goals based on the organization’s capabilities for delivering results. An astonishing number of strategies fail because leaders don’t make a realistic assessment of whether the organization can execute the plan. sprint\nSet milestones for the progress of the plan (they bring reality to the plan). sprint-goal\n\n\n\nBudgeting/Operations\n\nThe operating plan provides the** path for people to execute** the plan. kanban\nSet contingency plans to deal with the unexpected. pavo-land\nBudgets often have little to do with the reality of execution because they’re merely numbers and gaming exercises. spaceX-rule1\nDebating the assumptions is one of the most critical parts of any operation plan and review. spaceX-rule1\n\nIf you have leaders with the right behavior, a culture that rewards execution, and a consistent system for getting the right people in the right jobs, the foundation is in place for operating and managing each of the core processes effectively. leadership-by-action"
  },
  {
    "objectID": "books/execution.html#essential-behaviors",
    "href": "books/execution.html#essential-behaviors",
    "title": "Execution",
    "section": "7 essential behaviors",
    "text": "7 essential behaviors\n\nKnow your people and your business\n\nLeaders have to “live” their businesses and be in touch with the day-to-day realities.\nSearch for people with an enormous drive for winning; with energy and enthusiasm for execution. These people get their satisfaction from getting things done.\n\nInsist on realism\n\nRealism is the heart of execution but many organizations are full of people who are trying to avoid or shade reality.\nYou cannot have an execution culture without robust dialogue, which starts when people go in with open minds.\nHarmony can be the enemy of truth. A good motto is to observe “Truth over harmony.”\n\nSet clear goals and priorities\n\nLeaders who execute focus on very few clear priorities; ones that everyone can grasp.\nGetting things done through others is a fundamental leadership skill.\n\nFollow through\n\nThe failure to follow through is widespread in business and a major cause of poor execution.\nFollow-through is a cornerstone of execution; ensuring that people are doing the things they committed to do.\n\nReward the doers\n\nMany companies do such as poor job of linking rewards to performance that there’s little correlation at all.\nReward not just strong achievements on numbers but also the desirable behaviors that people actually adopt.\n\nExpand people’s capabilities\n\nCoaching is the single most important part of expanding others’ capabilities, and the most effective way to coach is to observe a person in action and then provide specific useful feedback.\n\nKnow yourself\n\nIt takes emotional fortitude to be open to whatever information you need, whether it’s what you like to hear or not. The four core qualities that make up emotional fortitude are authenticity, self-awareness, self-mastery, and humility."
  },
  {
    "objectID": "books/execution.html#links",
    "href": "books/execution.html#links",
    "title": "Execution",
    "section": "Links",
    "text": "Links\n\nBook summary: Exection The Discipline of Getting Things Done by BOSSIDY, CHARAN\nExecution — The Discipline of Getting Things Done — Book Summary"
  },
  {
    "objectID": "books/MyStrokeofInsight.html#more-info",
    "href": "books/MyStrokeofInsight.html#more-info",
    "title": "My Stroke of Insight",
    "section": "More info",
    "text": "More info\nOn December 10, 1996, Jill Bolte Taylor, a thirty-seven- year-old Harvard-trained brain scientist experienced a massive stroke in the left hemisphere of her brain.\nAs she observed her mind deteriorate to the point that she could not walk, talk, read, write, or recall any of her life-all within four hours-Taylor alternated between the euphoria of the intuitive and kinesthetic right brain, in which she felt a sense of complete well-being and peace, and the logical, sequential left brain, which recognized she was having a stroke and enabled her to seek help before she was completely lost.\nIt would take her eight years to fully recover.\n\nMy Stroke of Insight: A Brain Scientist’s Personal Journey"
  },
  {
    "objectID": "books/systemdesign.html#more-info",
    "href": "books/systemdesign.html#more-info",
    "title": "System Design",
    "section": "More info",
    "text": "More info\n\nbytebytego.com\n\nA little background: I’ve been consistently posting on LinkedIn for 7 months now. With so many people on LinkedIn reading my posts, I’m extremely grateful.\nHere are some sample topics:\n\nWhy is Redis fast?\nHow to scale a website to support millions of users?\nHow does HTTPs work?\nWhat happens when you type a URL into your browser?\nHow to avoid double charge?\nWhy is Kafka fast?\n\nFollow me (Alex Xu) on LinkedIn or Twitter, or subscribe to my newsletter to receive updates: https://bit.ly/3FEGliw"
  },
  {
    "objectID": "books/systemdesign.html#book",
    "href": "books/systemdesign.html#book",
    "title": "System Design",
    "section": "Book",
    "text": "Book\n\nBook .pdf"
  },
  {
    "objectID": "books/writeTight.html#more-info",
    "href": "books/writeTight.html#more-info",
    "title": "Write Tight",
    "section": "More info",
    "text": "More info\n\nWrite Tight: Say Exactly What You Mean with Precision and Power"
  },
  {
    "objectID": "books/servantleader.html#about-the-book",
    "href": "books/servantleader.html#about-the-book",
    "title": "Servant Leader",
    "section": "About the book",
    "text": "About the book\nWith the publication of Servant Leadership in 1977, a new paradigm of management entered the boardrooms and corporate offices of America. Robert K. Greenleaf, a retired AT & T executive, proposed that service ought to be the distinguishing characteristic of leadership. Not only would it create better, stronger companies, he said, but business leaders themselves “would find greater joy in their lives if they raised the servant aspect of their leadership and built more serving institutions.”\nIn the quarter century since these ideas were first articulated, the notion of servant leadership has gained ever more disciples in business schools, among executives, in government and in public and private institutions. Greenleaf was among the first to analyze the qualities of leaders and followers–and the necessity for leaders to be attentive to the needs of others.\nIn this respect the leader becomes a follower.\nSuch a leader, said Greenleaf, constantly inquires whether “other people’s highest priority needs are being served.\nDo those served grow as persons? Do they, while being served, become healthier, wiser, freer, more autonomous, more likely themselves to become servants?\nThe true leader is also a seeker–alert to new possibilities, open, listening and ready for whatever develops.\nTrue leadership, then, is an inner quality as much as an exercise of authority. The present volume originated as essays and talks treating servant leadership as a general principle and the way it has been lived by particular people. Sections of the book deal with leadership in education, in foundations, in churches, in bureaucracies, and with the role of the United States as a world leader.\nIt closes with a spiritual reflection on Robert Frost’s poem “Directive”.\nThe reflection, in Greenland’s words, is “partly an acknowledgment of [Frost’s] influence on me and partly a sharing with those who are the search for what I have now come to see as servant leadership, and who, sooner or later and in their own way, come to grips with who they are and where they are on the journey.”\n(–From dustjacket)"
  },
  {
    "objectID": "books/servantleader.html#more-info",
    "href": "books/servantleader.html#more-info",
    "title": "Servant Leader",
    "section": "More info",
    "text": "More info\n\nServant Leadership: A Journey Into the Nature of Legitimate Power and Greatness"
  },
  {
    "objectID": "books/dataScienceAtCommandLine.html#more-info",
    "href": "books/dataScienceAtCommandLine.html#more-info",
    "title": "Data Science at the Command Line",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/theBedOfProcrustes.html#more-info",
    "href": "books/theBedOfProcrustes.html#more-info",
    "title": "The Bed of Procrustes",
    "section": "More info",
    "text": "More info\n\nThe Bed of Procrustes: Philosophical and Practical Aphorisms (Incerto)"
  },
  {
    "objectID": "books/stolenfocus.html#summary",
    "href": "books/stolenfocus.html#summary",
    "title": "Stolen Focus",
    "section": "Summary",
    "text": "Summary\n\nOur focus has been deteriorating for centuries, and has been super-charged by social media and technology.\nThe solution is deeper than individual action. Our attention crisis is systematic.\nOur attention and focus is fundamental to a good life, well-functioning democracy and solving difficult problems.\nStolen Focus: Why You Can’t Pay Attention\nStolen Focus: Why You Can’t Pay Attention by the Hope Institute"
  },
  {
    "objectID": "books/stolenfocus.html#more-info",
    "href": "books/stolenfocus.html#more-info",
    "title": "Stolen Focus",
    "section": "More info",
    "text": "More info\n\nStolen Focus\n\nIn the United States, teenagers can focus on one task for only sixty-five seconds at a time, and office workers average only three minutes. Like so many of us, Johann Hari was finding that constantly switching from device to device and tab to tab was a diminishing and depressing way to live. He tried all sorts of self-help solutions—even abandoning his phone for three months—but nothing seemed to work. So Hari went on an epic journey across the world to interview the leading experts on human attention—and he discovered that everything we think we know about this crisis is wrong.\nWe think our inability to focus is a personal failure to exert enough willpower over our devices. The truth is even more disturbing: our focus has been stolen by powerful external forces that have left us uniquely vulnerable to corporations determined to raid our attention for profit.\nHari found that there are twelve deep causes of this crisis, from the decline of mind-wandering to rising pollution, all of which have robbed some of our attention. In Stolen Focus, he introduces readers to Silicon Valley dissidents who learned to hack human attention, and veterinarians who diagnose dogs with ADHD. He explores a favela in Rio de Janeiro where everyone lost their attention in a particularly surreal way, and an office in New Zealand that discovered a remarkable technique to restore workers’ productivity.\nCrucially, Hari learned how we can reclaim our focus—as individuals, and as a society—if we are determined to fight for it. Stolen Focus will transform the debate about attention and finally show us how to get it back."
  },
  {
    "objectID": "books/quarkusCookBook.html#more-info",
    "href": "books/quarkusCookBook.html#more-info",
    "title": "Quarkus Cookbook",
    "section": "More info",
    "text": "More info\nThe recipes in this book show mid-level to senior developers familiar with Java enterprise application development how to get started with Quarkus quickly. You’ll become familiar with how Quarkus works with the wider Java ecosystem and discover ways to adapt this framework to your particular needs.\n\nWe said that Quarkus is meant to run within Kubernetes. That sounds great, but we know lots of things can run within Kubernetes. Throw your application in a Docker container, and it will run on Kubernetes. While this is true, there are a number of things that traditionally have to be done to properly tune, size, and configure your application to run efficiently within Kubernetes. You also have to pull out your text editor of choice and craft multiple YAML files—and let’s be honest, no one really enjoys doing all that."
  },
  {
    "objectID": "books/microservices-for-java-developers.html#more-info",
    "href": "books/microservices-for-java-developers.html#more-info",
    "title": "Microservices for Java Developers",
    "section": "More info",
    "text": "More info\nMicroservices for Java Developers: A Hands-On Introduction to Frameworks and Containers - Java Developers\nMicroservices for Java Developers: A Hands-On Introduction to Frameworks and Containers - Java Developers\nThe Microservice architectural approach is more than just about technology. It reaches into the foundation of your organization to allow you to build truly scalable, adaptive, complex systems that help a business adapt to rapidly changing competitive markets. Using a hands-on approach to three useful Java frameworks for building Microservices: Spring Boot, Dropwizard, and WildFly Swarm you can compare and contrast them through a handful of familiar patterns, including:\n\nExposing a service\nConfiguration at runtime\nExposing metrics/insight\nCalling downstream services in a safe manner\n\nExplore concepts like immutable delivery and how Linux Containers and Kubernetes can be used to deploy and manage Microservices."
  },
  {
    "objectID": "books/diveIntoDesignPatterns.html#more-info",
    "href": "books/diveIntoDesignPatterns.html#more-info",
    "title": "Dive Into DESIGN PATTERNS",
    "section": "More info",
    "text": "More info\n\nAlexander Shvets, 2022, Dive Into DESIGN PATTERNS: An ebook on design patterns and the principles behind them\nAlexander Shvets Design Patterns Explained Simply.pdf\nPatterns github"
  },
  {
    "objectID": "books/gettingthingsdone.html#more-info",
    "href": "books/gettingthingsdone.html#more-info",
    "title": "Getting Things Done",
    "section": "More info",
    "text": "More info\nIn today’s world, yesterday’s methods just don’t work. In Getting Things Done, veteran coach and management consultant David Allen shares the breakthrough methods for stress-free performance.\n\n\n\n\n\n\nPlease, relax\n\n\n\nAllen’s premise is simple: our productivity is directly proportional to our ability to relax.\nOnly when our minds are clear and our thoughts are organized can we achieve effective productivity and unleash our creative potential.\n\n\nThe primary reason for organizing is to reduce cognitive load: to eliminate the need to constantly be thinking, What do I need to do about this?"
  },
  {
    "objectID": "books/gettingthingsdone.html#overview",
    "href": "books/gettingthingsdone.html#overview",
    "title": "Getting Things Done",
    "section": "Overview",
    "text": "Overview\n\nIf we don’t appropriately manage the open loops in our life, our attention will get pulled.\nOverwhelm comes from:\n\nnot clarifying what your intended outcome is,\nnot deciding what the very next action is, and\nnot being aware of your outcome and next-previous-action.\n\nYou need to transform all the stuff you attract and accumulate into a clear inventory."
  },
  {
    "objectID": "books/gettingthingsdone.html#structure",
    "href": "books/gettingthingsdone.html#structure",
    "title": "Getting Things Done",
    "section": "Structure",
    "text": "Structure\nGetting things done requires two basic components:\n\nOutcome: Defining what “done” means\nAction: What “doing” looks like\n\n\n\n\n\n\n\nRelevance of metrics\n\n\n\nWe need some real metrics to feed our decision-making and be aware to where we are going.\n\n\nYou need to control commitments, projects, and actions in two ways:\n\nHorizontally. Maintaining coherence across all the activities in which you are involved\nVertically. Managing thinking, development, and coordination of individual topics and projects."
  },
  {
    "objectID": "books/gettingthingsdone.html#five-tips",
    "href": "books/gettingthingsdone.html#five-tips",
    "title": "Getting Things Done",
    "section": "Five tips",
    "text": "Five tips\nHere are a few takeaways and tactics:\n\nDone\nGetting things done requires defining what done means and what doing looks like.\n\nWhat is done? What is doing?\n\n\nWe need to transform all the ‘stuff’ we attract and accumulate into a clear inventory of meaningful actions, projects, and usable information.\n\n\n\nAttention\nMastering your workflow involves capturing what has your attention, clarifying what it means, putting it where it belongs, reviewing it frequently, and engaging with it.\n\nHow de you see the world? What is your narrative?\n\n\nYou must use your mind to get things off your mind and focus, if not: confussion and with confussion comes very bad decision-making.\n\n\nUntil your thoughts have been clarified and decisions have been made (and create a pointer) your brain can’t give up the job.\n\n\n\npointer: decision, processes, targets, outocmes are data, information. The resulting data must be stored in a system that you absolutely know you will access and think about when you need to.\n\n\nNow!\nIf an action will take less than two minutes, it should be done at the moment it is defined.\n\nSave energy, do it now!\n\n\n\nAnxiety\nAnxiety and guilt don’t come from having too much to do; it comes from breaking agreements with yourself.\n\nYour mind is for having ideas, not for holding them.\n\n\nIt’s a waste of time and energy to keep thinking about something that you make no progress on."
  },
  {
    "objectID": "books/gettingthingsdone.html#more-info-1",
    "href": "books/gettingthingsdone.html#more-info-1",
    "title": "Getting Things Done",
    "section": "More info",
    "text": "More info\n\nGetting Things Done Summary\n\n\n\n\nGetting Things Done Workflow Chart"
  },
  {
    "objectID": "books/scrum.html#more-info",
    "href": "books/scrum.html#more-info",
    "title": "Scrum",
    "section": "More info",
    "text": "More info\n\nScrum: The Art of Doing Twice the Work in Half the Time\n\n\nThe definitive book on the Scrum methodology from its co-creator and the CEO of Scrum, Inc., Jeff Sutherland.\nScrum is the revolutionary approach to project management and team building that has helped to transform everything from software companies to the US military to healthcare in major American hospitals. In this major new book its originator, Jeff Sutherland, explains precisely and step by step how it operates - and how it can be made to work for anyone, anywhere. Take the FBI attempt to digitize its records, for example. As with so many software projects the first attempt failed, having taken four years and cost over $400 million.Then the FBI turned to Scrum, and just over a year later unveiled a functioning system that cost less than a tenth of the first project and employed a tenth of the staff. And it’s not just grand projects that Scrum can help with.\nEvery organisation, whatever its size, constantly has to come to grips with delivering a product or service on time and on budget. Scrum shows you how. It explains how to define precisely what it is that you are seeking to achieve, how to set up the team to achieve it, and how to monitor progress until the project is successfully completed. Filled with practical examples drawn from all types and organisation it will make you rethink the fundamentals of successful management - and show you how to get things done however everyday or ambitious, however small or large your organisation."
  },
  {
    "objectID": "books/howToMeasureAnyThing.html#more-info",
    "href": "books/howToMeasureAnyThing.html#more-info",
    "title": "How to Measure Anything",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/skinInTheGame.html#more-info",
    "href": "books/skinInTheGame.html#more-info",
    "title": "Skin in the Game",
    "section": "More info",
    "text": "More info\n\nSkin in the Game: Hidden Asymmetries in Daily Life (Incerto)"
  },
  {
    "objectID": "books/awekenings.html#more-info",
    "href": "books/awekenings.html#more-info",
    "title": "Awekenings",
    "section": "More info",
    "text": "More info\nAwakenings–which inspired the major motion picture–is the remarkable story of a group of patients who contracted sleeping-sickness during the great epidemic just after World War I. Frozen for decades in a trance-like state, these men and women were given up as hopeless until 1969, when Dr. Oliver Sacks gave them the then-new drug L-DOPA, which had an astonishing, explosive, “awakening” effect. Dr. Sacks recounts the moving case histories of his patients, their lives, and the extraordinary transformations which went with their reintroduction to a changed world.\n\nAwakenings"
  },
  {
    "objectID": "books/incerto.html#more-info",
    "href": "books/incerto.html#more-info",
    "title": "Incerto",
    "section": "More info",
    "text": "More info\nIncerto 4-Book Bundle:\n\nAntifragile,\nThe Black Swan,\nFooled by Randomness,\nThe Bed of Procrustes\n\nNassim Nicholas Taleb’s landmark Incerto series is an investigation of luck, uncertainty, probability, opacity, human error, risk, disorder, and decision-making in a world we don’t understand, in nonoverlapping and standalone books. All four volumes—Antifragile, The Black Swan, Fooled by Randomness, and the special expanded edition of The Bed of Procrustes, updated with more than 50 percent new material—are now together in one ebook bundle."
  },
  {
    "objectID": "books/burnout.html#more-info",
    "href": "books/burnout.html#more-info",
    "title": "Burnout",
    "section": "More info",
    "text": "More info\nHerbert Freudenberger’s Burnout: The High Cost of High Achievement was published in 1980 and explores the concept of burnout, a state of physical, emotional, and mental exhaustion that results from chronic stress.\n\n\n\n\n\n\nNote\n\n\n\nIn the book, Freudenberger identifies several key characteristics of burnout, including feelings of cynicism and detachment, decreased personal accomplishment, and increased physical symptoms such as fatigue, headaches, and insomnia.\n\n\nHe also highlights the importance of recognizing the signs of burnout and taking steps to prevent or overcome it.\nSome of the key vocabulary used in the book include:\n\nBurnout: A state of physical, emotional, and mental exhaustion caused by chronic stress\nCynicism: A distrustful attitude towards others or the world in general\nDetachment: A feeling of emotional distance or disconnection\nPersonal accomplishment: A sense of achievement or satisfaction in one’s work or life\nFatigue: A state of exhaustion or tiredness\nHeadaches: Pain in the head or upper neck\nInsomnia: Difficulty sleeping or staying asleep\n\n\nBurnout: The High Cost of High Achievement serves as an important reminder of the negative effects of chronic stress and the importance of maintaining balance and self-care in order to prevent burnout."
  },
  {
    "objectID": "books/burnout.html#descision-making",
    "href": "books/burnout.html#descision-making",
    "title": "Burnout",
    "section": "Descision-Making",
    "text": "Descision-Making\nIn Burnout: The High Cost of High Achievement, Herbert Freudenberger explains that people often get burned out without realizing it. This is because burnout can develop gradually over time as a result of chronic stress.\n\nPeople may start to feel overwhelmed and exhausted, but they often attribute these feelings to other factors such as a demanding job or family responsibilities.\n\nFreudenberger also emphasizes the importance of** decision-making in stopping stress and preventing burnout. He notes that people who are at risk of burnout are often those who are highly driven, work-focused, and driven by their desire to achieve.\nHowever, they may also be prone to neglecting their own well-being and making decisions that increase their stress levels."
  },
  {
    "objectID": "books/burnout.html#prevent",
    "href": "books/burnout.html#prevent",
    "title": "Burnout",
    "section": "Prevent",
    "text": "Prevent\nIn order to prevent burnout, it is important for individuals to take an active role in managing their stress levels and making decisions that prioritize their physical, emotional, and mental well-being.\nThis may include setting boundaries and learning to say no to additional demands, taking time for self-care, and seeking support from friends, family, or a mental health professional.\n\nThe prevent in the decision-making process is critical in preventing burnout. By making conscious choices that support their well-being, individuals can avoid the high cost of high achievement and maintain a healthy work-life balance."
  },
  {
    "objectID": "books/Blitzscaling.html#about-the-book",
    "href": "books/Blitzscaling.html#about-the-book",
    "title": "Blitzscaling",
    "section": "About the book",
    "text": "About the book\nWhat is the secret to starting and scaling massively valuable companies?\nFor most of the world, the terms “Silicon Valley” and “startup” are synonymous. Indeed, Silicon Valley is home to a disproportionate number of companies that have grown from garage startups into global giants.\nBut what is the secret to these startups’ extraordinary success? Contrary to the popular narrative, it’s not their superhuman founders or savvy venture capitalists. Rather, it’s that they have learned how to blitzscale.\nBlitzscaling is a specific set of practices for igniting and managing dizzying growth; an accelerated path to the stage in a startup’s life-cycle where the most value is created.\nIt prioritizes speed over efficiency in an environment of uncertainty, and allows a company to go from “startup” to “scaleup” at a furious pace that captures the market.\nDrawing on their experiences scaling startups into billion-dollar businesses, Hoffman and Yeh offer a framework for blitzscaling that can be replicated in any region or industry. Readers will learn how to design business models that support lightning-fast growth, navigate necessary shifts in strategy at each level of scale, and weather the management challenges that arise as their company grows.\n\n\n\n Blitzscaling: Book Trailer  from Reid Hoffman"
  },
  {
    "objectID": "books/Blitzscaling.html#more-info",
    "href": "books/Blitzscaling.html#more-info",
    "title": "Blitzscaling",
    "section": "More info",
    "text": "More info\n\nBlitzscaling: The Lightning-Fast Path to Building Massively Valuable Companies"
  },
  {
    "objectID": "books/fooledByRandomness.html#more-info",
    "href": "books/fooledByRandomness.html#more-info",
    "title": "Fooled by Randomness",
    "section": "More info",
    "text": "More info\n\nFooled by Randomness: The Hidden Role of Chance in Life and in the Markets (Incerto)"
  },
  {
    "objectID": "books/stratospheric.html#more-info",
    "href": "books/stratospheric.html#more-info",
    "title": "Stratospheric",
    "section": "More info",
    "text": "More info\n\n\n\nStratospheric\n\n\n\nFrom Zero to Production with Spring Boot and AWS\n\n\nSummary\nStratospheric: From Zero to Production with Spring Boot and AWS\nAll you need to know to get a Spring Boot application into production with AWS.\n\nWhat’s covered? Develop a production-ready Spring Boot application and deploy it to AWS while integrating several AWS services.\n\n\nInfrastructure as code Learn how to use the AWS CDK (Cloud Development Kit) to define the entire infrastructure with Java code\n\n\nIntegrate AWS services Get familiar with powerful AWS services by implementing features for the sample application\n\n\nDeployment Automate the CI/CD pipeline to get changes deployed to production in a matter of minutes using GitHub Actions\n\n\nOperations Effectively monitor and operate a Spring Boot application in production"
  },
  {
    "objectID": "books/consilience.html#more-info",
    "href": "books/consilience.html#more-info",
    "title": "Consilience",
    "section": "More info",
    "text": "More info\n\nConsilience: The Unity of Knowledge"
  },
  {
    "objectID": "books/HowtoFailatAlmostEverything.html#more-info",
    "href": "books/HowtoFailatAlmostEverything.html#more-info",
    "title": "How to Fail at Almost Everything and Still Win Big",
    "section": "More info",
    "text": "More info\nDilbert creator Scott Adams’ funny memoir about his many failures and what they eventually taught him about success”\n\nHow to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life"
  },
  {
    "objectID": "books/chimpanzeePolitics.html#more-info",
    "href": "books/chimpanzeePolitics.html#more-info",
    "title": "Chimpanzee Politics",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/atomicHabits.html#more-info",
    "href": "books/atomicHabits.html#more-info",
    "title": "Atomic Habits",
    "section": "More info",
    "text": "More info\n\nAtomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones"
  },
  {
    "objectID": "books/systemdesigninterview.html#more-info",
    "href": "books/systemdesigninterview.html#more-info",
    "title": "System Design Interview",
    "section": "More info",
    "text": "More info\n\nbytebytego.com"
  },
  {
    "objectID": "books/systemdesigninterview.html#book",
    "href": "books/systemdesigninterview.html#book",
    "title": "System Design Interview",
    "section": "Book",
    "text": "Book\n\nBook .pdf"
  },
  {
    "objectID": "books/communicationbook44.html#more-info",
    "href": "books/communicationbook44.html#more-info",
    "title": "The Communication Book",
    "section": "More info",
    "text": "More info\n\nThe Communication Book: 44 Ideas for Better Conversations Every Day"
  },
  {
    "objectID": "books/quarkusSpringDevelopers.html#more-info",
    "href": "books/quarkusSpringDevelopers.html#more-info",
    "title": "Quarkus for Spring Developers",
    "section": "More info",
    "text": "More info\n\nQuarkus for Spring Developers\nQuarkus for Spring Developers GitHub\nQuarkus for Spring Developers Book\n\n\nFor me, the paradigm that Quarkus brings is a major one for Java. This is one of these moments in your career when you should take stock and explore a new technology in-depth! This book makes it easy to do that, providing like-for-like examples of your favorite Spring development patterns mapped to their Quarkus equivalents (don’t panic, there are many similarities) and giving you an understanding of the fundamentals at play under the hood.\n\n—Martijn Verburg (aka “The Diabolical Developer”) Principal Group Manager (Java), Microsoft Eclipse Adoptium Steering Committee member"
  },
  {
    "objectID": "books/MicroservicesPatterns.html#more-info",
    "href": "books/MicroservicesPatterns.html#more-info",
    "title": "Microservices Patterns",
    "section": "More info",
    "text": "More info\n\n\n\nMicroservices Example ftgo\n\n\n\nMicroservices Patterns\nMicroservices Patterns GitHub\nMicroservices Patterns e-book\n\nThis book teaches enterprise developers and architects how to build applications with the microservice architecture. Rather than simply advocating for the use the microservice architecture, this clearly-written guide takes a balanced, pragmatic approach, exploring both the benefits and drawbacks.\nMicroservices.io is brought to you by Chris Richardson. Experienced software architect, author of POJOs in Action, the creator of the original CloudFoundry.com, and the author of Microservices patterns.\nChris helps clients around the world adopt the microservice architecture through consulting engagements, and training workshops."
  },
  {
    "objectID": "books/elements_style.html#more-info",
    "href": "books/elements_style.html#more-info",
    "title": "Elements of Style",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/playingtowin.html#playing-to-win-how-strategy-really-works",
    "href": "books/playingtowin.html#playing-to-win-how-strategy-really-works",
    "title": "Playing to win",
    "section": "Playing to Win: How Strategy Really Works",
    "text": "Playing to Win: How Strategy Really Works\nAre you just playing–or playing to win? Strategy is not complex. But it is hard. It’s hard because it forces people and organizations to make specific choices about their future–something that doesn’t happen in most companies.\nNow two of today’s best-known business thinkers get to the heart of strategy–explaining what it’s for, how to think about it, why you need it, and how to get it done. And they use one of the most successful corporate turnarounds of the past century, which they achieved together, to prove their point.\n\nA.G. Lafley, former CEO of Procter & Gamble, in close partnership with strategic adviser Roger Martin, doubled P&G’s sales, quadrupled its profits, and increased its market value by more than $100 billion in just ten years. Now, drawn from their years of experience at P&G and the Rotman School of Management, where Martin is dean, this book shows how leaders in organizations of all sizes can guide everyday actions with larger strategic goals built around the clear, essential elements that determine business success–where to play and how to win.\n\nThe result is a playbook for winning.\nLafley and Martin have created a set of five essential strategic choices that, when addressed in an integrated way, will move you ahead of your competitors.\nThey are:\n\nWhat is our winning aspiration?\nWhere will we play?\nHow will we win?\nWhat capabilities must we have in place to win?\nWhat management systems are required to support our choices?\n\nThe stories of how P&G repeatedly won by applying this method to iconic brands such as Olay, Bounty, Gillette, Swiffer, and Febreze clearly illustrate how deciding on a strategic approach–and then making the right choices to support it–makes the difference between just playing the game and actually winning."
  },
  {
    "objectID": "books/playingtowin.html#five-essential-strategic-choices",
    "href": "books/playingtowin.html#five-essential-strategic-choices",
    "title": "Playing to win",
    "section": "Five essential strategic choices",
    "text": "Five essential strategic choices\nThe result is a playbook for winning. Lafley and Martin have created a set of five essential strategic choices that, when addressed in an integrated way, will move you ahead of your competitors. They are:\n\nWhat is our winning aspiration?\nWhere will we play?\nHow will we win?\nWhat capabilities must we have in place to win?\nWhat management systems are required to support our choices?"
  },
  {
    "objectID": "books/playingtowin.html#more-info",
    "href": "books/playingtowin.html#more-info",
    "title": "Playing to win",
    "section": "More info",
    "text": "More info\n\nLinks\n\nHBR’s Playing to Win Strategy Toolkit\nPlaying to Win: How Strategy Really Works\nRoger Martin. Playing to Win - How to make strategy work\nPlaying to Win: How Strategy Really Works\n\n\n\nOther resources"
  },
  {
    "objectID": "books/theartofagiledevelopment.html#more-info",
    "href": "books/theartofagiledevelopment.html#more-info",
    "title": "The Art of Agile Development",
    "section": "More info",
    "text": "More info\nThe Art of Agile Development contains practical guidance for anyone considering or applying agile development for building valuable software. Plenty of books describe what agile development is or why it helps software projects succeed, but very few combine information for developers, managers, testers, and customers into a single package that they can apply directly. This book provides no-nonsense advice on agile planning, development, delivery, and management taken from the authors’ many years of experience with Extreme Programming (Xp).\nYou get a gestalt view of the agile development process, including comprehensive guidance for non-technical readers and hands-on technical practices for developers and testers. The Art of Agile Development gives you clear answers to questions such as:\nHow can we adopt agile development? Do we really need to pair program? What metrics should we report? What if I can’t get my customer to participate? How much documentation should we write? When do we design and architect? As a non-developer, how should I work with my agile team? Where is my product roadmap? How does Qa fit in?\nThe book teaches you how to adopt Xp practices, describes each practice in detail, then discusses principles that will allow you to modify Xp and create your own agile method.\nIn particular, this book tackles the difficult aspects of agile development: the need for cooperation and trust among team members. Whether you’re currently part of an agile team, working with an agile team, or interested in agile development, this book provides the practical tips you need to start practicing agile development. As your experience grows, the book will grow with you, providing exercises and information that will teach you first to understand the rules of agile development, break them, and ultimately abandon rules altogether as you master the art of agile development. “Jim Shore and Shane Warden expertly explain the pract\n\nThe Art of Agile Development"
  },
  {
    "objectID": "books/designPatterns.html#more-info",
    "href": "books/designPatterns.html#more-info",
    "title": "Design Patterns",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/norulesrules.html#more-info",
    "href": "books/norulesrules.html#more-info",
    "title": "No Rules Rules",
    "section": "More info",
    "text": "More info\n\nNo rules rules"
  },
  {
    "objectID": "books/norulesrules.html#netflix-and-the-culture-of-reinvention",
    "href": "books/norulesrules.html#netflix-and-the-culture-of-reinvention",
    "title": "No Rules Rules",
    "section": "Netflix and the Culture of Reinvention",
    "text": "Netflix and the Culture of Reinvention\nThere’s never before been a company like Netflix. Not just because of its unique position as a leader in both the worlds of entertainment and technology; or because of its growth as the world’s leading streaming entertainment service, with over 193 million members in 190 countries. Netflix is a revolutionary company because of a counter-intuitive and radical management culture, which defies tradition and expectation.\nWhen Reed Hastings founded Netflix, he developed a corporate philosophy and a set of management principles which would make Netflix one of the most inventive companies in the world. This meant rejecting the conventional wisdom under which other companies operate. At Netflix, adequate performance gets a generous severance and hard work is irrelevant. At Netflix, you don’t try to please your boss, you practice radical candour instead. At Netflix, employees never need approval, and the company always pays top of market. When Hastings first devised them, the implications of these principles were unknown, but over time they have inculcated flexibility, speed, and boldness throughout a successful and rapidly growing organisation.\nDrawing on hundreds of interviews with current Netflix employees and never-before-told stories from his own career, Hastings elaborates on these controversial principles at the heart of the Netflix psyche, which have generated results that are the envy of the business world. This is the full, fascinating, and untold story of a unique company taking over the world."
  },
  {
    "objectID": "books/descartesError.html#more-info",
    "href": "books/descartesError.html#more-info",
    "title": "Descartes’ Error",
    "section": "More info",
    "text": "More info\n\nDescartes’ Error: Emotion, Reason, and the Human Brain"
  },
  {
    "objectID": "books/j2ee.html#what-is-this-book-about",
    "href": "books/j2ee.html#what-is-this-book-about",
    "title": "Expert One-on-One J2EE™ Design and Development",
    "section": "What is this book about?",
    "text": "What is this book about?\nThe results of using J2EE in practice are often disappointing: applications are often slow, unduly complex, and take too long to develop. Rod Johnson believes that the problem lies not in J2EE itself, but in that it is often used badly. Many J2EE publications advocate approaches that, while fine in theory, often fail in reality, or deliver no real business value.\nExpert One-on-One: J2EE Design and Development aims to demystify J2EE development. Using a practical focus, it shows how to use J2EE technologies to reduce, rather than increase, complexity. Rod draws on his experience of designing successful high-volume J2EE applications and salvaging failing projects, as well as intimate knowledge of the J2EE specifications, to offer a real-world, how-to guide on how you too can make J2EE work in practice.\n\nIt will help you to solve common problems with J2EE and avoid the expensive mistakes often made in J2EE projects. It will guide you through the complexity of the J2EE services and APIs to enable you to build the simplest possible solution, on time and on budget. Rod takes a practical, pragmatic approach, questioning J2EE orthodoxy where it has failed to deliver results in practice and instead suggesting effective, proven approaches."
  },
  {
    "objectID": "books/j2ee.html#what-does-this-book-cover",
    "href": "books/j2ee.html#what-does-this-book-cover",
    "title": "Expert One-on-One J2EE™ Design and Development",
    "section": "What does this book cover?",
    "text": "What does this book cover?\nIn this book, you will learn\n\nWhen to use a distributed architecture\nWhen and how to use EJB\nHow to develop an efficient data access strategy\nHow to design a clean and maintainable web interface\nHow to design J2EE applications for performance"
  },
  {
    "objectID": "books/j2ee.html#who-is-this-book-for",
    "href": "books/j2ee.html#who-is-this-book-for",
    "title": "Expert One-on-One J2EE™ Design and Development",
    "section": "Who is this book for?",
    "text": "Who is this book for?\nThis book would be of value to most enterprise developers.\nAlthough some of the discussion (for example, on performance and scalability) would be most relevant to architects and lead developers, the practical focus would make it useful to anyone with some familiarity with J2EE.\nBecause of the complete design-deployment coverage, a less advanced developer could work through the book along with a more introductory text, and successfully build and understand the sample application.\nThis comprehensive coverage would also be useful to developers in smaller organisations, who might be called upon to fill several normally distinct roles."
  },
  {
    "objectID": "books/j2ee.html#what-is-special-about-this-book",
    "href": "books/j2ee.html#what-is-special-about-this-book",
    "title": "Expert One-on-One J2EE™ Design and Development",
    "section": "What is special about this book?",
    "text": "What is special about this book?\nWondering what differentiates this book from others like it in the market? Take a look:\n\nIt does not just discuss technology, but stress its practical application. The book is driven from the need to solve common tasks, rather than by the elements of J2EE.\nIt discuss risks in J2EE development\nIt takes the reader through the entire design, development and build process of a non-trivial application. This wouldn’t be compressed into one or two chapters, like the Java Pet Store, but would be a realistic example comparable to the complexity of applications readers would need to build.\nAt each point in the design, alternative choices would be discussed. This would be important both where there’s a real problem with the obvious alternative, and where the obvious alternatives are perhaps equally valid.\nIt emphasizes the use of OO design and design patterns in J2EE, without becoming a theoretical book"
  },
  {
    "objectID": "books/j2ee.html#references",
    "href": "books/j2ee.html#references",
    "title": "Expert One-on-One J2EE™ Design and Development",
    "section": "References",
    "text": "References\n\nRod Johnson (programmer)\nExpert One-on-One J2EE Design and Development.pdf\nExpert One-on-One™ J2EE™ Development without EJB™Expert One-on-One™ J2EE™ Development without EJB™"
  },
  {
    "objectID": "books/TheCreativeHabit.html#more-info",
    "href": "books/TheCreativeHabit.html#more-info",
    "title": "The Creative Habit",
    "section": "More info",
    "text": "More info\nWhat makes someone creative? How does someone face the empty page, the empty stage and making something where nothing existed before? Not just a dilemma for the artist, it is something everyone faces everyday. What will I cook that isn’t boring? How can I make that memo persuasive? What sales pitch will increase the order, get me the job, lock in that bonus? These too, are creative acts, and they all share a common need: proper preparation. For Twyla Tharp, creativity is no mystery; it’s the product of hard work and preparation, of knowing one’s aims and one’s subject, of learning from approaches taken in the past. It’s a process undertaken every day. It’s a habit. The Creative Habit is not merely a look inside the mind of a remarkable woman with remarkable skills, but a programmatic, inspiring, encouraging guide to help each of us achieve our fullest creative potential.\n\nThe Creative Habit: Learn It"
  },
  {
    "objectID": "books/noise.html#about-the-book",
    "href": "books/noise.html#about-the-book",
    "title": "Noise",
    "section": "About the book",
    "text": "About the book\nFrom the bestselling author of Thinking, Fast and Slow and the co-author of Nudge, a groundbreaking exploration of why most people make bad judgments, and how to control for that noise.​\nImagine that two doctors in the same city give different diagnoses to identical patients — or that two judges in the same courthouse give different sentences to people who have committed the same crime. Suppose that different food inspectors give different ratings to indistinguishable restaurants — or that when a company is handling customer complaints, the resolution depends on who happens to be handling the particular complaint. Now imagine that the same doctor, the same judge, the same inspector, or the same company official makes different decisions, depending on whether it is morning or afternoon, or Monday rather than Wednesday. These are examples of noise: variability in judgments that should be identical.\nIn Noise, Daniel Kahneman, Cass R. Sunstein, and Olivier Sibony show how noise contributes significantly to errors in all fields, including medicine, law, economic forecasting, police behavior, food safety, bail, security checks at airports, strategy, and personnel selection. And although noise can be found wherever people make judgments and decisions, individuals and organizations alike are commonly oblivious to the role of chance in their judgments and in their actions.\nDrawing on the latest findings in psychology and behavioral economics, and the same kind of diligent, insightful research that made Thinking, Fast and Slow and Nudge groundbreaking New York Times bestsellers, Noise explains how and why humans are so susceptible to noise in judgment — and what we can do about it."
  },
  {
    "objectID": "books/noise.html#more-info",
    "href": "books/noise.html#more-info",
    "title": "Noise",
    "section": "More info",
    "text": "More info\n\nNoise"
  },
  {
    "objectID": "books/misbehaving.html#about-the-book",
    "href": "books/misbehaving.html#about-the-book",
    "title": "Misbehaving",
    "section": "About the book",
    "text": "About the book\nNobel laureate Richard H. Thaler has spent his career studying the radical notion that the central agents in the economy are humans—predictable, error-prone individuals.\nMisbehaving is his arresting, frequently hilarious account of the struggle to bring an academic discipline back down to earth—and change the way we think about economics, ourselves, and our world.\nTraditional economics assumes rational actors. Early in his research, Thaler realized these Spock-like automatons were nothing like real people. Whether buying a clock radio, selling basketball tickets, or applying for a mortgage, we all succumb to biases and make decisions that deviate from the standards of rationality assumed by economists. In other words, we misbehave. More importantly, our misbehavior has serious consequences. Dismissed at first by economists as an amusing sideshow, the study of human miscalculations and their effects on markets now drives efforts to make better decisions in our lives, our businesses, and our governments.\nCoupling recent discoveries in human psychology with a practical understanding of incentives and market behavior, Thaler enlightens readers about how to make smarter decisions in an increasingly mystifying world. He reveals how behavioral economic analysis opens up new ways to look at everything from household finance to assigning faculty offices in a new building, to TV game shows, the NFL draft, and businesses like Uber.\nLaced with antic stories of Thaler’s spirited battles with the bastions of traditional economic thinking, Misbehaving is a singular look into profound human foibles. When economics meets psychology, the implications for individuals, managers, and policy makers are both profound and entertaining."
  },
  {
    "objectID": "books/misbehaving.html#more-info",
    "href": "books/misbehaving.html#more-info",
    "title": "Misbehaving",
    "section": "More info",
    "text": "More info\n\nMisbehaving: The Making of Behavioral Economics"
  },
  {
    "objectID": "books/TheMoleculeofMore.html#more-info",
    "href": "books/TheMoleculeofMore.html#more-info",
    "title": "The Molecule of More",
    "section": "More info",
    "text": "More info\nWhy are we obsessed with the things we want only to be bored when we get them?\nWhy is addiction perfectly logical to an addict?\nWhy does love change so quickly from passion to indifference?\nWhy are some people die-hard liberals and others hardcore conservatives?\nWhy are we always hopeful for solutions even in the darkest times―and so good at figuring them out?\n\nThe Molecule of More"
  },
  {
    "objectID": "books/theBlackSwan.html#more-info",
    "href": "books/theBlackSwan.html#more-info",
    "title": "The Black Swan",
    "section": "More info",
    "text": "More info\n\nThe Black Swan: The Impact of the Highly Improbable (Incerto)"
  },
  {
    "objectID": "books/Ikigai.html#more-info",
    "href": "books/Ikigai.html#more-info",
    "title": "Ikigai",
    "section": "More info",
    "text": "More info\nThe people of Japan believe that everyone has an ikigai – a reason to jump out of bed each morning. And according to the residents of the Japanese island of Okinawa – the world’s longest-living people – finding it is the key to a longer and more fulfilled life. Inspiring and comforting, this book will give you the life-changing tools to uncover your personal ikigai. It will show you how to leave urgency behind, find your purpose, nurture friendships and throw yourself into your passions.\n\nIkigai: The Japanese Secret to a Long and Happy Life"
  },
  {
    "objectID": "books/CollectiveIllusions.html#more-info",
    "href": "books/CollectiveIllusions.html#more-info",
    "title": "Collective Illusions",
    "section": "More info",
    "text": "More info\n\nCollective Illusions"
  },
  {
    "objectID": "books/TheJoyofLiving.html#more-info",
    "href": "books/TheJoyofLiving.html#more-info",
    "title": "The Joy of Living",
    "section": "More info",
    "text": "More info\n\n[The Joy of Living: Unlocking the Secret and Science of Happiness][(https://www.example.com/book/the-joy-of-living](https://www.amazon.es/Joy-Living-Unlocking-Science-Happiness/dp/0307347311){.external}"
  },
  {
    "objectID": "books/TheRudestBookEver.html#more-info",
    "href": "books/TheRudestBookEver.html#more-info",
    "title": "The Rudest Book Ever",
    "section": "More info",
    "text": "More info\nShwetabh Gangwar is a professional problem-solver—and he’s ace at it. For the past five years, people from all over the world have contacted him with their troubles and he’s worked these out for them.\nIn the process, he has picked up on a simple pattern: people need a set of principles and perspectives to protect them from all the unnecessary bullshit they go through. Codes to live by, essentially.\nBut be warned: Gangwar has no desire to spare your feelings. What you will find in this straight-forward, straight-talking, no-craps-given guide, is:\nHow to deal with rejections of all kinds\nHow to change your perceptions of people so you don’t end up screwed\nWhy a society that sees people as ‘good and bad’ is dumb\nHow the search for happiness screws us over\nHow seeking approval and acceptance kills our individuality\nThe truth about social media influencers\nWhy we should be taught ‘how to think’, instead of ‘what to think’\n\nThe Rudest Book Ever"
  },
  {
    "objectID": "books/thefivedisfunctionteam.html#more-info",
    "href": "books/thefivedisfunctionteam.html#more-info",
    "title": "The five disfunctions of a team",
    "section": "More info",
    "text": "More info\n\nThe five disfunctions of a team"
  },
  {
    "objectID": "books/devops_with_openshift_oreilly.html#more-info",
    "href": "books/devops_with_openshift_oreilly.html#more-info",
    "title": "DevOps with OpenShift",
    "section": "More info",
    "text": "More info\n\nDevOps with OpenShift RedHat pdf\nDevOps with OpenShift pdf"
  },
  {
    "objectID": "books/devops_with_openshift_oreilly.html#what-is-openshift",
    "href": "books/devops_with_openshift_oreilly.html#what-is-openshift",
    "title": "DevOps with OpenShift",
    "section": "What is OpenShift?",
    "text": "What is OpenShift?\nOpenShift is a family of containerization software offerings created by open-source software provider Red Hat. According to the company, Kubernetes is the kernel of distributed systems, while OpenShift is the distribution.\n\nAt its core, OpenShift is a cloud-based Kubernetes container platform that’s considered both containerization software and a platform-as-a-service (PaaS).\n\n\nIt’s also partly built on Docker, another popular containerization platform.\n\nOpenShift offers consistent security, built-in monitoring, centralized policy management, and compatibility with Kubernetes container workloads. It’s fast, enables self-service provisioning, and integrates with a variety of tools. In other words, there’s no vendor lock-in.\nPreviously known as Origin, the open-source platform, OpenShift OKD lets developers create, test, and deploy applications on the cloud. It also supports several programming languages, including Go, Node.js, Ruby, Python, PHP, Perl, and Java."
  },
  {
    "objectID": "books/ThePsychologyofMoney.html#more-info",
    "href": "books/ThePsychologyofMoney.html#more-info",
    "title": "The Psychology of Money",
    "section": "More info",
    "text": "More info\n\nThe Psychology of Money: Timeless lessons on wealth, greed, and happiness"
  },
  {
    "objectID": "books/mindset.html#more-info",
    "href": "books/mindset.html#more-info",
    "title": "Mindset",
    "section": "More info",
    "text": "More info\nFrom the renowned psychologist who introduced the world to “growth mindset” comes this updated edition of the million-copy bestseller—featuring transformative insights into redefining success, building lifelong resilience, and supercharging self-improvement.\n“Through clever research studies and engaging writing, Dweck illuminates how our beliefs about our capabilities exert tremendous influence on how we learn and which paths we take in life.”—Bill Gates, GatesNotes\n“It’s not always the people who start out the smartest who end up the smartest.”\nAfter decades of research, world-renowned Stanford University psychologist Carol S. Dweck, Ph.D., discovered a simple but groundbreaking idea: the power of mindset. In this brilliant book, she shows how success in school, work, sports, the arts, and almost every area of human endeavor can be dramatically influenced by how we think about our talents and abilities. People with a fixed mindset—those who believe that abilities are fixed—are less likely to flourish than those with a growth mindset—those who believe that abilities can be developed. Mindset reveals how great parents, teachers, managers, and athletes can put this idea to use to foster outstanding accomplishment.\nIn this edition, Dweck offers new insights into her now famous and broadly embraced concept. She introduces a phenomenon she calls false growth mindset and guides people toward adopting a deeper, truer growth mindset. She also expands the mindset concept beyond the individual, applying it to the cultures of groups and organizations. With the right mindset, you can motivate those you lead, teach, and love—to transform their lives and your own."
  },
  {
    "objectID": "books/theCompoundEffect.html#overview",
    "href": "books/theCompoundEffect.html#overview",
    "title": "The Compound Effect",
    "section": "Overview",
    "text": "Overview\n\n\n\nCompound effect: +1% or -1%\n\n\n\n\n\nCompound effect: return in 40 years"
  },
  {
    "objectID": "books/theCompoundEffect.html#basic-investment-types",
    "href": "books/theCompoundEffect.html#basic-investment-types",
    "title": "The Compound Effect",
    "section": "Basic investment types",
    "text": "Basic investment types\n\nStocks: Stocks represent ownership in a company and can provide returns through capital appreciation and dividends.\nIndex Funds: These are investment funds that aim to replicate the performance of a specific market index, such as the S&P 500.\nStartups: Investing in startups involves providing capital to early-stage companies in exchange for equity, with the potential for high returns if the company succeeds.\nBonds: Bonds are debt securities issued by governments or corporations, offering periodic interest payments and return of principal upon maturity.\nReal Estate: Real estate investments involve buying and owning physical properties, such as residential or commercial real estate, to generate rental income or capital gains.\nCryptocurrency: Cryptocurrencies like Bitcoin and Ethereum are digital assets that use blockchain technology for transactions and have gained popularity as speculative investments.\nFutures: Futures contracts allow investors to speculate on the future price of commodities, currencies (Forex, Foreign exchange market), or financial instruments, often used for hedging or trading purposes.\nGold: Gold is a precious metal that investors buy as a store of value or a hedge against inflation and economic instability."
  },
  {
    "objectID": "books/theCompoundEffect.html#examples",
    "href": "books/theCompoundEffect.html#examples",
    "title": "The Compound Effect",
    "section": "Examples",
    "text": "Examples\n\n\n\nCompound effect: return by type in 200 years\n\n\n\n\n\nCompound effect: stocks 2023\n\n\n\n\n\nCompound effect: seedrocket"
  },
  {
    "objectID": "books/theCompoundEffect.html#more-info",
    "href": "books/theCompoundEffect.html#more-info",
    "title": "The Compound Effect",
    "section": "More info",
    "text": "More info\n\nThe Compound Effect: Jumpstart Your Income, Your Life, Your Success"
  },
  {
    "objectID": "books/Kubernetes_Native_Microservices.html#more-info",
    "href": "books/Kubernetes_Native_Microservices.html#more-info",
    "title": "Kubernetes Native Microservices",
    "section": "More info",
    "text": "More info\n\n\n\nBank app architecture\n\n\n\nKubernetes Native Microservices ebook\nKubernetes Native Microservices github"
  },
  {
    "objectID": "books/ManSearchForMeaning.html#more-info",
    "href": "books/ManSearchForMeaning.html#more-info",
    "title": "Man’s Search for Meaning",
    "section": "More info",
    "text": "More info\nA prominent Viennese psychiatrist before the war, Viktor Frankl was uniquely able to observe the way that both he and others in Auschwitz coped (or didn’t) with the experience. He noticed that it was the men who comforted others and who gave away their last piece of bread who survived the longest - and who offered proof that everything can be taken away from us except the ability to choose our attitude in any given set of circumstances. The sort of person the concentration camp prisoner became was the result of an inner decision and not of camp influences alone. Only those who allowed their inner hold on their moral and spiritual selves to subside eventually fell victim to the camp’s degenerating influence - while those who made a victory of those experiences turned them into an inner triumph. Frankl came to believe man’s deepest desire is to search for meaning and purpose.\n\nMan’s Search for Meaning"
  },
  {
    "objectID": "books/SwimmingwithSharks.html#more-info",
    "href": "books/SwimmingwithSharks.html#more-info",
    "title": "Swimming with Sharks",
    "section": "More info",
    "text": "More info\n\nSwimming with Sharks: My Journey into the World of the Bankers"
  },
  {
    "objectID": "books/domaindrivendesign.html#more-info",
    "href": "books/domaindrivendesign.html#more-info",
    "title": "Domain Driven Design",
    "section": "More info",
    "text": "More info"
  },
  {
    "objectID": "books/brainenergy.html#overview",
    "href": "books/brainenergy.html#overview",
    "title": "Brain Energy",
    "section": "Overview",
    "text": "Overview\nThis is the book that will forever change the way we understand and treat mental health.\nIf you or someone you love is affected by mental illness, it might change your life.\n\n\n\n\n\n\nNote\n\n\n\nWe are in the midst of a global mental health crisis, and mental illnesses are on the rise.\nBut what causes mental illness?\nAnd why are mental health problems so hard to treat?\n\n\nDrawing on decades of research, Harvard psychiatrist Dr. Chris Palmer outlines a revolutionary new understanding that for the first time unites our existing knowledge about mental illness within a single framework: Mental disorders are metabolic disorders of the brain.\nBrain Energy explains this new understanding of mental illness in detail, from symptoms and risk factors to what is happening in brain cells. Palmer also sheds light on the new treatment pathways this theory opens up—which apply to all mental disorders, including anxiety, depression, ADHD, alcoholism, eating disorders, bipolar disorder, autism, and even schizophrenia. Brain Energy pairs cutting-edge science with practical advice and strategies to help people reclaim their mental health.\nThis groundbreaking book reveals:\n\nWhy classifying mental disorders as “separate” conditions is misleading\nThe clear connections between mental illness and disorders linked to metabolism, including diabetes, heart attacks, strokes, pain disorders, obesity, Alzheimer’s disease, and epilepsy\nThe link between metabolism and every factor known to play a role in mental health, including genetics, inflammation, hormones, neurotransmitters, sleep, stress, and trauma\nThe evidence that current mental health treatments, including both medications and therapies, likely work by affecting metabolism\nNew treatments available today that readers can use to promote long-term healing\n\nPalmer puts together the pieces of the mental illness puzzle to provide answers and offer hope. Brain Energy will transform the field of mental health, and the lives of countless people around the world."
  },
  {
    "objectID": "books/brainenergy.html#brain-energy-mitochondria-and-mental-health-with-dr.-chris-palmer",
    "href": "books/brainenergy.html#brain-energy-mitochondria-and-mental-health-with-dr.-chris-palmer",
    "title": "Brain Energy",
    "section": "Brain Energy, Mitochondria, and Mental Health with Dr. Chris Palmer",
    "text": "Brain Energy, Mitochondria, and Mental Health with Dr. Chris Palmer"
  },
  {
    "objectID": "books/brainenergy.html#thesis",
    "href": "books/brainenergy.html#thesis",
    "title": "Brain Energy",
    "section": "Thesis",
    "text": "Thesis\n\n\n\nPaying the brain’s energy bill\n\n\n\nThe brain is the single most metabolically demanding organ in the body. It uses about 30% of all the caloric energy consumed by the body.\nImagine that for a minute.\nIf about one third of our metabolism is dedicated just to powering our thoughts, does it make sense that thinking can make us tired? Or that we can’t think as well when we’re hungry or fatigued? Or that metabolic stimulants (e.g., caffeine, sugar) have powerful cognitive effects?\nIt makes sense.\n\n\nWhen the body ingests more carbs than it burns, two things happen:\n\nfat gain, and\ninsulin resistance.\n\nThe later is a condition in which insulin in the bloodstream -responsible for shuttling glucose across the cell membrane- becomes increasingly less effective.\nThat is, the cells resist the action of insulin, resulting in higher concentrations of glucose (sugar) in the blood.\n\n\nAlthough the evolutionary reasons for insulin resistance are unknown, it may be that lower concentrations of glucose within the cell walls give the mitochondria inside more time to process the carbohydrate without production of excess reactive oxygen species.\nOverworked mitochondria can be more prone to damage by ROS, and damaged mitochondria in the brain are less effective for powering essential cognitive processes.\n\n\n\n\n\n\n\n\nInuslin-gluocose balance\n\n\n\n\n\n\n\nInuslin Diabetes Type I\n\n\n\n\n\n\n\nInuslin Diabetes Type II\n\n\n\n\n\n\nFigure 1"
  },
  {
    "objectID": "books/brainenergy.html#more-info",
    "href": "books/brainenergy.html#more-info",
    "title": "Brain Energy",
    "section": "More info",
    "text": "More info\n\n‘Brain Energy’ by Chris Palmer, MD (review)\nChris Palmer web\nBrain Energy: A Revolutionary Breakthrough in Understanding Mental Health–and Improving Treatment for Anxiety, Depression, OCD, PTSD, and More"
  },
  {
    "objectID": "books/theIntellingenceTrap.html#more-info",
    "href": "books/theIntellingenceTrap.html#more-info",
    "title": "The Intelligence Trap",
    "section": "More info",
    "text": "More info\nA “startling, provocative and potently useful” (James McConnachie, Times UK) examination of the stupid things intelligent people do.\nThe Intelligence Trap explores cutting-edge ideas in our understanding of intelligence and expertise, including “motivated reasoning,” “meta-forgetfulness,” and “functional stupidity.” David Robson reveals the surprising ways that even the brightest minds and most talented organizations can go wrong?from some of Thomas Edison’s worst ideas to failures at NASA—while offering practical advice to avoid mistakes based on the timeless lessons of Benjamin Franklin, Richard Feynman, and Daniel Kahneman."
  },
  {
    "objectID": "books/thinkInJava.html#more-info",
    "href": "books/thinkInJava.html#more-info",
    "title": "Thinking in Java",
    "section": "More info",
    "text": "More info\n\nThinking in Java\n\nBruce Eckel is president of MindView, Inc. (www.MindView.net), which provides public and private training seminars, consulting, mentoring, and design reviews in object-oriented technology and design patterns. He is the author of several books, has written more than fifty articles, and has given lectures and seminars throughout the world for more than twenty years. Bruce has served as a voting member of the C++ Standards Committee. He holds a B.S. in applied physics and an M.S. in computer engineering.\n2003 Java Developer’s Journal Reader’s Choice Award for Best Book 2001 JavaWorld Editor’s Choice Award for Best Book 2000 JavaWorld Reader’s Choice Award for Best Book 1999 Software Development Magazine Productivity Award 1998 Java Developer’s Journal Editor’s Choice Award for Best Book"
  },
  {
    "objectID": "books/HowtoCreateaMind.html#more-info",
    "href": "books/HowtoCreateaMind.html#more-info",
    "title": "How to Create a Mind",
    "section": "More info",
    "text": "More info\n\nHow to Create a Mind: The Secret of Human Thought Revealed"
  },
  {
    "objectID": "about/about-this-images-credit.html",
    "href": "about/about-this-images-credit.html",
    "title": "About images credit",
    "section": "",
    "text": "About images credit",
    "crumbs": [
      "About me and this site",
      "About images credit"
    ]
  },
  {
    "objectID": "about/about-this-images-credit.html#footnotes",
    "href": "about/about-this-images-credit.html#footnotes",
    "title": "About images credit",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nrandom web, just crediting the image↩︎\nvery useful and recommended resource↩︎\nrandom web, just crediting the image↩︎\ninteresting web↩︎\ninteresting web↩︎\nrandom web, just crediting the image↩︎\nrandom web, just crediting the image↩︎\nrandom web, just crediting the image↩︎\nrandom web, just crediting the image↩︎\ninteresting web↩︎\ninteresting web↩︎\nvery useful and recommended resource↩︎\ninteresting web↩︎\ninteresting web↩︎\ninteresting web↩︎\nvery useful and recommended resource↩︎\nrandom web, just crediting the image↩︎\nrandom web, just crediting the image↩︎",
    "crumbs": [
      "About me and this site",
      "About images credit"
    ]
  },
  {
    "objectID": "about/about-this-site.html",
    "href": "about/about-this-site.html",
    "title": "About this site",
    "section": "",
    "text": "About",
    "crumbs": [
      "About me and this site",
      "About this site"
    ]
  },
  {
    "objectID": "about/about-this-site.html#introduction",
    "href": "about/about-this-site.html#introduction",
    "title": "About this site",
    "section": "Introduction",
    "text": "Introduction\nThis site has been done and been mantaining with four tools and several content sources:\n\nTools\n\nQuarto\nMarkdown\nGit / GitHub.com / Git Pages\nVisual Code IDE\n\n\n\nContent Sources\n\nOpenAI Chat\nBooks, authors, websites or online resources are cited as detailed as possible (minimum Author, site and link)\nDocumentation of my own: albertprofe sites and repositories\n\nGitHub repository albertprofe\nWeb SCRUM\nWeb DevOps",
    "crumbs": [
      "About me and this site",
      "About this site"
    ]
  },
  {
    "objectID": "about/about-this-site.html#diagram",
    "href": "about/about-this-site.html#diagram",
    "title": "About this site",
    "section": "Diagram",
    "text": "Diagram\n\n\n\nHow to create a website with Quarto engine, written in MarkDown and deployed/hosted/published by GitHub-pages\n\n\nGo to Markdown Lab1 to check the details",
    "crumbs": [
      "About me and this site",
      "About this site"
    ]
  },
  {
    "objectID": "about/about-this-site.html#tools-1",
    "href": "about/about-this-site.html#tools-1",
    "title": "About this site",
    "section": "Tools",
    "text": "Tools\n\nBasic tools\nQuarto is an open-source scientific and technical publishing system built on Pandoc. To learn more about Quarto websites visit quarto.org.\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. It is commonly used on the web to format blog posts and other types of content.\nVisualCode is an integrated development environment (IDE) that is used to write and debug code.\nGitHub Pages is a service offered by the popular version control platform GitHub. It allows users to create and host websites using the files that are stored in their GitHub repositories. It can be used to create personal, organization, or project-based websites.\n\n\nGit\nGit is a version control system that is used for tracking changes to files, such as source code or documents. It is commonly used by software developers to manage their codebase, but it can also be used for other types of files.\n\nGit allows users to create a repository, which is a collection of files that are managed by Git. Each time a change is made to a file in the repository, Git records the change in a new version of the file. This allows users to easily undo changes, compare different versions of a file, and collaborate with others on the same files.\n\nGit also provides tools for managing and merging changes made by different users. This makes it possible for multiple people to work on the same files at the same time without overwriting each other’s changes.\nOverall, Git is a powerful and widely-used tool that is essential for anyone working on large or complex projects with multiple collaborators. It allows users to easily track, manage, and share changes to their files, making it easier to develop and maintain software projects.",
    "crumbs": [
      "About me and this site",
      "About this site"
    ]
  },
  {
    "objectID": "about/about-this-site.html#install-tools",
    "href": "about/about-this-site.html#install-tools",
    "title": "About this site",
    "section": "Install tools",
    "text": "Install tools\nIf you want to use VisualCode and GitHub together, you can follow these steps:\n\nInstall VisualCode on your computer.\nCreate a new project in VisualCode by selecting “File &gt; New Project” from the menu.\nInitialize a Git repository in your project by opening the terminal in VisualCode and running the git init command.\nUse VisualCode to write and save your code files in the project directory.\nStage and commit your changes to the Git repository using the git add and git commit commands.\nCreate a new repository on GitHub and follow the instructions to push your local repository to the remote repository on GitHub.\n\nOnce your code is on GitHub, you can use GitHub Pages to create a website for your project. To do this, follow these steps:\n\nOpen the repository on GitHub and go to the “Settings” tab.\nScroll down to the “GitHub Pages” section and select the “master branch” as the source for your website.\nGitHub will automatically build and publish your website, and it will provide a URL where you can view it.\n\n\n\n\n\n\n\nBe careful: these instructions are just a general overview\n\n\n\n\n\nNote that these instructions are just a general overview of how to use VisualCode and GitHub together. There are many other features and options that you can use to customize your workflow. For more detailed information, you can consult the documentation for VisualCode and GitHub.\n\n\n\n\nMarkdown examples\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. It is commonly used on the web to format blog posts and other types of content.\nTo format text using Markdown, you use special characters and symbols to indicate the formatting that you want to apply. For example, to create a heading, you can use the # symbol followed by the text of the heading. To create a bullet list, you can use the - symbol at the beginning of each list item.\nHere is an example of how Markdown can be used to format a simple document, when this Markdown code is rendered, it will look like this::\n\nHeading 5\nThis is a paragraph of text. It can include italicized or bold text, and you can create links to other web pages.\n\nThis is a bullet list\nEach item in the list begins with a dash\nYou can nest lists by indenting the items\n\n\nThis is a blockquote To create a blockquote, you use the &gt; symbol at the beginning of each line\n\nfunction Comment(props) {\n  return (\n    &lt;div className=\"Comment\"&gt;\n      &lt;div className=\"UserInfo\"&gt;\n        &lt;img className=\"Avatar\"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        /&gt;\n        &lt;div className=\"UserInfo-name\"&gt;\n          {props.author.name}\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div className=\"Comment-text\"&gt;\n        {props.text}\n      &lt;/div&gt;\n      &lt;div className=\"Comment-date\"&gt;\n        {formatDate(props.date)}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\nThere are many other features and options available in Markdown, and you can use it to format your text in a variety of ways. For more information, you can consult the documentation for the specific implementation of Markdown that you are using.",
    "crumbs": [
      "About me and this site",
      "About this site"
    ]
  },
  {
    "objectID": "about/about-this-site.html#openai-chat",
    "href": "about/about-this-site.html#openai-chat",
    "title": "About this site",
    "section": "OpenAI Chat",
    "text": "OpenAI Chat\n\nWhat are you?\n\n\nI am an AI assistant trained by OpenAI. I am not a human, but I am designed to answer questions and provide information on a wide range of topics. I do not have feelings, thoughts, or opinions of my own, and I exist solely to assist users in finding the information that they need. I am not affiliated with quarto.org or any other website or organization. I am a virtual entity that exists only in the digital realm.\n\n\nChatGPT\n\n\n\n\n\n\nChatGPT 3.5 is testing\n\n\n\n\n\nChatGPT: Optimizing Language Models for Dialogue. ChatGPT interacts in a conversational way. The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests.\nChatGPT is a sibling model to InstructGPT, which is trained to follow an instruction in a prompt and provide a detailed response.\n\n\n\nChatGPT",
    "crumbs": [
      "About me and this site",
      "About this site"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html",
    "href": "reactjs/rjslab6-1.html",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "",
    "text": "📘 React JS Lab#RE06-1: healthyFood Restaurant\nIn this lab, we will be using:\n\nthe create-react-app with npx\nw3.css framework for css\n\ninstall css on React: npm install w3-css\nw3 css: cards, button, container\n\nJSX components\narray of JSON: data as model\n\nThis React project serves as the front-end for a robust Spring Boot back-end, complemented by a well-designed UML. The UML is meticulously crafted in the context of Lab#SE04-1, ensuring a structured foundation for the restaurant management system.\nProject Overview\n\nTechnology Stack:\n\nFront-End: React\nBack-End: Spring Boot\n\nSystem Design:\n\nThe UML diagram, designed as part of Lab#SE04-1, lays the groundwork for essential entities such as Orders, Tables, and Menus.\n\n\nIntegration with Spring Boot with API Rest\nThis React front-end seamlessly integrates with the Spring Boot back-end via API Rest, creating a efficient restaurant management.\nThe UML design acts as a guide, ensuring a cohesive flow between the front-end and back-end components.\n\nLab#SE04-1",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#react-functions",
    "href": "reactjs/rjslab6-1.html#react-functions",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.1 React functions",
    "text": "4.1 React functions\n\n\nindex.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = \nReactDOM.createRoot(document.getElementById('root'));\nroot.render(&lt;App /&gt;);",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#react-application",
    "href": "reactjs/rjslab6-1.html#react-application",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.2 React Application",
    "text": "4.2 React Application\nReact application is defined with three instances of the MenuList component and one instance of the MenuData component. The application imports external components and a CSS framework (“w3-css/w3.css”).\nThe App function returns a JSX structure representing the main application. The outermost element is a div with the class “w3-container,” containing three instances of the MenuList component arranged side by side using the “w3-cell” class. Each MenuList component represents a section or module in the application.\nThe code uses the &lt;&gt; (fragment) syntax to group multiple elements without introducing an additional parent node.\n\n\nThere’s a repetition of the MenuList component, and the application structure isa placeholder.\nDepending on the actual requirements, you may want to dynamically render components based on the data or user interactions for a more dynamic and scalable application.\n\n\nApp.jsx\n\nimport MenuList from \"./MenuList.jsx\";\nimport Order from \"./Order.jsx\";;\nimport \"w3-css/w3.css\";\n\n\n\nexport default function App() {\n  return (\n    &lt;&gt;\n      &lt;div class=\"w3-container\"&gt;\n        &lt;h1&gt;healthy food&lt;/h1&gt;\n        &lt;div class=\"w3-container w3-cell\"&gt;\n          &lt;MenuList /&gt;\n        &lt;/div&gt;\n        &lt;div class=\"w3-container w3-cell\"&gt;\n          &lt;MenuList /&gt;\n        &lt;/div&gt;\n        &lt;div class=\"w3-container w3-cell\"&gt;\n          &lt;MenuList /&gt;\n        &lt;/div&gt;\n        &lt;MenuList /&gt;\n      &lt;/div&gt;\n      &lt;div class=\"w3-container w3-cell\"&gt;\n        &lt;a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        &gt;\n          Learn React\n        &lt;/a&gt;\n      &lt;/div&gt;\n      &lt;br /&gt;\n      &lt;Order /&gt;\n      &lt;br /&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\nMenuList.jss\n\nimport \"w3-css/w3.css\";\n\nexport default function MenuList() {\n  return (\n    &lt;&gt;\n      &lt;div class=\"w3-container\"&gt;\n        &lt;h2&gt;Menu&lt;/h2&gt;\n\n        &lt;div class=\"w3-panel w3-card w3-sand\"&gt;\n         \n            &lt;h3&gt;Lisboa&lt;/h3&gt;\n\n            &lt;h5&gt;Gluten Free&lt;/h5&gt;\n            &lt;ul&gt;\n              &lt;li&gt;Meat Balls with portuguese sauce&lt;/li&gt;\n              &lt;li&gt;Fresh Tuna&lt;/li&gt;\n              &lt;li&gt;Onion and rice&lt;/li&gt;\n\n              &lt;h2&gt;Price: 80€&lt;/h2&gt;\n            &lt;/ul&gt;\n\n      \n              &lt;button class=\"w3-button w3-pink\"&gt;Accept&lt;/button&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n  \n     \n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#add-json-data-as-model",
    "href": "reactjs/rjslab6-1.html#add-json-data-as-model",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.3 Add JSON data as model",
    "text": "4.3 Add JSON data as model\nA static array named menus represents different restaurant menus, each containing an:\n\nid,\nname,\nlist of contents (foods),\nprice,\nand flags indicating whether the menu is\n\nactive and\nincludes water.\n\n\n\n\nData.json\n\nconst menus = [\n  {\n    \"id\": \"M001\",\n    \"name\": \"Menu Lisboa\",\n    \"contents\": [\n      \"Meat Balls\",\n      \"Salad with tomato\",\n      \"Onion and carrot\",\n      \"Fresh Tuna\",\n    ],\n    \"price\": 80.0,\n    \"active\": true,\n    \"water\": true\n  },\n  {\n    \"id\": \"M002\",\n    \"name\": \"Menu New York\",\n    \"contents\": [\n      \"Meat Balls with Pulled Steak\",\n      \"Salad with tomato\",\n      \"Brown Rice\",\n      \"Fresh Salmon\"\n    ],\n    \"price\": 85.0,\n    \"active\": true,\n    \"water\": true,\n  },\n  {\n    \"id\": \"M003\",\n    \"name\": \"Menu Santiago\",\n    \"contents\": [\n      \"Meat Chicken Curry\",\n      \"Salad with tomato\",\n      \"Carrot with edamame\",\n      \"Fresh Tuna\"\n    ],\n    \"price\": 82.0,\n    \"active\": true,\n    \"water\": true,\n  }\n];\n\nIn App we may call the component:\n\n\nApp.jsx\n\n\nimport MenuList from \"./MenuList.jsx\";\nimport Order from \"./Order.jsx\";;\nimport \"w3-css/w3.css\";\n\n//  const menus = []; \n\n\nexport default function App() {\n  return (\n    &lt;&gt;\n      \n      ...\n      ...\n\n\n      &lt;CreateOrder menu = {menus[0]}&gt;\n\n      &lt;br /&gt;\n      &lt;Order /&gt;\n      &lt;br /&gt;\n    &lt;/CreateOrder&gt;\n  );\n}\n\n\nBelow the three MenuList components, a MenuData component is rendered with the menu prop set to the first menu item from the menus array (menus[0]).\nThis implies that the initial data displayed in the MenuData component corresponds to the “Menu Lisboa.”\n\n\nMenuData.jsx\n\nimport \"w3-css/w3.css\";\n\n\nexport default function MenuData({menu}) {\n\n//console.log(menu);\n\n  return (\n    &lt;&gt;\n      \n       &lt;div class=\"w3-panel w3-card w3-teal\"&gt;\n        &lt;h1&gt; {menu.name} &lt;/h1&gt;\n        &lt;span class=\"w3-sand\"&gt;{menu.id}&lt;/span&gt;\n        &lt;p&gt;&lt;/p&gt;\n        &lt;p&gt;\n          {menu.contents[0]}, \n          {menu.contents[1]}, \n          {menu.contents[2]} \n        &lt;/p&gt;\n\n        &lt;p&gt;{menu.price} euros&lt;/p&gt;\n\n        &lt;p&gt;Water is {menu.water ? '' : 'not'} \n        &lt;span&gt;included &lt;/span&gt;&lt;/p&gt;\n        \n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#rendering-order-list",
    "href": "reactjs/rjslab6-1.html#rendering-order-list",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.4 Rendering order list",
    "text": "4.4 Rendering order list\nOur restaurant will have in this version three entities:\n\nmenu\ntable\norder, it joins menus and tables\n\nFirst at all, import the data from JSON into an array of literal object JS:\n\nordersDataJSON\n\n\n\nOrderList.jsx\n\nimport { ordersDataJSON } from \"./ordersDataJSON.js\";\n\n {\n    \"id\": \"O505\",\n    \"date\": \"03/12/2022\",\n    \"waiter\": \"Pere\",\n    \"qtyPeople\": 8,\n    \"totalPayment\": 90.33,\n    \"paid\": true,\n    \"table\": \"table6\",\n    \"menus\": [\n      {\n        \"menu\": \"Girona\",\n        \"qty\": 9\n      },\n      {\n        \"menu\": \"Santiago\",\n        \"qty\": 1\n      }\n    ]\n  },\nThen, map the orders into a new array of JSX nodes, for exemple a list for renderData ids:\n\n\nOrderList.jsx\n\n\nexport default function OrdersList() {\n\n\nconst renderData = ordersDataJSON.map(order =&gt; \n                    &lt;li&gt;{order.id}&lt;/li&gt;);\n\n\nreturn &lt;ul&gt;{renderData}&lt;/ul&gt;;\n\n}\n\nAnd eventually render &lt;ul&gt;{renderData}&lt;/ul&gt;\n\n\nArray.prototype.map() The map() method of Array instances creates a new array populated with the results of calling a provided function on every element in the calling array.\n\n\n\n\n\n\nNote\n\n\n\nThe map() method is an iterative method. map():\n\ncreates a new array from calling a function for every array element.\ndoes not execute the function for empty elements.\ndoes not change the original array.\n\nIt calls a provided callbackFn function once for each element in an array and constructs a new array from the results.\n\n\n\nSandbox w3shcool map()\n\n\n\n\nOrderList.jsx\n\nimport \"w3-css/w3.css\";\nimport { ordersDataJSON } from \"./ordersDataJSON.js\";\n\nexport default function OrdersList() {\n  const renderData = ordersDataJSON.map((order) =&gt; (\n    &lt;&gt;\n      &lt;div class=\"w3-card-4\" style={{ width: \"50%\" }}&gt;\n        &lt;header class=\"w3-container w3-sand\"&gt;\n          &lt;h3&gt;Id: {order.id}&lt;/h3&gt;\n        &lt;/header&gt;\n        &lt;br /&gt;\n        &lt;div class=\"w3-container\"&gt;\n          Waiter: {order.waiter}, qtyPeople: {order.qtyPeople}, To pay:{\" \"}\n          {order.paid ? \" ✔\" : \"X\"} {order.totalPayment} $\n        &lt;/div&gt;\n        &lt;div class=\"w3-container\"&gt;Date: {order.date}&lt;/div&gt;\n        &lt;div class=\"w3-container\"&gt;Table: {order.table}&lt;/div&gt;\n        &lt;div class=\"w3-container\"&gt;Menus:&lt;br/&gt;\n         {order.menus.map ( (menu) =&gt; ( &lt;&gt;&lt;span&gt;{menu.menu}:{menu.qty}, &lt;/span&gt;&lt;/&gt;))  }&lt;/div&gt;\n        &lt;br /&gt;\n        &lt;footer class=\"w3-container w3-black\"&gt;\n          &lt;h5&gt;healthyFood restaurant&lt;/h5&gt;\n        &lt;/footer&gt;\n      &lt;/div&gt;\n      &lt;br /&gt;\n    &lt;/&gt;\n  ));\n\n  //console.log(ordersDataJSON);\n  console.log(\"renderdata\", renderData);\n\n\n  return (\n    &lt;&gt;\n      &lt;div class=\"w3-container\"&gt;\n        &lt;h1&gt;Orders List&lt;/h1&gt;\n        &lt;div class=\"w3-container\"&gt;{renderData}&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#adding-ddd",
    "href": "reactjs/rjslab6-1.html#adding-ddd",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.5 Adding DDD",
    "text": "4.5 Adding DDD\n\nReactJs Project Structure\nDDD: Domain-driven Design\n\n\n\n\nDDD React project\n\n\n\n\n\n\n\n\n\n\n\n\nName\nDescription\nWhy\nExample\n\n\n\n\nMiddleware\nProvides intermediate processing logic, intercepting requests and responses, and performing tasks such as authentication, logging, api calls, etc.\nSeparates cross-cutting concerns from the main application logic, enhancing modularity and reusability.\nAuthMiddleware.js, LoggerMiddleware.js, , ApiMiddleware.js\n\n\nPages\nRepresents the main views or screens of the application, each typically corresponding to a specific URL route.\nOrganizes the user interface into distinct sections, improving navigation and usability.\nHome.jsx, Orders.jsx, , Menus.jsx\n\n\nComponents\nEncapsulates reusable UI elements or functional units, promoting modularization and facilitating composition.\nEnhances maintainability by breaking down the UI into smaller, reusable pieces.\nButton.jsx, Modal.jsx, Avatar.jsx\n\n\nUtils\nContains utility functions and helper classes providing common functionalities needed throughout the application.\nReduces code duplication, improves readability, and promotes consistency.\napiUtils.js, dateUtils.js\n\n\nAssets\nStores static files such as images, fonts, or CSS files used within the application.\nCentralizes and manages static resources, simplifying asset management and deployment.\nlogo.png, font.ttf, styles.css\n\n\nLayout\nDefines the overall structure and arrangement of UI elements on the page, including headers, footers, sidebars, etc.\nPromotes consistency in the visual presentation of the application and improves user experience.\nMainLayout.jsx, SidebarLayout.jsx\n\n\nRoutes\nHandles the mapping between URLs and corresponding components or views, defining the navigation paths within the application.\nFacilitates navigation between different sections of the application and ensures proper routing.\nAppRoutes.jsx, PrivateRoutes.jsx",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#adding-css",
    "href": "reactjs/rjslab6-1.html#adding-css",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.6 Adding CSS",
    "text": "4.6 Adding CSS\n\nw3.css templates\nGourment and catering template\nGourment and catering sandbox\nGitHub code v0.5 - branch ordersMapping\n\nTo add W3.CSS to a React project, first, include the** W3.CSS CDN link** in the &lt;head&gt; section of your public/index.html file or install the dependency: mpm install w3-css\nThen, utilize W3.CSS classes directly within your React components’ JSX code. Import the W3.CSS stylesheet in your main component or global stylesheet. Now, you can apply W3.CSS styles to your React components by adding the appropriate class names. Ensure compatibility and avoid conflicts with existing styles. Finally, leverage W3.CSS’s extensive documentation for guidance on styling your React project efficiently.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#deploying-the-react-project",
    "href": "reactjs/rjslab6-1.html#deploying-the-react-project",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.7 Deploying the React Project",
    "text": "4.7 Deploying the React Project\n\n\nAWS Amplify\n\nUpload project to GitHub\n\nGit and GitHub 2023 CLI\n\nWhat is Amplify?\nAmplify is everything you need to build full-stack web and mobile apps on AWS. Build and host your frontend, add features like auth and storage, connect to real-time data sources, deploy, and scale to millions of users.\n\n\n\nHost your web app on AWS Amplify\n\n\n\n\n\nHost your web app on AWS Amplify\n\n\n\n\n\nHost your web app on AWS Amplify step-by-step\n\n\n\n\n\nHost your web app on AWS Amplify step-by-step\n\n\n\n\n\nAuthorize AWS Amplify on GitHub\n\n\n\n\n\nApp Information\n\n\nThis tab lists all connected branches, select a branch to view build details: ordersMapping Continuous deploys set up\n\n\n\nhealthyfoodFront deployed\n\n\n\nhealthyfoodFront url aws",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#pull-request-ordersmapping-createorder-into-master",
    "href": "reactjs/rjslab6-1.html#pull-request-ordersmapping-createorder-into-master",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.8 pull request: ordersMapping & createOrder into master",
    "text": "4.8 pull request: ordersMapping & createOrder into master\nPull requests let you tell others about changes you’ve pushed to a branch in a repository on GitHub.\nOnce a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before your changes are merged into the base branch.\n\n4.8.1 Initial code: master and two branches\nBranch ordersMapping was created from master, and they apparently seem the same branch, but there are two heads, they are, in fact, two branches.\n\nGitHub code ordersMapping 220e0f3\nGitHub code master 117e56a\nGitHub code createOrder 72db4f7\n\nAt this moment we have three heads: 220e0f3, 117e56a and 72db4f7\n\n\n\nwe have three branches/heads: ordersMapping, createOrder,master\n\n\n\n\n\n\n\nwe have three branches/heads: ordersMapping, createOrder,master\n\n\nWith a new commit on masterit is clear that there are three branches.\n\n\n\nwe create a commmit on master\n\n\n\n\n\n\n\nwe create a commmit on master\n\n\n\n\n4.8.2 pull request and merge\nTo merge two branches into master we are going to:\n\nfirst, review and merge pull request #1, “Orders mapping #1,” containing 8 commits from the “ordersMapping” branch\nThen, address conflicts in pull request #2, “Master #2,” which integrated 4 commits from “createOrder” into master.\n\nResolve these conflicts, commit changes, and merge pull request #2.\nensure all changes align with project standards.\n\nFinally, we need to verify the merged master branch for stability and functionality (review the final output project structure).\n\n\n\n\n\n\n\nNote\n\n\n\nEfficiently managing conflicts and adhering to project guidelines ensures smooth integration of features into the master branch, maintaining code integrity and project continuity.\n\n\nLet’s do the first pull request step-by-step:\nStep-by-step pull request\nThis is the output documentation on Github.com:\n\npull request #1: Orders mapping #1\nAlbertProfe merged 8 commits into master from ordersMapping\n\nOrders mapping #1\nfiles changed\n8 commits into master\n\npull request #2: Master #2\nAlbertProfe merged 4 commits into master from createOrder\n\nMaster #2\nfiles changed\n4 commits into master\n\nSince the pull request #2, Master #2, have conflicts we must resolve them and then commit and merge before the pull request.\n\n\n\nwe merge twice: ordersMapping to master and then createOrdertomaster\n\n\n\n\n\n\n\nwe merge twice: ordersMapping to master and then createOrdertomaster\n\n\n\n\n4.8.3 Final state: just master\n\n\n\ncommit on master to move createOrder component from root project to its domain\n\n\nFinal code\nAfter the two pull requests, the master branch incorporates all commits from the two branches due to the process of merging.\nWhen a pull request is accepted and merged into the master branch, all the changes (commits) from the respective branches are integrated into the master branch.\nIn the first pull request (#1: Orders mapping #1), 8 commits from the “ordersMapping” branch were merged into master. Similarly, in the second pull request (#2: Master #2), 4 commits from the “createOrder” branch were merged into master.\nAs a result, the master branch now includes all changes from both branches, ensuring that the latest developments from each branch are consolidated into the main codebase.\n\nGitHub code v0.6\n\nNow, the master has all the commits:\n\nGitHub code v0.6: commits",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1.html#api-rest",
    "href": "reactjs/rjslab6-1.html#api-rest",
    "title": "Lab#RE06-1: healthyFood Restaurant",
    "section": "4.9 API Rest",
    "text": "4.9 API Rest\n\nReact Axios",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1: healthyFood Restaurant"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-router.html",
    "href": "reactjs/reactjs-app-router.html",
    "title": "React JS App: router",
    "section": "",
    "text": "📘 router Create React App doesn’t include page routing. React Router is the most popular solution. It allows you to define routes for different parts of your application and to programmatically navigate between them.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: router"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-router.html#overview",
    "href": "reactjs/reactjs-app-router.html#overview",
    "title": "React JS App: router",
    "section": "",
    "text": "📘 router Create React App doesn’t include page routing. React Router is the most popular solution. It allows you to define routes for different parts of your application and to programmatically navigate between them.",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: router"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-router.html#install",
    "href": "reactjs/reactjs-app-router.html#install",
    "title": "React JS App: router",
    "section": "2 Install",
    "text": "2 Install\n\n\nreactrouter.sh\n\nnpm i -D react-router-dom",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: router"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-router.html#folder-tree",
    "href": "reactjs/reactjs-app-router.html#folder-tree",
    "title": "React JS App: router",
    "section": "3 Folder tree",
    "text": "3 Folder tree\nTo create an application with multiple page routes, let’s first start with the file structure.\nWithin the src folder, we’ll create a folder named pages with several files:\n\n\nreactrouter.sh\n\nsrc\\pages\\:\n└── src\\pages\\\n    └── Layout.js\n        Home.js\n        Blogs.js\n        Contact.js\n        NoPage.js\n\n\n\nindex.js\n\nimport ReactDOM from \"react-dom/client\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Layout from \"./pages/Layout\";\nimport Home from \"./pages/Home\";\nimport Blogs from \"./pages/Blogs\";\nimport Contact from \"./pages/Contact\";\nimport NoPage from \"./pages/NoPage\";\n\nexport default function App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n          &lt;Route index element={&lt;Home /&gt;} /&gt;\n          &lt;Route path=\"blogs\" element={&lt;Blogs /&gt;} /&gt;\n          &lt;Route path=\"contact\" element={&lt;Contact /&gt;} /&gt;\n          &lt;Route path=\"*\" element={&lt;NoPage /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(&lt;App /&gt;);\n\n\n\n\n\n\nUse React Router to route to pages based on URL: index.js:\n\n\nThe Layout component has &lt;Outlet&gt; and &lt;Link&gt; elements. The &lt;Outlet&gt; renders the current route selected. &lt;Link&gt; is used to set the URL and keep track of browsing history.\nAnytime we link to an internal path, we will use &lt;Link&gt; instead of &lt;a href=\"\"&gt;. The layout route is a shared component that inserts common content on all pages, such as a navigation menu.\n\n\nLayout.js\n\nimport { Outlet, Link } from \"react-router-dom\";\n\nconst Layout = () =&gt; {\n  return (\n    &lt;&gt;\n      &lt;nav&gt;\n        &lt;ul&gt;\n          &lt;li&gt;\n            &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n            &lt;Link to=\"/blogs\"&gt;Blogs&lt;/Link&gt;\n          &lt;/li&gt;\n          &lt;li&gt;\n            &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n          &lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/nav&gt;\n\n      &lt;Outlet /&gt;\n    &lt;/&gt;\n  )\n};\n\nexport default Layout;\n\n\n\nHome.js\n\nconst Home = () =&gt; {\n  return &lt;h1&gt;Home&lt;/h1&gt;;\n};\n\nexport default Home;\n\n\n\nBlog.js\n\nconst Blogs = () =&gt; {\n  return &lt;h1&gt;Blog Articles&lt;/h1&gt;;\n};\n\nexport default Blogs;\n\n\n\nContact.js\n\nconst Contact = () =&gt; {\n  return &lt;h1&gt;Contact Me&lt;/h1&gt;;\n};\n\nexport default Contact;\n\n\n\nNoPagejs\n\nconst NoPage = () =&gt; {\n  return &lt;h1&gt;404&lt;/h1&gt;;\n};\n\nexport default NoPage;",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: router"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-variables.html",
    "href": "reactjs/reactjs-js-variables.html",
    "title": "JavaScript: variables",
    "section": "",
    "text": "📘 JavaScript: variables\nVariables are containers for storing data, JavaScript Variables can be declared in 4 ways:\n\nAutomatically\nUsing var\nUsing let\nUsing const\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe var keyword was used in all JavaScript code from 1995 to 2015.\nThe let and const keywords were added to JavaScript in 2015.\nThe var keyword should only be used in code written for older browsers.\n\n\n\n\n1 Var\nBefore the advent of ES6, var declarations ruled, var declarations are:\n\nglobally scoped or\nfunction/locally scoped.\n\n\n\nWhat is ES6? ES6 stands for ECMAScript 6: ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015\nThe scope is:\n\nglobal when a var variable is declared outside a function. This means that any variable that is declared with var outside a function block is available for use in the whole window.\nvar is function scoped when it is declared within a function. This means that it is available and can be accessed only within that function.\n\n\n\nApp.js\n\n  var greeter = \"hey hi\";\n    \n    function newFunction() {\n        var hello = \"hello\";\n    }\n\nHere, greeter is globally scoped because it exists outside a function while hello is function scoped. So we cannot access the variable hello outside of a function. So if we do this:\n\n\nApp.js\n\n    var tester = \"hey hi\";\n    \n    function newFunction() {\n        var hello = \"hello\";\n    }\n    console.log(hello); // error: hello is not defined\n\nWe’ll get an error which is as a result of hello not being available outside the function.\n\n\nIt is considered good programming practice to always declare variables before use.\n\n\n2 Let\nlet is now preferred for variable declaration. It’s no surprise as it comes as an improvement to var declarations. It also solves the problems with var.\n\n\n\n\n\n\nlet is block scoped\n\n\n\nA block is a chunk of code bounded by {}. A block lives in curly braces. Anything within curly braces is a block.\nSo a variable declared in a block with let is only available for use within that block, let can be updated but not re-declared.\n\n\n\n\nApp.js\n\n  let greeting = \"say Hi\";\n   let times = 4;\n\n   if (times &gt; 3) {\n        let hello = \"say Hello instead\";\n        console.log(hello);// \"say Hello instead\"\n    }\n   console.log(hello) // hello is not defined\n\nWe see that using hello outside its block (the curly braces where it was defined) returns an error. This is because let variables are block scoped.\n\n\n3 const\nVariables declared with the const maintain constant values. const declarations share some similarities with let declarations.\n\n\n\n\n Back to top",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: variables"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html",
    "href": "reactjs/reactjs-js-basics.html",
    "title": "JavaScript: basics",
    "section": "",
    "text": "📘 JavaScript — Dynamic client-side scripting\nJavaScript is a cross-platform, object-oriented scripting language used to make webpages interactive (e.g., having complex animations, clickable buttons, popup menus, etc.).\nThere are also more advanced server side versions of JavaScript such as Node.js, which allow you to add more functionality to a website than downloading files (such as realtime collaboration between multiple computers).\nJavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language elements such as operators, control structures, and statements.\nCore JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:\n\nClient-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.\nServer-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html#javascript-running-order",
    "href": "reactjs/reactjs-js-basics.html#javascript-running-order",
    "title": "JavaScript: basics",
    "section": "1.1 JavaScript running order",
    "text": "1.1 JavaScript running order\nWhen the browser encounters a block of JavaScript, it generally runs it in order, from top to bottom. This means that you need to be careful what order you put things in. For example, let’s return to the block of JavaScript we saw in our first example:\n\n\nApp.js\n\nconst button = document.querySelector(\"button\");\n\nbutton.addEventListener(\"click\", updateName);\n\nfunction updateName() {\n  const name = prompt(\"Enter a new name\");\n  button.textContent = `Player 1: ${name}`;\n}",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html#interpreted-versus-compiled-code",
    "href": "reactjs/reactjs-js-basics.html#interpreted-versus-compiled-code",
    "title": "JavaScript: basics",
    "section": "1.2 Interpreted versus compiled code",
    "text": "1.2 Interpreted versus compiled code\nYou might hear the terms interpreted and compiled in the context of programming.\n\nIn interpreted languages, the code is run from top to bottom and the result of running the code is immediately returned. You don’t have to transform the code into a different form before the browser runs it.\n\nThe code is received in its programmer-friendly text form and processed directly from that.\n\nCompiled languages on the other hand are transformed (compiled) into another form before they are run by the computer.\n\nFor example, C/C++ are compiled into machine code that is then run by the computer. The program is executed from a binary format, which was generated from the original program source code.\n\n\nJavaScript is a lightweight interpreted programming language. The web browser receives the JavaScript code in its original text form and runs the script from that.\n\n\n\n\n\n\nNote\n\n\n\nJS just-in-time compiling From a technical standpoint, most modern JavaScript interpreters actually use a technique called just-in-time compiling to improve performance; the JavaScript source code gets compiled into a faster, binary format while the script is being used, so that it can be run as quickly as possible. However, JavaScript is still considered an interpreted language, since the compilation is handled at run time, rather than ahead of time.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html#server-side-versus-client-side-code",
    "href": "reactjs/reactjs-js-basics.html#server-side-versus-client-side-code",
    "title": "JavaScript: basics",
    "section": "1.3 Server-side versus client-side code",
    "text": "1.3 Server-side versus client-side code\nYou might also hear the terms server-side and client-side code, especially in the context of web development.\n\nClient-side code is code that is run on the user’s computer — when a web page is viewed, the page’s client-side code is downloaded, then run and displayed by the browser.\n\nIn this section we are explicitly talking about client-side JavaScript.\n\nServer-side code on the other hand is run on the server, then its results are downloaded and displayed in the browser.\n\nExamples of popular server-side web languages include PHP, Python, Ruby, ASP.NET, and even JavaScript! JavaScript can also be used as a server-side language, for example in the popular Node.js environment — you can find out more about server-side JavaScript in our Dynamic Websites – Server-side programming topic.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html#dynamic-versus-static-code",
    "href": "reactjs/reactjs-js-basics.html#dynamic-versus-static-code",
    "title": "JavaScript: basics",
    "section": "1.4 Dynamic versus static code",
    "text": "1.4 Dynamic versus static code\nThe word dynamic is used to describe both client-side JavaScript, and server-side languages — it refers to the ability to update the display of a web page/app to show different things in different circumstances, generating new content as required.\nServer-side code dynamically generates new content on the server, e.g. pulling data from a database, whereas client-side JavaScript dynamically generates new content inside the browser on the client,\n\n\ne.g. creating a new HTML table, filling it with data requested from the server, then displaying the table in a web page shown to the user.\n\nThe meaning is slightly different in the two contexts, but related, and both approaches (server-side and client-side) usually work together",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html#javascript-and-java",
    "href": "reactjs/reactjs-js-basics.html#javascript-and-java",
    "title": "JavaScript: basics",
    "section": "1.5 JavaScript and Java",
    "text": "1.5 JavaScript and Java\nJavaScript and Java are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java’s static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.\n\n\nIn contrast to Java’s compile-time system of classes built by declarations, JavaScript supports a runtime system based on a small number of data types representing numeric, Boolean, and string values.\n\nJavaScript has a prototype-based object model instead of the more common class-based object model.\nThe prototype-based model provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports functions without any special declarative requirements. Functions can be properties of objects, executing as loosely typed methods.\n\nJavaScript is a very free-form language compared to Java:\n\nYou do not have to declare all variables, classes, and methods.\nYou do not have to be concerned with whether methods are public, private, or protected, and\nyou do not have to implement interfaces\nVariables, parameters, and function return types are not explicitly typed.\n\n\n\n\n\n\n\n\nJavaScript\nJava\n\n\n\n\nObject-oriented. No distinction between types of objects. Inheritance is through the prototype mechanism, and properties and methods can be added to any object dynamically.\nClass-based. Objects are divided into classes and instances with all inheritance through the class hierarchy. Classes and instances cannot have properties or methods added dynamically.\n\n\nVariable data types are not declared (dynamic typing, loosely typed).\nVariable data types must be declared (static typing, strongly typed).\n\n\nCannot automatically write to hard disk.\nCan automatically write to hard disk.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html#variables",
    "href": "reactjs/reactjs-js-basics.html#variables",
    "title": "JavaScript: basics",
    "section": "2.1 Variables",
    "text": "2.1 Variables\nVariables are containers that store values. You start by declaring a variable with the let keyword, followed by the name you give to the variable:\n\n\nApp.js\n\nlet myVariable;\n\n\n\nA semicolon at the end of a line indicates where a statement ends.\nIt is only required when you need to separate statements on a single line. However, some people believe it’s good practice to have semicolons at the end of each statement.\nThere are other rules for when you should and shouldn’t use semicolons.\nFor more details, see Your Guide to Semicolons in JavaScript.\n\n\n\n\n\n\nImportant\n\n\n\nJavaScript is case sensitive.\nThis means myVariable is not the same as myvariable. If you have problems in your code, check the case!\n\n\nNote that variables may hold values that have different data types:\n\n\n\n\n\n\n\n\nVariable\nExplanation\nExample\n\n\n\n\nString\nThis is a sequence of text known as a string. To signify that the value is a string, enclose it in single or double quote marks.\nlet myVariable = ‘Bob’; or let myVariable = “Bob”;\n\n\nNumber\nThis is a number. Numbers don’t have quotes around them.\nlet myVariable = 10;\n\n\nBoolean\nThis is a True/False value. The words true and false are special keywords that don’t need quote marks.\nlet myVariable = true;\n\n\nArray\nThis is a structure that allows you to store multiple values in a single reference.\nlet myVariable = [1,‘Bob’,‘Steve’,10]; Refer to each member of the array like this: myVariable[0], myVariable[1], etc.\n\n\nObject\nThis can be anything. Everything in JavaScript is an object and can be stored in a variable. Keep this in mind as you learn.\nlet myVariable = document.querySelector(‘h1’); All of the above examples too.",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html#comments",
    "href": "reactjs/reactjs-js-basics.html#comments",
    "title": "JavaScript: basics",
    "section": "2.2 Comments",
    "text": "2.2 Comments\nComments are snippets of text that can be added along with code. The browser ignores text marked as comments. You can write comments in JavaScript just as you can in CSS:\n\n\nApp.js\n\n/*\nEverything in between is a comment.\n*/\n\nIf your comment contains no line breaks, it’s an option to put it behind two slashes like this:\n\n\nApp.js\n\n// This is a comment",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-js-basics.html#operators",
    "href": "reactjs/reactjs-js-basics.html#operators",
    "title": "JavaScript: basics",
    "section": "2.3 Operators",
    "text": "2.3 Operators\nAn operator is a mathematical symbol that produces a result based on two values (or variables). In the following table, you can see some of the simplest operators, along with some examples to try in the JavaScript console.\n\n\nOperators JS\n\n\n\n\n\n\n\n\nOperator\nExplanation\nSymbol(s)\nExample\n\n\n\n\nAddition\nAdd two numbers together or combine two strings.\n+\n6 + 9;  ‘Hello’ + ‘world!’;\n\n\nSubtraction, Multiplication, Division\nThese do what you’d expect them to do in basic math.\n-, *, /\n9 - 3;8 * 2; // multiply in JS is an asterisk  9 / 3;\n\n\nAssignment\nAs you’ve seen already: this assigns a value to a variable.\n=\nlet myVariable = ‘Bob’;\n\n\nStrict equality\nThis performs a test to see if two values are equal and of the same data type. It returns a true/false (Boolean) result.\n===\nlet myVariable = 3; myVariable === 4;\n\n\nNot, Does-not-equal\nThis returns the logically opposite value of what it precedes. It turns a true into a false, etc.. When it is used alongside the Equality operator, the negation operator tests whether two values are not equal.\n!, !==\nFor “Not”, the basic expression is true, but the comparison returns false because we negate it:  let myVariable = 3; !(myVariable === 3);   “Does-not-equal” gives basically the same result with different syntax. Here we are testing “is myVariable NOT equal to 3”. This returns false because myVariable IS equal to 3:  let myVariable = 3; myVariable !== 3;",
    "crumbs": [
      "JavaScript: web scripting",
      "JavaScript: basics"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-rules.html",
    "href": "reactjs/reactjs-hook-rules.html",
    "title": "React JS: Rules of Hooks",
    "section": "",
    "text": "📘 Rules of Hooks\nHooks are a new addition in React 16.8. They let you use state and other React features without writing a class.\nReference: Rules of Hooks",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: Rules of Hooks"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-rules.html#overview",
    "href": "reactjs/reactjs-hook-rules.html#overview",
    "title": "React JS: Rules of Hooks",
    "section": "1 Overview",
    "text": "1 Overview\nHooks are JavaScript functions, but you need to follow two rules when using them. We provide a linter plugin to enforce these rules automatically:\n\n1.1 Rule #1: Only Call Hooks at the Top Level\n\nDon’t call Hooks inside loops, conditions, or nested functions.\n\nInstead, always use Hooks at the top level of your React function, before any early returns.\nBy following this rule, you ensure that Hooks are called in the same order each time a component renders.\nThat’s what allows React to correctly preserve the state of Hooks between multiple useState and useEffect calls.\n\n\n1.2 Rule #2: Only Call Hooks from React Functions\n\nDon’t call Hooks from regular JavaScript functions. Instead, you can:\n\n\nCall Hooks from React function components.\nCall Hooks from custom Hooks (we’ll learn about them on the next page).",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: Rules of Hooks"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-rules.html#eslint-plugin",
    "href": "reactjs/reactjs-hook-rules.html#eslint-plugin",
    "title": "React JS: Rules of Hooks",
    "section": "2 ESLint Plugin",
    "text": "2 ESLint Plugin\nReact team released an ESLint plugin called eslint-plugin-react-hooks that enforces these two rules. You can add this plugin to your project if you’d like to try it:\nThis plugin is included by default in Create React App.\nnpm install eslint-plugin-react-hooks --save-dev\n// Your ESLint configuration\n{\n  \"plugins\": [\n    // ...\n    \"react-hooks\"\n  ],\n  \"rules\": {\n    // ...\n    \"react-hooks/rules-of-hooks\": \"error\", // Checks rules of Hooks\n    \"react-hooks/exhaustive-deps\": \"warn\" // Checks effect dependencies\n  }\n}",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: Rules of Hooks"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-rules.html#cheatsheet-by-_georgemoller",
    "href": "reactjs/reactjs-hook-rules.html#cheatsheet-by-_georgemoller",
    "title": "React JS: Rules of Hooks",
    "section": "3 Cheatsheet by @_georgemoller",
    "text": "3 Cheatsheet by @_georgemoller\n\n\n\nHooks: useState, useReducer, useContext\n\n\n\n\n\nHooks: useEffect, useLayoutEffect\n\n\n\n\n\nHooks: useInsertionEffect, useSyncExternalStore\n\n\n\n\n\nHooks: useCallback, useMemo\n\n\n\n\n\nHooks: useRef, useImperativeHandle\n\n\n\n\n\nHooks: useId, useDebugValue\n\n\n\n\n\nHooks: useEvents, useDeferredValue, useTransition",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: Rules of Hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html",
    "href": "reactjs/rjslab7-1.html",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "",
    "text": "📘 React JS Lab#RE07-1: Traffic Lights Simulation\nIn this lab, we’ll delve into building a traffic lights simulation using React.js. Here’s an overview of what we’ll cover:\n\nProject Setup: We’ll kick off by creating a new React project using Vite, a modern build tool.\n\nWith Vite’s fast build times, we’ll set up our project environment swiftly.\n\nCSS Inline Styling: Instead of separate CSS files, we’ll utilize inline styling for our components.\n\nThis approach keeps our styling concise and localized within each component.\n\nJSX Components: We’ll dive into JSX, a syntax extension for JavaScript often used with React. JSX allows us to write HTML-like code within JavaScript, making it seamless to create UI components.\nBusiness Logic Management with Hooks, Literal Objects & timout:\n\nWe’ll leverage literal objects for organized state management.\nWe’ll manage our form state using React hooks like (these hooks empower us to handle stateful logic effectively within functional components):\n\nuseState,\nuseMemo,\nuseContext,\nand useEffect\n\nTimeouts for Simulation Logic: We’ll incorporate timeouts to control the simulation flow.\n\nTimeouts allow us to delay certain actions, such as changing traffic light colors or updating pedestrian movements, adding an interactive and dynamic element to our traffic lights simulation.\n\n\nForm Management: We’ll dive into forms to manage user data\n\nAxios: we will use axios to persist our data at fake-server mockapi\n\n\nBy the end of this lab, you’ll have gained hands-on experience in React.js development, mastering essential concepts like state management, JSX rendering, component styling, and integrating timeouts for simulation logic. This project serves as an engaging introduction to building dynamic web applications with React.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#scripts-and-tools",
    "href": "reactjs/rjslab7-1.html#scripts-and-tools",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "1.1 Scripts and tools",
    "text": "1.1 Scripts and tools\nReact.dev scripts\n\n\nImplement a traffic light\n\nHere is a crosswalk light component that toggles when the button is pressed:\n\nImplement a traffic light\ncodesandbox walking\n\n\n\n\nFix a request counter\n\nYou’re working on an art marketplace app that lets the user submit multiple orders for an art item at the same time. Each time the user presses the “Buy” button, the “Pending” counter should increase by one. After three seconds, the “Pending” counter should decrease, and the “Completed” counter should increase.\n\nHowever, the “Pending” counter does not behave as intended. When you press “Buy”, it decreases to -1 (which should not be possible!). And if you click fast twice, both counters seem to behave unpredictably.\n\nWhy does this happen? Fix both counters.\n\nImplement a traffic light\ncodesandbox marketplace\n\n\n\n\nTreat state as read-only\n\nIn other words, you should treat any JavaScript object that you put into state as read-only.\nThis example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:\n\nTreat state as read-only\ncodesandbox red-point\n\n\n\n\nCopying objects with the spread syntax\n\nIn the previous example, the position object is always created fresh from the current cursor position. But often, you will want to include existing data as a part of the new object you’re creating. For example, you may want to update only one field in a form, but keep the previous values for all other fields.\nThese input fields don’t work because the onChange handlers mutate the state:\n\nCopying objects with the spread syntax\ncodesandbox form\n\n\n\n\nUpdating Arrays in State\n\nArrays are mutable in JavaScript, but you should treat them as immutable when you store them in state. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array.\n\nUpdating Arrays in State\ncodesandbox sculptors\n\n\nInitial SPA projects codesandbox\n\nBasic business logic: trafficlights SPA 1.0.1\nAxios and Api Rest: trafficlights SPA 1.2.1\nuseContext to decouple axios from render: trafficlights SPA 1.3.0\nimplement CRUD delete operation with axios & useContext: trafficlights SPA 1.4.0\nimplement CRUD create/update operations with axios & useContext: trafficlights SPA 1.4.1\nimplement CRUD close button edit & API_URL: trafficlights SPA 1.4.2\n\n\n\n\n\n\nuseContext in trafficlights SPA 1.3.0",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#vite",
    "href": "reactjs/rjslab7-1.html#vite",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "2.1 Vite",
    "text": "2.1 Vite\n\nNext Generation Frontend Tooling: Get ready for a development environment that can finally catch up with you.\n\n\nVite\nGetting Started | Vite\n\n\n\nbash.sh\n\n$ node -v\n\nTo create a new Vite project, open your terminal and run the following command:\n\n\nbash.sh\n\n$ npm create vite@latest &lt;my-project&gt;\n\nSelect React framework:\n\n\nbash.sh\n\n✔ Project name: … vite-project\n? Select a framework: \n› - Use arrow-keys. Return to submit.\n    Vanilla\n    Vue\n❯   React\n    Preact\n    Lit\n    Svelte\n\nAnd js:\n\n\nbash.sh\n\n? Select a variant: \n› - Use arrow-keys. Return to submit.\n❯   JavaScript\n    TypeScript\n\nOutput:\n\n\n\nbash.sh\n\nScaffolding project in /Users/carlosazaustre/dev/vite-project...\n\nDone. Now run:\n\n  cd vite-project\n  npm install\n  npm run dev\n\n\nExposing port\nnpm run dev –host network: not exposed\n\n\npackage.json\n\n \"scripts\": {\n    \"dev\": \"vite --host --port 8888\",\n   .....  what ever else was here.....\n  },\n\nShortcuts\n\n\npackage.json\n\n \"scripts\": {\n    \"dev\": \"vite --host --port 8888\",\n   .....  what ever else was here.....\n  },",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#react-functions-components",
    "href": "reactjs/rjslab7-1.html#react-functions-components",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.1 React functions & components",
    "text": "4.1 React functions & components\n\n\nindex.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = \nReactDOM.createRoot(\n          document.getElementById('root'));\nroot.render(&lt;App /&gt;);",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#core-business-logic-use-case",
    "href": "reactjs/rjslab7-1.html#core-business-logic-use-case",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.2 Core Business logic & use case",
    "text": "4.2 Core Business logic & use case\nThis first iteration defines a React functional component called RequestTracker, which simulates a traffic light and tracks pedestrian crossings.\nIt uses the useState hook to manage four state variables:\n\npending (number of pedestrians waiting),\nwalking (number of pedestrians crossing),\ncompleted (number of completed crossings),\nand light (status of the traffic light).\n\n\n\nThe UI displays the current counts of pending, walking, and completed pedestrians, and the color of the text changes based on the status of the traffic light. The button’s color also changes to reflect the traffic light’s color.\nWhen the user clicks the “Traffic Light” button, the handleTrafficLightClick function is triggered. It decrements pending, increments walking, and sets the light to green. After a delay of 5 seconds, it decrements walking, increments completed, and sets the light to red.\nThe code uses the &lt;&gt; (fragment) syntax to group multiple elements without introducing an additional parent node.\n\n\n\nApp.jsx\n\nimport { useState } from \"react\";\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(100);\n  const [walking, setWalking] = useState(0);\n  const [completed, setCompleted] = useState(0);\n  const [light, setLight] = useState(false);\n\n  /*\n  useEffect(() =&gt; {\n    console.log(\"pending effect:\", pending);\n  }, [pending]);\n  */\n\n  function handleTrafficLightClick() {\n    //console.log(\"before\", pending);\n    setPending((p) =&gt; p - 10);\n    //console.log(\"after\", pending);\n    setWalking((w) =&gt; w + 10);\n    setLight(true); // Set light to green when walking starts\n    setTimeout(() =&gt; {\n      setWalking((w) =&gt; w - 10);\n      setCompleted((c) =&gt; c + 10);\n      setLight(false); // Set light to red when walking is completed\n    }, 5000); // Delay for 3000 milliseconds (5 seconds)\n  }\n\n  return (\n    &lt;&gt;\n      &lt;h3 style={{ color: light ? \"grey\" : \"white\" }}&gt; \n        Pending: {pending} &lt;/h3&gt;\n      &lt;h3 style={{ color: light ? \"white\" : \"grey\" }}&gt;\n        Walking: {walking} {light ? \" . . . . .\" : \"\"}\n      &lt;/h3&gt;\n      &lt;h3 style={{ color: light ? \"green\" : \"grey\" }}&gt;\n        Completed: {completed}\n      &lt;/h3&gt;\n      &lt;button\n        onClick={handleTrafficLightClick}\n        style={{\n          backgroundColor: light ? \"green\" : \"red\",\n          padding: \"10px 24px\",\n          borderRadius: \"8px\",\n          border: \"none\",\n          color: \"white\",\n          fontSize: \"20px\",\n        }}\n      &gt;\n        Taffic Light\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#adding-graphics-improving-business-logic",
    "href": "reactjs/rjslab7-1.html#adding-graphics-improving-business-logic",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.3 Adding graphics & improving business logic",
    "text": "4.3 Adding graphics & improving business logic\nuse case: pedestrians crossing a traffic light\n\nReact component called TrafficLightSimulation: It simulates a pedestrian crossing at a traffic light.\n\n\n\nThe code provides an interactive simulation of a traffic light pedestrian crossing using React.\nThe component initializes with a random number of people waiting to cross (peopleToWalk) and a random number of people allowed to cross in each group (groupWalking).\nWhen the traffic light is clicked, it turns green, and pedestrians start crossing in groups according to the groupWalking limit.\nThe component visually represents pending pedestrians, walking pedestrians, and completed crossings. When all pedestrians have crossed, a “Play Again” button appears to refresh the page and start the simulation again./\nThe useMemo hook ensures that the initial values for peopleToWalk and groupWalking remain constant throughout the component’s lifecycle.\nThe useState hook manages the state of the crossing simulation.\n\ntrafficlights: graphics\nApp.jsx\nuseMemo\nuseState\n\n\n\n\nApp.jsx with graphics\n\n\n\nApp.jsx\n\n\nimport { useState, useMemo } from \"react\";\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor() {\n  const colors = \n        [\"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\"];\n  return colors[getRandomInt(0, colors.length - 1)];\n}\n\nfunction refreshPage() {\n  window.location.reload(false);\n}\n\nexport default function TrafficLightSimulation() {\n  \n  // total people to walk, to cross  the traffic lights\n  const initPeopleToWalk = \n        useMemo(() =&gt; getRandomInt(10, 20), []);\n        // Initialize peopleToWalk with a \n        //random value that remains constant\n  const peopleToWalk = \n        useMemo(() =&gt; initPeopleToWalk, []); \n        // peopleToWalk does not change along all the execution\n  \n  // people will cross by gropus, the value is random each time\n  // each time traffic ights are green the group\n  // will cross one by one to complete the lights cycle\n  const initGroupWalking = getRandomInt(2, 6);\n\n  const [crossing, setCrossing] = useState({\n    pending: peopleToWalk,\n    walking: 0,\n    completed: 0,\n    groupWalking: initGroupWalking,\n    light: false,\n  });\n\n  function handleTrafficLightClick() {\n    setCrossing((prevState) =&gt; ({\n      ...prevState,\n      light: true,\n    }));\n\n    let walked = 0;\n    let maxToWalk = 0;\n    const walkingInterval = setInterval(() =&gt; {\n      const { pending, groupWalking } = crossing;\n      if (groupWalking &gt;= pending) maxToWalk = pending;\n      else maxToWalk = groupWalking;\n\n      if (walked &lt; maxToWalk) {\n        setCrossing((prevState) =&gt; ({\n          ...prevState,\n          walking: prevState.walking + 1,\n          pending: prevState.pending - 1,\n        }));\n        walked++;\n      } else {\n        clearInterval(walkingInterval);\n        setCrossing((prevState) =&gt; ({\n          ...prevState,\n          completed: prevState.completed + walked,\n          walking: 0,\n          light: false,\n          groupWalking: initGroupWalking,\n        }));\n      }\n    }, 1000);\n  }\n\n  const { pending, walking, completed, groupWalking, light } = crossing;\n\n  return (\n    &lt;&gt;\n      &lt;div style={{ textAlign: \"center\" }}&gt;\n        &lt;h1&gt;Traffic Light Crossing Simulation&lt;/h1&gt;\n        &lt;h4&gt;Help pedestrians cross the street safely!&lt;/h4&gt;{\" \"}\n        &lt;div className=\"chip\"&gt;\n         {peopleToWalk} people want to cross the pedestrian/zebra crossing\n         &lt;/div&gt;&lt;p&gt;&lt;/p&gt;\n        {completed === peopleToWalk ? (\n          &lt;button\n            onClick={refreshPage}\n            style={{\n              backgroundColor: \"black\",\n              padding: \"10px 24px\",\n              borderRadius: \"8px\",\n              border: \"none\",\n              color: \"white\",\n              fontSize: \"20px\",\n              marginBottom: \"20px\",\n            }}\n          &gt;\n            Play Again (refresh page)\n          &lt;/button&gt;\n        ) : (\n          &lt;&gt;\n            &lt;button\n              onClick={handleTrafficLightClick}\n              style={{\n                backgroundColor: light ? \"green\" : \"red\",\n                padding: \"10px 24px\",\n                borderRadius: \"8px\",\n                border: \"none\",\n                color: \"white\",\n                fontSize: \"20px\",\n                marginBottom: \"20px\",\n              }}\n            &gt;\n              Traffic Light\n            &lt;/button&gt;\n\n            &lt;div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"center\",\n              }}\n            &gt;\n              &lt;h3&gt;Group walking: {groupWalking} &lt;/h3&gt;\n              {Array.from({ length: groupWalking }).map((_, index) =&gt; (\n                &lt;div\n                  key={index}\n                  style={{\n                    backgroundColor: \"blue\",\n                    width: \"10px\",\n                    height: \"10px\",\n                    margin: \"2px\",\n                  }}\n                /&gt;\n              ))}\n            &lt;/div&gt;\n          &lt;/&gt;\n        )}\n        &lt;div style={{ display: \"flex\", justifyContent: \"space-between\" }}&gt;\n          &lt;div&gt;\n            &lt;h3&gt;Pending: {pending}&lt;/h3&gt;\n            {Array.from({ length: pending }).map((_, index) =&gt; (\n              &lt;div\n                key={index}\n                style={{\n                  backgroundColor: getRandomColor(),\n                  width: \"10px\",\n                  height: \"10px\",\n                  margin: \"2px\",\n                }}\n              /&gt;\n            ))}\n          &lt;/div&gt;\n          &lt;div&gt;\n            &lt;h3&gt;Walking: {walking}&lt;/h3&gt;\n            {Array.from({ length: walking }).map((_, index) =&gt; (\n              &lt;div\n                key={index}\n                style={{\n                  backgroundColor: \"blue\",\n                  width: \"10px\",\n                  height: \"10px\",\n                  margin: \"2px\",\n                }}\n              /&gt;\n            ))}\n          &lt;/div&gt;\n          &lt;div&gt;\n            &lt;h3&gt;Completed: {completed}&lt;/h3&gt;\n            {Array.from({ length: completed }).map((_, index) =&gt; (\n              &lt;div\n                key={index}\n                style={{\n                  backgroundColor: \"green\",\n                  width: \"10px\",\n                  height: \"10px\",\n                  margin: \"2px\",\n                }}\n              /&gt;\n            ))}\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\nConsolidation and merge: literal object\n\n\n\nConsolidation and merge: literal object\n\n\n\nThe operation of consolidating multiple state variables into a single object using the useState hook and the spread operator can be referred to as state consolidation or state merging.\n\nHere’s a breakdown:\n\nState Consolidation: This term emphasizes the process of bringing together multiple individual state variables into a single, cohesive object. It highlights the idea of simplifying state management by grouping related pieces of state.\nState Merging: This term underscores the use of the spread operator (…) to merge the previous state with the updated state when setting the state. It emphasizes the technique used to update multiple properties of the state object simultaneously.\n\ncode: setInterval\nThe handleTrafficLightClick function sets up an interval using setInterval, which repeatedly executes a specified function (() =&gt; { ... }) with a fixed time delay between each execution.\nIn this case, the function inside setInterval acts as a loop with a delay.\n\n\n\nsetInterval acts as a loop with a delay\n\n\nHere’s how it works:\n\nWhen handleTrafficLightClick is called, it sets the light property of the crossing state to true using setCrossing.\nIt then initializes variables walked and maxToWalk to keep track of the number of pedestrians walking and the maximum number of pedestrians allowed to walk, respectively.\nInside the interval function, it calculates maxToWalk based on the number of pending pedestrians and the maximum number of pedestrians allowed to walk simultaneously (groupWalking).\nIf the number of walked pedestrians is less than maxToWalk, it increments the walking property by 1 and decrements the pending property by 1 in the state using setCrossing. It then increments the walked counter.\nIf the maximum number of pedestrians have walked (walked &gt;= maxToWalk), it clears the interval using clearInterval(walkingInterval) to stop the loop. It then updates the state with the number of completed pedestrians (completed), resets the walking counter to 0, sets the light property back to false, and resets the groupWalking property to its initial value using setCrossing.\nThe interval function repeats this process every 1000 milliseconds (1 second) until it is stopped by calling clearInterval.\n\nThis loop effectively controls the flow of pedestrians crossing the street, incrementally allowing them to walk within the specified time intervals until the maximum number of pedestrians have crossed, at which point it resets the state and ends the loop.\ncode: prevState\nprevState is used as an argument in the functional update form of the setCrossing function, which is part of React’s useState hook.\n\nThis functional form allows you to access the previous state of the component’s state variable (in this case, crossing) and perform updates based on that previous state.\n\n\n\n\nApp.jsx with graphics\n\n\n\nApp.jsx\n\n\n// functions ...\n\nexport default function TrafficLightSimulation() {\n  \n// code ...\n\n  const [crossing, setCrossing] = useState({\n    pending: peopleToWalk,\n    walking: 0,\n    completed: 0,\n    groupWalking: initGroupWalking,\n    light: false,\n  });\n\n  function handleTrafficLightClick() {\n    setCrossing((prevState) =&gt; ({\n      ...prevState,\n      light: true,\n    }));\n\n    let walked = 0;\n    let maxToWalk = 0;\n    const walkingInterval = setInterval(() =&gt; {\n      const { pending, groupWalking } = crossing;\n      if (groupWalking &gt;= pending) maxToWalk = pending;\n      else maxToWalk = groupWalking;\n\n      if (walked &lt; maxToWalk) {\n        setCrossing((prevState) =&gt; ({\n          ...prevState,\n          walking: prevState.walking + 1,\n          pending: prevState.pending - 1,\n        }));\n        walked++;\n      } else {\n        clearInterval(walkingInterval);\n        setCrossing((prevState) =&gt; ({\n          ...prevState,\n          completed: prevState.completed + walked,\n          walking: 0,\n          light: false,\n          groupWalking: initGroupWalking,\n        }));\n      }\n    }, 1000);\n  }\n\n  return (\n    &lt;&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\nprevState to access updated state\n\n\n\nWhen updating the state using setCrossing, the code utilizes the functional form (prevState) =&gt; { ... }.\n\nThis function receives the previous state (prevState) as an argument and returns the new state based on that previous state.\n\nInside the function, the spread operator (...prevState) is used to create a shallow copy of the previous state object.\n\nThis ensures that you are not mutating the original state directly, which is important for maintaining the immutability of React state.\n\nThe properties of the state object are then modified according to the logic defined in the function.\n\nIn the first part of the code block, walking is incremented by 1 and pending is decremented by 1.\nIn the second part of the code block (the else block), various properties of the state object are updated based on some condition.\n\nprevState is not a reserved word in React; rather, it’s a variable name used conventionally to refer to the previous state in functional updates when using the useState hook.\n\nIt’s a common practice in React to use prevState as the parameter name in functional updates, but it’s not enforced by React itself.\nYou could technically use any valid variable name in its place, but using prevState makes the code more readable and understandable for other developers who are familiar with React conventions.\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy using prevState in this manner, the code ensures that the state updates are based on the previous state, rather than relying on the current state directly. This is important because React’s state updates may be asynchronous, and accessing the previous state via the functional form ensures that the updates are based on the most recent state at the time the update is applied.\n\n\n\n\n\nrender v0.1 render(1)",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#adding-domains-react-router-dom",
    "href": "reactjs/rjslab7-1.html#adding-domains-react-router-dom",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.4 Adding domains: react-router-dom",
    "text": "4.4 Adding domains: react-router-dom\n\nreact-router-dom\nDDD with Lab#RE06-1\n\nRemember to install the dependency:\nnpm instal react-router-dom\n\n\n\nApp.jsx with Routes\n\n\n\nApp.jsx\n\n\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Layout from \"./layout/Layout\";\nimport MySimulations from \"./mysimulatons/MySimulations\";\nimport Simulation from \"./simulation/Simulation\";\n\nexport default function App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n          &lt;Route index element={&lt;Simulation /&gt;} /&gt;\n          &lt;Route path=\"simulation\" element={&lt;Simulation /&gt;} /&gt;\n          &lt;Route path=\"mysimulations\" element={&lt;MySimulations /&gt;} /&gt;\n          &lt;Route path=\"*\" element={&lt;Simulation /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n\n\n\nFolder Layout\n\n\n\nLayout.jsx with Layout\n\n\n\n/layout/Layout.jsx\n\n\nimport Footer from './Footer.jsx'\nimport Header from \"./Header.jsx\";\nimport { Outlet, Link } from \"react-router-dom\";\n\nexport default function Layout () {\n\n  return (\n    &lt;&gt;\n      &lt;nav&gt;\n        &lt;div&gt;\n          &lt;Header /&gt;\n        &lt;/div&gt;\n        &lt;div &gt;\n          &lt;Link to=\"/simulation\"&gt;Simulation&lt;/Link&gt;\n          &lt;br/&gt;\n          &lt;Link to=\"/mysimulations\"&gt;MySimulations&lt;/Link&gt;\n          &lt;br /&gt;\n          &lt;br /&gt;\n        &lt;/div&gt;\n      &lt;/nav&gt;\n\n      &lt;div style={{ width: \"80%\" }}&gt;\n        &lt;Outlet /&gt;\n      &lt;/div&gt;\n\n      &lt;div&gt;\n        &lt;Footer /&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#data-simulation",
    "href": "reactjs/rjslab7-1.html#data-simulation",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.5 Data: simulation",
    "text": "4.5 Data: simulation\nIn React.js, unlike in Java or Spring Boot, there isn’t a built-in model framework.\nHowever, for our purposes, we can define our model using a literal object in JavaScript. Here’s an example of how we can define a model in React.js:\n\n\nMyApp.jsx\n\n\n// ....\nconst simulation = { \n    id: \"\",\n    createdAt: new Date().toString(),\n    time: 0,\n    user: \"\"\n}\n// ...\n\nIn this code snippet, we’ve created a simulation object which represents our model.\nIt has properties such as id, user, createdAt, and time. This object can serve as a model for organizing and manipulating data within our React.js application.\n\n\n\nWe will also need a fake-server-data to store simulation object",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#fetching-data-fake-server",
    "href": "reactjs/rjslab7-1.html#fetching-data-fake-server",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.6 Fetching data: fake server",
    "text": "4.6 Fetching data: fake server\nReferences:\n\nLab#RE01-1\nLab#RE03-3\nuseContext\n\nmockapi\n\n\n\n\n\n\nCaution\n\n\n\nThere’s a vast array of free web services available that offer APIs for developers to use in their projects.\nThese services, like mockapi.io or jsonplaceholder.typicode.com, provide developers with simulated data or temporary endpoints to test their applications without the need to set up their own backend servers or databases.\nFor instance, in our lab, you’re using mockapi.io with a real endpoint to test our applicationrk\nThis allows to mimic real-world scenarios and interactions without having to invest in creating a backend infrastructure from scratch.\nHowever, it’s important to note that these services typically offer temporary solutions for testing purposes. Once our testing phase is complete and our application is ready for production, relying on such external services might not be feasible or reliable in the long term.\nFor instance, in our lab, we’re using mockapi.io with a real endpoint to test our application.\nTherefore, the URL provided by mockapi.io will be discontinued after the testing phase, and you’ll need to transition to a more stable and permanent solution for your application’s backend like using Spring Boot Server.\n\n\n\nMockAPI.io is a web service that allows developers to create and simulate RESTful APIs for testing and development purposes.\n\n\n\n\nmockapi creating scheme-model\n\n\nWith MockAPI.io, developers can easily generate custom API endpoints and define the responses they want to receive when those endpoints are called. It provides a user-friendly interface to create, manage, and configure mock APIs, making it simple to simulate different scenarios and test how an application interacts with an API.\nMockAPI.io supports various HTTP methods, request headers, query parameters, and response types, allowing developers to mimic real API behavior. It’s a valuable tool for rapid prototyping, integration testing, and mocking data during development.\nAxios\n\nAxios is a JavaScript library used for making HTTP requests in React applications.\n\nIt provides an easy-to-use and consistent API for performing asynchronous operations, such as fetching data from an API.\n\n\n\nAxios example Request Config\n\n\nAxios supports features like interceptors, automatic request/response transformation, and error handling. It works both in the browser and Node.js environments and offers support for various request methods (GET, POST, PUT, DELETE, etc.).\nAxios simplifies the process of making HTTP requests by providing a higher-level abstraction and allowing developers to handle responses and errors more efficiently\nuseEffect\n\nuseEffect\ncancelCall code github\n\nIn React, the useEffect hook is used to perform side effects in function components. \nThis includes data fetching, subscriptions, or manually changing the DOM. When dealing with API calls using Axios, it’s essential to handle cleanup to prevent memory leaks and unexpected behavior. Below is a clear function demonstrating how to cancel an Axios API call using the useEffect hook:\n\n\n\nDataSimulation.jsx CRUD Axios\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst DataSimulation = () =&gt; {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() =&gt; {\n    const source = axios.CancelToken.source();\n\n    const fetchData = async () =&gt; {\n      try {\n        const response = await axios.get('https://api.example.com/data', {\n          cancelToken: source.token,\n        });\n        setData(response.data);\n      } catch (error) {\n        if (axios.isCancel(error)) {\n          console.log('Request canceled:', error.message);\n        } else {\n          setError(error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      source.cancel('Component unmounted - Cancelling API request');\n    };\n  }, []); // Empty dependency array means this effect will only run once\n\n  return (\n    &lt;div&gt;\n      {data && &lt;p&gt;Data: {data}&lt;/p&gt;}\n      {error && &lt;p&gt;Error: {error.message}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n};\n\nexport default DataSimulation;\n\n\ndata component: axios & useContext\n\n\n\nDataSimulation.jsx CRUD Axios\n\n\n\nDataSimulation.js\n\n\nimport React, { useState, useEffect, createContext } from \"react\";\nimport axios from \"axios\";\n\nconst SimulationsContext = createContext();\nconst API_URL = \"https://65e82ef64bb72f0a9c4e7caf.mockapi.io/v1/todo\";\n\nconst DataSimulations = ({ children }) =&gt; {\n  const [simulations, setSimulations] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    const fetchSimulations = async () =&gt; {\n      try {\n        const response = await axios.get(\n          \"https://65e82ef64bb72f0a9c4e7caf.mockapi.io/v1/todo\"\n        );\n        setSimulations(response.data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchSimulations();\n  }, []);\n\n  const deleteSimulation = async (id) =&gt; {\n    try {\n      const response = await axios.delete(\n        `https://65e82ef64bb72f0a9c4e7caf.mockapi.io/v1/todo/${id}`\n      );\n      setSimulations(simulations.filter((simulation) =&gt; simulation.id !== id));\n    } catch (error) {\n      console.error(\"Error deleting simulation:\", error);\n    }\n  };\n\n  const addSimulation = async (simulation) =&gt; {\n    try {\n      const response = await axios.post(\n        \"https://65e82ef64bb72f0a9c4e7caf.mockapi.io/v1/todo\",\n        simulation\n      );\n      setSimulations([...simulations, response.data]);\n    } catch (error) {\n      console.error(\"Error adding simulation:\", error);\n    }\n  };\n\n  const updateSimulation = async (simulation) =&gt; {\n    try {\n      const response = await axios.put(\n        `https://65e82ef64bb72f0a9c4e7caf.mockapi.io/v1/todo/${simulation.id}`,\n        simulation\n      );\n      setSimulations(\n        simulations.map((s) =&gt; (s.id === simulation.id ? response.data : s))\n      );\n    } catch (error) {\n      console.error(\"Error updating simulation:\", error);\n    }\n  };\n\n  return (\n    &lt;SimulationsContext.Provider\n      value={{\n        simulations,\n        isLoading,\n        deleteSimulation,\n        addSimulation,\n        updateSimulation,\n      }}\n    &gt;\n      {children}\n    &lt;/SimulationsContext.Provider&gt;\n  );\n};\n\nexport { DataSimulations, SimulationsContext };\n\n\n\n\n\nThis code sets up a context provider component for managing simulation data and provides functions for CRUD operations on that data. Other components in the React application can consume this context to access and manipulate simulation data.\n\n\n\nThe code DataSimulations manages simulation data\n\n\nThe code DataSimulations manages simulation data.\nIt utilizes React hooks such as useState and useEffect for state management and side effects. Additionally, it creates a context named SimulationsContext to provide simulation data and related functions to its child components. Here’s a breakdown of what the code does:\n\nImport Statements:\n\nIt imports necessary modules from React and Axios.\n\nContext Creation:\n\nIt creates a context named SimulationsContext using createContext() from React.\n\nDataSimulations Component:\n\nThis is the main component that handles simulation data.\nIt initializes state variables using the useState hook: simulations to hold simulation data and isLoading to track whether data is loading.\nIt uses the useEffect hook to fetch simulation data from a mock API endpoint when the component mounts.\nInside useEffect, it defines an asynchronous function fetchSimulations() to make a GET request to the API endpoint and update the state accordingly.\nIt defines functions to perform CRUD operations on simulation data:\n\ndeleteSimulation: Deletes a simulation by its ID.\naddSimulation: Adds a new simulation.\nupdateSimulation: Updates an existing simulation.\n\nIt returns a JSX element wrapping its children with SimulationsContext.Provider, providing simulation data and related functions as context values.\n\nExport:\n\nIt exports DataSimulations component and SimulationsContext context.\nBe careful: do not use default. A file can only have one default export, but it can have numerous named exports!\n\n\n\n\n\n\n\n\nCaution\n\n\n\nExporting and importing multiple components from the same file\n\nExporting and importing a component.\n\nTo reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. Do what works best for you!",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#rendering-data-mysimulations",
    "href": "reactjs/rjslab7-1.html#rendering-data-mysimulations",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.7 Rendering data: MySimulations",
    "text": "4.7 Rendering data: MySimulations\ntotally coupled MySimulations.jsx\nWe should create a draft version to test the imported data from mockapi fake server by API Rest axios.\nThis draft will place all CRUD operations in just one component, business logic and render:\n\nimporting Axios functions via useContext from DataSimulation\nimporting data: simulationsvia useContext\ncreating the handlers for the CRUD operations.\ncreating the hoooks we wil need to manage state.\ncreating the JSX code to render the html elements\n\nThen, we will decouple it into several components with a better organized structure.\n\n\n\nMySimulations.jsx just one component to render simulations\n\n\n\nMySimulations.jsx\n\nimport React, { useContext, useState } from \"react\";\nimport { SimulationsContext } from \"../middleware/DataSimulations\";\n\nconst MySimulations = () =&gt; {\n  const {\n    simulations,\n    isLoading,\n    deleteSimulation,\n    addSimulation,\n    updateSimulation,\n  } = useContext(SimulationsContext);\n\n  const [newSimulationData, setNewSimulationData] = useState({\n    user: \"\",\n    createdAt: new Date().toString(),\n    time: \"\",\n  });\n  const [editingSimulationId, setEditingSimulationId] = useState(null);\n  const [editingSimulationData, setEditingSimulationData] = useState({\n    user: \"\",\n    createdAt: new Date().toString(),\n    time: 0,\n  });\n\n  // ...\n  // Create simulation\n  // ...\n\n  // Add new simulation onClick with newSimulationData state\n  // using addSimulation function with axios request\n  // and reset input fields after creating the simulation\n  const handleCreate = () =&gt; {\n    // Assuming newSimulationData contains the data for the new simulation\n    addSimulation(newSimulationData);\n    // Reset input fields after creating the simulation\n    setNewSimulationData({\n      user: \"\",\n      createdAt: new Date().toString(),\n      time: \"\",\n    });\n  };\n\n  // Handle changes in input fields for adding new simulation\n  // using setNewSimulationData state\n  const handleAddChange = (e) =&gt; {\n    // Get the name and value of the input field\n    const { name, value } = e.target;\n    // Update the newSimulationData state\n    setNewSimulationData((prevData) =&gt; ({\n      // Spread the previous data\n      ...prevData,\n      // Set the value of the input field to the new value\n      [name]: value,\n    }));\n  };\n\n  // ...\n  // Edit simulation\n  // ...\n\n  // Edit simulation onClick with editingSimulationId state\n  // using updateSimulation function with axios request\n  // and reset editing state after editing the simulation\n  const handleUpdate = () =&gt; {\n    // Update the simulation with the new data\n    updateSimulation(editingSimulationData);\n    // Reset editing state\n    setEditingSimulationId(null);\n    // Reset editing data\n    setEditingSimulationData({\n      user: \"\",\n      createdAt: new Date().toString(),\n      time: \"\",\n    });\n  };\n\n  // Handle starting edit of a simulation onClick edit button\n  // with editingSimulationId state equal to the id of the simulation\n  // being edited and setEditingSimulationData state\n  // with the current data of the simulation being edited\n  const handleEditSelectId = (id) =&gt; {\n    // Find the simulation being edited\n    const simulationToEdit = simulations.find(\n      (simulation) =&gt; simulation.id === id\n    );\n    // Set the ID of the simulation being edited\n    setEditingSimulationId(id);\n    // Populate the editing data with the current data of the simulation\n    setEditingSimulationData(simulationToEdit);\n  };\n\n  // Handle changes in input fields for editing simulation\n  // using setEditingSimulationData state\n  const handleEditChange = (e) =&gt; {\n    const { name, value } = e.target;\n    setEditingSimulationData((prevData) =&gt; ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  return (\n    &lt;&gt;\n      &lt;br /&gt;\n      &lt;h1&gt;Simulations&lt;/h1&gt;\n      &lt;hr /&gt;\n      &lt;h2&gt;Add Simulation&lt;/h2&gt;\n      &lt;div&gt;\n        &lt;label&gt;User&lt;/label&gt;\n        &lt;br /&gt;\n        &lt;input\n          className=\"simulationInput\"\n          type=\"text\"\n          name=\"user\"\n          value={newSimulationData.user}\n          onChange={handleAddChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;Time&lt;/label&gt;\n        &lt;br /&gt;\n        &lt;input\n          className=\"simulationInput\"\n          type=\"text\"\n          name=\"time\"\n          value={newSimulationData.time}\n          onChange={handleAddChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;button\n        className=\"crudButton\"\n        style={{\n          backgroundColor: \"#ff5733\",\n        }}\n        onClick={handleCreate}\n      &gt;\n        Create\n      &lt;/button&gt;\n      &lt;br /&gt;\n      &lt;br /&gt;\n      &lt;hr /&gt;\n      &lt;h2&gt;Simulations list&lt;/h2&gt;\n      {isLoading ? (\n        &lt;p&gt;Loading...&lt;/p&gt;\n      ) : (\n        &lt;&gt;\n          &lt;ul style={{ listStyleType: \"none\" }}&gt;\n            {simulations.map((simulation) =&gt; (\n              &lt;li key={simulation.key}&gt;\n                &lt;strong&gt;User:&lt;/strong&gt; {simulation.user} &lt;br /&gt;\n                id: {simulation.id} &lt;br /&gt;\n                Created: {simulation.createdAt} &lt;br /&gt;\n                Time: {simulation.time} &lt;br /&gt;\n                &lt;br /&gt;\n                {editingSimulationId === simulation.id ? (\n                  &lt;&gt;\n                    &lt;div&gt;\n                      &lt;label&gt;User&lt;/label&gt;\n                      &lt;br /&gt;\n                      &lt;input\n                        className=\"simulationInput\"\n                        type=\"text\"\n                        name=\"user\"\n                        value={editingSimulationData.user}\n                        onChange={handleEditChange}\n                      /&gt;\n                    &lt;/div&gt;\n\n                    &lt;div&gt;\n                      &lt;label&gt;Time&lt;/label&gt;\n                      &lt;br /&gt;\n                      &lt;input\n                        className=\"simulationInput\"\n                        type=\"text\"\n                        name=\"time\"\n                        value={editingSimulationData.time}\n                        onChange={handleEditChange}\n                      /&gt;\n                    &lt;/div&gt;\n                    &lt;button\n                      style={{\n                        backgroundColor: \"#ff5733\",\n                      }}\n                      className=\"crudButton\"\n                      onClick={handleUpdate}\n                    &gt;\n                      Save\n                    &lt;/button&gt;\n                    &lt;button\n                      style={{\n                        backgroundColor: \"black\",\n                      }}\n                      className=\"crudButton\"\n                      onClick={() =&gt; setEditingSimulationId(null)}\n                    &gt;\n                      Close\n                    &lt;/button&gt;\n                  &lt;/&gt;\n                ) : (\n                  &lt;&gt;\n                    &lt;button\n                      className=\"crudButton\"\n                      style={{\n                        backgroundColor: \"black\",\n                      }}\n                      onClick={() =&gt; deleteSimulation(simulation.id)}\n                    &gt;\n                      Delete\n                    &lt;/button&gt;\n                    &lt;button\n                      className=\"crudButton\"\n                      style={{\n                        backgroundColor: \"#8A9A5B\",\n                      }}\n                      onClick={() =&gt; handleEditSelectId(simulation.id)}\n                    &gt;\n                      Edit\n                    &lt;/button&gt;\n                  &lt;/&gt;\n                )}\n                &lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;\n              &lt;/li&gt;\n            ))}\n          &lt;/ul&gt;\n        &lt;/&gt;\n      )}\n    &lt;/&gt;\n  );\n};\n\nexport default MySimulations;\n\n\n\nsemi-coupled MySimulations.jsx CRUD\nBreaking down the React component into smaller, focused components enhances code readability and maintainability.\n\n\nDecoupling the code into smaller React components represents a halfway point in separating concerns, laying a foundation for a cleaner and more manageable codebase. This approach not only improves developer productivity but also enhances the overall quality and stability of the application.\nBy creating separate components for tasks like simulation creation and listing, the code becomes more modular and easier to understand. This modular approach allows for better organization and reuse of code, promoting scalability and reducing duplication.\nMoreover, decoupling rendering from business logic aligns with best practices, improving code maintainability over time.\nEach component can focus on a specific aspect of functionality, making it easier to debug and update. Additionally, smaller components are more flexible and adaptable, enabling easier integration of new features or modifications.\n\nmySimulations folder\n\n\n\n\nMySimulations.jsx rendering data. It is just the render decoupled, not the business logic\n\n\n\nMySimulations.jsx\n\nimport { useContext, useState } from \"react\";\nimport { SimulationsContext } from \"../middleware/DataSimulations\";\nimport ListSimulations from \"./ListSimulation\"\nimport CreateSimulation from \"./CreateSimulation\"\n\n\n\nconst MySimulations = () =&gt; {\n  const {\n    simulations,\n    isLoading,\n    deleteSimulation,\n    addSimulation,\n    updateSimulation,\n  } = useContext(SimulationsContext);\n\n  const [newSimulationData, setNewSimulationData] = useState({\n    user: \"\",\n    createdAt: new Date().toString(),\n    time: \"\",\n  });\n  const [editingSimulationId, setEditingSimulationId] = useState(null);\n  const [editingSimulationData, setEditingSimulationData] = useState({\n    user: \"\",\n    createdAt: new Date().toString(),\n    time: 0,\n  });\n\n  const handleCreate = () =&gt; {\n    addSimulation(newSimulationData);\n    setNewSimulationData({\n      user: \"\",\n      createdAt: new Date().toString(),\n      time: \"\",\n    });\n  };\n\n  const handleAddChange = (e) =&gt; {\n    const { name, value } = e.target;\n    setNewSimulationData((prevData) =&gt; ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const handleUpdate = () =&gt; {\n    updateSimulation(editingSimulationData);\n    setEditingSimulationId(null);\n    setEditingSimulationData({\n      user: \"\",\n      createdAt: new Date().toString(),\n      time: \"\",\n    });\n  };\n\n  const handleEditSelectId = (id) =&gt; {\n    const simulationToEdit = simulations.find(\n      (simulation) =&gt; simulation.id === id\n    );\n    setEditingSimulationId(id);\n    setEditingSimulationData(simulationToEdit);\n  };\n\n  const handleEditChange = (e) =&gt; {\n    const { name, value } = e.target;\n    setEditingSimulationData((prevData) =&gt; ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  return (\n    &lt;&gt;\n      &lt;br /&gt;\n      &lt;h1 style={{ textAlign: \"center\" }}&gt;Simulations&lt;/h1&gt;\n      &lt;hr /&gt;\n      &lt;CreateSimulation\n        newSimulationData={newSimulationData}\n        handleAddChange={handleAddChange}\n        handleCreate={handleCreate}\n      /&gt;\n      &lt;br /&gt;\n      &lt;hr /&gt;\n      &lt;ListSimulations\n        simulations={simulations}\n        isLoading={isLoading}\n        handleEditSelectId={handleEditSelectId}\n        deleteSimulation={deleteSimulation}\n        handleEditChange={handleEditChange}\n        handleUpdate={handleUpdate}\n        setEditingSimulationId={setEditingSimulationId}\n        editingSimulationId={editingSimulationId}\n        editingSimulationData={editingSimulationData}\n      /&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default MySimulations;\n\n\n\ntotaly decoupled MySimulations.jsx CRUD\n\nmySiulations folder\n\n\n\nDecoupled components CRUD in React promotes modularity, reusability, maintainability, and scalability, making it a preferred choice for building robust and adaptable applications.\n\n\n\ncomponent tree project\n\n\nDecoupled components CRUD in React offers significant advantages over tightly coupled implementations.\nBy breaking down functionality into modular components, developers can achieve: greater reusability, scalability, better maintenance and flexibility.\nEach component focuses on a specific task, promoting separation of concerns and simplifying maintenance. With decoupled components, testing becomes more straightforward as each unit can be isolated and tested independently.\nAdditionally, performance optimizations can be applied at the component level, leading to better overall application performance. This approach fosters cleaner codebases and facilitates collaboration among team members.\n\n\n\ncomponent tree decoupled",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#backend-spring-boot",
    "href": "reactjs/rjslab7-1.html#backend-spring-boot",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.8 Backend: Spring Boot",
    "text": "4.8 Backend: Spring Boot\n\nsimulations Spring Boot: wiki",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/rjslab7-1.html#adding-user-login-fake-token",
    "href": "reactjs/rjslab7-1.html#adding-user-login-fake-token",
    "title": "Lab#RE07-1: traffic lights simulation",
    "section": "4.9 Adding user: login & fake-token",
    "text": "4.9 Adding user: login & fake-token\nto-do",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE07-1: traffic lights simulation"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html",
    "href": "reactjs/reactjs-what-principles.html",
    "title": "React JS: Introduction",
    "section": "",
    "text": "React logo",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Introduction"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#introduction",
    "href": "reactjs/reactjs-what-principles.html#introduction",
    "title": "React JS: Introduction",
    "section": "1.1 Introduction",
    "text": "1.1 Introduction\n\n📘 React JS\nReact.js is a JavaScript library used for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React allows developers to create large web applications that use data which can change over time, without reloading the page.\nIt aims to provide a more efficient and elegant way to manipulate the user interface in order to create a more intuitive and smooth user experience.\n\n\n\n“Life is really simple, but we insist on making it complicated.” -Confucius\n\n\nWhy did we build React??\nWe built React to solve one problem: building large applications with data that changes over time.\nSimple and fast, very fast.\nThat it is.\nAnd it is inmutable\n\n\n\n\nReact Code is simple\n\n\n\nMyApp.jsx\n\n\nfunction MyButton() {\n  return (\n    &lt;button&gt;\n      I'm a button\n    &lt;/button&gt;\n  );\n}\n\nexport default function MyApp() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Welcome to my app&lt;/h1&gt;\n      &lt;MyButton /&gt;\n    &lt;/div&gt;\n  );\n}\n\n\nReact is not considered a framework, but a JavaScript library for building User Interfaces. It’s considered the view in the MVC pattern.\nIt helps create modular web components that look just like HTML, thanks to JSX. JSX is a JavaScript syntax extension built by Facebook to define a concise and familiar syntax for creating tree structures with attributes.\n\n\n\n“As in a Russian doll, however, the outer layers always contain an inner core.” -Frans de Waal",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Introduction"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#overview",
    "href": "reactjs/reactjs-what-principles.html#overview",
    "title": "React JS: Introduction",
    "section": "1.2 Overview",
    "text": "1.2 Overview\nSome of the main features of React.js include:\n\nIt is a single-page application (SPA) framework, which means it allows developers to create web applications that load a single HTML page and dynamically update the page in response to user actions without reloading the page. This makes React applications faster and more responsive than traditional web applications.\nComponents: In React, everything is a component. Components are small, reusable pieces of code that can be easily combined to create complex user interfaces.\nVirtual DOM: React uses a virtual DOM (Document Object Model) to improve the performance of components. The virtual DOM is a lightweight in-memory representation of the actual DOM, and it allows React to update only the specific components that have changed, instead of re-rendering the entire page.\nJSX: React uses JSX, which is a syntax extension to JavaScript that allows developers to write HTML-like code that can be compiled into JavaScript. This allows developers to use familiar HTML tags and attributes to build React components, making it easier to write and understand React code.\nState: React components have a built-in state object that stores the local data of a component. The state of a component can be updated in response to user actions or other events, and the updated state will automatically be reflected in the user interface.\nProps: In React, components can receive data from their parent components through props, which are essentially input parameters that allow components to be customized and reused. Props can be used to pass data, functions, or any other type of information to a child component.\nRouting: React Router is a popular library that provides routing capabilities to React applications. It allows developers to define the different routes of the application, and to map each route to a specific component. This makes it possible to create a single-page application with multiple pages and views, without reloading the page.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Introduction"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#key-concept-hooks",
    "href": "reactjs/reactjs-what-principles.html#key-concept-hooks",
    "title": "React JS: Introduction",
    "section": "1.3 Key-concept: Hooks",
    "text": "1.3 Key-concept: Hooks\nIn React, Hooks are a new feature introduced in React 16.8 that allows developers to use state and other React features without writing a class. They are designed to make it easier to reuse stateful logic between components, and to better manage side effects in function components.\n\n\n\n\n\n\nImportant\n\n\n\n📘 Clear lifecycle\nHooks allow developers to use state and other React features by writing functions, rather than creating class-based components. This makes it possible to use state and other React features without the overhead of managing a class and its lifecycle.\n\n\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\n\nFor example, instead of using a class to define a component, you can use the useState Hook to add state to a function component:\nIn this example, the useState Hook is used to add state to the Example component. The useState function returns a pair of values: the current state, and a function that can be used to update the state. The current state is stored in the count variable, and the function to update the state is stored in the setCount variable.\nHooks are a powerful and flexible tool that can help simplify and improve the way you write React components. They allow you to use state and other React features without the overhead of class-based components, and they make it easier to reuse stateful logic between components.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Introduction"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#with-jsx-and-hooks-comes-order-in-just-one-document",
    "href": "reactjs/reactjs-what-principles.html#with-jsx-and-hooks-comes-order-in-just-one-document",
    "title": "React JS: Introduction",
    "section": "1.4 With JSX and Hooks comes order in just one document",
    "text": "1.4 With JSX and Hooks comes order in just one document\n\n\n\n\n\n\nImportant\n\n\n\n📘 No need of classes\nHooks are a new feature (and addition in React 16.8) that allows developers to use state and other React features without writing a class.\n\n\n\n📘 Hooks and JSX\nThey are a powerful tool for simplifying and improving the way you write React components, and they can be used to combine the HTML, CSS, business logic, model, and navigation code of a component into a single, cohesive unit.\n\n\nHere is an example of a React component that uses Hooks to combine HTML, CSS, business logic, and navigation code in a single file:\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nfunction ExampleComponent(props) {\n  const { data } = props;\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div className=\"example-component\"&gt;\n      &lt;h1&gt;Example Component&lt;/h1&gt;\n      &lt;p&gt;{data.description}&lt;/p&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n      &lt;Link to=\"/\"&gt;Back to Home&lt;/Link&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ExampleComponent;\n\n\nIn this example, the useState Hook is used to add state to the ExampleComponent function. The useState function returns a pair of values: the current state, and a function that can be used to update the state.\nThe current state is stored in the count variable, and the function to update the state is stored in the setCount variable.\nThese variables are used in the JSX code of the component to render the current state and to update the state in response to user actions. This allows the different types of code to be combined into a single, cohesive unit using Hooks.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Introduction"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#history",
    "href": "reactjs/reactjs-what-principles.html#history",
    "title": "React JS: Introduction",
    "section": "1.5 History",
    "text": "1.5 History\n\nReact.JS was first used in 2011 for Facebook’s Newsfeed feature.\nFacebook Software Engineer, Jordan Walke, created it.\nInitial Release to the Public (V0.3.0) was in July 2013.\nCurrent version of React.JS is V18.2.0 (2023).\nCurrent version of create-react-app link is v5.0.1 (2022).\ncreate-react-app includes built tools such as webpack, Babel, and ESLint: link\nIf you’re learning React or creating a new single-page app, use Create React App.\nIf you’re building a server-rendered website with Node.js, try Next.js.\nIf you’re building a static content-oriented website, try Gatsby.\nIf you’re building a component library or integrating with an existing codebase, try More Flexible Toolchains.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Introduction"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-principles.html#quick-start",
    "href": "reactjs/reactjs-what-principles.html#quick-start",
    "title": "React JS: Introduction",
    "section": "1.6 Quick Start",
    "text": "1.6 Quick Start\n\nOverview - Creating and nesting components - Writing markup with JSX - Adding styles - Displaying data - Conditional rendering Rendering lists - Responding to events - Updating the screen - Using Hooks - Sharing data between components - Next Steps\n\nThis page will give you an introduction to the 80% of React concepts that you will use on a daily basis.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: Introduction"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-props.html",
    "href": "reactjs/reactjs-what-props.html",
    "title": "React JS: props and state",
    "section": "",
    "text": "📘 Props\nReact components use props (props stands for properties) to communicate with each other.\nEvery parent component can pass some information to its child components by giving them props.\nProps might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.\nIn React JS, data flows in one direction, from Parent to Child. This helps components to be simple and predictable.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: props and state"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#overview",
    "href": "reactjs/reactjs-what-props.html#overview",
    "title": "React JS: props and state",
    "section": "1 Overview",
    "text": "1 Overview\nIn React.js, “props” (short for “properties”) are used to pass data from one component to another. Props are passed as an object (which is similar to a JSON object) and contain key-value pairs of data:\n\nJSON is a lightweight data interchange format that is easy to read and write for both humans and machines.\nprops is a reserved keyword that refers to an object containing all the properties (or props) passed to a component.\n\nFor example, let’s say we have a component called MyComponent that receives an object named person as a prop. This person object might look like this:\nconst person = {\n  name: 'John',\n  age: 30,\n  address: {\n    street: '123 Main St',\n    city: 'Anytown',\n    state: 'CA',\n    zip: '12345'\n  }\n};\nIn this case, the person object contains some key-value pairs and another object. We can then pass this person object as a prop to our MyComponent component like this:\n&lt;MyComponent person={person} /&gt;\nInside MyComponent, we can access the person prop using the props object like this:\nfunction MyComponent(props) {\n  console.log(props.person.name); // 'John'\n  console.log(props.person.age); // 30\n  console.log(props.person.address.street); // '123 Main St'\n  // ...\n}\n\n1.1 Example1\nconst car = {\n  make: 'Toyota',\n  model: 'Corolla',\n  year: 2022,\n  color: 'blue'\n};\n\nconst person = {\n  name: 'John',\n  age: 30,\n  address: {\n    street: '123 Main St',\n    city: 'Anytown',\n    state: 'CA',\n    zip: '12345'\n  }\n};\n\n&lt;MyComponent person={person} car={car} /&gt;\n\nfunction MyComponent(props) {\n  console.log(props.person.name); // 'John'\n  console.log(props.person.age); // 30\n  console.log(props.person.address.street); // '123 Main St'\n\n  console.log(props.car.make); // 'Toyota'\n  console.log(props.car.model); // 'Corolla'\n  console.log(props.car.year); // 2022\n  console.log(props.car.color); // 'blue'\n  // ...\n}\n\n\n1.2 Example2\nUse the same syntax as HTML attributes to send props into a component:\n\n\nprofile.jsx\n\nfunction Avatar({ person, size }) {\n  // person and size are available here\n}\n\n\n\nlin.jsx\n\nexport default function Lin() {\n  return (\n    &lt;Avatar\n      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n      size={100}\n    /&gt;\n  );\n}\n\n\n\ncarla.jsx\n\nexport default function Carla() {\n  return (\n    &lt;Avatar\n      person={{ name: 'Carla Lan', imageId: 'KIU3QH1' }}\n      size={60}\n    /&gt;\n  );\n}",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: props and state"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#pure-components",
    "href": "reactjs/reactjs-what-props.html#pure-components",
    "title": "React JS: props and state",
    "section": "2 Pure Components",
    "text": "2 Pure Components\n\n2.1 Stateful/Stateless Components\n\nSateful Components: Functions that internally modify the underlying data (props).\n\n\n\nprofile.jsx\n\nfunction Hello({ name }) {\n  //...\n  return (\n    &lt;&gt;\n     &lt;h1&gt;Hello {name + ' - ' + (new Date()).toLocaleString()}!!!&lt;/h1&gt;;\n    &lt;/&gt;\n  )\n}\n\nexport default function Hello() {\n  //...\n  return (\n   &lt;Hello name=\"World\" /&gt;\n  )\n}\n\n\nStateless Components: Pure components that respond to the underlying data received (props), without modifying it.\n\nA pure function is a function where the return value is only determined by its input values, without observable side effects.\n\n\nHello.jsx\n\nfunction Hello({ name }) {\n  //...\n  return (\n    &lt;&gt;\n     &lt;h1&gt;Hello {name}!!!&lt;/h1&gt;;\n    &lt;/&gt;\n  )\n}\n\nexport default function Hello() {\n  //...\n  return (\n   &lt;Hello name=\"World\" /&gt;\n  )\n}\n\n\n\n2.2 Keep Components Pure\n\n\n\n\n\n\nImportant\n\n\n\nWriting pure functions takes a bit of practice, but it unlocks the power of React’s paradigm\n\n\nBy strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. To get these benefits, though, there are a few rules you must follow.\n\nRendering can happen at any time, so components should not depend on each others’ rendering sequence.\nYou should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen, “set” state instead of mutating preexisting objects.\nStrive to express your component’s logic in the JSX you return. When you need to “change things”, you’ll usually want to do it in an event handler. As a last resort, you can useEffect.\n\nReact’s rendering process must always be pure. Components should only return their JSX, and not change any objects or variables that existed before rendering—that would make them impure!\nHere is a component that breaks this rule:\n\n\nHello.jsx\n\nlet guest = 0;\n\nfunction Cup() {\n  // Bad: changing a preexisting variable!\n  guest = guest + 1;\n  return &lt;h2&gt;Tea cup for guest #{guest}&lt;/h2&gt;;\n}\n\nexport default function TeaSet() {\n  return (\n    &lt;&gt;\n      &lt;Cup /&gt;\n      &lt;Cup /&gt;\n      &lt;Cup /&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\nrender\n\n\nDetecting impure calculations with StrictMode\n\n\n\n\n\n\nRendering must always be a pure calculation\n\n\n\n\nSame inputs, same output.\nIt minds its own business.\n\nOtherwise, you can encounter confusing bugs and unpredictable behavior as your codebase grows in complexity.\nWhen developing in Strict Mode, React calls each component’s function twice, which can help surface mistakes caused by impure functions.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: props and state"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#what-is-state-and-rendering-updaterender-cycle",
    "href": "reactjs/reactjs-what-props.html#what-is-state-and-rendering-updaterender-cycle",
    "title": "React JS: props and state",
    "section": "3 What is state and rendering: update/render cycle",
    "text": "3 What is state and rendering: update/render cycle\n\n\n\nReact render cycle: trigger-render-paint by @_georgemoller\n\n\nState variables might look like regular JavaScript variables that you can read and write to.\n\nHowever, state behaves more like a snapshot.\n\nSetting it does not change the state variable you already have, but instead triggers a re-render that will print a state variable copy with the new value.\n\n\n\n\n\n\nImportant\n\n\n\nState can hold any kind of JavaScript value, including objects.\nBut you shouldn’t change objects that you hold in the React state directly.\nInstead, when you want to update an object, you need to create a new one (or make a copy of an existing one), and then set the state to use that copy.\n\n\nHow it works in combination with spread opearator\nAnd what is a hook: useState\n\nTreat state as read-only: in other words, you should treat any JavaScript object that you put into state as read-only.\n\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; {\n        setNumber(number++);\n      }}&gt;+1&lt;/button&gt;\n\n      &lt;h1&gt;{number}&lt;/h1&gt;\n    &lt;/&gt;\n  )\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render: setting-update/render cycle\n\n\n\n\n\n\nNext render\n\n\n\n\n\n3.1 update/render behaviour\nAny screen update in a React app happens in three steps:\n\nTrigger\nRender\nPaint-Commit\n\n\n\nYou can use Strict Mode to find mistakes in your components React does not touch the DOM if the rendering result is the same as last time\nAfter rendering (calling) your components, React will modify the DOM.\n\nReact only changes the DOM nodes if there’s a difference between renders.\n\nFor example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the &lt;input&gt;, updating its value, but the text doesn’t disappear when the component re-renders:\nexport default function Clock({ time }) {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{time}&lt;/h1&gt;\n      &lt;input /&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\nrender",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: props and state"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#so-is-react-immutable",
    "href": "reactjs/reactjs-what-props.html#so-is-react-immutable",
    "title": "React JS: props and state",
    "section": "4 So, Is React immutable?",
    "text": "4 So, Is React immutable?\nThe term immutable refers to the idea that the state of a component should not be changed directly. Instead, when the state of a component needs to be updated, a new copy of the state should be created with the desired changes applied.\nThis approach to state management can help to ensure that the state of a React application is predictable and easy to understand, as it makes it clear how the state is changing over time.\nIt can also make it easier to debug issues in your application, as you can more easily trace the history of the state and see how it has changed.\n\n4.1 And then, what is a mutation?\nYou can store any kind of JavaScript value in state.\n\n\nHello.jsx\n\nconst [x, setX] = useState(0);\n\nSo far you’ve been working with numbers, strings, and booleans. These kinds of JavaScript values are immutable, meaning unchangeable or read-only. You can trigger a re-render to replace a value:\n\n\nHello.jsx\n\nsetX(5);\n\nThe x state changed from 0 to 5, but the number 0 itself did not change. It’s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.\nNow consider an object in state:\n\n\nHello.jsx\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nTechnically, it is possible to change the contents of the object itself. This is called a mutation:\n\n\nHello.jsx\n\nposition.x = 5;\n\nHowever, although objects in React state are technically mutable, you should treat them as if they were immutable—like numbers, booleans, and strings. Instead of mutating them, you should always replace them.",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: props and state"
    ]
  },
  {
    "objectID": "reactjs/reactjs-what-props.html#examples",
    "href": "reactjs/reactjs-what-props.html#examples",
    "title": "React JS: props and state",
    "section": "5 Examples",
    "text": "5 Examples\n\n5.1 Example 1: setting state only changes it for the next render\nIn this example, you might expect that clicking the +3 button would increment the counter three times because it calls setNumber(number + 1) three times.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{number}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; {\n        setNumber(number + 1);\n        setNumber(number + 1);\n        setNumber(number + 1);\n      }}&gt;+3&lt;/button&gt;\n    &lt;/&gt;\n  )\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render\n\n\n\n\n\n\n3 Next render\n\n\n\n\n\n\n\n\n\n\nNumber is a state variable, not a regular variable\n\n\n\nSetting state only changes it for the next render. During the first render, number was 0.\nAnd this is like this because number is … a state.\nSo, during execution lines #10, #11 and #12, number value is …0!\n\n\nThis is why, in that render’s onClick handler, the value of number is still 0 even after setNumber(number + 1) was called .. three times!!!\n\n\n5.2 Example 2: State over time\nState over time, step by step how setting and render do not happen at same moment.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{number}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; {\n        setNumber(number + 5);\n        alert(number);\n      }}&gt;+5&lt;/button&gt;\n    &lt;/&gt;\n  )\n}\n\n\n\n\n\n\nInitial render, number state is 0\n\n\n\n\n\n\nsetting number state to 5, but first React will execute line #11, alert, and number state still is 0\n\n\n\n\n\n\nNext render, number state now is now 5\n\n\n\n\n\nAlert is helping us to understand why setting and render are two different moments\n\nSetting number state to 5, but first React will execute line #11, alert, and number state still is 0\n\n\n5.3 Example 3: email\nHere is an example of how that makes your event handlers less prone to timing mistakes. Below is a form that sends a message with a five-second delay. Imagine this scenario:\n\nYou press the Send button, sending Hello to Alice.\nBefore the five-second delay ends, you change the value of the To field to Bob.\n\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n  const [to, setTo] = useState('Alice');\n  const [message, setMessage] = useState('Hello');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setTimeout(() =&gt; {\n      alert(`You said ${message} to ${to}`);\n    }, 5000);\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;\n        To:{' '}\n        &lt;select\n          value={to}\n          onChange={e =&gt; setTo(e.target.value)}&gt;\n          &lt;option value=\"Alice\"&gt;Alice&lt;/option&gt;\n          &lt;option value=\"Bob\"&gt;Bob&lt;/option&gt;\n        &lt;/select&gt;\n      &lt;/label&gt;\n      &lt;textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={e =&gt; setMessage(e.target.value)}\n      /&gt;\n      &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render\n\n\n\nReact keeps the state values fixed within one render’s event handlers.\nYou don’t need to worry whether the state has changed while the code is running.\n\n\n5.4 Example 4: state updater function\nIt is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the next state value like setNumber(number + 1), you can pass a function that calculates the next state based on the previous one in the queue, like setNumber(n =&gt; n + 1).\nIt is a way to tell React to do something with the state value instead of just replacing it.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{number}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; {\n        setNumber(n =&gt; n + 1);\n        setNumber(n =&gt; n + 1);\n        setNumber(n =&gt; n + 1);\n      }}&gt;+3&lt;/button&gt;\n    &lt;/&gt;\n  )\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render",
    "crumbs": [
      "ReactJS: Principles",
      "React JS: props and state"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-data.html",
    "href": "reactjs/reactjs-es6-data.html",
    "title": "React JS ES6: array, data and key",
    "section": "",
    "text": "📘 Arrays and data in JS\nWe can use the JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: array, data and key"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-data.html#overview",
    "href": "reactjs/reactjs-es6-data.html#overview",
    "title": "React JS ES6: array, data and key",
    "section": "",
    "text": "📘 Arrays and data in JS\nWe can use the JavaScript array methods to manipulate an array of data. On this page, you’ll use filter() and map() with React to filter and transform your array of data into an array of components.",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: array, data and key"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-data.html#data-array",
    "href": "reactjs/reactjs-es6-data.html#data-array",
    "title": "React JS ES6: array, data and key",
    "section": "2 Data Array",
    "text": "2 Data Array\nHere’s a short example of how to generate a list of items from an array:\n\n\ndata.jsx\n\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n\nMap the people members into a new array of JSX nodes, listItems:\n\n\ndata.jsx\n\nconst listItems = people.map(person =&gt; &lt;li&gt;{person}&lt;/li&gt;);\n\nReturn listItems from your component wrapped in a &lt;ul&gt;:\n\n\ndata.jsx\n\nreturn &lt;ul&gt;{listItems}&lt;/ul&gt;;\n\n\n\ndata.jsx\n\nconst people = [\n  'Creola Katherine Johnson: mathematician',\n  'Mario José Molina-Pasquel Henríquez: chemist',\n  'Mohammad Abdus Salam: physicist',\n  'Percy Lavon Julian: chemist',\n  'Subrahmanyan Chandrasekhar: astrophysicist'\n];\n\nexport default function List() {\n  const listItems = people.map(person =&gt;\n    &lt;li&gt;{person}&lt;/li&gt;\n  );\n  return &lt;ul&gt;{listItems}&lt;/ul&gt;;\n}\n\n\n\n\n\n\nExecuting List(), here is the result:\n\n\n\n\n\n\nNotice the sandbox above displays a console error",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: array, data and key"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-data.html#filtering-and-structuring-data-with-key-id",
    "href": "reactjs/reactjs-es6-data.html#filtering-and-structuring-data-with-key-id",
    "title": "React JS ES6: array, data and key",
    "section": "3 Filtering and structuring data with key id",
    "text": "3 Filtering and structuring data with key id\nThis data can be structured even more as a JSON array with an Id:\n\n\ndata.jsx\n\nconst people = [{\n  id: 0,\n  name: 'Creola Katherine Johnson',\n  profession: 'mathematician',\n}, {\n  id: 1,\n  name: 'Mario José Molina-Pasquel Henríquez',\n  profession: 'chemist',\n}, {\n  id: 2,\n  name: 'Mohammad Abdus Salam',\n  profession: 'physicist',\n}, {\n  name: 'Percy Lavon Julian',\n  profession: 'chemist',  \n}, {\n  name: 'Subrahmanyan Chandrasekhar',\n  profession: 'astrophysicist',\n}];\n\nAnd now, let’s filter, map and return data:\n\n\ndata.jsx\n\n// Create a new array of just “chemist” people, chemists,\n// by calling filter() on the people\n// filtering by person.profession === 'chemist':\nconst chemists = people.filter(person =&gt;\n  person.profession === 'chemist'\n);\n\n// Now map over chemists:\nconst listItems = chemists.map(person =&gt; {\n  // JSX elements directly inside a map() call\n  // always need keys!\n  &lt;li key={person.id}&gt;\n     &lt;img\n       src={getImageUrl(person)}\n       alt={person.name}\n     /&gt;\n     &lt;p&gt;\n       &lt;b&gt;{person.name}:&lt;/b&gt;\n       {' ' + person.profession + ' '}\n       known for {person.accomplishment}\n     &lt;/p&gt;\n  &lt;/li&gt;\n\n  // Lastly, return the listItems from your component:\n  return &lt;ul&gt;{listItems}&lt;/ul&gt;;\n\n)};\n\n\n\n\n\n\nlet’s filter, map and return data\n\n\n\nKeys tell React which array item each component corresponds to, so that it can match them up later.\n\n\nThis becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\nMore on keys\nMore on arrays",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: array, data and key"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html",
    "href": "reactjs/reactjs-hook-reducer.html",
    "title": "React JS: useReducer",
    "section": "",
    "text": "📘 useReducer\nuseReducer is a React Hook that lets you add a reducer to your component.\nconst [state, dispatch] = useReducer(reducer, initialArg, init?)\nA reducer is a function that takes in the current state of an application and an action, and returns a new state. Reducers are often used in conjunction with a state management library like Redux, which helps manage the state of a React application.\nIn this example, the reducer function takes in a state object and an action object, and returns a new state based on the action type.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useReducer"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html#usereducerinit",
    "href": "reactjs/reactjs-hook-reducer.html#usereducerinit",
    "title": "React JS: useReducer",
    "section": "1 useReducer(init)",
    "text": "1 useReducer(init)\n\nuseReducer(reducer, initialArg, init?)\n\nCall useReducer at the top level of your component to manage its state with a reducer.\n\n\nApp.js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  // ...\n}\n\nfunction MyComponent() {\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n  // ...\n\n\n\n\n\n\nConsolidate state logic with a reducer: a reducer function is where you will put your state logic.\n\n\n\n1.1 Parameters\n\nreducer: The reducer function that specifies how the state gets updated. It must be pure, should take the state and action as arguments, and should return the next state. State and action can be of any types.\ninitialArg: The value from which the initial state is calculated. It can be a value of any type. How the initial state is calculated from it depends on the next init argument.\noptional init: The initializer function that specifies how the initial state is calculated. If it’s not specified, the initial state is set to initialArg. Otherwise, the initial state is set to the result of calling init(initialArg).",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useReducer"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html#dispatch-function",
    "href": "reactjs/reactjs-hook-reducer.html#dispatch-function",
    "title": "React JS: useReducer",
    "section": "2 dispatch function",
    "text": "2 dispatch function\nuseReducer returns an array with exactly two values:\n\nThe current state. During the first render, it’s set to init(initialArg) or initialArg (if there’s no init).\nThe dispatch function that lets you update the state to a different value and trigger a re-render.\n\nThe dispatch function returned by useReducer lets you update the state to a different value and trigger a re-render.\nYou need to pass the action as the only argument to the dispatch function:\n\n\nApp.js\n\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\nfunction handleClick() {\n  dispatch({ type: 'incremented_age' });\n  // ...\n\n\n\n\n\n\nuseReducer returns an array with exactly two values: the current state and the dispatch function\n\n\n\n\n\n\n\n\nWarning\n\n\n\ndispatch functions do not have a return value.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useReducer"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html#example-1",
    "href": "reactjs/reactjs-hook-reducer.html#example-1",
    "title": "React JS: useReducer",
    "section": "3 Example 1",
    "text": "3 Example 1\nIn this example, the reducer manages a state object with one field: age.\n\n\nApp.js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  if (action.type === 'incremented_age') {\n    return {\n      age: state.age + 1\n    };\n  }\n  throw Error('Unknown action.');\n}\n\nexport default function Counter() {\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; {\n        dispatch({ type: 'incremented_age' })\n      }}&gt;\n        Increment age\n      &lt;/button&gt;\n      &lt;p&gt;Hello! You are {state.age}.&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\nuseReducer inital render\n\n\n\n\n\n\nuseReducer: handler &gt; dispatcher &gt; useRducer &gt; reducer &gt; update state &gt; render new state\n\n\n\nBe careful with that: how to update the new state:\n\n\nApp.js\n\n// ..\n    return {\n      age: state.age + 1\n    };\n\n// ...\n\n\n\nThis will be a mistake:\nage = state.age + 1\nstate.age = state.age + 1\nage = age + 1\nState is read-only. Don’t modify any objects or arrays in state: instead, always return new objects from your reducer.\nuseReducer is very similar to useState, but it lets you move the state update logic from event handlers into a single function outside of your component. Read more about choosing between useState and useReducer.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useReducer"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-reducer.html#example-2",
    "href": "reactjs/reactjs-hook-reducer.html#example-2",
    "title": "React JS: useReducer",
    "section": "4 Example 2",
    "text": "4 Example 2\nIn this example, the reducer manages a state object with two fields: name and age.\n\n\nApp.js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'incremented_age': {\n      return {\n        name: state.name,\n        age: state.age + 1\n      };\n    }\n    case 'changed_name': {\n      return {\n        name: action.nextName,\n        age: state.age\n      };\n    }\n  }\n  throw Error('Unknown action: ' + action.type);\n}\n\nconst initialState = { name: 'Taylor', age: 42 };\n\nexport default function Form() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function handleButtonClick() {\n    dispatch({ type: 'incremented_age' });\n  }\n\n  function handleInputChange(e) {\n    dispatch({\n      type: 'changed_name',\n      nextName: e.target.value\n    }); \n  }\n\n  return (\n    &lt;&gt;\n      &lt;input\n        value={state.name}\n        onChange={handleInputChange}\n      /&gt;\n      &lt;button onClick={handleButtonClick}&gt;\n        Increment age\n      &lt;/button&gt;\n      &lt;p&gt;Hello, {state.name}. You are {state.age}.&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\nuseReducerinital render\n\n\n\n\n\n\nuseReducernew render",
    "crumbs": [
      "ReacJS 18: Hooks",
      "React JS: useReducer"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-memo.html",
    "href": "reactjs/reactjs-hook-memo.html",
    "title": "ReactJS: useMemo",
    "section": "",
    "text": "📘 useMemo\nuseMemo is a React Hook that lets you cache the result of a calculation between re-renders.\nconst cachedValue = useMemo(calculateValue, dependencies)",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useMemo"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-memo.html#parameters",
    "href": "reactjs/reactjs-hook-memo.html#parameters",
    "title": "ReactJS: useMemo",
    "section": "1.1 Parameters",
    "text": "1.1 Parameters\n\ncalculateValue: The function calculating the value that you want to cache.\n\nIt should:\n\nbe pure,\ntake no arguments,\nand should return a value of any type.\n\nReact will call your function during the initial render. On next renders, React will return the same value again if the dependencies have not changed since the last render.\nOtherwise, it will call calculateValue, return its result, and store it so it can be reused later.\n\ndependencies: The list of all reactive values referenced inside of the calculateValue code.\n\nReactive values include props, state, and all the variables and functions declared directly inside your component body.\nIf your linter is configured for React, it will verify that every reactive value is correctly specified as a dependency.\nThe list of dependencies must have a constant number of items and be written inline like [dep1, dep2, dep3].\nReact will compare each dependency with its previous value using the Object.is comparison.\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou should only rely on useMemo as a performance optimization.\nIf your code doesn’t work without it, find the underlying problem and fix it first. Then you may add useMemo to improve performance.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useMemo"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-memo.html#example-1",
    "href": "reactjs/reactjs-hook-memo.html#example-1",
    "title": "ReactJS: useMemo",
    "section": "1.2 Example 1",
    "text": "1.2 Example 1\nCall useMemo at the top level of your component to cache a calculation between re-renders:\n\n\nTodoList.js\n\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab }) {\n  const visibleTodos = useMemo(\n    () =&gt; filterTodos(todos, tab),\n    [todos, tab]\n  );\n  // ...\n}",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useMemo"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html",
    "href": "reactjs/reactjs-hook-state.html",
    "title": "ReactJS: useState",
    "section": "",
    "text": "📘 hookState\nuseState is a React Hook that lets you add a state variable to your component.\nconst [state, setState] = useState(initialState)\nThe useState hook takes a single argument, which is the initial state for the state variable. In the example above, the initial state is initialState. The hook returns an array with two elements: the current state value and a function that can be used to update the state value.\nState: what-is-state-and-rendering-updaterender-cycle",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useState"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#introduction",
    "href": "reactjs/reactjs-hook-state.html#introduction",
    "title": "ReactJS: useState",
    "section": "1 Introduction",
    "text": "1 Introduction\nconst [state, setState] = useState(initialState)\n\n\n\n\n\nuseState hook provides you with functionality to set state for a variable and automatically update the DOM with the new state\n\n\n\ninitialState: The value you want the state to be initially. It can be a value of any type, but there is a special behavior for functions. This argument is ignored after the initial render.\nuseState returns an array with exactly two values:\n\nstate: The current state. During the first render, it will match the initialState you have passed.\nsetState: The set function that lets you update the state to a different value and trigger a re-render.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useState"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#why-hooks-are-so-important",
    "href": "reactjs/reactjs-hook-state.html#why-hooks-are-so-important",
    "title": "ReactJS: useState",
    "section": "2 Why hooks are so important",
    "text": "2 Why hooks are so important\n\n\n\nIf you used classes in React before, this code should look familiar\n\n\nuseState is a hook in React that allows you to add state to functional components. Prior to the introduction of hooks, the only way to add state to a React component was to use a class component, which required you to write more code and follow a different syntax.\n\n\n\nHooks allow you to use state: modular, reusable and easy to mantain\n\n\n\nHooks allow you to use state and other features in functional components, which can make your code more concise and easier to read. They also allow you to reuse stateful logic across your components, which can make your code more modular and easier to maintain.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useState"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#example-1",
    "href": "reactjs/reactjs-hook-state.html#example-1",
    "title": "ReactJS: useState",
    "section": "3 Example 1",
    "text": "3 Example 1\nIn this example, rahter than changing a value directly, we call a updater function. Calling useState returns a value and a updater function.\n\n\n\nThe updater function changes the value and React updates the display with the recalculated UI from the component\n\n\n\n\n\nThe useState function returns an array with two elements: a value and an updater function",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useState"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#example-2",
    "href": "reactjs/reactjs-hook-state.html#example-2",
    "title": "ReactJS: useState",
    "section": "4 Example 2",
    "text": "4 Example 2\nIn this example, the count state variable holds a number. Clicking the button increments it.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    &lt;button onClick={handleClick}&gt;\n      You pressed me {count} times\n    &lt;/button&gt;\n  );\n}\n\n\n\n\n\n\nExecuting App.js, calling component Gallery, importing it and using it\n\n\n\n\n\n\nExecuting App.js, calling component Gallery, importing it and using it",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useState"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#example-3",
    "href": "reactjs/reactjs-hook-state.html#example-3",
    "title": "ReactJS: useState",
    "section": "5 Example 3",
    "text": "5 Example 3\nIn this example, what about this event handler? What do you think number will be in the next render?\n\n\nApp.js\n\n&lt;button onClick={() =&gt; {\n  setNumber(number + 5);\n  setNumber(n =&gt; n + 1);\n}}&gt;\n\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{number}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; {\n        setNumber(number + 5);\n        setNumber(n =&gt; n + 1);\n      }}&gt;Increase the number&lt;/button&gt;\n    &lt;/&gt;\n  )\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render\n\n\n\n\n\n\nNext render\n\n\n\n\nHere’s what this event handler tells React to do:\n\nsetNumber(number + 5): number is 0, so setNumber(0 + 5). React adds replace with 5 to its queue.\nsetNumber(n =&gt; n + 1): n =&gt; n + 1 is an updater function. React adds that function to its queue.\n\nDuring the next render, React goes through the state queue:\n\n\n\nReact stores 6 as the final result and returns it from useState.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useState"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#example-4",
    "href": "reactjs/reactjs-hook-state.html#example-4",
    "title": "ReactJS: useState",
    "section": "6 Example 4",
    "text": "6 Example 4\nLet’s try one more example. What do you think number will be in the next render?\n\n\nApp.js\n\n&lt;button onClick={() =&gt; {\n  setNumber(number + 5);\n  setNumber(n =&gt; n + 1);\n  setNumber(42);\n}}&gt;\n\n\n\n\n\n\nNext render\n\n\n\n\n\nReact stores 42 as the final result and returns it from useState.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useState"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-state.html#updating-arrays-without-mutation",
    "href": "reactjs/reactjs-hook-state.html#updating-arrays-without-mutation",
    "title": "ReactJS: useState",
    "section": "7 Updating arrays without mutation",
    "text": "7 Updating arrays without mutation\n\n7.1 Example 1\nUpdating arrays without mutation is important in React because it helps to ensure that the state of your application remains predictable and easy to debug. When you mutate an array in place, you change its original value, which can make it difficult to understand what has changed and why.\nIn React, it’s generally recommended to avoid mutating the state directly, and instead to create new copies of the state with the desired changes applied. This ensures that the original state is preserved, and makes it easier to understand how the state of your application is changing over time.\nHere’s an example of how you might update an array without mutation in React using the map function:\n\n\nApp.js\n\nconst [items, setItems] = useState([1, 2, 3]);\n\nconst updateItem = index =&gt; {\n  setItems(items.map((item, i) =&gt; (i === index ? item * 2 : item)));\n};\n\n\n\nUpdating arrays without mutation can help to ensure that the state of your code remains predictable and easy to understand, which can make it easier to develop and maintain.\nIn this example, the updateItem function takes an index as an argument, and uses the map function to create a new array with the item at the specified index doubled. The setItems function is then called with the new array, which updates the state of the items array without mutating the original value.\n\n\n7.2 Example 2\nAdding to array with useState:\n\nAnd instead of using push(), we will create a new array which contains the existing items and a new item at the end. There are multiple ways to do this, but the easiest one is to use the ... array spread syntax:\n\n\n\nApp.js\n\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState([]);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Inspiring sculptors:&lt;/h1&gt;\n      &lt;input\n        value={name}\n        onChange={e =&gt; setName(e.target.value)}\n      /&gt;\n      &lt;button onClick={() =&gt; {\n        setName('');\n        setArtists([\n          ...artists,\n          { id: nextId++, name: name }\n        ]);\n      }}&gt;Add&lt;/button&gt;\n      &lt;ul&gt;\n        {artists.map(artist =&gt; (\n          &lt;li key={artist.id}&gt;{artist.name}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\n\n\n\n\n\narray using ... spread inital render\n\n\n\n\n\n\narray using ... spread new render\n\n\n\nThe array spread syntax also lets you prepend an item by placing it before the original ...artists:\n\n\nApp.js\n\nsetArtists([\n  { id: nextId++, name: name },\n  ...artists // Put old items at the end\n]);\n\nIn this way, spread can do the job of both push() by adding to the end of an array and unshift() by adding to the beginning of an array.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: useState"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-custom.html",
    "href": "reactjs/reactjs-hook-custom.html",
    "title": "ReactJS: custom hooks",
    "section": "",
    "text": "📘 Custom Hooks\nHooks are reusable functions. When you have component logic that needs to be used by multiple components, we can extract that logic to a custom Hook.\nCustom Hooks start with use.\nExample: useFetch",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: custom hooks"
    ]
  },
  {
    "objectID": "reactjs/reactjs-hook-custom.html#example-1",
    "href": "reactjs/reactjs-hook-custom.html#example-1",
    "title": "ReactJS: custom hooks",
    "section": "1 Example 1",
    "text": "1 Example 1\nWe are fetching data, We will use the JSONPlaceholder service to fetch fake data. This service is great for testing applications when there is no existing data.\n\n\nApp.js\n\nimport { useState, useEffect } from \"react\";\n\nconst Home = () =&gt; {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    fetch(\"https://jsonplaceholder.typicode.com/todos\")\n      .then((res) =&gt; res.json())\n      .then((data) =&gt; setData(data));\n }, []);\n\n  return (\n    &lt;&gt;\n      {data &&\n        data.map((item) =&gt; {\n          return &lt;p key={item.id}&gt;{item.title}&lt;/p&gt;;\n        })}\n    &lt;/&gt;\n  );\n};\n\n\n\n\n\n\nuseEffect inital render: fetching data\n\n\nThe fetch logic may be needed in other components as well, so we will extract that into a custom Hook.\n\nMove the fetch logic to a new file to be used as a custom Hook:\n\n\n\nuseFetch.js\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = (url) =&gt; {\n  const [data, setData] = useState(null);\n\n  useEffect(() =&gt; {\n    fetch(url)\n      .then((res) =&gt; res.json())\n      .then((data) =&gt; setData(data));\n  }, [url]);\n\n  return [data];\n};\n\nexport default useFetch;\n\n\n\nindex.js\n\nimport ReactDOM from \"react-dom/client\";\nimport useFetch from \"./useFetch\";\n\nconst Home = () =&gt; {\n  const [data] = useFetch(\"https://jsonplaceholder.typicode.com/todos\");\n\n  return (\n    &lt;&gt;\n      {data &&\n        data.map((item) =&gt; {\n          return &lt;p key={item.id}&gt;{item.title}&lt;/p&gt;;\n        })}\n    &lt;/&gt;\n  );\n};\n\nWe have created a new file called useFetch.js containing a function called useFetch which contains all of the logic needed to fetch our data.",
    "crumbs": [
      "ReacJS 18: Hooks",
      "ReactJS: custom hooks"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1-PR.html",
    "href": "reactjs/rjslab6-1-PR.html",
    "title": "Lab#RE06-1-PR: create a pull request",
    "section": "",
    "text": "Navigate to the repository on GitHub.\nSwitch to the “ordersMapping” branch.\nClick on the “Pull Request” tab.\nEnsure “base” is set to “master” and “compare” is set to “ordersMapping”.\nReview the changes.\nClick on “Create Pull Request”.\nProvide a descriptive title and additional context if necessary.\nReview the summary.\nClick on “Create Pull Request” again to submit.\nVerify the pull request is created successfully.\n\n\n\n\n\n\n\nCreate a pull request step#1\n\n\n\n\n\nCreate a pull request step#2\n\n\n\n\n\nCreate a pull request step#3\n\n\n\n\n\nCreate a pull request step#4\n\n\n\n\n\nCreate a pull request step#5\n\n\n\n\n\nCreate a pull request step#6\n\n\n\n\n\nCreate a pull request step#7\n\n\n\n\n\nCreate a pull request step#8\n\n\n\n\n\nCreate a pull request step#9\n\n\n\n\n\nCreate a pull request step#10\n\n\n\n\n\n\nMerger Commit: Combines all branch changes into a single commit on master, retaining individual commit history.\nMerge Squash: Condenses all branch commits into a single commit on master, simplifying commit history.\nMerge Rebase: Integrates branch changes by replaying commits on top of master, resulting in a linear commit history.\n\nEach method offers distinct advantages: merger commit maintains detailed history, merge squash keeps history cleaner, while merge rebase provides a linear timeline. Choose based on project requirements, considering readability, collaboration, and potential conflicts when merging branches into master.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1-PR: create a pull request"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1-PR.html#general-approach",
    "href": "reactjs/rjslab6-1-PR.html#general-approach",
    "title": "Lab#RE06-1-PR: create a pull request",
    "section": "",
    "text": "Navigate to the repository on GitHub.\nSwitch to the “ordersMapping” branch.\nClick on the “Pull Request” tab.\nEnsure “base” is set to “master” and “compare” is set to “ordersMapping”.\nReview the changes.\nClick on “Create Pull Request”.\nProvide a descriptive title and additional context if necessary.\nReview the summary.\nClick on “Create Pull Request” again to submit.\nVerify the pull request is created successfully.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1-PR: create a pull request"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1-PR.html#step-by-step",
    "href": "reactjs/rjslab6-1-PR.html#step-by-step",
    "title": "Lab#RE06-1-PR: create a pull request",
    "section": "",
    "text": "Create a pull request step#1\n\n\n\n\n\nCreate a pull request step#2\n\n\n\n\n\nCreate a pull request step#3\n\n\n\n\n\nCreate a pull request step#4\n\n\n\n\n\nCreate a pull request step#5\n\n\n\n\n\nCreate a pull request step#6\n\n\n\n\n\nCreate a pull request step#7\n\n\n\n\n\nCreate a pull request step#8\n\n\n\n\n\nCreate a pull request step#9\n\n\n\n\n\nCreate a pull request step#10",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1-PR: create a pull request"
    ]
  },
  {
    "objectID": "reactjs/rjslab6-1-PR.html#ways-to-finish-a-pull-request",
    "href": "reactjs/rjslab6-1-PR.html#ways-to-finish-a-pull-request",
    "title": "Lab#RE06-1-PR: create a pull request",
    "section": "",
    "text": "Merger Commit: Combines all branch changes into a single commit on master, retaining individual commit history.\nMerge Squash: Condenses all branch commits into a single commit on master, simplifying commit history.\nMerge Rebase: Integrates branch changes by replaying commits on top of master, resulting in a linear commit history.\n\nEach method offers distinct advantages: merger commit maintains detailed history, merge squash keeps history cleaner, while merge rebase provides a linear timeline. Choose based on project requirements, considering readability, collaboration, and potential conflicts when merging branches into master.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE06-1-PR: create a pull request"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-4.html",
    "href": "reactjs/rjslab5-4.html",
    "title": "Lab#RE05-4: chat: test ws AWS",
    "section": "",
    "text": "📘 React JS Lab#RE05-4: chat & websockets\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\nwebsockets, provided by ReactJS framework and:\n\nuseState\nuseEffect\nuseContext\n\nAWS, Amanzon Web Services, architecture as a server-side:\n\nLambda\nDynamoDB\nAPI Gateway\nCloudwatch\nReference:",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-4: chat: test ws AWS"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-4.html#backend-websockets",
    "href": "reactjs/rjslab5-4.html#backend-websockets",
    "title": "Lab#RE05-4: chat: test ws AWS",
    "section": "1 Backend: websockets",
    "text": "1 Backend: websockets\nJSON websocket example scheme, login:\n{\n\n   \"action\": \"login\",\n   \"chatId\": \"DEVOPS\",\n   \"userId\": \"albert\"\n \n}\nJSON websocket example scheme, conversation:\n{\n\n   \"action\": \"conversation\",\n   \"chatId\": \"DEVOPS\",\n   \"userId\": \"ALBET#1666862612315\",\n   \"connectionid\": \"aqEgvdwRFiACEYw=\",\n   \"requesttime\": \"27/Oct/2022:09:23:31 +0000\",\n   \"sourceip\": \"83.247.137.2\",\n   \"text\": \"ASDFA\",\n   \"timestampEpoch\": 1666862612315\n\n}\n\n1.1 Test backend\n\nWeb test websocket: Websocket King\n\n\n\n\nTest app with websocketking\n\n\nWebsocket King is a web tool used to test the functionality and performance of WebSocket connections.\nWith Websocket King, you can simulate WebSocket communication by connecting to the WebSocket endpoint of your AWS backend.\nIt provides an intuitive interface to send and receive WebSocket messages, monitor the connection status, and analyze the received data. By using Websocket King to test your AWS backend, you can ensure that the WebSocket communication is working correctly, validate the message handling, and assess the overall performance and reliability of your backend implementation.\n\n\n\nTest app with websocketking: connecting with the endpoint proporcionated by API gateway AWS\n\n\n\n\n\nTest app with websocketking: connected with the endpoint proporcionated by API gateway AWS\n\n\n\n\n\nTest app with websocketking: sending a websocket with a mistake, sever error\n\n\n\n\n\nTest app with websocketking: sending a websocket, logged properly\n\n\n\n1.1.1 Example conversation\n\n\n\nTest app with websocketking: sending a websocket, conversation example\n\n\n\n1.1.1.1 Albert\n11:14 21.34\n{\n  \"action\": \"conversation\",\n  \"time\": \"09/Jun/2023:09:14:19 +0000\",\n  \"chatId\": \"friday\",\n  \"userId\": \"fabrizio\",\n  \"text\": \"yessss\"\n}\n11:04 54.53\n{\n  \"action\": \"conversation\",\n  \"time\": \"09/Jun/2023:09:04:54 +0000\",\n  \"chatId\": \"friday\",\n  \"userId\": \"victor\",\n  \"text\": \"yeaahhhhhh\"\n}\n11:03 36.06\n\"sent at 09/Jun/2023:09:03:35 +0000\"\n11:03 35.22\n{\n  \"action\": \"conversation\",\n  \"chatId\": \"friday\",\n  \"userId\": \"albert\",\n  \"text\": \"hola, it is friday!!!!\"\n}\n11:02 47.08\n\"sent at 09/Jun/2023:09:02:45 +0000\"\n11:02 45.43\n{\n  \"action\": \"conversation\",\n  \"chatId\": \"frideay\",\n  \"userId\": \"albert\",\n  \"text\": \"hola, it is friday!!!!\"\n}\n10:56 20.53\n{\n  \"action\": \"logged in\",\n  \"connectionId\": \"GPk-Qe7cliACGeA=\",\n  \"time\": \"09/Jun/2023:08:56:19 +0000\"\n}\n10:56 19.61\n{\n  \"action\": \"login\",\n  \"chatId\": \"friday\",\n  \"userId\": \"albert\"\n}\n10:55 42.50\n{\n  \"message\": \"Internal server error\",\n  \"connectionId\": \"GPk-Qe7cliACGeA=\",\n  \"requestId\": \"GPlaNF6dFiAFqjg=\"\n}\n10:55 41.76\n{\n   \"action\": \"login\",\n   \"chatId\": \"friday\",\n   \"userId\": \"albert\",\n \n}\n10:53 37.50\n\"Hello from CIFO Chat! Be careful wiht your ROUTE, it is not right\"\n10:53 37.07\n{\n\"adsfda\": agfafds\n}\n10:52 42.95\nConnected to wss://xxxxxx.execute-api.eu-central-1.amazonaws.com/test\n10:52 42.70\nConnecting to wss://xxxxxx.execute-api.eu-central-1.amazonaws.com/test\n\n\n1.1.1.2 Victor\n11:24 21.27\nDisconnected from wss://xxxxx.execute-api.eu-central-1.amazonaws.com/test\n11:14 21.32\n{\n  \"action\": \"conversation\",\n  \"time\": \"09/Jun/2023:09:14:19 +0000\",\n  \"chatId\": \"friday\",\n  \"userId\": \"fabrizio\",\n  \"text\": \"yessss\"\n}\n11:04 54.57\n\"sent at 09/Jun/2023:09:04:54 +0000\"\n11:04 53.93\n{\n  \"action\": \"conversation\",\n  \"chatId\": \"friday\",\n  \"userId\": \"victor\",\n  \"text\": \"yeaahhhhhh\"\n}\n11:03 36.02\n{\n  \"action\": \"conversation\",\n  \"time\": \"09/Jun/2023:09:03:35 +0000\",\n  \"chatId\": \"friday\",\n  \"userId\": \"albert\",\n  \"text\": \"hola, it is friday!!!!\"\n}\n11:00 10.76\n{\n  \"action\": \"logged in\",\n  \"connectionId\": \"GPmCofVfFiACFlA=\",\n  \"time\": \"09/Jun/2023:09:00:10 +0000\"\n}\n11:00 10.65\n{\n  \"action\": \"login\",\n  \"chatId\": \"friday\",\n  \"userId\": \"victor\"\n}\n11:00 02.29\nConnected to wss://xxxxxx.execute-api.eu-central-1.amazonaws.com/test\n11:00 00.27\nConnecting to wss://xxxxxxx.execute-api.eu-central-1.amazonaws.com/test\n\n\n1.1.1.3 Fabrizio\n11:24 21.34\nDisconnected from wss://xxxxx.execute-api.eu-central-1.amazonaws.com/test\n11:14 21.36\n\"sent at 09/Jun/2023:09:14:19 +0000\"\n11:14 19.25\n{\n  \"action\": \"conversation\",\n  \"chatId\": \"friday\",\n  \"userId\": \"fabrizio\",\n  \"text\": \"yessss\"\n}\n11:04 54.55\n{\n  \"action\": \"conversation\",\n  \"time\": \"09/Jun/2023:09:04:54 +0000\",\n  \"chatId\": \"friday\",\n  \"userId\": \"victor\",\n  \"text\": \"yeaahhhhhh\"\n}\n11:03 36.04\n{\n  \"action\": \"conversation\",\n  \"time\": \"09/Jun/2023:09:03:35 +0000\",\n  \"chatId\": \"friday\",\n  \"userId\": \"albert\",\n  \"text\": \"hola, it is friday!!!!\"\n}\n10:58 44.85\n{\n  \"action\": \"logged in\",\n  \"connectionId\": \"GPl0Jc34liACElg=\",\n  \"time\": \"09/Jun/2023:08:58:44 +0000\"\n}\n10:58 44.45\n{\n  \"action\": \"login\",\n  \"chatId\": \"friday\",\n  \"userId\": \"fabrizio\"\n}\n10:58 29.23\nConnected to wss://xxxxxx.execute-api.eu-central-1.amazonaws.com/test\n10:58 27.52\nConnecting to wss://xxxxxx.execute-api.eu-central-1.amazonaws.com/test\n\n\n\n1.1.2 Reconnect\n\n\n\nTest app with websocketking: reconnect",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-4: chat: test ws AWS"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-async.html",
    "href": "reactjs/reactjs-app-async.html",
    "title": "React JS App: async",
    "section": "",
    "text": "📘 async\nAsync/await is a syntax in JavaScript that makes it easier to work with asynchronous code and allows you to write it easier, read and understand, by making it look more like synchronous code.\nAsynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished.\nOnce that task has finished, your program is presented with the result.\n\n\nMany functions provided by browsers, especially the most interesting ones, can potentially take a long time, and therefore, are asynchronous. For example:\n\nMaking HTTP requests using fetch()\nAccessing a user’s camera or microphone using getUserMedia()\nAsking a user to select files using showOpenFilePicker()\n\n\n\n\n\n\nAsync/await",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: async"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-async.html#overview",
    "href": "reactjs/reactjs-app-async.html#overview",
    "title": "React JS App: async",
    "section": "",
    "text": "📘 async\nAsync/await is a syntax in JavaScript that makes it easier to work with asynchronous code and allows you to write it easier, read and understand, by making it look more like synchronous code.\nAsynchronous programming is a technique that enables your program to start a potentially long-running task and still be able to be responsive to other events while that task runs, rather than having to wait until that task has finished.\nOnce that task has finished, your program is presented with the result.\n\n\nMany functions provided by browsers, especially the most interesting ones, can potentially take a long time, and therefore, are asynchronous. For example:\n\nMaking HTTP requests using fetch()\nAccessing a user’s camera or microphone using getUserMedia()\nAsking a user to select files using showOpenFilePicker()\n\n\n\n\n\n\nAsync/await",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: async"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-async.html#synchronous-programming",
    "href": "reactjs/reactjs-app-async.html#synchronous-programming",
    "title": "React JS App: async",
    "section": "2 Synchronous programming",
    "text": "2 Synchronous programming\nSynchronous code is code that is executed in a “synchronous” manner, meaning that it is executed in the order that it appears in the source code. When a line of synchronous code is executed, the program will wait for it to complete before moving on to the next line of code.\n\n\nApp.sh\n\nconsole.log('Start');\n\nconst result = doSomething();\nconsole.log(result);\n\nconsole.log('End');\n\n\n\nIn this example, the code will execute the console.log('Start') line first, then wait for the doSomething() function to complete and return a result, and then log the result to the console. Finally, it will execute the console.log('End') line.\nSynchronous code is easy to understand and debug, because the order of execution is clear and predictable. However, it can be less efficient than asynchronous code, because it can block the program from moving on to other tasks until the current task is complete.\n\nSynchronous code may be is easy but blocking.\n\nThis is the basic problem with long-running synchronous functions. What we need is a way for our program to:\n\nStart a long-running operation by calling a function.\nHave that function start the operation and return immediately, so that our program can still be responsive to other events.\nNotify us with the result of the operation when it eventually completes.\n\nThat’s precisely what asynchronous functions can do.\n\n\nBest with async/await but promises must be studied",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: async"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-async.html#asynchronous-programming",
    "href": "reactjs/reactjs-app-async.html#asynchronous-programming",
    "title": "React JS App: async",
    "section": "3 Asynchronous programming",
    "text": "3 Asynchronous programming\nAsynchronous programming is a programming paradigm that enables the execution of tasks independently, without waiting for previous tasks to complete.\nIt allows programs to handle multiple operations concurrently, enhancing efficiency and responsiveness.\n\nIn asynchronous programming, tasks are initiated and then executed in the background, allowing the program to continue its execution without being blocked by long-running operations.\n\n\n\n\n\n\n\nNon-blocking\n\n\n\nNon-blocking refers to the characteristic of a program or system that doesn’t halt or get stuck waiting for a resource or operation.\nIn the context of asynchronous programming, non-blocking refers:\n\nto the ability of a task or operation to proceed independently without blocking other tasks from executing.\nIt ensures that tasks can run concurrently without causing delays, allowing for efficient utilization of system resources and improved overall performance.\nNon-blocking operations are often used in conjunction with asynchronous programming to achieve scalability and responsiveness in applications.\n\n\n\n\n3.1 async function\nThe async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\n\nThe async function declaration declares an async function where the await keyword is used within the function body.\n\n\n\nApp.js\n\nasync function greet() {\n  return 'Hello, world!';\n}\n\nasync function main() {\n  const message = await greet();\n  console.log(message);\n}\n\nmain();\n\n\n\nIn this example, the greet function is an async function that returns a promise that resolves to the string “Hello, world!”. The main function is also an async function that calls the greet function and waits for the promise to resolve using the await keyword. When the promise resolves, the value is assigned to the message variable and logged to the console.\nAsync functions can contain zero or more await expressions. Await expressions make promise-returning functions behave as though they’re synchronous by suspending execution until the returned promise is fulfilled or rejected.\nThe resolved value of the promise is treated as the return value of the await expression. Use of async and await enables the use of ordinary try / catch blocks around asynchronous code.\n\n\nApp.js\n\nfunction resolveAfter2Seconds() {\n  return new Promise(resolve =&gt; {\n    setTimeout(() =&gt; {\n      resolve('resolved');\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log('calling');\n  const result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\n\nasyncCall();",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: async"
    ]
  },
  {
    "objectID": "reactjs/reactjs-app-async.html#example-1marketplace",
    "href": "reactjs/reactjs-app-async.html#example-1marketplace",
    "title": "React JS App: async",
    "section": "4 Example 1:marketplace",
    "text": "4 Example 1:marketplace\nYou’re working on an art marketplace app that lets the user submit multiple orders for an art item at the same time.\nEach time the user presses the “Buy” button, the “Pending” counter should increase by one. After three seconds, the “Pending” counter should decrease, and the “Completed” counter should increase.\n\n\nApp.js\n\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending(p =&gt; p + 1);\n    await delay(3000);\n    setPending(p =&gt; p - 1);\n    setCompleted(c =&gt; c + 1);\n  }\n\n  return (\n    &lt;&gt;\n      &lt;h3&gt;\n        Pending: {pending}\n      &lt;/h3&gt;\n      &lt;h3&gt;\n        Completed: {completed}\n      &lt;/h3&gt;\n      &lt;button onClick={handleClick}&gt;\n        Buy     \n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction delay(ms) {\n  return new Promise(resolve =&gt; {\n    setTimeout(resolve, ms);\n  });\n}\n\n\n\n\n\n\nInitial render\n\n\n\n\n\n\nNext render and async working with timeout\n\n\n\n\n\n\n3 Next render, timeout finished",
    "crumbs": [
      "ReactJS: Designing an App",
      "React JS App: async"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-import.html",
    "href": "reactjs/reactjs-es6-import.html",
    "title": "React JS ES6: import modules",
    "section": "",
    "text": "📘 **import modules*\nThe magic of components lies in their reusability: you can create components that are composed of other components.\nBut as you nest more and more components, it often makes sense to start splitting them into different files. This lets you keep your files easy to scan and reuse components in more places.",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: import modules"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-import.html#overview",
    "href": "reactjs/reactjs-es6-import.html#overview",
    "title": "React JS ES6: import modules",
    "section": "",
    "text": "📘 **import modules*\nThe magic of components lies in their reusability: you can create components that are composed of other components.\nBut as you nest more and more components, it often makes sense to start splitting them into different files. This lets you keep your files easy to scan and reuse components in more places.",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: import modules"
    ]
  },
  {
    "objectID": "reactjs/reactjs-es6-import.html#exporting-and-importing-a-component",
    "href": "reactjs/reactjs-es6-import.html#exporting-and-importing-a-component",
    "title": "React JS ES6: import modules",
    "section": "2 Exporting and importing a component",
    "text": "2 Exporting and importing a component\nWhat if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move Gallery and Profile out of the root component file.\nThis will make them more modular and reusable in other files. You can move a component in three steps:\n\nMake a new JS file to put the components in.\nExport your function component from that file (using either default or named exports).\nImport it in the file where you’ll use the component (using the corresponding technique for importing default or named exports).\n\nHere both Profile and Gallery have been moved out of App.js into a new file called Gallery.js. Now you can change App.js to import Gallery from Gallery.js:\n\n\nGallery.js\n\nfunction Profile() {\n  return (\n    &lt;img\n      src=\"https://i.imgur.com/QIrZWGIs.jpg\"\n      alt=\"Alan L. Hart\"\n    /&gt;\n  );\n}\n\nexport default function Gallery() {\n  return (\n    &lt;section&gt;\n      &lt;h1&gt;Amazing scientists&lt;/h1&gt;\n      &lt;Profile /&gt;\n      &lt;Profile /&gt;\n      &lt;Profile /&gt;\n       &lt;p&gt;I love science!! Do you know what does STEAM mean? Come on, Albertus, answer the question! &lt;/p&gt;\n    &lt;/section&gt;\n  );\n}\n\n\n\nApp.js\n\nimport Gallery from './Gallery.js';\n\nexport default function App() {\n  return (\n    &lt;Gallery /&gt;\n  );\n}\n\n\n\n\n\n\n\n\nExecuting App.js, calling component Gallery, importing it and using it",
    "crumbs": [
      "ES6: ECMAScript 6",
      "React JS ES6: import modules"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-2.html",
    "href": "reactjs/rjslab3-2.html",
    "title": "Lab#RE03-2: HighCharts",
    "section": "",
    "text": "📘 React JS Lab#RE03-2: Highcharts\nIn this lab, we will be using Highcharts React.\nIt is a library that allows you to integrate Highcharts, a popular JavaScript charting library, into your React applications.\nIt provides a React component that acts as a wrapper around the Highcharts library, enabling you to create interactive and visually appealing charts.\nBy utilizing the Highcharts React library, you can easily incorporate interactive charts into your React application, making the data visually accessible and enhancing the user experience.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-2: HighCharts"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-2.html#overview",
    "href": "reactjs/rjslab3-2.html#overview",
    "title": "Lab#RE03-2: HighCharts",
    "section": "1 Overview",
    "text": "1 Overview\nHere’s a high-level overview of how Highcharts React works to make data visible in a React app:\n\nInstallation: First, you need to install the Highcharts React library along with the Highcharts library itself. You can do this using package managers like npm or yarn.\nImporting the Components: Once installed, you can import the necessary components from the Highcharts React library into your React application. The main component you’ll use is typically called HighchartsReact.\nConfiguration: Highcharts charts require configuration options to define the type of chart, data sources, styling, and various other settings.\n\nIn your React component, you’ll create a configuration object that specifies these options.\nYou can define the configuration object directly in your component or import it from an external file.\n\nRendering the Chart: Within your React component’s render method, you’ll use the Highcharts React component, passing in the configuration object as a prop.\n\nThis component acts as a container for the Highcharts chart and handles the integration with React.\n\nUpdating the Data: To make the chart data visible and dynamic, you’ll typically store the data in the component’s state or props. Whenever the data changes, you can update the state or props accordingly, triggering a re-render of the chart component with the new data.\nInteractivity and Events: Highcharts provides various interactive features like tooltips, legends, zooming, and selection.\n\nYou can configure these features through the chart’s configuration object and handle events triggered by user interactions, such as clicking on a data point.\n\nStyling and Customization: Highcharts offers extensive customization options to control the appearance of your charts. You can modify colors, fonts, labels, axes, and other visual elements using the configuration object.\n\nAdditionally, you can apply CSS styles to the chart container or\nuse Highcharts-specific APIs to further customize the chart’s appearance.\n\nAdditional Features: Highcharts supports a wide range of chart types, including:\n\nline charts,\nbar charts,\npie charts,\narea charts,\nradar charts,\nwindrose charts,\nstock charts and more.\n\nYou can explore the `Highcharts documentation to learn about additional features, such as exporting charts, adding annotations, or integrating with external data sources.\n\n\n1.1 References\n\nCodesanbox example: highcharts\nCodesanbox example: live random data\nCodesanbox example: bitcoin reatime data stock\nHighCharts Demo\n\n\n1.1.1 Todo\n\nCodesanbox example highcharts: todo-app-3",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-2: HighCharts"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-2.html#pie-chart",
    "href": "reactjs/rjslab3-2.html#pie-chart",
    "title": "Lab#RE03-2: HighCharts",
    "section": "2 Pie Chart",
    "text": "2 Pie Chart\n\n2.1 Importing Dependencies\nimport React from \"react\";\nimport Highcharts from \"highcharts/highstock\";\nimport PieChart from \"highcharts-react-official\";\nThe code imports the necessary dependencies: React from the “react” package, Highcharts from the “highcharts/highstock” package, and PieChart from the “highcharts-react-official” package. These dependencies are required for using Highcharts with React.\n\n\n2.2 Defining Data\nconst grades = [\n  {\n    name: \"Carla\",\n    y: 135\n  },\n  {\n    name: \"Marc\",\n    y: 89\n  },\n  {\n    name: \"Victor\",\n    y: 44\n  },\n  {\n    name: \"Rafa\",\n    y: 32\n  },\n  {\n    name: \"Fabrizio\",\n    y: 12\n  }\n];\nAn array called grades representing data points for the pie chart. Each object in the array contains a name and a y value. This data will be used in the chart’s series.\n\n\n2.3 Chart Configuration\nThe options object defines the configuration for the pie chart. It includes a title specifying the chart’s title, a chart object specifying the type of chart (in this case, “pie”), and a series array containing the data for the chart. The grades array is assigned to the data property of the series.\nconst options = {\n  title: {\n    text: \"Students\"\n  },\n  chart: {\n    type: \"pie\"\n  },\n  series: [\n    {\n      data: grades\n    }\n  ]\n};\n\n\n2.4 Creating the React Component\nA functional component called App is defined. Inside the component’s JSX, a  component is rendered, passing in the Highcharts dependency and the options object as props. The component is wrapped in a\n\nelement with some inline styling to provide a margin.\n\nconst App = () =&gt; {\n  return (\n    &lt;div style={{ margin: \"40px\" }}&gt;\n      &lt;PieChart highcharts={Highcharts} options={options} /&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n\n2.5 Exporting the Component\nexport default App;\nThe App component is exported as the default export, allowing it to be imported and used in other parts of the application.\n\n\n2.6 Rendering the chart\nOverall, this code sets up a React application with a pie chart using Highcharts React. The data for the chart is defined in the grades array, and the chart’s configuration is specified in the options object. The chart is then rendered within the App component using the &lt;PieChart&gt; component provided by the Highcharts React library.\n\n\n\nHighchart Pie example",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-2: HighCharts"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-5.html",
    "href": "reactjs/rjslab5-5.html",
    "title": "Lab#RE05-5: chat & front",
    "section": "",
    "text": "📘 React JS Lab#RE05-5: chat & websockets\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\nwebsockets, provided by ReactJS framework and:\n\nuseState\nuseEffect\nuseContext\n\nAWS, Amanzon Web Services, architecture as a server-side:\n\nLambda\nDynamoDB\nAPI Gateway\nCloudwatch\nReference:",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-5: chat & front"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-5.html#frontend-reactjs",
    "href": "reactjs/rjslab5-5.html#frontend-reactjs",
    "title": "Lab#RE05-5: chat & front",
    "section": "1 Frontend: ReactJS",
    "text": "1 Frontend: ReactJS\nLet’s now to create the front-end of myChat App with ReactJS and websockets.\n\n1.1 Websockets JS\n\n\nToDoService.js\n\n  const socket = new WebSocket(endpoint);\n\nWe can use the newly created WebSocket *by utilizing the lifecycle methods and state management provided by the framework.\nHere’s a general outline of how you can incorporate WebSockets in a React component:\nInside your component, initialize the WebSocket connection with the useEffect hook.\n\n\nToDoService.js\n\nuseEffect(() =&gt; {\n  const socket = new WebSocket(endpoint);\n\n  // Add event listeners and handle WebSocket events\n\n  // Clean up the WebSocket connection on component unmount\n  return () =&gt; {\n    socket.close();\n  };\n}, []);\n\nAdd event listeners to handle WebSocket events such as onopen, onmessage, onclose, and onerror. For example:\n\n\nToDoService.js\n\nsocket.onopen = () =&gt; {\n  console.log(\"WebSocket connection established.\");\n};\n\nsocket.onmessage = (event) =&gt; {\n  console.log(\"Received message:\", event.data);\n  // Update React state or trigger necessary actions \n  //based on the received message\n};\n\nsocket.onclose = () =&gt; {\n  console.log(\"WebSocket connection closed.\");\n};\n\nsocket.onerror = (error) =&gt; {\n  console.error(\"WebSocket error:\", error);\n};\n\nInside your component, you can interact with the WebSocket connection as needed. For example, you can send messages using the send method:\n\n\nToDoService.js\n\nconst sendMessage = (message) =&gt; {\n  if (socket.readyState === WebSocket.OPEN) {\n    socket.send(message);\n  } else {\n    console.error(\"WebSocket connection is not open.\");\n  }\n};\n\nUpdate the component’s state or trigger necessary actions based on the received messages. We can use React’s state management, such as useState, to store and update data in response to WebSocket events or a useContext to manage data.\n\n\n1.2 Mock-up and tree-folder\n\n\n\nfolder-tree\n\n\n\n\n\nMockup to enter room\n\n\n\n\n\nMockup conversation",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-5: chat & front"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-5.html#user-stories",
    "href": "reactjs/rjslab5-5.html#user-stories",
    "title": "Lab#RE05-5: chat & front",
    "section": "2 User Stories",
    "text": "2 User Stories\n\nUser Story 1 - Connecting to the Chat Server: As a user, I want to be able to connect to the chat server so that I can participate in the chat room. When I open the application, I should see a UI indicating that I am connected to the server. If the connection fails, I expect to see an error message informing me about the issue.\nUser Story 2 - Logging In to the Chat Room: As a user, I want to log in to the chat room with my user ID and chat ID. When I open the application and I am not logged in, I should see a login form where I can enter my user ID and chat ID. After entering my login credentials, I expect the application to verify the login information. If the login is successful, I should see a UI indicating that I am logged in. If the login fails, I want to see an error message explaining the reason.\nUser Story 3 - Participating in the Conversation: As a logged-in user, I want to be able to send and receive messages in the chat room. After successfully logging in, I should see an input field where I can type my messages. When I send a message, it should be displayed in the conversation UI along with the messages from other participants. I expect to see real-time updates of the conversation as new messages are sent and received.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-5: chat & front"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-5.html#use-cases",
    "href": "reactjs/rjslab5-5.html#use-cases",
    "title": "Lab#RE05-5: chat & front",
    "section": "3 Use Cases",
    "text": "3 Use Cases\n\n3.1 Use Case 1: Connection\nActor: User\nPreconditions: - The user has opened the chat application.\nMain Flow: 1. The user launches the chat application. 2. The application establishes a WebSocket connection to the server. 3. The application displays the status of the connection as “connected” to the user.\nPostconditions: - The user is connected to the chat server and ready to send and receive messages.\n\n\n3.2 Use Case 2: Log In\nActor: User\nPreconditions: - The user has opened the chat application. - The user is not logged in.\nMain Flow: 1. The user enters their user ID and chat ID in the input fields provided. 2. The user clicks the “Enter chat room” button. 3. The application sends the login data (user ID and chat ID) to the server. 4. The server verifies the login data and sends a response to the application. 5. The application receives the response and updates the UI accordingly, displaying the login status to the user.\nAlternate Flow (Invalid Login): - If the login data is invalid or the server rejects the login, the application displays an error message to the user.\nPostconditions: - The user is logged into the chat room and ready to participate in conversations.\n\n\n3.3 Use Case 3: Conversation\nActor: User\nPreconditions: - The user is logged into the chat room.\nMain Flow: 1. The user enters a message in the input field provided. 2. The user clicks the “Send” button. 3. The application sends the message to the server. 4. The server receives the message and broadcasts it to all connected users in the chat room. 5. The application receives the broadcasted message and updates the conversation UI to display the new message.\nPostconditions: - The user’s message is sent and visible in the conversation to all participants in the chat room.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-5: chat & front"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-5.html#conditional-render-to-manage-ui-user-states",
    "href": "reactjs/rjslab5-5.html#conditional-render-to-manage-ui-user-states",
    "title": "Lab#RE05-5: chat & front",
    "section": "4 Conditional Render to manage UI user states",
    "text": "4 Conditional Render to manage UI user states\n\n\n\n\n\n\nTriple state of\n\n\n\n\nconnected,\nlog in and\nconversation.\n\n\n\nWe will use Conditional rendering to manage the triple state of “connected,” “log in,” and “conversation.” Here’s a brief study to code:\n\nConnected State: When the application is connected to the chat server, it displays the UI that shows the user as “connected.” This is achieved by checking if the WebSocket connection has been established and updating the UI accordingly.\nLog In State: If the user is not logged in, the code renders the login form where the user can enter their user ID and chat ID. Once the user submits the login form, the code sends the login data to the server for verification. If the login is successful, the UI is updated to display the login status. If the login fails, an error message is displayed.\nConversation State: Once the user is logged in, the code allows the user to enter messages in the input field and send them to the server. When a message is sent, it is broadcasted to all participants in the chat room. The application receives the broadcasted message and updates the conversation UI to display the new message.\n\nTo implement this conditional rendering, the code uses:\n\nif statements,\nternary operators,\nor logical operators to check the current state and\nconditionally render the appropriate components or UI elements.\n\nThis allows for a dynamic user experience based on the different states of the chat application.\nNote that the provided explanation is a simplified overview, and the actual implementation may involve more complex logic and components.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-5: chat & front"
    ]
  },
  {
    "objectID": "reactjs/rjslab4.html",
    "href": "reactjs/rjslab4.html",
    "title": "Lab#RE04-1: todo & server",
    "section": "",
    "text": "📘 React JS Lab#RE04-1: Feathers JS / Java Spring Boot / AWS\nIn this lab, we will be using these server frameworks to feed our React Todo app through API Rest.\nFor many reasons described below the use of a React App with a Spring Boot/Feathers/AWS server is a very good option:\n\nfeathers, the API and Real-time light Application Framework over Express.\nSpring Boot: Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.\nAWS services to create a serveless in the cloud.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-1: todo & server"
    ]
  },
  {
    "objectID": "reactjs/rjslab4.html#overall",
    "href": "reactjs/rjslab4.html#overall",
    "title": "Lab#RE04-1: todo & server",
    "section": "1 Overall",
    "text": "1 Overall\nCreating a server for a React Todo application is essential for several reasons:\n\nData Persistence: A server allows you to store and retrieve data from a database or a file system.\n\nIn the case of a todo application, you need to store the todo items, their status, and any other relevant information.\nA server enables you to save this data and retrieve it whenever necessary, ensuring that the todos remain persistent even if the user refreshes the page or closes the application.\n\nUser Authentication: If you want to add user accounts and authentication to your todo application, a server is required.\n\nIt allows you to handle user registration, login, and session management.\nWith a server, you can securely authenticate users and restrict access to certain features or data based on user permissions.\n\nAPI Integration: In many cases, todo applications need to integrate with external services or APIs.\n\nFor example, you may want to sync todos with a cloud storage service or send notifications to users.\nA server acts as an intermediary between your React application and these external APIs, handling the necessary requests and responses.\n\nServer-side Operations: Some operations are better suited to be performed on the server side.\n\nFor instance, if you need to calculate statistics or generate reports based on the todos, it’s more efficient to offload these tasks to the server rather than executing them in the client’s browser.\n\nScalability and Performance: As your todo application grows and handles more users and data, a server allows you to scale your infrastructure to meet the demand.\n\nYou can distribute the load across multiple servers or utilize cloud services that provide auto-scaling capabilities, ensuring optimal performance and responsiveness.\n\n\nThe Todo React code can be deployed and served using various frameworks and platforms, depending on your specific requirements and preferences. Here are some options:\n\nSpring Boot: Spring Boot is a popular Java-based framework for building web applications. It provides a robust server-side environment for running React code.\nFeathers.js: Feathers.js is a lightweight and flexible Node.js framework that enables the creation of real-time applications. It can serve React code effectively.\nPHP Laravel: Laravel is a powerful PHP framework known for its elegant syntax and expressive features. It can be used to serve React code alongside server-side logic.\n.NET C# Razor: Razor is a view engine that integrates with ASP.NET Core, a framework for building web applications with C#. It provides seamless integration of React code with server-side rendering.\nAWS: Amazon Web Services (AWS) offers a range of services for deploying React applications. You can use AWS Amplify, AWS Elastic Beanstalk, or AWS Lambda, depending on your specific needs.\n\nLet’s study three of them as a model of server implementation to our React Todo:\n\na lighter weight one with NodeJS, FeathersJS,\na natural leader Java EE, Spring Boot,\nand a seveless cloud option, AWS",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-1: todo & server"
    ]
  },
  {
    "objectID": "reactjs/rjslab4.html#api-rest-server-with-feathers",
    "href": "reactjs/rjslab4.html#api-rest-server-with-feathers",
    "title": "Lab#RE04-1: todo & server",
    "section": "2 API REST Server with Feathers",
    "text": "2 API REST Server with Feathers\n\nQuick start\nNode.js CRUD App Using React and FeathersJS\n\nLet’s outline a few strategies we can employ to achieve our objective.\nFirst, you need to create a new Feathers application by running\n npm create feathers &lt;name&gt;\nOnce the Feathers CLI is installed you may keep with the project.\n\n\nSince the generated application is using modern features like ES modules, the Feathers CLI requires Node 16 or newer.\nYou need to define your project.\n\nchoose if you want to use JavaScript or TypeScript.\nWhen presented with the project name, just hit enter, or enter a name (no spaces).\nNext, write a short description for your application.\nConfirm the next questions with the default selection by pressing Enter.\nIf you choose a database other than SQLite, make sure it is reachable at the connection string.\nusing MongoDB is nice, so, you should change the database selection.\n\nOnce you confirm the last prompt, the final selection should look similar to this:\n\n\n\nPrompt feathers\n\n\n\n2.1 Creating a project\nInstall\nnpm install @feathersjs/feathers --save\nnpm install -g @feathersjs/cli\nHelp\nfeathers --help\nCreation\nalbert@albert-virtual-machine:~/MyProjects/MyFeathers/TodoRest$ feathers -V\n5.0.5\n\nfeathers g app\nalbert@albert-virtual-machine:~/MyProjects/MyFeathers/TodoRest$ feathers g app\n? Do you want to use JavaScript or TypeScript? JavaScript\n? What is the name of your application? TodoRest\n? Write a short description Backend API Rest for ReactJS Todo\n? Which HTTP framework do you want to use? KoaJS (recommended)\n? What APIs do you want to offer? HTTP (REST), Real-time\n? Which package manager are you using? npm\n? Generate client? Can be used with React, Angular, Vue, React Native, Node.js \netc. No\n? What is your preferred schema (model) definition format? Schemas allow to \ntype, validate, secure and populate your data and configuration TypeBox \n(recommended)\n? Which database are you connecting to? Databases can be added at any time \nMongoDB\n? Enter your database connection string \nmongodb+srv://cifo:1234@clustertest.0h5f7.mongodb.net/todo\nCreate Service\nalbert@albert-virtual-machine:~/MyProjects/MyFeathers/TodoRest$ feathers generate service\n? What is the name of your service? todoapirest\n? Which path should the service be registered on? todo\n? Does this service require authentication? No\n? What database is the service using? MongoDB\n? Which schema definition format do you want to use? Schemas allow to type, \nvalidate, secure and populate data TypeBox  (recommended)\n    Wrote file src/services/todo/todo.schema.js\n    Wrote file src/services/todo/todo.js\n    Updated src/services/index.js\n    Wrote file test/services/todo/todo.test.js\n    Wrote file src/services/todo/todo.class.js\n\n\n2.1.1 Initial render feathers project\nAfter install and create, we could execute the project npm start and check the endpoint.\nAt browser, http://localhost:3030/ (it is the base URL for a Feathers server) we will consume the data.\nBy making HTTP requests to this endpoint using different methods (GET, POST, PUT, DELETE), along with appropriate paths and parameters, we can perform CRUD (Create, Read, Update, Delete) operations on the corresponding resources exposed by the Feathers server, thus interacting with the API and manipulating data.\nAfter check all CRUD operations are working we will use this endopont to serve our React todo app\n\n\n\n\n\ninitial render on http://localhost:3030/",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-1: todo & server"
    ]
  },
  {
    "objectID": "reactjs/rjslab4.html#api-rest-server-with-spring-boot",
    "href": "reactjs/rjslab4.html#api-rest-server-with-spring-boot",
    "title": "Lab#RE04-1: todo & server",
    "section": "3 API REST Server with Spring Boot",
    "text": "3 API REST Server with Spring Boot\nWe could create a Spring Boot server. It will publish our todo API Rest with a command-line runner that interacts with a Todo model.\nLet’s draw some ideas to approach this solution.\n\nCreate a new Spring Boot project using your preferred IDE or the Spring Initializr. Include the necessary dependencies for RESTful web services and JPA (Java Persistence API).\nCreate a Todo entity class to represent our Todo model. This class will have the properties id, text, completed, author, and due.\n\n\n\nTodo.java\n\nimport lombok.Data;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport java.util.Date;\n\n@Data\n@Entity\npublic class Todo {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private String id;\n    private String text;\n    private boolean completed;\n    private String author;\n    private Date due;\n\n    // Constructors, getters, and setters\n}\n\n\nCreate a repository interface TodoRepository that extends CurdRepository to handle CRUD operations for the Todo entity.\n\n\n\nTodoRepository.java\n\nimport org.springframework.data.jpa.repository.CrudRepository;\n\npublic interface TodoRepository extends CrudRepository&lt;Todo, String&gt; {\n}\n\n\nCreate a REST controller TodoController to handle the HTTP requests related to the Todo model.\n\n\n\nTodoController.java\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Date;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/todo\")\n@RequiredArgsConstructor\npublic class TodoController implements CommandLineRunner {\n\n    private final TodoRepository todoRepository;\n\n    @GetMapping\n    public ResponseEntity&lt;List&lt;Todo&gt;&gt; getAllTodos() {\n        List&lt;Todo&gt; todos = todoRepository.findAll();\n        return new ResponseEntity&lt;&gt;(todos, HttpStatus.OK);\n    }\n\n    @PostMapping\n    public ResponseEntity&lt;Todo&gt; createTodo(@RequestBody Todo todo) {\n        Todo createdTodo = todoRepository.save(todo);\n        return new ResponseEntity&lt;&gt;(createdTodo, HttpStatus.CREATED);\n    }\n\n    @Override\n    public void run(String... args) {\n        // Optional: You can add some initial Todos here if needed\n        Todo todo1 = new Todo();\n        todo1.setText(\"Example Todo 1\");\n        todo1.setCompleted(false);\n        todo1.setAuthor(\"John\");\n        todo1.setDue(new Date());\n        todoRepository.save(todo1);\n    }\n}\n\n\nRun the Spring Boot application, and the RESTful API for managing Todos will be available at http://localhost:8080/todo\nThe command-line runner is implemented in the run method of the TodoController class. You can use it to pre-populate the database with some initial Todos if needed.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-1: todo & server"
    ]
  },
  {
    "objectID": "reactjs/rjslab4.html#api-rest-server-with-aws",
    "href": "reactjs/rjslab4.html#api-rest-server-with-aws",
    "title": "Lab#RE04-1: todo & server",
    "section": "4 API REST Server with AWS",
    "text": "4 API REST Server with AWS\n\n\n\nAWS Architecture\n\n\nAWS API Gateway, AWS Lambda, and Amazon DynamoDB are indeed a great combination for building a serverless backend for a Todo React app.\nLet’s explore some options for addressing this issue.\n\n\nBy combining these AWS services, we can create a scalable and cost-effective serverless backend for our Todo React app.\n\nThe architecture eliminates the need for managing servers, allows for automatic scaling based on demand, and provides flexibility in terms of code organization and maintenance.\n\nAdditionally, AWS provides monitoring, logging, and security features, ensuring the reliability and security of your application.\n\n\nHere’s how each component could play a role in this architecture:\n\nAWS API Gateway: API Gateway acts as a front-end to your backend services.\n\nIt allows you to create a RESTful API that can receive requests from your Todo React app and route them to the appropriate backend services.\nWith API Gateway, you can define API endpoints, set up authentication and authorization, perform request validation, and handle rate limiting.\nIt also integrates well with other AWS services, making it easy to connect with Lambda and DynamoDB.\n\nAWS Lambda: Lambda is a serverless compute service that allows you to run code without provisioning or managing servers.\n\nIn the context of a Todo React app, you can write your backend logic as individual Lambda functions. Each function can handle a specific task, such as creating a new task, updating a task, or retrieving a list of tasks.\nLambda functions can be written in various programming languages, including JavaScript, which makes it convenient for integration with your React app.\nAPI Gateway can be configured to trigger the appropriate Lambda function based on the incoming request, and the function can then process the request and return a response.\n\nAmazon DynamoDb: DynamoDB is a fully managed NoSQL database service offered by AWS.\n\nIt provides high scalability, low latency, and automatic scaling, making it a great choice for storing and retrieving task data for a Todo app.\nDynamoDB organizes data in tables, and each table consists of items (representing tasks in this case) and attributes (representing properties of each task).\nYou can store and retrieve task data using DynamoDB APIs, and Lambda functions can interact with DynamoDB to perform CRUD operations on the tasks.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE04-1: todo & server"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-3.html",
    "href": "reactjs/rjslab5-3.html",
    "title": "Lab#RE05-3: chat & AWS",
    "section": "",
    "text": "📘 React JS Lab#RE05-3: chat & AWS\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\nwebsockets, provided by ReactJS framework and:\n\nuseState\nuseEffect\nuseContext\n\nAWS, Amanzon Web Services, architecture as a server-side:\n\nLambda\nDynamoDB\nAPI Gateway\nCloudwatch\nReference:",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-3: chat & AWS"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-3.html#backend-aws",
    "href": "reactjs/rjslab5-3.html#backend-aws",
    "title": "Lab#RE05-3: chat & AWS",
    "section": "1 Backend: AWS",
    "text": "1 Backend: AWS\n\n1.1 Free-tier\nThe AWS Free Tier is a program offered by Amazon Web Services (AWS) that provides users with access to a range of AWS services at no cost for a limited period.\n\nIt includes various services like Amazon EC2, Amazon S3, Amazon RDS, and more.\nThe Free Tier allows users to explore and experiment with these services, making it ideal for developers, startups, and small businesses.\nThe duration and usage limits vary depending on the service, but typically last for 12 months.\nIt’s a great opportunity to get hands-on experience with AWS and evaluate its capabilities without incurring any initial costs.\n\n\n\n\n\n\nBe careful with the free-tier\n\n\n\n\n\nAWS free-tier\n\n\n\n\n\nAWS free-tier\n\n\n\n\n\nAWS free-tier",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-3: chat & AWS"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-3.html#aws-api-gateway",
    "href": "reactjs/rjslab5-3.html#aws-api-gateway",
    "title": "Lab#RE05-3: chat & AWS",
    "section": "2 AWS API Gateway",
    "text": "2 AWS API Gateway\n\n\n\nAWS API Gateway\n\n\nAmazon API Gateway is a fully managed service by Amazon Web Services (AWS) that enables developers to create, publish, and manage APIs for their applications. It acts as a front door, allowing clients to securely access backend services, such as AWS Lambda functions or EC2 instances, through a consistent API interface. API Gateway provides features like authentication, authorization, request throttling, caching, and monitoring, which help enhance security, performance, and scalability. It also supports various API integration options and allows customization through API Gateway extensions. With API Gateway, developers can easily build and scale their APIs, making it a crucial component for building modern, serverless architectures on AWS.\nAWS API Gateway",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-3: chat & AWS"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-3.html#aws-lambdas",
    "href": "reactjs/rjslab5-3.html#aws-lambdas",
    "title": "Lab#RE05-3: chat & AWS",
    "section": "3 AWS Lambdas",
    "text": "3 AWS Lambdas\nAWS Lambda is a serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. You can trigger Lambda from over 200 AWS services and software-as-a-service (SaaS) applications and only pay for what you use.\nOfficial documentation:\n\nRun a Serverless “Hello, World!” with AWS Lambda\nExecuting a Lambda “Hello,\n\nBe careful with the chosen version, with NosdeJS as a server:\n\n\n\nNode version, 12 is deprecated, use 14\n\n\n\n3.1 MyChat: lambdas\nCode Lambda Conversation\nJSON websocket example scheme:\n{\n \"action\": \"conversation\",\n \"chatId\": \"DEVOPS\",\n \"userId\": \"ALBET#1666862612315\",\n \"connectionid\": \"aqEgvdwRFiACEYw=\",\n \"requesttime\": \"27/Oct/2022:09:23:31 +0000\",\n \"sourceip\": \"83.247.137.2\",\n \"text\": \"ASDFA\",\n \"timestampEpoch\": 1666862612315\n}",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-3: chat & AWS"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-3.html#aws-dynamodb",
    "href": "reactjs/rjslab5-3.html#aws-dynamodb",
    "title": "Lab#RE05-3: chat & AWS",
    "section": "4 AWS DynamoDB",
    "text": "4 AWS DynamoDB\nAWS DynamoDB is a fully managed, serverless, key-value NoSQL database designed to run high-performance applications at any scale. DynamoDB offers built-in security, continuous backups, automated multi-Region replication, in-memory caching, and data import and export tools.\nDynamoDB",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-3: chat & AWS"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-3.html#aws-iam-permissions-billing-console",
    "href": "reactjs/rjslab5-3.html#aws-iam-permissions-billing-console",
    "title": "Lab#RE05-3: chat & AWS",
    "section": "5 AWS IAM Permissions & Billing Console",
    "text": "5 AWS IAM Permissions & Billing Console\nIAM Permissions & Billing Console",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-3: chat & AWS"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-5.html",
    "href": "reactjs/rjslab3-5.html",
    "title": "Lab#RE03-5: data management",
    "section": "",
    "text": "📘 React JS Lab#RE03-5: data management\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\n\nthe use Context API and useContext hooks together to build a fully functional CRUD application that emulates a list of employees.\nlocal storage\nstores: redux/reducer, Zustand",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-5: data management"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-5.html#overall",
    "href": "reactjs/rjslab3-5.html#overall",
    "title": "Lab#RE03-5: data management",
    "section": "1 Overall",
    "text": "1 Overall\n\n\n\n\n\n\nModern React\n\n\n\nModern React apps leverage a variety of strategies to effectively manage state, ensure optimal performance, and enhance scalability.\nThree commonly used tools in this regard are context, Redux/reducer, and local storage.\nContext allows for efficient sharing of state across components, Redux/reducer provides a centralized state management solution, and local storage enables persistent storage of data.\nAdditionally, modern React apps utilize APIs such as REST and WebSockets to facilitate seamless communication with backend servers, further enhancing the app’s functionality and real-time capabilities.\n\n\n\n\nWe could add to our App:\n\nsome performance optimization: Techniques like memoization, virtualization, and code splitting.\nServer-side Rendering (SSR) and Static Site Generation (SSG): SSR and SSG techniques, like Next.js allow rendering React components on the server-side or generating static HTML files, improving SEO and initial load times.\n\n\n1.1 Data Management in React: Context, Redux, and Local Storage\nData management in React can be achieved using Context, Redux, and local storage. Context simplifies state management, Redux offers scalability, and local storage provides persistent storage for offline functionality.\n\n\n\n\n\n\n\n\n\n\nContext\nRedux\nLocal Storage\n\n\n\n\nPros\n\n\n\n\n\n\nSimplifies state management\nCentralized state management\nPersistent data storage\n\n\n\nLightweight and easy to use\nPowerful and scalable\nNo server-side dependency\n\n\n\nNo third-party dependencies\nOptimized for large apps\nSupports offline functionality\n\n\nCons\n\n\n\n\n\n\nLimited to one component tree\nSteeper learning curve\nLimited storage capacity\n\n\n\nMay lead to prop drilling\nBoilerplate code\nNot suitable for sensitive data\n\n\n\nPerformance impact with deeply nested consumers\nAdds complexity to smaller apps\nSynchronous operations may block UI\n\n\n\nReferences:\n\nReact Context API: What is it and How it works?\nZustand, redux/reducer\nuseLocalStorage",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-5: data management"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-5.html#reduxreducer",
    "href": "reactjs/rjslab3-5.html#reduxreducer",
    "title": "Lab#RE03-5: data management",
    "section": "2 redux/reducer",
    "text": "2 redux/reducer\n\n2.1 What is Redux?\n\n\n\nredux\n\n\n“Redux” is a pattern and library for managing and updating application state, using events called “actions”.\nIt serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.\n\n\n2.2 Why Should I Use Redux?\nRedux helps you manage “global” state - state that is needed across many parts of your application.\nThe patterns and tools provided by Redux make it easier to understand when, where, why, and how the state in your application is being updated, and how your application logic will behave when those changes occur.\nRedux guides you towards writing code that is predictable and testable, which helps give you confidence that your application will work as expected.\n\n\n2.3 Example: todo\n\n\n\ntodo tutorial official docs",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-5: data management"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-5.html#local-storage",
    "href": "reactjs/rjslab3-5.html#local-storage",
    "title": "Lab#RE03-5: data management",
    "section": "3 local storage",
    "text": "3 local storage\nWe could add local storage to our basic todo\nThe todos state is stored in the local storage using the localStorage.setItem method.\nIt is initialized with the stored todos from the local storage in the first useEffect hook. Whenever the todos state is updated, the second useEffect hook is triggered, and the updated todos are stored in the local storage using localStorage.setItem.\n\n\nTodos.jsx\n\n// ...\n\nconst Todos = () =&gt; {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() =&gt; {\n    const storedTodos = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (storedTodos) {\n      setTodos(JSON.parse(storedTodos));\n    }\n  }, []);\n\n  useEffect(() =&gt; {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  const fetchTodos = async () =&gt; {\n    // Fetching todos from API (unchanged code)\n    // ...\n  };\n\n  const addTodo = (newTodo) =&gt; {\n    // Adding todo to the state and localStorage\n    setTodos([...todos, newTodo]);\n  };\n\n  const updateTodo = async (id) =&gt; {\n    // Updating todo in the state and localStorage\n    const updatedTodos = todos.map((todo) =&gt; {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  const deleteTodo = async (id) =&gt; {\n    // Deleting todo from the state and localStorage\n    const filteredTodos = todos.filter((todo) =&gt; todo.id !== id);\n    setTodos(filteredTodos);\n  };\n\n  // ...\n\n  return (\n    &lt;ApiContext.Provider \n      value={{ todos, addTodo, updateTodo, deleteTodo }}&gt;\n      {/* ... */}\n    &lt;/ApiContext.Provider&gt;\n  );\n};\n\nexport default Todos;",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-5: data management"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-5.html#reduxreducer-or-context",
    "href": "reactjs/rjslab3-5.html#reduxreducer-or-context",
    "title": "Lab#RE03-5: data management",
    "section": "4 redux/reducer or context",
    "text": "4 redux/reducer or context\n\nPitfalls of overusing React Context\nComparing React Context and Redux",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-5: data management"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-4.html",
    "href": "reactjs/rjslab3-4.html",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "",
    "text": "📘 React JS Lab#RE03-4:API Rest Domains”\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\n\ndecoupling the communication layer by creating a separate service in React JSX and JS:\n\nservice layer: TodoService.js, api Rest Axios functions\nservice layer: TodoContext.js, creation of Context and repository of data and data-functions\nUI components: todoApp.jsx and its components to render the App.\nReferences:",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-4: API Rest Domains"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-4.html#approach",
    "href": "reactjs/rjslab3-4.html#approach",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "1 Approach",
    "text": "1 Approach\n\n1.1 Hexagonal Architecture\nThe architecture by domains to decoupled concerns, with a service layer handling CRUD operations and using a provider and context in React, shares some similarities with the Hexagonal Architecture (also known as Ports and Adapters Architecture).\n\n\nOnion architecture already used in other labs. Very similar to Hexagonal one.\n\n\n\nHexagonal Architecture\n\n\nIn the Hexagonal Architecture, the core principle is to decouple the application’s business logic from its external dependencies, such as databases, APIs, or user interfaces.\nIt promotes the use of ports and adapters to isolate and abstract these dependencies.\nIn our architecture, the service layer acts as an adapter that interfaces with external dependencies (such as the API through Axios) and exposes a clean interface (the CRUD operations) for the application’s business logic (the React components) to interact with.\nThe provider and context in React provide a way to propagate this functionality throughout the component tree, decoupling it from individual component props.\n\n\n\n\n\n\nHas our App an Hexagonal Architecture?\n\n\n\nWhile not an exact implementation of Hexagonal Architecture, the separation of concerns, decoupling of dependencies, and focus on clean interfaces align with the principles of Hexagonal Architecture.\nThis allows for better maintainability, testability, and flexibility in the application’s design.\n\n\n\n\n1.2 Decoupling the communication layer\nDecoupling the communication layer by creating a separate service in React JSX and JS architecture brings several benefits:\n\nSeparation of Concerns: By creating a dedicated service layer, you separate the concerns of handling API communication and data manipulation from the components that render the UI. This promotes a cleaner and more maintainable codebase.\nReusability: The service layer can be reused across multiple components or even in different parts of your application. By encapsulating API calls and data handling in a service, you can easily reuse the same logic without duplicating code.\nAbstraction: The service layer abstracts the details of API communication, such as HTTP requests and error handling, from the components. This abstraction simplifies the component code, making it more focused on rendering the UI and managing local state.\nTestability: Separating the communication layer as a service makes it easier to write unit tests. You can write tests specifically for the service functions, mocking the API calls and asserting the expected behavior, without the need to render the entire component hierarchy.\nMaintainable and Scalable: By centralizing the API communication logic in a service, it becomes easier to manage and update as your application grows. If the API changes or new features are added, you only need to update the service layer without affecting the components.\n\n\n\n1.3 mutable & immutable\n\n\n\ncodesanbox todo-app-6 folder-tree to decouple the communication-layer\n\n\nRegarding the separation of mutable and immutable code:\n\nThe service layer (TodoService.js) handles mutable code related to API requests and updates the server-side data.\n\nIt performs actions like creating, updating, and deleting todos by interacting with the server.\n\nThe component layer, specifically the TodoContext.js and UI components, deals with immutable code.\n\nIt manages the local state, such as the list of todos, and provides an interface for components to interact with the service layer.\nThe components use the provided functions to update the state or trigger API calls when necessary.\n\n\n\n\n1.4 Context API\n\n\n\n\n\n\nReact API Context\n\n\n\nReact API Context provides a way to share data across the component tree without passing props explicitly at each level. It allows you to create a context object that can be accessed by components nested within a Provider component. Context is primarily used for managing immutable data and state.\n\n\nThe context itself is immutable because it provides a fixed value that can’t be modified directly. The data or state it holds should be treated as immutable to maintain the unidirectional data flow and ensure predictable updates.\n\n\nHowever, the components consuming the context can read the data from the context and use it to update their state or trigger actions. The components can then propagate the changes back to the context by using the provided functions or callbacks.\n\n\n\n\n\n\nimmutability\n\n\n\nThe concept of immutability is crucial in React as it helps ensure predictable rendering and state management. Immutable data allows for efficient change detection and can optimize rendering performance, as React can easily determine when to re-render components based on changes in immutable data.\n\n\n\n\n1.5 Using React context\nWhen using React context, it’s important to follow best practices to make the most of this concept:\n\nDefine the context: Create a context object using React.createContext(), providing an initial value. This value should typically be an immutable object or state.\nWrap components with the Provider: Wrap the relevant components with the Provider component, passing the desired value as a prop. This will make the value accessible to the nested components.\nAccess the context value: Components that need access to the context can consume it using either useContext or by wrapping the component with the Context.Consumer component.\nManage mutable state locally: Components consuming the context can manage their own local state using useState, useReducer, or any other state management technique. They can update the state based on the context data and trigger actions accordingly.\nPropagate changes back to the context: If components need to update the context data or trigger actions that affect the context, they can use functions or callbacks provided by the context. These functions should handle the necessary updates and ensure immutability is maintained.\n\n\n\n1.6 fetching data: abort\nIf your Effect fetches something, the cleanup function should either abort the fetch or ignore its result:\n\n\n\nabort second trigger\n\n\n\nYou can’t “undo” a network request that already happened, but your cleanup function should ensure that the fetch that’s not relevant anymore does not keep affecting your application. If the userId changes from ‘Alice’ to ‘Bob’, cleanup ensures that the ‘Alice’ response is ignored even if it arrives after ‘Bob’.\n\n\n\n1.7 async/sync: passing down async functions\n\n\n\ncoupled UI components\n\n\nPassing asynchronous functions as props can lead to some drawbacks and is generally not considered a good practice. Here are a few reasons why it’s not recommended:\n\nProp Drilling: If you pass asynchronous functions as props to deeply nested components, it requires you to propagate these props through each intermediate component. This leads to a concept known as “prop drilling,” where components that do not directly need the asynchronous function still have to receive and pass it down. This can make your code more complex and harder to maintain.\nCoupling Components: By passing asynchronous functions as props, you tightly couple the components together. This means that if you decide to change the implementation of the asynchronous function or replace it with a different approach (e.g., using a different library, refactoring the code), you will have to update all the components that rely on that function. This can introduce unnecessary dependencies and make your codebase less flexible.\nCode Duplication: If multiple components require access to the same asynchronous function, passing it as a prop to each component results in code duplication. You’ll need to repeat the prop declaration and handling in each component, leading to redundant code. This can make it more difficult to maintain and update the codebase.\n\n\n1.7.1 using Context\n\n\n\n\n\n\nNote\n\n\n\nInstead of passing asynchronous functions as props, using a shared context and provider pattern, such as React Context, allows you to decouple the components and provide a centralized location for managing and accessing shared state and functions.\nBy using a context, you can avoid prop drilling and provide a clean and efficient way to access the asynchronous functions from any component within the context’s scope.\n\n\n\nAdditionally, using a provider and context pattern allows for better separation of concerns.\n\nThe provider handles the implementation details and provides the necessary functions, while the components consuming the context can focus on rendering and utilizing the shared data and functionality without worrying about how it is implemented or passed down through props.\n\nUsing context allows you to create a central place to manage and access the asynchronous function, making it available to any component that needs it within the context’s scope.\n\nThis avoids the need for prop drilling, where you would have to pass the function down through multiple levels of components as props.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nPropagating the asynchronous function via props can work, but it may lead to some issues.\nAsynchronous operations like API requests typically have a delay in fetching data, and the results may not be available immediately.\nIf you pass the function as a prop and try to execute it synchronously within a component, you won’t be able to wait for the response or handle any errors properly.\nIt can lead to unpredictable behavior and may cause the component to render with incomplete or incorrect data.\n\n\nBy using context, you can handle the asynchronous behavior appropriately, whether it’s using async/await or promises, and ensure that the components consuming the context can work with the asynchronous function correctly.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-4: API Rest Domains"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-4.html#step-by-step-todo-api-rest-domains",
    "href": "reactjs/rjslab3-4.html#step-by-step-todo-api-rest-domains",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "2 step-by-step todo api rest domains",
    "text": "2 step-by-step todo api rest domains\n\n\n\ntodo domains schema\n\n\n\n2.1 Service: TodoService.js\nThe TodoService is a JavaScript object that provides methods for performing various operations related to managing TODO items.\n\n\n\n\n\n\nobject literal notation in JavaScript\n\n\n\nIt is defined using object literal notation in JavaScript.\nObject literal notation is a way to define objects directly in the code without using a class or constructor function.\nIn the code, the TodoService object is created using curly braces {} and contains properties that are assigned arrow functions as their values.\nEach property represents a different operation related to managing TODO items.\nThe methods defined within the TodoService object can be called as functions, such as TodoService.getAllTodos(), TodoService.createTodo(), TodoService.updateTodo(), and TodoService.deleteTodo().\n\n\nIt utilizes the Axios library to make HTTP requests to a specified API base URL. The data handled by the TodoService:\n\nGet All Todos: This method retrieves all the TODO items from the API and returns the response data, which represents a collection of TODO items.\nCreate Todo: This method sends a POST request to the API with a new TODO item as the payload. It expects the response data to represent the newly created TODO item.\nUpdate Todo: This method sends a PUT request to the API, updating an existing TODO item with the provided data. It expects the response data to represent the updated TODO item.\nDelete Todo: This method sends a DELETE request to the API, deleting the TODO item with the specified ID. It expects the response data to indicate the success of the deletion operation.\n\n\n\nThe data handled by TodoService consists of TODO items and their associated properties, such as ID, title, description, status, etc. The specific structure and format of the TODO data are determined by the API being used.\n\n\nToDoService.js\n\nimport axios from \"axios\";\n\n///`${API_URL}/todo`\n// https://github.com/mockapi-io/docs/wiki/Quick-start-guide\n// API_URL mockapi.io\nconst API_BASE_URL = \"https://645.mockapi.io/v1\";\n\nconst TodoService = {\n  getAllTodos: async () =&gt; {\n    try {\n      const response = \n        await axios.get(`${API_BASE_URL}/todo`);\n      //console.log(\"retrieving todos:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error retrieving todos:\", error);\n      throw error;\n    }\n  },\n\n  createTodo: async (todo) =&gt; {\n    try {\n      const response = \n        await axios.post(`${API_BASE_URL}/todo`, todo);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error creating todo:\", error);\n      throw error;\n    }\n  },\n\n  updateTodo: async (todo) =&gt; {\n    try {\n      const response = \n        await axios.put(`${API_BASE_URL}/todo/${todo.id}`, todo);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating todo:\", error);\n      throw error;\n    }\n  },\n\n  deleteTodo: async (todoId) =&gt; {\n    try {\n      const response = \n        await axios.delete(`${API_BASE_URL}/todo/${todoId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n      throw error;\n    }\n  }\n};\n\nexport default TodoService;\n\n\n\n2.2 Service: TodoContext.js\nThe TodoContext is a React context created using the createContext function.\nIt serves as:\n\na repository of data related to TODO items in the React domain.\na provider access to the TodoService functions, which utilize Axios to interact with an external API for data operations.\na state manager, the TodoProvider component is responsible for managing the state of the TODO items using the useState hook.\n\n\nTodoContext and TodoProvider\n\n\n\n\n\n\nCode\nDescription\n\n\n\n\nuseEffect\nis used to fetch the initial TODO items when the component mounts. The fetchTodos function makes an asynchronous call to TodoService.getAllTodos() and updates the state with the retrieved data.\n\n\ncreateTodo\nadds a new TODO item by making a request to TodoService.createTodo() and updates the state by appending the created TODO item.\n\n\nupdateTodo\nupdates an existing TODO item by calling TodoService.updateTodo(), modifying the corresponding TODO item in the state.\n\n\ndeleteTodo\ndeletes a TODO item by invoking TodoService.deleteTodo() and removes the deleted item from the state.\n\n\nTodoContext.Provider\nwraps the children components, providing the todos state and the CRUD functions (createTodo, updateTodo, deleteTodo) through the context’s value.\n\n\n\n\n\nThe TodoContext and TodoProvider facilitate the management of TODO data in the React application by utilizing the TodoService functions to interact with an API, and provide the data and functions through the context to be consumed by JSX components in an immutable domain.\nfetchTodos\n\n\nToDoContext.js\n\nimport React, { createContext, useState, useEffect } \n  from \"react\";\nimport TodoService from \"./TodoService\";\n\nconst TodoContext = createContext();\n\nconst TodoProvider = ({ children }) =&gt; {\n  const [todos, setTodos] = useState([]);\n\n  //\n  useEffect(() =&gt; {\n    fetchTodos();\n  }, []);\n\n  //\n  const fetchTodos = async () =&gt; {\n    try {\n      const todos = await TodoService.getAllTodos();\n      setTodos(todos);\n      //console.log(\"todos:\", todos);\n    } catch (error) {\n      console.error(\"Error fetching todos:\", error);\n    }\n  };\n\ncreateTodo\n\n\nToDoContext.js\n\n\n  //\n  const createTodo = async (todo) =&gt; {\n    try {\n      const createdTodo = await TodoService.createTodo(todo);\n      setTodos((prevTodos) =&gt; [...prevTodos, createdTodo]);\n    } catch (error) {\n      console.error(\"Error creating todo:\", error);\n    }\n  };\n\nupdateTodo\n\n\nToDoContext.js\n\n //\n  const updateTodo = async (todoToUpdate) =&gt; {\n    try {\n      const updatedTodo = {\n        ...todoToUpdate,\n        completed: !todoToUpdate.completed\n      };\n      await TodoService.updateTodo(updatedTodo);\n      setTodos((prevTodos) =&gt; {\n        const updatedTodos = [...prevTodos];\n        const todoIndex = updatedTodos.findIndex(\n          (todo) =&gt; todo.id === updatedTodo.id\n        );\n        updatedTodos[todoIndex] = updatedTodo;\n        return updatedTodos;\n      });\n    } catch (error) {\n      console.error(\"Error updating todo:\", error);\n    }\n  };\n\ndeleteTodo\n\n\nToDoContext.js\n\n  //\n  const deleteTodo = async (todoId) =&gt; {\n    try {\n      await TodoService.deleteTodo(todoId);\n      setTodos((prevTodos) =&gt; \n        prevTodos.filter((todo) =&gt; todo.id !== todoId));\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n    }\n  };\n\n  //\n  return (\n    &lt;TodoContext.Provider \n      value={{ todos, createTodo, updateTodo, deleteTodo }}&gt;\n      {children}\n    &lt;/TodoContext.Provider&gt;\n  );\n};\n\nexport { TodoContext, TodoProvider };\n\n\n\n2.3 Main Component: ToDoApp.jsx\nThe main component is TodoApp, which renders a:\n\nheader,\na TodoAdd component for creating new TODO items, and\na TodoList component for displaying the list of TODO items.\n\nWithin TodoApp, the useContext hook is used to access the TodoContext and retrieve the todos, createTodo, updateTodo, and deleteTodo functions from the context.\nHandlers:\n\nThe handleCreateTodo function calls createTodo when a new TODO item is created in the TodoAdd component.\nThe handleUpdateTodo function invokes updateTodo when a TODO item is updated in the TodoList component.\nThe handleDeleteTodo function calls deleteTodo when a TODO item is deleted in the TodoList component.\n\nThe App component wraps the TodoApp component with the TodoProvider, providing the necessary context and functions to manage the TODO items.\n\n\nThe code-architecture establishes a connection between the TODO data management in TodoProvider and the rendering of components in TodoApp using the TodoContext. It allows for seamless communication and manipulation of TODO items within the React application.\n\n\nToDoApp.jsx\n\nimport React, { useContext } from \"react\";\nimport TodoAdd from \"./TodoAdd\";\nimport TodoList from \"./TodoList\";\nimport { TodoContext, TodoProvider } \n  from \"../service/TodoContext.js\";\n\nconst TodoApp = () =&gt; {\n  const { todos, createTodo, updateTodo, deleteTodo } = \n    useContext(TodoContext);\n\n  const handleCreateTodo = (todo) =&gt; {\n    createTodo(todo);\n  };\n\n  const handleUpdateTodo = (todo) =&gt; {\n    updateTodo(todo);\n  };\n\n  const handleDeleteTodo = (todoId) =&gt; {\n    deleteTodo(todoId);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Todo App&lt;/h1&gt;\n      &lt;TodoAdd onCreate={handleCreateTodo} /&gt;\n      &lt;TodoList\n        todos={todos}\n        onDelete={handleDeleteTodo}\n        onUpdate={handleUpdateTodo}\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst App = () =&gt; {\n  return (\n    &lt;TodoProvider&gt;\n      &lt;TodoApp /&gt;\n    &lt;/TodoProvider&gt;\n  );\n};\n\nexport default App;\n\n\n\n2.4 Component: ToDoAdd.jsx\nToDoAdd.jsx is used for creating new todo items.\nIt renders a form with input fields for entering the text, author, and due date of a new todo item. It uses React’s useState hook to manage the state of the input values. When the form is submitted, the onCreate function is called with an object containing the entered values.\nThe component exports the TodoAdd component using the export default statement, allowing it to be imported and used in other files.\n\n\nToDoAdd.jsx\n\nimport React from \"react\";\n\n// CRUD: create\nconst TodoAdd = ({ onCreate }) =&gt; {\n  const [text, setText] = React.useState(\"\");\n  const [author, setAuthor] = React.useState(\"\");\n  const [due, setDue] = React.useState(\"\");\n\n  const handleSubmit = () =&gt; {\n    onCreate({\n      text: text,\n      author: author,\n      due\n    });\n  };\n\n  return (\n    &lt;&gt;\n      &lt;hr /&gt;\n      &lt;h2&gt;Create new Todo&lt;/h2&gt;\n      &lt;hr /&gt;\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;p&gt;\n          &lt;label&gt; Text&lt;/label&gt;\n          &lt;br /&gt;\n          &lt;input\n            type=\"text\"\n            value={text}\n            onChange={(e) =&gt; setText(e.target.value)}\n            placeholder=\"Enter author name\"\n          /&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n          &lt;label&gt; Author&lt;/label&gt;\n          &lt;br /&gt;\n          &lt;input\n            type=\"text\"\n            value={author}\n            onChange={(e) =&gt; setAuthor(e.target.value)}\n            placeholder=\"Enter author name\"\n          /&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n          &lt;label&gt; Due&lt;/label&gt;\n          &lt;br /&gt;\n          &lt;input\n            type=\"date\"\n            value={due}\n            onChange={(e) =&gt; setDue(e.target.value)}\n          /&gt;\n        &lt;/p&gt;\n\n        &lt;button type=\"submit\"&gt;Add Todo&lt;/button&gt;\n      &lt;/form&gt;\n      &lt;br /&gt;\n      &lt;hr /&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default TodoAdd;\n\n\n\n2.5 Component: ToDoList.jsx\nThe ToDoList.jsx consists of two components:\n\nTodoItem: this component renders a single todo item with its details such as text, id, due date, author, and completion status.\n\nIt also provides options to delete the item and update its completion status.\n\nTodoList: this component renders a list of todo items.\n\nIt maps over the todos array and renders a TodoItem component for each item. It also handles the loading state when the todos array is null.\n\n\nThe components are exported using the export default statement, indicating that they can be imported and used in other files.\n\n\nToDoList.jsx\n\nimport React from \"react\";\n\n// CRUD: read and render item from list\nconst TodoItem = ({ todo, onDelete, onUpdate }) =&gt; {\n  const handleDelete = () =&gt; {\n    onDelete(todo.id);\n  };\n\n  const handleUpdate = () =&gt; {\n    onUpdate(todo);\n  };\n\n  return (\n    &lt;&gt;\n      &lt;h4&gt; {todo.text}&lt;/h4&gt;\n      &lt;p&gt;\n        Id: {todo.id}, \n        Date: {todo.due}, \n        by &lt;strong&gt;{todo.author} &lt;/strong&gt;\n      &lt;/p&gt;\n\n      &lt;div style={{ display: \"flex\", \n                    justifyContent: \"space-between\" }}&gt;\n        &lt;button onClick={handleDelete}&gt;Delete&lt;/button&gt;\n        &lt;div&gt;\n          Completed:{\" \"}\n          &lt;input\n            type=\"checkbox\"\n            value={todo.completed}\n            onChange={handleUpdate}\n          &gt;&lt;/input&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;br /&gt;\n      &lt;br /&gt;\n      &lt;hr /&gt;\n    &lt;/&gt;\n  );\n};\n\n//....\n\n\n\nToDoList.jsx\n\n// CRUD: read and create list\nconst TodoList = ({ todos, onDelete, onUpdate }) =&gt; {\n  //console.log(\"todos list\", todos);\n  if (todos === null) {\n    return &lt;p&gt;Loading...&lt;/p&gt;;\n  }\n\n  return (\n    &lt;&gt;\n      &lt;h2&gt;Todos List&lt;/h2&gt;\n      &lt;hr /&gt;\n      {todos.map((todo) =&gt; (\n        &lt;TodoItem\n          key={todo.id}\n          todo={todo}\n          onDelete={onDelete}\n          onUpdate={onUpdate}\n        /&gt;\n      ))}\n    &lt;/&gt;\n  );\n};\n\nexport default TodoList;",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-4: API Rest Domains"
    ]
  },
  {
    "objectID": "reactjs/rjslab3-4.html#versions",
    "href": "reactjs/rjslab3-4.html#versions",
    "title": "Lab#RE03-4: API Rest Domains",
    "section": "3 Versions",
    "text": "3 Versions\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\ntodoApp 0.4\nToDoGrid decoupling with domains: todoApp 0.4\n-\n-",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE03-4: API Rest Domains"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-2.html",
    "href": "reactjs/rjslab5-2.html",
    "title": "Lab#RE05-2: chat: backend",
    "section": "",
    "text": "📘 React JS Lab#RE05-2: chatchat backend AWS\nIn this lab, we will be using:\n\nthe react-router-dom, which is a package with bindings for using React Router in web applications:\nwebsockets, provided by ReactJS framework and:\n\nuseState\nuseEffect\nuseContext\n\nAWS, Amanzon Web Services, architecture as a server-side:\n\nLambda\nDynamoDB\nAPI Gateway\nCloudwatch\nReference:",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-2: chat: backend"
    ]
  },
  {
    "objectID": "reactjs/rjslab5-2.html#backend-aws",
    "href": "reactjs/rjslab5-2.html#backend-aws",
    "title": "Lab#RE05-2: chat: backend",
    "section": "1 Backend: AWS",
    "text": "1 Backend: AWS\nFor a chat app backend architecture using AWS Lambda, DynamoDB, and API Gateway for WebSockets, here’s a high-level overview:\n\nAPI Gateway Configuration:\n\nCreate an API Gateway WebSocket API to handle incoming WebSocket connections.\nDefine routes and integration with Lambda functions to handle various WebSocket events (e.g., connection, disconnection, message sending).\n\nLambda Functions:\n\nImplement Lambda functions to handle WebSocket events, such as connection, disconnection, and message handling.\nUse the AWS SDK to interact with DynamoDB for storing and retrieving chat messages and user information.\nImplement business logic for handling WebSocket events and updating the chat state in DynamoDB.\n\nDynamoDB:\n\nCreate a DynamoDB table to store chat messages and user information.\nDefine appropriate table schema to support the chat app requirements.\nUse DynamoDB Streams to capture changes in the chat state for real-time updates.\n\nLambda-DynamoDB Integration:\n\nConfigure Lambda functions to subscribe to the DynamoDB Streams associated with the chat table.\nUse the stream events to capture updates and propagate them to connected WebSocket clients.\nUpdate the chat state in DynamoDB based on WebSocket events and user interactions.\n\nAuthentication and Authorization:\n\nImplement user authentication and authorization mechanisms using AWS Cognito, IAM, or custom solutions.\nEnsure that WebSocket connections are authenticated and authorized to perform specific actions.\n\nAdditional Services:\n\nUtilize other AWS services as needed, such as AWS S3 for file storage, AWS CloudFront for content delivery, or AWS CloudWatch for monitoring and logging.\n\nScalability and High Availability:\n\nConfigure auto-scaling settings for Lambda functions and DynamoDB to handle varying chat loads.\nUtilize AWS Elastic Load Balancer or AWS API Gateway’s WebSocket APIs to distribute WebSocket connections across multiple instances.\n\n\nThis architecture leverages AWS Lambda for serverless compute, DynamoDB for storing chat data, API Gateway for WebSocket communication, and additional services for authentication, authorization, and scalability. It provides a scalable, real-time chat backend that can handle WebSocket connections, manage chat messages, and provide a reliable experience to users.\n\n1.1 Test backend\n\nWeb test websocket: Websocket King\n\n\n\n\nTest app with websocketking\n\n\nWebsocket King is a web tool used to test the functionality and performance of WebSocket connections.\nWith Websocket King, you can simulate WebSocket communication by connecting to the WebSocket endpoint of your AWS backend.\nIt provides an intuitive interface to send and receive WebSocket messages, monitor the connection status, and analyze the received data. By using Websocket King to test your AWS backend, you can ensure that the WebSocket communication is working correctly, validate the message handling, and assess the overall performance and reliability of your backend implementation.",
    "crumbs": [
      "React JS: Laboratories",
      "Lab#RE05-2: chat: backend"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "albertprofe wiki",
    "section": "",
    "text": "Code Learn\n\n\n\n\n\n\n\nNew / updated articles\n\n\n\n\n\n\n\n\nDate\nType\nArticle\nContent\n\n\n\n\n11/2024\nJava EE\n Lab#SE09-1\nSpring Boot SpringIO Conferences\n\n\n11/2024\nGist\nGit Repository Test Management Scripts\nGit & GH Repository Test Creation and Deletion Scripts\n\n\n10/2024\nJava EE\n Lab#SE08-1\nSpring Boot Restaurant Managament\n\n\n09/2024\nGist\nProjects UML\nJava SE UML 10 projects class exercise\n\n\n09/2024\nJava SE\n Lab#Restaurant\nJava SE UML & project lab\n\n\n09/2024\nDocumentation\n📜 IFCD0021-24\nOfficial documents IFCD0021-24 course\n\n\n09/2024\nBacklog\n🗂 Sprint Backlog\nSprint Backlog IFCD0021-24\n\n\n09/2024\nBacklog\n🗃 Product Backlog\nProduct Backlog IFCD0021-24\n\n\n\n\n\nOld articles 2024 (IFCD0210-24)\n\n\nOld articles\n\n\n\n\n\n\n\n\nDate\nType\nArticle\nContent\n\n\n\n\n06/2024\nBacklog\n🗂 Sprint Backlog\nSprint Backlog IFCD0210-24\n\n\n06/2024\nBacklog\n🗃 Product Backlog\nProduct Backlog IFCD0210-24\n\n\n06/2024\nNext JS\n NextJS movies next-flix-router project\nNextJS & mongoDB router\n\n\n06/2024\nNext JS\n NextJS movies next-flix project\nNextJS & mongoDB pages\n\n\n06/2024\nJava EE\n Spring Boot Security & Deploy AWS EC2\nSpring Boot Security & Deploy AWS EC2 with SSH\n\n\n06/2024\nJava EE\n Spring Boot Assistant AI\nSpring Boot Assistant AI\n\n\n06/2024\nJava EE\n Spring Boot JPA: JPQL & queries\nSpring Boot Queries\n\n\n05/2024\nReact JS\n Authentication ReactJS Cognito Identity User Pool AWS SDK JS v3\nReact JS AWS SDK, Auth, Cognito lab\n\n\n05/2024\nReact JS\n Chat React JS & AWS Server\nReact JS AWS, WebSocket, Semantic CSS lab\n\n\n04/2024\n📘 Book\n Expert One-on-One J2EE™ Design and Development\nNew added book on programming Java EE\n\n\n04/2024\nJava EE\n Spring Framework & Boot is now 20 & 10 years old: 2004-2014-2024\nSpring timeline\n\n\n03/2024\nJava EE\n Simulation wiki github\nSpring Boot, JPA, H2 DB, API Rest\n\n\n03/2024\nReact JS\n Lab#RE07-1: traffic lights Simulation\nReact JS data, form and hooks lab\n\n\n02/2024\n📜 News\n Technology Trends for 2024\nWhere the Industry Is Headed\n\n\n02/2024\n📘 Book\n Playing to win\nNew added book on strategy\n\n\n01/2024\nJava SE\n Lab#SE04-1: healthyFood Restaurant, Core Model\nJava SE UML lab\n\n\n01/2024\nReact JS\n Lab#RE06-1: healthyFood Restaurant\nReact JS composition lab\n\n\n\n\n\n\nSCRUM agile framework | Before SCRUM management | SCRUM of SCRUM: Less | Team Work, What is it? | Team Dynamics, how to manage | Mindset, the key for everything | Emotions and Thoughts | Managing mind and time | Beyond SCRUM\nDDD: Domain-driven design | Microservices design system | Spring Boot framework | SPA, Single Page App | Multi-page and server side rendering | Cloud serveless: AWS | APIs: REST, Websockets, SOAP, GraphQL | Kafka, event streaming\nScripting: BASH, (short for “Bourne again shell”) is a Unix shell | Structured and Procedural: C | OOP (Object-Oriented Programming): Java SE | COP (Components-Oriented Programming): React JS and React TS\nGit, a version control system | Git is used for source code management | GitHub git on cloud | GitLab / Subversion | Idea and GitHub 2023 | Git and GitHub 2023 CLI | CLI gH, to your terminal | IDE: Visual Code / IntellJ Idea\nabout this site, for documentation example. | JUnit for Spring Boot | Jest for JS React | Deploy on Heroku, Netlify, AWS Amplify | Jenkins, Docker and k8s\nArtificial Intelligence (AI): What It Is and How It Is Used | Machine Learning | Natural language & prompts | DALL-E text-to-image tool | ChatGPT | Artificial General Intelligence (AGI) | AI is categorized into four types\n\n\n\n\n Back to top"
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html",
    "title": "IFCD0210 Product Backlog",
    "section": "",
    "text": "Backlog course",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html#december-2023",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html#december-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "December 2023",
    "text": "December 2023\n\nBacklog course December 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#1\n1\n19/12/2023\n- Course Presentation  - Methodologies introduction: learning, sprints & paths  - Course Syllabus: Java Helsinki MOOC, Full Stack, Front-end, Server, Project, SCRUM, Git & DevOps, Linux and OS  - Set up tools: Linux, Network, Account, IDEs, Git, Documentation\n- Mooc Java  - Deep Dive Into Modern Web Development / Full Stack Web Development, Open Uni: Full Stack Web Development 5 cr / Full Stack - Answering the useful (right?) questions\n\n\n\n2\n21/12/2023\n- Set up tools: Linux, Network, Account, IDEs, Git, Documentation  - IDE: IntelliJ Idea  - Maven & Java SE project ++ IDE: TMC-NetBeans  ++ Manage Time&Mind:  (1) Keep Calm & Walk Away: Negative Logic, Pavoland, One tool JUST TO one problem, Optimal Solution, Give Up, Stress, Burnt out  (2) Plan your energy: match energy with tasks  ++ Bash example scripting\n- Idea  - Pavoland  - Bash executable  - What is Bash?  - TMCBeans MOOC Helsinki Java 2023\n\n\n\n3\n22/12/2023\n- Set up tools: Linux, Network, Account, IDEs, Git, Documentation  - IDE: Visual Code  - Create React App  ++ UML  ++ Documentation: quarto & .md\n- Visual Code  - Quarto Create  -Lab#SE00-1  - UML",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html#january-2024",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html#january-2024",
    "title": "IFCD0210 Product Backlog",
    "section": "January 2024",
    "text": "January 2024\n\nBacklog course January 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#2\n4\n08/01/2024\n- Linux   - Bash   - Time Management categories:  (1) Mindset/Grow  (2) Execution/Code-Algorithm  (3) Architecture/Programming  (4) Learning/A-Ha-Moment  (5) Personal/Path  - 4 cognitive tempos: Plan - Execute - Revision - Reflection  How does brain learn? Picnic &gt; Mechanism &gt; Consolidate  - Intro API Rest\n- Simple, complicate, complex problem    - Api Rest\n\n\n\n5\n09/01/2024\n- Git  - Quarto  - Intro Architecture: request response cycle, SPA & Server-side rendering, JPA  Time Management Tasks:  (1) Mooc  (2) Notes / Documentation / Reading / Prepare classes & lessons / Vocabulary  (3) Architecture / UML / Domains  (4) Personal Project  (5) Linux Devops  (6) Timetable  - Linux install soft: apt / snap / software manager  Homework: client-server architecture, request/response cycle, MVC, SPA versus server-side rendering\n- Request Response Cycle  - Spring MVC    - Spring Boot flow\n\n\n\n6\n11/01/2024\n- UML  - Linux: install apps, clone, snapshop, software manager, mirrors, repositories, update, upgrade, sudo, apt, snap  - Concepts: domain & immutability  - Quarto domain: local, remote, gh-pages, collaborative, auth (gh auth login, user commit&push, code sign in sync)\n\n\n\n\n7\n12/01/2024\n- UML: restaurant  ++ React Intro  - System tools linux:  (1) System reports, manager, settings, info  (2) Update, archive, software, driver, power, synaptic manager  (3) disk analyzer, disks  (4) GParted  (5) Htop sudo apt-get install htop \n- UML  - UML exemples  - IBM: An introduction to the Unified Modeling Language  - GParted\n\n\n\n\n\n\n\n\n\n#3\n8\n15/01/2024\n- UML: restaurant  - Idea: create Maven Java Project  - Classes: Person, Waiter, Menu, Order  ++ Mind Management: What is preventing you from planning the week?  ++ How to make a week plan  ++ Concepts: Architecture, MVC, Patterns, UML, Business Logic\n- UML  - UML exemples  - IBM: An introduction to the Unified Modeling Language  -  Create Project Maven Java SE  - Create Project Spring Boot  - MVC  - Client Server  - Car architecture: chassis, engine and steering wheel  \n\n\n\n9\n16/01/2024\n- UML: restaurant  - Classes: Person, Waiter, Menu, Order  - Create Methods and define features  - Tasks Categories:  (1) Project  (2) DDD  (3) UML/PseudoCode  (4) Code   Homework:  Mermaid\n- Create Project: Maven Java SE - What is Maven / Central Maven   - Create Project: Spring Boot  - Creaate Project: ReactJS  - Create Project: Quarto  - Class Diagram   \n\n\n\n10\n18/01/2024\n- Git  - Quarto: create a project and push to github  - What is the publishing system & quarto engine: .qmd &gt; pandoc &gt; .html &gt; git &gt; github &gt; gh-pages &gt; www - Create Lab#SE04-1: healthy Food   ++ Project phases: tentative, candidates, release, optimums  ++ Vocabulary EcoSystem: (1) Software Core tools: framework/engine/publishing system, Code language, SDK (software development kit)  (2) Development tools: Configuration system and format (.xml, .json, .yml ), Dependencies & packages management  (3) Developer tools: IDE, debugger, collaborative & version control, documentation (Mermaid)  (4) DevOps: test, deploy  - Before Team Work: listen, ask and words (vocabulary)\n- Quarto Markdown basics  - Markdown guide  - Markdown sandbox  - Markdown tutorial  - What is an SDK?  - Quarto tentative project\n\n\n\n11\n19/01/2024\n-  React introduction: the render cycle  - React Principles: SPA, COP, Virtual DOM, JSX, Hooks, Route  - Install nvm: Node Version Manager & create a React Project   - Quarto: create a project, push to github, publish  - Quarto Ecosystem/Architecture/Pipeline  Homework:  Git and Quarto \n- React JS: Introduction  - React JS: Create a React project  - Quarto publish  - Git\n\n\n\n\n\n\n\n\n\n#4\n12\n22/01/2024\n- healthyFood CLI App (1) Project: mockUp, user-case, versions, iterations  (2) Domains  (3) UML, flow-diagram & pseudo-code  (4) code in intelliJ Idea  - healthyFood push to GitHub  (1) set up tools  (2) 3-auth  (3) repos local & remote  (4) first commit & push   ++ Git: basics\n- Git Alatassian: Setting up a repository  - Git Alatassian: Git commit  - Git Alatassian: Git Revert  - Git Alatassian: Git Checkout   \n\n\n\n13\n23/01/2024\n-  healthyFood CLI App code, static & non-static, methods   - healthyFood CLI App (1) Project: mockUp, user-case, versions, iterations  (2) Domains  (3) UML, flow-diagram & pseudo-code  (4) code in intelliJ Idea  - healthyFood push to GitHub  (1) set up tools  (2) 3-auth  (3) repos local & remote  (4) first commit & push   - healthyFood CLI App v0.0\n- W3 Schools Java Hashmaps  - W3 Schools Java Hashmaps sandbox   - GitHub code v0.0  - Lab#SE04-1\n\n\n\n14\n25/01/2024\n- React introduction: the render cycle  - React Principles: SPA, COP, Virtual DOM, JSX, Hooks, Route  - Install nvm: Node Version Manager & create a React Project  - healthyFood React App: JSX components\n- React JS: Introduction  - React JS: Create a React project  - React Components - Learn React: Describing the UI   - Lab#RE06-1   Screen video: Thursday \n\n\n\n15\n26/01/2024\n- healthyFood React App: data and props  Homework:  (1) What is the difference btw Literal JS Object, JSON, Java Object  (2) Check the Describing UI from React\n- Lab#RE06-1  - GitHub code v0.1   - JSON crack  - No, really, what is JSON?  - Working with Literal Objects JS  - What is JSON?    Screen video: Friday \n\n\n\n\n\n\n\n\n\n#5\n16\n29/01/2024\n- JUnit Testing & debugger  - Dependencies: Junit, Lombok, JavaFaker  - UML healthyFood, growing UML class-diagram flux:  (1) adding UI as CLI  (2) controller  (3) fake DB class and Manager\n- Class and objects  - Testing  - Example Controller and Manager: Lab#SE02-04  - Lab#SE04-1     Screen video: Monday \n\n\n\n17\n30/01/2024\n- Main Loop and static methods  - MVC: what is really a Controller  - MVC: what is really a Manager  ++ Git: pull request, git visual Idea\n- Non-static class: Person - Lab#SE04-1  - Class and objects    Screen video: Tuesday \n\n\n\n18\n01/02/2024\n- React: composing the UI:  (1) UI as a tree, DOM, Render cycle  (2) rendering data, list, images  (3) the rules of JSX  (4) using Js within HTML: simple/double curly braces  (5) props  (6) conditional rendering \n- Render Cycle  - Rendering lists, Mapping lists  - The Rules of JSX  - Using curly braces: A window into the JavaScript world - Passing Props to a Component - Conditional Rendering    Screen video: Thursday-1   Screen video: Thursday-2 \n\n\n\n19\n02/02/2024\n- Pure components React  - React SPA vs Server side rendering  ++ Intro hooks\n- Keeping Components Pure  - Props and states  - Lab#RE06-1    Screen video: Friday",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html#february-2024",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html#february-2024",
    "title": "IFCD0210 Product Backlog",
    "section": "February 2024",
    "text": "February 2024\n\nBacklog course February 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#6\n20\n05/02/2024\n- Class & Ojbect: from creating an object to casting it - UML: sequence diagram useCse create Menu  - Main Loop while & static methods in Controller, HashMap in Mananger   Keywords: class, object, have/be, static, domains, scope, reference variable & new object, casting\n- Class and objects  - Example Controller and Manager: Lab#SE02-04  - Example UML: Lab#SE03-03 - Lab#SE04-1   Screen video: Monday-1 Screen video: Monday-2 \n\n\n\n21\n06/02/2024\n- Adding interactivity  - CRUD operations for HashMap: create and read  - We define 2 kind of classes for our Lab: (1) entity or (2) functional  - Why UML/doc?  (1) better understanding of the task for each iteration  (2) crete a unique page for the team: vocabulary, source-of-truth, code  (3) plan the task\n- Lab#SE04-1 - GitHub Code v0.2    Screen video: Tuesday-1   Screen video: Tuesday-2 \n\n\n\n22\n08/02/2024\n- Describing the UI: (1) components, (2) curly braces, (3) map & filter an array  - React JS: buttons, useState & onclick  - Render cycle  ++ Git: visual code branches management \n- Adding Interactivity - JavaScript in JSX with Curly Braces  - CodeSanbox map chemist/noChemist   Screen video: Thursday-1   Screen video: Thursday-2 \n\n\n\n23\n09/02/2024\n- React JS: State as a Snapshot  - Describing UI: (1) JSX syntaxis and(2) simple and double curly braces (3) how JSX works with data (model) and where\n- State as a Snapshot  - Rendering takes a snapshot in time  - JavaScript in JSX with Curly Braces  - Passing Props to a Component - Rendering Lists  - Props and states  - Lab#RE06-1    Screen video: Friday \n\n\n\n\n\n\n\n\n\n#7\n24\n12/02/2024\n- Adding more CRUD operations to menuManager  - Designing UML/MockUp createOrder   - Adding CRUD operations to model: table  - Creating DDD: new project structure refactoring with IDE help  ++ entity vs. functional (static methods) class\n- Class and objects  - Example Controller and Manager: Lab#SE02-04  - Example UML: Lab#SE03-03  - Lab#SE04-1  - healthyFood-createMenu-fluxExecution-v0.2   - menuManager-object    Screen video: Monday-1 Screen video: Monday-2\n\n\n\n25\n13/02/2024\n- DDD: Domain-driven design - Java SE Maven healthyFood restaurant first not-tentative solution with domains approach  - Adding CRUD operations to model: order \n- Static modifier  - Coupling and DDD - Lab#SE04-1    Screen video: Tuesday-1 Screen video: Tuesday-2\n\n\n\n26\n15/02/2024\n- React JS: buttons, useState & onclick  - Render cycle  - DDD: router and project structure  - React router  ++ Project - Domains - UML/pseudo-code - Code \n- Adding Interactivity  - ReactJs Project Structure  - React Router  - React router  - Mantis MUI Code  - Mantis MUI template  - Mantis MUI docs    - Lab#RE06-1      Screen video: Thursday-1 Screen video: Thursday-2\n\n\n\n27\n16/02/2024\n- React JS: State as a Snapshot  - DDD: router and project structure  - React router  ++ Adding style: w3.css: ‘Gourment au catering’:  (1) Inline CSS  (2) App.css in project root  (3) defining layout & paths \n- State as a Snapshot  - Rendering takes a snapshot in time  - w3.css templates  - Gourment and catering template  - Gourment and catering sandbox  - Lab#RE06-1     Screen video: Friday-1  Screen video: Friday-2\n\n\n\n\n\n\n\n\n\n#8\n28\n19/02/2024\n- CRUD operations for menu and table  - Create order mockup and UML ++ Git clone Java SE project: manage remotes  ++ How to plan, solving issues: (1) Learn to give up (2) Knowledge ilusion (3) Decision-Making (4) Anxiety (5) Resting & creating energy (6) Detect core\n- Static modifier  - Coupling and DDD  - Cloning a repository  - Managing remote repositories  - Pushing commits to a remote repository  - Lab#SE04-1 Screen video: Monday-1  Screen video: Monday-2\n\n\n\n29\n20/02/2024\n- Create (pseudocode)createOrder  ++ After pseudocode we need to make-decision: (0) quit (1) code pseudocode (2) document approach to feature (3) keep on with pseudocode (4) plan tasks (5) comment with senior (6) comment with AI\n- Lab#SE04-1  - createOrder static method Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n30\n22/02/2024\n- Deploying ReactJS: AWS Amplify  - ReactJS: calling a function vs. passing a function  - React JS: buttons, useState & onclick  - Render cycle\n- Software Lifecycle: SDLC  - Adding event handlers  - Adding Interactivity  - Lab#RE06-1: deploy  Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n31\n23/02/2024\n- Git: pull request ordersMapping & createOrder to master - React JS: State as a Snapshot  - DDD: router and project structure \n- State as a Snapshot  - Rendering takes a snapshot in time  - Lab#RE06-1: pull rquest  - AWS: Build a Full-Stack React Application  Screen video: Friday-1  Screen video: Friday-2\n\n\n\n\n\n\n\n\n\n#9\n32\n26/02/2024\n- React: useState - React: working with arrays  - React: debugger  ++ Code analysis  (0) render cycle (1) setting state triggers render  (2) state over time  (3) form, timeout, alert, textarea, event, onChange  Homework: code analysis (1) walking  (2) red point  (3) marketplace\n- setting state triggers render  - state over time  - Copying objects with the spread syntax  - Updating Objects in State  Screen video: Monday-1\n\n\n\n33\n27/02/2024\n- React: useEffect  - React: working with arrays  - MF01: proves pràctica i objectiva  - Code Analysis: check HW  ++ How to present/explain: (1) core introduction (2) what are there: enumerate parts (3) step by step, where init, where finish  HomeWork:  Code a React component simulating the pedestrians crossing states: people waiting, crossing and getting the finish side. The trigger is a button simulating the traffic lights: red/green. Use the walking, marketplace and red-point examples.\n- Updating Objects in State  - Updating Arrays in State  - codesandbox walking  - codesandbox marketplace  - codesandbox red-point   Screen video: Tuesday-1\n\n\n\n\n\n\n\n\n\n\n34\n29/02/2024\n - React: working with arrays  - React: debugger - React: axios  - Middleware  ++ Check HW: traffic lights render cycle\n- HW traffic lights Gist GH  - Spread syntax  - Copying objects with the spread syntax - Updating Arrays in State  - Axios, Lab#RE01-1 - Rest - traffic lights: code  - render cycle  Screen video: Thursday-1\n\n\n\n35\n01/03/2024\n- React: axios  - Git Graphto navigate branches- spread operator  - Consolidate several hooks into one  - useState managing a literal object\n - Axios, Lab#RE01-1  - Rest - Lab#RE07-1  - Copying objects with the spread syntax- Git graph  - Code github Lab#RE07-1 v0.0  Screen video: Friday-1",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html#march-2024",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html#march-2024",
    "title": "IFCD0210 Product Backlog",
    "section": "March 2024",
    "text": "March 2024\n\nBacklog course March 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#10\n36\n05/03/2024\n- React: useState & working with literal object - React: working with arrays  - React: debugger  - Code analysis  (0) render cycle (1) working with forms & immer (2) arrays state: immutable  (3) Updating objects inside arrays  ++ Lab#RE07-1 project: mockapi, axios, request-response cycle  Homework:  - React: working with arrays\n- Updating Objects in State  - Updating Arrays in State  - How does Immer work?  - Lab#RE01-1: axios example  - Lab#RE07-1   Screen video: Tuesday-1\n\n\n\n37\n06/03/2024\n- React: useEffect  - React: working with arrays  - react-router-dom: home/user simulation & mySimulations - user fake login/logout  - fake-server: mockapi  ++ Axios: introduction\n- Updating Objects in State  - Updating Arrays in State  - Lab#RE01-1: axios example  - Lab#RE03-3: axios & mockapi example  - Lab#RE07-1     Screen video: Wenesday-1  Screen video: Wenesday-2\n\n\n\n\n\n\n\n\n\n\n38\n07/03/2024\n- API Rest  - React: axios  - Adding graphics to trafficlighs:  (1) timeout setInterval and clearInterval  (2) state management pending, walking, completed, light  (3) random values to groupToWalk  (4) finish simulation and refresh\n- API Rest - Lab#RE07-1 - trafficlights SPA 1.0.1  - GitHub code v0.1   Screen video: Thursday-1\n\n\n\n39\n08/03/2024\n- useContext  - API Rest  - React: axios \n- useContext  - trafficlights SPA 1.2.1  - trafficlights SPA 1.3.0 - Lab#RE07-1    Screen video: Firday-1\n\n\n#11\n40\n11/03/2024\n- Spring Boot: request-response cycle  - Create project: sprint init  - @RestController and @Controller  - JPA: @Repository and application.properties  -  H2 db  - create @Service fake array of simulation data model\n- Create a project  - Controller  - RestController  - vaadin  - demoBoot0    Screen video: Monday-1  Screen video: Monday-2\n\n\n\n41\n12/03/2024\n- Sprint Boot CRUD API Rest simulation  - @RestController and @Controller  -  Postman  - Thymeleaf: a modern server-side Java template engine\n- Postman   - api rest boot code example  - Thymeleaf SSR Java template engine  - View  - Thymeleaf  - Lab#SB00-4: project reference     - simulations Spring Boot: project v0.1 - simulations Spring Boot: code v0.1  Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n42\n14/03/2024\n- Spring Boot JPA & database H2  - What is a H2 db?  - application.properties H2 configuration  - JPA: @Repository & @Entity\n- Create Boot TH & H2 - Spring Boot Data  - Spring Boot JPA  - DDL- simulations Spring Boot: project v0.2 - simulations Spring Boot: code v0.2    Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n43\n15/03/2024\n- Spring Boot JPA & database H2  - Containers: ResponseEntiyy, Optional & Model  - Postman\n- Create Boot TH & H2 - Spring Boot Data  - Spring Boot JPA  - Postman  - simulations Spring Boot: project v0.3 - simulations Spring Boot: code v0.3    - code reference: CRUD RestController  Screen video: Friday-2\n\n\n#12\n44\n18/03/2024\n- useContext to decouple axios from render  - trafficlights adding react-router-dom  - project structure  - trafficlights adding axios all CRUD operations:  (1) addSimulation: Adds a new simulation to the list  (2) deleteSimulation: Deletes a simulation from the list by its ID  (3) updateSimulation: Updates a simulation in the list with new data\n- trafficlights SPA 1.3.0  - trafficlights SPA 1.4.0  - Props and children  - Lab#RE07-1  Screen video: Monday-1\n\n\n\n45\n19/03/2024\n- useContext to decouple axios from render  - trafficliights adding axios all CRUD operations:  (1) addSimulation: Adds a new simulation to the list  (2) updateSimulation: Updates a simulation in the list with new data  - project structure \n- trafficlights SPA 1.4.1  - trafficlights SPA 1.4.2  - Lab#RE07-1  - How do I hide an API key in Create React App?  - HTML Event Attributes  Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n46\n21/03/2024\n- trafficlights adding useEffect: clear return and cancelToken  - Tasks to integrate code into trafficlights v0.3:  (1) components tree and hooks: useContext  (2) react-router-dom and routes  (3) axios and dataSimulations.js  (4) CRUD operation upon simulation  (5) vite project / nvm\n- reference: healthyFood router  - Enabling Cross Origin Spring  - Lab#RE07-1        Screen video: Thursday-1\n\n\n\n47\n22/03/2024\n- trafficlights adding login  - Integrate CRUD, routes, new tree components, useContext and dependenies to trafficlights v0.3\n- Albertu’s dilemma - Lab#RE07-1  - code github      Screen video: Friday-1  Screen video: Friday-2",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html#april-2024",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html#april-2024",
    "title": "IFCD0210 Product Backlog",
    "section": "April 2024",
    "text": "April 2024\n\nBacklog course April 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#13\n48\n02/04/2024\n- AI landscape: FlowiseAI  - On-premises or cloud server: nextCloud - Spring Boot: complete CRUD operations for simulation  - CRUD: Create and Update  - @RestController  - Postman requests   - Pràctiques IFCD0210\n- Spring: from EJB to Boot  - Expert One-on-One J2EE™ Design and Development  - NextCloud  - NextCloud Apps  - FlowiseAI  - NextJS: use client - use server  Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n49\n04/04/2024\n- JPA: @OneToMany  - Model: user/simulations  - Spring Boot: complete CRUD operations for simulation  - CRUD: Create and Update  - @RestController  - Postman requests  - DevOps: 5 backups: MV on SSD, Snapshoot VirtualBox, Linux Timeshift, GitHub. NexCloud  - How to create a React Project:  (1) From Zero: vite or create-react-app  (2) Meta framework: NextJS  (3) Templates: Mantis  (4) Builders: retool  (5) AI  - How to get an onbording project? /scr? dependencies? read.me? dpendencies management, yarn, npm, maven, graddle? data? pom.xml or package.json? Where is main or index.html? How to execute? \n- Spring Model  - Spring JPA  - Spring Data  - mui store - mantis - reactbuilder  - retool - NextJS  Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n50\n05/04/2024\n- JPA: @OneToMany  - Model: user/simulations\n- lab reference  - simulations 0.4 project & code   Screen video: Friday-1  Screen video: Friday-2\n\n\n#14\n50\n08/04/204\n- JPA: @OneToMany & @ManyToOne  - Model: player/simulations  - H2 DB in-memory  - @RestController: CRUD simulation & player  - @Service: populate: assign player to simulation  - application.properties\n- lab reference  - simulations 0.4 project & code -JPA: defining query methods      Screen video: Monday-1  Screen video: Monday-2\n\n\n\n51\n09/04/204\n- JPA: @OneToMany & @ManyToOne - H2 DB in-memory  - Model: player/simulations  - Model: player/subscriptions  - pull-request add subscription domain to project\n- simulations v0.5: code  - simulations v0.5: project  - merge pull-request subscription  - postman api request docs  Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n52\n11/04/204\n- git: pull-request with conflicts to merge, visual editor  - trafficlights  - useReducer \n- Resolving a merge conflict on GitHub  - Merging a pull request - pull-request  - input to state    - Choosing the State Structure  - useReducer  - Lab#RE07-1  Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n53\n12/04/204\n- git: pull-rquest simulations card & paymnent trafficlights  - useReducer\n- useReducer   - useReducer todos  - Lab#RE07-1  Screen video: Monday-1  Screen video: Monday-2 \n\n\n#15\n54\n15/04/2024\n- useReducer  - How declarative UI compares to imperative - Principles for structuring state   - CV & Presentation: value - clear - authentic (1) Mandatory: tech vocabulary, what you aply for (Junior Java Backend), great intro, path, guide reader to focal points, use action-verbs: plan, organize, execute, review, etc  (2) Avoid: divagation, generlization, emotional-like wording, indirect wording (could, may, etc)  (3) Optional: font, color, images\n- input to state    - Choosing the State Structure  - useReducer  - Lab#RE03-1  Screen video: Monday-1  Screen video: Monday-2\n\n\n\n55\n16/04/2024\n- useReducer  - Sharing State Between Components: Accordion  - Preserving and Resetting State\n- Sharing State Between Components  - Single source of truth  - Preserving and Resetting State - Lab#RE03-1       Screen video: Tuesday-1  Screen video: Monday-2\n\n\n\n\n\n\n\n\n\n\n56\n18/04/2024\n- Extracting State Logic into a Reducer  - Scaling Up with Reducer and Context  - useReducer\n- Extracting State Logic into a Reducer  - Scaling Up with Reducer and Context - useReducer  - todo-reducer: code  - Lab#RE03-1     Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n57\n19/04/2024\n- Extracting State Logic into a Reducer - Scaling Up with Reducer and Context  - useReducer\n- Extracting State Logic into a Reducer  - Scaling Up with Reducer and Context - todo-reducer: code  - reducer examples  - useReducer  - Lab#RE03-1 Screen video: Friday-1  Screen video: Friday-2\n\n\n#16\n58\n22/04/2024\n- Boot: JPA @ManyToMany  - simulations: University  - DB n:m examples: (1) user &lt;1:n&gt; borrow &lt;n:1&gt; book  user &lt;n:m&gt; book  (2) user &lt;1:n&gt; order &lt;n:1&gt; item (suboptimal implementation for this use-case) (3) user &lt;1:n&gt; order &lt;1:n&gt; orderDetail &lt;n:1&gt; item  user &lt;n:m&gt; item\n- Spring Boot Data  - Spring Boot JPA ID  - Spring Boot Mappings JPA  - UML patterns  - code LABs JPA reference - simulations 0.8 project   Example orderDtail & order   Example orderDtail & order: order 100   Example orderDtail & order: order 101    Screen video: Monday-1  Screen video: Monday-2\n\n\n\n59\n23/04/2024\n- Boot: JPA @ManyToMany  - simulations: University  - Git: conflict resolution on local IntellJIdea and pull-request\n- Spring Boot Data  - Spring Boot JPA ID  - Spring Boot Mappings JPA  - code LABs JPA reference  - simulations 0.8 project  - simulations 0.7 project  Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n60\n25/04/2024\n- Boot: JPA @ManyToMany - @JoinColumn 1:n @Entity n:1  - simulations: University & TrafficTrial  - DB NoSQL: mongoDB\n- mongoDB - Spring Boot and MongoDB  - Accessing Data with MongoDB - Lab#SB00-6 - simulations 0.8 project      Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n61\n26/04/2024\n- Boot: JPA @ManyToMany - @JoinTable n:m  - simulations: University & TrafficTrial  - DB NoSQL: mongoDB  - Curriculum Vitae: How to properly write it\n- Java Persistence  - Curriculum Vitae  Screen video: Friday-1  Screen video: Friday-2\n\n\n#17\n62\n29/04/2024\n- Boot: JPA @ManyToMany - @JoinTable n:m  - simulations filling DB:  (1) University  (2) TrafficTrial  (3) Enrollment  - DB NoSQL: mongoDB  - String connection, pom & app properties - @Document & MongoRepository \n- mongoDB - Spring Boot and MongoDB  - Accessing Data with MongoDB - Lab#SB00-6  - simulations 0.8 project - simulations 0.9 project - simulations 1.0 project     Screen video: Monday-1  Screen video: Monday-2\n\n\n\n63\n30/04/2024\n- DB NoSQL: mongoDB  - simulations 1.0.0: imagePlayer  - simulations 1.0.1: player 1:n imagePlayer\n- mongoDB - Spring Boot and MongoDB  - Accessing Data with MongoDB - Lab#SB00-6  - Spring Data  - simulations 1.0 project  Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n64\n02/05/2024\n- React: mongoDB  - H2 DB local: application.properies  - simulations 1.0.1: player 1:n imagePlayer - DB NoSQL: mongoDB \n- Ref code: local H2 creation - H2 DB  - H2 github  - Lab#SB00-6 - simulations 1.0.1 project  Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n65\n02/05/2024\n- React: mongoDB  - simulations 1.0.1: player 1:n imagePlayer - simulations 1.0.2 queries   - AWS: S3 buckets  - Intro: Lab#RE05 React-AWS\n- JPQL Language Reference - Defining Query Methods  - Spring Cloud for Amazon Web Services - Spring Cloud AWS  - Querying MongoDB-React  Screen video: Friday-1  Screen video: Friday-2",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html#may-2024",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html#may-2024",
    "title": "IFCD0210 Product Backlog",
    "section": "May 2024",
    "text": "May 2024\n\nBacklog course May 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#18\n66\n06/05/2024\n- simulations 1.0.1: player 1:n imagePlayer - React Reducer & AWS: Chat Project  - What is a websocket?  - Postman Websocket & Websocket King test\n- simulations 1.0.1 project  - Lab#RE05-1: chat & websockets  - Websocket - Websocket King  Screen video: Monday-1  Screen video: Monday-2\n\n\n\n67\n07/05/2024\n- What is a websocket?  - React Reducer & AWS: Chat Project  - AWS DynamoDB: NoSQL  - Server & client\n- Postman websocket - Lab#RE05-1: chat & websockets  - Server and Client Components - myChat  - myChat: wiki    Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n68\n09/05/2024\n- React Reducer & AWS: Chat Project v0.0  - Semantic UI React  - SocketProvider.js with useContext & useEffect  - NoSQL: DynamoDB: partitionKey & sortKey\n- semantic UI React  - Lab#RE05-1: chat & websockets  - NoSQL scheema example  - myChat: wiki    Employee NoSQL example partition & sort key    Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n69\n10/05/2024\n- React Reducer & AWS: Chat Project v0.1 - Semantic UI React  - SocketProvider.js with useContext & useEffect  - Tree component chat \n- Lab#RE05-1: chat & websockets  - myChat: wiki  ChatRoom v0.1    Screen video: Friday-1  Screen video: Friday-2\n\n\n#19\n69\n13/05/2024\n- React Reducer & AWS: Chat Project v0.1, fake-login - SocketProvider.js with useContext, useEffect & useRef  - Tree component chat decoupled  - Semantic UI React  - Snippets Visual Code React\n- myChat: wiki v0.1 - Reactjs code snippets - Keyboard shortcuts for Linux     Screen video: Monday-1  Screen video: Monday-2\n\n\n\n70\n14/05/2024\n- React Reducer & AWS: Chat Project v0.1, conversation  - Semantic UI React  - ConversationFeed.jsx coupled: useContext, useEffect, useState, useReducer \n- myChat: wiki 0.1    Screen video: Tuesday-1  Screen video: Tuesday-2 \n\n\n\n\n\n\n\n\n\n\n71\n16/05/2024\n- React Reducer & AWS: Chat Project v0.1, decoupled conversation  - ConversationFeed.jsx decoupled: useContext, useEffect, useState, useReducer\n- myChat: wiki  Screen video: Thursday-1  Screen video: Thursday-2\n\n\n#20\n72\n22/05/2024\n- React Reducer & AWS: Chat Project v0.1.5  - SocketProvider.js and implementation of decoupled conversation  - React Reducer & AWS: Chat Project v0.2:  (1) Fetch & display contacts & groups, chatMenu.jsx  (2) NoSQL DynamoDB model to fetch user’s contacts  - AI: Mistral models, Spring AI, LMStudio, Vaadin\n- myChat: wiki   - Mistral Chat  - Mistral Tech  - Spring AI  - LM Studio  - Vaadin  - CodeGPT: Chat & AI Agents - Spring Boot, Mistral, DB  Screen video: Wednesday-1  Screen video: Wednesday-2\n\n\n\n73\n23/05/2024\n- React Reducer & AWS: Chat Project v0.2  - NoSQL DynamoDB model to fetch user’s contacts  - Fetch & display contacts & groups, chatMenu.jsx\n- myChat: wiki  Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n74\n24/05/2024\n- React Reducer & AWS: Chat Project v0.2  - Fetch & display contacts & groups, chatMenu.jsx  - Display user’s contacts and groups & select\n- myChat: wiki  Screen video: Friday-1  Screen video: Friday-2\n\n\n#21\n75\n27/05/2024\n- React Reducer & AWS: Chat Project v0.2.2  - Fetch & display contacts & groups, chatMenu.jsx  - Display user’s contacts and groups & select  - Saving Conversation to Local Storage\n- myChat: wiki  Screen video: Monday-1  Screen video: Monday-2\n\n\n\n76\n28/05/2024\n- React Reducer & AWS: Chat Project v0.3  - Create chat, add contact in chatMenu.jsx \n- myChat: wiki  Screen video: Tuesdya-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n77\n30/05/2024\n- Spring Boot JPQL  - SDK AWS JS v3: uploader.js - CreateChat.jsx: upload Avatar  - AWS: Cognito and Identity User Pool  - AWS: create guest Identity User and public S3\n- JPA Query Methods  Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n78\n31/05/2024\n- Spring Boot AI  - AWS: Cognito and Identity User Pool  - AWS: create guest Identity User and public S3\n- Mistral Chat  - Mistral Tech  - Spring AI  - LM Studio  - Vaadin  - CodeGPT: Chat & AI Agents - Spring Boot, Mistral, DB  Screen video: Friday-1  Screen video: Friday-2",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html#june-2024",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html#june-2024",
    "title": "IFCD0210 Product Backlog",
    "section": "June 2024",
    "text": "June 2024\n\nBacklog course June 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#22\n79\n03/06/20274\n- JPQL: JPA Query Methods  - Login Auth Cognito React:  (1) AWS Cognito Identity Pool User  (2) React TS/JS AuthService.js  (3) React TS/JS Components  (4) AWS SDK JS v3\n- JPA Query Methods  - Login Auth Cognito React  - Code GitHub  - OAuth 2.0   Screen video: Monday-1  Screen video: Monday-2\n\n\n\n80\n04/06/20274\n- JPQL: JPA Query Methods - Login Auth Cognito React:  (1) AWS Cognito Identity Pool User  (2) React TS/JS AuthService.js  (3) React TS/JS Components  (4) AWS SDK JS v3  - Plan the new feature: Forgot password and resend CODE\n- Login Auth Cognito React  - Code GitHub     Screen video: Tuesday-1   Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n81\n06/06/20274\n- Login Auth Cognito React  - Define sequential-flow by functions UML: (1) sign-up feature  (2) sign-in feature  - JPQL: JPA Query Methods  - Spring Boot AI\n- JPA Query Methods - JPA Query examples     Screen video: Thursday-1  Screen video: Thursday-2\n\n\n\n82\n07/06/20274\n- Login Auth Cognito React  - Define sequential-flow by functions UML: (1) forgotPassword feature - Spring Boot AI Chat-pdf Project:  (1) Spring Boot AI  (2) Vectorial DB: MongoDB / AstraDB (cassandra)  (3) Data source: local pdf  (4) LLM text: OpenAI / AWS Bedrock Titan  (6) Amazon Titan Text Embeddings models \n- Spring AI  - Flowise, LMStudio  - AstraDB  - OpenAI Postman  - Llama chat, Perplexity.ai, Gemini AI - Amazon Titan Text Embeddings    Screen video: Friday-1  Screen video: Friday-2\n\n\n#23\n83\n10/06/2024\n- ReactJS vs Spring Java ecosystem:  (1) ReactJS & NextJS  (2) Spring Boot, Quarkus, Thymeleaf & HTMX  - Spring Boot AI  - Embedding data from data source & LLM  - MongoDB Vector DB\n- HTMX  - Thymeleaf  - quarkus  - Spring Boot Assistant AI  - Spring AI  - Amazon Titan Text Embeddings    Screen video: Monday-1  Screen video: Monday-2\n\n\n\n84\n11/06/2024\n- Java 8: streams  - Reactive Paradigm Spring Webflux  - Spring Boot AI  - Embedding data from data source & LLM  - MongoDB Vector DB\n- Java 8  - Spring WebFlux  - Webflux example  - Spring Boot Assistant AI  - Spring AI  - Amazon Titan Text Embeddings - Spring Boot AI ApplicationRunner  - LangChain JS Bedrock  Screen video: Tuesday-1  Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n85\n13/06/2024\n- Spring Boot Security  - Spring Boot Thymeleaf & HTMX\n- Spring Security  - Securing a Web Application  - Spring Boot Demo Security  - HTMX vs React  - HTMX  Link  Screen video: Thursday-1  Screen video: Thursday-2 \n\n\n\n86\n14/06/2024\n- Spring Boot Deploy: (1) Create and test Spring Boot App (2) Get app–0.0.1-SNAPSHOT.jar from target: app.jar (3) Create AWS EC2 VM T2.micro Linux (4) Log in from local to EC2 VM with SSH .pem file  (5) install JAVA and upload app.jar  (6) run app.jar  \n- securityDeploy wiki  - AWS EC2  - AWS EC2 key pairs .pem file    Screen video: Friday-1   Screen video: Friday-2 \n\n\n#24\n87\n17/06/2024\n- Spring Boot Security Deploy:  (1) code  (2) scp: security copy  (3) Environment variables  (4) Elastic IP  - ReactJS & NextJS  - Features NextJS  - next-flix NextJS Project & mongoDB  - NextJS: server side NodeJS & API\n- securityDeploy wiki  - next-flix wiki - Start building with Next.js  Screen video: Monday-1  Screen video: Monday-2 \n\n\n\n88\n18/06/2024\n- ReactJS & NextJS  - Client side rendering  - Rendering movies  - Next.js pages: getServerSideProps()  - Strategies/tools to data fetching:  (1) API Route  (2) Next.js static generation (Server Side Rendering)  (3) getServerSideProps()  (4) Client Side Fetching  -Spring Boot Client/Server: restTemplate  - Interfaces (typescript / Java SE)\n- next-flix wiki - Data Fetching  - getServerSideProps()  - Library6c / Library6s  - JavaSE Interfaces    Screen video: Tuesday-1   Screen video: Tuesday-2\n\n\n\n\n\n\n\n\n\n\n89\n20/06/2024\n- ReactJS & NextJS  - Static rendering: Server side rendering  - getStaticProps()  - Next.js App Route / Pages router  - Server Actions\n- next-flix wiki - getStaticProps()  - What is Next.js?  - Pages Routes  - App Router    Screen video: Thursday-1  Screen video: Thursday-2 \n\n\n\n90\n21/06/2024\n- ReactJS & NextJS  - images management  - Optimizations  - NextJS.pages:  (1) getStaticProps()  (2) SSR: static rendering  - Server Actions\n- next-flix wiki - getStaticProps()  - Optimizations  Screen video: Friday-1  Screen video: Friday-2\n\n\n#25\n91\n26/06/2024\n- Formació Copmplementària  - Inserció laboral, sensibilització mediambiental i en la igualtat de gènere  - Prevenció Riscos laborals\n- Programa Formatiu  - Prevenció Riscos laborals - Recursos Formatius \n\n\n\n92\n27/06/2024\nFormació Copmplementària  - Inserció laboral, sensibilització mediambiental i en la igualtat de gènere  - Prevenció Riscos laborals\n- Programa Formatiu  - Prevenció Riscos laborals - Recursos Formatius \n\n\n\n\n\n- NextJS: server actions  - App router vs Pages router  - CRUD nextJS  - Pagination & search  - Movies Detail:  (1) dynamic router (slug)  (2) Linking and Navigating\n - next-flix (pages/router)  - next-flix-router (app/router)  - App Router  - Dynamic Routes  - Linking and Navigating   Screen video: Wednesday-1   Screen video: Thursday-1",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-product-24.html#july-2024",
    "href": "ifcd0210-24/ifcd0210backlog-product-24.html#july-2024",
    "title": "IFCD0210 Product Backlog",
    "section": "July 2024",
    "text": "July 2024\n\nStarting Pràctiques: 28/06/2024\nFinishing Pràctiques: 26/07/2024",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-sprint-24.html",
    "href": "ifcd0210-24/ifcd0210backlog-sprint-24.html",
    "title": "IFCD0210 Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifcd0210-24/ifcd0210backlog-sprint-24.html#sprint26-pràctiques-junejuly-2024",
    "href": "ifcd0210-24/ifcd0210backlog-sprint-24.html#sprint26-pràctiques-junejuly-2024",
    "title": "IFCD0210 Sprint Backlog",
    "section": "Sprint#26 Pràctiques (June/July 2024)",
    "text": "Sprint#26 Pràctiques (June/July 2024)\n\nBacklog Sprint#26 June/July 2024\n\n\n\n\n\n\n\n\n\n#\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#26\n\n28/06/2024\nStarting Pràctiques\n\n\n\n\n\n26/07/2024\nFinishing Pràctiques",
    "crumbs": [
      "IFCD0210-24 Docs",
      "IFCD0210 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044backlog-product.html",
    "href": "ifcd044/ifcd044backlog-product.html",
    "title": "IFCD044 Product Backlog",
    "section": "",
    "text": "Backlog course",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044backlog-product.html#november-2023",
    "href": "ifcd044/ifcd044backlog-product.html#november-2023",
    "title": "IFCD044 Product Backlog",
    "section": "November 2023",
    "text": "November 2023\n\nBacklog course November 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#1\n1\n15/11/2023\n- Topics preesentation  - Books groups formation (3 groups):  (1) The Status Game: On Social Position and How We Use It by Will Storr,  (2) The Righteous Mind: Why Good People Are Divided by Politics and Religion by Jonathan Haidt,  (3) Mindset: The New Psychology of Success by Carol S. Dweck,  (4) The Intelligence Trap: Why Smart People Make Dumb Mistakes by David Robson  - SCRUM Toolbox: mindset, moral emotions, status game, lateral, focus, trap intelligence, time management, scrum  - Meetings: boycotts  - Homework: CIA sabotage, Pareto Principle, Negative and positive Logic \n- Week1  - Reading List Agile  - Moral emotions Jonathan Haidt\n\n\n\n2\n16/11/2023\n- What is your impediment?  - Planning poker  - Timetable matching with High/Medium/Low Energy (Time management)  - How to document? Notion, Obsidian, Quarto   - Homework: 3 pillars, 4 foundations, 12 principles  - Planning poker\n- Airplanes game  - Foundatios  - Principles  - Pillars\n\n\n\n3\n17/11/2023\n- Iteration: path dependence, pavoland, need? work?, uncertainty cone  - Impediment: what it is, fuda (fear, uncertainty, doubt)  - Time: execution vs. planning, lateral, order, time management  - Pillars (3), Foundations (4), Principles (12 )  - Spaguetti challenge  Homework: Microsoft 2010-20 agile transformation\n- Uncertainty cone  - Path Dependence  - The parabole of Turkey  - fud  - Microsoft agile\n\n\n#2\n4\n20/11/2023\n- User stories, tasks, done and habits  - What is an habit and how to change it?  - 3 pillars, 4 foundations and SCRUM definition  Homework:  User stories, tasks, done and habits  Examples of Foundations bad haibt\n- Week 1: Meetings and impediments  - Week 2: User stories, tasks and habits\n\n\n\n5\n21/11/2023\n- 4 foundations  - User stories, tasks, done and habits  - Kanban  - Invest  - Business Model Generation  - Acceptance Criteria vs. Done    Homework: What is your impediment to mantain your posiiton  Acceptance Criteria vs. Done\n- What is kanban?  - What is a kanban board?  - Week 2: User stories, tasks and habits \n\n\n\n6\n22/11/2023\n- How to deliver value  - Writing  - WH-questions  ++ Product Backlog: introduction  ++ Product backlog: financials, sells, UML, mockUp, Funcitonal Diagrams,..  ++ Product Backlog: CD/CI & documentation  ++ Four roles in SCRUM:  (1) Scrum Master  (2) Product Owner  (3) Specialist: Operations Chief, Architect, DevOps, Logistic Chief  (4) Team \n- How to Merge Two Airlines - Week 3: Communication and value \n\n\n\n7\n23/11/2023\n- Communication: Writing, WH-questions, Vocabulary  - How to deliver value: Pareto  - Multitasking: Mind’s Limit Found: 4 Things at Once \n\n\n\n\n8\n24/11/2023\n- The mom test  - Bias: placebo, ikea, halo, anchoring, confirmation  - Books Presentation  Homework:  Habits  I, as a student, want to use daily/weekly metrics tho check the +1% or -!% of my training \n  \n\n\n#3\n9\n27/11/2023\n- SCRUM: the Guide, concepts and execution, Sprint Zero  - Class projects Review  - Principles ++ Product Owner & Product Backlog: from a piece of paper to Jire\n- Guide  - Principles\n\n\n\n10\n28/11/2023\n- Scrum Master  - What is and what is not  - On the same page  - Servent-leader  ++ How important is cultural context: world lead industries (Germany, Japan, China)  ++ From Zero to One: the most difficult step  ++ We must map catalan agile companies  Homework:  Scrum Guide  Principles  I, as a student, want to have some metrics to …  Servent Leader\n- Scrum Master\n\n\n\n11\n29/11/2023\n- Mindset  - Nicholas Taleb, Skin in the Game, Antifragile and the Soviet-Harvard dellusion  - Book Presentation: The trap of intelligence  - React path  ++ How to sell: to sell is to guide someone into a new path  ++ I, as a student, want to have some metrics to … (1) qty sprint-goal done: exercises, subjects, items  (2) to detect core knowledge in new areas and domains  (3) to be able to explain clearly to other people a core concept  (4) to apply new knowledge and to connect it to old one creating relationships  (5) qty and quality notes & documentation\n- Mindset\n\n\n\n12\n30/11/2023\n- Product Owner and Product Backlog  - What is and what is not  - Product Owner and Scrum Master  - Antifragile + Agile + Lateralisation  ++ Netflix Architecure: system design   Homework:  Create a figure with three Nodes: (1) Rigid - (2) Anti-Fragile - (3) Fragile and its connections, domains, etc …\n- Product Owner  - Of two minds: Iain McGilchrist and the tyranny of left hemisphere religion    Everyone wants to be Netflix of their Industry / Netflix Spring Boot Architecture\n\n\n\n13\n01/12/2023\n- Team: self-organized  - Scrum Master & Product Owner  - The Specialist   ++ How to make a good decision: quality info, energy high, why  ++ Impediments to be creative: auto-boycott, not being antifragile, not energy-mental, not knowledge network, no purpose, believing fake-concepts  ++ Markdown and quarto intro  Homework:  Create your own metrics for this week\n- Markdown Basics  - Quote Ian McGilchrist impediments are nice  - How to create a quarto web  - From Hilltop to Nixon",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd044/ifcd044backlog-product.html#december-2023",
    "href": "ifcd044/ifcd044backlog-product.html#december-2023",
    "title": "IFCD044 Product Backlog",
    "section": "December 2023",
    "text": "December 2023\n\nBacklog course December 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#4\n14\n04/12/2023\n- Four different cognitive load, time-boxing and job-type in SCRUM events:  (1) Planning: listing, pareto, goal, time management, decisionMaking  (2) Executing: creativity, getting thinks done, Albertus’ dilemma, problem-solving, focus  (3) Reviewing: anti-fragile, feedback analysis, listening, communication, selling  (4) Reflecting: metrics, impediments, understanding, optimal solution, decisionMaking, meeting rules\n- Does planning help for execution? The complex relationship between planning and execution  - Brain Activity Associated with the Planning Process during the Long-Time  - Survival or Growth Mindset? / 5 Practical Ways to Move from a Survival Mindset to a Growth Mindset as a Childcare Business Owner\n\n\n\n15\n05/12/2023\n- Albertus’ Dilemma  - What is exactly time management?  - Beyond mindset\n- Albertus’ Dilemma  - Mind & Time Management  - The State of Developer Ecosystem 2023 / Blog: The State of Developer Ecosystem 2023  - dukkha / Three poisons  - Can we create mental energy?  - Scrum: How to do twice as much in half the time, Jeff Sutherland, TEDxAix\n\n\n#5\n16\n11/12/2023\n- Before SCRUM  - Team Dynamics: We are not Rationals   - Mindset: survival vs growth  ++ smarter not harder: decision making (0) the illusion of knowledge  (1) agile: impediments, iteration and grow +1%  (3) intuition & creativity\n- Before SCRUM  - The soviet union delusion  - Antifragile  - Mindset matters  - S&P 500: $100 in 1957 → $67,136.47 in 2023 / S&P-1 / S&P-2\n\n\n\n17\n12/12/2023\n- Emotions and Thoughts  - Moral Emotions and Rider/Elephant   - Team Dynamics: We are not Rationals  - What is the illusion of knowledge? There is a unique tool, master-key, to solve all questions: knowing everything  - Debate: the main source of knowledge acquisition\n- Team Dynamics  - The illusion of knowledge II  \n\n\n\n18\n13/12/2023\n- Emotions and Thoughts  - Moral Emotions and Rider/Elephant \nEmotions and Thoughts\n\n\n\n19\n14/12/2023\nFCOO03 Inserció Laboral, sensibilització medi ambiental igualtat de gènere   - Decision Making  ++ Steps to decision making:  (1) info, purpose, mental-energy  (2) place, time, ritual  (3) decision comes to you via intuition  ++ How to create your own Clear Thinking to make good decisions  (1) physical path: nutrition, exercise, stress, mental health  (2) own habits to create context where you make decisions: music, walk, sea or mountain, silence, shower  (3) learn to recognize intuition  - Book: Range & Generalists  - Books presentation: Focus, Master and his Emissary, The Righteous Mind\n- Range: Why Generalists triumph in a specialized world  - Range  - List of emotions  - The zone\n\n\n\n20\n15/12/2023\nFCOO03 Inserció Laboral, sensibilització medi ambiental igualtat de gènere   - Beyond SCRUM  - Recommended books  - Finance: basics  - Mental Energy: basics  ++ We face impediments to understand our client through iterations and goals. This understanding in key to decision making and finding out the proper balances:  (1) mindset: fixed, growth, survival  (2) anti-fragile and lateralization  (3) identity, change and moral emotions (status game and rider/elephant)  (4) productivity vs. creativity\n- SCRUM test  - Books  - Brain Energy  - The Compound Effect",
    "crumbs": [
      "IFCD044 Docs",
      "IFCD044 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021backlog-sprint-24.html",
    "href": "ifcd0021-24/ifcd0021backlog-sprint-24.html",
    "title": "IFCD0021 Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021backlog-sprint-24.html#sprint10-front-end-november-2024",
    "href": "ifcd0021-24/ifcd0021backlog-sprint-24.html#sprint10-front-end-november-2024",
    "title": "IFCD0021 Sprint Backlog",
    "section": "Sprint#10 Front-End (November 2024)",
    "text": "Sprint#10 Front-End (November 2024)\n\nBacklog course November 2024 table\n\n\n\n\n\n\n\n\n\n#\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#10\n43\n11/11/2024\n- Vaadin / Thymeleaf:  (1) Spring IO Conference UML  (2) Model, DB H2, Properties. JPA  (3) JUnit Tests  (4) Vaadin   ++ Java Front Options:  (1) Spring Boot + Rest + React/Angular/Vue  (2) Thymeleaf & HTMX (3) Flow: Vaadin  (4) Hilla: React\n- Lab#SB09-1: SpringIO Conference  - BooksPageable  - Spring IO  - Scalling: Pagination   - Vaadin Start  - Primefaces  - JSF  - employeeCourse\n\n\n\n44\n12/11/2024\n- Vaadin / Thymeleaf  (1) Spring IO Conference UML  (2) Model, DB H2, Properties. JPA  (3) JUnit Tests  (4) Vaadin: UI components  (5) data.sql  - JavaSE: static / final modifier   ++ intellIJIdea live reload  ++ @JsonTypeInfo & @JsonSubTypes\n- Lab#SB09-1: SpringIO Conference  - RestaurantVaadin: 3333400  - BooksPageable  - Spring IO  - Scalling: Pagination  - static / final  - Vaadin Components  - Vaadin Tutorial       - @JsonTypeInfo\n\n\n\n45\n13/11/2024\n- Vaadin / Thymeleaf  (1) Spring IO Conference UML  (2) Model, DB H2, Properties. JPA  (3) JUnit Tests  (4) Vaadin: Routing   ++ Web tasks: css, mobile, connect to server, layout, routing, security, deploy, model, business logic, SSR and CSR, components  ++ Vaadin Hilla: autocrud\n- RestaurantVaadin: 33b1284  - Atmosphere  - Vaadin Chat GitHub  - How to deploy  - fly.io   - Autocrud  - Autocrud Sandbox\n\n\n\n46\n14/11/2024\n- Vaadin  (1) Security: Login (2) Binding: Client &lt;-&gt; Server  - Websockets  (1) HTTP  (2) Client: Instance methods\n- RestaurantVaadin: Login  - Securing a Web Application  - Spring Security6.3.4  - Lab#RE05-1: Websockets  - Chat: wiki  - Network: Websocket \n\n\n\n47\n15/11/2024\n- Websockets:  (1) Server: AWS / Spring Boot  (2) Client: React   ++ How To Communicate: target, value, engagement, ratio noise/signal, keywords, core, pitfalls, metrics  ++ DevOps: Linux, Scripting (Bash/Py), Networking, Software Cycle\n- Lab#RE05-1: Websockets  - Chat: wiki  - Network: Websocket    - spring.io  - Spring Boot Courses  - Control your AWS costs  - napkin ai\n\n\n\n\n\n\n\n\n\n\n48\n18/11/2024\n- FCOO03: Formació Complementària (Inserción laboral, sensibilización medioambiental y en la igualdad de género)\n- FCOO03   - OpenStack  - Vaadin Collaboration Kit  - Collaboration Engine Sampler  - Chat Project: AWS and WS  - WebSocketKing  - Spring Boot Stomp Library8\n\n\n\n49\n19/11/2024\n- FCOO03: Formació Complementària (Inserción laboral, sensibilización medioambiental y en la igualdad de género)\n- FCOO03",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021-24.html",
    "href": "ifcd0021-24/ifcd0021-24.html",
    "title": "IFCD0021 Official Docs",
    "section": "",
    "text": "Denominació: Fullstack júnior web developer amb Java\nCodi: IFCD0021\nHores: 270h\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 2\nQualificació professional de referència: IFCD0021 - ullstack júnior web developer amb Java",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021-24.html#identificació-del-certificat-de-professionalitat",
    "href": "ifcd0021-24/ifcd0021-24.html#identificació-del-certificat-de-professionalitat",
    "title": "IFCD0021 Official Docs",
    "section": "",
    "text": "Denominació: Fullstack júnior web developer amb Java\nCodi: IFCD0021\nHores: 270h\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 2\nQualificació professional de referència: IFCD0021 - ullstack júnior web developer amb Java",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021-24.html#documentació",
    "href": "ifcd0021-24/ifcd0021-24.html#documentació",
    "title": "IFCD0021 Official Docs",
    "section": "Documentació",
    "text": "Documentació\n\nPROGRAMA Formatiu: Fullstack júnior web developer amb Java\nFitxa: Fullstack júnior web developer amb Java",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021-24.html#programa-formatiu",
    "href": "ifcd0021-24/ifcd0021-24.html#programa-formatiu",
    "title": "IFCD0021 Official Docs",
    "section": "Programa formatiu",
    "text": "Programa formatiu\n\nIntroducció a la programació i al disseny de programari amb Java (5h)\nProgramació orientada a objectes amb Java (75h)\nBases de dades SQL (MySQL) (30h)\nDesenvolupament d’APIs amb Spring Framework (75h)\nDesenvolupament d’interfícies d’usuari web amb Angular (75h)",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0021-24/ifcd0021-24.html#competència-general",
    "href": "ifcd0021-24/ifcd0021-24.html#competència-general",
    "title": "IFCD0021 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDesenvolupar programari per a aplicacions web full stack que incloguin tant l’entorn client (front end) com el servidor (back end) amb el llenguatge de programació Java, Spring i Angular.\n\n\nEl programador web s’encarrega de desenvolupar aplicacions web pels navegadors en entorn client i servidor(full stack) amb Java, el framework Spring, Angular i MySQL. Ocupacions: desenvolupador d’aplicacions web, programador/a, analista, tècnic web … Tecnologies: HTML, CSS, javascript, Angular, SQL, Spring, Java…",
    "crumbs": [
      "IFCD0021-24 Docs",
      "IFCD0021 Official Docs"
    ]
  },
  {
    "objectID": "spring/spring-basics.html",
    "href": "spring/spring-basics.html",
    "title": "Spring Framework",
    "section": "",
    "text": "📘 What is Spring Framework/Platform?\nSpring Framework is a open-source powerful lightweight application development platform used for robust, fast and scalable Web Apps with Java.\nAt its core, Spring framework is really just a dependency injection of control container, with a couple of convenience layers (database access, proxies, aspect-oriented programming, RPC, a web MVC framework) added on top.\nSpring Framework is a Java platform that provides comprehensive infrastructure support for developing Java applications. Spring handles the infrastructure so programmers can focus on the application.\nSpring enables you to build applications from plain old Java objects (POJOs) and to apply enterprise services non-invasively to POJOs. This capability applies to the Java SEprogramming model and to full and partial Java EE.",
    "crumbs": [
      "Spring Legacy",
      "Spring Framework"
    ]
  },
  {
    "objectID": "spring/spring-basics.html#origins-1994",
    "href": "spring/spring-basics.html#origins-1994",
    "title": "Spring Framework",
    "section": "3.1 Origins: 1994",
    "text": "3.1 Origins: 1994\nJava has come a long way since its inception in 1991 when Sun launched “Project Green”, which tried to integrate digitally controlled consumer devices like TV sets, CD players, and computers.\nThis was a humble beginning\nSun threw the gauntlet down in 1995 by releasing Java as open source. The feedback was tremendous, and fixed more than just a few bugs. This drove Java deep into the server-side development industry.\n\nIn June and July 1994 – after three days of brainstorming with John Gage (the Director of Science for Sun), Gosling, Joy, Naughton, Wayne Rosing, and Eric Schmidt – the team re-targeted the platform for the World Wide Web.\n\n\n\nJava meets the web, July, 1994\n\n\nTogether, servlets and JSPs pages enabled programmers to develop modular, maintainable, scalable, and portable Web applications with Java.\nThis was between 1994 and 1995. The Java Servlet API was first publicly announced at the inaugural JavaOne conference in May 1996. The Servlet1 specification was created by Pavni Diwanji while she worked at Sun Microsystems.\n\n\n\n\n\nServlet api\n\n\nBy 1996, Java had already become popular among developer for its friendly APIs and automated Garbage Collection and was starting to be widely used in back-end systems.\nOne problem, however, was that most of these systems needed the same set of standard capabilities – such as persistence, transaction integrity, and concurrency control – which the JDK lacked at that time. That, naturally, led to many home-grown, closed implementations.\nIBM stepped forward and released the Enterprise Java Bean (EJB) specification in 1997, with the promise that developers could write code in a standard way, with many of the common concerns automatically handled.\nThat’s how the first Java framework for the enterprise was born; the specification was later adopted by Sun in 1999 as EJB 1.0.\nFast forward twenty years and EJB 3.2 is now the subset of the JavaEE 9 specification.\nThose years saw the release of the first incarnation of Enterprise Java, but soon after, important technologies joined the mix, such as Servlets, Messaging, and Enterprise Java Beans.",
    "crumbs": [
      "Spring Legacy",
      "Spring Framework"
    ]
  },
  {
    "objectID": "spring/spring-basics.html#j2ee-1999",
    "href": "spring/spring-basics.html#j2ee-1999",
    "title": "Spring Framework",
    "section": "3.2 J2EE: 1999",
    "text": "3.2 J2EE: 1999\nOn paper, J2EE was meant to become the standard way of building Java enterprise applications. In other words, it was supposed to be the game-changer in terms of overall architecture.\n\n\nThe platform was known as Java 2 Platform, Enterprise Edition or J2EE from version 1.2, until the name was changed to Java Platform, Enterprise Edition or Java EE in version 1.5.\nEverything sounded quite promising with J2EE. However, when it came to actually implementing things using J2EE, everything wasn’t so rosy. Some of the major problems with J2EE were in regards to EJB or Enterprise Java Beans.\n\n\n\nIf you see the above timeline, Spring started in 2004. Just before that, 2001-2003 was the period during which everyone became fed up with EJB. The launch of Spring coincided with the worst phase in EJB implementation.\n\n\nDue to these problems, there was discontent among developers with regards to EJB and J2EE.\n\nEJB became that bad uncle in the family that you want to avoid because they mess up everything. It basically fell out of favor. That’s when Spring came in.\n\nRod Johnson, the founder of Spring, started on this journey to create an alternative to J2EE. This led to the birth of Spring Framework.\nHowever, the guys at Sun Microsystems (the creators of Java and J2EE) took note of the rise of Spring. They tried to understand the reasons behind the declining popularity of J2EE. And they also realized that the EJB implementation was the major problem.\nSo they actually went back and re-engineered EJB. In other words, they made it simpler to use. This coincides with Java EE5 release in 2006. Since then, J2EE has steadily improved with every new version.\nPractically speaking, at this point of time, both Spring and J2EE are pretty equal in terms of features. You can basically do the same thing with both the frameworks. However, the J2EE folks were slightly slow to solve the problems and the earlier problems with EJB had tarnished the image of J2EE forever.\nIt was so late, during this time, Spring has gone from strength to strength. It has gathered a tremendous amount of momentum in the industry and the developer community.\n\n\n\n\n\n\nJ2EE, Java EE or Jakarta?\n\n\n\nJava EE was maintained by Oracle under the Java Community Process.\nOn September 12, 2017, Oracle Corporation announced that it would submit Java EE to the Eclipse Foundation.\nThe Eclipse top-level project has been named Eclipse Enterprise for Java (EE4J).\nThe Eclipse Foundation could not agree with Oracle over the use of javax and Java trademarks.\nOracle owns the trademark for the name “Java” and the platform was renamed from Java EE to Jakarta EE",
    "crumbs": [
      "Spring Legacy",
      "Spring Framework"
    ]
  },
  {
    "objectID": "spring/spring-basics.html#spring-2004",
    "href": "spring/spring-basics.html#spring-2004",
    "title": "Spring Framework",
    "section": "3.3 Spring: 2004",
    "text": "3.3 Spring: 2004\nAs we have seen, IBM set the foundations with EJB specifications. So, Java EE and EJB were the first platforms & specificatios trying to solve the problems around building enterprise Java applications.\nThen, the EJB and J2EE specifications/frameworks were to be surpassed by Spring.\nThe first try, before the rise of Spring, was written by Rod Johnson, who contributed to the understanding of J2EE development practices and with the publication of his book Expert One-on-One J2EE Design and Development in October 2002 mean to develop without EJB.\n\n\nRoderick “Rod” Johnson is an Australian computer specialist who created the Spring Framework and co-founded SpringSource, where he served as CEO until its 2009 acquisition by VMware.\n\n\n\nExpert One-on-One J2EE Design and Development\n\n\nIn 2011, Johnson became Chairman of Neo4j’s Board of Directors. At the JavaOne 2012 it was announced that he joined the Typesafe Inc. Company board of directors. In 2016, he founded Atomist.\nSpring Framework was indeed influenced by many concepts discussed in Expert One-on-One J2EE Design and Development, particularly in terms of addressing the complexities and limitations of J2EE development.\nSpring provided a more lightweight and flexible alternative to the heavy, XML-configured, and often cumbersome J2EE frameworks of the time. Besides, it worked flawlessly without EJB: more modular, decoupled and with lots of cofiguration options for the users.\nThe framework was first released under the Apache 2.0 license in June 2003. The first production release, 1.0, was released in March 2004.\nThe Spring 1.2.6 framework won a Jolt productivity award and a JAX Innovation Award in 2006.\n\n\n\nFollowing is the timeline shown about major releases in the history of Spring\n\n\nSpring 2.0 introduced in 2006 support for various annotations for configuration purposes.\nSpring Framework 4.0 was released in December 2013: Notable improvements in Spring 4.0 included support for Java SE (Standard Edition) 8, Groovy 2, some aspects of Java EE 7, and WebSocket.\n\n\nSpring 2.0 was released in October 2006, Spring 2.5 in November 2007, Spring 3.0 in December 2009, Spring 3.1 in December 2011, and Spring 3.2.5 in November 2013.\nOver the years, one of the most criticized aspects of the Spring Framework was the complex dependency management handled by massive XML configuration files.\nThis criticism led to the creation of Spring Boot, which opted for annotations instead of XML configurations and simplify the use of the framework.",
    "crumbs": [
      "Spring Legacy",
      "Spring Framework"
    ]
  },
  {
    "objectID": "spring/spring-basics.html#boot-2014",
    "href": "spring/spring-basics.html#boot-2014",
    "title": "Spring Framework",
    "section": "3.4 Boot: 2014",
    "text": "3.4 Boot: 2014\n\n\n\n\n\n\nSpring Boot\n\n\n\nSpring Boot is an open source project part of the Java Spring Framework designed to simplify the creation of stand-alone, production-grade Spring-based applications.\n\n\nSpring Boot revolutionized the way production-ready applications were developed, allowing developers to focus more on the application logic rather than spending time on boilerplate code to handle the necessary configurations and dependencies to run the application.\n\nSpring Boot is used in many large enterprise solutions (e.g Netflix, American Express, ESPN, Mobile.de, Wix.com) for the fast building of massive applications, especially web-based ones.\n\nSpring Boot was launched in April 2014 resolving the problem of complex XML configurations by having three notable features that make it both unique and easy to use.\n\n\n\nHistory of Spring Framework to Boot\n\n\nDue to the power of creating Spring-based applications that can “just run,” Spring Boot’s popularity grew faster.",
    "crumbs": [
      "Spring Legacy",
      "Spring Framework"
    ]
  },
  {
    "objectID": "spring/spring-basics.html#boot-2024",
    "href": "spring/spring-basics.html#boot-2024",
    "title": "Spring Framework",
    "section": "3.5 Boot: 2024",
    "text": "3.5 Boot: 2024\nIt’s been a long ride!\nTo sum up where we are now, let’s add this extract from Bootiful Spring Boot in 2024 (part 1).\n\nI’m of the opinion that there’s never been a better time to be a Java and Spring Boot developer. I say that fully aware of where we stand in the span of things today. It’s been 21+ years since the earliest releases of the Spring Framework and 11+ years since the earliest releases of Spring Boot.** This year marks 20 years since the Spring Framework and 10 years since Spring Boot**.\nSo, when I say there’s never been a better time to be a Java and Spring developer, bear in mind I’ve been in this for the better part of those decades. I love Java and the JVM, and I love Spring, and it’s been amazing.\nBut this is the best time. It’s never been close. So, let’s develop a new application, as always, by visiting my second favorite place on the internet, after production, start.spring.io, and we’ll see what I mean. Click Add Dependencies and choose Web, Spring Data JDBC, OpenAI, GraalVM Native Support, Docker Compose, Postgres, and Devtools.\n\n\n\n\nSpring Boot 1.0 GA Released\n\n\n\nSpring Boot 1.0 GA Released\nSpring Framework 1.0 Final Released\nBootiful Spring Boot in 2024 (part 1)",
    "crumbs": [
      "Spring Legacy",
      "Spring Framework"
    ]
  },
  {
    "objectID": "spring/spring-mvc.html",
    "href": "spring/spring-mvc.html",
    "title": "Spring MVC",
    "section": "",
    "text": "1 Overview\n\n\n\n\n\n\nNote\n\n\n\nMVC (Model-View-Controller) is a pattern in software design commonly used to implement user interfaces, data, and controlling logic.\nIt emphasizes a separation between the software’s business logic and display.\nThis “separation of concerns” provides for a better division of labor and improved maintenance. Some other design patterns are based on MVC, such as MVVM (Model-View-Viewmodel), MVP (Model-View-Presenter), and MVW (Model-View-Whatever).\n\n\n\n\n\nModel View Controller example\n\n\nThe three parts of the MVC software-design pattern can be described as follows:\n\nModel: Manages data and business logic.\nView: Handles layout and display.\nController: Routes commands to the model and view parts.\n\n\n\n2 Spring MVC\n\n\n\nSpring MVC\n\n\n\n\n\nSpring MVC Numbered\n\n\nThe Spring Web model-view-controller (MVC) framework is designed around a DispatcherServlet that dispatches requests to handlers, with configurable handler mappings, view resolution, locale and theme resolution as well as support for uploading files.\nThe default handler is based on the @Controller and @RequestMapping annotations, offering a wide range of flexible handling methods.\nWith the introduction of Spring 3.0, the @Controller mechanism also allows you to create RESTful Web sites and applications, through the @PathVariable annotation and other features.\n\n\n3 References\n\nMVC\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Spring Legacy",
      "Spring MVC"
    ]
  },
  {
    "objectID": "scrum/resources.html",
    "href": "scrum/resources.html",
    "title": "SCRUM Resources",
    "section": "",
    "text": "MarkUp Resources",
    "crumbs": [
      "Resources",
      "SCRUM Resources"
    ]
  },
  {
    "objectID": "scrum/resources.html#web",
    "href": "scrum/resources.html#web",
    "title": "SCRUM Resources",
    "section": "1.1 Web",
    "text": "1.1 Web\n\nResource Center\nThe Scrum Framework by Scrum Inc..\nSuggested Reading for Professional Scrum Master\nGuia rápida implementar SCRUM\nSuggested Reading for Professional Scrum Master",
    "crumbs": [
      "Resources",
      "SCRUM Resources"
    ]
  },
  {
    "objectID": "scrum/resources.html#books",
    "href": "scrum/resources.html#books",
    "title": "SCRUM Resources",
    "section": "1.2 Books",
    "text": "1.2 Books\n\nScrum success stories\nScrum: the art of doing twice in half time",
    "crumbs": [
      "Resources",
      "SCRUM Resources"
    ]
  },
  {
    "objectID": "scrum/resources.html#power-point",
    "href": "scrum/resources.html#power-point",
    "title": "SCRUM Resources",
    "section": "1.3 Power-Point",
    "text": "1.3 Power-Point\n\nwhere do I start",
    "crumbs": [
      "Resources",
      "SCRUM Resources"
    ]
  },
  {
    "objectID": "scrum/scrum-week12.html",
    "href": "scrum/scrum-week12.html",
    "title": "Week 12: Emotions and Thoughts",
    "section": "",
    "text": "📘 Summary: SCRUM Week 12 - Emotions and Thoughts\nThis week’s SCRUM explores the intricate realms of emotions and thoughts, shedding light on their impact on human cognition and decision-making.\nThe discussion begins with an overview of contemporary theories on emotions, emphasizing the role of the amygdala in processing sensory information.\nNotably, psychiatrist and neuroscientist Ian McGilchrist’s work on the divided brain introduces a holistic perspective on emotions, highlighting their multidimensional nature in the context of brain hemispheric specialization.\nThe exploration delves into moral emotions, drawing on Jonathan Haidt’s metaphor of the rider and the elephant to elucidate the interplay between conscious reasoning and subconscious mental processes.\nEmotions are likened to an internal GPS, guiding decision-making by signaling alignment with goals and providing swift appraisals of experiences.\nOn the realm of thoughts, the mental state of cognition is described as a dynamic interplay of thought formation, perception, and comprehension, influencing our understanding of the world.\nPhilosopher and cognitive scientist Daniel Dennett’s contributions to understanding consciousness are outlined, emphasizing his materialist perspective that views consciousness as a product of physical processes in the brain.\nByron Katie’s “The Work” is presented as a transformative approach to managing thoughts, advocating for questioning beliefs rather than blindly accepting them. The emphasis is on understanding thoughts’ transient nature, empowering individuals to choose constructive thought patterns for enhanced mental clarity and resilience.",
    "crumbs": [
      "Weeks",
      "Week 12: Emotions and Thoughts"
    ]
  },
  {
    "objectID": "scrum/scrum-week12.html#social-bonding-and-complex-information",
    "href": "scrum/scrum-week12.html#social-bonding-and-complex-information",
    "title": "Week 12: Emotions and Thoughts",
    "section": "1.1 Social bonding and complex information",
    "text": "1.1 Social bonding and complex information\n\n\n\nEmotion – Ian McGilChrist\n\n\nIan McGilchrist, a psychiatrist and neuroscientist, is renowned for his work on the divided brain. In “The Master and His Emissary,” he explores how the left and right hemispheres process information differently, impacting our perception of the world.\nMcGilchrist underscores the holistic and embodied nature of emotions, viewing them as complex phenomena arising from the integration of cognitive, sensory, and bodily processes. His perspective invites a comprehensive understanding of emotions, emphasizing their multidimensional nature in the context of brain hemispheric specialization.\n\n\n\n\n\n\nNote\n\n\n\nIan McGilchrist’s exploration extends to the social dimension of emotions, emphasizing their role in connecting people amidst ambiguous and contradictory information that simple words or data alone cannot fully express.\nEmotions, in his view, serve as a crucial bridge in interpersonal communication, allowing individuals to navigate complex social scenarios where the nuances of emotion convey meaning beyond the limitations of explicit language or straightforward data.\n\n\nThis social aspect of emotions highlights their significance in fostering understanding, empathy, and shared experiences within the intricacies of human relationships and societal dynamics.",
    "crumbs": [
      "Weeks",
      "Week 12: Emotions and Thoughts"
    ]
  },
  {
    "objectID": "scrum/scrum-week12.html#haidts-the-rider-and-the-elephant",
    "href": "scrum/scrum-week12.html#haidts-the-rider-and-the-elephant",
    "title": "Week 12: Emotions and Thoughts",
    "section": "1.2 Haidt’s The rider and the Elephant",
    "text": "1.2 Haidt’s The rider and the Elephant\n\n\nThe Righteous Mind: Why Good People Are Divided by Politics and Religion by Jonathan Haidt.\n\nThe central metaphor of these four chapters is that the mind is divided, like a rider on an elephant, and  the rider’s job is to serve the elephant.\n\nThe rider is our conscious reasoning—the stream of words and images of which we are fully aware.\nThe elephant is the other 99 percent of mental processes—the ones that occur outside of awareness but that actually govern most of our behavior.\n\nJonathan Haidt developed this metaphor in his last book, The Happiness Hypothesis, where he described how the rider and elephant work together, sometimes poorly, as we stumble through life in search of meaning and connection.\nIn this book he uses the metaphor to solve puzzles such as why it seems like everyone (else) is a hypocrite and why political partisans are so willing to believe outrageous lies and conspiracy theories. He also use the metaphor to show you how you can better persuade people who seem unresponsive to reason.\n\n1.2.1 Moral emotions\n\n\n\n\n\n\nMoral Emotion\n\n\n\nA moral emotion is a type of emotion that is closely tied to one’s sense of right and wrong, ethical principles, and moral values.\n\n\nThese emotions arise in response to situations that involve moral or ethical considerations. Unlike basic emotions such as joy, anger, or fear, moral emotions are complex and often involve a higher level of cognitive processing.\nExamples of moral emotions include:\n\nGuilt: A feeling of remorse or regret when one believes they have violated a moral standard.\nShame: A sense of humiliation or embarrassment related to one’s perceived moral failures.\nMoral Disgust: A reaction to behaviors or situations that violate one’s moral values, often expressed as a feeling of revulsion.\nCompassion: A sympathetic response to the suffering of others, linked to a desire to alleviate that suffering.\nMoral Elevation: A positive emotion experienced when witnessing virtuous or morally uplifting behavior.\n\nThese emotions play a crucial role in guiding ethical behavior, promoting cooperation, and maintaining social harmony. While they are emotions, they involve a significant cognitive component, as individuals evaluate their actions and the actions of others in the context of moral norms and principles.",
    "crumbs": [
      "Weeks",
      "Week 12: Emotions and Thoughts"
    ]
  },
  {
    "objectID": "scrum/scrum-week12.html#emotions-as-gps-or-redgreen-flag",
    "href": "scrum/scrum-week12.html#emotions-as-gps-or-redgreen-flag",
    "title": "Week 12: Emotions and Thoughts",
    "section": "1.3 Emotions as GPS or red/green flag",
    "text": "1.3 Emotions as GPS or red/green flag\n\n\nA Clinical Psychologist Explains How Your Emotions Can Help You Make Better Decisions\n\nEmotions act as an internal GPS, signaling us through feelings and thoughts to guide decision-making and behavior.\nWhen triggered, emotions swiftly inform us about a situation’s alignment with our goals.\nFor instance, anxiety during a negotiation signals a need for further evaluation. While emotions lack precision, their speed provides a quick appraisal of experiences. Suppressing emotions may seem tempting, but evolved over millennia, they serve a purpose — alerting us to potential red flags.\nIn business and personal relationships, emotions play a pivotal role, influencing reactions to situations like dealing with narcissistic personalities. Understanding our emotional responses equips us to navigate complex dynamics, contributing to better decision-making and successful outcomes. Embracing emotions as valuable cues enhances emotional intelligence and empowers us to leverage this innate information system for optimal results in various aspects of life.\n\n\n\n\n\n\nNote\n\n\n\nEmotions are not particularly sophisticated or precise, but their speed and utility make up for what they lack in sophistication and precision. Emotions, when they are not disordered, provide information about your circumstances in a simple, quick way that does not involve a lot of cognition (thinking about it).",
    "crumbs": [
      "Weeks",
      "Week 12: Emotions and Thoughts"
    ]
  },
  {
    "objectID": "scrum/scrum-week12.html#daniel-dennetts-consciousness",
    "href": "scrum/scrum-week12.html#daniel-dennetts-consciousness",
    "title": "Week 12: Emotions and Thoughts",
    "section": "2.1 Daniel Dennett’s Consciousness",
    "text": "2.1 Daniel Dennett’s Consciousness\nDaniel Dennett, a prominent philosopher and cognitive scientist, has dedicated much of his career to exploring the nature of consciousness. Dennett is known for his influential work in the philosophy of mind, particularly his efforts to demystify consciousness and understand it within the framework of naturalistic philosophy.\n\n\nConsciousness Explained is a a full-scale exploration of human consciousness. In this landmark book, Daniel Dennett refutes the traditional, commonsense theory of consciousness and presents a new model, based on a wealth of information from the fields of neuroscience, psychology, and artificial intelligence.\n\nHe argues against dualism, the idea that the mind and body are fundamentally distinct, advocating for a materialist perspective that sees consciousness as a product of physical processes in the brain.\n\n\n\n\n\n\nDaniel Dennett, Consciousness Explained\n\n\n\nIn his book “Consciousness Explained,” Dennett delves into the intricacies of subjective experience and challenges traditional notions surrounding the mind.\nHe proposes that consciousness is not a singular entity but a series of mental processes, or what he terms “multiple drafts” that contribute to our overall sense of awareness.\n\n\nDennett’s contributions extend beyond philosophy, as he engages with scientific findings and collaborates with researchers in fields such as neuroscience. His interdisciplinary approach seeks to unravel the mysteries of consciousness through a synthesis of philosophy, cognitive science, and empirical inquiry, offering a valuable perspective in the ongoing discourse on the mind-body relationship.",
    "crumbs": [
      "Weeks",
      "Week 12: Emotions and Thoughts"
    ]
  },
  {
    "objectID": "scrum/scrum-week12.html#byron-katies-the-work",
    "href": "scrum/scrum-week12.html#byron-katies-the-work",
    "title": "Week 12: Emotions and Thoughts",
    "section": "2.2 Byron Katie’s “The Work”",
    "text": "2.2 Byron Katie’s “The Work”\n\nByron Katie’s “The Work” provides a transformative approach to understanding and managing thoughts.\nRooted in self-inquiry, it encourages individuals to question their beliefs and thoughts rather than blindly accepting them.\n\n\n\n\n\n\nThoughts come and go\n\n\n\nKatie asserts that thoughts come and go, and it is not necessary to be enslaved by them.\nInstead of unquestioningly following thoughts, she advocates for a deeper understanding of their origins and impact.\n\n\nBy investigating the validity of our beliefs, we gain the power to choose more constructive thought patterns, leading to greater mental clarity and emotional resilience. “The Work” offers a practical framework for cultivating mindfulness and fostering a healthier relationship with our thoughts.",
    "crumbs": [
      "Weeks",
      "Week 12: Emotions and Thoughts"
    ]
  },
  {
    "objectID": "scrum/scrumlab3.html",
    "href": "scrum/scrumlab3.html",
    "title": "SCRUM Lab#SC03: Books Project",
    "section": "",
    "text": "📘 SCRUM Lab#SC03: Books Project\nThis Group Project Laboratory on Human Behavior applied to SCRUM is to facilitate a comprehensive exploration and understanding of key concepts from four influential books on human behavior and psychology. \n\nStudents will read, comprehend, and collaboratively synthesize key concepts.\nEach group will then present their understanding of the books, fostering a rich discussion on human behavior, intelligence, morality, and success mindset.\n\nThis laboratory aims to enhance critical thinking, communication skills, and a deeper understanding of the intricacies of human behavior.\n\n\n1 Introduction\nThe goal of the Group Project Laboratory is to facilitate a comprehensive exploration and understanding of key concepts from four influential books on human behavior and psychology.\n\n\nAgile students must grasp human behavior intricacies as it directly impacts collaborative work.\n\nUnderstanding why individuals act as they do and the dynamics influencing their decisions is pivotal for effective teamwork, communication, and adaptability—core tenets of Agile methodologies.\n\nInsight into psychological aspects fosters empathy, facilitating better collaboration and conflict resolution. Agile success hinges on recognizing and responding to the diverse motivations, perspectives, and behaviors within a team, enabling an environment that thrives on continuous improvement and iterative progress.\nIn essence, comprehending human dynamics empowers Agile practitioners to navigate challenges, enhance team cohesion, and optimize project outcomes.\n\n\nThrough collaborative reading, analysis, and presentation, students are expected to:\n\nComprehend Core Ideas: Develop a deep understanding of the central themes presented in each book, focusing on societal status dynamics, cognitive biases, moral and political differences, and the psychology of success.\nEffective Communication: Enhance communication skills by articulating and presenting the core concepts of the assigned book to the group and, subsequently, to the class. Emphasize clarity, coherence, and engagement.\nCritical Thinking: Encourage critical thinking by analyzing and synthesizing information from diverse perspectives. Explore the implications of the authors’ ideas on human behavior, decision-making, and personal development.\nCollaboration: Foster teamwork and collaboration within groups. Encourage an exchange of ideas, insights, and interpretations, promoting a shared understanding of the material.\nApplication of Knowledge: Discuss how the insights gained from these books can be applied to real-world scenarios. Encourage students to connect the theories presented in the literature to practical situations.\n\n\n\n2 Books\nIn this collaborative learning environment, students will delve into four impactful books, extracting and presenting core ideas.\n\n“The Status Game: On Social Position and How We Use It” by Will Storr: Explore how societal hierarchies influence behavior. Analyze Storr’s insights on the role of status in shaping human interactions.\n\n\n\n\nThe Status Game: On Social Position and How We Use It\n\n\n\n“The Intelligence Trap: Why Smart People Make Dumb Mistakes” by David Robson: Investigate the cognitive biases and pitfalls that smart individuals may encounter. Present strategies to avoid common errors highlighted by Robson.\n\n\n\n\nThe Intelligence Trap: Why Smart People Make Dumb Mistakes\n\n\n\n“The Righteous Mind: Why Good People Are Divided by Politics and Religion” by Jonathan Haidt: Examine the psychological foundations of moral and political differences. Discuss Haidt’s Moral Foundations Theory and its implications for societal harmony.\n\n\n\n\nThe Righteous Mind: Why Good People Are Divided by Politics and Religion\n\n\n\n“Mindset: The New Psychology of Success” by Carol S. Dweck: Uncover the concept of fixed vs. growth mindsets. Share how mindset influences learning, effort, and achievement.\n\n\n\n\nMindset: The New Psychology of Success\n\n\n\n“Stolen Focus: Why You Can’t Pay Attention” by Johann Hari: Investigate the impact of modern distractions on attention spans. Examine strategies for reclaiming focus in a world full of interruptions.\n\n\n\nStolen Focus: Why You Can’t Pay Attention\n\n\n“The Master and His Emissary: The Divided Brain and the Making of the Western World” by Iain McGilchrist: Delve into the intricate relationship between the brain’s hemispheres. Explore McGilchrist’s thesis on how this division shapes human culture and civilization.\n\n\n\nThe Master and His Emissary: The Divided Brain and the Making of the Western World\n\n\n\n\n\n3 References\n\nWeek1\n\n\n\n\n\n Back to top",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC03: Books Project"
    ]
  },
  {
    "objectID": "scrum/scrum-week13.html",
    "href": "scrum/scrum-week13.html",
    "title": "Week 13: Decision Making and Intuition",
    "section": "",
    "text": "📘 Summary: SCRUM Week 13 - Decision Making\nWeek 13 of SCRUM explores the nuanced dynamics of decision-making, emphasizing the multifaceted process that involves reliable information, a holistic context, and the right mental state.\nA good decision emerges from a well-informed mind operating within a balanced and energized mental state, harmonizing emotions and thoughts within a clear purpose and understanding.\nThe discussion delves into intuition, highlighting its quick and beneficial nature, rooted in deep-seated knowledge.\nNotably, the subconscious brain utilizes prior experience to make fast, often high-quality decisions. Drawing on insights from Daniel Kahneman, the distinction between slow, deliberate thinking and fast, intuitive thinking is explored. The latter, often hidden, plays a significant role in daily decisions but can lead to mistakes when handling tasks better suited for the former.\nCognitive biases, systematic patterns of deviation from rationality, are introduced, emphasizing their impact on decision-making. The Halo Effect, a cognitive bias where initial positive judgments influence overall perceptions, is discussed, showcasing how first impressions can shape subsequent evaluations.\nThe Killer (2023) David Fincher, Michael Fassbender",
    "crumbs": [
      "Weeks",
      "Week 13: Decision Making and Intuition"
    ]
  },
  {
    "objectID": "scrum/scrum-week13.html#deliberate-thinking",
    "href": "scrum/scrum-week13.html#deliberate-thinking",
    "title": "Week 13: Decision Making and Intuition",
    "section": "2.1 Deliberate thinking",
    "text": "2.1 Deliberate thinking\nThis is the part of your mind that you are aware of. It’s expert at solving problems, but it is slow, requires a great deal of energy, and is extremely lazy.\nEven the act of walking is enough to occupy most of your attentive mind.",
    "crumbs": [
      "Weeks",
      "Week 13: Decision Making and Intuition"
    ]
  },
  {
    "objectID": "scrum/scrum-week13.html#automatic-thinking",
    "href": "scrum/scrum-week13.html#automatic-thinking",
    "title": "Week 13: Decision Making and Intuition",
    "section": "2.2 Automatic thinking",
    "text": "2.2 Automatic thinking\nBut then there is another system in your mind that is intuitive, fast and automatic. This fast way of thinking is incredibly powerful, but totally hidden.\nIt is so powerful, it is actually responsible for most of the things that you say, do, think and believe.\nAnd yet you have no idea this is happening. This system is your hidden auto-pilot, and it has a mind of its own. It is sometimes known as the stranger within.\nMost of the time, our fast, intuitive mind is in control, efficiently taking charge of all the thousands of decisions we make each day. The problem comes when we allow our fast, intuitive system to make decisions that we really should pass over to our slow, logical system. This is where the mistakes creep in.",
    "crumbs": [
      "Weeks",
      "Week 13: Decision Making and Intuition"
    ]
  },
  {
    "objectID": "scrum/scrum-week13.html#create-your-tree-of-knowledge",
    "href": "scrum/scrum-week13.html#create-your-tree-of-knowledge",
    "title": "Week 13: Decision Making and Intuition",
    "section": "3.1 Create your tree of knowledge",
    "text": "3.1 Create your tree of knowledge\n\n\n\nCreate and Manage Your Knowledge Base With Obsidian\n\n\nElon Musk’s two rules for learning anything faster are the following:\n\nRule #1 — Make sure you’re building a tree of knowledge\nRule #2 — You can’t remember what you can’t connect\n\nNetworked Thinking: Build Your Tree of Knowledge by connecting and interlinking all the different information nodes to uncover new insights and accelerate your learning path.",
    "crumbs": [
      "Weeks",
      "Week 13: Decision Making and Intuition"
    ]
  },
  {
    "objectID": "scrum/scrum-week13.html#list-codex",
    "href": "scrum/scrum-week13.html#list-codex",
    "title": "Week 13: Decision Making and Intuition",
    "section": "5.1 List & codex",
    "text": "5.1 List & codex\n\nList of cognitive biases\nCodex",
    "crumbs": [
      "Weeks",
      "Week 13: Decision Making and Intuition"
    ]
  },
  {
    "objectID": "scrum/scrum-week13.html#halo-effect",
    "href": "scrum/scrum-week13.html#halo-effect",
    "title": "Week 13: Decision Making and Intuition",
    "section": "5.2 Halo effect",
    "text": "5.2 Halo effect\n\n\n\n\n\n\nNote\n\n\n\nThe halo effect is a cognitive bias that occurs when an initial positive judgment about a person unconsciously colors the perception of the individual as a whole.\n\n\nWhen forming a first impression, observing an initial attractive feature—perhaps beauty or strength—can make the person appealing, making it difficult to revise that impression based on new or opposing information. For example, an attractive individual may also be perceived as interesting, ambitious, or funny, whether or not that assessment is warranted.",
    "crumbs": [
      "Weeks",
      "Week 13: Decision Making and Intuition"
    ]
  },
  {
    "objectID": "scrum/scrum-week13.html#purpose-intuition-decision-making-and-mindset",
    "href": "scrum/scrum-week13.html#purpose-intuition-decision-making-and-mindset",
    "title": "Week 13: Decision Making and Intuition",
    "section": "6.1 Purpose, Intuition, Decision-Making and Mindset",
    "text": "6.1 Purpose, Intuition, Decision-Making and Mindset\n\n\n\n\n\n\n\nStrategic Thinking: Navigating Purposeful Decisions\n\n\n\nStrategic thinking transcends the immediate and involves purposefully integrating key elements — purpose, intuition, decision-making, and mindset.\n\nPurpose:\n\nA guiding force that aligns decisions with overarching goals.\nProvides clarity on values and contributes to meaningful outcomes.\n\nIntuition:\n\nActs as a silent partner, drawing on accumulated knowledge and experiences.\nGuides decision-makers in navigating uncertainty and complexity.\n\nDecision-Making:\n\nInformed by both purpose and intuition for optimal outcomes.\nConsiders potential consequences and aligns with long-term objectives.\n\nMindset:\n\nA right mindset -survival and growth- creates the context for purposeful thinking.\nShapes the approach to decision-making, it is key to success.\n\n\n\n\nIn the domain of strategic thinking and mindset-driven decision-making, intuition plays a pivotal role alongside purpose.\n\nIntuition, often considered the silent partner in the decision-making process, draws on accumulated knowledge, experiences, and a deep understanding of the context. It acts as an internal compass, guiding decision-makers when faced with uncertainty or compl**exity.\nStrategic thinking, when coupled with a purpose-driven mindset**, allows individuals to tap into their intuitive insights. This fusion enables decision-makers to navigate through ambiguity with a sense of confidence, as their intuition becomes a valuable tool for quick and informed choices.\nIntuition complements strategic thinking by providing a nuanced understanding of the situation, often offering unconventional perspectives that align with the overarching purpose.\n\nIn essence, a purpose-driven mindset enhances the reliability of intuition, ensuring that intuitive insights align with the broader mission and values.\nThis synergy results in decisions that not only contribute to immediate objectives but also resonate with the greater purpose, fostering a strategic and intuitive approach that is both effective and meaningful.",
    "crumbs": [
      "Weeks",
      "Week 13: Decision Making and Intuition"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html",
    "href": "scrum/scrumlab0.html",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "",
    "text": "📘 SCRUM Lab#SC00: Timetable\nThe Time and Mind Organization Lab is designed to help students develop effective strategies for managing their time and mental resources while handling various tasks. This lab encompasses activities such as reading a book, creating a group project, executing the project, working with Scrum methodology, taking notes, understanding new concepts, creating user stories, and defining tasks.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html#objective",
    "href": "scrum/scrumlab0.html#objective",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "1.1 Objective",
    "text": "1.1 Objective\nThe Time and Mind Organization Lab is designed to help students develop effective strategies for managing their time and mental resources while handling various tasks. This lab encompasses activities such as reading a book, creating a group project, executing the project, working with Scrum methodology, taking notes, understanding new concepts, creating user stories, and defining tasks.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html#lab-components",
    "href": "scrum/scrumlab0.html#lab-components",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "1.2 Lab Components",
    "text": "1.2 Lab Components\n\nTask Prioritization Exercise:\n\nIdentify and prioritize tasks based on urgency and importance.\nUse a matrix to categorize tasks into quadrants, focusing on high-priority and high-impact activities.\n\nTime Blocking Workshop:\n\nLearn and implement time-blocking techniques to allocate dedicated time slots for specific tasks.\nCreate a personalized weekly schedule considering individual peak productivity hours.\n\nGroup Project:\n\nForm groups and create a collaborative project.\nUtilize project management tools and techniques to allocate responsibilities, set milestones, and track progress.\n\nScrum Master Experience:\n\nRotate roles as Scrum Master in a Scrum framework.\nLearn to conduct sprint planning, daily stand-ups, and retrospectives for effective project management.\n\nNote-Taking and Conceptual Understanding:\n\nPractice effective note-taking methods to enhance comprehension.\nExplore various learning styles and identify the most suitable approach for individual understanding.\n\nUser Stories and Task Creation Workshop:\n\nUnderstand the importance of user stories and tasks in project development.\nCreate user stories and break them down into actionable tasks.\n\nTime Management Reflection:\n\nReflect on the effectiveness of time management strategies applied during the lab.\nIdentify areas for improvement and create a personal action plan.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html#prioritize-with-purpose",
    "href": "scrum/scrumlab0.html#prioritize-with-purpose",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "2.1 1. Prioritize with Purpose:",
    "text": "2.1 1. Prioritize with Purpose:\nIn the realm of scientific experimentation, it’s essential to prioritize tasks with a clear sense of purpose. Identify the critical objectives of your lab work and organize your tasks based on their importance. Consider the potential impact of each task on the overall experiment and focus your energy on high-priority activities.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html#deep-work-zones",
    "href": "scrum/scrumlab0.html#deep-work-zones",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "2.2 2. Deep Work Zones:",
    "text": "2.2 2. Deep Work Zones:\nEmbrace the concept of “Deep Work” advocated by productivity experts like Cal Newport. Designate specific periods of uninterrupted focus for your most mentally demanding tasks. Eliminate distractions, turn off notifications, and create a conducive environment that allows your mind to delve deeply into the complexities of the experiment without unnecessary interruptions.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html#strategic-planning-and-visualization",
    "href": "scrum/scrumlab0.html#strategic-planning-and-visualization",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "2.3 3. Strategic Planning and Visualization:",
    "text": "2.3 3. Strategic Planning and Visualization:\nBefore diving into the lab, invest time in strategic planning. Visualize the entire experimental process, from hypothesis to conclusion. Break down the experiment into manageable steps and create a roadmap for execution. This mental preparation enhances your ability to navigate the lab efficiently, reducing the likelihood of unexpected hurdles.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html#adopt-agile-time-management",
    "href": "scrum/scrumlab0.html#adopt-agile-time-management",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "2.4 4. Adopt Agile Time Management:",
    "text": "2.4 4. Adopt Agile Time Management:\nApply agile principles to your time management strategy. Be flexible and adaptable in your approach, especially when faced with unexpected challenges or changes in experimental conditions. Regularly reassess your priorities and adjust your plan accordingly. This agile mindset ensures that you can navigate the dynamic nature of scientific research with resilience and efficiency.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html#mindful-reflection-for-continuous-improvement",
    "href": "scrum/scrumlab0.html#mindful-reflection-for-continuous-improvement",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "2.5 5. Mindful Reflection for Continuous Improvement:",
    "text": "2.5 5. Mindful Reflection for Continuous Improvement:\nAfter completing each lab session, engage in mindful reflection. Analyze what worked well, what could be improved, and any challenges encountered. Use this reflection to refine your approach for future experiments. Continuous improvement based on reflective practices enhances your overall efficiency and effectiveness in the lab.\n\n2.5.1 Tips for Implementing Mind Management:\n\nUtilize Time Blocking: Allocate specific blocks of time for different types of tasks, ensuring a balance between focused work and necessary breaks.\nIncorporate Mindfulness Techniques: Practice mindfulness to cultivate awareness and concentration. Techniques such as meditation can enhance your ability to stay present and focused during lab work.\nEffective Communication: Clearly communicate your priorities and boundaries to colleagues and collaborators. This helps create a supportive environment that aligns with your mind management goals.\nInvest in Skill Development: Continuously develop skills relevant to your research. This not only enhances your expertise but also streamlines your work processes, contributing to more effective mind management.\nCelebrate Small Wins: Acknowledge and celebrate achievements, no matter how small. Positive reinforcement can boost motivation and contribute to a positive mindset, essential for effective mind management in the lab.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab0.html#outcome",
    "href": "scrum/scrumlab0.html#outcome",
    "title": "SCRUM Lab#SC00: Timetable",
    "section": "2.6 Outcome",
    "text": "2.6 Outcome\nStudents will gain practical experience in organizing their time and minds, honing skills crucial for successful task execution and project management. The lab aims to instill a proactive mindset, fostering habits that contribute to academic and professional success.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC00: Timetable"
    ]
  },
  {
    "objectID": "scrum/scrumlab5.html",
    "href": "scrum/scrumlab5.html",
    "title": "SCRUM Lab#SC05: SCRUM Tests",
    "section": "",
    "text": "📘 SCRUM Lab#SC05: Tests\nScrum.org Open Assessments have no fee and do not include certification, but they allow you to gauge your basic knowledge of Scrum, the structure of a Scrum Team, Scrum accountabilities, the fundamentals of scaling Scrum and more. As these are free study tools, please note that the questions on the Open Assessments do not have the same level of difficulty as the certification assessments. They do, however, provide practice for the Professional Scrum certification assessments.\nPassing the Open assessments, training, working experience, knowledge and interpretation of the Scrum Guide, Nexus Guide and Kanban Guide for Scrum Teams along with many of the Scrum.org resources will help prepare you for our challenging professional level assessment and certifications.\n\n\n\n\n\nAgile SCRUM Tests\n\n\n\n1 Class Assestments\n\nTest #1\nTest #2\nTest #3\nTest #4\nTest #5\n\n\n\n2 Open Assesments\n\nOpen Assessments\n\n\n\n3 References\n\nScrum Testing: A Detailed Guide to Testing on an Agile Team\n\n\n\n\n\n Back to top",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC05: SCRUM Tests"
    ]
  },
  {
    "objectID": "scrum/scrum-week7.html",
    "href": "scrum/scrum-week7.html",
    "title": "Week 7: Managing Time & Mind",
    "section": "",
    "text": "📘 Summary: SCRUM Week 7 - Managing Time and Mind\nIn “Managing Time and Mind” the narrative challenges the conventional emphasis on time management alone, proposing that true productivity stems from effective mind management.\nThe article introduces the myth of time management, arguing that success is not solely contingent on judicious allocation of minutes but relies on cultivating a well-managed mind.\nDrawing from Dr. Stephen R. Covey’s concept of “sharpening the saw”, it highlights the foundational role of mental well-being in effective time management.\nSupported by neuroscience, the piece underscores that a cluttered mind impedes productivity and advocates for practices like meditation and mindfulness to enhance cognitive abilities. The practical shift involves aligning tasks with mental rhythms, emphasizing breaks, and incorporating mindfulness exercises. Ultimately, the article contends that mindful time management, integrating both time and mind, fosters true efficiency, balance, and well-being in navigating the complexities of modern life.\n\n\n\nKeywords: SCRUM Week 7 - Managing Time and Mind\nManaging Time and Mind, Sharpening the Saw, Neuroscience, Productivity, Mindfulness, Meditation, Emotional Intelligence, Present Moment Awareness, Cognitive Functions, Mindful Time Management, Symbiotic, Well-being.\n\n\n\n\n\nA Time for Everything: For everything there is a season, and a time for every matter under heaven\n\n\n\n1 What is Time Management?\n\n\n\nTime Management Mind Map: Improve Productivity Effectively\n\n\nTime management is an essential life skill to learn for boosting efficiency, effectiveness, and productivity. It is about doing everything you want in a finite time. Giving equal time to family responsibilities, office work, and hobbies is difficult when a person lacks this time management skills. It is more than organizing, planning, and allocating time for the most crucial task. It plays a vital role in our lives and helps in achieving success.\n\n\n2 Getting things done\n“Getting Things Done” (GTD) is a time management and productivity methodology created by David Allen. The approach is outlined in his bestselling book, “Getting Things Done: The Art of Stress-Free Productivity.” GTD provides a systematic and holistic method for organizing tasks, managing time, and reducing stress\n\n\n\nGetting things done\n\n\n3 Managing Mind not Time\n\n\n\nManaging Mind not Time\n\nUnleashing Productivity: Managing the Mind, Not Just Time\n\nThe pursuit of productivity often centers around managing time effectively. Countless books and productivity gurus offer tips and techniques on time management, promising increased efficiency and success. However, there’s a paradigm shift emerging—one that suggests the true key to productivity lies not in the ticking clock but in the recesses of the mind.\n\nThe Time Management Myth\n\nThe conventional wisdom surrounding time management has ingrained in us the belief that success is rooted in our ability to allocate every minute judiciously. Yet, countless individuals find themselves diligently following time management strategies only to feel perpetually overwhelmed and unsatisfied.\nThis is where the often overlooked factor of “mind management” comes into play.\n\nHarnessing the Power of the Mind\n\nManaging the mind involves understanding how our thoughts, emotions, and mental state impact our productivity.\nIt’s about cultivating mindfulness, emotional intelligence, and a keen awareness of the present moment.\nWhen the mind is cluttered with distractions, stress, or a lack of focus, time management techniques alone prove insufficient.\nAuthor and motivational speaker, Dr. Stephen R. Covey, introduced the concept of “sharpening the saw” in his book “The 7 Habits of Highly Effective People.”\n\nThis habit underscores the importance of taking care of oneself mentally, emotionally, and physically.\nIt implies that a sharp mind is the foundation upon which effective time management is built.\n\n\nThe Neuroscience of Productivity\n\nNeuroscience supports the idea that a well-managed mind enhances productivity.\nWhen we’re stressed or mentally fatigued, cognitive functions decline, making it challenging to make sound decisions or complete tasks efficiently.\nTechniques such as meditation, mindfulness practices, and adequate sleep have been proven to enhance cognitive abilities, contributing to better time management.\n\nEmbracing Mindful Time Management\n\nRather than viewing time and mind management as mutually exclusive, they should be seen as symbiotic.\nMindful time management involves not just scheduling tasks but also understanding the rhythms of your mind:\n\nIt’s about aligning your most demanding tasks with your periods of peak cognitive function and incorporating breaks to recharge the mind.\n\n\nThe Practical Shift\n\nTo put this philosophy into practice, start by incorporating short mindfulness exercises into your routine.\n\nThis could be as simple as deep breathing, a brief meditation session, or a mindful walk.\n\nAdditionally, be aware of your mental state when planning tasks—tackling complex problems during your mental peak and more routine tasks during lower-energy periods.\n\nConclusion\n\nAs we navigate the complexities of programming and decision making, the realization dawns that time management alone is an incomplete strategy. To unlock true productivity:\n\nwe must recognize the profound impact of managing our minds.\nBy cultivating a mindful approach to time management, we not only enhance our efficiency but also foster a sense of balance and well-being.\nAfter all, a mind in harmony is the true orchestrator of a productive life.\n\n\n\n\n\n4 References\n\nTime Management Mind Map: Improve Productivity Effectively\nMind Management not Time managemnet\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Weeks",
      "Week 7: Managing Time & Mind"
    ]
  },
  {
    "objectID": "scrum/scrum-week15.html",
    "href": "scrum/scrum-week15.html",
    "title": "Week 15: Balances, atmosphere and tools",
    "section": "",
    "text": "📘 Summary: SCRUM Week 15 - Balances, atmosphere and tools\nClients may struggle to express needs precisely, but their ability to recognize alignment with their vision is pivotal.\nPayment is the acknowledgment of unspoken needs being met, forging a collaborative agreement.\nIn client interactions, impediments are viewed as feedback, guiding decision-making towards optimal solutions. Good decisions yield positive feedback or client endorsement through payment, affirming optimal solutions. Agile teams require an atmosphere conducive to open communication, balanced dynamics, and effective tools for informed decision-making.",
    "crumbs": [
      "Weeks",
      "Week 15: Balances, atmosphere and tools"
    ]
  },
  {
    "objectID": "scrum/scrum-week15.html#atmosphere",
    "href": "scrum/scrum-week15.html#atmosphere",
    "title": "Week 15: Balances, atmosphere and tools",
    "section": "2.1 Atmosphere",
    "text": "2.1 Atmosphere\nFirstly, fostering an atmosphere conducive to open communication and idea exchange is paramount. An environment where team members feel free to voice concerns and suggestions ensures that feedback is constructive rather than stifled. To achieve this:\n\nestablishing clear boundaries,\nimplementing simple rules,\nand selecting the right profiles are essential.",
    "crumbs": [
      "Weeks",
      "Week 15: Balances, atmosphere and tools"
    ]
  },
  {
    "objectID": "scrum/scrum-week15.html#balances",
    "href": "scrum/scrum-week15.html#balances",
    "title": "Week 15: Balances, atmosphere and tools",
    "section": "2.2 Balances",
    "text": "2.2 Balances\nSecondly, striking the right balances is foundational. Whether it’s the delicate equilibrium:\n\nbetween fixed, growth, and survival mindsets,\nof anti-fragility and lateralization,\nof addressing the intricate dynamics of identity, change, moral emotions, emotions and status games.\nof the nuanced interplay of productivity versus creativity, achieving equilibrium is the linchpin of informed decision-making.\n\n\n2.2.1 Creativity vs. Productivity\nWe live in a world that’s obsessed with ‘getting stuff done.’ Everyone wants to know how to be more productive, and yes, productivity at work is important.\nBut does this emphasis on becoming better, faster, and stronger leave any room for creative thinking at work?\n\nBeing creative is often associated with the arts, while innovation is a buzzword of the tech world. However, fostering a culture of creativity and innovation can benefit companies of all shapes, sizes, and areas of expertise. Developing new processes, improving workflows, and solving problems are all forms of creativity.",
    "crumbs": [
      "Weeks",
      "Week 15: Balances, atmosphere and tools"
    ]
  },
  {
    "objectID": "scrum/scrum-week15.html#tools",
    "href": "scrum/scrum-week15.html#tools",
    "title": "Week 15: Balances, atmosphere and tools",
    "section": "2.3 Tools",
    "text": "2.3 Tools\nThirdly, providing teams with the right tools amplifies their capacity to dissect complexities and make well-informed decisions. These tools encompass:\n\nframeworks like SCRUM,\ntime-boxing,\nplanning poker,\niterations,\ngoals and a long etcetera.\n\nIn essence, our journey toward optimal decision-making entails recognizing impediments as integral feedback loops, refining our understanding through a dance of balances, and equipping agile teams with the right atmosphere and tools.\nThis holistic approach ensures that our decisions resonate positively with clients, translating challenges into opportunities for growth and innovation.",
    "crumbs": [
      "Weeks",
      "Week 15: Balances, atmosphere and tools"
    ]
  },
  {
    "objectID": "scrum/scrum-week11.html",
    "href": "scrum/scrum-week11.html",
    "title": "Week 11: Team Dynamics",
    "section": "",
    "text": "📘 Summary: SCRUM Week 11 - Team Dynamics\nTeam Dynamics of SCRUM explores the intricate dynamics of team interactions, drawing parallels from chimpanzee politics and human behavior.\nFrans de Waal’s insights into chimp colonies reveal underlying power struggles reminiscent of human political maneuvering. The discussion on social hierarchies introduces the Status Game, encompassing Virtue, Competition, and Dominance games as strategies for securing social standing. The Minority Rules concept emphasizes the impact of determined minorities on societal norms. Milgram’s Experiments shed light on blind obedience to authority, exposing the perils of moral compromise.\nThe introduction of the Sociogram as a tool for mapping group relationships enhances leaders’ understanding of team dynamics. Behavioral Economics, exemplified by Richard H. Thaler’s work, challenges traditional economic models, emphasizing the role of emotions in decision-making.",
    "crumbs": [
      "Weeks",
      "Week 11: Team Dynamics"
    ]
  },
  {
    "objectID": "scrum/scrum-week11.html#social-organization",
    "href": "scrum/scrum-week11.html#social-organization",
    "title": "Week 11: Team Dynamics",
    "section": "1.1 Social Organization",
    "text": "1.1 Social Organization\n\n\n\nFrans de Waal\n\n\n\nAn incredible insight into the takeovers and social organization of a chimp colony in the Netherlands. “The behavior of our closest relatives provides clues about human nature. Apart from political maneuvering, chimpanzees show many behaviors that parallel those of humans, from tool technology to intercommunity warfare. In fact, our place among the primates is increasingly a backdrop of substantial similarity. Our uniqueness breaks down as we study our relatives.\n\nEvery country has its Dick Cheneys and Ted Kennedys operating behind the scenes.\nBeing over the hill themselves, these experienced men often exploit the intense rivalries among younger politicians, gaining tremendous power as a result. I also did not draw explicit parallels between how rival chimpanzees curry favor with females by grooming and tickling their young and the way human politicians hold up and kiss babies, something they rarely do outside the election season.\nThere are tons of such parallels, also in nonverbal communication (the swaggering, the lowering of voices), but I stayed away from all these. To me, they were so obvious I am happy to leave them to my readers…The social dynamics are essentially the same. The game of probing and challenging, of forming coalitions, of undermining others’ coalitions, and of slapping the table to reinforce a point is right there for any observer to see.\nThe will to power is a human universal. Our species has been engaged in Machiavellian tactics since the dawn of time, which is why no one should be surprised about the evolutionary connection pointed out in the present book.”\n\nFrans de Waal\nChimpanzee Politics: Power and Sex among Apes\nAre We Smart Enough to Know How Smart Animals Are?\nChimpanzee Politics: Power and Sex Among Apes Summary",
    "crumbs": [
      "Weeks",
      "Week 11: Team Dynamics"
    ]
  },
  {
    "objectID": "scrum/scrum-week11.html#cultural-negotiation",
    "href": "scrum/scrum-week11.html#cultural-negotiation",
    "title": "Week 11: Team Dynamics",
    "section": "1.2 Cultural Negotiation",
    "text": "1.2 Cultural Negotiation\n\nCultural Negotation Formulas",
    "crumbs": [
      "Weeks",
      "Week 11: Team Dynamics"
    ]
  },
  {
    "objectID": "scrum/scrum-week11.html#the-status-game",
    "href": "scrum/scrum-week11.html#the-status-game",
    "title": "Week 11: Team Dynamics",
    "section": "2.1 The status game",
    "text": "2.1 The status game\n\nThe status game\n\n\n2.1.1 The Status Game roots\nThe Status Game often involves social interactions where individuals seek to establish and maintain their position within a social hierarchy. Key concepts within this realm include:\n\nSocial Hierarchies: Understanding societies’ hierarchical structures and navigating to secure one’s position.\nSymbolic Capital: Accumulating resources, attributes, or achievements that confer status within a social context.\nSocial Comparison: Constant assessment of one’s status relative to others, driving behaviors and choices.\n\n\n\n2.1.2 Understanding Status Games: Virtue, Competition, and Dominance\nIn the realm of status games, three prominent games often come to the forefront:\n\nVirtue Game: In the Virtue Game, individuals seek status through moral and ethical excellence. Displaying qualities such as honesty, integrity, and altruism becomes a means to elevate one’s standing in social hierarchies.\nCompetition Game: The Competition Game revolves around outperforming peers in various domains, including career achievements, skills, or talents. Success in this game is often measured by surpassing others in a competitive environment.\nDominance Game: The Dominance Game involves asserting power and control to secure a higher status. Individuals may employ tactics such as influence, authority, or manipulation to establish dominance and command respect within social structures.\n\nThese three games collectively illustrate the diverse strategies individuals employ to navigate social hierarchies and gain recognition within their communities.\nEach game reflects different values, priorities, and approaches to achieving status in a given context.",
    "crumbs": [
      "Weeks",
      "Week 11: Team Dynamics"
    ]
  },
  {
    "objectID": "scrum/scrum-week11.html#minority-rules-the-super-pareto",
    "href": "scrum/scrum-week11.html#minority-rules-the-super-pareto",
    "title": "Week 11: Team Dynamics",
    "section": "2.2 Minority Rules: the super-pareto",
    "text": "2.2 Minority Rules: the super-pareto\n\n\n\n\n\n\nImportant\n\n\n\nThe Minority Rules concept, popularized by Nassim Nicholas Taleb, suggests that a small, committed minority can have a disproportionate impact on a larger population. Taleb argues that throughout history, transformative ideas or behaviors often originated from a determined minority, influencing the majority.\nThis phenomenon contrasts with traditional democratic views. Taleb emphasizes the power of persistence and conviction, positing that even a small group with strong beliefs can shape societal norms. The Minority Rules principle underscores the nonlinear nature of influence, where committed outliers, rather than conformist majorities, drive significant societal changes.\n\n\nThe main idea behind complex systems is that the ensemble behaves in ways not predicted by the components. The interactions matter more than the nature of the units.\n\nStudying individual ants will never (one can safely say never for most such situations), never give us an idea on how the ant colony operates. For that, one needs to understand an ant colony as an ant colony, no less, no more, not a collection of ants.\n\nThis is called an “emergent” property of the whole, by which parts and whole differ because what matters is the interactions between such parts. And interactions can obey very simple rules.\nThe rule we discuss in this chapter is the minority rule.\nThe minority rule will show us how it all it takes is a small number of intolerant virtuous people with skin in the game, in the form of courage, for society to function properly.\n\nThe Most Intolerant Wins: The Dictatorship of the Small Minority",
    "crumbs": [
      "Weeks",
      "Week 11: Team Dynamics"
    ]
  },
  {
    "objectID": "scrum/scrum-week11.html#milgrams-experiments-and-the-perils-of-obedience",
    "href": "scrum/scrum-week11.html#milgrams-experiments-and-the-perils-of-obedience",
    "title": "Week 11: Team Dynamics",
    "section": "2.3 Milgram’s Experiments and the Perils of Obedience",
    "text": "2.3 Milgram’s Experiments and the Perils of Obedience\n\n\n\n\n\n\nImportant\n\n\n\nMilgram’s Experiments, conducted by psychologist Stanley Milgram in the 1960s, aimed to study obedience to authority figures. Participants were instructed to administer increasingly severe electric shocks to a person (a confederate) in another room, even when protests were heard.\nThe shocks were simulated, but the study revealed the alarming extent to which people would comply with authority, even when it conflicted with their moral beliefs.\nThis highlighted the perils of blind obedience, illustrating the potential for individuals to engage in harmful actions under authoritative influence. Milgram’s work raised ethical concerns but significantly contributed to our understanding of human behavior in social contexts.",
    "crumbs": [
      "Weeks",
      "Week 11: Team Dynamics"
    ]
  },
  {
    "objectID": "scrum/scrum-week11.html#from-cashews-to-nudges-the-evolution-of-behavioral-economics",
    "href": "scrum/scrum-week11.html#from-cashews-to-nudges-the-evolution-of-behavioral-economics",
    "title": "Week 11: Team Dynamics",
    "section": "4.1 From Cashews to Nudges: The Evolution of Behavioral Economics",
    "text": "4.1 From Cashews to Nudges: The Evolution of Behavioral Economics\n\nFrom Cashews to Nudges:The Evolution of Behavioral Economics\n\n\n\n\n\n\nMisbehaving: The Making of Behavioral Economics\n\n\nRichard H. Thaler’s “From Cashews to Nudges: The Evolution of Behavioral Economics” Prize Lecture, delivered on December 8, 2017, at the University of Chicago Booth School of Business, explores the progression of behavioral economics.\nThaler, a pioneer in the field, traces its evolution from early anomalies like cashew consumption patterns to the development of behavioral insights that underpin “nudges” – subtle interventions designed to influence decision-making.\nThe lecture likely delves into how these insights challenge traditional economic models and reshape our understanding of how individuals make choices, offering a nuanced perspective on the intersection of psychology and economics in decision science.\n\n\n\n\n\n\nNote\n\n\n\nRichard H. Thaler’s insights in behavioral economics challenge traditional economic assumptions. He introduces concepts like bounded rationality and loss aversion, demonstrating that decision-making is influenced by cognitive limitations and emotional factors.\nThaler’s work includes the popularized idea of “nudging,” subtle interventions guiding individuals toward better choices. By recognizing these behavioral patterns, policymakers can design effective strategies for public policy and individuals can make more informed economic decisions.\n\n\n\n4.1.1 Regarding Thaler: How Do We Make Economic Decisions?\nRichard H. Thaler, a prominent figure in behavioral economics, has reshaped our understanding of how individuals make economic decisions. His work challenges the traditional assumption of perfect rationality, introducing insights from psychology and behavioral science. Key concepts include:\n\nBounded Rationality:\n\nAcknowledges limited cognitive resources, leading to heuristics and systematic biases.\n\nLoss Aversion:\n\nHighlights the tendency to weigh potential losses more heavily than equivalent gains, influencing decision-making and risk-taking.\n\nNudging:\n\nIntroduces the concept that subtle changes in choice presentation (“nudges”) can impact decisions and guide individuals toward better outcomes.\n\nBehavioral Economics and Policy:\n\nExamines the implications for public policy, using insights to design interventions that encourage better choices.\n\nEndowment Effect:\n\nExplores how individuals assign higher value to owned items, affecting economic decisions.\n\n\nThaler’s contributions emphasize that economic decision-making is influenced by cognitive limitations, emotions, and social context. Recognizing these behavioral patterns allows for a more realistic understanding and the design of strategies to improve decision outcomes.",
    "crumbs": [
      "Weeks",
      "Week 11: Team Dynamics"
    ]
  },
  {
    "objectID": "scrum/scrum-week11.html#incentives",
    "href": "scrum/scrum-week11.html#incentives",
    "title": "Week 11: Team Dynamics",
    "section": "4.2 Incentives",
    "text": "4.2 Incentives\n\nRSA Animate: Drive: The surprising truth about what motivates us",
    "crumbs": [
      "Weeks",
      "Week 11: Team Dynamics"
    ]
  },
  {
    "objectID": "scrum/scrumlab1.html",
    "href": "scrum/scrumlab1.html",
    "title": "SCRUM Lab#SC01: Paper Airplanes",
    "section": "",
    "text": "📘 SCRUM Lab#SC01: Paper Airplanes\nThe Agile Paper Plane Game is a dynamic and interactive workshop designed to illustrate the principles of Agile project management in a fun and engaging way.\n\nParticipants form teams and are tasked with building and continuously improving a paper airplane within time-boxed iterations.\nEach iteration represents a development cycle, emphasizing Agile concepts like collaboration, adaptability, and incremental progress.\nTeams gather feedback, make swift adjustments, and strive for optimal performance in a simulated project environment.\n\nThis hands-on lab promotes a deeper understanding of Agile methodologies, fostering teamwork, communication, and agility in responding to evolving requirements – all essential elements of successful project management.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC01: Paper Airplanes"
    ]
  },
  {
    "objectID": "scrum/scrumlab1.html#introduction",
    "href": "scrum/scrumlab1.html#introduction",
    "title": "SCRUM Lab#SC01: Paper Airplanes",
    "section": "1.1 Introduction",
    "text": "1.1 Introduction\nFirst of all, you need to create as many 2-4 people teams as possible. Teams don’t have to be equally sized (life is not fair).\nThe goal for every team will be to build paper (logo, name and adhesive tape) planes while consuming resources and provide profit for a company.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC01: Paper Airplanes"
    ]
  },
  {
    "objectID": "scrum/scrumlab1.html#rules",
    "href": "scrum/scrumlab1.html#rules",
    "title": "SCRUM Lab#SC01: Paper Airplanes",
    "section": "1.2 Rules",
    "text": "1.2 Rules\nYou should start the game with the introduction of rules.\n\nThe plane is counted as finished (accepted/done) and valid (approved ) only when you throw it and it crosses a distance (3-5 meters? )mark before touchdown.\nEvery team starts with €30 in their pockets.\nThe maximum profit from one plane is to-calculate and a maximum loss per lack of plane is to-calculate.\nYour balance is changing:\n\n+€3 per committed and finished plane\n+€2 per valid plane above commitment limit (crosses distance mark).\n-€3 per committed and unfinished plane\n-€1 per plane given for a failed test\n-€1 per used piece of paper.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC01: Paper Airplanes"
    ]
  },
  {
    "objectID": "scrum/scrumlab1.html#game-process",
    "href": "scrum/scrumlab1.html#game-process",
    "title": "SCRUM Lab#SC01: Paper Airplanes",
    "section": "1.3 Game process",
    "text": "1.3 Game process\nThe game will be held in 3 sprints. Each sprint will be combined from:\n\nPlanning (5min) – each team will be provided with one A4 piece of paper for checking and figuring out a number of planes that they will commit to, in this sprint. Each team gets the number of papers to what they commit to deliver.\nSprinting (5 min) – actual building.\nReview – all participants together gather to check their planes (you are making test flights). Ask users to mark their planes before the review, so you will make blind tests (you will not know whose planes you are throwing). The plane is accepted when it flies for more than 3 meters?.\nRetro (5 min) – teams use this time to find out what they should improve in the next sprint.\n\nDuring the Agile Paper Planes Game, you should update board with every group’s current account.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC01: Paper Airplanes"
    ]
  },
  {
    "objectID": "scrum/scrum-what-concepts.html",
    "href": "scrum/scrum-what-concepts.html",
    "title": "SCRUM Agile Methodology",
    "section": "",
    "text": "📘 SCRUM definition\nScrum is a framework for project management that is based on teamwork, accountability, transparency and short time-boxed iterative progress toward a well-defined goal.\nThe framework begins with a simple premise: start with what can be seen or known. After that, track the progress and adapt, whenever it is necessary.\nAt the end of each iteration, the team holds two meetings: one review to show the work done for clients and to get feedback, and one retrospective to enable the team to reflect and improve.\n\n\n\n\nScrum is a framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum itself is a simple framework for effective team collaboration on complex products.\n\n\nScrum co-creators Ken Schwaber and Jeff Sutherland have written The Scrum Guide to explain Scrum clearly and succinctly.\nThis section contains the definition of Scrum. This definition consists of:\n\npillars\nScrum’s roles,\nevents,\nartifacts,\nand the rules that bind them together.\n\n\nScrum is: Lightweight, Simple to understand and Difficult to master.\n\n\n\n\nEmpiricism means working in a fact-based, experience-based, and evidence-based manner. Scrum implements an empirical process where progress is based on observations of reality, not fictitious plans.\nScrum also places great emphasis on mind-set and cultural shift to achieve business and organizational Agility.\n\nTransparency: This means presenting the facts as is.\n\n\n\nAll people involved—the customer, the CEO, individual contributors—are transparent in their day-to-day dealings with others. They all trust each other, and they have the courage to keep each other abreast of good news as well as bad news. Everyone strives and collectively collaborates for the common organizational objective, and no one has any hidden agenda.\n\nInspection: Inspection in this context is not an inspection by an inspector or an auditor but an inspection by every- one on the Scrum Team.\n\n\n\nThe inspection can be done for the product, processes, people aspects, practices, and continuous improvements.\n\nAdaptation: Adaptation in this context is about continuous improvement, the ability to adapt based on the results of the inspection.\n\n\n\nEveryone in the organization must ask this question regularly: Are we better off than yesterday? For profit-based organizations, the value is represented in terms of profit.\n\n\n\n3 pillars The Three Pillars of Empiricism (Scrum)\n\n\n\n\n\n\n\nThe Scrum Team is made up of the people who actually work on Product Backlog Items during a Sprint. In a software context, this group is most often called the Development Team.\n\n\nIn other contexts, the simple term Team is often used.\nThe Scrum Master and the Product Owner, while part of the overall Scrum Team, may or may not be members of the Team working on PBIs. There is no Project Manager or Team Lead in Scrum.\n\nEveryone is simply an equal member of the Team.\n\nThe Scrum team is:\n\nTranscendent\nAutonomous\nCross-Functional\n\n\n\n\nThe Scrum Master is tasked with making Scrum work. They work intimately with the Team, sometimes as a member. Their primary task is to remove Impediments and guide the team in Scrum practices.\n\n\nThe Scrum Master does whatever it takes to help the team succeed.\nScrum Masters are servant-leaders, not managers. They play the pivotal role of making sure Scrum is practiced well. The Scrum Master is accountable for the Velocity and the Continuous Improvement of the Team.\n\n\n\nThe Product Owner is the Team member who knows what the customer wants and the relative business value of those wants. He or she can then translate the customer’s wants and values back to the Scrum team.\n\n\nThe Product Owner must know the business case for the product and what features the customers wants.\nHe must be available to consult with the team to make sure they are correctly implementing the product vision. Most importantly, he must have the authority to make all decisions necessary to complete the project.\n\n\n\n\nThrough this work we have come to value:\n\n\nIndividuals and interactions over processes and tools\n\n\nWorking software over comprehensive documentation\n\n\nCustomer collaboration over contract negotiation\n\n\nResponding to change over following a plan\n\n\nThat is, while there is value in the items on the right, we value the items on the left more.",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Agile Methodology"
    ]
  },
  {
    "objectID": "scrum/scrum-what-concepts.html#introduction",
    "href": "scrum/scrum-what-concepts.html#introduction",
    "title": "SCRUM Agile Methodology",
    "section": "",
    "text": "Scrum is a framework within which people can address complex adaptive problems, while productively and creatively delivering products of the highest possible value.\nScrum itself is a simple framework for effective team collaboration on complex products.\n\n\nScrum co-creators Ken Schwaber and Jeff Sutherland have written The Scrum Guide to explain Scrum clearly and succinctly.\nThis section contains the definition of Scrum. This definition consists of:\n\npillars\nScrum’s roles,\nevents,\nartifacts,\nand the rules that bind them together.\n\n\nScrum is: Lightweight, Simple to understand and Difficult to master.",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Agile Methodology"
    ]
  },
  {
    "objectID": "scrum/scrum-what-concepts.html#the-three-pillars-of-empiricism-scrum",
    "href": "scrum/scrum-what-concepts.html#the-three-pillars-of-empiricism-scrum",
    "title": "SCRUM Agile Methodology",
    "section": "",
    "text": "Empiricism means working in a fact-based, experience-based, and evidence-based manner. Scrum implements an empirical process where progress is based on observations of reality, not fictitious plans.\nScrum also places great emphasis on mind-set and cultural shift to achieve business and organizational Agility.\n\nTransparency: This means presenting the facts as is.\n\n\n\nAll people involved—the customer, the CEO, individual contributors—are transparent in their day-to-day dealings with others. They all trust each other, and they have the courage to keep each other abreast of good news as well as bad news. Everyone strives and collectively collaborates for the common organizational objective, and no one has any hidden agenda.\n\nInspection: Inspection in this context is not an inspection by an inspector or an auditor but an inspection by every- one on the Scrum Team.\n\n\n\nThe inspection can be done for the product, processes, people aspects, practices, and continuous improvements.\n\nAdaptation: Adaptation in this context is about continuous improvement, the ability to adapt based on the results of the inspection.\n\n\n\nEveryone in the organization must ask this question regularly: Are we better off than yesterday? For profit-based organizations, the value is represented in terms of profit.\n\n\n\n3 pillars The Three Pillars of Empiricism (Scrum)",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Agile Methodology"
    ]
  },
  {
    "objectID": "scrum/scrum-what-concepts.html#scrum-roles",
    "href": "scrum/scrum-what-concepts.html#scrum-roles",
    "title": "SCRUM Agile Methodology",
    "section": "",
    "text": "The Scrum Team is made up of the people who actually work on Product Backlog Items during a Sprint. In a software context, this group is most often called the Development Team.\n\n\nIn other contexts, the simple term Team is often used.\nThe Scrum Master and the Product Owner, while part of the overall Scrum Team, may or may not be members of the Team working on PBIs. There is no Project Manager or Team Lead in Scrum.\n\nEveryone is simply an equal member of the Team.\n\nThe Scrum team is:\n\nTranscendent\nAutonomous\nCross-Functional\n\n\n\n\nThe Scrum Master is tasked with making Scrum work. They work intimately with the Team, sometimes as a member. Their primary task is to remove Impediments and guide the team in Scrum practices.\n\n\nThe Scrum Master does whatever it takes to help the team succeed.\nScrum Masters are servant-leaders, not managers. They play the pivotal role of making sure Scrum is practiced well. The Scrum Master is accountable for the Velocity and the Continuous Improvement of the Team.\n\n\n\nThe Product Owner is the Team member who knows what the customer wants and the relative business value of those wants. He or she can then translate the customer’s wants and values back to the Scrum team.\n\n\nThe Product Owner must know the business case for the product and what features the customers wants.\nHe must be available to consult with the team to make sure they are correctly implementing the product vision. Most importantly, he must have the authority to make all decisions necessary to complete the project.",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Agile Methodology"
    ]
  },
  {
    "objectID": "scrum/scrum-what-concepts.html#agile-manifesto-four-foundations",
    "href": "scrum/scrum-what-concepts.html#agile-manifesto-four-foundations",
    "title": "SCRUM Agile Methodology",
    "section": "",
    "text": "Through this work we have come to value:\n\n\nIndividuals and interactions over processes and tools\n\n\nWorking software over comprehensive documentation\n\n\nCustomer collaboration over contract negotiation\n\n\nResponding to change over following a plan\n\n\nThat is, while there is value in the items on the right, we value the items on the left more.",
    "crumbs": [
      "What is SCRUM",
      "SCRUM Agile Methodology"
    ]
  },
  {
    "objectID": "scrum/scrumlab4.html",
    "href": "scrum/scrumlab4.html",
    "title": "SCRUM Lab#SC04: Final Project",
    "section": "",
    "text": "📘 SCRUM Lab#SC04: Final Project\nWelcome to the Agile Product Development Lab, where students embark on a hands-on month to create, market, and manage a product using Agile methodologies.\nIn groups of 4-5, each student assumes a crucial role for a holistic project experience.\n\nProject Overview: Students collaboratively select and define a product—digital or physical, such as a web app or tangible item. The challenge encompasses planning, execution, and optimization of the entire product lifecycle.\nAgile Framework: Teams apply Agile principles to manage the project effectively. Five sprints, each spanning a designated time, allow iterative development, fostering adaptability to evolving requirements.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC04: Final Project"
    ]
  },
  {
    "objectID": "scrum/scrumlab4.html#product-creation",
    "href": "scrum/scrumlab4.html#product-creation",
    "title": "SCRUM Lab#SC04: Final Project",
    "section": "4.1 Product Creation",
    "text": "4.1 Product Creation\nTeams initiate the product creation process by conducting thorough market research and identifying customer needs. The programmer and design roles collaborate on prototyping and development, ensuring alignment with user requirements. Agile principles, such as user feedback loops, guide iterative improvements.\nThe documentation team creates user-friendly guides, contributing to a positive user experience. Continuous integration and testing are prioritized, ensuring a high-quality product. Regular demonstrations during sprints facilitate feedback, enabling quick adjustments.\n\n\n\n\n\n\nImportant\n\n\n\nThis emphasis on the iterative development cycle ensures that the final product not only meets technical specifications but is also well-aligned with customer expectations and market demands.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC04: Final Project"
    ]
  },
  {
    "objectID": "scrum/scrumlab4.html#marketing-and-sales",
    "href": "scrum/scrumlab4.html#marketing-and-sales",
    "title": "SCRUM Lab#SC04: Final Project",
    "section": "4.2 Marketing and Sales",
    "text": "4.2 Marketing and Sales\nThe marketing and sales teams synchronize efforts to align promotional activities with product releases. Feedback from sales efforts informs marketing strategies, creating a feedback loop for continuous improvement.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC04: Final Project"
    ]
  },
  {
    "objectID": "scrum/scrumlab4.html#financials-and-scalling",
    "href": "scrum/scrumlab4.html#financials-and-scalling",
    "title": "SCRUM Lab#SC04: Final Project",
    "section": "4.3 Financials and scalling",
    "text": "4.3 Financials and scalling\nTeams are responsible for financial aspects, including budgeting, cost estimation, and revenue projections. Financial discussions occur regularly to ensure alignment with project goals and realistic expectations.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC04: Final Project"
    ]
  },
  {
    "objectID": "scrum/scrumlab4.html#tool-integration-for-seamless-collaboration",
    "href": "scrum/scrumlab4.html#tool-integration-for-seamless-collaboration",
    "title": "SCRUM Lab#SC04: Final Project",
    "section": "5.1 Tool Integration for Seamless Collaboration",
    "text": "5.1 Tool Integration for Seamless Collaboration\n\nFigma for Design Collaboration: Figma facilitates collaborative design, allowing the design team to create interactive prototypes and share them in real-time. Design iterations are streamlined, promoting efficient communication and alignment with user expectations. Learn more about Figma\nCanva a versatile graphic design platform, extends its utility to web design within our proposed toolkit. Teams can leverage Canva’s intuitive interface and pre-designed templates to craft visually appealing web elements, such as banners, logos, and social media graphics. This tool simplifies the design process, enabling even those without extensive graphic design skills to create professional-looking web assets. Explore Canva\nAirtable for Project Management: Airtable serves as a centralized project management tool. Teams can create custom workflows, track tasks, and manage sprints collaboratively. Its flexibility accommodates the diverse needs of each role, providing a dynamic platform for project organization. Discover Airtable\nAppSheet for Rapid App Prototyping: AppSheet integrates seamlessly with Google Sheets, enabling rapid app prototyping. The programming team can quickly iterate on app functionalities, and the entire team can provide feedback through the intuitive interface, fostering collaboration and swift adjustments. Explore AppSheet\nHRef for Marketing Campaigns: HRef is utilized for creating engaging marketing campaigns. The marketing team designs landing pages, tracks user interactions, and adjusts campaigns based on real-time analytics. This tool streamlines the marketing process and enhances the team’s ability to adapt to changing market dynamics. Learn more about HRef\nBuffer for Adaptive Planning: Buffer is introduced to the project management toolkit, providing a dedicated space for teams to incorporate time buffers. This ensures flexibility in the project timeline, allowing for unforeseen challenges or additional iterations. Teams can allocate buffer time strategically within sprints, enhancing adaptability without compromising project timelines. Discover Buffer",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC04: Final Project"
    ]
  },
  {
    "objectID": "scrum/scrumlab4.html#documentation",
    "href": "scrum/scrumlab4.html#documentation",
    "title": "SCRUM Lab#SC04: Final Project",
    "section": "5.2 Documentation",
    "text": "5.2 Documentation\nGitHub Wiki for Documentation: GitHub Wiki serves as a centralized repository for project documentation.\n\nThe documentation team can create and edit pages collaboratively, ensuring that user manuals, guides, and technical documentation are easily accessible and consistently updated.\n\nWith Markdown, teams easily create and edit pages, capturing project insights and guidelines. This linkable knowledge hub enhances transparency and fosters effective communication, providing a centralized resource accessible to all stakeholders. Discover the power of GitHub Wiki.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC04: Final Project"
    ]
  },
  {
    "objectID": "scrum/scrumlab4.html#integration-strategy",
    "href": "scrum/scrumlab4.html#integration-strategy",
    "title": "SCRUM Lab#SC04: Final Project",
    "section": "5.3 Integration Strategy",
    "text": "5.3 Integration Strategy\n\nTeams utilize these tools within an integrated workflow. Figma prototypes inform AppSheet development tasks in Airtable. GitHub Wiki links serve as a reference hub for all teams, fostering cross-functional awareness.\n\nHRef data is incorporated into Airtable for comprehensive analytics. This interconnected toolset ensures seamless collaboration, allowing teams to focus on their specific responsibilities while maintaining visibility into the broader project landscape.",
    "crumbs": [
      "SCRUM: Laboratories",
      "SCRUM Lab#SC04: Final Project"
    ]
  },
  {
    "objectID": "scrum/scrum-week6.html",
    "href": "scrum/scrum-week6.html",
    "title": "Week 6: Product Owner, how it works",
    "section": "",
    "text": "📘 Summary: SCRUM Week 6 - Product Owner, how it works\nIn SCRUM Agile, the Product Owner is a crucial team member responsible for understanding customer needs and the business value associated with those needs.\nThe Product Owner translates customer requirements to the Scrum team, ensuring the correct implementation of the product vision.\nKey responsibilities include maximizing product value, effective Product Backlog management, and clear communication of the Product Goal.\nThe Product Owner must possess entrepreneurial qualities, a clear vision, and decisiveness. Importantly, they have the authority to make project-critical decisions. However, a Product Owner should avoid roles such as being a clerk, story writer, project manager, subject matter expert, gatekeeper, or manager.\nThe Product Backlog, representing all necessary work, is a dynamic, ordered list crucial for decision-making within the Scrum Team.",
    "crumbs": [
      "Weeks",
      "Week 6: Product Owner, how it works"
    ]
  },
  {
    "objectID": "scrum/scrum-week6.html#how-it-works",
    "href": "scrum/scrum-week6.html#how-it-works",
    "title": "Week 6: Product Owner, how it works",
    "section": "1.1 How it works",
    "text": "1.1 How it works\nAccording to the Scrum Guide, Product Owners have a vital role in the value creation process of the Scrum team.\n\n\n\n\n\n\nTip\n\n\n\nThe Product Owner is accountable for:\n\nfor maximizing the value of the product resulting from the work of the Scrum Team. How this is done may vary widely across organizations, Scrum Teams, and individuals.\neffective Product Backlog management, which includes developing and explicitly communicating the Product Goal.\neffective Product Backlog management, which includes creating and clearly communicating Product Backlog items.\neffective Product Backlog management, which includes ordering Product Backlog items.",
    "crumbs": [
      "Weeks",
      "Week 6: Product Owner, how it works"
    ]
  },
  {
    "objectID": "linux/lilab01-2.html",
    "href": "linux/lilab01-2.html",
    "title": "Linux Lab#LI01-2: Install at least three distributions",
    "section": "",
    "text": "📘 Linux Lab#LI01-2: Install at least three distributions\n\nCreate separate boot, var, home, swap, and filesystem root partitions (five partitions total). Leave at least 100MB of empty, unused, unpartitioned hard disk space for a future task.\nChoose whatever desktop graphical user interfaces (GUIs) are available for your selected distributions.\nCreate a user during installation, and make that user the administrator. This grants the user sudo permissions.\nOnce installation is complete, explore the built-in help features:\n\nUse man pages to research the fstab file.\nWhat are the differences between the various man page sections? Admins primarily use sections 1, 5, and 8—why?\nHow can you do a keyword search within man pages?\nWhat can be found at /usr/share/doc?\nExplore whatever GUI help files might be available.\n\nComplete the Vim tutorial (the command is vimtutor) to get comfortable with Vim. You can use Nano if you prefer. Be certain you can create, open, edit, save, and close configuration files before proceeding any further with these activities.\nTry configuring the installations for a specific time zone by using the tzselect command.\nSelect one installation as your primary lab computer. Designate it as the “server” and select a second installation as a “client.” You will use these two systems in the remaining activities.This lab may serve many purposes, and you need some idea of what you want to use your lab to achieve.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI01-2: Install at least three distributions"
    ]
  },
  {
    "objectID": "linux/lilab04-1.html",
    "href": "linux/lilab04-1.html",
    "title": "Linux Lab#LI04-1: Bash scripting, qtool",
    "section": "",
    "text": "📘 Linux Lab#LI04: Bash\nTo create a terminal app using bash scripts, you will need to:\n\nDefine the functionality of the app, including the commands and options it should support. (Lab#LI04-1)\nWrite the bash scripts that implement this functionality. This may involve writing functions to perform specific tasks, as well as handling input and output from the terminal. (Lab#LI04-1)\nTest the scripts to ensure they are working as intended. (Lab#LI04-1)\nPackage the scripts into a single executable file that can be easily run from the terminal. This may involve creating a wrapper script that calls the other scripts in the correct order. (Lab#LI04-2)\nMake the app available for others to use, either by distributing it as a package (such as a .deb or .rpm file) or by hosting it on a website or repository. (Lab#LI04-3)\nProvide documentation and usage instructions for the app, so that users know how to use it effectively. (Lab#LI04-3)",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI04-1: Bash scripting, qtool"
    ]
  },
  {
    "objectID": "linux/lilab04-1.html#solving-discussion-qtool-example",
    "href": "linux/lilab04-1.html#solving-discussion-qtool-example",
    "title": "Linux Lab#LI04-1: Bash scripting, qtool",
    "section": "0.1 Solving discussion: Qtool example",
    "text": "0.1 Solving discussion: Qtool example\n\n📘 QTool: Quarto tool\nQtool is a bash-terminal tool specifically designed for users of the Quarto documentation platform. It offers a number of features that can help users manage large numbers of Quarto files more efficiently.\nRepository on GitHub\n\n\nQtool is a command-line tool that helps users manage and manipulate their Quarto (.qmd) files. It has the following five operations:\n\ndebug: scans the directories and files in a specified directory, and checks for any discrepancies between the .yaml and .qmd files. It reports any errors or inconsistencies it finds.\ndirtable: generates a CSV file containing information about the directories in the specified directory. It includes the directory name, the number of files in the directory, and the total number of lines in all of the files in the directory.\nyamltable: generates a CSV file containing information about the .yaml files in the specified directory. It includes the file name, the number of lines in the file, and the number of sections in the file.\nwritenavigation: adds callouts to the .qmd files in the specified directory, to make it easier for users to navigate through the content. It adds a callout at the beginning of each section, with a link to the next and previous sections.\n\n\n\n\n_qtool folder on quarto project directory\n\n\n\n\n\nyamltable executing: there are 3 discrepancies on yaml configuration file\n\n\n\n\n\nyamltable: missing .qmd file\n\n\n\n\n\ndirtable executing: all files in our directory\n\n\n\n\n\ndirtable: all data from files\n\n\n\n\n\ndebug executing: summary\n\n\n\n\n\nwritenavigation is will create navigation links and write the .qmd file\n\n\n\n\n\nwritenavigation executinng\n\n\n\n\n\nafter execution writenavigation\n\n\n\n\n\nCode: writenavigation.sh\n\n\nupdated code on GitHub.com\n\n``` {.bash .code-overflow-wrap filename=“writenavigation.sh” } #!/bin/bash",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI04-1: Bash scripting, qtool"
    ]
  },
  {
    "objectID": "linux/linux-distros-debian.html#the-debian-ecosystem",
    "href": "linux/linux-distros-debian.html#the-debian-ecosystem",
    "title": "Linux Distros: Debian",
    "section": "1.1 The Debian Ecosystem",
    "text": "1.1 The Debian Ecosystem\n\nThe Debian ecosystem is vast and diverse, catering to a wide range of user preferences. In this section, we delve into the different Debian releases, understanding the characteristics of each branch, including Stable, Testing, and Unstable.\n\nPeople: Who we are and what we do",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Debian"
    ]
  },
  {
    "objectID": "linux/linux-distros-debian.html#reasons-to-use-debian",
    "href": "linux/linux-distros-debian.html#reasons-to-use-debian",
    "title": "Linux Distros: Debian",
    "section": "1.2 Reasons to use Debian",
    "text": "1.2 Reasons to use Debian\nThere are a lot of reasons to choose Debian as your operating system – as a user, as a developer, and even in enterprise environments.\nMost users appreciate the stability, and the smooth upgrade processes of both packages and the entire distribution.\nDebian is also widely used by software and hardware developers because it runs on numerous architectures and devices, offers a public bug tracker and other tools for developers. If you plan to use Debian in a professional environment, there are additional benefits like LTS versions and cloud images.\n\n\nFor me it’s the perfect level of ease of use and stability. I’ve used various different distributions over the years but Debian is the only one that just works.\nNorhamsFinest on Reddit*\nDebian is Free Software.\nDebian is made of free and open source software and will always be 100% free. Free for anyone to use, modify, and distribute. This is our main promise to our users. It’s also free of cost.\nDebian is stable and secure.\nDebian is a Linux-based operating system for a wide range of devices including laptops, desktops and servers. We provide a reasonable default configuration for every package as well as regular security updates during the packages’ lifetimes.\nDebian has extensive Hardware Support.\nMost hardware is supported by the Linux kernel which means that Debian will support it as well. Proprietary drivers for hardware are available if necessary.\nDebian offers a flexible Installer.\nOur Live CD is for everyone who wants to give Debian a try before installing it. It also includes the Calamares installer which makes it easy to install Debian from the live system. More experienced users can use the Debian installer with more options for fine-tuning, including the possibility to use an automated network installation tool.\nDebian provides smooth Upgrades.\nIt’s easy to keep our operating system up-to-date, whether you want to upgrade to a completely new release or just update a single package.\nDebian is the Base for many other Distributions.\nMany popular Linux distributions, like Ubuntu, Knoppix, PureOS or Tails, are based on Debian. We provide all the tools so that everyone can extend the software packages from the Debian archive with their own packages if needed.\nThe Debian Project is a Community.\nEveryone can be a part of our community; you don’t have to be a developer or sysadmin. Debian has a democratic governance structure. Since all members of the Debian project have equal rights, Debian cannot be controlled by a single company. Our developers are from more than 60 different countries, and Debian itself is translated into more than 80 languages.",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Debian"
    ]
  },
  {
    "objectID": "linux/linux-distros-debian.html#package-management-tools",
    "href": "linux/linux-distros-debian.html#package-management-tools",
    "title": "Linux Distros: Debian",
    "section": "3.1 Package Management Tools",
    "text": "3.1 Package Management Tools\n\nPackageManagementTools\n\nMany tools available on a Debian system can be used for PackageManagement. Commonly used ones include:\ncommand-line:\n\napt - The main command-line package management tool\naptitude - command-line and text-based interface (ncurses) for Apt\n\ngraphical:\n\nSynaptic - Graphical package manager\ngdebi - Graphical installer for standalone DebianPackages\ngnome-software - Software Center for GNOME",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Debian"
    ]
  },
  {
    "objectID": "linux/linux-distros-debian.html#command-line-interface",
    "href": "linux/linux-distros-debian.html#command-line-interface",
    "title": "Linux Distros: Debian",
    "section": "3.2 Command Line Interface",
    "text": "3.2 Command Line Interface\n\nCommandLineInterface",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Debian"
    ]
  },
  {
    "objectID": "linux/linux-distros-manjaro.html#software-experience-branches",
    "href": "linux/linux-distros-manjaro.html#software-experience-branches",
    "title": "Linux Distros: Manjaro",
    "section": "2.1 Software Experience: branches",
    "text": "2.1 Software Experience: branches\nThe inclusion of multiple branches empowers you to tailor your software experience. By default, you’re positioned on the stable branch, yet the flexibility exists to shift to the testing or unstable branches, providing access to diverse software versions.",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Manjaro"
    ]
  },
  {
    "objectID": "linux/linux-what-fsys.html",
    "href": "linux/linux-what-fsys.html",
    "title": "Linux: File System",
    "section": "",
    "text": "📘 System\nIn a Linux system, the file system is organized into a hierarchical structure, starting with the root directory (represented by a forward slash /). The root directory contains several subdirectories, including /bin, /etc, /home, /lib, /media, /mnt, /opt, /sbin, /tmp, and /usr.\n\n\nThese directories contain system executables, configuration files, user home directories, libraries, removable media, mount points, optional software, system executables, temporary files, and shared software, respectively.\nOther directories, such as /dev, /proc, and /sys, contain special files that provide access to hardware devices and kernel information.\n\n\n\nLinux File System\n\n\n\n\n\nLinux File System, image from Introduction to Linux, A Hands on Guide, Machtelt Garrels and Original webpage by Petersen Gross, modified by William Albritton\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Linux: concepts",
      "Linux: File System"
    ]
  },
  {
    "objectID": "linux/linux-what-vm.html",
    "href": "linux/linux-what-vm.html",
    "title": "Linux: Virtual Machines",
    "section": "",
    "text": "A virtual machine is a software program that emulates the functionality of a physical computer.\nIt allows a computer to run multiple operating systems and applications in **isolated environments&gt;&gt;&gt;&gt;&gt;&gt;&gt; master, providing a level of isolation and security between them.\nThis allows users to run different operating systems and applications on the same physical computer, providing a level of flexibility and convenience that is not possible with a physical computer.",
    "crumbs": [
      "Linux: concepts",
      "Linux: Virtual Machines"
    ]
  },
  {
    "objectID": "linux/linux-what-vm.html#what-is-a-virtual-machine",
    "href": "linux/linux-what-vm.html#what-is-a-virtual-machine",
    "title": "Linux: Virtual Machines",
    "section": "",
    "text": "A virtual machine is a software program that emulates the functionality of a physical computer.\nIt allows a computer to run multiple operating systems and applications in **isolated environments&gt;&gt;&gt;&gt;&gt;&gt;&gt; master, providing a level of isolation and security between them.\nThis allows users to run different operating systems and applications on the same physical computer, providing a level of flexibility and convenience that is not possible with a physical computer.",
    "crumbs": [
      "Linux: concepts",
      "Linux: Virtual Machines"
    ]
  },
  {
    "objectID": "linux/linux-what-vm.html#how-it-works",
    "href": "linux/linux-what-vm.html#how-it-works",
    "title": "Linux: Virtual Machines",
    "section": "2 How it works",
    "text": "2 How it works\n\nVirtual Machine (VM) is the virtualization/emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.\n\n\n\n\nWhat is server virtualization\n\n\nA hypervisor, also known as a virtual machine monitor or VMM, is software that creates and runs virtual machines (VMs). A hypervisor allows one host computer to support multiple guest VMs by virtually sharing its resources, such as memory and processing.",
    "crumbs": [
      "Linux: concepts",
      "Linux: Virtual Machines"
    ]
  },
  {
    "objectID": "linux/linux-what-vm.html#benefits-of-hypervisors",
    "href": "linux/linux-what-vm.html#benefits-of-hypervisors",
    "title": "Linux: Virtual Machines",
    "section": "3 Benefits of hypervisors",
    "text": "3 Benefits of hypervisors\nThere are several benefits to using a hypervisor that hosts multiple virtual machines:\n\nSpeed: Hypervisors allow virtual machines to be created instantly, unlike bare-metal servers. This makes it easier to provision resources as needed for dynamic workloads.\nEfficiency: Hypervisors that run several virtual machines on one physical machine’s resources also allow for more efficient utilization of one physical server. It is more cost- and energy-efficient to run several virtual machines on one physical machine than to run multiple underutilized physical machines for the same task.\nFlexibility: Bare-metal hypervisors allow operating systems and their associated applications to run on a variety of hardware types because the hypervisor separates the OS from the underlying hardware, so the software no longer relies on specific hardware devices or drivers.\nPortability: Hypervisors allow multiple operating systems to reside on the same physical server (host machine). Because the virtual machines that the hypervisor runs are independent from the physical machine, they are portable. IT teams can shift workloads and allocate networking, memory, storage and processing resources across multiple servers as needed, moving from machine to machine or platform to platform. When an application needs more processing power, the virtualization software allows it to seamlessly access additional machines.",
    "crumbs": [
      "Linux: concepts",
      "Linux: Virtual Machines"
    ]
  },
  {
    "objectID": "linux/linux-what-vm.html#what-is-virtualbox",
    "href": "linux/linux-what-vm.html#what-is-virtualbox",
    "title": "Linux: Virtual Machines",
    "section": "4 What is Virtualbox",
    "text": "4 What is Virtualbox\nVirtualBox is a free and open-source virtualization platform that allows users to run multiple operating systems on a single physical computer.\nIt is a type of hypervisor, which means it sits between the physical hardware and the operating system, allowing multiple operating systems to run on the same hardware.\nVirtualBox allows users to create and manage virtual machines, each of which can run a different operating system and be configured with its own virtual hardware. This allows users to run multiple operating systems and applications on the same computer, providing a level of flexibility and convenience that is not possible with a physical computer.",
    "crumbs": [
      "Linux: concepts",
      "Linux: Virtual Machines"
    ]
  },
  {
    "objectID": "linux/linux-what-vm.html#step-by-step-linux-mint",
    "href": "linux/linux-what-vm.html#step-by-step-linux-mint",
    "title": "Linux: Virtual Machines",
    "section": "5 Step-by-step: Linux Mint",
    "text": "5 Step-by-step: Linux Mint\nHere are the steps to create a Linux Mint virtual machine using VirtualBox on Windows:\n\nDownload and install VirtualBox on your computer.\nStart VirtualBox and click the New button to create a new virtual machine.\nIn the Create Virtual Machine wizard, give your virtual machine a name and select Linux as the operating system type and Mint as the version.\nSelect the amount of memory (RAM) you want to allocate to the virtual machine and click Next.\nSelect Create a virtual hard disk now and click Create.\nIn the Create a virtual hard disk wizard, select VDI (VirtualBox Disk Image) as the disk type and Dynamically allocated as the storage type.\nSelect the location where you want to store the virtual disk and the size of the disk, and click Create.\nClick on the new virtual machine in the list and click the Start button to boot the virtual machine.\nIn the select start-up disk window, select the Linux Mint ISO file that you previously downloaded from Linux Mint 21 “Vanessa” and click Start. 9.1. If not, manually select ISO to Controller:IDE&gt;Optic unit&gt;Choose file\nFollow the on-screen instructions to install Linux Mint on the virtual machine.\nRemove the iso from the Controller:IDE&gt;Optic unit&gt;Choose file.\nOnce the installation is complete, you can use the virtual machine to run Linux Mint and any applications that are compatible with the operating system. You can also customize the virtual machine’s settings and virtual hardware to suit your needs.\nInstall Guest Additions: 13.1. How to Install VirtualBox Guest Additions in Linux Mint 19.1 by Linux Distro Installation Guide\n\nInstall Extension Pack: from VirtualBox that allows the VM to see the USB 3.0 on our directory.\n\n\n\n\n\n\nDescriprion\n\n\n\nAllows to see on the VM the USB 3.0 provided from CIFO on our directory.\n\n\n14.1. Download the VirtualBox 7.0.4 Oracle VM VirtualBox Extension Pack.\n14.2. Verify the VM remains closed before the installation of the Extension Pack.\n\n14.3. Follow the instruction of this Link",
    "crumbs": [
      "Linux: concepts",
      "Linux: Virtual Machines"
    ]
  },
  {
    "objectID": "linux/lilab03-4.html",
    "href": "linux/lilab03-4.html",
    "title": "Linux Lab#LI03-4: Manage hardware",
    "section": "",
    "text": "📘 Linux Lab#LI03-4: Manage hardware\n\nUse the following commands to document hardware information for your lab computers: df, du, cat /proc/cpuinfo, cat /proc/meminfo.\nDevices: devices, partitions. cat /etc/fstab,\nNetworking and users: ifconfig, ip addr, uname --a.\nDirect the output from these commands into text files (make as many text files as you wish to organize this documentation reasonably). Use both &gt; and &gt;&gt; to organize the data.\nRedirect the dmesg output to a text file, and then use the grep utility to display any reference to “memory” or “CPU” in the file. What else does this file tell you?\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI03-4: Manage hardware"
    ]
  },
  {
    "objectID": "linux/lilab02-1.html",
    "href": "linux/lilab02-1.html",
    "title": "Linux Lab#LI02-1: Export env user with grep and pipe",
    "section": "",
    "text": "📘 Linux Lab#LI02-1: Export env user with grep and pipe\nExport the environment of a user linux account from user’s account with root privileges on OpenSUSE bash (or Linux Mint).",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI02-1: Export env user with grep and pipe"
    ]
  },
  {
    "objectID": "linux/lilab02-1.html#cli-tools",
    "href": "linux/lilab02-1.html#cli-tools",
    "title": "Linux Lab#LI02-1: Export env user with grep and pipe",
    "section": "1 CLI tools",
    "text": "1 CLI tools\n\n1.0.1 sudo: su - root -c\nTo run a single command as the root user. The -c option is used with the su command to specify a command that should be run as the target user.\nsu - root -c 'command'\nsu - root -c 'apt update && apt upgrade -y'\nsu - root -c 'bash /path/to/script.sh'\nsu - root -c 'bash /usr/local/bin/install-web-server.sh'\n\n\n1.0.2 redirect: &gt;&gt;\nThe &gt; symbol is used for output redirection. Here the output of command ls -al is re-directed to file listings instead of your screen.\nls -al &gt; listings\nThe &gt;&gt; operator is used to redirect the output of a command to a file, and append the output to the end of the file.\ncommand &gt;&gt; file\nls &gt;&gt; alex.txt\niconfig /all &gt; networksettings.txt \nping 8.8.8.8 &gt; 'C:\\Users\\devops\\Desktop\\PingResults.txt' \n\n\n1.0.3 grep: grep -v\nThe -v option is used with the grep command to invert the sense of matching. When used, grep will display lines that do not match the given pattern.\ngrep -v pipe_jenkins devops.txt\n\n\n1.1 environment: env\nThe env command is a built-in command in Linux and Unix-like operating systems that is used to display or set environment variables.\nEnvironment variables are named values that can be used to store information about the system or the user. They are used to configure the shell and to set options that affect the behavior of the system and programs.\nenvexport VARIABLE_NAME=value\nenv \n\n\n1.2 set: set +a\nThe set builtin command is used to set options and/or positional parameters. The -a option is used to enable the export attribute for each name, which means that the corresponding variable will be exported with the export command to the environment of subsequently executed commands.\nThe + sign before the a option toggles the attribute off. This means that set +a disables the export attribute for the specified variables, and set -a enables it.\nVARIABLE_NAME=value\nset -a\nexport VARIABLE_NAME",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI02-1: Export env user with grep and pipe"
    ]
  },
  {
    "objectID": "linux/lilab02-1.html#solving-discussion",
    "href": "linux/lilab02-1.html#solving-discussion",
    "title": "Linux Lab#LI02-1: Export env user with grep and pipe",
    "section": "2 Solving discussion",
    "text": "2 Solving discussion\nWe could do this:\nsu - root -c 'env | grep -v \"^USER_VARIABLE=\" &gt;&gt; /etc/environment'\nThis will run a subshell as the root user, source the current user’s .bashrc file to set up the environment, and then export the environment variables to /etc/environment. In Bash, the set builtin command is used to set options and/or positional parameters. The -a option is used to enable the “export” attribute for each name, which means that the corresponding variable will be exported with the export command to the environment of subsequently executed commands.\nThe + sign before the a option toggles the attribute off. This means that set +a disables the “export” attribute for the specified variables, and set -a enables it.\nsu - root -c 'bash -c \"set -a; source ~/.bashrc; set +a; env | grep -v \\\"^USER_VARIABLE=\\\" &gt;&gt; /etc/environment\"'\n\nsu - root -c: This will allow you to run a command as the root user while preserving the environment of the current user.\ngrep and &gt;&gt;: You will pipe the output to grep to filter out the USER_VARIABLE variable. The resulting output is then redirected to /etc/environment using &gt;&gt;.\nThis will add all of the environment variables from the current user’s environment to the /etc/environment file, which is used to set the environment for all users on the system.\n\nIf you want to preserve the entire environment, including aliases, functions, and shell options, you can use the bash -c command instead:\nsu - root -c 'bash -c \"set -a; source ~/.bashrc; set +a; env | grep -v \\\"^LS_COLORS=\\\" &gt;&gt; /etc/environment\"'",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI02-1: Export env user with grep and pipe"
    ]
  },
  {
    "objectID": "linux/lilab01-3.html",
    "href": "linux/lilab01-3.html",
    "title": "Linux Lab#LI01-3: Adjust user permissions",
    "section": "",
    "text": "📘 Linux Lab#LI01-3: Adjust user permissions\n\nLog in using the user account you created during installation. Use the sudo command to gain root privileges when you need to perform systemwide administrative tasks. This is an important best practice in Linux administration.\nAdjust the privileges assigned to your user account by using the sudo command. You need to edit the /etc/sudoers file by using the visudo command.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Linux: laboratories",
      "Linux Lab#LI01-3: Adjust user permissions"
    ]
  },
  {
    "objectID": "linux/linux-what-bash.html",
    "href": "linux/linux-what-bash.html",
    "title": "Linux: Bash",
    "section": "",
    "text": "📘 Bash\nBash (short for “Bourne again shell”) is a Unix shell and command language which was the default shell on Unix systems at the time. Bash is a command-line interface (CLI) that allows users to enter commands and execute programs, as well as perform various other tasks such as managing files, manipulating text, and interacting with other programs.\nBash is the default shell on many Linux systems, as well as on macOS and other Unix-like operating systems.",
    "crumbs": [
      "Linux: concepts",
      "Linux: Bash"
    ]
  },
  {
    "objectID": "linux/linux-what-bash.html#introduction",
    "href": "linux/linux-what-bash.html#introduction",
    "title": "Linux: Bash",
    "section": "",
    "text": "📘 Bash\nBash (short for “Bourne again shell”) is a Unix shell and command language which was the default shell on Unix systems at the time. Bash is a command-line interface (CLI) that allows users to enter commands and execute programs, as well as perform various other tasks such as managing files, manipulating text, and interacting with other programs.\nBash is the default shell on many Linux systems, as well as on macOS and other Unix-like operating systems.",
    "crumbs": [
      "Linux: concepts",
      "Linux: Bash"
    ]
  },
  {
    "objectID": "linux/linux-what-bash.html#overview",
    "href": "linux/linux-what-bash.html#overview",
    "title": "Linux: Bash",
    "section": "2 Overview",
    "text": "2 Overview\n\n\n\nScreenshot of Bourne Again SHell (BASH)\n\n\nBash is a powerful and flexible tool that is widely used by developers, system administrators, and other users to automate tasks, write scripts, and perform other types of command-line operations.\nIt is particularly useful for managing and interacting with large numbers of files and directories, as well as for automating repetitive tasks.\nBash scripts can be used to automate a wide variety of tasks, such as setting up and configuring systems, performing backups, and managing network resources. Bash is also widely used as a programming language, with a syntax and structure that is similar to other programming languages.\n\n\n\n\n\n\nMore on bash\n\n\n\n\n\nIn addition to its many features and capabilities, Bash is also highly customizable, with a variety of options and settings that allow users to customize its behavior and appearance. Users can customize their Bash environment by modifying the Bash configuration file, known as the bashrc file, which contains a set of commands and settings that are executed every time Bash is launched.\n\n\n\n\n\n\nScreenshot of Bourne Again SHell (BASH) by Wikimedia Foundation",
    "crumbs": [
      "Linux: concepts",
      "Linux: Bash"
    ]
  },
  {
    "objectID": "linux/linux-what-bash.html#basic-command-on-bash",
    "href": "linux/linux-what-bash.html#basic-command-on-bash",
    "title": "Linux: Bash",
    "section": "3 Basic command on Bash",
    "text": "3 Basic command on Bash\n\n\nCode Bash\n\n\n\nintroduction.sh\n\n#!/usr/bin/env bash\n# First line of the script is the shebang which tells the system how to execute\n# the script: https://en.wikipedia.org/wiki/Shebang_(Unix)\n# As you already figured, comments start with #. Shebang is also a comment.\n\n# Simple hello world example:\necho \"Hello world!\" # =&gt; Hello world!\n\n# Each command starts on a new line, or after a semicolon:\necho \"This is the first command\"; echo \"This is the second command\"\n# =&gt; This is the first command\n# =&gt; This is the second command\n\n# Declaring a variable looks like this:\nvariable=\"Some string\"\n\n# But not like this:\nvariable = \"Some string\" # =&gt; returns error \"variable: command not found\"\n# Bash will decide that `variable` is a command it must execute and give an error\n# because it can't be found.\n\n# Nor like this:\nvariable= \"Some string\" # =&gt; returns error: \"Some string: command not found\"\n# Bash will decide that \"Some string\" is a command it must execute and give an\n# error because it can't be found. In this case the \"variable=\" part is seen\n# as a variable assignment valid only for the scope of the \"Some string\"\n# command.\n\n# Using the variable:\necho \"$variable\" # =&gt; Some string\necho '$variable' # =&gt; $variable\n# When you use a variable itself — assign it, export it, or else — you write\n# its name without $. If you want to use the variable's value, you should use $.\n# Note that ' (single quote) won't expand the variables!\n# You can write variable without surrounding quotes but it's not recommended.\n\n# Parameter expansion ${...}:\necho \"${variable}\" # =&gt; Some string\n# This is a simple usage of parameter expansion such as two examples above.\n# Parameter expansion gets a value from a variable.\n# It \"expands\" or prints the value.\n# During the expansion time the value or parameter can be modified.\n# Below are other modifications that add onto this expansion.\n\n# String substitution in variables:\necho \"${variable/Some/A}\" # =&gt; A string\n# This will substitute the first occurrence of \"Some\" with \"A\".\n\n# Substring from a variable:\nlength=7\necho \"${variable:0:length}\" # =&gt; Some st\n# This will return only the first 7 characters of the value\necho \"${variable: -5}\" # =&gt; tring\n# This will return the last 5 characters (note the space before -5).\n# The space before minus is mandatory here.\n\n# String length:\necho \"${#variable}\" # =&gt; 11\n\n# Indirect expansion:\nother_variable=\"variable\"\necho ${!other_variable} # =&gt; Some string\n# This will expand the value of `other_variable`.\n\n# The default value for variable:\necho \"${foo:-\"DefaultValueIfFooIsMissingOrEmpty\"}\"\n# =&gt; DefaultValueIfFooIsMissingOrEmpty\n# This works for null (foo=) and empty string (foo=\"\"); zero (foo=0) returns 0.\n# Note that it only returns default value and doesn't change variable value.\n\n# Declare an array with 6 elements:\narray=(one two three four five six)\n# Print the first element:\necho \"${array[0]}\" # =&gt; \"one\"\n# Print all elements:\necho \"${array[@]}\" # =&gt; \"one two three four five six\"\n# Print the number of elements:\necho \"${#array[@]}\" # =&gt; \"6\"\n# Print the number of characters in third element\necho \"${#array[2]}\" # =&gt; \"5\"\n# Print 2 elements starting from fourth:\necho \"${array[@]:3:2}\" # =&gt; \"four five\"\n# Print all elements each of them on new line.\nfor item in \"${array[@]}\"; do\n    echo \"$item\"\ndone",
    "crumbs": [
      "Linux: concepts",
      "Linux: Bash"
    ]
  },
  {
    "objectID": "linux/linux-what-bash.html#cheat-sheet",
    "href": "linux/linux-what-bash.html#cheat-sheet",
    "title": "Linux: Bash",
    "section": "4 Cheat-sheet",
    "text": "4 Cheat-sheet\n\nBash scripting cheatsheet\nLearn X in Y minutes Where X=bash",
    "crumbs": [
      "Linux: concepts",
      "Linux: Bash"
    ]
  },
  {
    "objectID": "linux/linux-distros-ubuntu.html",
    "href": "linux/linux-distros-ubuntu.html",
    "title": "Linux Distros: Ubuntu",
    "section": "",
    "text": "Ubuntu",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Ubuntu"
    ]
  },
  {
    "objectID": "linux/linux-distros-ubuntu.html#basic-software-for-developers",
    "href": "linux/linux-distros-ubuntu.html#basic-software-for-developers",
    "title": "Linux Distros: Ubuntu",
    "section": "1.1 Basic Software for Developers",
    "text": "1.1 Basic Software for Developers\nUbuntu provides a solid foundation for developers with a vast repository of software tools and programming languages. Here are some essential software packages that cater to the needs of developers working on the Ubuntu platform:\n\nGCC (GNU Compiler Collection)\n\nLink: GCC Official Website\nGCC is a crucial tool for developers as it includes compilers for several programming languages, including C, C++, and Fortran. It plays a vital role in building and compiling software on Ubuntu.\n\nPython\n\nLink: Python Official Website\nUbuntu comes pre-installed with Python, a versatile programming language. Developers can easily use the package manager to install additional Python libraries and frameworks for their projects.\n\nGit\n\nLink: Git Official Website\nGit is a distributed version control system that facilitates collaboration among developers. Ubuntu users can install Git to manage source code repositories efficiently.\n\nVisual Studio Code\n\nLink: VSCode Official Website\nVSCode is a lightweight and powerful code editor that supports various programming languages. Ubuntu users can install it for a seamless development experience.\n\nIntelliJ IDEA\n\nLink: IntelliJ IDEA\nIntelliJ IDEA is a popular Java integrated development environment (IDE) that provides advanced coding assistance and productivity features. Ubuntu users can easily install and use IntelliJ IDEA for Java development.\n\nOpenJDK\n\nLink: OpenJDK Official Website\nOpenJDK is the official reference implementation of the Java Platform, Standard Edition. Ubuntu users can install OpenJDK to develop and run Java applications on their systems.\n\nSublime Text\n\nLink: Sublime Text\nSublime Text is a sophisticated text editor for code, markup, and prose. Ubuntu users can enjoy its minimalist design and powerful features by installing Sublime Text for their development needs.\n\nNode.js and npm\n\nLink: Node.js Official Website\nLink: npm Official Website\nNode.js is a JavaScript runtime, and npm is its package manager. Ubuntu users can easily install Node.js and npm to develop server-side and client-side JavaScript applications.",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Ubuntu"
    ]
  },
  {
    "objectID": "linux/linux-distros-ubuntu.html#ubuntu-server",
    "href": "linux/linux-distros-ubuntu.html#ubuntu-server",
    "title": "Linux Distros: Ubuntu",
    "section": "1.2 Ubuntu Server",
    "text": "1.2 Ubuntu Server\nUbuntu Server is a specialized edition designed for server environments, offering stability, security, and scalability. Whether you are running a small business server or managing a complex data center, Ubuntu Server provides a reliable foundation. Key features include:\n\nLTS (Long Term Support) Releases\n\nLink: Ubuntu LTS Releases\nUbuntu Server follows a predictable release cycle, with LTS versions providing five years of support. This stability is crucial for server environments where continuous uptime is essential.\n\nOpenStack Integration\n\nLink: Ubuntu OpenStack\nUbuntu Server seamlessly integrates with OpenStack, a powerful open-source cloud computing platform. This integration allows users to build and manage private and public clouds efficiently.\n\nSecurity Updates\n\nLink: Ubuntu Security Notices\nUbuntu Server prioritizes security, and users benefit from timely security updates and patches, ensuring a robust defense against potential vulnerabilities.\n\nContainer Support with Docker\n\nLink: Docker on Ubuntu\nUbuntu Server supports Docker, enabling users to deploy and manage containerized applications easily. This facilitates efficient scaling and resource utilization.",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Ubuntu"
    ]
  },
  {
    "objectID": "linux/linux-distros-ubuntu.html#forks-from-ubuntu-linux-mint",
    "href": "linux/linux-distros-ubuntu.html#forks-from-ubuntu-linux-mint",
    "title": "Linux Distros: Ubuntu",
    "section": "1.3 Forks from Ubuntu: Linux Mint",
    "text": "1.3 Forks from Ubuntu: Linux Mint\nLinux Mint is a popular distribution that is based on Ubuntu, sharing its core features while providing a distinct user experience. Here are some highlights of Linux Mint:\n\nCinnamon Desktop Environment\n\nLink: Linux Mint Cinnamon\nLinux Mint features the Cinnamon desktop environment, known for its user-friendly interface and customization options. It offers a familiar desktop experience for users transitioning from other operating systems.\n\nUpdate Manager\n\nLink: Linux Mint Update Manager\nLinux Mint includes a user-friendly update manager that simplifies the process of keeping the system and installed software up to date. Users can choose update policies based on their preferences.\n\nSoftware Manager\n\nLink: Linux Mint Software Manager\nThe Software Manager in Linux Mint provides an intuitive interface for users to discover, install, and manage software applications easily. It offers a curated selection of applications for a seamless user experience.\n\nSystem Snapshots with Timeshift\n\nLink: Timeshift on Linux Mint\nLinux Mint includes Timeshift, a powerful tool for creating and restoring system snapshots. This feature adds an extra layer of security by allowing users to roll back changes in case of unexpected issues.",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Ubuntu"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html",
    "href": "linux/linux-distros-mint.html",
    "title": "Linux Distros: Mint",
    "section": "",
    "text": "Linux Mint 21",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#installation",
    "href": "linux/linux-distros-mint.html#installation",
    "title": "Linux Distros: Mint",
    "section": "1.1 Installation",
    "text": "1.1 Installation\n\nDownload ISO Linux Mint 21\nLinux Mint Installation Guide\nLinux Mint Installation Guide: step-by-step",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#post-installation",
    "href": "linux/linux-distros-mint.html#post-installation",
    "title": "Linux Distros: Mint",
    "section": "1.2 Post-installation",
    "text": "1.2 Post-installation\n\nHardware drivers\nMultimedia codecs\nLanguage support\nSystem snapshots",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#linux-mint-system-applications-overview",
    "href": "linux/linux-distros-mint.html#linux-mint-system-applications-overview",
    "title": "Linux Distros: Mint",
    "section": "1.3 Linux Mint System Applications Overview",
    "text": "1.3 Linux Mint System Applications Overview\nSystem Reports\nLinux Mint provides users with a powerful diagnostic tool known as “System Reports.” This application assists users in identifying and troubleshooting issues on their system. Whether it’s hardware-related problems, crashes, or performance issues, System Reports gathers relevant data and generates detailed reports to help users and support teams understand and resolve issues efficiently.\n\n\n\nSystem Reports\n\n\nUsage and Features:\n\nUsers can access System Reports through the application menu or search bar.\nThe tool collects information on hardware, system logs, and potential conflicts.\nDetailed reports are available for user analysis or can be shared with the community for assistance.\n\nSystem Manager\nLinux Mint’s “System Manager” serves as a centralized hub for managing various system settings and configurations. This application consolidates essential system management tools, providing users with a convenient interface to control various aspects of their operating system.\nFeatures:\n\nSystem Manager includes modules for managing software, updates, and system settings.\nUsers can configure user accounts, system startup applications, and power management options.\nThe application simplifies system maintenance and customization, enhancing the user experience.\n\nSystem Settings\nThe “System Settings” application in Linux Mint offers a comprehensive set of tools for users to customize and configure their system. From display settings to keyboard shortcuts, users can tailor the Linux Mint environment to suit their preferences.\n\n\n\nSystem Settings\n\n\nHighlights:\n\nSystem Settings is accessible through the application menu or system tray.\nUsers can adjust display properties, set up printers, and configure network settings.\nThe intuitive interface makes it easy for both beginners and experienced users to personalize their system.\n\nSystem Info\nLinux Mint’s “System Info” application provides users with detailed information about their system’s hardware and software configuration. This tool is invaluable for users seeking to understand their system specifications or troubleshoot compatibility issues.\n\n\n\nSystem Info\n\n\nKey Information:\n\nUsers can view details about the processor, memory, graphics, and storage.\nSystem Info also provides information on the Linux Mint version, kernel, and desktop environment.\nThe application is a quick reference for users and support personnel dealing with technical inquiries.\n\nSystem monitor\nProcess Viewer And System Resource Monitor For GNOME\n\n\n\nSystem Monitor\n\n\nGParted: A Powerful Disk Partitioning Tool for Linux\nGParted stands as a formidable disk partitioning tool in the Linux ecosystem, offering users a robust and user-friendly solution for managing disk partitions on their systems. With its open-source nature and a wide array of features, GParted has become a go-to tool for both beginners and experienced users seeking efficient disk management.\n\n\n\nGParted\n\n\nFeatures of GParted:\n\nPartition Resizing and Moving\n\nGParted allows users to resize, move, and manipulate partitions effortlessly. Whether you need to expand a partition to accommodate more data or rearrange existing partitions, GParted provides a straightforward interface to carry out these tasks.\n\nFilesystem Support\n\nThe tool supports a variety of filesystems, including ext2, ext3, ext4, FAT16, FAT32, NTFS, and more. This broad compatibility ensures that GParted can be used on a wide range of storage devices and systems.\n\nCreate and Delete Partitions\n\nUsers can create new partitions or delete existing ones as needed. This flexibility is especially valuable when setting up new drives, dual-boot systems, or reorganizing storage configurations.\n\nCheck and Repair Filesystems\n\nGParted includes tools to check and repair filesystems, ensuring the integrity of data on partitions. This feature is essential for maintaining a healthy storage environment and preventing data corruption.\n\n\nUsing GParted:\n\nInstallation\n\nGParted is often available in the software repositories of major Linux distributions. Users can install it using their package manager. For Ubuntu-based systems, the command is:\nsudo apt-get install gparted\n\nLaunching GParted\n\nAfter installation, GParted can be launched from the application menu or by running the command gparted in the terminal.\n\nGUI Interface\n\nGParted provides a graphical user interface that displays a visual representation of the disk partitions, making it easy for users to understand and manage their storage configuration.\n\n\nCommunity and Support\nGParted boasts an active and supportive community, and users can find documentation, tutorials, and forums on the official GParted website. The website serves as a valuable resource for both new and experienced users, offering guidance on using the tool effectively and troubleshooting common issues.",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#install-developer-tools",
    "href": "linux/linux-distros-mint.html#install-developer-tools",
    "title": "Linux Distros: Mint",
    "section": "2.1 Install Developer Tools",
    "text": "2.1 Install Developer Tools\n\n2.1.1 Make a Bash Script Executable\n\nCreate a new text file with all the software you need with a .sh extension and code it as #!/bin/bash (that is, copy that line to the top of it)\n\ndevtools.sh\n\n\nCode\n\n\n\n\nMake the file executable, open the command line and run: chmod u+x devtools.sh. You are giving permissions to execute this file: it will grant only the owner of that file execution permissions.\nRun it: ./devtools.sh or double-click the icon\nBe careful with certain packages and tools do not work under apt get install, you will need to use snap\n\nsnap\nsudo mv /etc/apt/preferences.d/nosnap.pref ~/Documents/nosnap.backup\nsudo apt update\nsudo apt install snapd\n\nintellij-idea-educational\nvisual code educational\nsudo snap install intellij-idea-educational --classic\n\nchrome\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo dpkg -i google-chrome-stable_current_amd64.deb\n\nobsidian\nwget https://github.com/obsidianmd/obsidian-releases/releases/download/v1.0.3/obsidian_1.0.3_amd64.snap\nsudo snap install --dangerous obsidian_1.0.3_amd64.snap --classic\n\nvisual code educational\nwget https://az764295.vo.msecnd.net/stable/1ad8d514439d5077d2b0b7ee64d2ce82a9308e5a/code_1.74.1-1671015296_amd64.deb\nsudo apt install ./code_1.74.1-1671015296_amd64.deb\n\n\n2.1.2 Create an Installer Bash Script\n#!/bin/bash\n\n# Read the CSV file and install each app\ninstalled=0\nnot_installed=0\nnow=`date`\nsudo apt-get update\necho -e \"\\nInstall execution long\" &gt;&gt; installed_apps.log\necho -e \"$now\\n\" &gt;&gt; installed_apps.log\nwhile IFS=';' read -r app package_manager; do\n    if [ \"$package_manager\" = \"apt\" ]; then\n        if ! command -v \"$app\" &&gt; /dev/null; then\n            sudo apt-get install -y \"$app\"\n            echo -e \"\\t$app installed/error\" &gt;&gt; installed_apps.log\n            ((installed++))\n        else\n            echo -e \"\\t$app already exists\" &gt;&gt; installed_apps.log\n            ((not_installed++))\n        fi\n    elif [ \"$package_manager\" = \"snap\" ]; then\n        if ! command -v \"$app\" &&gt; /dev/null; then\n            sudo snap install \"$app\"\n            echo -e \"\\t$app installed/error\" &gt;&gt; installed_apps.log\n            ((installed++))\n        else\n            echo -e \"\\t$app already exists\" &gt;&gt; installed_apps.log\n            ((not_installed++))\n        fi\n    fi\ndone &lt; apps.csv\n\necho \"Total apps: $((installed + not_installed))\"\necho \"Installed/tried apps: $installed\"\necho \"Existing apps: $not_installed\"\n\necho -e \"\\nTotal apps: $((installed + not_installed))\" &gt;&gt; installed_apps.log\necho \"Installed/tried apps: $installed\" &gt;&gt; installed_apps.log\necho \"Existing apps: $not_installed\" &gt;&gt; installed_apps.log",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#timeshift",
    "href": "linux/linux-distros-mint.html#timeshift",
    "title": "Linux Distros: Mint",
    "section": "2.2 Timeshift",
    "text": "2.2 Timeshift\nTimeshift is a system restore utility which takes snapshots of the system at regular intervals. These snapshots can be restored at a later date to undo system changes. Creates incremental snapshots using rsync or BTRFS snapshots using BTRFS tools.\n\n\n\nTimeshift",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#tmcbeans-mooc-helsinki-java-2023",
    "href": "linux/linux-distros-mint.html#tmcbeans-mooc-helsinki-java-2023",
    "title": "Linux Distros: Mint",
    "section": "2.3 TMCBeans MOOC Helsinki Java 2023",
    "text": "2.3 TMCBeans MOOC Helsinki Java 2023\n\nYou can install OpenJDK with the following terminal command (works for Ubuntu):\n\n sudo apt-get install openjdk-11-jdk\n\nFrom Linux Mint 20 onwards, a file called nosnap.pref needs to be either moved or removed from /etc/apt/preferences.d/ before Snap can be installed.\n\n sudo mv /etc/apt/preferences.d/nosnap.pref ~/Documents/nosnap.backup\n\nWith the file removed from its original location, the package database needs to be updated next:\n\n sudo apt update\n(previous upgrade)\n\nTo now install snap from the Software Manager application, search for snapd and click Install. Alternatively, snapd can be installed from the command line:\n\n sudo apt install snapd\n\nlog out and then log in\nTo test your system, install the hello-world snap and make sure it runs correctly:\n\n    snap install hello-world\nhello-world 6.4 from Canonical✓ installed\n\nTest if snapd is installed:\n\n  hello-world\n  \nHello World!\n\nEventually, install TMCBeans\n\n  sudo snap install --classic tmcbeans",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#simplescreenrecorder",
    "href": "linux/linux-distros-mint.html#simplescreenrecorder",
    "title": "Linux Distros: Mint",
    "section": "2.4 simplescreenrecorder",
    "text": "2.4 simplescreenrecorder\n\nsimplescreenrecorder\n\nSimple Screen Recorder is, despite its name, an actually feature-rich screen recorder.\nThe name reflects the fact that it is simple to use unlike many other free screen recording applications available. It can be easily configured to start recording from an intuitive wizard-like interface.\nIt can record the entire screen or part of it directly. The recording can be paused and resumed at any time. Many different file formats and codecs are supported. To perform an X11 recording, all it takes is selecting an area on the root window with the mouse, choosing an output file and pressing record, either by using the mouse or using a hotkey.\n\n\n\nFeature-Rich Screen Recorder For X11 And OpenGL",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#curl",
    "href": "linux/linux-distros-mint.html#curl",
    "title": "Linux Distros: Mint",
    "section": "2.5 curl",
    "text": "2.5 curl\n\ncurl\n\n\n\n\nCommand Line Tool For Transferring Data With URL Syntax\n\n\nCurl is a command line tool for transferring data with URL syntax, supporting DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, TELNET and TFTP.\ncurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, kerberos…), file transfer resume, proxy tunneling and a busload of other useful tricks.",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "linux/linux-distros-mint.html#references",
    "href": "linux/linux-distros-mint.html#references",
    "title": "Linux Distros: Mint",
    "section": "2.6 References",
    "text": "2.6 References\n\nInstall snapd on Linux Mint 2023\nTMCBeans Helsinki Linux",
    "crumbs": [
      "Linux: distros",
      "Linux Distros: Mint"
    ]
  },
  {
    "objectID": "javase/resources.html",
    "href": "javase/resources.html",
    "title": "Java SE Resources",
    "section": "",
    "text": "Java SE Resources",
    "crumbs": [
      "Java SE readings",
      "Java SE Resources"
    ]
  },
  {
    "objectID": "javase/resources.html#object-oriented-programming-with-java-part-i",
    "href": "javase/resources.html#object-oriented-programming-with-java-part-i",
    "title": "Java SE Resources",
    "section": "1 Object-Oriented Programming with Java, part I",
    "text": "1 Object-Oriented Programming with Java, part I\n\n\n\n\n\n\n\nObject-Oriented Programming with Java, part I Week 1\nObject-Oriented Programming with Java, part I Week 2\nObject-Oriented Programming with Java, part I Week 3\nObject-Oriented Programming with Java, part I Week 4\nObject-Oriented Programming with Java, part I Week 5\nObject-Oriented Programming with Java, part I Week 6",
    "crumbs": [
      "Java SE readings",
      "Java SE Resources"
    ]
  },
  {
    "objectID": "javase/resources.html#helsinkis-mooc-on-programming-java",
    "href": "javase/resources.html#helsinkis-mooc-on-programming-java",
    "title": "Java SE Resources",
    "section": "2 Helsinki’s (MOOC) on programming Java",
    "text": "2 Helsinki’s (MOOC) on programming Java\n\n\n\n\n\n\nNote\n\n\n\nWelcome to the University of Helsinki’s free massive open online course (MOOC) on programming! This is an updated version of our popular course Object-Oriented Programming with Java.\n\n\nDuring this course, you will learn the basics of computer programming, along with algorithms and object-oriented programming through the Java programming language. The course includes comprehensive materials and plenty of programming exercises - all of which are tested using our automatic testing service Test My Code.\n\nJava Programming\nJava Programming I - Part 1\nJava Programming II - Part 8\nTMC - Test My Code\nDownload and install NetBeans - TMC\n\nJava Mooc article:\n\nJava Mooc Helsinki",
    "crumbs": [
      "Java SE readings",
      "Java SE Resources"
    ]
  },
  {
    "objectID": "javase/resources.html#books",
    "href": "javase/resources.html#books",
    "title": "Java SE Resources",
    "section": "3 Books",
    "text": "3 Books\n\nDesign Patterns: Elements of Reusable Object-Oriented Software Erich Gamma; Richard Helm; Ralph Johnson; John Vlissides",
    "crumbs": [
      "Java SE readings",
      "Java SE Resources"
    ]
  },
  {
    "objectID": "javase/resources.html#web",
    "href": "javase/resources.html#web",
    "title": "Java SE Resources",
    "section": "4 Web",
    "text": "4 Web\n\nJava Programming Tutorial Object-oriented Programming (OOP) Basics: www3.ntu.edu.sg\nJava Oracle Official Documentation The Java™ Tutorials\nStackOverFlow Is Java “pass-by-reference” or “pass-by-value”?\nJHipster is a development platform to quickly generate, develop, & deploy modern web applications & microservice architectures: JHipster\nMermaid The class diagram is the main building block of object-oriented modeling.\nJava Persistence, a book relating to the Java programming language. Java Persistence",
    "crumbs": [
      "Java SE readings",
      "Java SE Resources"
    ]
  },
  {
    "objectID": "javase/resources.html#presentations",
    "href": "javase/resources.html#presentations",
    "title": "Java SE Resources",
    "section": "5 Presentations",
    "text": "5 Presentations\n\nJava SE Presentations\n\n\n5.1 Student recommmendations\nby Victor C.\n\nTutorials de git y github: Git and GitHub\nTutorials java desde 0: Java tutorials",
    "crumbs": [
      "Java SE readings",
      "Java SE Resources"
    ]
  },
  {
    "objectID": "javase/se-pattern-uml.html",
    "href": "javase/se-pattern-uml.html",
    "title": "Java Patterns: UML",
    "section": "",
    "text": "UML stands for Unified Modeling Language. It is a standardized visual language for specifying, constructing, visualizing, and documenting the artifacts of software systems, as well as for business modeling and other non-software systems.\n\n\nUML is used by software developers, business analysts, and systems engineers to model the design of a system and communicate that design to others. It provides a common language that allows people from different disciplines to understand and discuss system design in a consistent and precise way.\nUML is a powerful tool that can help teams design and develop software and other systems more efficiently and effectively.",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: UML"
    ]
  },
  {
    "objectID": "javase/se-pattern-uml.html#definition",
    "href": "javase/se-pattern-uml.html#definition",
    "title": "Java Patterns: UML",
    "section": "",
    "text": "UML stands for Unified Modeling Language. It is a standardized visual language for specifying, constructing, visualizing, and documenting the artifacts of software systems, as well as for business modeling and other non-software systems.\n\n\nUML is used by software developers, business analysts, and systems engineers to model the design of a system and communicate that design to others. It provides a common language that allows people from different disciplines to understand and discuss system design in a consistent and precise way.\nUML is a powerful tool that can help teams design and develop software and other systems more efficiently and effectively.",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: UML"
    ]
  },
  {
    "objectID": "javase/se-pattern-uml.html#class-diagram-and-relationships",
    "href": "javase/se-pattern-uml.html#class-diagram-and-relationships",
    "title": "Java Patterns: UML",
    "section": "2 Class diagram and relationships",
    "text": "2 Class diagram and relationships\n\n\n\nExample of UML class-diagram\n\n\nIn UML, there are several types of relationships that can be used to model the relationships between elements in a system. Here is a brief overview of some of the most common types of relationships:\n\nInheritance: Inheritance is a relationship between classes, where one class is a subclass of another class and inherits the properties and behavior of the superclass. This is represented in UML by a solid line with a closed, filled arrowhead pointing from the subclass to the superclass.\nComposition: Composition is a strong type of association that represents a whole-part relationship between two classes, where the parts cannot exist independently of the whole. This is represented in UML by a solid line with a closed diamond shape pointing from the whole to the part.\nAggregation: Aggregation is a weaker type of association that represents a whole-part relationship between two classes, where the parts can exist independently of the whole. This is represented in UML by a solid line with an open diamond shape pointing from the whole to the part.\nAssociation: Association is a relationship between two classes that represents a connection or relationship between them. This is represented in UML by a solid line with an open arrowhead pointing from one class to the other.\nDependency: Dependency is a relationship between two classes that indicates that one class depends on the other for its functionality. This is represented in UML by a dashed line with an open arrowhead pointing from the dependent class to the class it depends on.\nUse: Use is a relationship between two classes that indicates that one class uses the other in some way. This is represented in UML by a dashed line with an open, unfilled arrowhead pointing from the using class to the class being used.",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: UML"
    ]
  },
  {
    "objectID": "javase/se-pattern-uml.html#example-class-and-object-diagram",
    "href": "javase/se-pattern-uml.html#example-class-and-object-diagram",
    "title": "Java Patterns: UML",
    "section": "3 Example: class and object diagram",
    "text": "3 Example: class and object diagram\n`",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: UML"
    ]
  },
  {
    "objectID": "javase/se-pattern-uml.html#entity-relationship-types-multiplicity",
    "href": "javase/se-pattern-uml.html#entity-relationship-types-multiplicity",
    "title": "Java Patterns: UML",
    "section": "4 Entity relationship types: multiplicity",
    "text": "4 Entity relationship types: multiplicity\n\n4.1 One-to-One (1:1)\nA one-to-one relationship is a relationship between two entities where one entity is related to exactly one instance of the other entity.\n\n\n\n\n\n\nclassDiagram\ndirection LR\nclass Person {\n    -name: String\n}\n\nclass Passport {\n    -passportNumber: String\n}\n\nPerson  \"1\" *-- \"1\"  Passport: Owns\n\n\n\n\n\n\n\n\n\nFor example, a person can have only one passport, and a passport can belong to only one person. In this case, the person entity and the passport entity have a one-to-one relationship.\n\n\n4.2 One-to-Many (1:n)\nA one-to-many relationship is a relationship between two entities where one entity is related to many instances of the other entity.\n\n\n\n\n\n\nclassDiagram\ndirection LR\nclass Author {\n    -name: String\n}\n\nclass Book {\n    -title: String\n}\n\nAuthor  \"1\" *-- \"*\"  Book: Writes\n\n\n\n\n\n\n\n\n\nFor example, one author can write many books, and a book can have only one author. In this case, the author entity and the book entity have a one-to-many relationship.\n\n\n4.3 Many-to-Many (n:m)\nA many-to-many relationship is a relationship between two entities where many instances of one entity are related to many instances of the other entity.\n\n\n\n\n\n\nclassDiagram\ndirection LR\nclass Student {\n    -name: String\n}\n\nclass Course {\n    -title: String\n}\n\nStudent  \"*\" *--* \"*\"  Course: Enrolls\n\n\n\n\n\n\n\n\n\nFor example, many students can be enrolled in many courses, and many courses can have many students. In this case, the student entity and the course entity have a many-to-many relationship.",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: UML"
    ]
  },
  {
    "objectID": "javase/se-pattern-uml.html#example-customer-product",
    "href": "javase/se-pattern-uml.html#example-customer-product",
    "title": "Java Patterns: UML",
    "section": "5 Example: Customer-Product",
    "text": "5 Example: Customer-Product\n\n5.1 Customer-Product relationship\nThe model of the relationships between Customer, Order and Product is not enough.\n\n\n\n\n\n\nclassDiagram\ndirection LR\nclass Customer {\n    -name: String\n}\n\nclass Order {\n    -idOrder: String\n}\n\nclass Product {\n    -productName: String\n}\n\n\nCustomer \"1\" *-- \"*\" Order: Places\nOrder \"*\" *--* \"*\" Product: Contains\n\n\n\n\n\n\n\n\n\n5.2 Defining the Customer-Product relationship\nThe model of the relationships between Customer, Order and OrderDetail and Product.\nThere is a one-to-many association between Customer and Order, but how should we represent Order / OrderDetail / Product? We have chosen to map OrderDetail as an association class representing the many-to-many association between Order and Product.\n\n\n\n\n\n\n\nclassDiagram\nclass Customer {\n    -name: String\n}\n\nclass Order {\n    -idOrd: String\n}\n\nclass OrderDetail {\n    -idOrdD: String\n}\n\nclass Product {\n    -idPro: String\n}\n\n\nCustomer \"1\" *-- \"*\" Order: Places\nOrder \"1\" *-- \"*\" OrderDetail: Contains\nOrderDetail \"*\" --* \"1\" Product: Contains\n\n\n\n\n\n\n\n\n\n\n5.3 Reference\n\nClass diagrams Mermaid\nJava Persistence\nMultiplicityNotCardinality\n\n\n\n\nDesign pattern: many-to-many (order entry)",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: UML"
    ]
  },
  {
    "objectID": "javase/se-pattern-composite.html",
    "href": "javase/se-pattern-composite.html",
    "title": "Composite",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Java Design Patterns",
      "Composite"
    ]
  },
  {
    "objectID": "javase/selab0-3.html",
    "href": "javase/selab0-3.html",
    "title": "Lab#SE00-3: Library Model",
    "section": "",
    "text": "📘 Linux Lab#SE00-3: Library Model\n\nCreate two new feature for a library management system:\n\nto track the library’s inventory of periodicals such as newspapers, newsletters, and magazines.\nthat allows the librarian to add, remove, and update the periodicals in the inventory, and also show all the periodicals in the inventory.\n\nCreate five new classes: Periodical, Newspaper, Newsletter, Magazine, and Edition.\n\nIn the Periodical class, define fields such as title, publisher, publicationDate and methods such as getTitle(), getPublisher(), getPublicationDate()\nIn the Newspaper class, define fields such as edition, section and methods such as getEdition(), getSection() and also inherit fields and methods from the Periodical class.\nIn the Newsletter class, define fields such as frequency and methods such as getFrequency() and also inherit fields and methods from the Periodical class.\nIn the Magazine class, define fields such as category and methods such as getCategory() and also inherit fields and methods from the Periodical class.\nIn the Edition class, define fields such as issueNumber, volume and methods such as getIssueNumber(), getVolume()\n\nDefine the relationships between the classes, such as inheritance, composition, and use.\n\nThe Newspaper, Newsletter, and Magazine classes inherit fields and methods from the Periodical class. The Periodical class **uses** the Edition class.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-3: Library Model"
    ]
  },
  {
    "objectID": "javase/selab0-3.html#basic-uml",
    "href": "javase/selab0-3.html#basic-uml",
    "title": "Lab#SE00-3: Library Model",
    "section": "1 Basic UML",
    "text": "1 Basic UML\nThis Mermaid class diagram describes the classes and their relationships in a library management system.\nIt shows the classes involved in the process of a library member checking out a book and a librarian helping him.\n\nThe Member class has a method checkOutPublication() which represents the action of a library member checking out a book.\n\nThe Borrow class is associated with the Member class, it has fields such as fromDate, toDate and borrowStatus which describes the borrowing time and the borrow status.\n\nThe Librarian class has a method addPublication(), removePublication(), holdPublication() which represents the action of a librarian adding, removing and holding a publication.\n\nThe Issue class is associated with the Librarian class, it has fields such as publishDate, unpublishDate and manageDate and issueStatus which describes the publishing and unpublishing of the publication.\n\n\n\n\n\n\n\n\nclassDiagram\n\nclass Publication {\n  -title: String\n  -year: int\n  -author: String\n  -statusPublication: enum\n}\n\nclass Borrow {\n    +fromDate\n    +toDate\n    +borrowStatus\n}\n\nclass Issue {\n    +publishDate\n    +unpublishDate\n    +manageDate\n    -issueStatus\n}\n\nclass Member {\n    -idMember: String\n    +checkOutPublication()\n    +returnPublication()\n    +holdOnPublication()\n}\n\nclass Librarian {\n    -idLibrarian\n    +addPublication()\n    +removePublication()\n    +holdPublication\n  \n}\n\nclass Person {\n    -name: String\n    -surname: String\n    -address: String\n    -age:int\n    +getPublications()\n}\n\nPerson --&gt; Member\nPerson --&gt; Librarian\nMember --&gt; Borrow\nBorrow --&gt; Publication\nLibrarian --&gt; Issue\nIssue --&gt; Publication\n\n\n\n\n\n\n\n\n\nThe Publication class is the superclass for all types of publications, it has fields such as title, year, author, statusPublication which represents the properties of the book.\nIn summary in this class diagram:\n\nthe Member class is checking out a book: the Borrow class helps to the member class,** it keeps track of the borrowing time and the borrow status.**\nthe Librarian class is helping the member by adding, removing and holding a publication: the Issue class is associated with the librarian class, it keeps track of the publishing and unpublishing of the publication\nthe Publication class is the superclass for all types of publications, it has properties such as title, year, author, statusPublication.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-3: Library Model"
    ]
  },
  {
    "objectID": "javase/selab0-3.html#large-uml",
    "href": "javase/selab0-3.html#large-uml",
    "title": "Lab#SE00-3: Library Model",
    "section": "2 Large UML",
    "text": "2 Large UML\nThis mermaid UML is a class diagram that describes the classes and their relationships in a library management system.\nThe Interface class represents the user interface that allows the user to manage the library, search for publications, check out and check in publications, add, remove and update publications.\n\nThe Publication class is the superclass for all types of publications, which includes:\n\nBook, Journal, Magazine, ReferenceBook, HandBook, and Movie.\n\nBook class has a method getAuthor() and getISBN(),\nJournal class has getISSN() and getAuthors(),\nMagazine class has getIssue() and getAuthors(),\nReferenceBook class has getEdition() and getAuthors(),\nHandBook class has getSubject() and getAuthors(),\nMovie class has getDirector(), getReleaseDate() and getAuthors().\n\n\nThe Borrow class has properties fromDate, toDate and borrowStatus which describes the borrowing time and the borrow status.\nThe Issue class has methods publish, unpublish and manage which describes the management of the publications.\nThe Person class is the superclass for Author, Member, and Librarian.\n\nThe Author class has getBooks() method,\nMember class has getBorrowings() method,\nLibrarian class has add(), remove(), and getPublications() method.\nThe Student class has getID() method,\nTeacher class has getDepartment() method,\nFaculty class has getPosition() method.\n\n\n\n\n\nLibrary System Mananger\n\n\n\n\nPerson.java\n\nclassDiagram\nclass Interface {\n  +manage()\n  +search()\n  +checkOut()\n  +checkIn()\n  +add()\n  +remove()\n  +update()\n}\n\nclass Publication {\n  +getTitle()\n  +getPublisher()\n  +getPublicationDate()\n}\n\nclass Book {\n  +getAuthor()\n  +getISBN()\n}\n\nclass Journal {\n  +getISSN()\n  +getAuthors()\n}\n\nclass Magazine {\n  +getIssue()\n  +getAuthors()\n}\n\nclass ReferenceBook {\n  +getEdition()\n  +getAuthors()\n}\n\n\nclass HandBook {\n  +getSubject()\n  +getAuthors()\n}\n\nclass Movie {\n  +getDirector()\n  +getReleaseDate()\n  +getAuthors()\n}\n\nclass Borrow {\n    +fromDate\n    +toDate\n    +borrowStatus\n}\n\nclass Issue {\n    +publish\n    +unpublish\n    +manage\n}\n\nclass Person {\n  +getName()\n}\n\nclass Author {\n  +getBooks()\n}\n\nclass Member {\n  +getBorrowings()\n}\n\nclass Librarian {\n  +add()\n  +remove()\n  +getPublications()\n}\n\nclass Student {\n  +getID()\n}\n\nclass Teacher {\n  +getDepartment()\n}\n\nclass Faculty {\n  +getPosition()\n}\n\nclass Catalog {\n  \n}\n\nCatalog --&gt; Publication\nPublication --&gt; Book\nPublication --&gt; Journal\nPublication --&gt; Magazine\nPublication --&gt; ReferenceBook\nPublication --&gt; HandBook\nPublication --&gt; Movie\nPerson --&gt; Author\nPerson --&gt; Member\nPerson --&gt; Librarian\nMember --&gt; Student\nMember --&gt; Teacher\nMember --&gt; Faculty\nPublication --&gt; Author\nMember --&gt; Borrow\nBorrow --&gt; Publication\nLibrarian --&gt; Issue\nIssue --&gt; Publication",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-3: Library Model"
    ]
  },
  {
    "objectID": "javase/se-concepts-scope.html",
    "href": "javase/se-concepts-scope.html",
    "title": "Java SE: Scope",
    "section": "",
    "text": "In Java, the scope of a variable refers to the parts of the program where the variable is accessible. A variable has a certain scope based on where it is declared, and the scope of a variable determines where in the program the variable can be used and accessed.\n\n\n\nScope and Access\n\n\nThere are three main types of scope in Java:\n\nClass scope: A variable that is declared within a class, but outside of any method, has class scope, which means that it can be accessed and used by any method within the class.\nMethod scope: A variable that is declared within a method has method scope, which means that it can only be accessed and used within that method.\nLocal scope: A variable that is declared within a block of code, such as within a loop or an if statement, has local scope, which means that it can only be accessed and used within that block of code.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Scope"
    ]
  },
  {
    "objectID": "javase/se-concepts-scope.html#overview",
    "href": "javase/se-concepts-scope.html#overview",
    "title": "Java SE: Scope",
    "section": "",
    "text": "In Java, the scope of a variable refers to the parts of the program where the variable is accessible. A variable has a certain scope based on where it is declared, and the scope of a variable determines where in the program the variable can be used and accessed.\n\n\n\nScope and Access\n\n\nThere are three main types of scope in Java:\n\nClass scope: A variable that is declared within a class, but outside of any method, has class scope, which means that it can be accessed and used by any method within the class.\nMethod scope: A variable that is declared within a method has method scope, which means that it can only be accessed and used within that method.\nLocal scope: A variable that is declared within a block of code, such as within a loop or an if statement, has local scope, which means that it can only be accessed and used within that block of code.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Scope"
    ]
  },
  {
    "objectID": "javase/se-concepts-scope.html#global-scope-in-java",
    "href": "javase/se-concepts-scope.html#global-scope-in-java",
    "title": "Java SE: Scope",
    "section": "2 Global scope in Java?",
    "text": "2 Global scope in Java?\nIn Java, there is no concept of global variable, and the idea of global scope differs from the traditional sense.\nIn other programming languages, global variables are variables that are declared outside of any function or class, and are accessible and usable by any part of the program.\nIn Java, however, there is no way to declare a variable outside of a class or method, so there are no global variables in the strict sense of the term.\nHere is an example of class scope in Java:\n\n\nExample.java\n\npublic class Example {\n    // Class variable\n    static int classVariable = 1;\n\n    public static void main(String[] args) {\n        // Print class variable\n        System.out.println(classVariable); // Output: 1\n\n        // Call method\n        someMethod();\n    }\n\n    public static void someMethod() {\n        // Print class variable\n        System.out.println(classVariable); // Output: 1\n    }\n}\n\n\n\nInstead, in Java, the closest equivalent to global scope is class scope. In Java, a variable that is declared within a class, but outside of any method, has class scope, which means that it can be accessed and used by any method within the class.\nIn this example, the classVariable variable is declared within the Example class, but outside of any method, so it has class scope. This means that the classVariable variable can be accessed and used by any method within the Example class, including the main method and the someMethod method.\nWhile Java doesn’t have a concept of global scope in the traditional sense, class scope provides a similar level of accessibility and usability for variables. By declaring variables within a class, but outside of any method, you can make those variables accessible and usable by any method within the class, which can be useful for sharing data and state between different parts of your program.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Scope"
    ]
  },
  {
    "objectID": "javase/se-concepts-scope.html#key-concept-curly-brackets",
    "href": "javase/se-concepts-scope.html#key-concept-curly-brackets",
    "title": "Java SE: Scope",
    "section": "3 Key-concept: curly brackets",
    "text": "3 Key-concept: curly brackets\n\n📘 Curly brackets are the key\nIn Java, the scope of a variable is determined by the position of the variable’s declaration within the code, and specifically by the presence or absence of curly braces {}.\n\n\n\nA variable that is declared outside of any curly braces has global or class scope, depending on where it is declared.\nA variable that is declared within a pair of curly braces has local scope, which means that it can only be accessed and used within those curly braces.\n\nHere is an example of how scope works in Java based on the position of the variable’s declaration within curly braces:\n\n\nExample.java\n\npublic class Example {\n    // Global or class scope\n    static int globalOrClassVariable = 1;\n\n    public static void main(String[] args) {\n        // Local scope\n        {\n            int localVariable = 2;\n\n            // Print local variable\n            System.out.println(localVariable); // Output: 2\n        }\n\n        // Print global or class variable\n        System.out.println(globalOrClassVariable); // Output: 1\n\n        // Print local variable (not accessible outside of curly braces)\n        // System.out.println(localVariable); // Error: localVariable cannot be resolved\n    }\n}\n\nIn this example, the globalOrClassVariable variable is declared outside of any curly braces, so it has global or class scope, depending on where it is declared. The localVariable variable, on the other hand, is declared within a pair of curly braces, so it has local scope and can only be accessed and used within those curly braces.\nAs this example illustrates, the position of a variable’s declaration within curly braces is a key factor in determining the variable’s scope in Java.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Scope"
    ]
  },
  {
    "objectID": "javase/se-concepts-scope.html#conclusion",
    "href": "javase/se-concepts-scope.html#conclusion",
    "title": "Java SE: Scope",
    "section": "4 Conclusion",
    "text": "4 Conclusion\nBy understanding how scope works in Java, you can effectively manage the visibility and accessibility of your variables, and avoid common pitfalls such as variable shadowing and scope-related errors.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Scope"
    ]
  },
  {
    "objectID": "javase/selab0-4.html",
    "href": "javase/selab0-4.html",
    "title": "Lab#SE00-4: Abstract/Interface Human",
    "section": "",
    "text": "📘 Linux Lab#SE00-4: Abstract/Interface Human\n\nImplement this UML and its classes.\nCreate a @Test and a method for each class:\n\nPerson\nAnimal\nTeacher\nStudent\nDog\nCat",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-4: Abstract/Interface Human"
    ]
  },
  {
    "objectID": "javase/selab0-4.html#basic-uml",
    "href": "javase/selab0-4.html#basic-uml",
    "title": "Lab#SE00-4: Abstract/Interface Human",
    "section": "1 Basic UML",
    "text": "1 Basic UML\nThe interfaces HumanAction and Action define a set of methods or properties that classes must implement.\nThe class Person implements both interfaces and provides implementation for the methods defined in both HumanAction and Action.\nAnimal class implements Action interface and provides its own implementation for the methods defined in the interface.\n\n\n\nUML to code\n\n\n\n\nHere is an example of a UML diagram that shows the relationship between the interfaces HumanAction and Action and the classes Person, Teacher, Student, Animal, Dog and Cat.\n\nThis UML diagram illustrates that the classes Person, Teacher, Student, Animals, Dog, Cat all implement the methods defined in HumanAction and Action\n\nIt also show the Inheritance relationship between classes and implementation relationship between classes and interfaces.\n\n\nTeacher and Student classes inherit from Person class and add their own specific behavior/ methods.\nDog and Cat classes inherit from Animal class and add their own specific behavior/ methods.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-4: Abstract/Interface Human"
    ]
  },
  {
    "objectID": "javase/selab3-2.html",
    "href": "javase/selab3-2.html",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "",
    "text": "📘 Linux Lab#SE03-2: Library/Book Sprint Zero\nBefore define what a Sprint Zero really is, let’s see what it isn’t.\n\nA Sprint Zero is not the phase in which:\n\nthe team is put together: a team must already be in place.\nfor setting up infrastructure which should already be implemented or easily implemented on demand.\nshould not involve adding products to a backlog or consider planning as classical project management.\n\n\nThe main goal of a Sprint Zero is to deliver some usable value that can be built upon by the next team. Sprint Zeros are required to:\n\nCreate the project’s skeleton, including research spikes.\nKeep design minimal.\nDevelop a small number of stories to completion.\nBe low velocity and lightweight.\n\nMore specifically, the deliverables of a Sprint Zero should be as follows:\n\nA usable piece of code, however small.\nA minimal environment for writing code.\nA prioritization of features or a list of stories.\nA release plan assigning each story to a Sprint.\nA plan for the most likely implementation of features.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-2: Library/Book, Sprint Zero"
    ]
  },
  {
    "objectID": "javase/selab3-2.html#architecture-and-first-draft",
    "href": "javase/selab3-2.html#architecture-and-first-draft",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.1 Architecture and first draft",
    "text": "1.1 Architecture and first draft\n\n1.1.1 Tasks/Requirements list\nLet’s take the example of the Library Lab#SE03-1 to define a graph with the requirements/tasks for the Sprint Zero deriverables:\n\n\n\n\n\n\n\n\n\nsprintZero\n\nSprint Zero\n\n\nSprint Zero\n\nSprint Zero\n\n\n\n1 - Project\n\n1 - Project\n\n\n\nSprint Zero--1 - Project\n\n\n\n\n2 - DDD\n\n2 - DDD\n\n\n\nSprint Zero--2 - DDD\n\n\n\n\n3 - UML\n\n3 - UML\n\n\n\nSprint Zero--3 - UML\n\n\n\n\n4 - Code\n\n4 - Code\n\n\n\nSprint Zero--4 - Code\n\n\n\n\nUse Case\n\nUse Case\n\n\n\n1 - Project--Use Case\n\n\n\n\nDocumentation\n\nDocumentation\n\n\n\n1 - Project--Documentation\n\n\n\n\nMock-up\n\nMock-up\n\n\n\n1 - Project--Mock-up\n\n\n\n\nOpen\\nProject?\n\nOpen\nProject?\n\n\n\n1 - Project--Open\\nProject?\n\n\n\n\nVocabulary\n\nVocabulary\n\n\n\n2 - DDD--Vocabulary\n\n\n\n\nPackages\n\nPackages\n\n\n\n2 - DDD--Packages\n\n\n\n\nModel\n\nModel\n\n\n\n2 - DDD--Model\n\n\n\n\nController\n\nController\n\n\n\n2 - DDD--Controller\n\n\n\n\nRefactor\\nDomain\n\nRefactor\nDomain\n\n\n\n2 - DDD--Refactor\\nDomain\n\n\n\n\nRelationships\n\nRelationships\n\n\n\n3 - UML--Relationships\n\n\n\n\nUtilities\n\nUtilities\n\n\n\n4 - Code--Utilities\n\n\n\n\nCore model\n\nCore model\n\n\n\n4 - Code--Core model\n\n\n\n\nManagers\n\nManagers\n\n\n\n4 - Code--Managers\n\n\n\n\nDependencies\n\nDependencies\n\n\n\n4 - Code--Dependencies\n\n\n\n\nMaven\n\nMaven\n\n\n\n4 - Code--Maven\n\n\n\n\nRefactor\\nCode\n\nRefactor\nCode\n\n\n\n4 - Code--Refactor\\nCode\n\n\n\n\nTest\n\nTest\n\n\n\n4 - Code--Test\n\n\n\n\nGit\n\nGit\n\n\n\n4 - Code--Git\n\n\n\n\nUser Stories\n\nUser Stories\n\n\n\nUse Case--User Stories\n\n\n\n\nQuarto\n\nQuarto\n\n\n\nDocumentation--Quarto\n\n\n\n\nObsidian\n\nObsidian\n\n\n\nDocumentation--Obsidian\n\n\n\n\nNew Feature\n\nNew Feature\n\n\n\nMock-up--New Feature\n\n\n\n\nCommon\\nLanguage\n\nCommon\nLanguage\n\n\n\nVocabulary--Common\\nLanguage\n\n\n\n\nController--Managers\n\n\n\n\nIf there is\\nLegacy Code\n\nIf there is\nLegacy Code\n\n\n\nRefactor\\nDomain--If there is\\nLegacy Code\n\n\n\n\nRefactor\\nDomain--Refactor\\nCode\n\n\n\n\nComposition\n\nComposition\n\n\n\nRelationships--Composition\n\n\n\n\nInheritance\n\nInheritance\n\n\n\nRelationships--Inheritance\n\n\n\n\nMultiplicity\n\nMultiplicity\n\n\n\nRelationships--Multiplicity\n\n\n\n\nBook\n\nBook\n\n\n\nCore model--Book\n\n\n\n\nBorrow\n\nBorrow\n\n\n\nCore model--Borrow\n\n\n\n\nUser\n\nUser\n\n\n\nCore model--User\n\n\n\n\nlombok\n\nlombok\n\n\n\nDependencies--lombok\n\n\n\n\nJUnit\n\nJUnit\n\n\n\nDependencies--JUnit\n\n\n\n\nJupiter\n\nJupiter\n\n\n\nDependencies--Jupiter\n\n\n\n\nfaker\n\nfaker\n\n\n\nDependencies--faker\n\n\n\n\nMake Borrow\n\nMake Borrow\n\n\n\nTest--Make Borrow\n\n\n\n\nGitHub\n\nGitHub\n\n\n\nGit--GitHub\n\n\n\n\nCreate\n\nCreate\n\n\n\nfaker--Create\n\n\n\n\n100 books\n\n100 books\n\n\n\nCreate--100 books\n\n\n\n\n100 users\n\n100 users\n\n\n\nCreate--100 users\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.1.2 Onion Architecture\n\n\n\nOnion Architecture\n\n\nThe layers are of Onion Architecture and sublayers are:\n\nInfrastructure, where our database, file system, or any external web service we depend on live.\nTests: unit, integration, end-to-end. How we validate our business cases.\nUser Interface, how our users interact with the code we have built. - Application Services layer (sometimes known as the Transport/Access Layer).\nDomain Services layer. In this layer is where the majority of our business logic lives, it carries out the operations to turn A into B, input into output, egg into chicken.\nThe core layer, the Domain Model layer which is the representation of the high level data objects we use.\n\n\n\n\n\nLibrary Project key-words sprint zero\n\n\nSprint#6, dia 01/02 image Library Project",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-2: Library/Book, Sprint Zero"
    ]
  },
  {
    "objectID": "javase/selab3-2.html#features-core-use-case-user-borrows-a-book",
    "href": "javase/selab3-2.html#features-core-use-case-user-borrows-a-book",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.2 Features: core use-case: user-borrows-a-book",
    "text": "1.2 Features: core use-case: user-borrows-a-book\n\n1.2.1 Use-Story\n\nUser story template and examples\n\n\nAs a user, I want to borrow a book with my documentId, so that I may read and return it at due date that the system says.\n\n\n\n1.2.2 Mock-up\nOptions:\n1- Make a Borrow\n2- User Management\n3- Book Management\n4- Quit\nOption?\n'Borrow'\nUser?\n'159742OPI'\nBook?\n'Anna Karenina'\nProceed, are your sure?\n'Yes'\nBorrow made, borrowId: RER7567, dueDate: 15/02/2023 \nOptions:\n1- Make a Borrow\n2- User Management\n3- Book Management\n4- Quit\nOption?\n'Quit'\n\n\n1.2.3 Menus\n\nMain Menu\n1- Make a Borrow\n2- User Management\n3- Book Management\n4- Borrow Management\n4- Quit\n\nUser Menu\n1- Create\n2- Update\n3- Delete\n4- List\n5- Get one\n6- Quit\n\nBook Menu\n1- Create\n2- Update\n3- Delete\n4- List\n5- Get one\n6- Quit\n\nBorrow Menu\n1- Create (make a borrow)\n2- Update\n3- Delete\n4- List\n5- List Active Borrows \n6- Get one\n7- Quit",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-2: Library/Book, Sprint Zero"
    ]
  },
  {
    "objectID": "javase/selab3-2.html#pieces-of-code",
    "href": "javase/selab3-2.html#pieces-of-code",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.3 Pieces of code",
    "text": "1.3 Pieces of code\n\n1.3.1 UUID\nThe full form of UUID is Universally Unique Identifier. A UUID represents a 128-bit value that is unique. The standard representation of UUID uses hex digits.\nFor example:\n3c0969ac-c6e3-40f2-9fc8-2a59b8987918\ncb7125cc-d78a-4442-b21b-96ce9227ef51\n\nClass UUID\n\nimport java.util.UUID;\n\n    public static String createId() {Limit Your Availability\n\n        UUID uuid = UUID.randomUUID();\n        System.out.println(\"UUID generated - \" + uuid);\n        System.out.println(\"UUID Version - \" + uuid.version());\n        String id = uuid.toString();\n\n        return id;\n\n    }\n\n\n1.3.2 BorrowManager class\npublic class BorrowManager {\n\n   public static HashMap&lt; String , Borrow&gt; borrows = new HashMap&lt;&gt;();\n}\n\n\n1.3.3 faker Users and Books\npublic static void createBooks(int number) {\n// create faker object to use as\n// builder for book\nFaker faker = new Faker();\nBook newbook;\n\nfor (int i = 0; i &lt; number; i++) {\n    // create newbook without args\n    newbook = new Book();\n    // some people get nervous with this\n    // be careful ...\n    String bookId = InterfaceUtils.createUUID();\n    newbook.setISBN(bookId);\n    // title's book\n    String bookTitle = faker.book().title();\n    newbook.setTitle(bookTitle);\n    // year's book\n    int bookYear = faker.number().numberBetween(1000, 2023);\n    newbook.setYear(bookYear);\n    // borrows' book\n    List&lt;Borrow&gt; borrows = new ArrayList();\n    newbook.setBorrows(borrows);\n    // author's book\n    Author newauthor = new Author();\n    newbook.setAuthor(newauthor);\n    // add to hashmap\n    books.put( bookId, newbook);\n    // kill object\n    newbook = null;\n    }\n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-2: Library/Book, Sprint Zero"
    ]
  },
  {
    "objectID": "javase/selab3-2.html#tests",
    "href": "javase/selab3-2.html#tests",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.4 Tests",
    "text": "1.4 Tests\n\n1.4.1 borrow object test\nTest to create Borrow object\n\n\n1.4.2 make-a-borrow test\nTest to make-a-borrow operation by simulate-console\n\n\n\n\n\n\nImportant\n\n\n\nWe decide to discuss this test in the near future, not now. It is more diffucult and complex than we thought.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-2: Library/Book, Sprint Zero"
    ]
  },
  {
    "objectID": "javase/selab3-2.html#uml",
    "href": "javase/selab3-2.html#uml",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.5 UML",
    "text": "1.5 UML\nLAB#03-1 UML",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-2: Library/Book, Sprint Zero"
    ]
  },
  {
    "objectID": "javase/selab3-2.html#domains-tree",
    "href": "javase/selab3-2.html#domains-tree",
    "title": "Lab#SE03-2: Library/Book, Sprint Zero",
    "section": "1.6 Domains & Tree",
    "text": "1.6 Domains & Tree\n\n\n\nFolder tree LibraryProject",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-2: Library/Book, Sprint Zero"
    ]
  },
  {
    "objectID": "javase/se-pattern-singleton.html",
    "href": "javase/se-pattern-singleton.html",
    "title": "Singleton",
    "section": "",
    "text": "The singleton pattern is a design pattern in computer programming and Java that is used to restrict the instantiation of a class to one “single” instance.\n\n\nThis is useful when you want to make sure that only one object of a particular class is created, because this can be helpful for managing resources and ensuring that your program is running as efficiently as possible.\nIn Java, the singleton pattern can be implemented by creating a private constructor for the class, which prevents other objects from creating instances of the class.\nThe class also typically provides a static method that allows other classes to access the single instance of the class, which is created the first time the static method is called. This ensures that only one instance of the class is created, and that all other classes can access this instance easily.\n\n\n\nSingleton Pattern",
    "crumbs": [
      "Java Design Patterns",
      "Singleton"
    ]
  },
  {
    "objectID": "javase/se-pattern-singleton.html#definition",
    "href": "javase/se-pattern-singleton.html#definition",
    "title": "Singleton",
    "section": "",
    "text": "The singleton pattern is a design pattern in computer programming and Java that is used to restrict the instantiation of a class to one “single” instance.\n\n\nThis is useful when you want to make sure that only one object of a particular class is created, because this can be helpful for managing resources and ensuring that your program is running as efficiently as possible.\nIn Java, the singleton pattern can be implemented by creating a private constructor for the class, which prevents other objects from creating instances of the class.\nThe class also typically provides a static method that allows other classes to access the single instance of the class, which is created the first time the static method is called. This ensures that only one instance of the class is created, and that all other classes can access this instance easily.\n\n\n\nSingleton Pattern",
    "crumbs": [
      "Java Design Patterns",
      "Singleton"
    ]
  },
  {
    "objectID": "javase/se-pattern-singleton.html#example-logger",
    "href": "javase/se-pattern-singleton.html#example-logger",
    "title": "Singleton",
    "section": "2 Example: Logger",
    "text": "2 Example: Logger\nHere is an example of a singleton class in Java, using a Logger class as an example:\npublic class Logger {\n    // Private static instance of the class\n    private static Logger instance = null;\n\n    // Private instance variable\n    private PrintWriter writer;\n\n    // Private constructor\n    private Logger() {\n        try {\n            writer = new PrintWriter(\"log.txt\", \"UTF-8\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Public static method for accessing the instance\n    public static Logger getInstance() {\n        if (instance == null) {\n            instance = new Logger();\n        }\n        return instance;\n    }\n\n    // Public method for logging a message\n    public void log(String message) {\n        writer.println(message);\n    }\n\n    // Public method for closing the log file\n    public void close() {\n        writer.close();\n    }\n}\nIn this example, the Logger class defines a Logger() constructor that is private. This means that instances of the Logger class can only be created from within the Logger class itself.\nThe Logger class also defines a getInstance() method, which is marked as public and static. This method is used to access the instance of the Logger class, and to create the instance if it does not already exist.\nBecause the Logger class is a singleton, there can only be one instance of the class at any given time. This means that all instances of the Logger class share the same instance of the writer field, which is used to write messages to the log file.\nOverall, this example shows how the singleton pattern can be used to implement a Logger class in Java, which ensures that there is only one instance of the Logger class, and provides a global point of access to that instance. This allows the Logger class to manage shared resources, such as the log file, in a more efficient and effective way.",
    "crumbs": [
      "Java Design Patterns",
      "Singleton"
    ]
  },
  {
    "objectID": "javase/se-pattern-singleton.html#example-configurationmanager",
    "href": "javase/se-pattern-singleton.html#example-configurationmanager",
    "title": "Singleton",
    "section": "3 Example: ConfigurationManager",
    "text": "3 Example: ConfigurationManager\nHere is another example of a singleton class in Java, using a ConfigurationManager class as an example:\npublic class ConfigurationManager {\n    // Private static instance of the class\n    private static ConfigurationManager instance = null;\n\n    // Private instance variables\n    private Properties config;\n\n    // Private constructor\n    private ConfigurationManager() {\n        try {\n            config = new Properties();\n            config.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Public static method for accessing the instance\n    public static ConfigurationManager getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManager();\n        }\n        return instance;\n    }\n\n    // Public method for getting a configuration property\n    public String getProperty(String key) {\n        return config.getProperty(key);\n    }\n}\nIn this example, the ConfigurationManager class defines a ConfigurationManager() constructor that is private. This means that instances of the ConfigurationManager class can only be created from within the ConfigurationManager class itself.\nThe ConfigurationManager class also defines a getInstance() method, which is marked as public and static. This method is used to access the instance of the ConfigurationManager class, and to create the instance if it does not already exist.\nBecause the ConfigurationManager class is a singleton, there can only be one instance of the class at any given time. This means that all instances of the ConfigurationManager class share the same instance of the config field, which is used to store the configuration properties.",
    "crumbs": [
      "Java Design Patterns",
      "Singleton"
    ]
  },
  {
    "objectID": "javase/selab2-5.html",
    "href": "javase/selab2-5.html",
    "title": "Lab#SE02-5: Movie/Review, simulate interactivity by console",
    "section": "",
    "text": "📘 Linux Lab#LI02-5: interactivity and console\nOnce in previous Lab#SE02-4, the user enjoys some interactivity with our app, let’s test this new feature.\n\nTo do so, with the class Movie in mind, we could create a createFromConsole() method, a method that eventually:\n\nprompts the user for input in the console\ncreates a Movie object based on that input\nuses the Scanner class to read the input from the console\nsets the fields of the Movie object with the input data.\n\nAnd then, test this method createFromConsole() with a JUnit @Test:\n\na test that simulates a user input by setting the input stream to a string containing the input data,\nand then creating a Movie object and calling the createFromConsole() method.\nLaziness, Impatience, Hubris",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-5: Movie/Review, simulate interactivity by console"
    ]
  },
  {
    "objectID": "javase/selab2-5.html#overview",
    "href": "javase/selab2-5.html#overview",
    "title": "Lab#SE02-5: Movie/Review, simulate interactivity by console",
    "section": "1 Overview",
    "text": "1 Overview\n\n\n\nStream I/O in Standard I/O (java.io Package)\n\n\n\n\nPackage java.io, provides for system input and output through data streams, serialization and the file system.\n\nFollowing are the important classes in Java.io package:\n\nProgramming simple I/O operations is easy, which involves only a few classes and methods. You could do it by looking at a few samples like our previous lab.\nProgramming efficient, portable I/O is extremely difficult, especially if you have to deal with different character sets.\n\n1.1 Stream\nA stream is a sequence of data. In Java, a stream is composed of bytes. It’s called a stream because it is like a stream of water that continues to flow.\nIn our app, java.io will create three streams automatically. All these streams are attached with the console.\n\nSystem.out: standard output stream\nSystem.in: standard input stream\nSystem.err: standard error stream\n\n\n\n\nInputStream and OutputStream\n\n\n\n\nInput stream refers to an ordered flow of data in the form of bytes. This flow of data can be coming from various resources such as files, network programs, input devices, etc.\n\nIn order to read such data, we have a Java InputStream Class in the Java IO API. Link\n\n\n\n1.2 Discuss solution\nThese lines of pseudo-code, particulary the (2) line, are the key-solution to use InputStream to simulate a input console.\n(1) String simulateInputByConsole = \"Here\\ngoes\\nhe\\nsimulate\\nimput\";\n(2) InputStream in &lt;&lt;&lt;&lt;&lt; simulateInputByConsole.getBytes();\n(3) System.setIn(in);\nIt creates an InputStream in that reads from a byte array containing the bytes of the input string input.getBytes() (using the platform’s default charset), which allow us to use this InputStream as regular input stream into System.in.\n\n\n\nIt extends the InputStream abstract class.\n\n\nA new InputStream object is being created by wrapping a ByteArrayInputStream around a byte array.\nString input = \"The Shawshank Redemption\\n\" +\nInputStream in = new ByteArrayInputStream(input.getBytes());\n\n\nA ByteArrayInputStream is a subclass of InputStream that reads data from a byte array.\nThe byte array is created by calling the getBytes() method on the input string. getBytes() is a method of the String class that returns a byte array containing the characters of the string encoded using the platform’s default charset.\n\n\n1.3 getBytes()\n    String myString = \"I love Java\";\n    byte[] byteArray;\n\n    // convert the string to a byte array\n    // using platform's default charset\n    byteArray = myString.getBytes();\n    System.out.println(Arrays.toString(byteArray));\n\n    // Output\n    // [73, 32, 108, 111, 118, 101, 32, 74, 97, 118, 97]\n\n\nWe have used the Arrays class in the above example to print the byte array in a readable form. It has nothing to do with getBytes().\nHTML Encoding Character Set\nmore examples\nThere are many other standard charset like:\n\nUS-ASCII: Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set\nISO-8859-1: ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1\nUTF-8: Eight-bit UCS Transformation Format\nUTF-16BE: Sixteen-bit UCS Transformation Format, big-endian byte order\nUTF-16LE: Sixteen-bit UCS Transformation Format, little-endian byte order\nUTF-16: Sixteen-bit UCS Transformation Format, byte order identified by an optional byte-order mark.\n\n\n\n1.4 ByteArrayInputStream\nClass ByteArrayInputStream\n   // Creates a ByteArrayInputStream that reads entire array\n   ByteArrayInputStream input = new ByteArrayInputStream(byte[] arr);\nThe ByteArrayInputStream class of the java.io package ìs used to read an array of input data (in bytes).\nmore on ByteArrayInputStream",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-5: Movie/Review, simulate interactivity by console"
    ]
  },
  {
    "objectID": "javase/selab2-5.html#core-classes",
    "href": "javase/selab2-5.html#core-classes",
    "title": "Lab#SE02-5: Movie/Review, simulate interactivity by console",
    "section": "2 Core classes",
    "text": "2 Core classes\n\n2.1 createFromConsole()\nThe method createFromConsole() is used to prompt the user for input in the console and create a movie object based on that input.\nIt uses the Scanner class to read the input from the console and sets the fields of the Movie object with the input data.\nYou could then use these:\n\n\nMovie.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Movie {\n    private String title;\n    private int year;\n    private String director;\n    private String actors;\n\n    public void createFromConsole() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter the title of the movie: \");\n        title = scanner.nextLine();\n        System.out.print(\"Enter the year the movie was released: \");\n        year = scanner.nextInt();\n        scanner.nextLine(); // consume the newline character\n        System.out.print(\"Enter the name of the director: \");\n        director = scanner.nextLine();\n        System.out.print(\"Enter the names of the actors\" +\n                            \" (separated by commas): \");\n        actors = scanner.nextLine();\n    }\n\n    // getters adn setters by lombok\n}\n\n\n\n2.2 testCreateMovieFromConsoleInput()\nThe method testCreateMovieFromConsoleInput() is a JUnit test that is used to test the createFromConsole() method.\nThis test simulates user input by setting the input stream to a string containing the input data, and then creating a Movie object and calling the createFromConsole() method.\nThen it uses the assertEquals method to check that the fields of the movie object are set to the correct values, based on the input provided.\n\n\nMovieTest.java\n\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\npublic class MovieTest {\n\n    @Test\n    public void testCreateMovieFromConsoleInput() {\n        // Set up input for the console\n        String input = \"The Shawshank Redemption\\n\" +\n                        \"1994\\n\" +\n                        \"Frank Darabont\\n\" +\n                        \"Tim Robbins, Morgan Freeman\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\n        // Create the movie object\n        Movie movie = new Movie();\n        movie.createFromConsole();\n\n        // Assert that the movie object was created with the correct data\n        assertEquals(\"The Shawshank Redemption\", movie.getTitle());\n        assertEquals(1994, movie.getYear());\n        assertEquals(\"Frank Darabont\", movie.getDirector());\n        assertEquals(\"Tim Robbins, Morgan Freeman\", movie.getActors());\n    }\n\n}\n\n\n\nIt is important to test the createFromConsole() method because it is a core functionality of the Movie class, and it is essential to ensure that it is working properly.\n\nIf this method is not working as expected, it will not only affect the user experience but also could cause the application to fail.\n\nThis static method System.setIn() from the class java.lang.System is used to reassign the standard input stream.\nSignature:\nstatic void setIn(InputStream in)",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-5: Movie/Review, simulate interactivity by console"
    ]
  },
  {
    "objectID": "javase/se-pattern-commander.html",
    "href": "javase/se-pattern-commander.html",
    "title": "Commander",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Java Design Patterns",
      "Commander"
    ]
  },
  {
    "objectID": "javase/se-pattern-state.html",
    "href": "javase/se-pattern-state.html",
    "title": "State",
    "section": "",
    "text": "The state pattern is a behavioral design pattern that allows objects to dynamically alter their behavior based on internal state changes.\nThe State design pattern is a behavioral design pattern that allows an object to change its behavior when its internal state changes. It provides a way to define a set of states and behaviors for a particular object, and allows the object to change its state at runtime. The State pattern is based on the idea of separating the behavior of an object from its state, which results in a more modular and flexible design.\nThe State pattern involves two main components: a Context and a State. The Context is the object whose behavior changes based on its internal state. The State is an interface or abstract class that defines the behavior associated with a particular state of the Context. The State objects are concrete classes that implement the State interface or extend the State abstract class, and define the behavior associated with each state.\nThe State pattern enables the Context object to change its behavior dynamically by delegating to the appropriate State object. When the internal state of the Context changes, the Context delegates to a different State object to handle the behavior associated with the new state. This allows the Context to appear to change its behavior at runtime, without changing its class or modifying its existing behavior.\nThe State pattern provides a way to encapsulate state-specific behavior into separate classes, which can be easily added, removed, or modified as needed. This makes it easier to add new states and behaviors to the object, and can result in a more maintainable and extensible codebase.\nOverall, the State pattern is useful in situations where the behavior of an object needs to change based on its internal state, and where it’s impractical to have a single class with conditional statements for each possible state. By encapsulating state-specific behavior into separate classes, the State pattern provides a flexible and modular way to handle state changes.",
    "crumbs": [
      "Java Design Patterns",
      "State"
    ]
  },
  {
    "objectID": "javase/se-pattern-state.html#example-vending-machine",
    "href": "javase/se-pattern-state.html#example-vending-machine",
    "title": "State",
    "section": "1 Example: Vending machine",
    "text": "1 Example: Vending machine\nHere’s an example step by step implementation of the State pattern:\n\nDefine the Context class: This is the class whose behavior changes depending on its internal state. In this example, we’ll create a vending machine class that dispenses different items based on its current state:\n\npublic class VendingMachine {\n    private State currentState;\n\n    public VendingMachine() {\n        // initialize the vending machine to the out of stock state\n        currentState = new OutOfStockState();\n    }\n\n    public void setCurrentState(State state) {\n        currentState = state;\n    }\n\n    public void dispenseItem() {\n        currentState.dispenseItem(this);\n    }\n}\n\nDefine the State interface: This is the interface that defines the behavior associated with a particular state of the Context. In this example, we’ll create a State`` interface with a method for dispensing an item from the vending machine:\n\npublic interface State {\n    void dispenseItem(VendingMachine vendingMachine);\n}\n\nCreate concrete state classes: These are the classes that implement the State interface or extend the State abstract class, and define the behavior associated with each state. In this example, we’ll create three concrete state classes: OutOfStockState, PaymentReceivedState, and ItemDispensedState:\n\npublic class OutOfStockState implements State {\n    public void dispenseItem(VendingMachine vendingMachine) {\n        System.out.println(\"Out of stock, please come back later\");\n    }\n}\n\npublic class PaymentReceivedState implements State {\n    public void dispenseItem(VendingMachine vendingMachine) {\n        System.out.println(\"Item dispensed\");\n        vendingMachine.setCurrentState(new ItemDispensedState());\n    }\n}\n\npublic class ItemDispensedState implements State {\n    public void dispenseItem(VendingMachine vendingMachine) {\n        System.out.println(\"Item already dispensed\");\n    }\n}\n\nUse the State pattern in the Context class: In the VendingMachine class, we’ll use the State pattern to change the behavior of the vending machine based on its internal state.\n\npublic class VendingMachine {\n    private State currentState;\n\n    public VendingMachine() {\n        // initialize the vending machine to the out of stock state\n        currentState = new OutOfStockState();\n    }\n\n    public void setCurrentState(State state) {\n        currentState = state;\n    }\n\n    public void dispenseItem() {\n        currentState.dispenseItem(this);\n    }\n\n    // other methods for handling payment, restocking items, etc.\n}\n\nTest the State pattern implementation: In the main method, we’ll create a new vending machine and test its behavior in different states:\n\npublic static void main(String[] args) {\n    VendingMachine vendingMachine = new VendingMachine();\n\n    // test the out of stock state\n    vendingMachine.dispenseItem(); // should print \"Out of stock, please come back later\"\n\n    // test the payment received state\n    vendingMachine.setCurrentState(new PaymentReceivedState());\n    vendingMachine.dispenseItem(); // should print \"Item dispensed\"\n\n    // test the item dispensed state\n    vendingMachine.dispenseItem(); // should print \"Item already dispensed\"\n}\nThat’s a basic example of how to implement the State pattern in Java. In a real-world application, there would likely be more states and behaviors to handle, but the basic principles of the pattern would remain the same.",
    "crumbs": [
      "Java Design Patterns",
      "State"
    ]
  },
  {
    "objectID": "javase/selab0-1.html",
    "href": "javase/selab0-1.html",
    "title": "Lab#SE00-1: Maven Person",
    "section": "",
    "text": "📘 Linux Lab#SE00-1: Person\n\nCreate a Maven/Gradle Java SE Project with the UML and classes defined below.\nAdd Lombok, JUnit and Faker dependencies\nRefactor: remove boilerplate code (getters, setters and so on) and work with Lombok\nCreate Junit tests to test objects. Use Faker to create objects:\n\nTest createPerson: check whether the object Person creation works properly.\nTest createCar: check whether the object Car creation works properly.\nTest createBook: check whether the object Book creation works properly.\nTest createStudent: check whether the object Student creation works properly\nWithout composition: a Student object without car and books.\nWith composition: a Student object with Car object and Book List objects\n\nCreate Junit tests to test operations:\n\nTest methodsPerson: check that Person methods work properly: becomeOlder(), killVampire(), withFirstName()\n\nImprove Car, Book and Author classes with two methods each.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-1: Maven Person"
    ]
  },
  {
    "objectID": "javase/selab0-1.html#uml",
    "href": "javase/selab0-1.html#uml",
    "title": "Lab#SE00-1: Maven Person",
    "section": "1 UML",
    "text": "1 UML\n\n\n\n\n\n\nclassDiagram\nclass Person {\n  -firstname: String\n  -lastname: String\n  -age: int\n}\n\nclass Student {\n  -university: String\n}\n\nclass Author {\n  -genre: String\n}\n\n\nPerson --|&gt; Student: Inheritance\nPerson --|&gt; Author: Inheritance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\n\nclass Student {\n  -university: String\n  -car: Car\n  -books: ArrayList~Book~\n}\n\nclass Author {\n  -genre: String\n  -book: Book\n}\n\nclass Book {\n  -title: String\n  -ISBN: String\n  -pages: int\n  -author: Author\n}\n\nclass Car {\n     -places: int\n     -color: String\n}\n\nStudent *-- Book: Composition\nBook *-- Author: Composition\nStudent *-- Car: Composition\nAuthor *-- Book: Composition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\nclass Person {\n  -firstname: String\n  -lastname: String\n  -age: int\n}\n\nclass Student {\n  -university: String\n  -car: Car\n  -books: ArrayList~Book~\n}\n\nclass Author {\n  -genre: String\n  -book: Book\n}\n\nclass Book {\n  -title: String\n  -ISBN: String\n  -pages: int\n  -author: Author\n}\n\nclass Car {\n     -places: int\n     -color: String\n}\n\nPerson --|&gt; Student: Inheritance\nPerson --|&gt; Author: Inheritance\n\nStudent *-- Book: Composition\nBook *-- Author: Composition\nStudent *-- Car: Composition\nAuthor *-- Book: Composition",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-1: Maven Person"
    ]
  },
  {
    "objectID": "javase/selab0-1.html#base-classes",
    "href": "javase/selab0-1.html#base-classes",
    "title": "Lab#SE00-1: Maven Person",
    "section": "2 Base Classes",
    "text": "2 Base Classes\n\n2.1 Person Class\nHere, the Person class represents a person with a name, address and others.\n\n\n\nCode Person\n\n\n\nPerson.java\n\n\n  package exemple1;\n\n  public class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n\n    //private boolean vampireState= true;\n\n    public Person(String firstName, String lastName) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.age = 189;\n\n    }\n\n    public Person(String firstName, String lastName, int newAge) {\n      this.firstName = firstName;\n      this.lastName = lastName;\n      this.age = newAge;\n\n    }\n\n    public void becomeOlder() {\n      age = age + 5;\n\n    }\n    \n    public void killVampire () {\n      \n      age = -150;\n    }\n   \n    public String getFirstName() {\n      return firstName;\n    }\n\n    public String getLastName() {\n      return lastName;\n    }\n\n    public Person withFirstName(String firstName) {\n      return new Person(firstName, lastName);\n    }\n\n    public Person withLastName(String lastName) {\n      return new Person(firstName, lastName);\n    }\n\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      Person person = (Person) o;\n      if (firstName != null ? !firstName.equals(person.firstName) : person.firstName != null) {\n        return false;\n      }\n      if (lastName != null ? !lastName.equals(person.lastName) : person.lastName != null) {\n        return false;\n      }\n      return true;\n    }\n\n    public int hashCode() {\n      int result = firstName != null ? firstName.hashCode() : 0;\n      result = 31 * result + (lastName != null ? lastName.hashCode() : 0);\n      return result;\n    }\n\n    \n}\n\n\n\n\n\n2.2 Book Class\nHere, the Book class represents a book with a title, pages and others.\n\n\n\nCode Book\n\n\n\nBook.java\n\n\n  package exemple1;\n\npublic class Book {\n\n    private String title;\n    private int pages;\n    private String ISBN;\n    private Author author;\n\n    public Book(String title, int pages, String iSBN, Author author) {\n        // super();\n        this.title = title;\n        this.pages = pages;\n        ISBN = iSBN;\n        this.author = author;\n    }\n\n    public int getPages() {\n        return pages;\n    }\n\n    public void setPages(int pages) {\n        this.pages = pages;\n    }\n\n    public Author getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(Author author) {\n        this.author = author;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book [title=\" + title + \", pages=\" + pages + \", ISBN=\" + ISBN + \"]\";\n    }\n\n}\n\n\n\n\n\n2.3 Student Class\nHere, the Student class represents a student with a name, age and others.\n\n\n\nCode Student\n\n\n\nStudent.java\n\npackage exemple1;\n\nimport java.util.ArrayList;\n\npublic class Student extends Person {\n\n    public String university;\n    public Car car;\n    public ArrayList&lt;Book&gt; books;\n    //1\n    //public ArrayList&lt;Book&gt; books = new ArrayList&lt;Book&gt;();\n    public Student(String firstName, String lastName, int age, String university) {\n        super(firstName, lastName, age);\n        this.books = new ArrayList&lt;Book&gt;();\n    }\n\n    public void addBook (Book booktoaddtoarray) {\n        this.books.add(booktoaddtoarray);       \n    }\n\n\n    public ArrayList&lt;Book&gt; getBooks() {\n        return books;\n    }\n\n    public void setBooks(ArrayList&lt;Book&gt; books) {\n        this.books = books;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override@Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        Student other = (Student) obj;\n        if (age != other.age)\n            return false;\n        if (name == null) {\n            if (other.name != null)\n                return false;\n        } else if (!name.equals(other.name))\n            return false;\n        return true;\n    }\n        result = prime * result + age;\n        result = prime * result + ((name == null) ? 0 : name.hashCode());\n        return result;\n    }\n\n}\n\n\n\n\n\n2.4 Car Class\nHere, the Car class represents a car with doors, places and other attributes.\n\n\n\nCode Car\n\n\n\nCar.java\n\npackage exemple1;\n\npublic class Car {\n    \n    public int doors;\n    public int seats;\n    public String color;\n        \n    public Car(int doors, int places, String color) {\n        this.doors = doors;\n        this.seats = seats;\n        this.color = color;\n    }\n\n    @Override\n    public String toString() {\n        //return \"Car [toString()=\" + super.toString() + \"]\";\n        return \"Car [doors=\" + this.doors + \", seats=\" + this.seats + \", color=\" + this.color + \"]\"\n    }\n}\n\n\n\n\n\n2.5 Author Class\nHere, the Author class represents an author with a … and others.\n\n\n\nCode Author\n\n\n\nAuthor.java\n\n\npackage exemple1;\n\npublic class Author extends Person {\n\n    public Author(String firstName, String lastName, int age, String genre) {\n        super(firstName, lastName, age);\n        public String genre;\n        // TODO Auto-generated constructor stub\n    }\n\n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-1: Maven Person"
    ]
  },
  {
    "objectID": "javase/selab0-1.html#eclipse-ide-uml",
    "href": "javase/selab0-1.html#eclipse-ide-uml",
    "title": "Lab#SE00-1: Maven Person",
    "section": "3 Eclipse IDE UML",
    "text": "3 Eclipse IDE UML\n\n\n\nUML Person - Student - Author and Car",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE00-1: Maven Person"
    ]
  },
  {
    "objectID": "javase/selab2-2.html",
    "href": "javase/selab2-2.html",
    "title": "Lab#SE02-2: Movie/Review, CRUD Operations",
    "section": "",
    "text": "📘 Linux Lab#LI02-2: Opearations\n\nCreate Java Class MovieManager to manage all movie objects created.\nJava Class MovieManager could work like this:\n\nEvery time a movie object is created, it could be saved within a data structure:\n\nArrayList or List\nSet or similar\nHashMap or Map\n\nThe Java Class MovieManager could perfom all CRUD operations.\nBesides, it colud save data as String to JSON or CSV as local file.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-2: Movie/Review, CRUD Operations"
    ]
  },
  {
    "objectID": "javase/selab2-2.html#core-classes",
    "href": "javase/selab2-2.html#core-classes",
    "title": "Lab#SE02-2: Movie/Review, CRUD Operations",
    "section": "1 Core classes",
    "text": "1 Core classes\nYou could then use these:\n\n\nMovie.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths; classes as follows:\n\npublic class Movie{\n    private String title;\n    private String director;\n    private String genre;\n    private double size// movie size\n\n    //constructor , getters and setters\n    //lombok\n    @Override\n    public double getSize(){\n        return this.size;\n    }\n}\n\n\n\nMovieManager.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class MovieManager {\n    private int qty;\n    private double size;\n    private HashMap&lt;String, Movie&gt; movies;\n    private Date lastModified;\n\n    public MovieManager() {\n        this.qty = 0;\n        this.size = 0;\n        this.movies = new HashMap&lt;&gt;();\n        this.lastModified = new Date();\n    }\n\n    public void addMovie(Movie movie) {\n        this.movies.put(movie.getTitle(), movie);\n        this.qty++;\n        this.size += movie.getSize();\n        this.lastModified = new Date();\n    }\n\n    public void updateMovie(String title, Movie movie) {\n        this.movies.replace(title, movie);\n        this.lastModified = new Date();\n    }\n\n    public void deleteMovie(String title) {\n        Movie movie = this.movies.get(title);\n        this.movies.remove(title);\n        this.qty--;\n        this.size -= movie.getSize();\n        this.lastModified = new Date();\n    }\n\n    public Movie getMovie(String title) {\n        return this.movies.get(title);\n    }\n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-2: Movie/Review, CRUD Operations"
    ]
  },
  {
    "objectID": "javase/selab2-2.html#solving-discussion",
    "href": "javase/selab2-2.html#solving-discussion",
    "title": "Lab#SE02-2: Movie/Review, CRUD Operations",
    "section": "2 Solving discussion",
    "text": "2 Solving discussion\n\n2.1 MovieManager uses Movie\nLet’s grow our code of the MovieManager class by adding two methods: saveToCSV() and deleteCSV().\nThe saveToCSV() method is used to save the movie data stored in the movies HashMap field of the MovieManager class to a CSV (Comma Separated Values) file named movies.csv located in the same directory as the running program. It uses a FileWriter object to write the data to the file.\nThe deleteCSV() method is used to delete a CSV file named movies.csv located in the directory /home/devops/MyProjects/JavaSEProjects/MovieManager/resources/. It uses a File object to represent the file, and the delete() method of the File class to delete the file.\nIf the file is deleted successfully, it prints “File deleted successfully” message, otherwise it prints “Failed to delete the file” message.\n\n\nMovieManager.java\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.HashMap;\nimport java.util.Date;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class MovieManager {\n    private int qty;\n    private double size;\n    private HashMap&lt;String, Movie&gt; movies;\n    private Date lastModified;\n\n    public MovieManager() {\n       // ...\n    }\n\n    public void addMovie(Movie movie) {\n        // ...\n    }\n\n      public Movie getMovie(String title) {\n        // ...\n    }\n\n    // this is a mere idea, just a proposal to understand\n    // how it colud be done\n    // iterate the hashMap movies to get each movies\n    // to save file in Linxu\n    //  try (FileWriter writer = \n    // new FileWriter(\"/home/~/movies.csv\")\n    // )\n    public void saveToCSV() {\n        try (FileWriter writer = new FileWriter(\"movies.csv\")) {\n            for (Movie movie : this.movies.values()) {\n                writer.append(movie.getTitle());\n                writer.append(\",\");\n                writer.append(movie.getDirector());\n                writer.append(\",\");\n                writer.append(movie.getGenre());\n                writer.append(\"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void deleteCSV() {\n    File file = new File(\"/home/~/movies.csv\");\n      if(file.delete()){\n          System.out.println(\"File deleted successfully\");\n      }else{\n          System.out.println(\"Failed to delete the file\");\n      }\n    }\n}\n\n\n\nIt starts by creating a try-with-resources block, which automatically closes the FileWriter object when the block finishes executing. Then it loops through the values() of the movies HashMap, which gives an iterable collection of Movie objects.\n\nFor each Movie object, it appends the title, director and genre information separated by commas, and then a newline character. This creates a CSV file with each line representing a movie, in the format of: title,director,genre.\n\nIt’s worth noting that this code is just an example, and it will work correctly if the file exists at the specified location. If the file doesn’t exist, the delete method will return false and the message “Failed to delete the file” will be printed.\n\nAlso the path of csv file is hardcoded and it may change on different systems so it’s better to make it dynamic or keep it in configuration file.\n\n\n\nThis diagram shows that the MovieManager class uses the Movie class, and the arrow points from MovieManager to Movie.\nThis indicates that MovieManager class is dependent on Movie class and it uses it as a data structure.\n\n\n\n\n\n\nclassDiagram\n class MovieManager {\n    -int qty\n    -double size\n    -HashMap&lt;String, Movie&gt; movies\n    -Date lastModified\n    +addMovie(Movie movie)\n    +updateMovie(String title, Movie movie)\n    +deleteMovie(String title)\n    +getMovie(String title)\n    +saveToCSV()\n    }\n    class Movie{\n    +String title\n    +String director\n    +String genre\n    +double size\n    +getSize()\n    }\n\n    MovieManager --&gt; Movie\n\n\n\n\n\n\n\n\n\n\n2.2 MovieManager static methods\nIn Java SE, methods can be either static or non-static.\nMaking a method static or non-static affects the way it can be called and how it accesses the fields and methods of a class.\n\n\nMovieManager.java\n\nimport java.util.HashMap;\nimport java.util.Date;\n\npublic class MovieManager {\n    private static HashMap&lt;String, Movie&gt; movies = new HashMap&lt;&gt;();\n    private static int qty = 0;\n    private static double size = 0;\n    private static Date lastModified = new Date();\n\n    public static void addMovie(String title, \n                                String director, String genre, double size) {\n        Movie movie = new Movie(title, director, genre, size);\n        movies.put(title, movie);\n        qty++;\n        size += movie.getSize();\n        lastModified = new Date();\n    }\n\n    public static void updateMovie(String title, \n                                   String director, String genre, double size) {\n        Movie movie = movies.get(title);\n        if (movie != null) {\n            movie.setDirector(director);\n            movie.setGenre(genre);\n            movie.setSize(size);\n            lastModified = new Date();\n        }\n    }\n\n    public static void deleteMovie(String title) {\n        if (movies.containsKey(title)) {\n            size -= movies.get(title).getSize();\n            movies.remove(title);\n            qty--;\n            lastModified = new Date();\n        }\n    }\n \n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-2: Movie/Review, CRUD Operations"
    ]
  },
  {
    "objectID": "javase/selab2-2.html#static-vs.-non-static",
    "href": "javase/selab2-2.html#static-vs.-non-static",
    "title": "Lab#SE02-2: Movie/Review, CRUD Operations",
    "section": "3 static vs. non-static",
    "text": "3 static vs. non-static\n\n3.1 Pros & cons usage static methods\n\n\n\n\n\n\n\nPros of making a method static\nCons of making a method static\n\n\n\n\nCan be called directly on the class, without needing to create an instance\nCannot access non-static fields and methods of the class\n\n\nCan be used as utility methods that don’t depend on the state of an object\nCan only work with the parameters passed to it and not use information unique to each object or instance\n\n\nCan be used to access only static variables and methods, making it more efficient\nCan be challenging to make sure all instances of a class are modified consistently when using static methods\n\n\n\n\n\n3.2 Pros & cons usage non-static methods\n\n\n\n\n\n\n\nPros of making a method non-static\nCons of making a method non-static\n\n\n\n\nCan access both static and non-static fields and methods of the class, allowing it to use the state of an object to determine its behavior\nCan only be called on an instance of the class, so you need to create an object of a class before using the method\n\n\nAre associated with an instance of the class, so they can use the information that is unique to each object\nCan cause confusion when working with non-static methods because it could be called on different instances, which could cause unexpected behavior\n\n\nObject-oriented design principles promote the use of non-static methods because they can be overridden by subclasses to change their behavior",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-2: Movie/Review, CRUD Operations"
    ]
  },
  {
    "objectID": "javase/selab2-4.html",
    "href": "javase/selab2-4.html",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "",
    "text": "📘 Linux Lab#LI02-4: interactivity and coupling\nAfter having a good approach with the labs done previously and from that point, having in mind the core-entity model and somemanagement/controller, let’s step up.\nAdd some interactivity through console with the user building on these new features and classes:\n\nImport class Scanner: Scanner scanner = new Scanner(System.in);\nA while (true) loop with the CRUD options would be a nice idea.\nWork as simple as possible, just 3 classes, let s try to understand the problem:\n\nMovieManager\nMovie and\nMovieController\n\nPropose some improvements.\nWhat about coupling? Is tight or loose coupled, this code?",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-4: Movie/Review, interactivity and coupling"
    ]
  },
  {
    "objectID": "javase/selab2-4.html#java-user-input-scanner",
    "href": "javase/selab2-4.html#java-user-input-scanner",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "1 Java User Input (Scanner)",
    "text": "1 Java User Input (Scanner)\nThe Scanner class is used to get user input, and it is found in the java.util package.\nTo use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation.\nScanner readerObject = new Scanner(System.in);  // Create a Scanner object\nString userName = readerObject.nextLine();  // Read user input\nIn the example above, we used the nextLine() method, which is used to read Strings. To read other types, look at the table below:\n\n\n\nInput Types",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-4: Movie/Review, interactivity and coupling"
    ]
  },
  {
    "objectID": "javase/selab2-4.html#birding",
    "href": "javase/selab2-4.html#birding",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "2 Birding",
    "text": "2 Birding\nBefore coding, study this very basic example and check how it could grow:\n\nFirst Version: Birding 1.0",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-4: Movie/Review, interactivity and coupling"
    ]
  },
  {
    "objectID": "javase/selab2-4.html#core-classes",
    "href": "javase/selab2-4.html#core-classes",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "3 Core classes",
    "text": "3 Core classes\nYou could then use these:\n\n\nMovieController.java\n\nimport java.util.Scanner;\n\npublic class MovieController {\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            System.out.println(\"Please select an option:\");\n            System.out.println(\"1. Add a movie\");\n            System.out.println(\"2. Update a movie\");\n            System.out.println(\"3. Delete a movie\");\n            System.out.println(\"4. Get a movie by title\");\n            System.out.println(\"5. Exit\");\n            int option = scanner.nextInt();\n\n            if (option == 1) {\n\n              System.out.println(\"Enter the movie title:\");\n              String title = scanner.next();\n              System.out.println(\"Enter the movie director:\");\n              String director = scanner.next();\n              System.out.println(\"Enter the movie genre:\");\n              String genre = scanner.next();\n              System.out.println(\"Enter the movie size:\");\n              double size = scanner.nextDouble();\n\n              MovieManager.addMovie(title, director, genre, size);\n              System.out.println(\"Movie added successfully!\");\n\n            } else if (option == 2) {\n\n              System.out.println(\"Enter the movie title:\");\n              String title = scanner.next();\n              System.out.println(\"Enter the new movie director:\");\n              String director = scanner.next();\n              System.out.println(\"Enter the new movie genre:\");\n              String genre = scanner.next();\n              System.out.println(\"Enter the new movie size:\");\n              double size = scanner.nextDouble();\n\n              MovieManager.updateMovie(title, director, genre,size);\n              System.out.println(\"Movie updated successfully!\");\n\n            } else if (option == 3) {\n\n              System.out.println(\"Enter the movie title:\");\n              String title = scanner.next();\n\n              MovieManager.deleteMovie(title);\n              System.out.println(\"Movie deleted successfully!\");\n\n            } else if (option == 4) {\n\n              System.out.println(\"Enter the movie title:\");\n              String title = scanner.next();\n\n              Movie movie = MovieManager.getMovie(title);\n\n              if (movie != null) {\n                  \n                System.out.println(\"Title: \" + movie.getTitle());\n                System.out.println(\"Director: \" + movie.getDirector());\n                System.out.println(\"Genre: \" + movie.getGenre());\n                System.out.println(\"Size: \" + movie.getSize());\n              \n              } else { System.out.println(\"Movie not found!\");}\n\n            } else if (option == 5) {\n                break;\n            } else {\n                System.out.println(\"Invalid option!\");\n            }\n        }\n    scanner.close();\n    }\n}\n\nIn this diagram, the Movie class has the following properties: title, director, genre, and size, each with corresponding getters and setters. It also has a constructor that takes 4 parameters.\n\n\n\n\n\n\nclassDiagram\nclass Movie {\n  - title: String\n  - director: String\n  - genre: String\n  - size: double\n  + Movie(title: String, director: String, genre: String, size: double)\n  + getTitle(): String\n  + getDirector(): String\n  + getGenre(): String\n  + getSize(): double\n  + setDirector(director: String)\n  + setGenre(genre: String)\n  + setSize(size: double)\n}\n\n\n\n\n\n\n\n\nThe MovieManager class has a HashMap of movies that stores Movie objects, an int variable qty that holds the number of movies stored in the manager, a double variable size that holds the total size of all the movies, a variable lastModified of type Date that holds the last date when a movie is added or deleted, and has several static methods which are addMovie, updateMovie, deleteMovie, getMovie, saveToCSV, deleteCSV which are CRUD operation over movies.\n\n\n\n\n\n\nclassDiagram\n\nclass MovieManager {\n  - movies: HashMap&lt;String, Movie&gt;\n  - qty: int\n  - size: double\n  - lastModified: Date\n  + addMovie(title: String, director: String, genre: String, size: double): void\n  + updateMovie(title: String, director: String, genre: String, size: double): void\n  + deleteMovie(title: String): void\n  + getMovie(title: String): Movie\n  + saveToCSV(): void\n  + deleteCSV(): void\n}\n\n\n\n\n\n\n\n\nThe MovieController class has a main method which contains a loop that interacts with the user to perform CRUD operations on the Movie class using the static methods in the MovieManager class.\n\n\n\n\n\n\nclassDiagram\n\nclass MovieController {\n  + main(args: String[]): void\n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-4: Movie/Review, interactivity and coupling"
    ]
  },
  {
    "objectID": "javase/selab2-4.html#create-static-methods",
    "href": "javase/selab2-4.html#create-static-methods",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "4 Create static methods",
    "text": "4 Create static methods\n\n\nMovieController.java\n\n\nimport java.util.Scanner;\n\npublic class MovieController {\n\n    public static void main(String[] args) {\n\n        Scanner scanner = new Scanner(System.in);\n        MovieManager movieManager = new MovieManager();\n\n        while (true) {\n            String command = ask(scanner, \"Option?\");\n            if (command.equals(\"Quit\")) {\n                break;\n            } else if (command.equals(\"Add\")) {\n                add(scanner,movieManager);\n            } else if (command.equals(\"Delete\")) {\n                delete(scanner,movieManager);\n            } else if (command.equals(\"Get\")) {\n                get(scanner,movieManager);\n            } else if (command.equals(\"Update\")) {\n                update(scanner,movieManager);\n            } else if (command.equals(\"Showall\")) {\n                showall(scanner,movieManager);\n            } else {\n                System.out.println(\"Unknown command!\");\n            }\n        }\n    }\n\n    public static String ask(Scanner input, String option) {\n        return null;\n    }\n\n    public static void add(Scanner input, MovieManager movieManager) {\n\n    }\n\n    public static void delete(Scanner input, MovieManager movieManager) {\n\n    }\n\n    public static void get(Scanner input, MovieManager movieManager) {\n\n    }\n\n    public static void update(Scanner input, MovieManager movieManager) {\n\n\n\n    public static void showall(Scanner input, MovieManager movieManager) {\n\n    }\n\n  }\n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-4: Movie/Review, interactivity and coupling"
    ]
  },
  {
    "objectID": "javase/selab2-4.html#grow-your-code",
    "href": "javase/selab2-4.html#grow-your-code",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "5 Grow your code",
    "text": "5 Grow your code\n\n\n\nHope is not a strategy\n\n\n\nHope is not a strategy\n\n\nZero Sprint/Version:\n\nMeeting rules\nRoles: ScrumMaster, Product Owner, Specialist, Team\nTech fundamentals: os, git\nMockup: figma\nDocumentation: obsidian, quarto\nDigital tools: github, gitlab, openProject, nextCloud\nUML: use-case, clas diagram, sequencial\nCore Project classes\nProduct draft definition\nUser stories, epics, tasks\nProduct Backlog, Sprint 1 Backlog\nSprint/Versions calendar\nNever, never, ever use Sprint Zero notation: it is a sin\n\nFirst Sprint/Version:\n\nJust basic Core classes, Model: Birding v1.0\n\nSecond Sprint/Version:\n\nStarting to work in main and thinking (that is, create some new classes) in Domains\n\nThird Sprint/Version:\n\nSome improvements in organize clases, Menu, MenuOptions, Utils: Birding v3.0\n\nFourth Sprint/Version:\n\nStart with MVC pattern: problems with coupling\n\nFifth Sprint/Version:\n\nMVC implemented: Birding v5.0\n\nSixth Sprint/Version:\n\nAdd singleton and factory pattern\n\nSeventh Sprint/Version:\n\nCheck security in/within code\n\nEight Sprint/Version:\n\nImplement CRUD operation in local JSON or create mySQL DB o similar\n\nNineth Sprint/Version:\n\nGo to web (Spring Boot & React)\nGo to desktop Java FX\n\nTenth Sprint/Version:\n\nCreate extensions and publish",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-4: Movie/Review, interactivity and coupling"
    ]
  },
  {
    "objectID": "javase/selab2-4.html#trycatch-for-wrong-inputs",
    "href": "javase/selab2-4.html#trycatch-for-wrong-inputs",
    "title": "Lab#SE02-4: Movie/Review, interactivity and coupling",
    "section": "6 Try/Catch for wrong inputs",
    "text": "6 Try/Catch for wrong inputs\nWhen executing Java code, different errors may occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.\n\n\n\n\n\n\nDefinition Exception\n\n\n\nWhen an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).\n\n\nThe try and catch keywords come in pairs:\n\nThe try statement allows you to define a block of code to be tested for errors while it is being executed.\nThe catch statement allows you to define a block of code to be executed, if an error occurs in the try block.\n\ntry {\n  //  Block of code to try\n}\ncatch(Exception e) {\n  //  Block of code to handle errors\n}\n\n6.1 Example\nThe finally statement lets you execute code, aftertry...catch, regardless of the result\npublic class Main {\n  public static void main(String[] args) {\n   System.out.println(\"Hi\");\n    try {\n      int[] myNumbers = {1, 2, 3};\n      // this code will crash: there is NO positin 10 in this array myNumbers\n      System.out.println(myNumbers[10]);\n    } catch (Exception e) {\n      System.out.println(\"Something went wrong.\");\n    } finally {\n      System.out.println(\"The 'try catch' is finished.\");\n    }\n     System.out.println(\"Bye\");\n  }\n}\n\n// Output:\n// Hi\n// Something went wrong.\n// The 'try catch' is finished.\n// Bye\nExecute this code on w3schools",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE02-4: Movie/Review, interactivity and coupling"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html",
    "href": "javase/se-what-moochelsinki.html",
    "title": "Java MOOC Helsinki",
    "section": "",
    "text": "Java MOOC Programming University of Helsinki\n\n\nWelcome to the University of Helsinki’s free massive open online course (MOOC) on programming! This is an updated version of our popular course Object-Oriented Programming with Java.\nDuring this course, you will learn the basics of computer programming, along with algorithms and object-oriented programming through the Java programming language. The course includes comprehensive materials and plenty of programming exercises - all of which are tested using our automatic testing service Test My Code.",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#about-the-course",
    "href": "javase/se-what-moochelsinki.html#about-the-course",
    "title": "Java MOOC Helsinki",
    "section": "",
    "text": "Java MOOC Programming University of Helsinki\n\n\nWelcome to the University of Helsinki’s free massive open online course (MOOC) on programming! This is an updated version of our popular course Object-Oriented Programming with Java.\nDuring this course, you will learn the basics of computer programming, along with algorithms and object-oriented programming through the Java programming language. The course includes comprehensive materials and plenty of programming exercises - all of which are tested using our automatic testing service Test My Code.",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#target",
    "href": "javase/se-what-moochelsinki.html#target",
    "title": "Java MOOC Helsinki",
    "section": "2 Target",
    "text": "2 Target\nAnyone can join - no previous programming knowledge is required.\nUnlike many programming courses found online, ours is completely unabridged; the course’s scope and material are identical to our CS1 Introduction to Programming and Advanced Programming courses.\n\n\nThis is the first course in our computer science learning track, and we use industry-grade tooling from day one. As such, the course is about programming in a real integrated development environment (IDE) instead of a browser or an educational IDE.\nThe course does not require separate registration. You can simply dive into the first part of the course found over here.",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#course-contents",
    "href": "javase/se-what-moochelsinki.html#course-contents",
    "title": "Java MOOC Helsinki",
    "section": "3 Course Contents",
    "text": "3 Course Contents\nThe course is split up into two individual courses:\n\nJava Programming I\nJava Programming II\n\nEach course consists of seven parts, each with its own exercise set. Completing a single part takes approximately 5-20 hours, and we recommend reserving at least 10 hours per part, depending on prior skills with computers.\nGo to Course Contents detail",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#helsinkis-mooc-on-programming-java",
    "href": "javase/se-what-moochelsinki.html#helsinkis-mooc-on-programming-java",
    "title": "Java MOOC Helsinki",
    "section": "4 Helsinki’s (MOOC) on programming Java",
    "text": "4 Helsinki’s (MOOC) on programming Java\n\n\n\n\n\n\nNote\n\n\n\nWelcome to the University of Helsinki’s free massive open online course (MOOC) on programming! This is an updated version of our popular course Object-Oriented Programming with Java.\n\n\nDuring this course, you will learn the basics of computer programming, along with algorithms and object-oriented programming through the Java programming language. The course includes comprehensive materials and plenty of programming exercises - all of which are tested using our automatic testing service Test My Code.\nMaterials\n\nJava Programming Course Introduction\nJava Programming I - Part 1\nJava Programming II - Part 8\n\nTest my Code - Cloud\n\nTMC - Test My Code\n\nIDE: NetBeans + TMC Plug-In\n\nDownload and install NetBeans - TMC\nInstalling TMC to Linux Visual Code\n\n\n4.1 Create an account\nThis course uses mooc.fi accounts. If you have previously done mooc.fi -courses, you can log in with your existing account. On this page you can create a new account, which works on majority of mooc.fi courses and services.\n\nCreate TMC account\n\n\n\n\n4.2 Log in to the development environment\nStart the TMCBeans development environment you installed. When the environment starts, it asks for your e-mail address and password. Use the details of your MOOC.fi account you created in the previous step.\n\n\n\n4.3 Select your organization\nThe development environment asks the organization you do the exercises for. Select the organization mentioned in the course material. For example the organization for “Programming MOOC 2020” the organization is “MOOC”.\n\n\n\n4.4 Select your course\nAfter this, select the correct course. The course name is mentioned in your course material. The courses you see listed here depend on your organization.\n\n\n\n4.5 Doing your first coding exercise\n\n\n\n\n\n\nNote\n\n\n\nNext we will go through step by step how you can complete the first exercise of “Programming MOOC 2020”. Even if you are doing another course, read the instructions to the end because they contain important information about the development environment.\n\n\nDownload the exercises\nAfter you have logged in to the development environment and selected your organization and course, TMC will suggest exercises you can download (if there are any available). Download the exercises you want – the exercises have to do with the course material of the course you have selected.\nNow you should have the exercises downloaded to the development environment.\nYou can see the exercises listed on the left. Select the Projects-tab, and a small circles indicating completed exercises appear.\n\n\n\n4.6 Do an exercise\n\nOpen exercise Part01_01.AdaLovelace.\n\nDouble click the exercise, and look for a source code file called AdaLovelace.java.\nCurrently all source code files can be found from “Source Packages” directory in the exercise template.\nYou can open the exercise to the editor view by double clicking the file AdaLovelace.java. The editor view is the text editor at the middle of the TMC window, where you can make changes to the source code of a program.\nModify the source code so, that you see the following on your editor:\n    public class AdaLovelace {\n        public static void main(String[]args){\n            System.out.println(\"Ada Lovelace :D\");\n        }\n    }\n\n\n4.7 Running the source code\nYou can run the source code by clicking the Run button on TMC.\n\n\n\n4.8 Testing the source code\nExercises often have automatic tests, which give you feedback on your solution.\nYou can run the tests by clicking the Test button on TMC.\n\n\n\n4.9 Sending your solution to the server\nSending your solution to the server means submitting your exercise for grading. The exercises are almos always graded automatically, so you get your points (or a warning message) fast.\nYou can submit your solution either after all tests have passed, or separately by clicking the submit button on TMC.\n\n\n\n\n\n\n\nImportant\n\n\n\nYou can check your points by logging in to tmc.mooc.fi Use your MOOC.fi account to log in to the service.",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#tmc-in-visualcode",
    "href": "javase/se-what-moochelsinki.html#tmc-in-visualcode",
    "title": "Java MOOC Helsinki",
    "section": "5 TMC in VisualCode",
    "text": "5 TMC in VisualCode\n\nInstalling TMC to Linux Visual Code\n\nYou need to installing TestMyCode Extension for VS Code:\n\n\n\nTestMyCode Extension for VS Code\n\n\nYou will need Java Extension Pack for Visual Studio Code to compile and run your Java code.\n\n\n\nJava Extension Pack for VS Code\n\n\nStart TestMyCode Extension by clicking TMC icon in the left bar, log in by clicking Log in button. Use the account you made in previous step to log in.\n\n\n\nlog in into your TMC account",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#tmcbeans-does-not-start",
    "href": "javase/se-what-moochelsinki.html#tmcbeans-does-not-start",
    "title": "Java MOOC Helsinki",
    "section": "6 TMCBeans does NOT start",
    "text": "6 TMCBeans does NOT start\n\n6.1 Windows\n\n6.1.1 Step-by-step\n\nGo to C:\\ProgramFiles\\TMCBeans\\etc\nOpen tmcbeans.conf on any text editor\nFind jdkhome line and uncomment it by removing the “#” at the beggining of the line\nAdd the path to your JDK on it - it could be jdkhome=\"C:\\Program Files\\Zulu\\zulu-11 but your’s will be different\n\n\n\n6.1.2 Screenshots\nFirst at all localice all your JDK-JRE packages.\n\nRemember that TMCBeans runs with JDK-11\n\nTMCBeans does NOT run with JDK above 11\n\nOpen the file and modify the line where the TMCBeans execute JDK-JRE\n\n\nBe careful, in Windows you will need Administrator permission to save the configuration file.",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#linux",
    "href": "javase/se-what-moochelsinki.html#linux",
    "title": "Java MOOC Helsinki",
    "section": "7 Linux",
    "text": "7 Linux\nFor tmcbeans you must work with jdk8 or jdk11 in Linux, but never with higher ones. Therefore:\n\nSet up your system to 8:\n\nHow to set default Java version?\n\n\nOtherwise, it is a matter of local path java variables:\n\nLocal Path Variable:\n\nSetting Java variables on Linux\nTo Set PATH on Linux\n\nInstall JDK from tar.gzwithin /opt not /user:\n\nInstalling Java OpenJDK from .tar.gz archive and update the default JDK version\n\n\nYou may reset all installations\nsudo apt-get autoremove openjdk #double tab to list all openjdk versions installed\nsudo apt-get autoremove openjdk-11-jre #do this for all other openjdk versions\nsudo apt-get purge openjdk*\nsudo snap remove netbeans\nsudo snap remove tmcbeans\nsudo apt install openjdk-11-jre-headless\nsudo apt install openjdk-11-jre\nsudo snap install netbeans --classic\nsudo snap install tmcbeans --classic",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-what-moochelsinki.html#mac",
    "href": "javase/se-what-moochelsinki.html#mac",
    "title": "Java MOOC Helsinki",
    "section": "8 Mac",
    "text": "8 Mac\n\nTMCbeans does not open after installation",
    "crumbs": [
      "What is Java SE",
      "Java MOOC Helsinki"
    ]
  },
  {
    "objectID": "javase/se-pattern-decorator.html",
    "href": "javase/se-pattern-decorator.html",
    "title": "Decorator",
    "section": "",
    "text": "The decoartor pattern is a structural design pattern that lets you attach new functionality to the object by wrapping these objects inside special wrapper objects that contain the behaviours.\nThe Decorator design pattern is a structural pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. This provides a flexible alternative to using inheritance to modify behavior.\nIn the decorator pattern, a decorator class is used to wrap concrete components. The decorator class implements the same interface as the components it decorates and adds additional behavior by invoking the component methods. The result is that the client code can work with the decorated objects in the same way as it would work with the original components.",
    "crumbs": [
      "Java Design Patterns",
      "Decorator"
    ]
  },
  {
    "objectID": "javase/se-pattern-decorator.html#example-coffee-shop",
    "href": "javase/se-pattern-decorator.html#example-coffee-shop",
    "title": "Decorator",
    "section": "1 Example: Coffee shop",
    "text": "1 Example: Coffee shop\nHere’s an example of how the Decorator pattern can be used:\n\nCreate the Component Interface: First, create an interface Beverage that defines the methods that all beverages must have.:\n\npublic interface Beverage {\n  double cost();\n  String getDescription();\n}\n\nCreate Concrete Components: Next, create concrete components that implement the Beverage interface. In this case, Espresso, DarkRoast, HouseBlend, etc.:\n\npublic class Espresso implements Beverage {\n  @Override\n  public double cost() {\n    return 1.99;\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Espresso\";\n  }\n}\n\npublic class DarkRoast implements Beverage {\n  @Override\n  public double cost() {\n    return 2.99;\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Dark Roast\";\n  }\n}\n\npublic class HouseBlend implements Beverage {\n  @Override\n  public double cost() {\n    return 3.49;\n  }\n\n  @Override\n  public String getDescription() {\n    return \"House Blend\";\n  }\n}\n\nCreate the Decorator Class: Create a CondimentDecorator abstract class that implements the Beverage interface and has a reference to a Beverage object:\n\npublic abstract class CondimentDecorator implements Beverage {\n  protected Beverage beverage;\n\n  public CondimentDecorator(Beverage beverage) {\n    this.beverage = beverage;\n  }\n\n  public abstract double cost();\n  public abstract String getDescription();\n}\n\nCreate Concrete Decorators: Create concrete decorator classes that add behavior to the components. In this case, Milk, Sugar, and Syrup decorators.\n\npublic class Milk extends CondimentDecorator {\n  public Milk(Beverage beverage) {\n    super(beverage);\n  }\n\n  @Override\n  public double cost() {\n    return 0.10 + beverage.cost();\n  }\n\n  @Override\n  public String getDescription() {\n    return beverage.getDescription() + \", Milk\";\n  }\n}\n\npublic class Sugar extends CondimentDecorator {\n  public Sugar(Beverage beverage) {\n    super(beverage);\n  }\n\n  @Override\n  public double cost() {\n    return 0.15 + beverage.cost();\n  }\n\n  @Override\n  public String getDescription() {\n    return beverage.getDescription() + \", Sugar\";\n  }\n}\n\npublic class Syrup extends CondimentDecorator {\n  public Syrup(Beverage beverage) {\n    super(beverage);\n  }\n\n  @Override\n  public double cost() {\n    return 0.25 + beverage.cost();\n  }\n\n  @Override\n  public String getDescription() {\n    return beverage.getDescription() + \", Syrup\";\n\nUse the Decorator: In the client code, create a Beverage object and wrap it with multiple decorators to add desired ingredients.\n\nBeverage espresso = new Espresso();\nSystem.out.println(espresso.getDescription() + \" $\" + espresso.cost());\n\nBeverage darkRoast = new DarkRoast();\ndarkRoast = new Milk(darkRoast);\ndarkRoast = new Sugar(darkRoast);\nSystem.out.println(darkRoast.getDescription() + \" $\" + darkRoast.cost());\n\nBeverage houseBlend = new HouseBlend();\nhouseBlend = new Syrup(houseBlend);\nhouseBlend = new Milk(houseBlend);\nSystem.out.println(houseBlend.getDescription() + \" $\" + houseBlend.cost());\n\nOutput: The output of the above code will show the description and cost of the beverages, including the added ingredients.\n\nEspresso $1.99\nDark Roast, Milk, Sugar $3.74\nHouse Blend, Syrup, Milk $4.24\nThis example demonstrates how the Decorator pattern can be used to add behavior to objects dynamically, without affecting the behavior of other objects from the same class.\n\n\n\n\n\n\n\ne3f6b450685662abb959fe6dc77071b7dc9be0c2",
    "crumbs": [
      "Java Design Patterns",
      "Decorator"
    ]
  },
  {
    "objectID": "javase/se-concepts-java8.html",
    "href": "javase/se-concepts-java8.html",
    "title": "Java SE: Java 8",
    "section": "",
    "text": "📘 Java 8\nJava 8 is a revolutionary release of the development platform.\nIt includes a huge upgrade to the Java programming model and a coordinated evolution of the JVM, Java language, and libraries.\nJava 8 includes features for productivity, ease of use, improved programming technique in java, security and improved performance.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Java 8"
    ]
  },
  {
    "objectID": "javase/se-concepts-java8.html#overview",
    "href": "javase/se-concepts-java8.html#overview",
    "title": "Java SE: Java 8",
    "section": "1 Overview",
    "text": "1 Overview\nJava 8 includes the following:\n\nLambda expressions\nMethod references\nDefault Methods (Defender methods)\nA new Stream API.\nOptional\nA new Date/Time API.\nNashorn, the new JavaScript engine\nRemoval of the Permanent Generation",
    "crumbs": [
      "Java Concepts",
      "Java SE: Java 8"
    ]
  },
  {
    "objectID": "javase/se-concepts-java8.html#main-features",
    "href": "javase/se-concepts-java8.html#main-features",
    "title": "Java SE: Java 8",
    "section": "2 Main features",
    "text": "2 Main features\nJava 8 introduced several new features to the language, including Streams, Optional, Lambda expressions, and Method references. Here’s a brief definition of each of these features:\n\nStreams Streams provide a way to process collections of data in a declarative and functional way. Streams allow you to express complex data manipulations in a simple, concise way.\n\n\n\nWith streams, you can filter, map, reduce, and collect data in a highly readable and maintainable way.\n\nOptional Optional is a container object that may or may not contain a non-null value. It is designed to reduce the number of null checks in your code and to provide a more elegant way of handling null values.\n\n\n\nOptional can be used to wrap any object, and it provides methods for safely accessing the wrapped object or handling the case when the object is null.\n\nLambda expressions Lambda expressions provide a way to write code in a functional style. They allow you to pass behavior as an argument to a method, which is a powerful technique for writing more modular and reusable code.\n\n\n\nLambda expressions can be used in place of anonymous inner classes and are highly concise and readable.\n\nMethod references Method references provide a way to pass a method as an argument to another method. They provide a concise and expressive way to write code, and can be used in place of lambda expressions in certain situations.\n\n\n\nMethod references are highly readable and can make code more modular and reusable.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Java 8"
    ]
  },
  {
    "objectID": "javase/se-concepts-java8.html#example-of-functional-style-in-java-8",
    "href": "javase/se-concepts-java8.html#example-of-functional-style-in-java-8",
    "title": "Java SE: Java 8",
    "section": "3 Example of functional-style in Java 8",
    "text": "3 Example of functional-style in Java 8\nSuppose you have a list of integers and you want to filter out the even numbers and then calculate the sum of the remaining odd numbers.\nIn Java 8 and later, you can use a combination of lambda expressions and the Stream API to express this computation in a functional-style:\nList&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\nint sum = numbers.stream()               // create a stream of the list of numbers\n                .filter(n -&gt; n % 2 != 0) // filter out the even numbers\n                .mapToInt(Integer::intValue) // convert the stream to an IntStream\n                .sum();                 // calculate the sum of the remaining odd numbers\n\nSystem.out.println(\"Sum of odd numbers: \" + sum);\n\n\nThe lambda expression n -&gt; n % 2 != 0 passed to the filter() method tests each number to see if it is odd by checking if the remainder after division by 2 is not equal to 0.\nIn this code, we first create a stream of the list of numbers using the stream() method.\nWe then use the filter() method to remove all the even numbers from the stream, and the mapToInt() method to convert the stream to an IntStream, which has a sum() method that we can use to calculate the sum of the remaining odd numbers.\nThis example demonstrates how functional-style programming in Java can be used to express computations in a more concise and readable way by using higher-order functions, lambda expressions, and the Stream API.\nInstead, using imperative and modern Java 8:\nList&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\nint sum = 0;\nfor (int number : numbers) {\n    if (number % 2 != 0) {  // filter out even numbers\n        sum += number;      // accumulate odd numbers\n    }\n}\n\nSystem.out.println(\"Sum of odd numbers: \" + sum);\n\n\nIn this code, we iterate over the list of numbers using a for-each loop, and filter out even numbers using an if-statement. We then accumulate the odd numbers in the sum variable using the += operator. Finally, we print the result using System.out.println().",
    "crumbs": [
      "Java Concepts",
      "Java SE: Java 8"
    ]
  },
  {
    "objectID": "javase/se-concepts-java8.html#streams",
    "href": "javase/se-concepts-java8.html#streams",
    "title": "Java SE: Java 8",
    "section": "4 Streams",
    "text": "4 Streams\n\nFirst of all, Java 8 Streams should not be confused with Java I/O streams (ex: FileInputStream etc).\nSimply put, streams are wrappers around a data source, allowing us to operate with that data source and making bulk processing convenient and fast by lazy and terminal operations.\nA stream does not store data and, in that sense, is not a data structure. It also never modifies the underlying data source.\nThis functionality java.util.stream supports functional-style operations on streams of elements.\n\n\n\n\n\nStreams allow you to express complex data manipulations in a simple, concise way. With streams, you can filter, map, reduce, and collect data in a highly readable and maintainable way.\n\n\n\n4.1 Example\nHere’s an example of how lazy evaluation, wrapping the data and intermediate/terminal operations work in Java streams:\nList&lt;String&gt; words = Arrays.asList(\"hello\", \"world\", \"how\", \"are\", \"you\");\n\n// create a stream and apply intermediate operations to filter and map the data\nStream&lt;String&gt; stream = words.stream()\n    .filter(w -&gt; w.length() &gt; 3)\n    .map(String::toUpperCase);\n\n// call a terminal operation to evaluate the stream and produce a result\nString result = stream.findFirst().orElse(\"\");\n\nSystem.out.println(result);\n\n\nIn this example, we start by creating a list of strings and then create a stream from the list using the stream() method and wrapping them around.\nWe then apply two intermediate operations, filter() and map(), to filter the words that have a length greater than 3 and convert them to uppercase, respectively.\nAt this point, no computation has been performed on the data. Instead, the operations on the stream have created a new stream with the modified data.\nNext, we call a terminal operation, findFirst(), to find the first element in the stream that matches the specified condition.\nThis operation triggers the computation of the stream and produces a result, which in this case is the first word in the stream that has a length greater than 3 and is in uppercase.\nBecause of lazy evaluation, only the elements that are necessary to produce the result are processed. In this example, only the first element that matches the condition is processed, and the remaining elements are not processed.\nFinally, we print the result to the console, which is the first word in the stream that matches the condition. In this case, the result is the string “WORLD”.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Java 8"
    ]
  },
  {
    "objectID": "javase/se-concepts-java8.html#optional",
    "href": "javase/se-concepts-java8.html#optional",
    "title": "Java SE: Java 8",
    "section": "5 Optional",
    "text": "5 Optional\n\nOptional is a container object that may or may not contain a non-null value. It is a way to represent a value that may or may not be present, without using null references.\n\n\nAn Optional object can either contain a non-null value, or be empty. When an Optional object contains a value, it provides a way to safely access that value without risking a NullPointerException. On the other hand, when an Optional object is empty, it indicates that there is no value present.\nTo create an Optional object, you can call the staticof() method and pass in a non-null value, or you can call the static empty() method to create an empty Optional object.\n\n\n\nOptional\n\n\nTo access the value of an Optional object, you can call the get() method, but it is recommended to first check if the value is present using the isPresent() method. If the value is not present, you can provide a default value using the orElse() or orElseGet() methods.\n\n\n\n\n\n\nNote\n\n\n\nOptional is often used as a return type for methods that may or may not return a value, as a way to indicate that the method may return no value, and to avoid returning null references. It is also used in the Stream API to represent the possibility of an empty result set.\n\n\n\n5.1 Example\nimport java.util.Optional;\n\npublic class OptionalExample {\n    public static void main(String[] args) {\n        String name = \"John Doe\";\n        Optional&lt;String&gt; optionalName = Optional.of(name); // Create an Optional object with a non-null value\n        System.out.println(optionalName.isPresent()); // true\n        System.out.println(optionalName.get()); // \"John Doe\"\n\n        String nullName = null;\n        Optional&lt;String&gt; optionalNullName = Optional.ofNullable(nullName); // Create an Optional object with a null value\n        System.out.println(optionalNullName.isPresent()); // false\n\n        String defaultName = \"Jane Doe\";\n        String finalName = optionalNullName.orElse(defaultName); // Use the default value when the Optional is empty\n        System.out.println(finalName); // \"Jane Doe\"\n    }\n}\n\n\n\nIn this example, we create two Optional objects: optionalName, which contains a non-null value, and optionalNullName, which contains a null value.\nWe use the isPresent() method to check if the Optional objects contain a value, and the get() method to access the values. When optionalNullName is empty, we use the orElse() method to provide a default value.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Java 8"
    ]
  },
  {
    "objectID": "javase/se-concepts-java8.html#lambda",
    "href": "javase/se-concepts-java8.html#lambda",
    "title": "Java SE: Java 8",
    "section": "6 Lambda",
    "text": "6 Lambda\n\nLambda expressions support functional programming style, which emphasizes writing code in terms of functions that take inputs and produce outputs, without relying on mutable state or side effects.\nThey allow to express a behavior as a function object, which can be passed around and executed later.\n\n\nA lambda expression is composed of three parts:\n\nthe argument list,\nthe arrow token (-&gt;),\nand the body.\n\nThe argument list specifies the inputs to the function, and can be empty or have one or more parameters. The arrow token separates the argument list from the body. The body contains the code that implements the behavior of the lambda expression.\n\n\n\nLambda\n\n\n\n6.1 Example\nHere’s an example of a lambda expression that adds two numbers:\n(int a, int b) -&gt; a + b\n\n\n\nThis lambda expression takes** two int arguments and returns their sum. The argument list (int a, int b) specifies the inputs** to the function, and the body a + b contains the code that implements the behavior.\nLambda expressions can be used in many places in Java, such as the Stream API, the Comparator interface, and the Runnable and Callable interfaces. They are a powerful tool for writing concise, expressive code that is easy to read and maintain.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Java 8"
    ]
  },
  {
    "objectID": "javase/se-concepts-java8.html#method-references",
    "href": "javase/se-concepts-java8.html#method-references",
    "title": "Java SE: Java 8",
    "section": "7 Method references",
    "text": "7 Method references\n\nMethod references are special types of lambda expressions that execute only one method.\nMethod reference is a shorthand syntax for referring to an existing method or constructor, without having to provide a full method implementation.\nIt is a way to pass a method as a parameter to another method or to create a functional interface instance.\n\n\n\nA comprehensive guide to Java 8 method reference\nQuickly writing Java lambdas and method references\n\nThey allow you to refer to a method by its name and optionally specify the object on which the method is invoked.\n\n\n\nMethod references\n\n\nThere are four types of method references:\n\nReference to a static method\nReference to an instance method of an object of a particular type\nReference to an instance method of an existing object\nReference to a constructor\n\n\n7.1 Example names print\nList&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n\n// Using lambda expression\nnames.forEach(name -&gt; System.out.println(name));\n\n// Using method reference\nnames.forEach(System.out::println);\nIn this example, we have a list of names and we want to print them to the console. We can achieve this using a forEach method that accepts a Consumer interface implementation. The Consumer interface has a single abstract method accept that takes an input and performs an operation on it.\nWe can pass a lambda expression or a method reference to the forEach method to define the Consumer implementation. In the lambda expression version, we define an anonymous function that takes a name parameter and prints it to the console using System.out.println(name).\nIn the method reference version, we refer to the println method of the System.out object using the syntax System.out::println. This is equivalent to passing a lambda expression that calls System.out.println(name) with the name parameter.\nBoth versions of the code produce the same output, but the method reference version is more concise and easier to read.\n\n\n7.2 Example names compareTo\nList&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\n\n// Using lambda expression\nCollections.sort(names, (name1, name2) -&gt; name1.compareTo(name2));\n\n// Using method reference\nCollections.sort(names, String::compareTo);\nIn this example, we have a list of names and we want to sort them in ascending order. We can achieve this using the sort method of the Collections class, which accepts a list and a Comparator implementation to define the sort order.\nWe can pass a lambda expression or a method reference to the sort method to define the Comparator implementation. In the lambda expression version, we define an anonymous function that takes two String parameters name1 and name2, and compares them using the compareTo method of String class.\nIn the method reference version, we refer to the compareTo method of the String class using the syntax String::compareTo. This is equivalent to passing a lambda expression that calls name1.compareTo(name2).\nBoth versions of the code produce the same output, but the method reference version is more concise and easier to read.",
    "crumbs": [
      "Java Concepts",
      "Java SE: Java 8"
    ]
  },
  {
    "objectID": "javase/se-pattern-bridge.html",
    "href": "javase/se-pattern-bridge.html",
    "title": "Bridge",
    "section": "",
    "text": "The bridge pattern is a design pattern in computer programming and Java that is used to decoumple abstraction from implemetation, allowing them to change independently..\n\n\nThe Bridge pattern is a way to separate the idea of what something does from how it does it, so that both can evolve independently.\nImagine you want to draw different shapes, like circles, but in different colors. You could create a class for each shape and color combination, but that would be a lot of classes. Instead, the Bridge pattern separates the “what” (the shape) from the “how” (the color) and combines them when needed. This way, you can have different classes for the shapes and different classes for the colors, and they can be combined in different ways without having to change either.",
    "crumbs": [
      "Java Design Patterns",
      "Bridge"
    ]
  },
  {
    "objectID": "javase/se-pattern-bridge.html#definition",
    "href": "javase/se-pattern-bridge.html#definition",
    "title": "Bridge",
    "section": "",
    "text": "The bridge pattern is a design pattern in computer programming and Java that is used to decoumple abstraction from implemetation, allowing them to change independently..\n\n\nThe Bridge pattern is a way to separate the idea of what something does from how it does it, so that both can evolve independently.\nImagine you want to draw different shapes, like circles, but in different colors. You could create a class for each shape and color combination, but that would be a lot of classes. Instead, the Bridge pattern separates the “what” (the shape) from the “how” (the color) and combines them when needed. This way, you can have different classes for the shapes and different classes for the colors, and they can be combined in different ways without having to change either.",
    "crumbs": [
      "Java Design Patterns",
      "Bridge"
    ]
  },
  {
    "objectID": "javase/se-pattern-bridge.html#example-building-a-drawapi",
    "href": "javase/se-pattern-bridge.html#example-building-a-drawapi",
    "title": "Bridge",
    "section": "2 Example: Building a DrawAPI",
    "text": "2 Example: Building a DrawAPI\nHere’s an example of the explanation above:\n\nCreate an interface DrawAPI with a method to draw a circle.\n\ninterface DrawAPI {\n   void drawCircle(int radius, int x, int y);\n}\n\nImplement the DrawAPI interface.\n\nclass RedCircle implements DrawAPI {\n   @Override\n   public void drawCircle(int radius, int x, int y) {\n      System.out.println(\"Drawing Circle[ color: red, radius: \" + radius + \", x: \" + x + \", \" + y + \"]\");\n   }\n}\n\nclass GreenCircle implements DrawAPI {\n   @Override\n   public void drawCircle(int radius, int x, int y) {\n      System.out.println(\"Drawing Circle[ color: green, radius: \" + radius + \", x: \" + x + \", \" + y + \"]\");\n   }\n}\n\nCreate an abstract class Shape with a field of type DrawAPI:\n\nabstract class Shape {\n   protected DrawAPI drawAPI;\n   \n   protected Shape(DrawAPI drawAPI){\n      this.drawAPI = drawAPI;\n   }\n   public abstract void draw();\n}\n\nCreate concrete classes that extend the Shape class and use the drawAPI to draw a circle.\n\nclass Circle extends Shape {\n   private int x, y, radius;\n\n   public Circle(int x, int y, int radius, DrawAPI drawAPI) {\n      super(drawAPI);\n      this.x = x;  \n      this.y = y;  \n      this.radius = radius;\n   }\n\n   public void draw() {\n      drawAPI.drawCircle(radius,x,y);\n   }\n}\n\nUse the Shape and DrawAPI classes to draw different colored circles.\n\npublic class BridgePattern {\n   public static void main(String[] args) {\n      Shape redCircle = new Circle(100,100, 10, new RedCircle());\n      Shape greenCircle = new Circle(100,100, 10, new GreenCircle());\n\n      redCircle.draw();\n      greenCircle.draw();\n   }\n}\nOutput:\nDrawing Circle[ color: red, radius: 10, x: 100, 100]\nDrawing Circle[ color: green, radius: 10, x: 100, 100]\nAbout this site",
    "crumbs": [
      "Java Design Patterns",
      "Bridge"
    ]
  },
  {
    "objectID": "javase/se-pattern-observer.html",
    "href": "javase/se-pattern-observer.html",
    "title": "Observer",
    "section": "",
    "text": "The observer pattern is a design pattern in computer programming and Java that is used to notify one or mutiple objects of changes to another object.\n\n\nThis pattern is useful when you have a one-to-many relationship and when the state of “the one” object has to be notified in the clases that conform “the many” objects. Each object of “the many” part will be notified of changes to “the one” object.\nThe observer pattern is usually implemented by creating an interface or an abstract class:\n\n\n\nObserver Pattern UML",
    "crumbs": [
      "Java Design Patterns",
      "Observer"
    ]
  },
  {
    "objectID": "javase/se-pattern-observer.html#definition",
    "href": "javase/se-pattern-observer.html#definition",
    "title": "Observer",
    "section": "",
    "text": "The observer pattern is a design pattern in computer programming and Java that is used to notify one or mutiple objects of changes to another object.\n\n\nThis pattern is useful when you have a one-to-many relationship and when the state of “the one” object has to be notified in the clases that conform “the many” objects. Each object of “the many” part will be notified of changes to “the one” object.\nThe observer pattern is usually implemented by creating an interface or an abstract class:\n\n\n\nObserver Pattern UML",
    "crumbs": [
      "Java Design Patterns",
      "Observer"
    ]
  },
  {
    "objectID": "javase/se-pattern-observer.html#example-weather",
    "href": "javase/se-pattern-observer.html#example-weather",
    "title": "Observer",
    "section": "2 Example: Weather",
    "text": "2 Example: Weather\nHere is an example of implementation of the observer pattern step by step:\n\nCreate the interface Observer:\n\npublic interface Observer {\n    void update();\n}\n\nCreate the interface Subject:\n\npublic interface Subject {\n    void attach(Observer observer);\n    void detach(Observer observer);\n    void notifyObservers();\n}\n\nCreate a class WeatherData which implements the Subject interface:\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class WeatherData implements Subject {\n    private List&lt;Observer&gt; observers = new ArrayList&lt;&gt;();\n    private double temperature;\n\n    public void attach(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void detach(Observer observer) {\n        observers.remove(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n    public void setTemperature(double temperature) {\n        this.temperature = temperature;\n        this.notifyObservers();\n    }\n\n    public double getTemperature() {\n        return temperature;\n    }\n}\n\nCreate the TemperatureDisplay class which implements the Observer interface:\n\npublic class TemperatureDisplay implements Observer {\n    private WeatherData weatherData;\n\n    public TemperatureDisplay(WeatherData weatherData) {\n        this.weatherData = weatherData;\n        weatherData.attach(this);\n    }\n\n    public void update() {\n        System.out.println(\"Temperature: \" + weatherData.getTemperature());\n    }\n}\n\nUse the WeatherData class to notify the Observers:\n\nWeatherData weatherData = new WeatherData();\nTemperatureDisplay temperatureDisplay = new TemperatureDisplay(weatherData);\n\nweatherData.setTemperature(27.5);\nThe example demonstrates how to implement the Observer pattern in Java, where the WeatherData class acts as the Subject and the TemperatureDisplay class acts as the Observer.\nThe WeatherData class maintains a list of Observers and provides methods for attaching and detaching Observers, as well as for notifying Observers when the temperature changes. The TemperatureDisplay class receives updates from the WeatherData class and displays the temperature on the console.\nWhen the temperature is set in the WeatherData class, it calls the notifyObservers() method which in turns calls the update() method of all the Observers. The TemperatureDisplay class receives the update and retrieves the temperature from the WeatherData instance and displays it on the console.\nThis pattern allows for a loosely coupled system, where the WeatherData class does not need to be aware of the existence of the TemperatureDisplay class and vice versa. The TemperatureDisplay class can be added or removed from the observer list without affecting the behavior of the WeatherData class.",
    "crumbs": [
      "Java Design Patterns",
      "Observer"
    ]
  },
  {
    "objectID": "javase/selab4-1.html",
    "href": "javase/selab4-1.html",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "",
    "text": "📘 Linux Lab#SE04-1: healthyFood Restaurant\n\nCreate a Maven/Gradle Java SE Project.\n\nCrete from wizard the Maven Java SE Project and then work with git version control, local and remote (GitHub.com).\n\nAdd the needed dependencies:\n\nLombok\nJunit\nJava Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\nCore Model: Table, Order and Menu\nManagers and Controller: use a fake DataBase like ArrayList or HashMaps\n\nWith Junit dependency create unitary test to test objects and operations, and then integration tests.\nFrom here you should add new features once all the test are passed.\n\nOperations, you could think in a Manager Class o similar\nNew fields/attributes and new classes\nNew compositions and inherence: expand your model\nUse Factory design pattern to create new objects\n\n\nProject Overview\n\nTechnology Stack:\n\nFront-End: React\nBack-End: Spring Boot\n\nSystem Design:\n\nThe UML diagram, designed as part of Lab#SE04-1, lays the groundwork for essential entities such as Orders, Tables, and Menus.\n\n\nIntegration with Spring Boot with API Rest\nThis Java Maven SE backe-end seamlessly integrates with the React front-end via API Rest, creating a efficient restaurant management.\nThe UML design acts as a guide, ensuring a cohesive flow between the front-end and back-end components.\n\nLab#SE06-1",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#ecosystem-tech-stack-system-design-and-architecture",
    "href": "javase/selab4-1.html#ecosystem-tech-stack-system-design-and-architecture",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "2.1 EcoSystem: tech stack, system design and architecture",
    "text": "2.1 EcoSystem: tech stack, system design and architecture\n\nSoftware Core tools: framework/engine/publishing system, Code language, SDK (software development kit)\nDevelopment tools: Configuration system and format (.xml, .json, .yml ), Dependencies & packages management\nDeveloper tools: IDE, debugger, collaborative & version control, documentation (Mermaid UML)\nDevOps & App LifeCycle: test, deployment, OS, agile management\n\n\n\n\n\n\n\n\n\n\n\n\n(1) Software Core tools\n(2) Development tools\n(3) Developer tools\n(4) DevOps\n#version\n\n\n\n\nJava SE  JDK: open JDK 21 \nMaven: pom.xml Lombok, JUnit 4.11/5, JavaFaker\nIDE: IntelliJ IDEA 2023.3.3 (Community Edition) Doc: Quarto, markdownVersion Control: git & gitHub mermaid UML\nPhase: Sandbox  Linux 21.3 Virginia  Agile: SCRUM\nv.0.x",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#dependencies-pom.xml",
    "href": "javase/selab4-1.html#dependencies-pom.xml",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "2.2 Dependencies pom.xml",
    "text": "2.2 Dependencies pom.xml\nThe pom.xml file in a Java SE Maven project is crucial as it serves as the Project Object Model configuration.\n\n\nThe pom.xml and dependencies enhance project maintainability, collaboration, and adherence to best practices, making them indispensable components for Java developers leveraging Maven for efficient project management and streamlined workflows.\nIt defines project metadata, dependencies, plugins, and build configurations, ensuring consistent builds. Dependencies are vital as they specify external libraries required for the project, facilitating easy management and version control. Maven leverages these elements to automate project builds, simplifying development, testing, and deployment.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#dependency-lombok",
    "href": "javase/selab4-1.html#dependency-lombok",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "2.3 Dependency: Lombok",
    "text": "2.3 Dependency: Lombok\nUse Lombok, link:\n\nThe @Data annotation is a Lombok annotation that generates getters and setters for the fields of a class, as well as equals, hashCode, and toString methods based on the fields.\nThe @AllArgsConstructor annotation is a Lombok annotation that generates a constructor with all of the class’s fields as arguments.\nThe @NoArgsConstructor annotation is a Lombok annotation that generates a no-argument constructor for a class.\n\n@Data All together now: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, @Setter on all non-final fields, and @RequiredArgsConstructor.\nAdding lombok to your pom file: to include lombok as a provided dependency, add it to your In your Java code: block like so:\n\n\npom.xml\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;version&gt;1.18.24&lt;/version&gt;\n        &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n\n\n\n\n\n\nImportant\n\n\n\nThe version &lt;version&gt;1.18.24&lt;/version&gt; crashes. Use 1.18.30\n\n\nYou could then use these classes as follows:\n\n\ntable.java\n\nimport lombok.Data;\n\n@Data\n\n// define your class\n\n\n2.3.1 Dependency: Java Faker\nUse Java Faker:\nIn pom.xml, add the following xml dependency between  … \n\n\npom.xml\n\n&lt;dependencies&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;com.github.javafaker&lt;/groupId&gt;\n      &lt;artifactId&gt;javafaker&lt;/artifactId&gt;\n      &lt;version&gt;1.0.2&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\nIn your Java code:\n\n\ntestfaker.java\n\nimport com.github.javafaker.Faker;\nimport org.junit.jupiter.api.Test;\n\nFaker faker = new Faker();\n\nString name = faker.name().fullName(); // Miss Samanta Schmidt\nString firstName = faker.name().firstName(); // Emory\nString lastName = faker.name().lastName(); // Barton\n\nString streetAddress = faker.address().streetAddress(); // 60018 Sawayn Brooks Suite 449\n\n\n\n2.3.2 Dependency: JUnit 5\nTo configure support for JUnit Jupiter based tests, configure test scoped dependencies on the JUnit Jupiter API and the JUnit Jupiter TestEngine implementation similar to the following.\nmore on Java SE TDD\n\n\npom.xml\n\n&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n      &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n      &lt;version&gt;5.9.1&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#core-classes-table-order-and-menu",
    "href": "javase/selab4-1.html#core-classes-table-order-and-menu",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "2.4 Core classes: table, order and menu",
    "text": "2.4 Core classes: table, order and menu\n\n2.4.1 Solving discussion: UMLs\n\n\n\n\n\nclassDiagram\n\n\n\nclass Table{\n\n  +String name\n  +String description\n  +int qty\n\n}\n\nclass Order{\n\n  +date date\n  +String orderNumber\n  +String waiter\n  +int peopleqty\n  +int totalPayment\n  +bool paid\n  +Table table\n  +Menu[] menus\n\n}\n\nclass Menu{\n\n  +String name\n  +String price\n  +int price\n  +string conntent\n\n}\n\n  Table \"1\" --* \"n\" Order\n  Menu \"1\" --* \"n\" Order",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#entities-manager",
    "href": "javase/selab4-1.html#entities-manager",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "4.1 Entities Manager",
    "text": "4.1 Entities Manager\nMenuManager\n\n\n\n\n\nmenuManger object\n\n\n\n\n\n\n\nclassDiagram\n\nclass MenuManager {\n  - menus: HashMap&lt;String, Menu&gt;\n  - qty: int\n  - size: double\n  - lastModified: Date\n  + addMenu(menu: Menu, data: String): void\n  + updateMenu(): void\n  + deleteMenu(title: String): void\n  + getMenu(title: String): Menu\n  + getMenus(): List&lt;&gt;\n  + rateMenu(rate: int, menu: Menu): void\n  + saveToCSV(): void\n  + deleteCSV(): void\n}\n\n\n\n\n\n\n\n\nOverall, the MenuManager acts as a central hub for menu-related operations, promoting efficient management and systematic handling of menu entities in Java applications.\n\nmenuManager java class v0.2\n\nA MenuManager class is essential for managing entities like Menu for several reasons:\n\nFirst, it encapsulates the complexity of menu handling by maintaining a HashMap&lt;String, Menu&gt; to efficiently store and retrieve menus based on their titles.\n\nThis abstraction enhances code organization and readability.\n\nSecond, the MenuManager includes methods like addMenu, updateMenu, and deleteMenu to provide a clear and controlled interface for manipulating menus, promoting a modular and maintainable codebase.\nThe class also tracks additional metadata such as quantity, size, and last modification date, offering valuable insights into the menu collection.\nIt facilitates data persistence with methods like saveToCSV and deleteCSV, allowing menus to be stored in a CSV format.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#references",
    "href": "javase/selab4-1.html#references",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "4.2 References",
    "text": "4.2 References\n\nJava HashMap\nHashMap (Java Platform SE 8 )\nJava HashMap (With Examples)\nWhat is a Java Hashmap?",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#definition",
    "href": "javase/selab4-1.html#definition",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "4.3 Definition",
    "text": "4.3 Definition\nIn Java, you use a HashMap to store items in key/value pairs. You can access items stored in a HashMap using the item’s key, which is unique for each item.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#what-are-the-features-of-a-hashmap-in-java",
    "href": "javase/selab4-1.html#what-are-the-features-of-a-hashmap-in-java",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "4.4 What Are the Features of a HashMap in Java?",
    "text": "4.4 What Are the Features of a HashMap in Java?\nBefore working with HashMaps, it is important to understand how they work.\nHere are some of the features of a HashMap:\n\nItems are stored in key/value pairs.\nItems do not maintain any order when added. The data is unordered.\nIn a case where there are duplicate keys, the last one will override the other(s).\nData types are specified using wrapper classes instead of primitive data types.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#how-to-create-a-hashmap-in-java",
    "href": "javase/selab4-1.html#how-to-create-a-hashmap-in-java",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "4.5 How to Create a HashMap in Java",
    "text": "4.5 How to Create a HashMap in Java\nIn order to create and use a HashMap, you must first import the java.util.HashMap package. That is:\nimport java.util.HashMap;\nHere’s what the syntax looks like for creating a new HashMap:\nHashMap&lt;KeyDataType, ValueDataType&gt; HashMapName = new HashMap&lt;&gt;();",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#example",
    "href": "javase/selab4-1.html#example",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "4.6 Example",
    "text": "4.6 Example\nCreate a HashMap object called capitalCities that will store String keys and String values:\nimport java.util.HashMap; // import the HashMap class\n\nHashMap&lt;String, String&gt; capitalCities = new HashMap&lt;String, String&gt;();\nCreate a HashMap object called capitalCities that will store String keys and String values:\nimport java.util.HashMap; // import the HashMap class\n\nHashMap&lt;String, String&gt; capitalCities = new HashMap&lt;String, String&gt;();javase/selab4-1.qmdjavase/selab4-1.qmd",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#java-user-input-scanner",
    "href": "javase/selab4-1.html#java-user-input-scanner",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "5.1 Java User Input (Scanner)",
    "text": "5.1 Java User Input (Scanner)\nThe Scanner class is used to get user input, and it is found in the java.util package.\nTo use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation.\nScanner readerObject = new Scanner(System.in);  // Create a Scanner object\nString userName = readerObject.nextLine();  // Read user input\nIn the example above, we used the nextLine() method, which is used to read Strings. To read other types, look at the table below:\n\n\n\nInput Types",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#trycatch-for-wrong-inputs",
    "href": "javase/selab4-1.html#trycatch-for-wrong-inputs",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "5.2 Try/Catch for wrong inputs",
    "text": "5.2 Try/Catch for wrong inputs\nWhen executing Java code, different errors may occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.\n\n\n\n\n\n\nDefinition Exception\n\n\n\nWhen an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).\n\n\nThe try and catch keywords come in pairs:\n\nThe try statement allows you to define a block of code to be tested for errors while it is being executed.\nThe catch statement allows you to define a block of code to be executed, if an error occurs in the try block.\n\ntry {\n  //  Block of code to try\n}\ncatch(Exception e) {\n  //  Block of code to handle errors\n}\n\n5.2.1 Example\nThe finally statement lets you execute code, aftertry...catch, regardless of the result\npublic class Main {\n  public static void main(String[] args) {\n   System.out.println(\"Hi\");\n    try {\n      int[] myNumbers = {1, 2, 3};\n      // this code will crash: there is NO positin 10 in this array myNumbers\n      System.out.println(myNumbers[10]);\n    } catch (Exception e) {\n      System.out.println(\"Something went wrong.\");\n    } finally {\n      System.out.println(\"The 'try catch' is finished.\");\n    }\n     System.out.println(\"Bye\");\n  }\n}\n\n// Output:\n// Hi\n// Something went wrong.\n// The 'try catch' is finished.\n// Bye\nExecute this code on w3schools",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab4-1.html#implementation-v0.2",
    "href": "javase/selab4-1.html#implementation-v0.2",
    "title": "Lab#SE04-1: healthyFood Restaurant, Core Model",
    "section": "6.1 Implementation v0.2",
    "text": "6.1 Implementation v0.2\n\nGitHub code v0.2\n\nThe use case implemented in Java Maven SE is a console-based application is the creation of a new menu.\nAt its core, the HealthyController class orchestrates the application’s execution, featuring a perpetual loop for user interaction.\n\nThe main menu options are displayed, prompting users for input. Based on the selection, the program either initiates menu creation through the createMenu() method or lists existing menus stored in the MenuManager.\n\nWithin the MenuManager class, menus are managed using a HashMap, allowing for the storage and retrieval of menus. Additionally, auxiliary methods such as ask() facilitate user input and toString() aids in menu listing.\nExecution flow begins with the start() method, initializing necessary objects, followed by continuous interaction until the user opts to exit the application. This setup streamlines user engagement, guiding them through menu creation and retrieval seamlessly.\n\n\n\nhealthyFood Restaurant use case create a new menu from CLI by user\n\n\n\n\n\n\n\nhealthyFood Restaurant use case create a new menu from CLI by user -numbered-",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE04-1: healthyFood Restaurant, Core Model"
    ]
  },
  {
    "objectID": "javase/selab1-2.html",
    "href": "javase/selab1-2.html",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "",
    "text": "Create a Maven/Gradle Java SE Project with three classes and Junit to test objects and operations. From here you should add new features: factory pattern, JSON parser and save this JSON on local storage.",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON"
    ]
  },
  {
    "objectID": "javase/selab1-2.html#solving-discussion",
    "href": "javase/selab1-2.html#solving-discussion",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "1 Solving discussion",
    "text": "1 Solving discussion\n\n1.1 Base Classes: factory\nHere is an example of how you could create a Lombok Java class for a Person and Account using the factory pattern:\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Person {\n    private String firstName;\n    private String lastName;\n}\n\npublic interface Account {\n    void deposit(double amount);\n    void withdraw(double amount);\n}\n\n\npublic class SavingsAccount implements Account {\n    private double balance;\n\n    public SavingsAccount(double balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        this.balance -= amount;\n    }\n}\n\npublic class CheckingAccount implements Account {\n    private double balance;\n\n    public CheckingAccount(double balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public void deposit(double amount) {\n        this.balance += amount;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        this.balance -= amount;\n    }\n}\n\npublic class AccountManager {\n    public static Account createAccount(String accountType, double balance) {\n        if (accountType.equalsIgnoreCase(\"savings\")) {\n            return new SavingsAccount(balance);\n        } else if (accountType.equalsIgnoreCase(\"checking\")) {\n            return new CheckingAccount(balance);\n        }\n        return null;\n    }\n}\nYou can then use these classes as follows:\nPerson john = new Person(\"John\", \"Doe\");\nAccount savingsAccount = AccountManager.createAccount(\"savings\", 100.00);\nAccount checkingAccount = AccountManager.createAccount(\"checking\", 50.00);\nThe AccountManager class uses the factory pattern to create Account objects based on the specified accountType. This allows you to create different types of accounts without having to specify the exact class to use, and makes it easier to add new types of accounts in the future.\n\n\n1.2 Base Classes: local storage-JSON\nHere is an example of what a Lombok-based Person class and Account class might look like in Java:\nimport lombok.Data;\n\n@Data\npublic class Person {\n  private String name;\n  private int age;\n  private String address;\n}\n\n@Data\npublic class Account {\n  private int accountNumber;\n  private double balance;\n  private Person owner;\n}\nThe @Data annotation is a **Lombok* annotation that automatically generates getters and setters for all non-static fields, as well as equals(), hashCode(), and toString() methods. This can help reduce boilerplate code and make your classes more concise and readable.\nTo save data to a local JSON file, you could use a JSON library like Jackson to convert the objects to JSON strings, and then write those strings to a file. Here is an example of how you might do that:\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class AccountManager {\n  private ObjectMapper objectMapper = new ObjectMapper();\n\n  public void saveAccount(Account account) throws JsonProcessingException {\n    String json = objectMapper.writeValueAsString(account);\n    // write the JSON string to a file\n  }\n}\nHow to save an object as a JSON string to a file on your local storage (in this case, c:/data/accounts.json) using Java SE:\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class AccountManager {\n  private ObjectMapper objectMapper = new ObjectMapper();\n\n  public void saveAccount(Account account) throws JsonProcessingException, IOException {\n    String json = objectMapper.writeValueAsString(account);\n\n    FileWriter fileWriter = new FileWriter(\"c:/data/accounts.json\");\n    fileWriter.write(json);\n    fileWriter.close();\n  }\n}",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON"
    ]
  },
  {
    "objectID": "javase/selab1-2.html#step-by-step",
    "href": "javase/selab1-2.html#step-by-step",
    "title": "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON",
    "section": "2 Step-by-step",
    "text": "2 Step-by-step\n\nCreate interface Account\nCreate subclasses SavingsAccount and CheckingAccount\nCreate AccountManger\nCheck factory\nParse Account objects to String-JSON\nSave String on local .json file",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE01-2: Maven/Gradle Person and Account stored in JSON"
    ]
  },
  {
    "objectID": "javase/se-principles-encapsulation.html",
    "href": "javase/se-principles-encapsulation.html",
    "title": "Java SE: Encapsulation",
    "section": "",
    "text": "📘 Encapsulation\nEncapsulation is the process of wrapping data and methods that operate on that data into a single unit. In other words, it is the process of hiding the implementation details of an object from the outside world.\nIn Java, encapsulation is achieved through the use of access modifiers like private, public, and protected.\n\n\nEncapsulation is the process of grouping functions and data into a single entity. To access these data members, the member function’s scope must be set to public, while the data members’ scope must be set to private.\nAccording to this theory, an item contains all important information; only a small subset is made available to the outside world. Each object has a private class that contains its implementation and state.\n\n\n\nJava SE Basic Principles OOP Encapsulation\n\n\nHere is an example of encapsulation in Java:\npublic class Account {\n    // Private instance variables\n    private double balance;\n\n    // Public methods\n    public void deposit(double amount) {\n        // Code for depositing money\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        // Code for withdrawing money\n        balance -= amount;\n    }\n\n    public void checkBalance() {\n        // Code for checking account balance\n        System.out.println(\"Current balance: \" + balance);\n    }\n}\n\nIn this example, the Account class has private instance variables and public methods. The balance variable is private, which means that it can only be accessed within the Account class. The deposit(), withdraw(), and checkBalance() methods are public, which means that they can be called from outside the Account class. This ensures that the implementation details of the Account class are hidden from the outside world.",
    "crumbs": [
      "Java Principles",
      "Java SE: Encapsulation"
    ]
  },
  {
    "objectID": "javase/se-principles-encapsulation.html#overview",
    "href": "javase/se-principles-encapsulation.html#overview",
    "title": "Java SE: Encapsulation",
    "section": "",
    "text": "📘 Encapsulation\nEncapsulation is the process of wrapping data and methods that operate on that data into a single unit. In other words, it is the process of hiding the implementation details of an object from the outside world.\nIn Java, encapsulation is achieved through the use of access modifiers like private, public, and protected.\n\n\nEncapsulation is the process of grouping functions and data into a single entity. To access these data members, the member function’s scope must be set to public, while the data members’ scope must be set to private.\nAccording to this theory, an item contains all important information; only a small subset is made available to the outside world. Each object has a private class that contains its implementation and state.\n\n\n\nJava SE Basic Principles OOP Encapsulation\n\n\nHere is an example of encapsulation in Java:\npublic class Account {\n    // Private instance variables\n    private double balance;\n\n    // Public methods\n    public void deposit(double amount) {\n        // Code for depositing money\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        // Code for withdrawing money\n        balance -= amount;\n    }\n\n    public void checkBalance() {\n        // Code for checking account balance\n        System.out.println(\"Current balance: \" + balance);\n    }\n}\n\nIn this example, the Account class has private instance variables and public methods. The balance variable is private, which means that it can only be accessed within the Account class. The deposit(), withdraw(), and checkBalance() methods are public, which means that they can be called from outside the Account class. This ensures that the implementation details of the Account class are hidden from the outside world.",
    "crumbs": [
      "Java Principles",
      "Java SE: Encapsulation"
    ]
  },
  {
    "objectID": "javase/se-pattern-intro.html",
    "href": "javase/se-pattern-intro.html",
    "title": "Java Patterns: Types",
    "section": "",
    "text": "📘 Design-patterns\nIn Java, a design pattern is a general repeatable solution to a commonly occurring problem in software design.\nA design pattern is not a finished design that can be transformed directly into code, but rather it is a description or template that can be used to solve a problem that is commonly encountered in software development.",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: Types"
    ]
  },
  {
    "objectID": "javase/se-pattern-intro.html#overview",
    "href": "javase/se-pattern-intro.html#overview",
    "title": "Java Patterns: Types",
    "section": "",
    "text": "📘 Design-patterns\nIn Java, a design pattern is a general repeatable solution to a commonly occurring problem in software design.\nA design pattern is not a finished design that can be transformed directly into code, but rather it is a description or template that can be used to solve a problem that is commonly encountered in software development.",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: Types"
    ]
  },
  {
    "objectID": "javase/se-pattern-intro.html#design-patterns",
    "href": "javase/se-pattern-intro.html#design-patterns",
    "title": "Java Patterns: Types",
    "section": "2 Design Patterns",
    "text": "2 Design Patterns\nThere are many different design patterns that have been identified and documented, and each pattern provides a different solution to a specific problem.\nSome of the most important design patterns in Java include:\n\nthe singleton,\nthe factory,\nthe abstract factory\nthe observer,\nand the builder.\n\nThese patterns are commonly used in Java because they provide solutions to common problems that are encountered in software development, and they can help to make your code more efficient, reusable, and maintainable.\n\n\n\n\n\n\nPatterns are NOT a gurantee\n\n\n\nDesign patterns do not guarantee an absolute solution to a problem.\nThey provide clarity to the system architecture and the possibility of building a better system.",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: Types"
    ]
  },
  {
    "objectID": "javase/se-pattern-intro.html#design-pattern-classification",
    "href": "javase/se-pattern-intro.html#design-pattern-classification",
    "title": "Java Patterns: Types",
    "section": "3 Design Pattern Classification",
    "text": "3 Design Pattern Classification\nWe have 3 main types of Design Patterns:\n\n3.1 Creational\nIt deals with the creation of objects and classes. They provide a way to create objects while hiding the complexity of the actual creation process. Some creational design patterns are:\n\nSingleton\nFactory\nAbstract Factory\nBuilder\n\n\n\n3.2 Structural\nIt deals with object composition. They provide a way to compose objects and classes in a way that is flexible and efficient. Some structural design patterns are:\n\nFacade\nBridge\nDecorator\nComposite\n\n\n\n3.3 Behavioral\nIt deals with communication between objects and classes. They provide a way to define the communication between objects in a way that is decoupled from the actual objects that are communicating. Some examples of behavioural patterns are:\n\nObserver\nStrategy\nState\nCommander",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: Types"
    ]
  },
  {
    "objectID": "javase/se-pattern-intro.html#advantage-of-design-patterns",
    "href": "javase/se-pattern-intro.html#advantage-of-design-patterns",
    "title": "Java Patterns: Types",
    "section": "4 Advantage of design patterns",
    "text": "4 Advantage of design patterns\n\nThey are reusable in multiple projects.\nThey provide the solutions that help to define the system architecture.\nThey capture the software engineering experiences.\nThey provide transparency to the design of an application.\nThey are well-proved and testified solutions since they have been built upon the knowledge and experience of expert software developers.\n\n\n\n\n\n\n\nWhen should we use the design patterns?\n\n\n\nWe must use the design patterns during the analysis and requirement phase of SDLC(Software Development Life Cycle).\nDesign patterns ease the analysis and requirement phase of SDLC by providing information based on prior hands-on experiences.",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: Types"
    ]
  },
  {
    "objectID": "javase/se-pattern-intro.html#design-patterns-cheat-sheet",
    "href": "javase/se-pattern-intro.html#design-patterns-cheat-sheet",
    "title": "Java Patterns: Types",
    "section": "5 Design Patterns Cheat-sheet",
    "text": "5 Design Patterns Cheat-sheet\n\n\n\nDesign Patterns Cheat-sheet",
    "crumbs": [
      "Java Design Patterns",
      "Java Patterns: Types"
    ]
  },
  {
    "objectID": "javase/selab3-1.html",
    "href": "javase/selab3-1.html",
    "title": "Lab#SE03-1: Library/Book, Core-Model",
    "section": "",
    "text": "📘 Linux Lab#SE03-1: Library/Book\n\nCreate a Maven/Gradle Java SE Project.\n\nAnd from Lab SE#00-3 use the relationship between User and Book.\n\nAdd the needed dependencies:\n\nLombok\nJunit\nJava Faker\n\nCreate three Java classes to define the Model. Java SE Classes:\n\nPerson: User, Worker, Staf, Freelancer, Author\nPublication: Book, BooItem, Multimedia, MultimediaItem\n\nWith Junit dependency create unitary test to test objects and operations, and then integration tests.\nFrom here you should add new features once all the test are passed.\n\nOperations, you could think in a Manager Class o similar\nNew fields/attributes and new classes\nNew compositions and inherence: expand your model\nUse Factory design pattern to create new objects",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-1: Library/Book, Core-Model"
    ]
  },
  {
    "objectID": "javase/selab3-1.html#core-classes-and-dependencies",
    "href": "javase/selab3-1.html#core-classes-and-dependencies",
    "title": "Lab#SE03-1: Library/Book, Core-Model",
    "section": "1 Core classes and dependencies",
    "text": "1 Core classes and dependencies\nYou could then use these classes as follows:\n\n\nmoviemodel.java\n\nimport lombok.Data;\n\n@Data\nclass Person {\n    private String name;\n    private int age;\n}\n\nclass User extends Person {\n    private String username;\n    private String password;\n}\n\nclass Staff extends Person {\n    private String department;\n}\n\nclass Freelancer extends Person {\n    private String skills;\n}\n\ninterface Publication {\n    void publish();\n}\n\nclass Author extends Person {\n    private String authorName;\n}\n\ninterface Publication {\n    void publish();\n}\n\nclass Book implements Publication {\n    private String title;\n    private int pages;\n    private Author author;\n\n    @Override\n    public void publish() {\n        System.out.println(\"Publishing book: \" + title);\n    }\n}\n\nclass BookItem extends Book {\n    private int ISBN;\n}\n\nclass Multimedia extends Publication {\n    private String title;\n    private String format;\n}\n\nclass MultimediaItem extends Multimedia {\n    private int itemId;\n}\n\n\n1.1 Dependency: Lombok\nUse Lombok, link:\n\nThe @Data annotation is a Lombok annotation that generates getters and setters for the fields of a class, as well as equals, hashCode, and toString methods based on the fields.\nThe @AllArgsConstructor annotation is a Lombok annotation that generates a constructor with all of the class’s fields as arguments.\nThe @NoArgsConstructor annotation is a Lombok annotation that generates a no-argument constructor for a class.\n\n@Data All together now: A shortcut for @ToString, @EqualsAndHashCode, @Getter on all fields, @Setter on all non-final fields, and @RequiredArgsConstructor.\nAdding lombok to your pom file: to include lombok as a provided dependency, add it to your In your Java code: block like so:\n\n\npom.xml\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n        &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;version&gt;1.18.24&lt;/version&gt;\n        &lt;scope&gt;provided&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\n\n\n1.2 Dependency: Java Faker\nUse Java Faker:\nIn pom.xml, add the following xml dependency between  … \n\n\npom.xml\n\n&lt;dependencies&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;com.github.javafaker&lt;/groupId&gt;\n      &lt;artifactId&gt;javafaker&lt;/artifactId&gt;\n      &lt;version&gt;1.0.2&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n\nIn your Java code:\n\n\ntestfaker.java\n\nimport com.github.javafaker.Faker;\nimport org.junit.jupiter.api.Test;\n\nFaker faker = new Faker();\n\nString name = faker.name().fullName(); // Miss Samanta Schmidt\nString firstName = faker.name().firstName(); // Emory\nString lastName = faker.name().lastName(); // Barton\n\nString streetAddress = faker.address().streetAddress(); // 60018 Sawayn Brooks Suite 449\n\n\n\n1.3 Dependency: JUnit 5\nTo configure support for JUnit Jupiter based tests, configure test scoped dependencies on the JUnit Jupiter API and the JUnit Jupiter TestEngine implementation similar to the following.\nmore on Java SE TDD\n\n\npom.xml\n\n&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n      &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n      &lt;version&gt;5.9.1&lt;/version&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-1: Library/Book, Core-Model"
    ]
  },
  {
    "objectID": "javase/selab3-1.html#solving-discussion-umls",
    "href": "javase/selab3-1.html#solving-discussion-umls",
    "title": "Lab#SE03-1: Library/Book, Core-Model",
    "section": "2 Solving discussion: UMLs",
    "text": "2 Solving discussion: UMLs\n\n2.1 Core features: borrow and issue\n\n\n\n\n\n\nclassDiagram\n\nclass Publication {\n  -title: String\n  -year: int\n  -author: String\n  -statusPublication: enum\n}\n\nclass Borrow {\n    +fromDate\n    +toDate\n    +borrowStatus\n}\n\nclass Issue {\n    +publishDate\n    +unpublishDate\n    +manageDate\n    -issueStatus\n}\n\nclass Member {\n    -idMember: String\n    +checkOutPublication()\n    +returnPublication()\n    +holdOnPublication()\n}\n\nclass Librarian {\n    -idLibrarian\n    +addPublication()\n    +removePublication()\n    +holdPublication()\n  \n}\n\nclass Person {\n    -name: String\n    -surname: String\n    -address: String\n    -age:int\n    +getPublications()\n}\n\nPerson --&gt; Member\nPerson --&gt; Librarian\nMember --&gt; Borrow\nBorrow --&gt; Publication\nLibrarian --&gt; Issue\nIssue --&gt; Publication\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n2.2 Core features: publications and books\n\n\n\n\n\n\nclassDiagram\n\nclass Person {\n    -name: String\n    -dob: date\n    -id: String\n}\nclass Author {\n    -authorName: String\n}\n\n\nclass Publication {\n    &lt;&lt;interface&gt;&gt;\n    +publish()\n}\n\n\nclass Book {\n    -title: String\n    -pages: int\n    -author: Author\n}\n\nclass BookItem {\n    -ISBN: int\n}\n\nclass Multimedia {\n    -title: String\n    -format: String\n}\n\nclass MultimediaItem {\n    -itemId: int\n}\n\n\nPerson --&gt; Author\nBook *-- Author\nMultimedia *-- Author\nPublication --&gt; Book\nPublication --&gt; Multimedia\nBook --&gt; BookItem\nMultimedia --&gt; MultimediaItem\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n2.3 Core features: user and librarian (staf)\n\n\n\n\n\n\nclassDiagram\nclass Person {\n    -name: String\n    -dob: date\n    -id: String\n}\n\nclass User {\n    -username: String\n    -password: String\n}\n\nclass Worker {\n    -basePayment: double\n}\n\nclass Staff {\n    -department: String\n    -category: String\n    -salary: double\n}\n\nclass Librarian {\n    -idLibrarian\n    +addPublication()\n    +removePublication()\n    +holdPublication()\n  \n}\n\nclass Freelancer {\n    -skills: String\n    -variablePayment: double\n}\n\nclass Author {\n    -authorName: String\n}\n\n\nPerson --&gt; User\nPerson --&gt; Worker\nWorker --&gt; Staff\nStaff --&gt; Librarian\nWorker --&gt; Freelancer\nPerson --&gt; Author\nBook *-- Author\nMultimedia *-- Author\n\n\n\n\n\n\n\n\n\n2.4 Core features\n\n\n\n\n\n\n\nclassDiagram\nclass Person {\n    -name: String\n    -dob: date\n    -id: String\n}\n\nclass User {\n    -username: String\n    -password: String\n}\n\nclass Worker {\n    -basePayment: double\n}\n\nclass Staff {\n    -department: String\n    -category: String\n    -salary: double\n}\n\nclass Freelancer {\n    -skills: String\n    -variablePayment: double\n}\n\nclass Author {\n    -authorName: String\n}\n\nclass Librarian {\n    -idLibrarian\n    +addPublication()\n    +removePublication()\n    +holdPublication()\n  \n}\n\nclass Publication {\n    &lt;&lt;interface&gt;&gt;\n    +publish()\n}\n\n\nclass Book {\n    -title: String\n    -pages: int\n    -author: Author\n}\n\nclass BookItem {\n    -ISBN: int\n}\n\nclass Multimedia {\n    -title: String\n    -format: String\n}\n\nclass MultimediaItem {\n    -itemId: int\n}\n\nclass Borrow {\n    +fromDate\n    +toDate\n    +borrowStatus\n}\n\nclass Issue {\n    +publishDate\n    +unpublishDate\n    +manageDate\n    -issueStatus\n}\n\nUser --&gt; Borrow\nBorrow --&gt; Publication\nLibrarian --&gt; Issue\nIssue --&gt; Publication\n\nPerson --&gt; User\nPerson --&gt; Worker\nWorker --&gt; Staff\nStaff --&gt; Librarian\nWorker --&gt; Freelancer\nPerson --&gt; Author\n\nBook *-- Author\nMultimedia *-- Author\nPublication --&gt; Book\nPublication --&gt; Multimedia\nBook --&gt; BookItem\nMultimedia --&gt; MultimediaItem",
    "crumbs": [
      "Java SE Laboratories",
      "Lab#SE03-1: Library/Book, Core-Model"
    ]
  },
  {
    "objectID": "devops/devops-network-websocket.html",
    "href": "devops/devops-network-websocket.html",
    "title": "Network: Websocket",
    "section": "",
    "text": "WebSockets is a communication protocol that enables real-time, bidirectional communication between a client (usually a web browser) and a server. It provides a persistent connection that allows for efficient data exchange without the need for repeated HTTP requests.\nWebSockets are particularly useful for applications that require instant updates, such as real-time chat applications, collaborative editing tools, and live data streaming.\nIn React, you can leverage the power of WebSockets by using libraries like Socket.IO or the native WebSocket API. These libraries enable you to establish a WebSocket connection, send and receive messages, and handle events for seamless real-time communication in your React applications.",
    "crumbs": [
      "Network protocols",
      "Network: Websocket"
    ]
  },
  {
    "objectID": "devops/devops-network-websocket.html#instance-methods",
    "href": "devops/devops-network-websocket.html#instance-methods",
    "title": "Network: Websocket",
    "section": "4.1 Instance methods",
    "text": "4.1 Instance methods\nWebSocket.close(): Closes the connection.\nWebSocket.send(): Enqueues data to be transmitted.",
    "crumbs": [
      "Network protocols",
      "Network: Websocket"
    ]
  },
  {
    "objectID": "devops/devops-network-websocket.html#events",
    "href": "devops/devops-network-websocket.html#events",
    "title": "Network: Websocket",
    "section": "4.2 Events",
    "text": "4.2 Events\nListen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.\nclose: Fired when a connection with a WebSocket is closed. Also available via the onclose property\nerror: Fired when a connection with a WebSocket has been closed because of an error, such as when some data couldn’t be sent. Also available via the onerror property.\nmessage: Fired when data is received through a WebSocket. Also available via the onmessage property.\nopen: Fired when a connection with a WebSocket is opened. Also available via the onopen property.",
    "crumbs": [
      "Network protocols",
      "Network: Websocket"
    ]
  },
  {
    "objectID": "devops/devops-network-websocket.html#example-websocket-client-react",
    "href": "devops/devops-network-websocket.html#example-websocket-client-react",
    "title": "Network: Websocket",
    "section": "4.3 Example: Websocket client React",
    "text": "4.3 Example: Websocket client React\n// Creates new WebSocket object with a wss URI as the parameter\nconst socket = new WebSocket('wss://game.example.com/ws/updates');\n\n// Fired when a connection with a WebSocket is opened\nsocket.onopen = function () {\n  setInterval(function() {\n    if (socket.bufferedAmount == 0)\n      socket.send(getUpdateData());\n  }, 50);\n};\n\n// Fired when data is received through a WebSocket\nsocket.onmessage = function(event) {\n  handleUpdateData(event.data);\n};\n\n// Fired when a connection with a WebSocket is closed\nsocket.onclose = function(event) {\n  onSocketClose(event);\n};\n\n// Fired when a connection with a WebSocket has been closed because of an error\nsocket.onerror = function(event) {\n  onSocketError(event);\n};",
    "crumbs": [
      "Network protocols",
      "Network: Websocket"
    ]
  },
  {
    "objectID": "devops/devops-tools-ansible.html",
    "href": "devops/devops-tools-ansible.html",
    "title": "Ansible",
    "section": "",
    "text": "📘 What is Ansible\nOne of devOps most popular tools is Ansible.\nIt allows managers to solve similar problems without going through them again and again.\nIt automates the entire process, by providing repetitive solutions to repetitive problems and conserving both time and energy. It is an open-source tool that targets to increase productivity.\n\n\n1 Overview\nAutomation for everyone.\nNo matter your role, or what your automation goals are, Ansible can help you demonstrate value, connect teams, and deliver efficiencies for your organization.\nBuilt on open source, Red Hat Ansible Automation Platform is a hardened, tested subscription product that offers full life cycle support for organizations.\n\n\n2 Why Ansible is so popular\nAnsible is a popular choice among DevOps professionals due to several factors.\nFirstly, it offers an intuitive and agentless approach to configuration management, making it easy to automate tasks across servers.\n\n\nAnsible’s combination of simplicity, flexibility, automation, and robust features contributes to its popularity among DevOps professionals.\nSecondly, Ansible’s simple YAML-based syntax allows for easy understanding and maintenance of playbooks, making it accessible to both beginners and experienced users.\nAdditionally, Ansible’s idempotent nature ensures that running the same playbook multiple times produces the same result, reducing the risk of configuration drift. The platform also provides a wide range of modules for managing various aspects of IT infrastructure, including package management, file manipulation, service management, and cloud provisioning. Its active community and extensive documentation further support developers in troubleshooting and learning.\nMoreover, Ansible’s agentless architecture eliminates the need for installing and managing software on managed nodes, simplifying deployment and reducing overhead.\nLastly, its ability to integrate with existing tools and infrastructure, along with its support for role-based organization, enhances its flexibility and scalability.\n\n\n3 References\n\nAnsible Certification Training\nAutomation for everyone\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps tools",
      "Ansible"
    ]
  },
  {
    "objectID": "devops/devops-vc-git.html",
    "href": "devops/devops-vc-git.html",
    "title": "Git",
    "section": "",
    "text": "Git logo",
    "crumbs": [
      "Version Control",
      "Git"
    ]
  },
  {
    "objectID": "devops/devops-vc-git.html#what-is-git",
    "href": "devops/devops-vc-git.html#what-is-git",
    "title": "Git",
    "section": "1 What is Git",
    "text": "1 What is Git\n\nwhat? git is a version control system (The git official repo)\nfor what? git is used for source code management\n\nhow? commits are snapshots, not diffs! (The Git Object Model) and (Git Internals - Git Objects)\nwhere? git is a key-value store (Key Value Store Concept)\n\n\n\n\n\n\n\nLinux Torwalds\n\n\n\nIn many ways you can just see git as a filesystem—it’s content-addressable, and it has a notion of versioning, but I really designed it coming at the problem from the viewpoint of a filesystem person (hey, kernels is what I do), and I actually have absolutely zero interest in creating a traditional SCM system.\n\n\n\n📘 Git Git is a version control system (also called a source control system) that allows programmers and other people working with text files to coordinate changes while working independently.\nGit also supports binary assets such as pictures, but those formats don’t support the line-by-line version management that makes version control really powerful.",
    "crumbs": [
      "Version Control",
      "Git"
    ]
  },
  {
    "objectID": "devops/devops-vc-git.html#key-ideas",
    "href": "devops/devops-vc-git.html#key-ideas",
    "title": "Git",
    "section": "2 Key-ideas",
    "text": "2 Key-ideas\n\nGit stores unique content and no duplicates\nEach key-value pair entry contains a unique hash as a key: SHA-ID.\nThere are only three types of values:\n\nblobs for files\ntree for directories\ncommit for commit messages\n\n commit message\nauthor, including a timestamp\ncommitter, including a timestamp\nreference to parent commit\n\n\n\nmore info on",
    "crumbs": [
      "Version Control",
      "Git"
    ]
  },
  {
    "objectID": "devops/devops-vc-git.html#git-is-immutable",
    "href": "devops/devops-vc-git.html#git-is-immutable",
    "title": "Git",
    "section": "3 git is immutable",
    "text": "3 git is immutable\n\n\n\nIn short, immutable means: unchanging over time or unable to change\n\n\n\nImmutable object In object-oriented and functional programming, an immutable object is an object whose state cannot be modified after it is created. This is in contrast to a mutable object, which can be modified after it is created (from Wikipedia).\n\n\n\n\nCommits can never be tampered with or modified once they are created!\n\n\nSo, what does immutable snapshots refer to? In Git, all commits are immutable snapshots of your project (ignored files excluded) at a specific point in time.\nThis means that each and every commit contains a unique representation of your entire project, not just the modified or added files (deltas), at the time the commit was created. Apart from the actual files, each commit is also infused with relevant metadata; all of which is immutable!\ncheck oot this article for more info about immutability",
    "crumbs": [
      "Version Control",
      "Git"
    ]
  },
  {
    "objectID": "devops/devops-vc-git.html#install-git-linux",
    "href": "devops/devops-vc-git.html#install-git-linux",
    "title": "Git",
    "section": "4 Install git linux",
    "text": "4 Install git linux\nDebian / Ubuntu / Mint apt-get\nGit packages are available via apt, go to terminal and from your shell, install Git using apt-get:\n$ sudo apt-get update\n$ sudo apt-get install git\nVerify the installation was successful by typing git –version:\n$ git --version\ngit version 2.9.2\nConfigure your Git username and email using the following commands, replacing Emma’s name with your own. These details will be associated with any commits that you create:\n$ git config --global user.name \"Emma Paris\"\n$ git config --global user.email \"eparis@atlassian.com\"",
    "crumbs": [
      "Version Control",
      "Git"
    ]
  },
  {
    "objectID": "devops/devops-vc-git.html#git-use",
    "href": "devops/devops-vc-git.html#git-use",
    "title": "Git",
    "section": "5 Git use",
    "text": "5 Git use\n\n\n\nDiagram showing some common Git operations by Daniel Kinzler wikicommons\n\n\n\ngit init: creates or converts an existing into a new Git repository.\ngit pull: fetches remote changes into the local clone, and merges them into the current working files.\ngit checkout: replaces the current working files with files from a branch.\ngit checkout --track: creates a local branch from a remote branch, links them, and replaces the current working files with files from that branch.\ngit fetch: downloads changes from a remote repository into the local clone\ngit reset: makes the current branch point to some specific revision or branch.\ngit reset --hard: makes the current branch point to some specific revision or branch, and replaces the current working files with the files from that branch.\ngit merge: merges files from a given branch into the current branch.\ngit push: uploads changes from local branches to the respective remote repositories.\ngit add: puts current working files into the stage (aka index or cache)\ngit commit: commits staged changes to a local branch\ngit commit -a: commits all modified files to a local branch (shorthand for “git add” and “git commit”)",
    "crumbs": [
      "Version Control",
      "Git"
    ]
  },
  {
    "objectID": "devops/devops-vc-git.html#git-cheat-sheet",
    "href": "devops/devops-vc-git.html#git-cheat-sheet",
    "title": "Git",
    "section": "6 Git cheat-sheet",
    "text": "6 Git cheat-sheet\nGit-cheat-sheet-Red-Hat-Developer\nDownload Git Cheat-sheet Altassian\n\n\n\nGit Cheat-sheet",
    "crumbs": [
      "Version Control",
      "Git"
    ]
  },
  {
    "objectID": "devops/devops-tools-digitalocean.html",
    "href": "devops/devops-tools-digitalocean.html",
    "title": "Digital Ocean",
    "section": "",
    "text": "📘 What is Digital Ocean\nA simple and scalable cloud platform for all developer needs:\n\nHost websites with the simplest cloud hosting platform\nBuild web apps or API backends on robust infrastructure\nDeploy container based apps with managed Kubernetes\nSpeed up development with intuitive API, developer tools and CI/CD add-ons\nlearn the basics of cloud computing\n\n\n\n1 Overview\nDigitalOcean is a popular choice among DevOps professionals due to several factors.\nFirstly, it offers an intuitive user interface and straightforward setup process, making it accessible even to those with limited infrastructure knowledge.\nSecondly, its scalability allows developers to easily adjust resources to meet their application’s demands without cumbersome hardware management. Additionally, DigitalOcean’s competitive pricing and transparent billing make it appealing to startups and small businesses.\nThe platform also provides a plethora of developer-centric features such as pre-configured droplets, managed databases, Kubernetes clusters, and object storage. Its active community and extensive documentation further support developers in troubleshooting and learning.\nMoreover, DigitalOcean’s infrastructure is renowned for its performance and reliability, with strategically located data centers ensuring low latency and high availability.\nLastly, its integration with popular DevOps tools and provision of APIs facilitate automation and seamless integration into existing workflows. Overall, DigitalOcean’s combination of simplicity, scalability, affordability, and developer-centric features contributes to its popularity among DevOps professionals.\n\n\n2 Digital Ocean k8s\n\nDigitalOcean Kubernetes (DOKS) is a managed Kubernetes service that lets you deploy Kubernetes clusters without the complexities of handling the control plane and containerized infrastructure.\nClusters are compatible with standard Kubernetes toolchains and integrate natively with DigitalOcean Load Balancers and block storage volumes.\n\n\n3 References\n\nDigital Ocean k8s\nDream it. Build it. Grow it.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps tools",
      "Digital Ocean"
    ]
  },
  {
    "objectID": "devops/devops-network-webhook.html",
    "href": "devops/devops-network-webhook.html",
    "title": "Network: webhook",
    "section": "",
    "text": "1 What is a webhook?\nA webhook is a mechanism for automating the delivery of real-time data from one application to another. It allows applications to communicate with each other by sending HTTP POST requests containing data payloads to a specified URL. Webhooks are commonly used to enable event-driven architectures, where actions in one system trigger responses in another.\nKey characteristics of webhooks include:\n\nEvent-Driven: Webhooks are triggered by specific events or updates in an originating system. When the predefined event occurs, a POST request containing relevant data is sent to the configured webhook URL.\nHTTP Callbacks: Webhooks rely on HTTP callbacks to deliver data. The receiving system, often referred to as the webhook endpoint, listens for incoming HTTP POST requests and processes the data payload.\nAsynchronous: Webhooks facilitate asynchronous communication between applications. The sender of the webhook doesn’t wait for a response; it simply sends the data and continues its operations.\nConfigurability: Users can configure webhooks to respond to specific events of interest. This flexibility allows for the customization of integrations between different services.\n\nConsider a scenario where a webhook is used in an e-commerce application. A webhook could be set up to notify an inventory management system whenever a new order is placed. The e-commerce application triggers the webhook by sending a POST request to the specified URL with details about the new order, such as product information and customer details.\nWebhook Example:\nWhen a new order is placed:\n\nWebhook URL: https://example.com/webhook/inventory\nHTTP Method: POST\nPayload:\n{\n  \"event\": \"new_order\",\n  \"order_id\": \"12345\",\n  \"products\": [\n    {\n      \"id\": \"A001\",\n      \"name\": \"Product A\",\n      \"quantity\": 2\n    },\n    {\n      \"id\": \"B002\",\n      \"name\": \"Product B\",\n      \"quantity\": 1\n    }\n  ],\n  \"customer\": {\n    \"id\": \"C567\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n  }\n}\nIn this example, the inventory management system, listening at the specified webhook URL, receives the data payload and processes it to update the inventory based on the new order.\n\n\n\n2 Webhook & polling\n\nAssume we run an eCommerce website. The clients send orders to the order service via the API gateway, which goes to the payment service for payment transactions. The payment service then talks to an external payment service provider (PSP) to complete the transactions.\nThere are two ways to handle communications with the external PSP.\n\nShort polling After sending the payment request to the PSP, the payment service keeps asking the PSP about the payment status. After several rounds, the PSP finally returns with the status.\n\nShort polling has two drawbacks:\n\nConstant polling of the status requires resources from the payment service.\nThe External service communicates directly with the payment service, creating security vulnerabilities.\n\n\nWebhook We can register a webhook with the external service. It means: call me back at a certain URL when you have updates on the request. When the PSP has completed the processing, it will invoke the HTTP request to update the payment status.\n\nIn this way, the programming paradigm is changed, and the payment service doesn’t need to waste resources to poll the payment status anymore.\nWhat if the PSP never calls back? We can set up a housekeeping job to check payment status every hour.\nWebhooks are often referred to as reverse APIs or push APIs because the server sends HTTP requests to the client. We need to pay attention to 3 things when using a webhook:\n\nWe need to design a proper API for the external service to call.\nWe need to set up proper rules in the API gateway for security reasons.\nWe need to register the correct URL at the external service.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Network protocols",
      "Network: webhook"
    ]
  },
  {
    "objectID": "devops/devops-vc-ideagithub.html",
    "href": "devops/devops-vc-ideagithub.html",
    "title": "Idea and GitHub 2023",
    "section": "",
    "text": "In the fast-paced world of software development, collaborating with remote teams and utilizing version control systems like GitHub has become an indispensable part of the process of software devolopment.\n\nConnecting your local IntelliJ IDEA, a popular integrated development environment (IDE), with a remote repository on GitHub is a fundamental skill for developers looking to streamline their workflow and contribute to open-source projects or work with distributed teams.",
    "crumbs": [
      "Version Control",
      "Idea and GitHub 2023"
    ]
  },
  {
    "objectID": "devops/devops-vc-ideagithub.html#overview-how-to-connect-local-inteljidea-with-remote-repository-on-github",
    "href": "devops/devops-vc-ideagithub.html#overview-how-to-connect-local-inteljidea-with-remote-repository-on-github",
    "title": "Idea and GitHub 2023",
    "section": "",
    "text": "In the fast-paced world of software development, collaborating with remote teams and utilizing version control systems like GitHub has become an indispensable part of the process of software devolopment.\n\nConnecting your local IntelliJ IDEA, a popular integrated development environment (IDE), with a remote repository on GitHub is a fundamental skill for developers looking to streamline their workflow and contribute to open-source projects or work with distributed teams.",
    "crumbs": [
      "Version Control",
      "Idea and GitHub 2023"
    ]
  },
  {
    "objectID": "devops/devops-vc-ideagithub.html#set-up-tools",
    "href": "devops/devops-vc-ideagithub.html#set-up-tools",
    "title": "Idea and GitHub 2023",
    "section": "2 Set up tools",
    "text": "2 Set up tools\n\nGitHub account\nInstall IntellJIdea local\nInstall gitlocal\nPermssion IntellJIdea to write GitHub\nCLI gh",
    "crumbs": [
      "Version Control",
      "Idea and GitHub 2023"
    ]
  },
  {
    "objectID": "devops/devops-vc-ideagithub.html#create-localremote-repos-and-first-commitpush",
    "href": "devops/devops-vc-ideagithub.html#create-localremote-repos-and-first-commitpush",
    "title": "Idea and GitHub 2023",
    "section": "3 Create local/remote repos and first commit/push",
    "text": "3 Create local/remote repos and first commit/push\nOpen Idea IDE and an empty project\n\nCreate a new file\n\nFile created\n\nCreate a local repository with the visual tool Idea git\n\nA local repository created by the visual tool “Idea git” (or IntelliJ IDEA’s built-in Git integration) refers to a version control system repository that exists on your local development machine within the IntelliJ IDEA IDE.\nIt is a dedicated space where you can store and manage your project’s source code, track changes, and work on your codebase while benefiting from Git’s version control capabilities.\nHere are some key features and attributes of a local repository created by the Idea Git tool:\n\nVersion Control: The local repository allows you to track changes made to your project’s source code over time. You can create commits to record modifications, revert to previous states, and manage your project’s history effectively.\nIsolation: It’s a self-contained workspace where you can work on your project independently without affecting the code in the remote repository or the work of other collaborators.\nBranching: Local repositories support the creation and management of branches. You can develop new features or fix issues in separate branches without altering the main codebase.\nCommit History: Idea Git provides a visual representation of your commit history, making it easy to see the changes made to your project and who made them. This is crucial for tracking progress and debugging.\nConflict Resolution: If you’re collaborating with others, you can resolve merge conflicts within the local repository before pushing changes to the remote repository. Idea Git offers tools to help with conflict resolution.\nOffline Work: You can continue working on your project and making commits even when you don’t have an internet connection. Once you’re online, you can synchronize your local repository with the remote one.\nSecurity and Backup: Your code is stored securely on your local machine. You can back it up independently from the remote repository, ensuring data safety.\n\nIn summary, a local repository created by the visual tool Idea Git in IntelliJ IDEA serves as a critical component in the Git workflow. It allows you to manage your codebase efficiently, experiment with new features, and collaborate with a level of control and isolation that is essential for software development. When you’re satisfied with your changes and ready to share them with others, you can then push your commits to the remote repository on platforms like GitHub, GitLab, or Bitbucket.\nLocal repository created\n\nCreate a remote repository on GitHub\n\nMake it public and save the URL https\n\nURL new remote repository on GitHub created:\n-https://github.com/AlbertProfe/gitIdea.git\n\nBe careful with unversioned files, all this information is in the Idea Commit Tool.\n\nChanges files are not the same as unversioned files\n\nWrite down the text for the first commit and the tool will ask you for a remote repository, created before!\n\nA “commit” in Git is like taking a snapshot of your code at a specific point in time. It records the changes you’ve made to your code, along with a message describing what those changes are. Each commit represents a discrete set of changes and creates a new point in your project’s history. Committing is a way to save your work and create a clear, organized timeline of your project’s development.\n\n\nWrite dwon (or copy-paste) the remote repository url\n\nNow you can push the commit to remote repository.\n\nOverall screen a all controls\n\nCommit pushed to remote repository\n\nLet’s chechk on github if the commit is threre:",
    "crumbs": [
      "Version Control",
      "Idea and GitHub 2023"
    ]
  },
  {
    "objectID": "devops/devops-vc-ideagithub.html#second-commitpush-and-beyond",
    "href": "devops/devops-vc-ideagithub.html#second-commitpush-and-beyond",
    "title": "Idea and GitHub 2023",
    "section": "4 Second commit/push and beyond",
    "text": "4 Second commit/push and beyond\nWrite second commit\n\nSelect the changes\n\nCommit and push\n\nPushed\n\nCheck out the commit on github\n\nWatch out the two commits",
    "crumbs": [
      "Version Control",
      "Idea and GitHub 2023"
    ]
  },
  {
    "objectID": "devops/devops-vc-ideagithub.html#manage-commits-intelljidea",
    "href": "devops/devops-vc-ideagithub.html#manage-commits-intelljidea",
    "title": "Idea and GitHub 2023",
    "section": "5 Manage commits IntellJIdea",
    "text": "5 Manage commits IntellJIdea\n\n\n5.0.1 1. Cherry-pick\nCherry-picking in Git allows you to apply a specific commit from one branch to another.\nUsage: git cherry-pick &lt;commit-hash&gt;\nThis is useful when you want to bring a specific change from one branch into your current branch without merging the entire branch.\n\n\n5.0.2 2. Create patch\nCreating a patch generates a file containing the changes introduced by a specific commit.\nUsage: git format-patch -1 &lt;commit-hash&gt;\nPatches are useful for sharing specific changes with others or applying changes to a different repository.\n\n\n5.0.3 3. Create tag\nTags in Git are references to specific points in Git history, typically used to mark release points.\nUsage: git tag -a &lt;tag-name&gt; -m \"Tag message\"\nTags provide an easy way to reference and checkout specific versions of your codebase.\n\n\n5.0.4 4. Revert commit\nReverting a commit creates a new commit that undoes the changes introduced by a specific commit.\nUsage: git revert &lt;commit-hash&gt;\nThis is useful when you want to undo changes that have already been pushed to a shared repository.\n\n\n5.0.5 5. Reset current branch\nResetting moves the current branch pointer to a specific commit, optionally modifying the staging area and working directory.\nUsage: git reset [--soft | --mixed | --hard] &lt;commit-hash&gt;\nThis command is used to undo local commits or change the state of your working directory.\n\n\n5.0.6 6. Copy revision number\nIn Git, each commit has a unique identifier called a hash or revision number.\nUsage: git rev-parse HEAD (to get the current commit hash)\nThe full hash ensures unambiguous identification of a commit.\n\n\n5.0.7 7. Copy commit message\nCommit messages provide a description of the changes introduced in a commit.\nUsage: git log -1 --pretty=%B (to get the last commit message)\nGood commit messages are crucial for understanding the history and purpose of changes in a project.\n\n\n5.0.8 8. Show commit details\nViewing commit details shows you the full information about a specific commit.\nUsage: git show &lt;commit-hash&gt;\nThis command displays the commit message, author information, date, and a diff of all changes introduced by the commit.\n\n\n5.0.9 9. Compare with current\nComparing allows you to see the differences between two states of your repository.\nUsage: git diff &lt;commit-hash&gt;\nThis is useful for understanding how your codebase has changed since a specific commit.\n\n\n5.0.10 10. Show history for selected\nViewing the history shows you the sequence of commits for a file or directory.\nUsage: git log -- &lt;file-path&gt;\nThis helps in tracking the evolution of a specific part of your project over time.\n\n\n5.0.11 11. Checkout revision\nChecking out a revision switches your working directory to the state it was in at a specific commit.\nUsage: git checkout &lt;commit-hash&gt;\nThis is useful for inspecting old versions of your code or starting a new branch from a historical point.\n\n\n5.0.12 12. Go to Child Commit\nMoving to a child commit means navigating to the next commit in the branch’s history.\nUsage: git log --reverse --ancestry-path &lt;commit-hash&gt;..HEAD | head -n 1\nThis helps in exploring how code changes evolved over time.\n\n\n5.0.13 13. Go to Parent Commit\nMoving to a parent commit means navigating to the previous commit in the history.\nUsage: git log --pretty=%P -n 1 &lt;commit-hash&gt;\nThis is useful for understanding the origin of certain code changes.\n\n\n5.0.14 14. Open in GitHub\nWhile not a Git command itself, many Git tools provide integration with GitHub, allowing you to quickly view a commit, file, or project on GitHub’s web interface.\nThis bridges the gap between local development and online code hosting, facilitating collaboration and code review.\n\n\n5.1 Manage commits (2024)\n\nCherry-pick: In 2024, IntelliJ IDEA enhanced its cherry-pick functionality with improved conflict resolution. The IDE now offers more intuitive visual diff tools for handling conflicts during cherry-picking. It also introduced the ability to cherry-pick multiple commits at once, streamlining the process of selectively applying changes from one branch to another. Additionally, IntelliJ IDEA now provides better integration with issue tracking systems, allowing developers to link cherry-picked commits to relevant issues or tasks automatically.\nCreate patch: By 2024, IntelliJ IDEA expanded its patch creation capabilities. The IDE now supports creating cumulative patches that include changes from multiple commits. It also introduced an option to create patches in various formats, including the unified diff format and Git’s own patch format. The patch creation dialog now includes a preview feature, allowing developers to review and refine the patch before saving it. IntelliJ IDEA also added the ability to directly email patches from within the IDE, facilitating easier code sharing and review processes.\nCreate tag: In 2024, IntelliJ IDEA’s tag creation feature became more robust. The IDE now offers templated tag messages, making it easier to maintain consistent tagging practices across a project. It also introduced the concept of “smart tags” that can automatically include relevant metadata such as build numbers or version information. The tag creation dialog now integrates with CI/CD pipelines, allowing developers to trigger specific workflows upon tag creation. Additionally, IntelliJ IDEA now supports signing tags with GPG keys directly from the IDE for enhanced security.\nRevert commit: By 2024, IntelliJ IDEA significantly improved its commit reversion process. The IDE now provides a more detailed preview of the revert operation, showing exactly which changes will be undone. It also introduced the ability to revert multiple commits in a single operation, with smart handling of potential conflicts. IntelliJ IDEA now offers the option to automatically create a new branch for the revert operation, helping to isolate the reverted changes. The IDE also improved its integration with code review tools, allowing developers to easily share and discuss reverted changes.\nReset current branch to here: In 2024, IntelliJ IDEA enhanced its branch reset functionality with additional safety features. The IDE now provides a comprehensive preview of the reset operation, clearly showing which commits will be affected and what will happen to the working directory. It introduced a “soft reset with backup” option, which creates a temporary branch with the discarded commits before performing the reset. IntelliJ IDEA also improved its explanation of the different reset modes (soft, mixed, hard), helping developers choose the appropriate option for their needs.\nCopy revision number: By 2024, IntelliJ IDEA expanded this feature to include more flexible copy options. In addition to copying the full SHA-1 hash, developers can now choose to copy shortened hashes of various lengths. The IDE also introduced the ability to copy the revision number in different formats, such as with a preceding “r” for some version control systems. IntelliJ IDEA now allows customizing the default copy behavior in the settings, catering to different team conventions or personal preferences.\nCopy commit message: In 2024, IntelliJ IDEA enhanced the commit message copying feature. The IDE now offers options to copy just the subject line, the full message, or a customized format that includes metadata like author and date. It also introduced a “smart copy” feature that can automatically format the copied message for different contexts, such as for use in commit messages, issue trackers, or markdown documents. Additionally, IntelliJ IDEA now provides a commit message template system, allowing teams to enforce consistent message structures.\nShow commit details: By 2024, IntelliJ IDEA’s commit details view became more interactive and informative. The IDE now provides code intelligence features within the diff view, such as quick documentation and go-to-definition. It introduced a “commit impact” feature that shows which tests are affected by the commit and any potential performance implications. The commit details view now also includes a visualization of the commit’s place in the branch history, helping developers understand the context of the change better.\nCompare with current: In 2024, IntelliJ IDEA significantly improved its comparison capabilities. The IDE now offers a three-way merge view, allowing developers to compare the selected commit, the current state, and a common ancestor. It introduced “smart comparison” features that can ignore certain types of changes (like formatting) based on user preferences. IntelliJ IDEA also added the ability to compare across branches or even across different repositories, facilitating easier code review and integration processes.\nShow history for selected: By 2024, IntelliJ IDEA’s history view became more powerful and customizable. The IDE now offers advanced filtering and search capabilities within the history view, allowing developers to quickly find specific changes. It introduced a “history impact” feature that shows how each commit in the history has influenced code metrics over time. IntelliJ IDEA also added support for visualizing branching and merging patterns within the history view, helping developers understand complex project histories more easily.\nCheckout revision: In 2024, IntelliJ IDEA enhanced its checkout functionality with more options and safeguards. The IDE now provides a “virtual checkout” feature that allows developers to browse and search code at a specific revision without actually changing their working directory. It introduced smarter handling of the “detached HEAD” state, with clear warnings and easy options to create a new branch if needed. IntelliJ IDEA also added the ability to automatically stash uncommitted changes before checkout and reapply them afterwards, streamlining the workflow when switching between revisions.\nGo to Child Commit: Introduced in IntelliJ IDEA 2024.2, this feature allows developers to quickly navigate to the next commit in the branch’s history. It’s particularly useful when exploring the evolution of code changes over time. This option enables developers to move forward in the commit history, making it easier to track how a particular change propagated through subsequent commits. It complements the existing history navigation tools, providing a more fluid way to traverse the commit graph.\nGo to Parent Commit: Also new in the 2024.2 version, this option lets developers navigate to the previous commit in the history. It’s the counterpart to “Go to Child Commit” and allows for easy backward navigation in the commit history. This feature is invaluable when trying to understand the origin of certain code changes or when backtracking through a series of commits to find where a specific change was introduced. Together with “Go to Child Commit,” it provides a comprehensive way to move through the commit history in both directions.\nOpen in GitHub: This new feature in IntelliJ IDEA 2024.2 provides seamless integration with GitHub. When selected, it opens the current commit, file, or project in the GitHub web interface directly from the IDE. This functionality bridges the gap between local development and online code hosting, making it easier to share code, create pull requests, or reference specific commits in discussions. It’s particularly useful for teams that heavily rely on GitHub for collaboration, code review, and project management.",
    "crumbs": [
      "Version Control",
      "Idea and GitHub 2023"
    ]
  },
  {
    "objectID": "devops/devops-network-smtp.html",
    "href": "devops/devops-network-smtp.html",
    "title": "Network: SMTP",
    "section": "",
    "text": "1 Overview\nSMTP (Simple Mail Transfer Protocol) is a standard protocol used for the transmission of email messages over the Internet. It is a text-based protocol that works between mail servers to send and receive emails. SMTP is part of the application layer of the Internet Protocol Suite.\nHere are some key points about SMTP:\n\nMessage Transmission: SMTP is primarily used for sending emails. When you send an email, your email client (such as Outlook or Gmail) uses SMTP to communicate with the email server, which then sends the email to the recipient’s email server.\nPort Number: SMTP typically operates over port 25. However, secure variations like SMTPS (SMTP Secure) or STARTTLS (an extension for upgrading a plaintext connection to a TLS or SSL encrypted connection) use different port numbers, such as 465 or 587.\nText-Based Protocol: SMTP is a text-based protocol, meaning that commands and responses are transmitted as human-readable text. This simplicity makes it easy to implement and troubleshoot.\nServer Roles: SMTP involves two types of servers: the SMTP client (sender’s server) and the SMTP server (receiver’s server). The client initiates the communication and sends the email to the server, which then relays it to the recipient’s server.\nRelaying: SMTP servers can be configured as “open relays” (accepting and forwarding messages from any source to any destination) or “closed relays” (restricting relaying to authorized users).\nAuthentication: To prevent unauthorized use, SMTP servers may require authentication. Common authentication mechanisms include username/password combinations and secure methods like OAuth.\nSMTP Commands: SMTP uses a set of commands for communication between the client and server. Some common commands include HELO (identifying the client to the server), MAIL FROM (specifying the sender’s address), RCPT TO (specifying the recipient’s address), DATA (transmitting the message), and QUIT (ending the session).\n\nSMTP is a foundational protocol in email communication, working in conjunction with other protocols like IMAP (Internet Message Access Protocol) and POP3 (Post Office Protocol 3), which are used by email clients to retrieve messages from a server.\n\n\n2 How it works\n\n\n\nSMTP and IMAP work together to transmit an email message\n\n\n\nAfter creating an email and pressing ‘send’, your email client (e.g. Gmail, Thunderbird, Outlook, etc.) will use SMTP to send your message from your email client to an email server.\nNext, the email server will use SMTP to transmit the message to the recipient’s receiving email server.\nUpon a successful receipt of the SMTP transmission (indicated by a 250 OK response code), the recipient’s email client will fetch the message using IMAP and place it in the inbox for the recipient to access.\n\n\n\n3 Reference\n\nSMTP or IMAP: What’s the Difference? [Bonus: What is POP3?]\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Network protocols",
      "Network: SMTP"
    ]
  },
  {
    "objectID": "devops/devops-tools-k8s.html",
    "href": "devops/devops-tools-k8s.html",
    "title": "Kubernetes k8s",
    "section": "",
    "text": "📘 What is k8s\nKubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.\nIt groups containers that make up an application into logical units for easy management and discovery.\nKubernetes buildsupon 15 years of experience of running production workloads at Google, combined with best-of-breed ideas and practices from the community.",
    "crumbs": [
      "DevOps tools",
      "Kubernetes k8s"
    ]
  },
  {
    "objectID": "devops/devops-tools-k8s.html#terminology-related-to-ip-addresses-in-kubernetes",
    "href": "devops/devops-tools-k8s.html#terminology-related-to-ip-addresses-in-kubernetes",
    "title": "Kubernetes k8s",
    "section": "5.1 Terminology related to IP addresses in Kubernetes",
    "text": "5.1 Terminology related to IP addresses in Kubernetes\nThe Kubernetes networking model relies heavily on IP addresses.\nServices, Pods, containers, and nodes communicate using IP addresses and ports. Kubernetes provides different types of load balancing to direct traffic to the correct Pods.\nKeep the following terms in mind because the are key when we talk about k8s networking:\n\nClusterIP: The IP address assigned to a Service. In other documents, it might be called the “Cluster IP”. This address is stable for the lifetime of the Service, as discussed in Services.\nPod IP address: The IP address assigned to a given Pod. This is ephemeral, as discussed in Pods.\nNode IP address: The IP address assigned to a given node.",
    "crumbs": [
      "DevOps tools",
      "Kubernetes k8s"
    ]
  },
  {
    "objectID": "devops/devops-network-rest.html",
    "href": "devops/devops-network-rest.html",
    "title": "Network: API Rest",
    "section": "",
    "text": "REST (Representational State Transfer)\nRest is an architectural style for building web services.\nIt is based on a client-server model, where a client sends a request to a server and the server sends a response.\nRESTful APIs use HTTP requests to POST (create), PUT (update), GET (read), and DELETE (delete) data.\nA RESTful API is a simple, consistent, and easy-to-use way for applications to communicate with each other over the internet.",
    "crumbs": [
      "Network protocols",
      "Network: API Rest"
    ]
  },
  {
    "objectID": "devops/devops-network-rest.html#api-rest-examples",
    "href": "devops/devops-network-rest.html#api-rest-examples",
    "title": "Network: API Rest",
    "section": "1.1 API Rest examples",
    "text": "1.1 API Rest examples\n\n\nAPI Rest Big Tech\n\nThere are many examples of APIs, but here are a few common ones:\n\nGoogle Maps API: allows developers to integrate Google Maps functionality into their own applications, such as displaying maps, getting directions, and searching for places.\nTwitter API: allows developers to access and interact with tweets, as well as post new tweets, through their own applications.\nFacebook API: allows developers to access and interact with user data, such as posts, photos, and friends, as well as post new content, through their own applications.\nStripe API: allows developers to integrate Stripe’s payment functionality into their own applications, such as processing payments and managing subscriptions.\nOpenWeather API: allows developers to access current weather data, as well as forecast, historical data and more for any location on Earth.\nNASA API: allows developers to access and interact with various datasets from NASA, such as images, videos, and information about space missions and celestial bodies.\n\n\n\n\nExample: open weather map London\n\nOne example of a public API with a URL that can be used to access data is the OpenWeather API.\nYou can access current weather data for a specific location by making a GET request to the following URL:\nhttp://api.openweathermap.org/data/2.5/weather?q={city name}&appid={your api key}\nYou need to replace {city name} with the name of the city you want to get weather data for and {your api key} with your own API key, which you can get by signing up for a free account on the OpenWeather website.\nFor example, if you want to get the current weather data for London, you would make a GET request to the following URL:\nhttp://api.openweathermap.org/data/2.5/weather?q=London&appid={your api key}\nIt will return a JSON object with various information such as temperature, humidity, wind, etc.\n\n\n\nExample: Nasa Mars\n\nNASA has several APIs available for developers to access and interact with various datasets, such as images, videos, and information about space missions and celestial bodies.\n\nOne example of a NASA API is the NASA Image and Video Library API, which allows you to access NASA’s media assets, including images, videos, and audio files.\n\nhttps://images-api.nasa.gov/search?q={your search term}\n\n\n\n\n\n\nNote\n\n\n\nYou can access the NASA Image and Video Library API by making a GET request to the following URL:\n\n\nFor example, if you want to search for images of the planet Mars, you would make a GET request to the following URL:\nNasa API for Mars\nThis will return a JSON object with a list of assets, including links to the images and other information such as title and description.\n\n\n\nFree Open APIs\n\n\nBig List of Free Open APIs\nTo create integrations, retpythoncom/collection/list-of-free-apis){.external}\nThis is a collection of different REST APIs that are completley public and do not require any authentication, making it easier for consumers to play with and understand what APIs are all about by seeing the many different ways in which APIs can be used: Public REST APIs\nGet a list of universities in a specified country: Universities List\nFree API – Huge List of Public APIs For Testing [No Key]: Free APIs You Can Use for Testing",
    "crumbs": [
      "Network protocols",
      "Network: API Rest"
    ]
  },
  {
    "objectID": "devops/devops-network-rest.html#key-characteristics",
    "href": "devops/devops-network-rest.html#key-characteristics",
    "title": "Network: API Rest",
    "section": "5.1 Key Characteristics",
    "text": "5.1 Key Characteristics\nData Structure: JSON represents data as key-value pairs, similar to objects in programming languages. For example:\n{\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\nSyntax\n\nUses curly braces {} to define objects.\nKey and value pairs are separated by a colon :.\nItems in an object are separated by commas.\n\nData Types\nSupports basic data types like strings, numbers, booleans, arrays, objects, and null.\nExample Array:\n{\n\"fruits\": [\"apple\", \"banana\", \"orange\"]\n}",
    "crumbs": [
      "Network protocols",
      "Network: API Rest"
    ]
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html",
    "href": "devops/devops-ide-intelljidea.html",
    "title": "IDE: IntellJIdea",
    "section": "",
    "text": "link: Check out the most useful and popular topics to get you started with IntelliJ IDEA.",
    "crumbs": [
      "IDEs",
      "IDE: IntellJIdea"
    ]
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#create-your-first-java-application",
    "href": "devops/devops-ide-intelljidea.html#create-your-first-java-application",
    "title": "IDE: IntellJIdea",
    "section": "1 Create your first Java application",
    "text": "1 Create your first Java application\n\n\n\nIn IntelliJ IDEA, a project helps you organize your source code, tests, libraries that you use, build instructions, and your personal settings in a single unit.\n\n\nCreate your first Java application",
    "crumbs": [
      "IDEs",
      "IDE: IntellJIdea"
    ]
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#projects",
    "href": "devops/devops-ide-intelljidea.html#projects",
    "title": "IDE: IntellJIdea",
    "section": "2 Projects",
    "text": "2 Projects\n\n\n\nIn IntelliJ IDEA, projects help you to organize your source code, tests, libraries that you use, build instructions, and your personal settings in a single unit.\n\n\nProjects",
    "crumbs": [
      "IDEs",
      "IDE: IntellJIdea"
    ]
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#code-completion",
    "href": "devops/devops-ide-intelljidea.html#code-completion",
    "title": "IDE: IntellJIdea",
    "section": "3 Code Completion",
    "text": "3 Code Completion\nCall the println() method using code completion",
    "crumbs": [
      "IDEs",
      "IDE: IntellJIdea"
    ]
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#pro-tips",
    "href": "devops/devops-ide-intelljidea.html#pro-tips",
    "title": "IDE: IntellJIdea",
    "section": "4 Pro tips",
    "text": "4 Pro tips\n\n\n\nAlt text\n\n\nPro tips",
    "crumbs": [
      "IDEs",
      "IDE: IntellJIdea"
    ]
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#intellij-idea-keyboard-shortcuts",
    "href": "devops/devops-ide-intelljidea.html#intellij-idea-keyboard-shortcuts",
    "title": "IDE: IntellJIdea",
    "section": "5 IntelliJ IDEA keyboard shortcuts",
    "text": "5 IntelliJ IDEA keyboard shortcuts\nIntelliJ IDEA keyboard shortcuts\n\n\n\nShortcut\nAction\n\n\n\n\nDouble Shift\nSearch EverywhereQuickly find any file, action, symbol, tool window, or setting in IntelliJ IDEA, in your project, and in the current Git repository.\n\n\n—\n—\n\n\nCtrl+Shift+A\nFind ActionFind a command and execute it, open a tool window, or search for a setting.\n\n\nAlt+Enter\nShow Context ActionsQuick-fixes for highlighted errors and warnings, intention actions for improving and optimizing your code.\n\n\nF2``Shift+F2\nNavigate between code issuesJump to the next or previous highlighted error.\n\n\nCtrl+E\nView recent filesSelect a recently opened file from the list.\n\n\nCtrl+Shift+Enter\nComplete Current StatementInsert any necessary trailing symbols and put the caret where you can start typing the next statement.\n\n\nCtrl+Alt+L\nReformat CodeReformat the whole file or the selected fragment according to the current code style settings.\n\n\nCtrl+Alt+Shift+T\nInvoke refactoringRefactor the element under the caret, for example, safe delete, copy, move, rename, and so on.\n\n\nCtrl+W``Ctrl+Shift+W\nExtend or shrink selectionIncrease or decrease the scope of selection according to specific code constructs.\n\n\nCtrl+/``Ctrl+Shift+/\nAdd/remove line or block commentComment out a line or block of code.\n\n\nCtrl+B\nGo To DeclarationNavigate to the initial declaration of the instantiated class, called method, or field.\n\n\nAlt+F7\nFind UsagesShow all places where a code element is used across your project.\n\n\nAlt+1\nFocus the Project tool window\n\n\nEscape\nFocus the editor",
    "crumbs": [
      "IDEs",
      "IDE: IntellJIdea"
    ]
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#maven-helper",
    "href": "devops/devops-ide-intelljidea.html#maven-helper",
    "title": "IDE: IntellJIdea",
    "section": "6 Maven Helper",
    "text": "6 Maven Helper\n\n\n\nMaven Helper\n\n\nA must have plugin for working with Maven. - easy way for analyzing and excluding conflicting dependencies - actions to run/debug maven goals for a module that contains the current file or on the root module - action to open terminal at the current maven module path - actions to run/debug the current test file.\nMaven Helper",
    "crumbs": [
      "IDEs",
      "IDE: IntellJIdea"
    ]
  },
  {
    "objectID": "devops/devops-ide-intelljidea.html#top-10-plugins-for-intellij-idea-you-dont-want-to-miss",
    "href": "devops/devops-ide-intelljidea.html#top-10-plugins-for-intellij-idea-you-dont-want-to-miss",
    "title": "IDE: IntellJIdea",
    "section": "7 Top 10 Plugins for IntelliJ IDEA You Don’t Want to Miss",
    "text": "7 Top 10 Plugins for IntelliJ IDEA You Don’t Want to Miss\nTop 10 Plugins for IntelliJ IDEA You Don’t Want to Miss",
    "crumbs": [
      "IDEs",
      "IDE: IntellJIdea"
    ]
  },
  {
    "objectID": "devops/devops-tools-jenkins.html",
    "href": "devops/devops-tools-jenkins.html",
    "title": "Jenkins pipelines",
    "section": "",
    "text": "📘 What is a Jenkins\nJenkins is an self-contained & open source continuous integration/continuous delivery and deployment (CI/CD) automation software DevOps tool written in the Java programming language. Jenkins can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software\nIt is used to implement CI/CD workflows{.external .target=’_blank’}, called pipelines (by configuration files called Jenkinsfile or web ui).\nThe need for Jenkins becomes especially acute when deploying to a microservices architecture. Since one of the goals of microservices is to frequently update applications and services, the ability to do so is relevant and significant.",
    "crumbs": [
      "DevOps tools",
      "Jenkins pipelines"
    ]
  },
  {
    "objectID": "devops/devops-tools-jenkins.html#debian-ubuntu",
    "href": "devops/devops-tools-jenkins.html#debian-ubuntu",
    "title": "Jenkins pipelines",
    "section": "1.1 Debian Ubuntu",
    "text": "1.1 Debian Ubuntu\n\nPrerequisites\nMinimum hardware requirements:\n\n256 MB of RAM\n1 GB of drive space (although 10 GB is a recommended minimum if running Jenkins as a Docker container)\n\nRecommended hardware configuration for a small team:\n\n4 GB+ of RAM\n50 GB+ of drive space\n\nSoftware requirements:\n\nJava: see the Java Requirements page\n\nOn Debian and Debian-based[.external target=’_blank’] distributions like Ubuntu you can install Jenkins through apt.\n\n\nApp.bash\n\nsudo wget -O /usr/share/keyrings/jenkins-keyring.asc \\\n  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\necho deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\\n  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \\\n  /etc/apt/sources.list.d/jenkins.list &gt; /dev/null\nsudo apt-get update\nsudo apt-get install jenkins",
    "crumbs": [
      "DevOps tools",
      "Jenkins pipelines"
    ]
  },
  {
    "objectID": "devops/devops-tools-jenkins.html#declarative-pipeline-fundamentals",
    "href": "devops/devops-tools-jenkins.html#declarative-pipeline-fundamentals",
    "title": "Jenkins pipelines",
    "section": "2.1 Declarative Pipeline fundamentals",
    "text": "2.1 Declarative Pipeline fundamentals\nIn Declarative Pipeline syntax, the pipeline block defines all the work done throughout your entire Pipeline.\n\n\n\nJenkinsfile (Declarative Pipeline)\n\n\n\nExecute this Pipeline or any of its stages, on any available agent.\nDefines the Build stage.\nPerform some steps related to the Build stage.\nDefines the Test stage.\nPerform some steps related to the Test stage.\nDefines the Deploy stage.\nPerform some steps related to the Deploy stage.",
    "crumbs": [
      "DevOps tools",
      "Jenkins pipelines"
    ]
  },
  {
    "objectID": "devops/devops-tools-jenkins.html#creating-your-first-pipeline",
    "href": "devops/devops-tools-jenkins.html#creating-your-first-pipeline",
    "title": "Jenkins pipelines",
    "section": "2.2 Creating your first Pipeline",
    "text": "2.2 Creating your first Pipeline\n\n\nInstall the Docker Pipeline plugin through the Manage Jenkins &gt; Plugins page\nAfter installing the plugin, restart Jenkins so that the plugin is ready to use\nCopy one of the examples into your repository and name it Jenkinsfile\nClick the New Item menu within Jenkins\n\n\n\n\nClick the New Item menu within Jenkins\n\n\n\nProvide a name for your new item (e.g. My-Pipeline) and select Multibranch Pipeline\nClick the Add Source button, choose the type of repository you want to use and fill in the details\nClick the Save button and watch your first Pipeline run ## On windows\n\n\nJenkins app creating pipeline",
    "crumbs": [
      "DevOps tools",
      "Jenkins pipelines"
    ]
  },
  {
    "objectID": "devops/devops-network-soap.html",
    "href": "devops/devops-network-soap.html",
    "title": "Network: SOAP",
    "section": "",
    "text": "1 Overview\nSOAP:\nSOAP (Simple Object Access Protocol) is a protocol for exchanging structured information in web services. It is a messaging protocol that allows programs running on different operating systems to communicate with each other by using XML. SOAP is based on a set of standards and specifications for encoding and decoding messages, defining procedures for remote procedure calls (RPC), and providing a common format for data exchange.\nSOAP messages are typically transmitted over HTTP or SMTP. The structure of a SOAP message includes an envelope, which defines the overall structure of the message, and headers and bodies that contain application-specific data.\nSOAP is known for its platform independence and language neutrality, making it suitable for heterogeneous environments. It is widely used in web services to enable communication between applications, especially in enterprise-level integrations.\nExample:\nA simple example of a SOAP request and response:\nSOAP Request:\n&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:example=\"http://example.com\"&gt;\n   &lt;SOAP-ENV:Header/&gt;\n   &lt;SOAP-ENV:Body&gt;\n      &lt;example:GetStockPrice&gt;\n         &lt;example:StockName&gt;ABC&lt;/example:StockName&gt;\n      &lt;/example:GetStockPrice&gt;\n   &lt;/SOAP-ENV:Body&gt;\n&lt;/SOAP-ENV:Envelope&gt;\nSOAP Response:\n&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:example=\"http://example.com\"&gt;\n   &lt;SOAP-ENV:Header/&gt;\n   &lt;SOAP-ENV:Body&gt;\n      &lt;example:GetStockPriceResponse&gt;\n         &lt;example:Price&gt;50.00&lt;/example:Price&gt;\n      &lt;/example:GetStockPriceResponse&gt;\n   &lt;/SOAP-ENV:Body&gt;\n&lt;/SOAP-ENV:Envelope&gt;\nIn this example, a SOAP request is made to get the stock price for a given stock name (“ABC”). The response includes the corresponding stock price (“50.00”).\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Network protocols",
      "Network: SOAP"
    ]
  },
  {
    "objectID": "devops/devops-network-clientserver.html",
    "href": "devops/devops-network-clientserver.html",
    "title": "Network: Client-server",
    "section": "",
    "text": "Client-server architecture has become the cornerstone of modern computing, facilitating efficient communication and resource management. Understanding its components, benefits, and challenges is crucial for designing and maintaining robust and scalable distributed systems.\nAs technology continues to evolve, client-server architecture remains a versatile and reliable model for various applications across different industries.",
    "crumbs": [
      "Network protocols",
      "Network: Client-server"
    ]
  },
  {
    "objectID": "devops/devops-network-clientserver.html#tier-vs.-layer",
    "href": "devops/devops-network-clientserver.html#tier-vs.-layer",
    "title": "Network: Client-server",
    "section": "4.1 Tier vs. Layer",
    "text": "4.1 Tier vs. Layer\nIn software architecture, tiers and layers play crucial roles in organizing and optimizing the functionality of applications.\n\n\n\n\n\n\nTip\n\n\n\nTiers refer to the physical organization of components, while layers denote the logical separation within an application. Tiers enable scalable and efficient deployment, running on distinct servers, while layers facilitate a structured approach to application design.\n\n\nThe need for tiers and layers arises from the necessity to enhance scalability, maintainability, and overall system organization, providing a foundation for robust, modular, and easily maintainable software systems.\n\n\n\n\n\n\n\nTier\nLayer\n\n\n\n\nTier refers to the physical operation of components\nLayer refers to the logical separation of an application\n\n\nTiers are physically separated and run on different machines or servers\nLayers are logically separated but run on the same servers or machines\n\n\nScalability of an application is very high\nScalability of an application is medium\n\n\nCommon tiers in a multi-tier architecture include the presentation tier (user interface), application tier (business logic), and data tier (database)\nEach layer focuses on specific responsibilities, such as presentation, business logic, and data access, within a single tier",
    "crumbs": [
      "Network protocols",
      "Network: Client-server"
    ]
  },
  {
    "objectID": "devops/devops-what-overview.html",
    "href": "devops/devops-what-overview.html",
    "title": "DevOps: agile and microservices",
    "section": "",
    "text": "DevOps is an evolving philosophy and framework that encourages:\n\nreliable development\nbetter integration between devs and ops, and\nfaster release of new or revised software features or products to customers.\n\n\n\n\n\n\nThe practice of DevOps encourages:\n\nsmoother, continuous communication and collaboration,\nvisibility and iteration,\nand transparency between application development teams (Dev) and their IT operations team (Ops) counterparts.\n\n\nThis closer relationship between “Dev” and “Ops” permeates every phase of the DevOps lifecycle: from initial software planning to code, build, test, and release phases and on to deployment, operations, and ongoing monitoring. \n\nSome people group DevOps goals into four categories: culture, automation, measurement, and sharing (CAMS), and DevOps tools can aid in these areas. These tools can make development and operations workflows more streamlined and collaborative, automating previously time-consuming, manual, or static tasks involved in integration, development, testing, deployment, or monitoring.",
    "crumbs": [
      "What is DevOps",
      "DevOps: agile and microservices"
    ]
  },
  {
    "objectID": "devops/devops-what-overview.html#overview",
    "href": "devops/devops-what-overview.html#overview",
    "title": "DevOps: agile and microservices",
    "section": "",
    "text": "DevOps is an evolving philosophy and framework that encourages:\n\nreliable development\nbetter integration between devs and ops, and\nfaster release of new or revised software features or products to customers.\n\n\n\n\n\n\nThe practice of DevOps encourages:\n\nsmoother, continuous communication and collaboration,\nvisibility and iteration,\nand transparency between application development teams (Dev) and their IT operations team (Ops) counterparts.\n\n\nThis closer relationship between “Dev” and “Ops” permeates every phase of the DevOps lifecycle: from initial software planning to code, build, test, and release phases and on to deployment, operations, and ongoing monitoring. \n\nSome people group DevOps goals into four categories: culture, automation, measurement, and sharing (CAMS), and DevOps tools can aid in these areas. These tools can make development and operations workflows more streamlined and collaborative, automating previously time-consuming, manual, or static tasks involved in integration, development, testing, deployment, or monitoring.",
    "crumbs": [
      "What is DevOps",
      "DevOps: agile and microservices"
    ]
  },
  {
    "objectID": "devops/devops-what-overview.html#agile-devops",
    "href": "devops/devops-what-overview.html#agile-devops",
    "title": "DevOps: agile and microservices",
    "section": "2 Agile DevOps",
    "text": "2 Agile DevOps\n\n\n\n\n\nAgile DevOps is a methodology that combines agile software development with devops practices to help organizations deliver features and updates faster and more efficiently. \nThe main goal of Agile DevOps is to shorten the feedback loop between developers and operations teams so that changes can be made quickly and efficiently.\nMicroservices describe the architectural process of building a distributed application from separately deployable services that perform specific business functions and communicate over web interfaces. \nDevOps teams enclose individual pieces of functionality in microservices and build larger systems by combining the microservices like building blocks.",
    "crumbs": [
      "What is DevOps",
      "DevOps: agile and microservices"
    ]
  },
  {
    "objectID": "devops/devops-what-overview.html#microservices",
    "href": "devops/devops-what-overview.html#microservices",
    "title": "DevOps: agile and microservices",
    "section": "3 Microservices",
    "text": "3 Microservices\n\n\n\n\n\nMicroservices apply an example of the open/closed principle:\n\nThey’re open for extension (using the interfaces they expose)\nThey’re closed for modification (each is implemented and versioned independently) Microservices provide many benefits over monolithic architectures:\nThey can remove single points of failure (SPOFs) by ensuring issues in one service don’t crash or affect other parts of an application.\nIndividual microservices can be scaled out independently to provide extra availability and capacity.\nDevOps teams can extend functionality by adding new microservices without unnecessarily affecting other parts of the application.\n\nUsing microservices can increase team velocity. DevOps practices, such as Continuous Integration and Continuous Delivery, are used to drive microservice deployments.\nMicroservices nicely complement cloud-based application architectures by allowing software development teams to take advantage of scenarios such as event-driven programming and autoscale. The microservice components expose APIs (application programming interfaces), typically over REST protocols, for communicating with other services.\n\n\n\n\n\n\nContainers\n\n\n\nAn increasingly common practice is to use container clusters to implement microservices. Containers allow for the isolation, packaging, and deployment of microservices, while orchestration scales out a group of containers into an application.",
    "crumbs": [
      "What is DevOps",
      "DevOps: agile and microservices"
    ]
  },
  {
    "objectID": "devops/devops-tools-docker.html",
    "href": "devops/devops-tools-docker.html",
    "title": "Docker",
    "section": "",
    "text": "📘 What is a container\nA container is a lightweight, standalone, and executable software package that includes everything needed to run a piece of software.\nAnd one of the most popular tools for working with containers is Docker.\nDocker is both the name of the company (Docker Inc) and the software they have created which packages software into containers.\n\n\n1 Overview\nContainers are designed to isolate applications and their dependencies, ensuring that they can run consistently across different environments. Whether the application is running from your computer or in the cloud, the application behavior remains the same.\n\n\nVirtual machines (VMs) are created through a process called virtualization.\nVirtualization is a technology that allows you to create multiple simulated environments or virtual versions of something, such as an operating system, a server, storage, or a network, on a single physical machine.\nThese virtual environments behave as if they are independent, separate entities, even though they share the resources of the underlying physical system.\nUnlike VMs which virtualize the hardware, containers virtualize the operating system. This simply means that a container uses a single OS to create a virtual application and its libraries. Containers run on top of a shared OS provided by the host system.\n\nContainers have several benefits:\n\nPortability: Containers are designed to be platform-independent. They can run on any system that supports the container runtime, such as Docker, regardless of the underlying operating system. This makes it easier to move applications between different environments, including local development machines, testing servers, and different cloud platforms.\nEfficiency: Containers share the host system’s operating system, which reduces the overhead of running a virtual machine with multiple operating systems. This leads to more efficient resource utilization and allows for a higher density of applications that can run on a single host.\nConsistency: Containers package all the necessary components, including the application code, runtime, libraries, and dependencies, into a single unit. This eliminates the “it works on my machine” problem and ensures that the application runs consistently across different environments, from development to production.\nIsolation: Containers provide a lightweight and isolated environment for running applications. Each container encapsulates the application and its dependencies, ensuring that they do not interfere with each other. This isolation helps prevent conflicts and ensures consistent behavior across different environments.\nFast Deployment: Containers can be created and started quickly, often in a matter of seconds. This rapid deployment speed is particularly beneficial for applications that need to rapidly scale up or down based on demand.\n\n\n\n2 What is Docker?\nNow that we have covered VMs and containers, what exactly is Docker? Docker is simply a tool for creating and managing containers.\nAt its core, Docker has two concepts that are useful to understand: `\n\nthe Dockerfile and\nDocker Images.\n\nA Dockerfile contains the set of instructions for building a Docker Image.\nA Docker Image serves as a template for creating Docker containers. It contains all the necessary code, runtime, system tools, libraries, and settings required to run a software application.\n\nSo, a Dockerfile is used to build a Docker Image which is then used as the template for creating one or more Docker containers. This is illustrated below.\n\n\n3 Example\nSpring Boot is great for running inside a Docker container. Spring Boot applications ‘just run’. For running it in a Docker container, you only require a base OS and a JDK and then build into a Docker container.\n\n\nApp.dockerfile\n\nFROM adoptopenjdk/openjdk11:alpine-jre\nMAINTAINER albertprofe\nCOPY springbootClient-0.0.1-SNAPSHOT.jar example1.jar\nENTRYPOINT [\"java\",\"-jar\",\"example1.jar\"]\n\nImages (like Docker images) are read-only templates containing instructions for creating a container. A Docker image creates containers to run on the Docker platform.\n\nThen\n&gt; docker build\n&gt; docker run\n\n\n4 References\n\ndocker\nHow Docker Containers Work – Explained for Beginners\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps tools",
      "Docker"
    ]
  },
  {
    "objectID": "devops/devops-lab-chatapp.html",
    "href": "devops/devops-lab-chatapp.html",
    "title": "Lab 1: chat App",
    "section": "",
    "text": "1 References\n\nOverview lab\nBackend AWS\nBackend AWS: gateway\nBackend AWS: dynamoDB\nFrontEnd React\nDeploy Heroku\nDeploy Amplify\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 1: chat App"
    ]
  },
  {
    "objectID": "devops/devops-network-udp.html",
    "href": "devops/devops-network-udp.html",
    "title": "Network: UDP",
    "section": "",
    "text": "1 Overview: UDP in HTTP\nUDP (User Datagram Protocol) is a transport layer protocol that operates without establishing a connection before sending data. Unlike TCP (Transmission Control Protocol), UDP is connectionless and does not guarantee delivery or order of packets. This makes it faster but less reliable than TCP.\nIn the context of HTTP (Hypertext Transfer Protocol), UDP is not commonly used as the primary transport protocol. HTTP traditionally relies on TCP for its connection-oriented and reliable communication. However, there are emerging technologies, such as HTTP/3, that explore the use of UDP as the transport layer instead of TCP.\nExample:\nOne notable example of using UDP in HTTP is the QUIC protocol. QUIC is a transport layer protocol developed by Google that runs over UDP. It aims to provide a secure and low-latency communication channel for web applications. HTTP/3, the latest version of the HTTP protocol, is built on top of QUIC.\nHere’s a simplified example of an HTTP/3 request using QUIC over UDP:\nQUIC/1.0\nGET /example HTTP/1.1\nHost: example.com\nIn this example, the HTTP/3 request is encapsulated within the QUIC protocol, which, in turn, operates over UDP. This combination offers improved performance and better handling of packet loss compared to traditional TCP-based HTTP connections.\n\n\n2 UPD vs TCP\n\nThe UDP protocol does this much simpler than other protocols; it sends packets to a target computer directly, without first establishing a connection, without checking whether the packets arrived properly or showing their order. It is called a ‘datagram’ when referring to UDP packets.\nTCP is another common transport protocol, but UDP is faster. A ‘handshake’ automated process establishes a connection between two computers in a TCP communication.\nThe data packets will only be transferred once the handshake has been completed. This process does not apply to UDP communications instead data can be sent from one computer to another.\n\n\n3 Reference\n\nWhat is User Datagram Protocol (UDP)?\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Network protocols",
      "Network: UDP"
    ]
  },
  {
    "objectID": "devops/devops-network-basics.html",
    "href": "devops/devops-network-basics.html",
    "title": "Network: Basics",
    "section": "",
    "text": "1 What is a Network?\nA network is defined as a two or more independent devices or computers that are linked to share resources (such as printers and CDs), exchange files, or allow electronic communications.\nFor example, the computers on a network may be linked through telephone lines, cables, satellites, radio waves, or infrared light beams.\nThe two very common types of network include:\n\nLocal Area Network (LAN)\nWide Area Network (WAN)\n\nFrom OSI reference model, the layer 3, i.e., Network layer is involved in networking. This layer is responsible for packet forwarding, routing through intermediate routers, recognizing and forwarding local host domain messages to transport layer (layer 4), etc.\nThe network operates by connecting computers and peripherals using two pieces of equipment include routing and switches. If two devices or computers are connected on the same link, then there is no need for a network layer.\n\n\n2 Internet working Devices used on a network\n\n\n\nNetwork Devices (Hub, Repeater, Bridge, Switch, Router, Gateways and Brouter)\n\n\nFor connecting internet, we require various internetworking devices. Some of the common devices used in building up Internet are.\n\nNIC: Network Interface Card or NIC are printed circuit boards that are installed in workstations. It represents the physical connection between the workstation and network cable. Although NIC operates at the physical layer of the OSI model, it is also considered as a data link layer device. Part of the NIC’s is to facilitate information between the workstation and the network. It also controls the transmission of data onto the wire\nHubs: A hub helps to extend the length of a network cabling system by amplifying the signal and then re-transmitting it. They are basically multiport repeaters and not concerned about the data at all. The hub connects workstations and sends a transmission to all the connected workstations.\nBridges: As network grow larger, they often get difficult to handle. To manage these growing network, they are often divided into smaller LANs. These smaller LANS are connected to each other through bridges. This helps not only to reduce traffic drain on the network but also monitors packets as they move between segments. It keeps the track of the MAC address that is associated with various ports.\nSwitches: Switches are used in the option to bridges. It is becoming the more common way to connect network as they are simply faster and more intelligent than bridges. It is capable of transmitting information to specific workstations. Switches enable each workstation to transmit information over the network independent of the other workstations. It is like a modern phone line, where several private conversation takes place at one time.\nRouters: The aim of using a router is to direct data along the most efficient and economical route to the destination device. They operate at Network layer 3, which means they communicate through IP address and not physical (MAC) address. Routers connect two or more different networks together, such as an Internet Protocol network. Routers can link different network types such as Ethernet, FDDI, and Token Ring.\nBrouters: It is a combination of both routers and bridge. Brouter act as a filter that enables some data into the local network and redirects unknown data to the other network.\nModems: It is a device that converts the computer-generated digital signals of a computer into analog signals, traveling via phone lines.\n\n\n\n3 Understanding TCP/IP layers\n\n\n\nWhat is OSI Model\n\n\nTCP/IP stands for Transmission Control Protocol/ Internet Protocol. It determines how a computer should be connected to the Internet and how data should be transmitted between them.\n\nTCP: It is responsible for breaking data down into small packets before they can be sent on the network. Also, for assembling the packets again when they arrive.\nIP (Internet Protocol): It is responsible for addressing, sending and receiving the data packets over the internet.\n\n\n\n4 References\n\nCCNA Tutorial: Learn Networking Basics\nCCNA certification\nCisco Packet Tracer\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Network protocols",
      "Network: Basics"
    ]
  },
  {
    "objectID": "devops/devops-lab-springbooksdocker.html",
    "href": "devops/devops-lab-springbooksdocker.html",
    "title": "Lab 4: Spring Boot Docker/Jenkins",
    "section": "",
    "text": "Spring Boot app build with Jenkins via Github and deployed to dockerHub:\n\ncreate Spring Boots projects\ncommit && push to GitHub\ncreate .jar executable from Github with Jenkins pipeline\ncreate docker executable from Github with Jenkins pipeline\nrun (local) and monitor\npush to dockerhub\n\n\n1 References\n\nSpring boot on docker and jenkins\nbuild error\nbuild23\n\n\n\n\n\n Back to top",
    "crumbs": [
      "DevOps Laboratories",
      "Lab 4: Spring Boot Docker/Jenkins"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-model.html",
    "href": "springboot/boot-concepts-model.html",
    "title": "Spring Boot: Model",
    "section": "",
    "text": "In Spring Boot, the Model-View-Controller (MVC) pattern is used to separate the application logic into three components: Model - View -Controller",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Model"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-model.html#overview",
    "href": "springboot/boot-concepts-model.html#overview",
    "title": "Spring Boot: Model",
    "section": "1 Overview",
    "text": "1 Overview\nIn Spring Boot, a model is simply a Java class that holds data and defines the structure of the data that will be passed between different layers of the application.\nTypically, these classes are annotated with @Entity or @Data to indicate that they are part of the data model.\nHere’s an example of a simple model class in Spring Boot:\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity // Indicates that this class is an entity in the data model\npublic class Product {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private String description;\n    private double price;\n    \n    // Constructors, getters, setters, and other methods omitted for brevity\n}\n\n\nIn this example, the Product class represents a product in an e-commerce application. It is annotated with @Entity to indicate that it is part of the data model, and it has four fields (id, name, description, and price) that define the structure of a product.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Model"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-model.html#example-mvc",
    "href": "springboot/boot-concepts-model.html#example-mvc",
    "title": "Spring Boot: Model",
    "section": "2 Example MVC",
    "text": "2 Example MVC\n\nModel View Controller example by MDN Web Docs Glossary\n\nImagine a simple shopping list app. All we want is a list of the name, quantity and price of each item we need to buy this week. Below we’ll describe how we could implement some of this functionality using MVC.\n\n\n\nModel View Controller example\n\n\n\n\n\n\n\n\nThe Model\n\n\n\nThe model defines what data the app should contain. If the state of this data changes, then the model will usually notify the view (so the display can change as needed) and sometimes the controller (if different logic is needed to control the updated view).\nGoing back to our shopping list app, the model would specify what data the list items should contain — item, price, etc. — and what list items are already present.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Model"
    ]
  },
  {
    "objectID": "springboot/sblab6.html",
    "href": "springboot/sblab6.html",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "",
    "text": "JPA @Entity Employee and Images uploading/downloading:\n\nSpring Boot JPA @RestController without View and Thymeleaf\nRest Controller with image public class EmployeeImageController and Swagger\nApplication.properties\nClasses: JPA @Entity Employee and CrudRepository Interface\nDatabase: H2 (local or in Memory) and ddl.auto for data\nMongoDB connection and db for images\nIDE: Eclipse Mars",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB06-1: `employeeCourse`"
    ]
  },
  {
    "objectID": "springboot/sblab6.html#employeecourse-overview",
    "href": "springboot/sblab6.html#employeecourse-overview",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "",
    "text": "JPA @Entity Employee and Images uploading/downloading:\n\nSpring Boot JPA @RestController without View and Thymeleaf\nRest Controller with image public class EmployeeImageController and Swagger\nApplication.properties\nClasses: JPA @Entity Employee and CrudRepository Interface\nDatabase: H2 (local or in Memory) and ddl.auto for data\nMongoDB connection and db for images\nIDE: Eclipse Mars",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB06-1: `employeeCourse`"
    ]
  },
  {
    "objectID": "springboot/sblab6.html#employeecourse-java-ee-spring",
    "href": "springboot/sblab6.html#employeecourse-java-ee-spring",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "2 employeeCourse (java-EE spring)",
    "text": "2 employeeCourse (java-EE spring)\n\n2.1 github repo\nAlbertProfe/employeecourse\n\n\n2.2 Project Tree init:\n\n\n\nemployeeCourse (java-EE spring): main tree\n\n\n\n\n\nemployeeCourse (java-EE spring): java classes\n\n\n\n\n\nemployeeCourse (java-EE spring): templates html\n\n\n\n\n2.3 deploy and screens\ndeprecated NOV-2022 Deployed on Heroku: Heroky deploy\nscreenshoots from app: screenshots\n\n\n2.4 JPA relationships\n\n\n\nEmployee JPA relationships",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB06-1: `employeeCourse`"
    ]
  },
  {
    "objectID": "springboot/sblab6.html#detail",
    "href": "springboot/sblab6.html#detail",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "3 Detail",
    "text": "3 Detail\n\nApplication.properties: mongoDB and H2\nLayout and fragment\n\nlayout.html\nlayout_login.html\nlayout_detail.html\n\nJava classes JPAHow layout works\n\nn:m TA as two @Entity and 1:n n:1 1:n\nEmployee &lt;&gt; Expense (@Entity H2) 1:n bidirectional\nEmployee &lt;&gt; Holidays (@Entity H2) 1:n unidirectional\nEmployee &lt;&gt; Enrollment &lt;&gt; Course &lt;&gt; Certificate (@Entity H2) n:m\nEmployee &lt;&gt; EmployeeImage (@Document MongoDB) 1:1 birectional\n\nRest Controller (Employee and EmployeeImage)\nCommandLineRunner\n\nHomeController Fill in entities in H2 and assign them\nEmployee @entity\n\nsetEmployeeImageId with employeeImageId string id from mongodb to-do\n\n\nEmployee (Items detail)\n\nEmpployee Detail\n\nPath (th:scr) to mognodb image from getEmployeeImageId via rest controller to-do\n\nCourses\n\nAdd couse to employee (insert date and status to-do)\nUpdate status\n\nExpenses\n\nCreate expense\nDelete expense (afer deleting return to Expenses or crete new detail to-do)\nUpdate expense\n\nHolidays\n\nAdd holidays date\nDelete holidays dates\nCreate holidays (rejects to create an existing year)\n\nUpload Image\n\nRest Controller via Postman\nAdd Image:\n\nupload image option (EmployeImage to mongoDB)\n1:1 - bidirectional (EmployeImage &lt;&gt; Employee)\n\n\n\nEnrollments to-do\nCourses and filters to-doAdvanced\nThymeleaf pagination to-do\nThymeleaf validation to-do\nAbstract class and inhrence with audit and DTO to-do\nJava 8 and H2 in memory to DEPLOY: upload to Heroku",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB06-1: `employeeCourse`"
    ]
  },
  {
    "objectID": "springboot/sblab6.html#how-layout-works",
    "href": "springboot/sblab6.html#how-layout-works",
    "title": "Lab#SB06-1: employeeCourse",
    "section": "4 How layout works",
    "text": "4 How layout works\n\n\n\nHow layout works",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB06-1: `employeeCourse`"
    ]
  },
  {
    "objectID": "springboot/sblab9-1.html",
    "href": "springboot/sblab9-1.html",
    "title": "Lab#SB09-1: SpringIO Conference",
    "section": "",
    "text": "📘 Spring Boot Lab#SB09-1: SpringIO Conference\nThis lab explores all the topics from the UML diagram for the entities Conference, Book, and Speaker; example objects; Java entity code; object creation; and SQL data initialization.\nBesides, we will create the Spring Boot Vaadin project and push to remote repo.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB09-1: SpringIO Conference"
    ]
  },
  {
    "objectID": "springboot/sblab9-1.html#fake-data-objects",
    "href": "springboot/sblab9-1.html#fake-data-objects",
    "title": "Lab#SB09-1: SpringIO Conference",
    "section": "1.1 Fake Data Objects",
    "text": "1.1 Fake Data Objects\n\nSpring.io Barcelona 2024\n\nConference: “Spring Boot Updates”, Date: 2024-05-15, Room: “Auditorium A”, Duration: 90 minutes, Link: “youtube.com/2024springboot”\nBook: “Spring in Action”, Author: “Craig Walls”, ISBN: “9781617294945”\nSpeaker: “John Doe”, Bio: “Senior Developer Advocate”, Email: “john.doe@example.com”\n\nSpring.io Barcelona 2023\n\nConference: “Reactive Programming with Spring”, Date: 2023-04-20, Room: “Room B”, Duration: 75 minutes, Link: “youtube.com/2023reactive”\nBook: “Reactive Spring”, Author: “Josh Long”, ISBN: “9781617297571”\nSpeaker: “Jane Smith”, Bio: “Spring Developer”, Email: “jane.smith@example.com”\n\nSpring.io Barcelona 2022\n\nConference: “Kubernetes and Spring Cloud”, Date: 2022-03-10, Room: “Main Hall”, Duration: 60 minutes, Link: “youtube.com/2022kubernetes”\nBook: “Cloud Native Java”, Author: “Josh Long & Kenny Bastani”, ISBN: “9781449374648”\nSpeaker: “Alice Johnson”, Bio: “Cloud Architect”, Email: “alice.johnson@example.com”",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB09-1: SpringIO Conference"
    ]
  },
  {
    "objectID": "springboot/sblab9-1.html#java-entities",
    "href": "springboot/sblab9-1.html#java-entities",
    "title": "Lab#SB09-1: SpringIO Conference",
    "section": "1.2 Java Entities",
    "text": "1.2 Java Entities\nWe are creating @Entity objects with:\n\nthe builder pattern\nthe UUID generator\nand Lombok\n\n\n1.2.1 @Builder\nThe @Builder annotation is part of Project Lombok, a Java librarythat automatically generates boilerplate code through annotations. It’s a convenient way to implement the Builder pattern without manually writing all the builder code.\n\n\nThe technique in Java for writing long expressions using the dot operator is known as the Builder Pattern.\nThis pattern is a creational design pattern that allows for the step-by-step construction of complex objects.\nIt is particularly useful when an object requires many configuration options, enabling method chaining to make the code more readable and maintainable.\n\n\n@Entity User @Builder example\n\n\nimport lombok.Builder;\nimport lombok.Getter;\n\n@Builder\n@Getter\npublic class User {\n    private final String firstName;\n    private final String lastName;\n    private final int age;\n    private final String email;\n}\nThis generates a builder that can be used like this:\n\nUser user = User.builder()\n                .firstName(\"John\")\n                .lastName(\"Doe\")\n                .age(30)\n                .email(\"john.doe@example.com\")\n                .build();\n\n\n\n1.2.2 Conference SpringIO Entities\nConference Entity\nimport lombok.*;\nimport org.hibernate.annotations.GenericGenerator;\n\nimport javax.persistence.*;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"conferences\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class Conference {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\",\n          strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false,\n          nullable = false)\n    private UUID id;\n\n    @Column(nullable = false)\n    private String date;\n\n    @Column(name = \"youtube_link\")\n    private String linkToYouTubeVideo;\n\n    @Column(nullable = false)\n    private String title;\n\n    @Column(name = \"conference_name\", \n          nullable = false)\n    private String conferenceName;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String content;\n\n    private Integer duration;\n\n    private String room;\n\n    @ManyToOne\n    @JoinColumn(name = \"book_id\", \n            nullable = false)\n    private Book book;\n\n    @ManyToOne\n    @JoinColumn(name = \"speaker_id\",\n            nullable = false)\n    private Speaker speaker;\n}\nBook Entity\nimport lombok.*;\nimport org.hibernate.annotations.GenericGenerator;\n\nimport javax.persistence.*;\nimport java.util.List;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"books\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class Book {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\",\n            strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false,\n            nullable = false)\n    private UUID id;\n\n    @Column(nullable = false)\n    private String title;\n\n    @Column(nullable = false)\n    private String author;\n\n    @Column(nullable = false, unique = true)\n    private String ISBN;\n\n    @OneToMany(mappedBy = \"book\")\n    private List&lt;Conference&gt; conferences;\n}\nSpeaker Entity\nimport lombok.*;\nimport org.hibernate.annotations.GenericGenerator;\n\nimport javax.persistence.*;\nimport java.util.List;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"speakers\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class Speaker {\n\n    @Id\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name = \"UUID\",\n            strategy = \"org.hibernate.id.UUIDGenerator\")\n    @Column(name = \"id\", updatable = false,\n            nullable = false)\n    private UUID id;\n\n    @Column(nullable = false)\n    private String name;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String bio;\n\n    @Column(nullable = false, unique = true)\n    private String email;\n\n    @OneToMany(mappedBy = \"speaker\")\n    private List&lt;Conference&gt; conferences;\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB09-1: SpringIO Conference"
    ]
  },
  {
    "objectID": "springboot/sblab9-1.html#creating-conference-objects",
    "href": "springboot/sblab9-1.html#creating-conference-objects",
    "title": "Lab#SB09-1: SpringIO Conference",
    "section": "1.3 Creating Conference Objects",
    "text": "1.3 Creating Conference Objects\nWe’ll instantiate the Conference, Book, and Speaker classes. Here’s how we can do this using the builder pattern provided by Lombok:\n\n\n\n@Entity creation\n\nObject 1\nBook book1 = Book.builder()\n    .id(UUID.randomUUID())\n    .title(\"Spring Boot in Action\")\n    .author(\"Craig Walls\")\n    .ISBN(\"9781617292545\")\n    .build();\n\nSpeaker speaker1 = Speaker.builder()\n    .id(UUID.randomUUID())\n    .name(\"Stéphane Nicoll\")\n    .bio(\"Spring Framework committer\")\n    .email(\"snicoll@pivotal.io\")\n    .build();\n\nConference conference1 = Conference.builder()\n     .id(UUID.randomUUID())\n     .date(\"2023-05-17\")\n     .linkToYouTubeVideo(\"https://www.youtube.com/watch?v=TtQTF7M9xPo\")\n     .title(\"Spring Boot 3.0 & Spring Framework 6.0: What's New\")\n     .conferenceName(\"Spring I/O 2023\")\n     .content(\"Overview of new features in Spring Boot 3.0 and Spring Framework 6.0, including Java 17 baseline, native compilation, and observability improvements.\")\n     .duration(50)\n     .room(\"Auditorium 1\")\n     .book(book1)\n     .speaker(speaker1)\n     .build();\nObject 2\nBook book2 = Book.builder()\n     .id(UUID.randomUUID())\n     .title(\"Spring Security in Action\")\n     .author(\"Laurentiu Spilca\")\n     .ISBN(\"9781617297731\")\n     .build();\n\nSpeaker speaker2 = Speaker.builder()\n     .id(UUID.randomUUID())\n     .name(\"Rob Winch\")\n     .bio(\"Spring Security lead\")\n     .email(\"rwinch@pivotal.io\")\n     .build();\n\nConference conference2 = Conference.builder()\n     .id(UUID.randomUUID())\n     .date(\"2023-05-18\")\n     .linkToYouTubeVideo(\"https://www.youtube.com/watch?v=wYYKNhCXVVE\")\n     .title(\"Securing Spring Boot 3 Applications\")\n     .conferenceName(\"Spring I/O 2023\")\n     .content(\"Exploration of security features in Spring Boot 3, including OAuth 2.0 and OpenID Connect support, and best practices for securing microservices.\")\n     .duration(45)\n     .room(\"Room B\")\n     .book(book2)\n     .speaker(speaker2)\n     .build();\nObject 3\nBook book3 = Book.builder()\n     .id(UUID.randomUUID())\n     .title(\"Reactive Spring\")\n     .author(\"Josh Long\")\n     .ISBN(\"9781732910225\")\n     .build();\n\nSpeaker speaker3 = Speaker.builder()\n     .id(UUID.randomUUID())\n     .name(\"Josh Long\")\n     .bio(\"Spring Developer Advocate\")\n     .email(\"jlong@pivotal.io\")\n     .build();\n\nConference conference3 = Conference.builder()\n     .id(UUID.randomUUID())\n     .date(\"2022-05-26\")\n     .linkToYouTubeVideo(\"https://www.youtube.com/watch?v=TKK4Oi1Xc-Y\")\n     .title(\"Reactive Spring\")\n     .conferenceName(\"Spring I/O 2022\")\n     .content(\"Deep dive into reactive programming with Spring, covering Project Reactor, Spring WebFlux, and reactive data access.\")\n     .duration(55)\n     .room(\"Main Hall\")\n     .book(book3)\n     .speaker(speaker3)\n     .build();\nObject 4\nBook book4 = Book.builder()\n      .id(UUID.randomUUID())\n      .title(\"Native Image Definitive Guide\")\n      .author(\"Oleg Šelajev\")\n      .ISBN(\"9781492078531\")\n      .build();\n\nSpeaker speaker4 = Speaker.builder()\n      .id(UUID.randomUUID())\n      .name(\"Sébastien Deleuze\")\n      .bio(\"Spring Framework committer\")\n      .email(\"sdeleuze@vmware.com\")\n      .build();\n\nConference conference4 = Conference.builder()\n      .id(UUID.randomUUID())\n      .date(\"2024-05-23\")\n      .linkToYouTubeVideo(\"https://www.youtube.com/placeholder_2024\") \n      // Placeholder link for future conference video.\n      .\n      title=\"Spring Native and GraalVM: The Future of Spring Applications\"\n      conferenceName=\"Spring I/O 2024\"\n      content=\"Exploring the latest advancements in Spring Native and GraalVM integration, focusing on performance improvements and reduced startup times.\"\n      duration=60 \n      room=\"Innovation Theater\"\n      book=book4 \n      speaker=speaker4 \n      build();",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB09-1: SpringIO Conference"
    ]
  },
  {
    "objectID": "springboot/sblab9-1.html#sql-data-initialization-with-data.sql",
    "href": "springboot/sblab9-1.html#sql-data-initialization-with-data.sql",
    "title": "Lab#SB09-1: SpringIO Conference",
    "section": "1.4 SQL Data Initialization with data.sql",
    "text": "1.4 SQL Data Initialization with data.sql\nCreate a data.sql file in src/main/resources with the following content:\n\n-- Insert Books \nINSERT INTO books (id, title, author, isbn) VALUES \n(UUID(), 'Spring Boot in Action', 'Craig Walls', '9781617292545'),\n(UUID(), 'Spring Security in Action', 'Laurentiu Spilca', '9781617297731'),\n(UUID(), 'Reactive Spring', 'Josh Long', '9781732910225'),\n(UUID(), 'Native Image Definitive Guide', 'Oleg Šelajev', '9781492078531');\n\n-- Insert Speakers \nINSERT INTO speakers (id, name, bio, email) VALUES \n(UUID(), 'Stéphane Nicoll', 'Spring Framework committer', 'snicoll@pivotal.io'),\n(UUID(), 'Rob Winch', 'Spring Security lead', 'rwinch@pivotal.io'),\n(UUID(), 'Josh Long', 'Spring Developer Advocate', 'jlong@pivotal.io'),\n(UUID(), 'Sébastien Deleuze', 'Spring Framework committer', 'sdeleuze@vmware.com');\n\n-- Insert Conferences \nINSERT INTO conferences (id, date, link_to_youtube_video, title, conference_name, content, duration, room, book_id, speaker_id) VALUES \n(UUID(), '2023-05-17', 'https://www.youtube.com/watch?v=TtQTF7M9xPo', 'Spring Boot 3.0 & Spring Framework 6.0: What''s New', 'Spring I/O 2023', 'Overview of new features in Spring Boot 3.0 and Spring Framework 6.0.', 50, 'Auditorium 1', (SELECT id FROM books WHERE title='Spring Boot in Action'), (SELECT id FROM speakers WHERE name='Stéphane Nicoll')),\n(UUID(), '2023-05-18', 'https://www.youtube.com/watch?v=wYYKNhCXVVE', 'Securing Spring Boot 3 Applications', 'Spring I/O 2023', 'Exploration of security features in Spring Boot.', 45, 'Room B', (SELECT id FROM books WHERE title='Spring Security in Action'), (SELECT id FROM speakers WHERE name='Rob Winch')),\n(UUID(), '2022-05-26', 'https://www.youtube.com/watch?v=TKK4Oi1Xc-Y', 'Reactive Spring', 'Spring I/O 2022', 'Deep dive into reactive programming with Spring.', 55, 'Main Hall', (SELECT id FROM books WHERE title='Reactive Spring'), (SELECT id FROM speakers WHERE name='Josh Long')),\n(UUID(), '2024-05-23', 'https://www.youtube.com/placeholder_2024', 'Spring Native and GraalVM: The Future of Spring Applications', 'Spring I/O 2024', 'Exploring advancements in Spring Native.', 60, 'Innovation Theater', (SELECT id FROM books WHERE title='Native Image Definitive Guide'), (SELECT id FROM speakers WHERE name='Sébastien Deleuze'));\n\n\n1.4.1 UUID\nThe UUID() function in the SQL statements is a placeholder for generating unique identifiers for each record. In a real-world scenario, UUIDs (Universally Unique Identifiers) are typically generated by the application layer rather than directly in SQL, especially when using JPA with Hibernate in a Spring Boot application.\nWhen using JPA with Hibernate, UUIDs can be automatically generated by annotating the entity’s ID field with @GeneratedValue and specifying a UUID generator strategy.\nTo generate UUIDs directly in a SQL script for different databases, you can use specific functions provided by each database system. Here are examples for some popular databases:\nMySQL\n-- MySQL uses the UUID() function to generate a UUID.\nINSERT INTO books (id, title, author, isbn) VALUES \n(UUID(), 'Spring Boot in Action', 'Craig Walls', '9781617292545');\nPostgreSQL\n-- PostgreSQL requires the uuid-ossp extension for generating UUIDs.\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\nINSERT INTO books (id, title, author, isbn) VALUES \n(uuid_generate_v4(), 'Spring Boot in Action', 'Craig Walls', '9781617292545');\nSQL Server\n-- SQL Server uses the NEWID() function to generate a UUID.\nINSERT INTO books (id, title, author, isbn) VALUES \n(NEWID(), 'Spring Boot in Action', 'Craig Walls', '9781617292545');\nH2 Database\n-- H2 uses the RANDOM_UUID() function to generate a UUID.\nINSERT INTO books (id, title, author, isbn) VALUES \n(RANDOM_UUID(), 'Spring Boot in Action', 'Craig Walls', '9781617292545');",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB09-1: SpringIO Conference"
    ]
  },
  {
    "objectID": "springboot/sblab9-1.html#project-structure",
    "href": "springboot/sblab9-1.html#project-structure",
    "title": "Lab#SB09-1: SpringIO Conference",
    "section": "2.1 Project structure",
    "text": "2.1 Project structure",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB09-1: SpringIO Conference"
    ]
  },
  {
    "objectID": "springboot/sblab9-1.html#view",
    "href": "springboot/sblab9-1.html#view",
    "title": "Lab#SB09-1: SpringIO Conference",
    "section": "2.2 View",
    "text": "2.2 View\n\nThe output we see when running a new Spring Boot Vaadin project hasn’t been configured with any views yet.\nSpring Boot with Vaadin is a framework for building web applications using Java. When you start a new project, it creates a basic structure but doesn’t include any views by default. Views in Vaadin are components that represent different pages or sections of your application’s user interface.\nThe message “No views found” indicates that the application is running, but there are no defined views to display. This is expected in a fresh project.\nThe output then provides two main options for creating views:\n\nUsing Flow: This allows you to code the UI in Java, which is Vaadin’s traditional approach.\nUsing Hilla and React: This is a newer option that lets you code the UI in TypeScript with React components.\n\n\nThis output is essentially a starting point, prompting you to begin building your application’s user interface by creating views using either of the suggested methods or by following the tutorial for more detailed guidance.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB09-1: SpringIO Conference"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html",
    "href": "springboot/boot-concepts-rest.html",
    "title": "Spring Boot: Rest",
    "section": "",
    "text": "📘 Rest\nREST stands for Representational State Transfer. It is an architectural style for building web services that are designed to be lightweight, stateless, and easy to scale.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#overview",
    "href": "springboot/boot-concepts-rest.html#overview",
    "title": "Spring Boot: Rest",
    "section": "1 Overview",
    "text": "1 Overview\nAn API is a set of definitions and protocols for building and integrating application software.\n\nIt’s sometimes referred to as a contract between an information provider and an information user—establishing the content required from the consumer (the call) and the content required by the producer (the response).\n\n\n\nFor example, the API design for a weather service could specify that the user supply a zip code and that the producer reply with a 2-part answer, the first being the high temperature, and the second being the low temperature.\n\n\n\n\n\n\nRest\n\n\n\nREST is a set of architectural constraints, not a protocol or a standard. API developers can implement REST in a variety of ways.\n\n\nWhen a client request is made via a RESTful API, it transfers a representation of the state of the resource to the requester or endpoint.\nThis information, or representation, is delivered in one of several formats via HTTP: JSON (Javascript Object Notation), HTML, XLT, Python, PHP, or plain text.\n\n\n\n\n\n\nJSON\n\n\n\nJSON is the most generally popular file format to use because, despite its name, it’s language-agnostic, as well as readable by both humans and machines.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#stateless",
    "href": "springboot/boot-concepts-rest.html#stateless",
    "title": "Spring Boot: Rest",
    "section": "2 stateless",
    "text": "2 stateless\nIn REST (Representational State Transfer), a stateless system is one in which the server does not maintain any state or session information about the client between requests.\nThis means that each request from the client to the server is treated as an independent and complete operation, and the server responds with the appropriate data based solely on the information provided in the request.\nIn other words, the server does not keep track of any information about the previous requests made by the client. This is in contrast to stateful systems, where the server maintains information about the client’s session or context, and uses that information to provide a personalized response to each request.\n\n\n\n\n\n\nstateless architecture\n\n\n\nThe stateless architecture of REST provides several benefits, such as improved scalability, simplicity, and reliability, as well as allowing requests to be processed in parallel by different servers or nodes.\nHowever, it also means that the client needs to include all the necessary information in each request, and the server cannot assume any context or information beyond what is provided in the request.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#http-messages",
    "href": "springboot/boot-concepts-rest.html#http-messages",
    "title": "Spring Boot: Rest",
    "section": "3 HTTP messages",
    "text": "3 HTTP messages\nHTTP messages are how data is exchanged between a server and a client.\nThere are two types of messages:\n\nrequests sent by the client to trigger an action on the server,\nand responses, the answer from the server.\n\nHTTP messages are composed of textual information encoded in ASCII, and span over multiple lines.\n\n\nIn HTTP/1.1, and earlier versions of the protocol, these messages were openly sent across the connection. In HTTP/2, the once human-readable message is now divided up into HTTP frames, providing optimization and performance improvements.\n\n\n\nHTTP message\n\n\nHTTP requests, and responses, share similar structure and are composed of:\n\nA start-line describing the requests to be implemented, or its status of whether successful or a failure. This start-line is always a single line.\nAn optional set of HTTP headers specifying the request, or describing the body included in the message.\nA blank line indicating all meta-information for the request has been sent.\nAn optional body containing data associated with the request (like content of an HTML form), or the document associated with a response. The presence of the body and its size is specified by the start-line and HTTP headers.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#http-status-messages",
    "href": "springboot/boot-concepts-rest.html#http-status-messages",
    "title": "Spring Boot: Rest",
    "section": "4 HTTP status messages",
    "text": "4 HTTP status messages\n\nHTTP status messages\n\n\n\n\nHTTP status messages poster\n\n\nSource-status-code-poster by Steve Schoger",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#spring-boot",
    "href": "springboot/boot-concepts-rest.html#spring-boot",
    "title": "Spring Boot: Rest",
    "section": "5 Spring Boot",
    "text": "5 Spring Boot\nIn Spring Boot, the Spring MVC framework is used to build RESTful web services.\nThe @RestController annotation is used to define a class as a RESTful web service controller. This annotation is a combination of the @Controller and @ResponseBody annotations, which means that the class is a controller and the methods return the data directly rather than returning the name of a view.\nThe @RequestMapping annotation is used to map HTTP requests to specific methods in a controller class. This annotation can be used at the class level or the method level to define the path that the method should handle.\nIn addition to these annotations, Spring Boot also provides a number of other features that make it easy to build RESTful web services, such as support for JSON and XML serialization and deserialization, automatic content negotiation, and built-in exception handling.\n\n\n\n\n\n\nRest and Spring Boot\n\n\n\nIn summary, REST stands for Representational State Transfer.\nIn Spring Boot, the Spring MVC framework is used to build RESTful web services, the @RestController and @RequestMapping annotations are used to define a class as a RESTful web service controller and map HTTP requests to specific methods, respectively.\nSpring Boot provides many features to make building RESTful web services easy, such as support for JSON and XML serialization and deserialization, automatic content negotiation, and built-in exception handling.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#using-annotations",
    "href": "springboot/boot-concepts-rest.html#using-annotations",
    "title": "Spring Boot: Rest",
    "section": "6 Using Annotations",
    "text": "6 Using Annotations\nIn this table, we will explore some of the most commonly used annotations in Spring Boot. These annotations can be used to map HTTP requests to controller methods, extract data from the request, bind data to model attributes, and handle exceptions. Understanding these annotations is essential for building Spring Boot applications that are reliable, scalable, and maintainable.\n\nSpring Boot Annotations\n\n\n\n\n\n\nAnnotation\nDescription\n\n\n\n\n@Controller\nIndicates that a class serves as a Spring Boot controller.\n\n\n@RequestMapping\nMaps HTTP requests to controller methods.\n\n\n@GetMapping\nMaps HTTP GET requests to controller methods.\n\n\n@PostMapping\nMaps HTTP POST requests to controller methods.\n\n\n@PutMapping\nMaps HTTP PUT requests to controller methods.\n\n\n@DeleteMapping\nMaps HTTP DELETE requests to controller methods.\n\n\n@PathVariable\nExtracts a variable from the URL path.\n\n\n@RequestParam\nExtracts a variable from the query string or request body.\n\n\n@ModelAttribute\nBinds a method parameter to a model attribute.\n\n\n@SessionAttribute\nBinds a method parameter to a session attribute.\n\n\n@InitBinder\nInitializes a web data binder for a specific controller method.\n\n\n@ExceptionHandler\nHandles exceptions thrown by a controller method.\n\n\n@ResponseStatus\nSets the HTTP status code for a controller method.\n\n\n@ResponseBody\nIndicates that a controller method returns a response body instead of a view.\n\n\n@ControllerAdvice\nProvides global exception handling for controllers.\n\n\n\nGET, POST, PUT, PATCH, and DELETE are HTTP methods that are used to perform CRUD (Create, Read, Update, and Delete) operations on resources in a RESTful API.\n\nGET: retrieves a representation of a resource from the server.\nPOST: creates a new resource on the server.\nPUT: updates an existing resource on the server.\nPATCH: partially updates an existing resource on the server.\nDELETE: deletes a resource from the server.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#api-rest-clean-style",
    "href": "springboot/boot-concepts-rest.html#api-rest-clean-style",
    "title": "Spring Boot: Rest",
    "section": "7 API Rest clean style",
    "text": "7 API Rest clean style\nWhen designing an API in a RESTful style, it’s important to follow some best practices to ensure that your API is easy to understand, maintain, and use.\nHere are some guidelines for creating a clean RESTful API:\n\nUse HTTP methods: GET, POST, PUT, PATCH, DELETE.\nUse resource-oriented URLs with clear hierarchy, plurals, and nouns: domains\nUse query parameters for filtering and pagination.\nUse HTTP status codes to indicate request results.\nUse consistent response formats, such as JSON: @ResponseEntity\nUse versioning to handle API changes.\nProvide clear documentation with examples and practices.\n\n\n\n\nAPI Rest clean style",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#api-rest-mindmap",
    "href": "springboot/boot-concepts-rest.html#api-rest-mindmap",
    "title": "Spring Boot: Rest",
    "section": "8 API Rest mindmap",
    "text": "8 API Rest mindmap\n\n\n\nAPI Rest roadmap-mindset",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-rest.html#example",
    "href": "springboot/boot-concepts-rest.html#example",
    "title": "Spring Boot: Rest",
    "section": "9 Example",
    "text": "9 Example\n@RestController\n@RequestMapping(\"/api\")\npublic class MyController {\n    \n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello, world!\";\n    }\n    \n    @PostMapping(\"/data\")\n    public ResponseEntity&lt;Void&gt; postData(@RequestBody MyData data) {\n        // Process the data...\n        return ResponseEntity.ok().build();\n    }\n}\n\n\nBy defining controllers like this, you can create RESTful APIs and web applications that can handle a wide range of HTTP requests and responses.\n\nThe method then returns a ResponseEntity object with an HTTP status code of 200 (OK) and an empty response body.\n\nIn this example, the @RestController annotation indicates that this class is a controller, and the @RequestMapping(\"/api\") annotation specifies that all routes in this controller should be prefixed with “/api”.\nThe hello() method is annotated with @GetMapping(\"/hello\"), which means it will handle GET requests to the \"/api/hello\" endpoint and return the string “Hello, world!”.\nThe postData() method is annotated with @PostMapping(\"/data\"), which means it will handle POST requests to the \"/api/data\" endpoint and accept a JSON payload in the request body, which will be automatically converted to a MyData object using Spring’s request body parsing functionality.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Rest"
    ]
  },
  {
    "objectID": "springboot/boot-what-cycle.html",
    "href": "springboot/boot-what-cycle.html",
    "title": "Spring Boot: cycle",
    "section": "",
    "text": "📘 Request-Response Cycle\nThe flux of data between the client and server is called the request-response cycle.\nThis cycle involves the client making a request to the server for some data or action, the server processing the request and generating a response, and then sending that response back to the client.\nThis process can involve multiple layers of abstraction, such as the controller, service, and repository layers in Spring Boot, and can involve interactions with a database or other external systems.\nThe request-response cycle is fundamental to the functioning of web applications and is critical to understanding how data is exchanged between clients and servers in this context.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: cycle"
    ]
  },
  {
    "objectID": "springboot/boot-what-cycle.html#spring-boot-request-response-cycle",
    "href": "springboot/boot-what-cycle.html#spring-boot-request-response-cycle",
    "title": "Spring Boot: cycle",
    "section": "1 Spring Boot Request-Response Cycle",
    "text": "1 Spring Boot Request-Response Cycle\n\n\nThe user enters the URL in the address bar of Chrome and presses Enter.\nChrome parses the URL and initiates a request to the Spring Boot server.\nThe request is received by the web server and passed to the DispatcherServlet, which is the front controller for Spring MVC.\nThe DispatcherServlet consults the HandlerMapping to determine the appropriate controller for the request.\nThe selected controller processes the request, interacting with the service layer and the repository layer as necessary.\nThe controller generates a model object that contains the data to be displayed on the page.\nThe model is passed to the ViewResolver, which determines the appropriate view to render the response.\nThe Thymeleaf engine for templates renders the HTML based on the model and returns it to the controller.\nThe controller sends the HTML response back to the DispatcherServlet, which packages it into an HTTP response and sends it back to Chrome.\nChrome receives the response and renders the HTML, displaying the web page to the user.\n\n\n\nThe steps 5-8 may occur multiple times, depending on the complexity of the application and the number of views that need to be rendered. Additionally, the H2 database may be used by the repository layer to retrieve or store data as needed.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: cycle"
    ]
  },
  {
    "objectID": "springboot/boot-what-cycle.html#underlying-request-response-cycle",
    "href": "springboot/boot-what-cycle.html#underlying-request-response-cycle",
    "title": "Spring Boot: cycle",
    "section": "2 Underlying Request-Response Cycle",
    "text": "2 Underlying Request-Response Cycle\n\nSure, here is the complete process of handling a request from Chrome to rendering HTML using Spring Boot with a controller, service, and repository, JPA, H2 database, and Thymeleaf engine for templates:\n\nThe user enters a URL in the address bar of Chrome and presses Enter.\nChrome parses the URL and initiates an HTTP request to the Spring Boot server.\nThe request is received by the web server and passed to the DispatcherServlet, which is the front controller for Spring MVC.\nThe DispatcherServlet consults the HandlerMapping to determine the appropriate controller for the request.\nThe selected controller calls the appropriate service method to handle the request.\nThe service layer performs any necessary business logic and data validation and uses the repository layer to access the database.\nThe repository layer uses JPA to interact with the H2 database, performing CRUD operations as needed to retrieve or store data.\nThe service layer receives the data from the repository layer and formats it into a model object that can be rendered by the view.\nThe model object is passed to the view resolver, which selects the appropriate view to render the response using the Thymeleaf engine for templates.\nThe Thymeleaf engine for templates renders the HTML based on the model object and returns it to the controller.\nThe controller packages the HTML response into an HTTP response and sends it back to the client, which in this case is Chrome.\nChrome receives the response and renders the HTML, displaying the web page to the user.\n\n\n2.1 Handling errors\nIf an error occurs during any of the above steps, the following additional steps may be taken:\n\nThe error is caught by the appropriate exception handler in the controller.\nThe exception handler generates an error response, which may include a user-friendly error message.\nThe error response is sent back to the client.\n\n\n\n2.2 Auth\nIf authentication or authorization is required for the request, the following additional steps may be taken:\n\nThe request is intercepted by a security filter, which verifies that the user is authenticated and authorized to access the requested resource.\nIf the user is not authenticated, they are redirected to a login page.\nIf the user is not authorized, they are shown an access denied message.\n\n\n\n2.3 File uploads\nIf the request involves file uploads, the following additional steps may be taken:\n\nThe uploaded file(s) are received by the web server and passed to a file upload handler.\nThe file upload handler saves the uploaded file(s) to the file system or a database, as appropriate.\nThe service layer processes the uploaded file(s) as needed and updates the database.\n\n\n\n2.4 Catching\nIf the application uses caching, the following additional steps may be taken:\n\nThe request is intercepted by a caching filter, which checks if the response is already cached.\nIf the response is cached, it is returned to the client without further processing.\nIf the response is not cached, it is processed as described above, and then cached for future requests.\nThe cached response is returned to the client in response to future requests, until the cache expires or is invalidated.\n\nNote that the exact sequence and number of steps may vary depending on the specific implementation of the Spring Boot application and the requirements of the web application.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: cycle"
    ]
  },
  {
    "objectID": "springboot/boot-what-cycle.html#more-scenarios",
    "href": "springboot/boot-what-cycle.html#more-scenarios",
    "title": "Spring Boot: cycle",
    "section": "3 More scenarios",
    "text": "3 More scenarios\nAdditional scenarios that may be encountered when processing a request using Spring Boot with a controller, service, and repository, JPA, H2 database, and Thymeleaf engine for templates:\n\n3.1 Handling AJAX requests\n\nThe user initiates an AJAX request by clicking a button or link on the web page.\nThe request is received by the controller and passed to the appropriate service method.\nThe service layer performs any necessary business logic and data validation, and uses the repository layer to access the database.\nThe repository layer uses JPA to interact with the H2 database, performing CRUD operations as needed to retrieve or store data.\nThe service layer receives the data from the repository layer and formats it into a JSON object.\nThe JSON object is returned to the client and processed by the JavaScript code.\n\n\n\n3.2 Handling file downloads\n\nThe user initiates a file download request by clicking a button or link on the web page.\nThe request is received by the controller and passed to the appropriate service method.\nThe service layer performs any necessary business logic and data validation, and uses the repository layer to access the database.\nThe repository layer uses JPA to interact with the H2 database, retrieving the requested file(s).\nThe file(s) are sent back to the client in the response body with appropriate headers, such as Content-Type and Content-Disposition.\n\n\n\n3.3 Handling long-running requests\n\nThe user initiates a request that may take a long time to complete, such as generating a report or processing a large dataset.\nThe request is received by the controller and passed to the appropriate service method.\nThe service layer spawns a background thread to perform the long-running task, and returns a response to the client immediately.\nThe client periodically polls the server for updates on the status of the task.\nWhen the background task completes, the result is stored in the database or sent back to the client in a response.\n\n\n\n3.4 Handling complex database queries\n\nThe user initiates a request that requires complex database queries, such as aggregations, subqueries, or joins.\nThe request is received by the controller and passed to the appropriate service method.\nThe service layer uses JPA Criteria API or Querydsl to construct complex database queries.\nThe repository layer uses JPA to execute the queries and retrieve the requested data.\nThe service layer formats the data into a model object that can be rendered by the view.",
    "crumbs": [
      "Spring Boot Basics",
      "Spring Boot: cycle"
    ]
  },
  {
    "objectID": "springboot/sblab8-5.html",
    "href": "springboot/sblab8-5.html",
    "title": "Lab#SB08-5: Test API Rest",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-5: Test API Rest\nThere are several effective methods exist to validate API endpoints: from simple bash scripts that log responses to sophisticated testing frameworks like JUnit and RestAssured\nDevelopers have a variety of tools at their disposal. Additionally, Postman provides a user-friendly interface for manual testing, while Mockito enables unit testing with mocked dependencies.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-5: Test API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-5.html#bash-script-with-curl",
    "href": "springboot/sblab8-5.html#bash-script-with-curl",
    "title": "Lab#SB08-5: Test API Rest",
    "section": "1.1 Bash Script with cURL",
    "text": "1.1 Bash Script with cURL\nCreate a bash script to send requests and log responses:\n\n#!/bin/bash\n\n# Send GET request and save response\ncurl -X GET http://localhost:8080/api/endpoint &gt; response.json\n\n# Log the response\necho \"API Response:\" &gt;&gt; log.txt\ncat response.json &gt;&gt; log.txt\necho \"\" &gt;&gt; log.txt\n\n# Check for errors\nif grep -q \"error\" response.json; then\n    echo \"Error detected in API response\" &gt;&gt; log.txt\nelse\n    echo \"API request successful\" &gt;&gt; log.txt\nfi",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-5: Test API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-5.html#postman",
    "href": "springboot/sblab8-5.html#postman",
    "title": "Lab#SB08-5: Test API Rest",
    "section": "1.2 Postman",
    "text": "1.2 Postman\nUse Postman to send requests and validate responses:\n\nCreate a new request in Postman\nSet the HTTP method and URL\nAdd headers and request body if needed\nSend the request and examine the response\nWrite tests in the “Tests” tab using JavaScript:\n\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\npm.test(\"Response contains expected data\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.key).to.eql(\"expected_value\");\n});",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-5: Test API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-5.html#junit-and-restassured",
    "href": "springboot/sblab8-5.html#junit-and-restassured",
    "title": "Lab#SB08-5: Test API Rest",
    "section": "1.3 JUnit and RestAssured",
    "text": "1.3 JUnit and RestAssured\nTest the @RestController class using JUnit and RestAssured:\n@SpringBootTest(webEnvironment = \n    SpringBootTest.WebEnvironment.RANDOM_PORT)\npublic class ApiControllerTest {\n\n    @LocalServerPort\n    private int port;\n\n    @Test\n    public void testGetEndpoint() {\n        RestAssured.given()\n            .port(port)\n            .when()\n            .get(\"/api/endpoint\")\n            .then()\n            .statusCode(200)\n            .body(\"key\", equalTo(\"expected_value\"));\n    }\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-5: Test API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-5.html#mockito",
    "href": "springboot/sblab8-5.html#mockito",
    "title": "Lab#SB08-5: Test API Rest",
    "section": "1.4 Mockito",
    "text": "1.4 Mockito\nUse Mockito to test controller methods with mocked dependencies:\n\n@ExtendWith(MockitoExtension.class)\npublic class ApiControllerTest {\n\n    @Mock\n    private SomeService someService;\n\n    @InjectMocks\n    private ApiController apiController;\n\n    @Test\n    public void testGetEndpoint() {\n        when(someService.getData()).thenReturn(\"mocked_data\");\n\n        ResponseEntity&lt;String&gt; response = apiController.getEndpoint();\n\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(\"mocked_data\", response.getBody());\n        verify(someService).getData();\n    }\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-5: Test API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-5.html#downloads",
    "href": "springboot/sblab8-5.html#downloads",
    "title": "Lab#SB08-5: Test API Rest",
    "section": "2.1 Downloads",
    "text": "2.1 Downloads\nDownload latest version or add to pom.xml:\n&lt;dependency&gt;\n    &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n    &lt;artifactId&gt;h2&lt;/artifactId&gt;\n    &lt;version&gt;2.3.232&lt;/version&gt;\n&lt;/dependency&gt;\nLinks\n\nh2database\nUsing server",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-5: Test API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab8-5.html#lock-and-.trace",
    "href": "springboot/sblab8-5.html#lock-and-.trace",
    "title": "Lab#SB08-5: Test API Rest",
    "section": "3.1 .lock and .trace",
    "text": "3.1 .lock and .trace\n\nBe careful with the files RestaurantMangerDB creates like .lock and .trace.\n\n.lock and .trace files are typically used by database systems for management and troubleshooting purposes:\n.lock files: - Used to prevent concurrent access to database resources - Indicate that a process has exclusive access to a particular file or resource - Help maintain data integrity by avoiding conflicts between multiple processes\n.trace files: - Contain detailed logs of database operations and events - Used for debugging and performance analysis - May include SQL statements, execution plans, and error messages - Helpful for identifying issues like deadlocks or slow queries",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-5: Test API Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html",
    "href": "springboot/boot-concepts-jpa-2.html",
    "title": "Spring Boot: JPA Mappings",
    "section": "",
    "text": "📘 JPA Mappings and relationships\nSpring Boot provides an implementation of the Java Persistence API (JPA) to simplify database access: ORM (Object-Relational Mapping)\nIn JPA, entity classes represent tables in the database, and relationships between entities are mapped using annotations.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Mappings"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html#jpa-implementations-orm",
    "href": "springboot/boot-concepts-jpa-2.html#jpa-implementations-orm",
    "title": "Spring Boot: JPA Mappings",
    "section": "1 JPA Implementations: ORM",
    "text": "1 JPA Implementations: ORM\nOpenJPA, Hibernate, and EclipseLink are all popular ORM (Object-Relational Mapping) frameworks that provide implementations of the Java Persistence API (JPA).\nThese frameworks simplify database access and management by mapping Java objects to database tables, and they provide features to optimize database performance and reduce the amount of boilerplate code required to interact with the database.\n\n\n\nORM implemtations JPA: vendors\n\n\n\nOpenJPA is an Apache project that provides a lightweight, high-performance implementation of JPA.\nHibernate is a popular ORM framework that’s widely used in Spring Boot applications. It provides a rich set of features and has excellent community support.\nEclipseLink is an open-source JPA implementation that’s known for its performance and flexibility, and it’s frequently used in Java EE applications.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Mappings"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html#orm-hibernate",
    "href": "springboot/boot-concepts-jpa-2.html#orm-hibernate",
    "title": "Spring Boot: JPA Mappings",
    "section": "2 ORM: Hibernate",
    "text": "2 ORM: Hibernate\nHibernate is a popular ORM (Object-Relational Mapping) framework that provides a powerful implementation of JPA. It’s widely used in Spring Boot applications to simplify database access and management.\n\n\n\n\n\nHibernate JPA\n\n\nHibernate uses annotations and XML configurations to map Java objects to database tables, and it provides several features to simplify CRUD (Create, Read, Update, and Delete) operations on the database.\nHibernate also provides support for caching, lazy loading, and transaction management, which can help you optimize the performance of your application.\n\n\n\nJPA Hibernate stack\n\n\n\n\nSpring Boot and Hibernate provide a powerful combination of tools for building Java-based web applications that interact with databases.\nBy using these frameworks together, you can simplify database access, improve performance, and focus on building the core functionality of your application.\nWhen you use Hibernate in your Spring Boot application, you can define entity classes using JPA annotations, just like you would with the standard JPA implementation provided by Spring Boot. Hibernate also provides its own set of annotations that can be used to fine-tune the behavior of the ORM framework.\nFor example, you can use the @GeneratedValue annotation to specify how primary keys are generated, or the @Fetch annotation to specify how data is retrieved from the database.\n\n\n\nJPA Hibernate architecture\n\n\nIn addition to its rich set of features, Hibernate is also known for its excellent documentation and community support. You can find plenty of tutorials, sample code, and forums online to help you get started with Hibernate in your Spring Boot application.\n\nJPA",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Mappings"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-2.html#annotations",
    "href": "springboot/boot-concepts-jpa-2.html#annotations",
    "title": "Spring Boot: JPA Mappings",
    "section": "3 Annotations",
    "text": "3 Annotations\n\nJPA Annotations\n\n\n\n\n\n\nAnnotation\nDescription\n\n\n\n\n@Entity\nSpecifies that the class is an entity and will be managed by the EntityManager.\n\n\n@Table\nSpecifies the database table name for the entity.\n\n\n@Id\nSpecifies the primary key field of the entity.\n\n\n@GeneratedValue\nSpecifies how the primary key should be generated.\n\n\n@Column\nSpecifies the database column name for a field.\n\n\n@JoinColumn\nSpecifies the join column when using a relationship.\n\n\n@OneToMany\nDefines a one-to-many relationship between two entities.\n\n\n@ManyToOne\nDefines a many-to-one relationship between two entities.\n\n\n@ManyToMany\nDefines a many-to-many relationship between two entities.\n\n\n@JoinTable\nSpecifies the join table for a many-to-many relationship.\n\n\n@Embedded\nSpecifies that the field should be mapped as an embedded object.\n\n\n@Transient\nSpecifies that the field should not be persisted to the database.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Mappings"
    ]
  },
  {
    "objectID": "springboot/labsb08-4-commits/commits-table-restaurantManager.html",
    "href": "springboot/labsb08-4-commits/commits-table-restaurantManager.html",
    "title": "albertprofe wiki",
    "section": "",
    "text": "Hash\nDate\nMessage\nProject\n\n\n\n\na274a39\n2024-11-07 11:08 Thursday\ntestDeleteOrderMenuQtyFromOrderRestaurant() and solved1(), solved2() and solved3()\n&lt;&gt;\n\n\n29a2328\n2024-11-07 08:29 Thursday\ntestUpdateOrderMenuQty()\n&lt;&gt;\n\n\n3ef8917\n2024-11-06 17:58 Wednesday\ntestDeleteOrderMenuQty() and not deleting Order neither Menu\n&lt;&gt;\n\n\n4ed525b\n2024-11-06 13:57 Wednesday\nCustomerControllerTest: testApi() with H2 server-local and 3-port system: 8080, 8082, 8084\n&lt;&gt;\n\n\n935a64b\n2024-11-06 13:55 Wednesday\nCustomerControllerTest: testApi() with H2 server-local and 3-port system: 8080, 8082, 8084\n&lt;&gt;\n\n\n4c8a75d\n2024-11-06 12:31 Wednesday\nCustomerControllerTest: testApi() with H2 server-local\n&lt;&gt;\n\n\na7fd158\n2024-11-05 12:05 Tuesday\nCustomerControllerTest\n&lt;&gt;\n\n\nde7bcf6\n2024-11-05 11:20 Tuesday\nPRA05: Spring Boot JPA Inheritance and Abstraction\n&lt;&gt;\n\n\nab8c1e3\n2024-10-30 11:59 Wednesday\nDataLoader with EatIn, Shipping and TakeAway Orders\n&lt;&gt;\n\n\n0656084\n2024-10-30 11:20 Wednesday\nDataLoader polish\n&lt;&gt;\n\n\n6a5958b\n2024-10-29 18:04 Tuesday\nDataPopulate controller and DataLoader utility java faker, h2 local\n&lt;&gt;\n\n\n60218cc\n2024-10-29 13:06 Tuesday\nOrderRestaurant Service and Controller\n&lt;&gt;\n\n\n4eb33c4\n2024-10-29 13:01 Tuesday\nRefactor Order @ManyToMany Menu to OrderMenuQty @Entity\n&lt;&gt;\n\n\n695da9b\n2024-10-29 12:40 Tuesday\nService and Rest Controller for MenuItem and MenuRestaurant; Menu @ManyToMany MenuItem\n&lt;&gt;\n\n\n7ec20af\n2024-10-29 12:22 Tuesday\nService and Rest Controller for Table Restaurant and Booking\n&lt;&gt;\n\n\n63515bf\n2024-10-28 10:41 Monday\nPRA04: Refactoring Many-to-Many Relationship in RestaurantManager\n&lt;&gt;\n\n\n38d5397\n2024-10-26 12:02 Saturday\ncustomerServiceTest(): adding more tests for CustomerService\n&lt;&gt;\n\n\n19f57e5\n2024-10-25 13:48 Friday\ncustomerServiceTest()\n&lt;&gt;\n\n\na1db26d\n2024-10-24 13:40 Thursday\nBooking many-to-many with Customer/Table: customer.getBookings()\n&lt;&gt;\n\n\nbeadb26\n2024-10-24 13:40 Thursday\nBooking many-to-many with Customer/Table: customer.getBookings()\n&lt;&gt;\n\n\ncd25ca0\n2024-10-24 13:05 Thursday\nBooking many-to-many with Customer/Table: table.getBookings()\n&lt;&gt;\n\n\n8b4e9bc\n2024-10-24 12:03 Thursday\nBooking many-to-many with Customer/Table & test createBooking, delete old tests and add new tests to RelationshipsOrderRestaurantTest\n&lt;&gt;\n\n\na85164f\n2024-10-23 10:48 Wednesday\nupdate testRemovingMenusFromOrder() and versioning with testRemovingMenusFromOrder_butNotRelationship()\n&lt;&gt;\n\n\nbc75ce3\n2024-10-22 13:02 Tuesday\ntestAddingMenusToOrder() and testRemovingMenusFromOrder()\n&lt;&gt;\n\n\n822675e\n2024-10-21 13:02 Monday\nPRA03: Implementing ManyToMany Relationships in JPA\n&lt;&gt;\n\n\n97cb8e9\n2024-10-21 12:24 Monday\nTestCreateOrderMenu_stackOverflow ()\n&lt;&gt;\n\n\nf4d3326\n2024-10-17 12:34 Thursday\npolish\n&lt;&gt;\n\n\nd65b4a9\n2024-10-17 10:25 Thursday\nTestCreateOrderMenu() and update TestCreateOrder()\n&lt;&gt;\n\n\n85a23ab\n2024-10-16 13:35 Wednesday\nmaanytomany menu n:m order\n&lt;&gt;\n\n\n28ea895\n2024-10-16 13:16 Wednesday\nmenu refactor to MenuRestaurant, entity and serializable\n&lt;&gt;\n\n\n0a0e062\n2024-10-16 11:47 Wednesday\nPRA02: Implementing OneToMany and ManyToOne Relationships in JPA\n&lt;&gt;\n\n\nc562d8d\n2024-10-16 10:53 Wednesday\nTestCreateBookingTable() with JPA, TableRestaurant 1:n Booking bidirectional relationship\n&lt;&gt;\n\n\n51b172d\n2024-10-15 14:02 Tuesday\nTestCreateOrder() with JPA, Customer 1:n TakeAwayOrder unidirectional relationship\n&lt;&gt;\n\n\n36a3e16\n2024-10-15 09:58 Tuesday\nupdate TakeAway with customer TestCreateOrder()\n&lt;&gt;\n\n\n66fff05\n2024-10-15 08:14 Tuesday\nupdate EatInOrder with customer TestCreateOrder()\n&lt;&gt;\n\n\na47b9cc\n2024-10-14 13:53 Monday\ninherence of order class, EatInOrder shipOrder, TakeAwayOrder and .env disabled\n&lt;&gt;\n\n\nf3bcedf\n2024-10-11 13:53 Friday\nenvironment variables from application.properties and .env file\n&lt;&gt;\n\n\n1905407\n2024-10-11 11:32 Friday\nenvironment variables from application.properties\n&lt;&gt;\n\n\na361bd0\n2024-10-10 09:46 Thursday\nMerge remote-tracking branch ‘origin/master’ # Conflicts: # src/main/resources/application.properties\n&lt;&gt;\n\n\n997f0b7\n2024-10-10 08:25 Thursday\ncreate two environments: local and memory by application.properties\n&lt;&gt;\n\n\n988c421\n2024-10-10 08:25 Thursday\ncreate two environments: local and memory by application.properties\n&lt;&gt;\n\n\ncc73243\n2024-10-09 12:57 Wednesday\ntest JPA whenFindByEmail_thenReturnCustomer()\n&lt;&gt;\n\n\nff360b3\n2024-10-09 12:36 Wednesday\nPRA01: Spring Boot JPA Repository and Entity Class Exercise\n&lt;&gt;\n\n\na62ebbd\n2024-10-09 11:42 Wednesday\nUpdate customer with age, vipCustomer and deleted, add common headers method, update faker, queries and test JPA\n&lt;&gt;\n\n\n319b942\n2024-10-08 13:29 Tuesday\nCustomerController ResponseEntity implemented\n&lt;&gt;\n\n\n096cf29\n2024-10-08 11:28 Tuesday\nh2 db local application.properties and ddl create\n&lt;&gt;\n\n\n61eeb7a\n2024-10-07 12:42 Monday\nCustomerController with ResposeEntity and Headers\n&lt;&gt;\n\n\n8c8b6df\n2024-10-07 11:22 Monday\nCustomerController and customerService\n&lt;&gt;\n\n\n8e7cd37\n2024-10-07 11:00 Monday\nCustomerController to customerRespository\n&lt;&gt;\n\n\n7c40796\n2024-10-04 11:46 Friday\nswagger, interface customer service and service implementation and POST customer controller\n&lt;&gt;\n\n\n8984943\n2024-10-03 13:51 Thursday\nMerge remote-tracking branch ‘origin/master’\n&lt;&gt;\n\n\n6624516\n2024-10-03 13:46 Thursday\nupdated Help.md\n&lt;&gt;\n\n\n8f485dc\n2024-10-03 13:46 Thursday\nbasic css to customers table and utilities with CustomerDataLoader\n&lt;&gt;\n\n\n99f4111\n2024-10-03 13:39 Thursday\nbasic css to customers table and utilities with CustomerDataLoader\n&lt;&gt;\n\n\n5896049\n2024-10-03 12:29 Thursday\nwebcontroller implemented\n&lt;&gt;\n\n\n1fd1506\n2024-10-03 10:50 Thursday\nwebcontroller\n&lt;&gt;\n\n\n5bbcac5\n2024-10-03 10:47 Thursday\ncreate project H2 rest customer faker\n&lt;&gt;\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "springboot/sblab8-4.html",
    "href": "springboot/sblab8-4.html",
    "title": "Lab#SB08-4: JPA",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-4: RestaurantManager JPA, Queries, Mappings and Relationships ## Summary\nThe Spring Boot RestaurantManagement System utilizes JPA to efficiently manage restaurant operations:\n\nKey entities include Menu, MenuItem, Table, Order, and Customer, with defined relationships such as one-to-many and many-to-many.\nThe system employs repositories for database H2 access and services for business logic.\nCustom queries enhance data retrieval, enabling functionalities like fetching recent orders or customer-specific orders.\n\nThis architecture not only facilitates effective data management but also provides a robust foundation for building scalable restaurant applications, leveraging the power of Spring Boot and JPA for seamless integration and performance.\nAll Commits from master branch, repo AlbertProfe / restaurantManager (Public) table:\nAll commits from feature-order-abstract branch",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#restaurantmanager-relationships-goal",
    "href": "springboot/sblab8-4.html#restaurantmanager-relationships-goal",
    "title": "Lab#SB08-4: JPA",
    "section": "2.1 RestaurantManager relationships goal",
    "text": "2.1 RestaurantManager relationships goal\n\nInheritance:\n\nTakeAwayOrder, ShippingOrderRestaurant, and EatInOrderRestaurant all inherit from OrderRestaurant.\n\nOne-to-Many/Many-to-One associations:\n\nOne-to-Many\n\nA Customer can have multiple TakeAwayOrder.\nA TableRestaurant can be associated with multiple EatInOrderRestaurant, we do not allow to group tables .\nA Booking can be associated with multiple TableRestaurant.\n\nMany-to-One\n\nMultiple TakeAwayOrders can be associated with a single Customer.\n\n\nMany-to-Many associations:\n\nMany-to-Many\n\nOrderRestaurant and MenuRestaurant have a many-to-many relationship.\n\nTo refactor with Join Table @Entity: Order_Menu_Qty\n\nMenuRestaurant and MenuItemRestaurant have a many-to-many relationship.\n\nMany-to-Many with join table as entity\n\nThe relationship between Customer and TableRestaurant is effectively a many-to-many relationship, with Booking serving as a join table entity.\nThis is implemented as two one-to-many relationships:\n\nOne Customer can have many Bookings (one-to-many)\nOne Booking can have many TableRestaurants (one-to-many)\n\nThis structure allows for additional attributes on the Booking entity (such as date, time, etc.) while maintaining the many-to-many relationship between Customer and TableRestaurant.\n\n\n\n\n\nThis Lab#SB08-4 will implement this entities relationships:\n\n\n\nRestaurantManager UML\n\n\nMany-to-Many with join table as entity Customer 1-n Booking n-1 TableRestaurant relationship:\n\n\n\n\n\nclassDiagram\ndirection LR\n    class TableRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -String description\n        -int qty\n        -boolean busy\n        -ArrayList&lt;Booking&gt; Bookings\n        +toString()\n    }\n    \n    class Customer {\n        &lt;&lt;Entity&gt;&gt;\n        -String id\n        -String name\n        -String email\n        -String phoneNumber\n        -int age\n        -boolean vipCustomer\n        -boolean deleted\n        -ArrayList&lt;Booking&gt; Bookings\n        +toString()\n    }\n\n    class Booking {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -String phoneNumber\n        -int peopleQty\n        -LocalDateTime date\n        -LocalDateTime SlotDate\n        -String service\n        -boolean confirmed\n        -TableRestaurant tableRestaurant\n        -Customer customer\n        +toString()\n    }\n\n    Booking \"n\" *-- \"1\" TableRestaurant\n    Customer  \"1\" --* \"n\" Booking",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#updated-uml",
    "href": "springboot/sblab8-4.html#updated-uml",
    "title": "Lab#SB08-4: JPA",
    "section": "2.2 Updated UML",
    "text": "2.2 Updated UML\nThis is the updated UML from Lab#SB08-1 UML and DDD correspond to this commit: TestCreateOrder() with JPA, Customer 1:n TakeAwayOrder unidirectional relationship\n\n\n\nUpdated UML from Lab#SB08-1 UML and DDD\n\n\n\n\n\n\nclassDiagram\n    class OrderRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String id\n        -Date date\n        -String waiter\n        -int peopleQty\n        -double totalPayment\n        -boolean paid\n        -ArrayList&lt;Menu&gt; menus\n        +toString()\n    }\n    class TakeAwayOrder {\n        &lt;&lt;Entity&gt;&gt;\n        -Customer customerTakeAway\n        +toString()\n    }\n    class TableRestaurant {\n        -String name\n        -String description\n        -int qty\n        -boolean busy\n        +toString()\n    }\n    class ShippingOrderRestaurant {\n        -String address\n        -String city\n        -String riderName\n        +toString()\n    }\n    class Customer {\n        &lt;&lt;Entity&gt;&gt;\n        -String id\n        -String name\n        -String email\n        -String phoneNumber\n        -int age\n        -boolean vipCustomer\n        -boolean deleted\n    }\n    class EatInOrderRestaurant {\n        -ArrayList&lt;TableRestaurant&gt; tableRestaurants\n        +toString()\n    }\n    class Menu {\n        &lt;&lt;Serializable&gt;&gt;\n        -String name\n        -Double price\n        -String content\n        -boolean active\n        -boolean water\n    }\n    class Booking {\n        -String name\n        -String phoneNumber\n        -int peopleQty\n        -LocalDateTime date\n        -TableRestaurant tableRestaurant\n        -boolean confirmed\n        +toString()\n    }\n\n    OrderRestaurant &lt;|-- TakeAwayOrder\n    OrderRestaurant &lt;|-- ShippingOrderRestaurant\n    OrderRestaurant &lt;|-- EatInOrderRestaurant\n    OrderRestaurant \"1\" *-- \"*\" Menu\n    TakeAwayOrder \"*\" -- \"1\" Customer\n    EatInOrderRestaurant \"1\" *-- \"*\" TableRestaurant\n    Booking \"1\" -- \"1\" TableRestaurant",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#uml-with-menuitemsrestaurant",
    "href": "springboot/sblab8-4.html#uml-with-menuitemsrestaurant",
    "title": "Lab#SB08-4: JPA",
    "section": "2.3 UML with MenuItemsRestaurant",
    "text": "2.3 UML with MenuItemsRestaurant\n\nAll model classes now are @Entity.\n\nThis UML would fit almost the final version (with MenuItemsRestaurant) of our project (without the @ManyToMany Customer 1-n Booking n-1 TableRestaurant relationship:\n\n\n\nUML without the Many-To-Many Customer 1-n Booking n-1 TableRestaurant relationship:\n\n\n\n\n\n\nclassDiagram\n    class OrderRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String id\n        -Date date\n        -String waiter\n        -int peopleQty\n        -double totalPayment\n        -boolean paid\n        -ArrayList&lt;MenuRestaurant&gt; menusRestaurant\n        +toString()\n    }\n    class TakeAwayOrder {\n        &lt;&lt;Entity&gt;&gt;\n        -Customer customerTakeAway\n        +toString()\n    }\n    class TableRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -String description\n        -int qty\n        -boolean busy\n        -ArrayList&lt;Booking&gt; Bookings\n        +toString()\n    }\n    class ShippingOrderRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String address\n        -String city\n        -String riderName\n        +toString()\n    }\n    class Customer {\n        &lt;&lt;Entity&gt;&gt;\n        -String id\n        -String name\n        -String email\n        -String phoneNumber\n        -int age\n        -boolean vipCustomer\n        -boolean deleted\n    }\n    class EatInOrderRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -ArrayList&lt;TableRestaurant&gt; tablesRestaurant\n        +toString()\n    }\n    class MenuRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -Double price\n        -String content\n        -boolean active\n        -boolean water\n        -ArrayList&lt;OrderRestaurant&gt; ordersRestaurant\n        -ArrayList&lt;MenuItemRestaurant&gt; MenusItemsRestaurant\n    }\n    class MenuItemRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -String content\n        -boolean active\n        -ArrayList&lt;MenuRestaurant&gt; MenusRestaurant\n    }\n    class Booking {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -String phoneNumber\n        -int peopleQty\n        -LocalDateTime date\n        -TableRestaurant tableRestaurant\n        -boolean confirmed\n        +toString()\n    }\n\n    OrderRestaurant &lt;|-- TakeAwayOrder\n    OrderRestaurant &lt;|-- ShippingOrderRestaurant\n    OrderRestaurant &lt;|-- EatInOrderRestaurant\n    OrderRestaurant \"n\" *--* \"m\" MenuRestaurant\n    MenuRestaurant \"n\" *--* \"m\" MenuItemRestaurant\n    TakeAwayOrder \"n\" *-- \"1\" Customer\n    EatInOrderRestaurant \"1\" *-- \"n\" TableRestaurant\n    Booking \"1\" *-- \"n\" TableRestaurant",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#uml-with-manytomany-join-table-entity",
    "href": "springboot/sblab8-4.html#uml-with-manytomany-join-table-entity",
    "title": "Lab#SB08-4: JPA",
    "section": "2.4 UML with ManyToMany join table entity",
    "text": "2.4 UML with ManyToMany join table entity\nWith the Many-To-Many relationship:\n\nCustomer 1-n Booking n-1 TableRestaurant\nOrderRestaurant 1-n OrderMenuQty n-1 MenuRestaurant\n\n\n\n\nUML with Many-To-Many relationships:\n\n\n\n\n\n\nclassDiagram\ndirection LR\n    class OrderRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String id\n        -Date date\n        -String waiter\n        -int peopleQty\n        -double totalPayment\n        -boolean paid\n        -ArrayList&lt;OrderMenuQty&gt; OrderMenuQtys\n        +toString()\n    }\n\nclass OrderMenuQty {\n        &lt;&lt;Entity&gt;&gt;\n        -OrderRestaurant orderRestaurant\n        -MenuRestaurant menuRestaurant\n        +toString()\n    }\n\n    class TakeAwayOrder {\n        &lt;&lt;Entity&gt;&gt;\n        -Customer customerTakeAway\n        +toString()\n    }\n\n    class ShippingOrderRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String address\n        -String city\n        -String riderName\n        +toString()\n    }\n    \n    class EatInOrderRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -ArrayList&lt;TableRestaurant&gt; tablesRestaurant\n        +toString()\n    }\n    class MenuRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -Double price\n        -String content\n        -boolean active\n        -boolean water\n        -ArrayList&lt;OrderMenuQty&gt; OrderMenuQtys\n        -ArrayList&lt;MenuItemRestaurant&gt; MenusItemsRestaurant\n    }\n    class MenuItemRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -String content\n        -boolean active\n        -ArrayList&lt;MenuRestaurant&gt; MenusRestaurant\n    }\n    \n    class Booking {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -String phoneNumber\n        -int peopleQty\n        -LocalDateTime date\n        -LocalDateTime BookingDate\n        -String service\n        -TableRestaurant tableRestaurant\n        -boolean confirmed\n        -Customer customer\n        +toString()\n    }\n\n    class Customer {\n        &lt;&lt;Entity&gt;&gt;\n        -String id\n        -String name\n        -String email\n        -String phoneNumber\n        -int age\n        -boolean vipCustomer\n        -boolean deleted\n        \n    }\n\n    class TableRestaurant {\n        &lt;&lt;Entity&gt;&gt;\n        -String name\n        -String description\n        -int qty\n        -boolean busy\n        -ArrayList&lt;Booking&gt; Bookings\n        +toString()\n    }\n\n    OrderRestaurant &lt;|-- TakeAwayOrder\n    OrderRestaurant &lt;|-- ShippingOrderRestaurant\n    OrderRestaurant &lt;|-- EatInOrderRestaurant\n    OrderRestaurant \"1\" *--* \"m\" OrderMenuQty\n    OrderMenuQty \"n\" *--* \"1\" MenuRestaurant\n    MenuRestaurant \"n\" *--* \"m\" MenuItemRestaurant\n    TakeAwayOrder \"n\" *-- \"1\" Customer\n    EatInOrderRestaurant \"n\" *-- \"1\" TableRestaurant\n    Booking \"n\" *-- \"1\" TableRestaurant\n    Customer  \"1\" --* \"n\" Booking",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#onetomany-and-manytoone",
    "href": "springboot/sblab8-4.html#onetomany-and-manytoone",
    "title": "Lab#SB08-4: JPA",
    "section": "3.1 OneToMany and ManyToOne",
    "text": "3.1 OneToMany and ManyToOne\n\n\n\nEntity @oneToMany\n\n\nOneToMany Unidirectional\n\nOne entity has a collection of another entity\nOnly the owning side (the “One” side) has a reference to the other entity\nExample: One Department has many Employees\n\n@Entity\npublic class Department {\n    @OneToMany\n    private List&lt;Employee&gt; employees;\n}\n\n@Entity\npublic class Employee {\n    // No reference to Department\n}\n\n3.1.1 @OneToMany attributes\n\n\nEager loading fetches all required data upfront when an object is first loaded. It immediately initializes and loads related entities or resources, ensuring everything is readily available.\nThis approach can improve performance for frequently accessed data but may increase initial load times and memory usage.\n\nLazy loading, conversely, defers data loading until it’s explicitly requested. It retrieves only the essential data initially, loading related entities or resources on-demand when accessed.\nThis method can enhance initial performance and reduce memory consumption, particularly for large datasets or infrequently used resources.\nHowever, it may introduce slight delays when accessing lazy-loaded data for the first time\n\n\nfetch: Specifies whether to lazily or eagerly load the related entities. Default is FetchType.LAZY.\ncascade: Specifies which operations should cascade to child entities. Options include ALL, PERSIST, MERGE, REMOVE, etc.\norphanRemoval: If true, removes child entities when they are removed from the collection. Default is false.\nmappedBy: Specifies the field that owns the relationship in the child entity.\noptional: If false, a non-null relationship must always exist.\n\n\n\n\n\n\n\nEager vs Lazy\n\n\n\nEager loading fetches all related data immediately, making everything available upfront. It can be faster for frequent access but may use more memory.\nLazy loading, on the other hand, loads related data only when requested, initializing it on-demand. This approach saves memory but might cause slight delays on first access.\n\n\nKey Points\n\nFor @OneToMany and @ManyToMany, the default fetch type is LAZY.\nFor @ManyToOne and @OneToOne, the default fetch type is EAGER5.\nUsing FetchType.LAZY is generally recommended to avoid performance issues, especially for collections.\nThe cascade attribute determines which operations should be cascaded from parent to child entities.\nThe orphanRemoval attribute is useful for automatically removing child entities when they are no longer referenced by the parent.\n\nManyToOne Unidirectional\n\n\nManyToOne Unidirectional example: Order and Customer\n\nMany entities are associated with one entity\nOnly the owning side (the “Many” side) has a reference to the other entity\nExample: Many Employees belong to one Department\n\n@Entity\npublic class Employee {\n    @ManyToOne\n    private Department department;\n}\n\n@Entity\npublic class Department {\n    // No reference to Employee\n}\nBidirectional Relationships\n\n\nBidirectional Relationships example:\n\nLibrary2: API Rest Author Book @OneToMany CRUD with Swagger\nTestCreateBookingTable() with JPA, TableRestaurant 1:n Booking bidirectional relationship\n\n\nBoth entities have references to each other\nThe “Many” side is usually the owning side\nExample: One Department has many Employees, and each Employee belongs to one Department\n\n@Entity\npublic class Department {\n    @OneToMany(mappedBy = \"department\")\n    private List&lt;Employee&gt; employees;\n}\n\n@Entity\npublic class Employee {\n    @ManyToOne\n    private Department department;\n}\n\nIn bidirectional relationships, use mappedBy on the non-owning side to indicate the owning side’s field name.\n\n\n\n\n\n\n\nWhy Serialization is Needed?\n\n\n\nSerialization is the process of converting an object or class into a byte stream. This byte stream can then be easily saved to a file, sent over a network, or stored in a database.\nHibernate uses serialization to create deep copies of entity objects for various purposes, such as detached entities, Session Management or caching.\nFor example: Collections within entities (like an ArrayList&lt;Menu&gt; menus within a Order entity ) are often serialized to store them efficiently in the database or to manage state changes.\nImplementing Serializable is not always the best solution. In some cases, it might be better to adjust your entity relationships (@OneToMany) or use different mapping strategies (@ElementCollection for simple collections).\n\n\n\n\n3.1.2 Casting\nThe original code avoids these issues by declaring orderToSave directly as TakeAwayOrder, eliminating the need for casting. This approach is generally preferred when possible, as it’s safer and more straightforward.\n\n// Assume OrderRestaurant is a superclass of TakeAwayOrder\nOrderRestaurant orderToSave = new TakeAwayOrder(\n    \"T11\", new Date(), \"Alice\", 1, 10.99,\n    true, new ArrayList&lt;&gt;(Arrays.asList(menu1)), null );\n\n// We need to cast here\n((TakeAwayOrder) orderToSave).setCustomerTakeAway(customer1);\n\n// We might need to cast here too, depending on the repository's type parameter\ntakeAwayOrderRepository.save((TakeAwayOrder) orderToSave);\n\n\nUpcasting: When we assigned a TakeAwayOrder object to an OrderRestaurant variable, we performed an implicit upcast. This is always safe because a TakeAwayOrder is an OrderRestaurant.\nDowncasting: When we cast orderToSave back to TakeAwayOrder, we’re performing a downcast. This is potentially risky because not all OrderRestaurant objects are TakeAwayOrder objects.\n\n\n\n\n\n\n\nWhy casting can be problematic?\n\n\n\n\nType safety: Downcasting can lead to runtime errors if the object isn’t actually of the type you’re casting to.\nCode readability: Excessive casting can make code harder to read and understand.\nPerformance: While minor, casting does involve a runtime check.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#manytomany",
    "href": "springboot/sblab8-4.html#manytomany",
    "title": "Lab#SB08-4: JPA",
    "section": "3.2 ManyToMany",
    "text": "3.2 ManyToMany\nManyToMany Unidirectional\n\nMultiple entities are associated with multiple entities of another type\nOnly one side has a reference to the other entity\nExample: Many Students can enroll in many Courses\n\n\n\n\n@ManyToMany RestaurantManger: ORDER\n@ManyToMany RestaurantManger: MENU\n\n@Entity\npublic class Student {\n    @ManyToMany\n    @JoinTable(name = \"STUDENT_COURSE\",\n        joinColumns = @JoinColumn(name = \"STUDENT_ID\"),\n        inverseJoinColumns = @JoinColumn(name = \"COURSE_ID\"))\n    private Set&lt;Course&gt; courses;\n}\n\n@Entity\npublic class Course {\n    // No reference to Student\n}\nManyToMany Bidirectional\n\nBoth entities have references to each other\nOne side is designated as the owning side, the other the inverse side\n\nExample: Many Students can enroll in many Courses, and each Course can have many Students\n\n\n@Entity\npublic class Student {\n    @ManyToMany\n    @JoinTable(name = \"STUDENT_COURSE\",\n        joinColumns = @JoinColumn(name = \"STUDENT_ID\"),\n        inverseJoinColumns = @JoinColumn(name = \"COURSE_ID\"))\n    private Set&lt;Course&gt; courses;\n}\n\n@Entity\npublic class Course {\n    @ManyToMany(mappedBy = \"COURSES\")\n    private Set&lt;Student&gt; students;\n}\n\nIn bidirectional ManyToMany relationships, use mappedBy on the non-owning side to indicate the owning side’s field name. The @JoinTable annotation is used to specify the join table details.\n\n\n\n\n\n\n\nManyToMany Considerations\n\n\n\n\nManyToMany relationships often require a join table in the database\nConsider using an intermediate entity for complex relationships or when additional attributes are needed for the relationship\nBe cautious of performance implications with large datasets\n\n\n\n\n3.2.1 OrphanRemoval and Cascade\n\nCascade propagates operations from parent to child entities, while orphanRemoval automatically deletes child entities no longer associated with a parent.\n\nCascade affects specified actions (e.g., PERSIST, REMOVE), whereas orphanRemoval only deals with removing disassociated children.\n\n\n\n\n\n\nCascade vs OrphanRemoval\n\n\n\nThe main differences between cascade and orphanRemoval in JPA are:\n\nScope of operation:\n\nCascade applies to all operations specified (e.g. PERSIST, MERGE, RE`MOVE, etc.) and propagates them from parent to child entities&lt;.\nOrphanRemoval only deals with removing child entities that are no longer associated with the parent .\n\nWhen they take effect:\n\nCascade operations occur when the specified action is performed on the parent entity .\nOrphanRemoval occurs when a child entity is disassociated from its parent, even without explicitly calling remove.\n\nUse cases:\n\nCascade is useful for propagating operations like persist or remove from parent to children.\nOrphanRemoval is useful for automatically deleting child entities that are no longer referenced by a parent.\n\nBehavior:\n\nCascadeType.REMOVE will only delete child entities when the parent is explicitly removed.\nOrphanRemoval will delete child entities as soon as they are disassociated from the parent, even if the parent is not removed\n\nCombining them:\n\nThey can be used together. CascadeType.ALL with orphanRemoval=true provides the most comprehensive cascading behavior.\n\n\n\n\n\n3.2.1.1 Example: Student and Course Entities\n\n\n\n\n\nclassDiagram\ndirection RL\n    class Student {\n        -Long id\n        -String name\n        -Set&lt;Course&gt; courses\n        +enrollInCourse(Course course)\n        +dropCourse(Course course)\n    }\n    class Course {\n        -Long id\n        -String title\n        -Set&lt;Student&gt; students\n    }\n    class SchoolService {\n        -StudentRepository studentRepository\n        -CourseRepository courseRepository\n        +manageEnrollment()\n    }\n\n    Student \"*\" -- \"*\" Course : enrolls in\n    SchoolService --&gt; Student : uses\n    SchoolService --&gt; Course : uses\n    SchoolService &lt;-- StudentRepository : uses\n    SchoolService &lt;-- CourseRepository : uses\n\n    \n    \n\n\n\n\n\n\n\nLet’s see an example involving Student and Course entities in a school system, where orphan removal is meaningful.\nStudent @Entity owner-side\nimport javax.persistence.*;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    private String name;\n\n    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, \n    orphanRemoval = true)\n    @JoinTable(\n        name = \"student_course\",\n        joinColumns = @JoinColumn(name = \"STUDENT_ID\"),\n        inverseJoinColumns = @JoinColumn(name = \"COURSE_ID\")\n    )\n    private Set&lt;Course&gt; courses = new HashSet&lt;&gt;();\n\n    // Constructors, getters, setters, and utility methods\n\n    public void enrollInCourse(Course course) {\n        courses.add(course);\n        course.getStudents().add(this); \n        // Maintain bidirectional relationship\n    }\n\n    public void dropCourse(Course course) {\n        courses.remove(course);\n        course.getStudents().remove(this); \n        // Maintain bidirectional relationship\n    }\n}\nCourse @Entity inverse-side\nimport javax.persistence.*;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\npublic class Course {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    private String title;\n\n    @ManyToMany(mappedBy = \"COURSES\")\n    private Set&lt;Student&gt; students = new HashSet&lt;&gt;();\n\n    // Constructors, getters, setters, and utility methods\n}\nHere’s how we use these entities in a service or test:\npublic class SchoolService {\n\n    @Autowired\n    private StudentRepository studentRepository;\n\n    @Autowired\n    private CourseRepository courseRepository;\n\n    public void manageEnrollment() {\n        // Create some courses\n        Course math = new Course(\"Mathematics\");\n        Course science = new Course(\"Science\");\n\n        // Save courses\n        courseRepository.save(math);\n        courseRepository.save(science);\n\n        // Create a student and enroll in courses\n        Student issac = new Student(\"Isaac Boncodi\");\n        issac.enrollInCourse(math);\n        issac.enrollInCourse(science);\n\n        // Save the student (this will also\n        // save the relationships)\n        studentRepository.save(issac);\n\n        // Drop the Science course\n        issac.dropCourse(science);\n\n        // Now if we save issac again, the Science course\n        // will be removed from the database\n        // if no other students are enrolled in it.\n        studentRepository.save(issac);\n        \n        // The Science course will be removed\n        // if it's no longer associated with any students.\n    }\n}\n\nEntities: Student and Course are related through a many-to-many relationship with a join table (student_course).\nOrphan Removal: The orphanRemoval = true attribute in the Student class means that if a Student drops a Course, and no other students are enrolled in that course, it will be removed from the database.\nMethods:\n\nenrollInCourse: Adds a course to a student’s list and maintains the bidirectional relationship.\ndropCourse: Removes a course from a student’s list and maintains the bidirectional relationship.\n\nUsage: When you drop a course and save the Student, if that course is no longer associated with any other students, it will be deleted from the database.\n\n\n\n\n3.2.2 ManyToMany with Join Table @Entity\n\n@Entity @ManyToMany with Join Table: in this particular case we will use two @OneToMany relationships to create a many-to-many, centered and owned by the join table.\n\n\nRepresents a many-to-many relationship using an intermediate entity\nThe join table becomes an entity itself, with two one-to-many relationships\nProvides more flexibility and allows additional attributes on the relationship\nExample: Students enrolled in Courses, with additional enrollment information\n\n@Entity\npublic class Student {\n    @OneToMany(mappedBy = \"student\")\n    private List&lt;Enrollment&gt; enrollments;\n}\n\n@Entity\npublic class Course {\n    @OneToMany(mappedBy = \"course\")\n    private List&lt;Enrollment&gt; enrollments;\n}\n\n@Entity\npublic class Enrollment {\n    @ManyToOne\n    private Student student;\n\n    @ManyToOne\n    private Course course;\n\n    private LocalDate enrollmentDate;\n    private String grade;\n}\nIn this approach:\n\nThe Enrollment entity serves as the join table\nIt has two @ManyToOne relationships: one to Student and one to Course\nAdditional fields like enrollmentDate and grade can be added to the Enrollment entity\nBoth Student and Course have @OneToMany relationships to Enrollment\nThe mappedBy attribute in @OneToMany indicates the owning side of the relationship\n\n\nThis structure allows for more detailed modeling of the relationship between students and courses, enabling the storage of relationship-specific data and easier querying of the association.\n\nKey Points\nThis structure allows you to:\n\nAdd additional fields to the relationship (e.g., enrollmentDate)\nEasily query the relationship from both sides\nMaintain better control over the lifecycle of the relationship\n\n\n\n3.2.3 When two objects are equal? Object Identity\n\nThe difference between comparing objects based on object identity and comparing them based on field values lies in how equality is determined:\n\nby identity, that is, by using their memory addresses\nby their field values\n\n\nObject Identity\n\nObject Identity refers to comparing objects using their memory addresses (i.e., whether they are the same instance in memory).\nIn Java, this is done using the == operator.\nTwo objects are considered equal based on object identity if they refer to the same memory location.\n\nField Values\n\nField Values refer to comparing objects based on the values of their fields.\nIn Java, this is typically done using the equals method.\nTwo objects are considered equal based on field values if their corresponding fields have the same values, even if they are different instances in memory.\n\nExample:\nConsider the following MenuRestaurant class:\n\npublic class MenuRestaurant {\n    private int id;\n    private String name;\n\n    // Constructors, getters, and setters\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        MenuRestaurant that = (MenuRestaurant) o;\n        return id == that.id && Objects.equals(name, that.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id, name);\n    }\n}\n\nComparing Based on Object Identity\nMenuRestaurant menu1 = \n    new MenuRestaurant(1, \"Pizza\");\nMenuRestaurant menu2 = \n    new MenuRestaurant(1, \"Pizza\");\n\nSystem.out.println(menu1 == menu2);\n// false, because they are different instances\nComparing Based on Field Values\nMenuRestaurant menu1 =\n    new MenuRestaurant(1, \"Pizza\");\nMenuRestaurant menu2 =\n    new MenuRestaurant(1, \"Pizza\");\n\nSystem.out.println(menu1.equals(menu2));\n// true, because their fields are equal\n\n\n3.2.4 Using AssertJ with Comparator\n\npublic void testAddingMenusToOrder()\nHeap and Stack\n\n\nusingElementComparator(Comparator.comparing(MenuRestaurant::getId))\n\nWhen you use the above expression, you are specifying that the comparison should be based on the id field of the MenuRestaurant objects:\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nList&lt;MenuRestaurant&gt; menuList = Arrays.asList(menu1, menu2, menu3);\n\nassertThat(menuList)\n    .usingElementComparator(Comparator.comparing(MenuRestaurant::getId))\n    .containsExactlyInAnyOrder(menu1, menu2, menu3);\n\nIn this case, the comparison is based on the id field, not the object identity or the default equals method. This allows you to verify that the collection contains the expected elements based on their IDs, regardless of their memory addresses.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#order-with-menus-no-qty",
    "href": "springboot/sblab8-4.html#order-with-menus-no-qty",
    "title": "Lab#SB08-4: JPA",
    "section": "4.1 Order with Menus, no qty",
    "text": "4.1 Order with Menus, no qty\n{\n  \"id\": \"ORD123456\",\n  \"date\": \"2024-10-29T12:30:00Z\",\n  \"waiter\": \"John Doe\",\n  \"peopleQty\": 4,\n  \"totalPayment\": 120.50,\n  \"paid\": false,\n  \"menus\": [\n    {\n      \"id\": \"MENU001\",\n      \"name\": \"Lunch Special\",\n      \"description\": \"Includes main course,\n       side dish, and drink\",\n      \"price\": 25.99,\n      \"category\": \"LUNCH\"\n    },\n    {\n      \"id\": \"MENU002\",\n      \"name\": \"Dinner Deluxe\",\n      \"description\": \"Three-course meal with appetizer,\n       main course, and dessert\",\n      \"price\": 39.99,\n      \"category\": \"DINNER\"\n    },\n    {\n      \"id\": \"MENU003\",\n      \"name\": \"Kids Meal\",\n      \"description\": \"Child-friendly portion\n       with fun sides\",\n      \"price\": 12.99,\n      \"category\": \"KIDS\"\n    }\n  ]\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#order-with-menus-and-qty",
    "href": "springboot/sblab8-4.html#order-with-menus-and-qty",
    "title": "Lab#SB08-4: JPA",
    "section": "4.2 Order with Menus and qty",
    "text": "4.2 Order with Menus and qty\n{\n  \"id\": \"ORD123456\",\n  \"date\": \"2024-10-29T12:30:00Z\",\n  \"waiter\": \"John Doe\",\n  \"peopleQty\": 4,\n  \"totalPayment\": 120.50,\n  \"paid\": false,\n  \"menus\" : {\n    \"M01\": 0,\n    \"M02\": 3,\n    \"M03\": 5,\n    \"M04\": 0,\n    \"M05\": 9,\n    \"M06\": 0\n\n  }\n\n}\n{\n  \"id\": \"ORD123456\",\n  \"date\": \"2024-10-29T12:30:00Z\",\n  \"waiter\": \"John Doe\",\n  \"peopleQty\": 4,\n  \"totalPayment\": 120.50,\n  \"paid\": false,\n  \"menus\" : [\n    {\"M01\": 1},\n    {\"M02\": 2},\n    {\"M08\": 1}\n  ]\n\n}\n{\n  \"id\": \"ORD123456\",\n  \"date\": \"2024-10-29T12:30:00Z\",\n  \"waiter\": \"John Doe\",\n  \"peopleQty\": 4,\n  \"totalPayment\": 120.50,\n  \"paid\": false,\n  \"orderedItems\": [\n    {\n      \"menu\": {\n        \"id\": \"MENU001\",\n        \"name\": \"Lunch Special\",\n        \"description\": \"Includes main course,\n         side dish, and drink\",\n        \"price\": 25.99,\n        \"category\": \"LUNCH\"\n      },\n      \"quantity\": 2\n    },\n    {\n      \"menu\": {\n        \"id\": \"MENU002\",\n        \"name\": \"Dinner Deluxe\",\n        \"description\": \"Three-course meal with\n         appetizer, main course, and dessert\",\n        \"price\": 39.99,\n        \"category\": \"DINNER\"\n      },\n      \"quantity\": 1\n    },\n    {\n      \"menu\": {\n        \"id\": \"MENU003\",\n        \"name\": \"Kids Meal\",\n        \"description\": \"Child-friendly portion\n         with fun sides\",\n        \"price\": 12.99,\n        \"category\": \"KIDS\"\n      },\n      \"quantity\": 1\n    }\n  ]\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#orderrestaurant-to-abstract-class",
    "href": "springboot/sblab8-4.html#orderrestaurant-to-abstract-class",
    "title": "Lab#SB08-4: JPA",
    "section": "5.1 OrderRestaurant to Abstract class",
    "text": "5.1 OrderRestaurant to Abstract class\n\nOrderRestaurant refactor to abstract class and test createOrdersTest()\n\nKey Points\n\nAbstract Class: The OrderRestaurant class is declared as abstract, meaning it cannot be instantiated directly.\nAbstract Method: The calculateTotalPayment method is declared as abstract, requiring any concrete subclasses to implement this method.\nNon-Abstract Methods: Methods like addMenu and removeMenu are implemented in the abstract class and can be used by all subclasses.\nConstructor: A constructor is provided to initialize the object without the orderMenuQties list.\nList Initialization: In the addMenu method, the orderMenuQties list is initialized if it is null to avoid NullPointerException.\n\n\n\nOrderRestaurant to Abstract class\n\npackage dev.example.restaurantManager.model;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\n@Table(name = \"ORDER_RESTAURANT\")\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\npublic abstract class OrderRestaurant {\n\n    @Id\n    private String id;\n    private Date date;\n    private String waiter;\n    private int peopleQty;\n    private double totalPayment;\n    private boolean paid;\n\n\n    @OneToMany(mappedBy = \"order\", \n        cascade = CascadeType.ALL,\n        orphanRemoval = true, fetch = FetchType.EAGER)\n    private List&lt;OrderMenuQty&gt; orderMenuQties;\n\n\n    // Constructor without orderMenuQties\n    public OrderRestaurant(String id, Date date, \n            String waiter, int peopleQty,\n            double totalPayment, boolean paid) {\n        this.id = id;\n        this.date = date;\n        this.waiter = waiter;\n        this.peopleQty = peopleQty;\n        this.totalPayment = totalPayment;\n        this.paid = paid;\n    }\n\n    public abstract double calculateTotalPayment();\n\n    // Method to add a menu to the order\n    public void addMenu(MenuRestaurant menu, int quantity) {\n        OrderMenuQty orderMenuQty = new OrderMenuQty();\n        orderMenuQty.setOrder(this);\n        orderMenuQty.setMenu(menu);\n        orderMenuQty.setQuantity(quantity);\n        this.orderMenuQties.add(orderMenuQty);\n    }\n\n    // Method to remove a menu from the order\n    public void removeMenu(MenuRestaurant menu) {\n        this.orderMenuQties\n            .removeIf(omq -&gt; omq.getMenu().equals(menu));\n    }\n\n\n    @Override\n    public String toString() {\n        return \"OrderRestaurant{\" +\n                \"id='\" + id + '\\'' +\n                \", date=\" + date +\n                \", waiter='\" + waiter + '\\'' +\n                \", peopleQty=\" + peopleQty +\n                \", totalPayment=\" + totalPayment +\n                \", paid=\" + paid +\n\n                '}';\n    }\n\n}\n\nDeclare the Class as Abstract: to make a superclass an abstract class, you need to add the abstract keyword before the class keyword in its declaration.\npublic abstract class OrderRestaurant {\n    // class members and methods\n}\nAbstract Methods\nIf the class contains methods that should be implemented by its subclasses, declare these methods as abstract by adding the abstract keyword before the method declaration. Abstract methods do not have an implementation.\npublic abstract class OrderRestaurant {\n    public abstract void prepareOrder();\n    public abstract void serveOrder();\n}\nNon-Abstract Methods\nAn abstract class can also contain non-abstract methods, which have implementations and can be used directly by subclasses.\npublic abstract class OrderRestaurant {\n    public void printReceipt() {\n        // implementation\n    }\n}\nSubclass Implementation\nSubclasses of the abstract class must implement all abstract methods declared in the superclass. If a subclass itself is abstract, it does not need to implement these methods but must be declared as abstract as well.\npublic class FastFoodRestaurant \n            extends OrderRestaurant {\n    @Override\n    public void prepareOrder() {\n        // implementation\n    }\n\n    @Override\n    public void serveOrder() {\n        // implementation\n    }\n}\nAvoid Instantiation\nAbstract classes cannot be instantiated directly. Any attempt to instantiate an abstract class will result in an InstantiationException. Ensure that any code that previously instantiated the superclass now instantiates one of its concrete subclasses.\nRefactoring Tools\nUsing an IDE like IntelliJ IDEA, you can use the “Extract Superclass” refactoring to help create an abstract superclass from an existing class. This tool allows you to move members to the new superclass and declare methods as abstract if necessary.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#dataloader-class",
    "href": "springboot/sblab8-4.html#dataloader-class",
    "title": "Lab#SB08-4: JPA",
    "section": "6.1 DataLoader Class",
    "text": "6.1 DataLoader Class\nThe DataLoader class is the Spring component designed to populate an H2 database with fake data for a RestaurantManagement project. Key features include:\n\nUses @Autowired repositories for database interactions\nEmploys the JavaFaker library to generate realistic mock data\nMain method loadAllData() orchestrates the data creation process\n\nData Creation Methods\n\ncreateCustomers(): Generates 25 customer records\ncreateTables(): Creates 10 restaurant table entries\ncreateMenuItems(): Produces 25 menu item records\ncreateMenusAndAssignMenuItems(): Establishes 15 menus, each with 5-10 menu items\ncreateBookingsAndAssignTablesAndCustomers(): Generates 25 bookings, linking customers and tables\ncreateOrdersAndAssignMenus(): Creates 45 orders with associated menu quantities\n\nKey Aspects\n\nUtilizes UUID for unique identifiers\nEstablishes relationships between entities (e.g., many-to-many between menus and menu items)\nSimulates realistic data ranges (e.g., customer ages, table capacities)\nImplements date handling for bookings and orders",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#component",
    "href": "springboot/sblab8-4.html#component",
    "title": "Lab#SB08-4: JPA",
    "section": "6.2 @Component",
    "text": "6.2 @Component\nThe @Component annotation is used to mark a class as a Spring-managed component.\n\nAutomatic Bean Creation: @Component tells Spring to automatically create and manage an instance of the annotated class as a bean in the application context.\nDependency Injection: It enables the class to be a candidate for dependency injection, allowing Spring to automatically wire its dependencies.\nComponent Scanning: @Component works with Spring’s component scanning feature to detect and register beans without explicit configuration.\n\nHow @Component Works:\n\nClass-Level Annotation: @Component is applied at the class level.\nBean Creation: When Spring scans the classpath, it detects classes annotated with @Component and creates beans for them[1][2].\nDefault Naming: By default, the bean name is the class name with the first letter in lowercase.\nCustomizable: You can specify a custom name for the bean using @Component(“customName”).\nSpecialized Annotations: @Service, @Repository, and @Controller are specialized forms of @Component for specific use cases.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#usage-example",
    "href": "springboot/sblab8-4.html#usage-example",
    "title": "Lab#SB08-4: JPA",
    "section": "6.3 Usage Example",
    "text": "6.3 Usage Example\n@Component\npublic class MathComponent {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\nIn this example, Spring will automatically create a bean of MathComponent, which can then be autowired or retrieved from the application context.\nBenefits\n\nBy using @Component, we can leverage Spring’s dependency injection and inversion of control features with minimal configuration, leading to more maintainable and modular code.\n\n\nSimplifies Configuration: Reduces the need for XML-based bean definitions.\nPromotes Loose Coupling: Facilitates dependency injection and easier unit testing.\nImproves Code Organization: Helps in categorizing classes based on their roles in the application.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#commits",
    "href": "springboot/sblab8-4.html#commits",
    "title": "Lab#SB08-4: JPA",
    "section": "8.1 Commits",
    "text": "8.1 Commits\nAll Commits master branch AlbertProfe / restaurantManager (Public) table:\n\n\nAlbertProfe / restaurantManager (Public) commits table\n\n\n\n\n\n\n\n\nHash\nDate\nMessage\nProject\n\n\n\n\na274a39\n2024-11-07 11:08 Thursday\ntestDeleteOrderMenuQtyFromOrderRestaurant() and solved1(), solved2() and solved3()\n&lt;&gt;\n\n\n29a2328\n2024-11-07 08:29 Thursday\ntestUpdateOrderMenuQty()\n&lt;&gt;\n\n\n3ef8917\n2024-11-06 17:58 Wednesday\ntestDeleteOrderMenuQty() and not deleting Order neither Menu\n&lt;&gt;\n\n\n4ed525b\n2024-11-06 13:57 Wednesday\nCustomerControllerTest: testApi() with H2 server-local and 3-port system: 8080, 8082, 8084\n&lt;&gt;\n\n\n935a64b\n2024-11-06 13:55 Wednesday\nCustomerControllerTest: testApi() with H2 server-local and 3-port system: 8080, 8082, 8084\n&lt;&gt;\n\n\n4c8a75d\n2024-11-06 12:31 Wednesday\nCustomerControllerTest: testApi() with H2 server-local\n&lt;&gt;\n\n\na7fd158\n2024-11-05 12:05 Tuesday\nCustomerControllerTest\n&lt;&gt;\n\n\nde7bcf6\n2024-11-05 11:20 Tuesday\nPRA05: Spring Boot JPA Inheritance and Abstraction\n&lt;&gt;\n\n\nab8c1e3\n2024-10-30 11:59 Wednesday\nDataLoader with EatIn, Shipping and TakeAway Orders\n&lt;&gt;\n\n\n0656084\n2024-10-30 11:20 Wednesday\nDataLoader polish\n&lt;&gt;\n\n\n6a5958b\n2024-10-29 18:04 Tuesday\nDataPopulate controller and DataLoader utility java faker, h2 local\n&lt;&gt;\n\n\n60218cc\n2024-10-29 13:06 Tuesday\nOrderRestaurant Service and Controller\n&lt;&gt;\n\n\n4eb33c4\n2024-10-29 13:01 Tuesday\nRefactor Order @ManyToMany Menu to OrderMenuQty @Entity\n&lt;&gt;\n\n\n695da9b\n2024-10-29 12:40 Tuesday\nService and Rest Controller for MenuItem and MenuRestaurant; Menu @ManyToMany MenuItem\n&lt;&gt;\n\n\n7ec20af\n2024-10-29 12:22 Tuesday\nService and Rest Controller for Table Restaurant and Booking\n&lt;&gt;\n\n\n63515bf\n2024-10-28 10:41 Monday\nPRA04: Refactoring Many-to-Many Relationship in RestaurantManager\n&lt;&gt;\n\n\n38d5397\n2024-10-26 12:02 Saturday\ncustomerServiceTest(): adding more tests for CustomerService\n&lt;&gt;\n\n\n19f57e5\n2024-10-25 13:48 Friday\ncustomerServiceTest()\n&lt;&gt;\n\n\na1db26d\n2024-10-24 13:40 Thursday\nBooking many-to-many with Customer/Table: customer.getBookings()\n&lt;&gt;\n\n\nbeadb26\n2024-10-24 13:40 Thursday\nBooking many-to-many with Customer/Table: customer.getBookings()\n&lt;&gt;\n\n\ncd25ca0\n2024-10-24 13:05 Thursday\nBooking many-to-many with Customer/Table: table.getBookings()\n&lt;&gt;\n\n\n8b4e9bc\n2024-10-24 12:03 Thursday\nBooking many-to-many with Customer/Table & test createBooking, delete old tests and add new tests to RelationshipsOrderRestaurantTest\n&lt;&gt;\n\n\na85164f\n2024-10-23 10:48 Wednesday\nupdate testRemovingMenusFromOrder() and versioning with testRemovingMenusFromOrder_butNotRelationship()\n&lt;&gt;\n\n\nbc75ce3\n2024-10-22 13:02 Tuesday\ntestAddingMenusToOrder() and testRemovingMenusFromOrder()\n&lt;&gt;\n\n\n822675e\n2024-10-21 13:02 Monday\nPRA03: Implementing ManyToMany Relationships in JPA\n&lt;&gt;\n\n\n97cb8e9\n2024-10-21 12:24 Monday\nTestCreateOrderMenu_stackOverflow ()\n&lt;&gt;\n\n\nf4d3326\n2024-10-17 12:34 Thursday\npolish\n&lt;&gt;\n\n\nd65b4a9\n2024-10-17 10:25 Thursday\nTestCreateOrderMenu() and update TestCreateOrder()\n&lt;&gt;\n\n\n85a23ab\n2024-10-16 13:35 Wednesday\nmaanytomany menu n:m order\n&lt;&gt;\n\n\n28ea895\n2024-10-16 13:16 Wednesday\nmenu refactor to MenuRestaurant, entity and serializable\n&lt;&gt;\n\n\n0a0e062\n2024-10-16 11:47 Wednesday\nPRA02: Implementing OneToMany and ManyToOne Relationships in JPA\n&lt;&gt;\n\n\nc562d8d\n2024-10-16 10:53 Wednesday\nTestCreateBookingTable() with JPA, TableRestaurant 1:n Booking bidirectional relationship\n&lt;&gt;\n\n\n51b172d\n2024-10-15 14:02 Tuesday\nTestCreateOrder() with JPA, Customer 1:n TakeAwayOrder unidirectional relationship\n&lt;&gt;\n\n\n36a3e16\n2024-10-15 09:58 Tuesday\nupdate TakeAway with customer TestCreateOrder()\n&lt;&gt;\n\n\n66fff05\n2024-10-15 08:14 Tuesday\nupdate EatInOrder with customer TestCreateOrder()\n&lt;&gt;\n\n\na47b9cc\n2024-10-14 13:53 Monday\ninherence of order class, EatInOrder shipOrder, TakeAwayOrder and .env disabled\n&lt;&gt;\n\n\nf3bcedf\n2024-10-11 13:53 Friday\nenvironment variables from application.properties and .env file\n&lt;&gt;\n\n\n1905407\n2024-10-11 11:32 Friday\nenvironment variables from application.properties\n&lt;&gt;\n\n\na361bd0\n2024-10-10 09:46 Thursday\nMerge remote-tracking branch ‘origin/master’ # Conflicts: # src/main/resources/application.properties\n&lt;&gt;\n\n\n997f0b7\n2024-10-10 08:25 Thursday\ncreate two environments: local and memory by application.properties\n&lt;&gt;\n\n\n988c421\n2024-10-10 08:25 Thursday\ncreate two environments: local and memory by application.properties\n&lt;&gt;\n\n\ncc73243\n2024-10-09 12:57 Wednesday\ntest JPA whenFindByEmail_thenReturnCustomer()\n&lt;&gt;\n\n\nff360b3\n2024-10-09 12:36 Wednesday\nPRA01: Spring Boot JPA Repository and Entity Class Exercise\n&lt;&gt;\n\n\na62ebbd\n2024-10-09 11:42 Wednesday\nUpdate customer with age, vipCustomer and deleted, add common headers method, update faker, queries and test JPA\n&lt;&gt;\n\n\n319b942\n2024-10-08 13:29 Tuesday\nCustomerController ResponseEntity implemented\n&lt;&gt;\n\n\n096cf29\n2024-10-08 11:28 Tuesday\nh2 db local application.properties and ddl create\n&lt;&gt;\n\n\n61eeb7a\n2024-10-07 12:42 Monday\nCustomerController with ResposeEntity and Headers\n&lt;&gt;\n\n\n8c8b6df\n2024-10-07 11:22 Monday\nCustomerController and customerService\n&lt;&gt;\n\n\n8e7cd37\n2024-10-07 11:00 Monday\nCustomerController to customerRespository\n&lt;&gt;\n\n\n7c40796\n2024-10-04 11:46 Friday\nswagger, interface customer service and service implementation and POST customer controller\n&lt;&gt;\n\n\n8984943\n2024-10-03 13:51 Thursday\nMerge remote-tracking branch ‘origin/master’\n&lt;&gt;\n\n\n6624516\n2024-10-03 13:46 Thursday\nupdated Help.md\n&lt;&gt;\n\n\n8f485dc\n2024-10-03 13:46 Thursday\nbasic css to customers table and utilities with CustomerDataLoader\n&lt;&gt;\n\n\n99f4111\n2024-10-03 13:39 Thursday\nbasic css to customers table and utilities with CustomerDataLoader\n&lt;&gt;\n\n\n5896049\n2024-10-03 12:29 Thursday\nwebcontroller implemented\n&lt;&gt;\n\n\n1fd1506\n2024-10-03 10:50 Thursday\nwebcontroller\n&lt;&gt;\n\n\n5bbcac5\n2024-10-03 10:47 Thursday\ncreate project H2 rest customer faker\n&lt;&gt;\n\n\n\n\n\nCommits\n\nAll commits from feature-order-abstract branch",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#commit-85a23ab",
    "href": "springboot/sblab8-4.html#commit-85a23ab",
    "title": "Lab#SB08-4: JPA",
    "section": "8.2 commit 85a23ab",
    "text": "8.2 commit 85a23ab\n\nmanytomany menu n:m order\n\n\n\n\nWhen iterating on a project and introducing new relationships, such as a many-to-many relationship between orders and menus, existing tests may fail due to outdated assumptions and data setup. In this case, the test TestCreateOrder needs to be updated to reflect the new relationship structure.\n\nThe main issue is that the test is creating MenuRestaurant objects in memory but not persisting them to the database. With a many-to-many relationship, both entities (Order and Menu) need to exist in the database before they can be associated.\nTo fix this, the test should be refactored to:\n\nSave MenuRestaurant entities to the database using a repository before creating orders.\nFetch the saved menus from the database when creating orders.\nUpdate the order creation process to use the new relationship structure.\nAdjust assertions to verify the new relationship.\n\nThis refactoring ensures that the test accurately reflects the new data model and relationships.\nIt also helps maintain the integrity of the test suite as the project evolves, ensuring that tests remain valid and useful for catching potential issues in the updated codebase.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/sblab8-4.html#commit-d65b4a9",
    "href": "springboot/sblab8-4.html#commit-d65b4a9",
    "title": "Lab#SB08-4: JPA",
    "section": "8.3 commit d65b4a9",
    "text": "8.3 commit d65b4a9\nIn this commit we update TestCreateOrder() to reflect the new relationship structure and create a new test.\n\nTestCreateOrderMenu() and update TestCreateOrder()",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-4: JPA"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-5.html",
    "href": "springboot/boot-concepts-jpa-5.html",
    "title": "Spring Boot: JPA Inherence",
    "section": "",
    "text": "📘 JPA Inherence\nSpring Boot provides an implementation of the Java Persistence API (JPA) to simplify database access: ORM (Object-Relational Mapping)\nIn JPA, entity classes represent tables in the database, and relationships between entities are mapped using annotations.\nInheritance is a fundamental concept of POO, but Relational databases have no concept of inheritance neither NoSQL (MongoDB, DymamoDB), so persisting inheritance in a SQL and NoSQL database _has its own particular way.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Inherence"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-5.html#single_table",
    "href": "springboot/boot-concepts-jpa-5.html#single_table",
    "title": "Spring Boot: JPA Inherence",
    "section": "1.1 SINGLE_TABLE",
    "text": "1.1 SINGLE_TABLE\nThe SINGLE_TABLE strategy maps all classes in the inheritance hierarchy to a single database table. This is the default strategy.\nOracle Official docs\nSimple example:\n@Entity\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n@DiscriminatorColumn(name = \"DTYPE\")\npublic abstract class Animal { \n  // ...\n}\n\n@Entity\n@DiscriminatorValue(\"DOG\")\npublic class Dog extends Animal {\n  // ...  \n}",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Inherence"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-5.html#table_per_class",
    "href": "springboot/boot-concepts-jpa-5.html#table_per_class",
    "title": "Spring Boot: JPA Inherence",
    "section": "1.2 TABLE_PER_CLASS",
    "text": "1.2 TABLE_PER_CLASS\nThe TABLE_PER_CLASS strategy creates a separate table for each concrete class in the hierarchy.\nOracle Official docs\nSimple example:\n@Entity\n@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\npublic abstract class Vehicle {\n  // ...\n}\n\n@Entity\npublic class Car extends Vehicle {\n  // ...\n}",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Inherence"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa-5.html#joined",
    "href": "springboot/boot-concepts-jpa-5.html#joined",
    "title": "Spring Boot: JPA Inherence",
    "section": "1.3 JOINED",
    "text": "1.3 JOINED\nThe JOINED strategy creates a table for the base class and separate tables for each subclass, linked by foreign keys.\nOracle Official docs\nSimple example:\n@Entity\n@Inheritance(strategy = InheritanceType.JOINED)\npublic abstract class Employee {\n  // ...\n}\n\n@Entity\npublic class Manager extends Employee {\n  // ...\n}",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA Inherence"
    ]
  },
  {
    "objectID": "springboot/sblab3.html",
    "href": "springboot/sblab3.html",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "",
    "text": "Welcome to the cifojava20Basics22-5 wiki!",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#s-6c-thymeleaf-web-project-resttemplate-data-from-api-rest",
    "href": "springboot/sblab3.html#s-6c-thymeleaf-web-project-resttemplate-data-from-api-rest",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.1 (6S-6C) ThymeLeaf Web Project RestTemplate (data from API Rest)",
    "text": "2.1 (6S-6C) ThymeLeaf Web Project RestTemplate (data from API Rest)\n\n\nLibrary6\n\n\nBase project:\n\nLibrary1 &gt; Library6server\nlibrary5 &gt; library6server\nTemplates html Thymeleaf\n@Controller and @RestController\n@Service: RestTemplate",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#websockets-spring-boot-project-with-js-web-client-sockjs-stomp",
    "href": "springboot/sblab3.html#websockets-spring-boot-project-with-js-web-client-sockjs-stomp",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.2 (8) Websockets Spring Boot Project with JS Web-Client SockJS & Stomp",
    "text": "2.2 (8) Websockets Spring Boot Project with JS Web-Client SockJS & Stomp\n\n\nLibrary8\n\n\nBase project:\n\nLibrary3\nWebSocket\nSTOMP Web-Client JS",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#graphql-spring-boot-project-with-playground",
    "href": "springboot/sblab3.html#graphql-spring-boot-project-with-playground",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.3 (9) GraphQL Spring Boot Project with PlayGround",
    "text": "2.3 (9) GraphQL Spring Boot Project with PlayGround\n\n\nLibrary9\n\n\nBase project:\n\nLibrary3\nGraphQL",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#axios-js-spa-web-spring-boot-project",
    "href": "springboot/sblab3.html#axios-js-spa-web-spring-boot-project",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.4 (10) Axios JS SPA Web Spring Boot Project",
    "text": "2.4 (10) Axios JS SPA Web Spring Boot Project\n\n\nLibrary10\n\n\nBase project:\n\nLibrary5\nAxios JS\nSPA",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#spring-boot-project-with-api-rest-mongodb",
    "href": "springboot/sblab3.html#spring-boot-project-with-api-rest-mongodb",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.5 (7) Spring Boot Project with API Rest MongoDB",
    "text": "2.5 (7) Spring Boot Project with API Rest MongoDB\n\n\nLibrary7\n\n\nBase project:\n\nLibrary3\nMongoCrud\n@RestController",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#spring-boot-server-dynamodb-aws",
    "href": "springboot/sblab3.html#spring-boot-server-dynamodb-aws",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.6 (12) Spring Boot Server DynamoDB AWS",
    "text": "2.6 (12) Spring Boot Server DynamoDB AWS\n\n\nLibrary12\n\n\nBase project:\n\nLibrary5\nCloud DynamoDB AWS",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#web-spring-boot-project-webflux",
    "href": "springboot/sblab3.html#web-spring-boot-project-webflux",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.7 (13-14) Web Spring Boot Project WebFlux",
    "text": "2.7 (13-14) Web Spring Boot Project WebFlux\n\n\nLibrary13-14\n\n\nBase project:\n\nLibrary5\nWebFlux",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#web-spring-boot-project-thyemleaf-security",
    "href": "springboot/sblab3.html#web-spring-boot-project-thyemleaf-security",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.8 (11) Web Spring Boot Project Thyemleaf-Security",
    "text": "2.8 (11) Web Spring Boot Project Thyemleaf-Security\n\n\nLibrary11\n\n\nBase project:\n\nLibrary5\nSecurity",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/sblab3.html#webflux-project-video-streaming",
    "href": "springboot/sblab3.html#webflux-project-video-streaming",
    "title": "Lab#SB03-1: APIs & cloud",
    "section": "2.9 (15) WebFlux Project Video Streaming",
    "text": "2.9 (15) WebFlux Project Video Streaming\n\n\nLibrary15\n\n\nBase project:\n\nLibrary5\nVideo Streaming",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB03-1: APIs & cloud"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html",
    "href": "springboot/boot-concepts-view.html",
    "title": "Spring Boot: View",
    "section": "",
    "text": "📘 View\nThe view is responsible for presenting the data to the user.\nJava developers have several options to create frontend applications:\n\nwhether it’s the server-side approach of Vaadin (it is a nice alternative in two flavors: Hilla and Flow),\nthe richclient capabilities of JavaFX or Thymeleaf,\nor the native look and feel of SWT,\n\nthere is a Java-based frontend solution to suit various development needs.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#example1-model",
    "href": "springboot/boot-concepts-view.html#example1-model",
    "title": "Spring Boot: View",
    "section": "1 Example1: Model",
    "text": "1 Example1: Model\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Home&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 th:text=\"${message}\"&gt;Hello, World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this template, the th:text attribute is used to set the text of the &lt;h1&gt; tag to the value of the message attribute in the model. The expression ${message} evaluates to the value of the message attribute.\nAssuming that this template is saved in a file named home.html in your application’s templates directory, the HomeController will render a message that says:\n\n“Welcome to my Spring Boot app!”\n\nwhen you visit theURL /\nThe value of the message attribute is set in the home() method of the controller.\nExample1 Controller",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#example2-pathvariable-and-requestbody",
    "href": "springboot/boot-concepts-view.html#example2-pathvariable-and-requestbody",
    "title": "Spring Boot: View",
    "section": "2 Example2: @PathVariable and @RequestBody",
    "text": "2 Example2: @PathVariable and @RequestBody\nThymeleaf templates that can be used with the hello(), createUser(), and getUserById() methods:\nhello.html\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 th:text=\"${message}\"&gt;Hello, World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this template, the th:text attribute is used to set the text of the &lt;h1&gt; tag to the value of the message attribute in the model. The value of message is set in the hello() method of the controller.\nuser.html\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;User&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 th:text=\"${user.name}\"&gt;User&lt;/h1&gt;\n    &lt;p th:text=\"${user.email}\"&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this template, the th:text attribute is used to set the text of the &lt;h1&gt; tag to the value of the name property of the user object in the model.\nThe th:text attribute of the &lt;p&gt; tag is used to set its text to the value of the email property of the user object in the model.\nAssuming that these templates are saved in files named hello.html and user.html, respectively, in your application’s templates directory, the hello() method will render a message that says:\n\n“Hello, World!”\n\nwhen you visit the URL /hello\nThe createUser() method doesn’t return a view, so it doesn’t need a Thymeleaf template.\nFinally, the getUserById() method will render a page that displays the details of a user when you visit the URL /users/{id}, where {id} is the ID of the user.\nThe details of the user are passed to the template using the model.addAttribute() method.\nThe th:text attribute is used to set the text of the &lt;h1&gt; tag to the name of the user, and the th:text attribute of the &lt;p&gt; tag is used to set its text to the email of the user.\nExample2 Controller",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#example3-requestparam",
    "href": "springboot/boot-concepts-view.html#example3-requestparam",
    "title": "Spring Boot: View",
    "section": "3 Example3: @RequestParam",
    "text": "3 Example3: @RequestParam\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 th:text=\"'Hello, ' + ${message}\"&gt;Hello, World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this template, the th:text attribute is used to set the text of the &lt;h1&gt; tag to the value of the message attribute in the model.\nThe expression 'Hello, ' + ${message} concatenates the string \"Hello, \" with the value of the message attribute.\nAssuming that this template is saved in a file named hello.html in your application’s templates directory, the ExampleController will render a message that says:\n\n\nFor example, if you visit the URL /hello?name=John, the message will say “Hello, John!”.\n\n“Hello, {name}!”\n\nwhen you visit the URL:\n\n/hello?name=John\n\nwhere {name} is the value of the name parameter in the query string.\nExample3 Controller",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#thymeleaf",
    "href": "springboot/boot-concepts-view.html#thymeleaf",
    "title": "Spring Boot: View",
    "section": "4 Thymeleaf",
    "text": "4 Thymeleaf\n\nLibrary5 Documentation\nRepo GitHub Code\n\n\n4.1 ThymeLeaf Templates Engine\nMost Thymeleaf attributes allow their values to be set as or containing expressions, which we will call Standard Expressions because of the dialects they are used in. These can be of five types:\n\n\n\n\n\n\nThymeleaf expresssions\n\n\n\n\n${…} : Variable expressions.\n*{…} : Selection expressions.\n#{…} : Message (i18n) expressions.\n@... : Link (URL) expressions.\n~{…} : Fragment expressions.\n__{…} : use an element inside another\n\n\n\nAttributes th:\n\n\n\n\n\n\nThyemleaf attributes\n\n\n\n\nmessage: &lt;p th:text=\"#{msg.welcome}\"&gt;Welcome everyone!&lt;/p&gt;\nlist: &lt;li th:each=\"book : ${books}\" th:text=\"${book.title}\"&gt;En las Orillas del Sar&lt;/li&gt;\nlink: &lt;form th:action=\"@{/createOrder}\"&gt;\naction: &lt;input type=\"button\" th:value**=\"#{form.submit}\" /&gt;\npath: &lt;a th:href=\"@{/admin/users}\"&gt;\n\n\n\nHow to write th:\n\n\n\nThymeLeaf how TH: works (1/3)\n\n\n\n\n\nThymeLeaf how TH: works (2/3)\n\n\n\n\n\nThymeLeaf how TH: works (3/3)",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/sblab0-2.html",
    "href": "springboot/sblab0-2.html",
    "title": "Lab#SB00-2: CRUD User",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-2: CRUD User (and Librarian)\nCRUD stands for Create, Read, Update, and Delete - the four basic operations for persistent storage of data.\nIn the context of a LibraryMangement, CRUD operations would allow us to create new users, retrieve information about existing users, update user information, and delete users from the system.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-2: CRUD User"
    ]
  },
  {
    "objectID": "springboot/sblab0-2.html#overview",
    "href": "springboot/sblab0-2.html#overview",
    "title": "Lab#SB00-2: CRUD User",
    "section": "1 Overview",
    "text": "1 Overview\nWe’ll be using a Java class called User to represent user data.\n\n\nThe @Data annotation is used to generate getters, setters, equals, hashCode, and toString methods for the class. The @NoArgsConstructor and @AllArgsConstructor annotations are used to generate constructors with no arguments and all arguments, respectively.\nWe’ll also be using a HashMap to store user data, with userId as the key. This will allow us to quickly retrieve user data using the user ID as a lookup key.\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n// generates getters, setters, equals, \n// hashCode, and toString methods\n@Data\n@NoArgsConstructor // generates a no-args constructor\n@AllArgsConstructor // generates a constructor with all arguments\npublic class User {\n    private String userId;\n    private String name;\n    private String address;\n    private int age;\n}\nWe might implement the CRUD operations for our LibraryMangement system:\n\nCreate: To create a new user, we’ll need to generate a unique user ID and create a new User object with the provided user data. We can then add the new User object to our HashMap using the generated user ID as the key.\nRead: To retrieve information about an existing user, we’ll need to look up the User object in our HashMap using the user ID as the key.\nUpdate: To update user information, we’ll need to retrieve the User object from our HashMap using the user ID as the key, and then update the relevant properties of the User object.\nDelete: To delete a user from the system, we’ll need to remove the User object from our HashMap using the user ID as the key.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-2: CRUD User"
    ]
  },
  {
    "objectID": "springboot/sblab0-2.html#references",
    "href": "springboot/sblab0-2.html#references",
    "title": "Lab#SB00-2: CRUD User",
    "section": "2 References",
    "text": "2 References\n\n2.1 Library5\n\n2.1.1 Repos\n\nLab#SB02-Library5 Code\nLab#SB02-Library5 Docs\n\n\n\n2.1.2 Java Classes\n\nBook Entity\nBook Service\nBook Controller\n\n\n\n2.1.3 Templates Thynmeleaf\n\ndetailBook\nnewBook\nnotfound\nshowBooks\nupdateBook\n\n\n\n\n2.2 LibraryManagement: controllerView\n\ncontrollerView code github",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-2: CRUD User"
    ]
  },
  {
    "objectID": "springboot/sblab0-2.html#controllerview",
    "href": "springboot/sblab0-2.html#controllerview",
    "title": "Lab#SB00-2: CRUD User",
    "section": "3 controllerView",
    "text": "3 controllerView\n\n3.1 folder-tree project & domains\n\n\n\nFolder-tree controllerView Project just with Read feature\n\n\n\n\n3.2 Home\nThis cycle defines a @Controller class that handles requests to the URL \"/home\". When a request is made, it adds the current date and time to the model object, and then returns the name of the view to be rendered.\nThe view will have access to the “todayDate” attribute and can use it to display the current date and time.\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport java.util.Date;\n\n@Controller\npublic class HomeController {\n    @RequestMapping(\"/home\")\n    public String gethome(Model model){\n\n        model.addAttribute(\"todayDate\", new Date().toString());\n        return \"home\";\n    }\n\n}\n\n\n\n\n\nrender html chrome: /home",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-2: CRUD User"
    ]
  },
  {
    "objectID": "springboot/sblab0-2.html#crud-read",
    "href": "springboot/sblab0-2.html#crud-read",
    "title": "Lab#SB00-2: CRUD User",
    "section": "4 CRUD: read",
    "text": "4 CRUD: read\n\n4.1 Users\nThe cycle request-response relies in the @Controller class called UserController, which maps requests to the \"/user/users\" URL.\nIt uses an @Autowired UserService to fetch a list of users and adds them to the model, before returning a view called \"user/users\".\npackage com.example.myFirstSpring.controller;\n\nimport com.example.myFirstSpring.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    @Autowired\n    UserService userService;\n\n    @RequestMapping(\"/users\")\n    public String getAllUsers(Model model){\n        // fetch all users, add to model\n        model.addAttribute(\"users\", userService.getAllUsers());\n        return \"user/users\";\n    }\n}\n\n\n\n\n\nrender html chrome: /user/users\n\n\nHere we will define the @Service class, called UserService with a method called getAllUsers, which returns a HashMap of user objects.\nThe HashMap is populated with 20 fake user objects using a utility method called populateFakeUsers.\npackage com.example.myFirstSpring.service;\n\nimport com.example.myFirstSpring.model.User;\nimport com.example.myFirstSpring.utils.Utils;\nimport org.springframework.stereotype.Service;\nimport java.util.HashMap;\n\n@Service\npublic class UserService {\n    public static HashMap&lt;String, User&gt; users = new HashMap&lt;&gt;();\n\n    static {\n        Utils.populateFakeUsers(20, users);\n    }\n\n    public HashMap&lt;String, User&gt; getAllUsers (){\n\n        return users;\n    }\n}\n\n4.1.1 Code source\n\ncontrollerView Project\nHome Controller\nUser Controller\nUsers html\nHome html\n\n\n\n\n4.2 Librarians\nLike User request-response cyle read feature (user-case and user-story) we will code the Librarian.\n\n\n\n\n\n\nNote\n\n\n\nThe Librarian cycle request-response would function similarly to the User cycle request-response, but with different URLs, controller methods, and service methods tailored to the Librarian entity.\n\n\n\nThe LibrarianController would map requests to the appropriate URLs, such as \"/librarian/librarians\".\nThese requests would be handled by methods in the LibrarianController, which would call methods from the LibrarianService to fetch or manipulate data.\n\n\n\nThe LibrarianService would contain methods for fetching and manipulating data from the Librarian entity, similar to the UserService for the User entity.\n\nTemplates would also be created for rendering views related to the Librarian entity, using Thymeleaf or a similar templating engine.\n\n\n4.2.1 Code source\n\ncontrollerView Project\nLibrarian controller\n\n\n\n\n\n\nrender html chrome: /librarian/librarians",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-2: CRUD User"
    ]
  },
  {
    "objectID": "springboot/sblab0-2.html#crud-create",
    "href": "springboot/sblab0-2.html#crud-create",
    "title": "Lab#SB00-2: CRUD User",
    "section": "5 CRUD: create",
    "text": "5 CRUD: create\n\n5.1 Create book (reference)\n\n\n\nCRUD: create book\n\n\n\nThe Form element\n\n\n\n\n\n\n\nHTML Form: name/id\n\n\n\nIn HTML forms, the name and id attributes serve different purposes for form elements:\n\nname attribute: This attribute defines the name of the input element, which is used to identify the form data in the request that is sent to the server when the form is submitted. The name attribute is required for all form controls and must be unique within the form.\nid attribute: This attribute is used to uniquely identify an HTML element. It can be used to target the element with CSS or JavaScript, and can also be used to associate a label with an input element using the for attribute.\n\n\n\n\n\n\n\n\n\nHTML Form: action\n\n\n\nThe action attribute is used to specify the URL of the server-side script or class/method that will process the form data when the form is submitted.\nThis attribute is required for all forms and specifies the location where the form data will be sent.\nThe method attribute is also used to specify the HTTP method that will be used to submit the form data, such as GET or POST.\n\n\n\n\n\n\n\n\nHTML Form: for\n\n\n\nThe for attribute is used to associate a label with an input element.\nThe for attribute specifies which input element the label belongs to by referring to the id attribute of the input element.\n\n\n\n\n5.2 Create user\n\nThe client sends a request to server-controller by an endpoint to get the create-user form: Users template\n\n&lt;p&gt;\n    &lt;a th:href=\"@{/user/emptyForm}\"&gt;Add new user to HashMap&lt;/a&gt;\n&lt;/p&gt;\n\n\n\n\nThe server-controller method handles the request and sends a response with the create-user form: UserController\n\n@RequestMapping(\"/emptyForm\")\npublic String sendUserForm(){\n    return \"user/userForm\";\n}\n\nThe client renders the create-user form received from server-controller: userForm\n\n&lt;form action=\"/user/createUser\" &gt;\n    &lt;p&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input  type=\"text\" name=\"name\"  id=\"name\"&gt;&lt;/p&gt;\n    &lt;p&gt;\n        &lt;label for=\"address\"&gt;address&lt;/label&gt;\n        &lt;input  type=\"text\" name=\"address\"  id=\"address\"&gt;&lt;/p&gt;\n    &lt;p&gt;\n        &lt;label for=\"age\"&gt;age&lt;/label&gt;\n        &lt;input type=\"number\" name=\"age\"  id=\"age\" &gt;&lt;/p&gt;\n    &lt;p&gt;\n        &lt;input type=\"submit\" value=\"Add new user\" /&gt;\n&lt;/form&gt;\n\n\n\n\nThe client sends a request to add this new user to HashMap: userForm\n\n&lt;form action=\"/user/createUser\" &gt;\n    &lt;input type=\"submit\" value=\"Add new user\" /&gt;\n&lt;/form&gt;\n\n\n\n\nThe sever-controller method handles the request, saves the user object in a HashMap and redirects the reponse: UserController\n\n@RequestMapping(\"/createUser\")\npublic String createUser(User user){\n    userService.createUser(user);\n    return \"redirect:users\";\n    //return \"user/userCreationResult\";\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-2: CRUD User"
    ]
  },
  {
    "objectID": "springboot/sblab0-2.html#crud-update",
    "href": "springboot/sblab0-2.html#crud-update",
    "title": "Lab#SB00-2: CRUD User",
    "section": "6 CRUD: update",
    "text": "6 CRUD: update\n\n6.1 Update book (reference)\n\n\n\nCRUD: update book\n\n\n\n\n6.2 Update user\n\nThe client sends a request to server-controller by an endpoint to get the update-user form: Update user template\n\n&lt;td&gt;\n     &lt;a th:href=\n     \"@{packedUserForm(idFromView=${user.value.userId})}\"\n     &gt;Update&lt;/a&gt;\n&lt;/td&gt;\n\n\n\n\nThe server-controller method handles the request and sends a response with the update-user form: UserController\n\n@RequestMapping(\"/packedUserForm\")\npublic String packedUserForm(@RequestParam(\"idFromView\") String id ,\n                                Model model){\n\n    User userFound = userService.findUserById(id);\n\n    if (userFound != null){\n        model.addAttribute(\"userFromController\", userFound);\n        model.addAttribute(\"message\", \"User  found\");}\n    else\n        model.addAttribute(\"message\", \"User not found\");\n\n    return \"user/userToUpdateForm\";\n}\n\nThe client renders the update-user form received from server-controller: userForm\n\n&lt;form th:action=\n        \"@{updateUser/{idFromView}\n        (idFromView=${userFromController.idUser})}\"\n      th:object=\n        \"${userFromController}\"\n      method=\n        \"post\"&gt;\n    &lt;p&gt;\n        &lt;label for=\"userId\"&gt;User Id&lt;/label&gt;\n        &lt;input  type=\"number\" name=\"userId\" id=\"userId\" \n                th:field=\"*{userId}\" readonly&gt;&lt;/p&gt;\n    &lt;p&gt;\n    &lt;p&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input  type=\"text\" name=\"name\" id=\"name\"\n                th:field=\"*{name}\"&gt;&lt;/p&gt;\n    &lt;p&gt;\n        &lt;label for=\"address\"&gt;Address&lt;/label&gt;\n        &lt;input  type=\"text\" name=\"address\" id=\"address\"\n                th:field=\"*{address}\"&gt;&lt;/p&gt;\n    &lt;p&gt;\n        &lt;label for=\"Age\"&gt;Age&lt;/label&gt;\n        &lt;input type=\"number\" name=\"age\" id=\"age\"\n                th:field=\"*{age}\" &gt;&lt;/p&gt;\n    \n        &lt;input type=\"submit\" value=\"Update user\"/&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n\n\n\n\nThe client sends a request to update this user to HashMap: userForm\n\n&lt;form th:action=\n        \"@{updateUser/{idFromView}\n        (idFromView=${userFromController.idUser})}\"\n      th:object=\n        \"${userFromController}\"\n      method=\n        \"post\"&gt;\n&lt;/form&gt;\n\n\n\n\n\nFrom age 50 to 51\n\n\n\nThe sever-controller method handles the request, updates the user object in a HashMap and redirects the reponse: UserController and UserService\n\n@PostMapping(\"/updateUser/{idFromView}\")\npublic String updateUser(@PathVariable(\"idFromView\") String id,\n                            User updatedUser) {\n\n    User userFound = userService.findUserById(id);\n\n    if (userFound != null) {\n        userService.updateUserByUser(updatedUser);\n        return \"redirect:/user/users\";\n    } else return \"user/userNotFound\";\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-2: CRUD User"
    ]
  },
  {
    "objectID": "springboot/sblab0-2.html#crud-delete",
    "href": "springboot/sblab0-2.html#crud-delete",
    "title": "Lab#SB00-2: CRUD User",
    "section": "7 CRUD: delete",
    "text": "7 CRUD: delete\n\nThe client sends a request to server-controller by an endpoint to delete a user: Users template\n\n\n\n\n\n\nWe are going to delete one user: Antoine\n\n\n\nThe server-controller method handles the request and sends a response with the result. It could be success (user deleted) or fail (the deletion operation could not be done): UserController\n\n@RequestMapping(\"/deleteUser\")\npublic String deleteUser(@RequestParam(\"idFromView\") String id) {\n\n    User userFound = userService.findUserById(id);\n\n    if (userFound != null) {\n        userService.deleteUserById(id);\n        return \"redirect:/user/users\";\n    } else return \"user/userNotFound\";\n\n\n}\n\n\n\n\n\nUser Antoine deleted\n\n\nThe @Controller uses userService to call @Service: deleteUserById:\npublic void deleteUserById(String id) {\n    users.remove(id);\n}\n\nThe server-controller method after handled the request sends the response: redirects the reponse to users: UserController redirect",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-2: CRUD User"
    ]
  },
  {
    "objectID": "springboot/sblab4.html",
    "href": "springboot/sblab4.html",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "",
    "text": "Welcome to the cifojava2022-6 wiki!",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB04-1: `JPA` Inherence"
    ]
  },
  {
    "objectID": "springboot/sblab4.html#entity-inhrence-jpa",
    "href": "springboot/sblab4.html#entity-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.1 (0) @Entity Inhrence JPA",
    "text": "2.1 (0) @Entity Inhrence JPA\n\n\nJpaInherenceLibrary0\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book&lt;&gt; Auhtor\nDataBase H2: application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code inherence and JPA uses SINGLE_TABLE strategy by default\n\n\n          @Entity\n          public class Book {}\n\n\n          @Entity(name=\"BookItem\")\n          public class ItemBook extends Book {\n          \n             @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n             @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n                       joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n                       inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n             private Set&lt;Author&gt;authors = new HashSet&lt;Author&gt;();\n          }\n\n \n          @Entity(name=\"RareItem\")\n          public class RareItem extends Book {}\n\n\n          @Entity(name=\"Author\")\n          @Table(name=\"AUTHOR_TABLE\")\n          public class Author {}\n\nVersions\n\nJpaInherenceLibrary v 1.1 : without @MappedSuperClass and @Entity superclass, Single Table strategy is applied BY DEFAULT",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB04-1: `JPA` Inherence"
    ]
  },
  {
    "objectID": "springboot/sblab4.html#mappedsuperclass-inhrence-jpa",
    "href": "springboot/sblab4.html#mappedsuperclass-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.2 (1) MappedSuperclass Inhrence JPA",
    "text": "2.2 (1) MappedSuperclass Inhrence JPA\n\n\nJpaInherenceLibrary1\n\n\nBase project:\n\nPOM\n@Entity: ItemBook, RareBook and Auhtor\nNon-@Entity: Book\nDataBase H2: application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow can not we code @MappedSuperclass and @ManyToMany author\n\n\n          @MappedSuperclass\n          public abstract class Book {}\n\n\n          @Entity(name=\"BookItem\")\n          @Table(name=\"ITEM_BOOK_TABLE\")\n          public class ItemBook extends Book {\n          \n             @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n             @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n                         joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n                         inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n             private Set&lt;Author&gt;authors = new HashSet&lt;Author&gt;();\n          }\n\n \n          @Entity(name=\"RareItem\")\n          @Table(name=\"RARE_ITEM_TABLE\")\n          public class RareItem extends Book {}\n\n\n          @Entity(name=\"Author\")\n          @Table(name=\"AUTHOR_TABLE\")\n          public class Author {}\n\nWith @MappedSuperclass any relationship can’t be done\n\n\n\nWith @MappedSuperclass\n\n\nWith @MappedSuperclass, one SuperClass and two SubClasses:\n\n\n\nWith @MappedSuperclass\n\n\nVersions\n\nJpaInherenceLibrary1 v 1.0 : not using author just inherence without relatonship @ManyToMany",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB04-1: `JPA` Inherence"
    ]
  },
  {
    "objectID": "springboot/sblab4.html#single-table-with-discriminator-inhrence-jpa",
    "href": "springboot/sblab4.html#single-table-with-discriminator-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.3 (2) Single Table with Discriminator Inhrence JPA",
    "text": "2.3 (2) Single Table with Discriminator Inhrence JPA\n\n\nJpaInherenceLibrary2\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book&lt;&gt; Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n\n\n           @Entity\n           @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n           @DiscriminatorColumn(name=\"BOOK_TYPE\", \n                 discriminatorType = DiscriminatorType.STRING)\n           public class Book {}\n\n\n          @Entity(name=\"BookItem\")\n          @Table(name=\"BOOK_ITEM_TABLE\")\n          @DiscriminatorValue(value= \"ITEMBOOK\")\n          public class BookItem extends Book {\n          \n          @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n          @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n                 joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n                 inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n          private Set&lt;Author&gt;authors = new HashSet&lt;Author&gt;();}\n \n\n          @Entity(name=\"RareItem\")\n          @Table(name=\"RARE_ITEM_TABLE\")\n          @DiscriminatorValue(value= \"REAREBOOK\")\n          public class RareItem extends Book {}\n\n\n          @Entity(name=\"Author\")\n          @Table(name=\"AUTHOR_TABLE\")\n          public class Author {}\n\nWith @Inheritance and SINGLE_TABLE\n![@Inheritance ]( https://drive.google.com/uc?id=18nfiKnQaim4-lTD21iBwy313Daxtv73H)\n\nversion 1.1 : JpaInherenceLibrary2, SINGLE_TABLE strategy",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB04-1: `JPA` Inherence"
    ]
  },
  {
    "objectID": "springboot/sblab4.html#joined-table-inhrence-jpa",
    "href": "springboot/sblab4.html#joined-table-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.4 (3) Joined Table Inhrence JPA",
    "text": "2.4 (3) Joined Table Inhrence JPA\n\n\nJpaInherenceLibrary3\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book&lt;&gt; Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.JOINED)\n\n\n          @Entity\n          @Table(name=\"BOOK_TABLE\")\n          @Inheritance(strategy = InheritanceType.JOINED)\n          @DiscriminatorColumn(name=\"BOOK_TYPE\",\n                 discriminatorType = DiscriminatorType.STRING)\n          public class Book {}\n\n\n          @Entity(name=\"BookItem\")\n          @Table(name=\"BOOK_ITEM_TABLE\")\n          @PrimaryKeyJoinColumn(name = \"bookItemId\")\n          @DiscriminatorValue(value= \"ITEMBOOK\")\n          public class BookItem extends Book {\n          \n          @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n          @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n                 joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n                 inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n          private Set&lt;Author&gt;authors = new HashSet&lt;Author&gt;();}\n \n\n          @Entity(name=\"RareItem\")\n          @Table(name=\"RARE_ITEM_TABLE\")\n          @PrimaryKeyJoinColumn(name = \"rareItemId\")\n          @DiscriminatorValue(value= \"RAREBOOK\")\n          public class RareItem extends Book {}\n\n\n          @Entity(name=\"Author\")\n          @Table(name=\"AUTHOR_TABLE\")\n          public class Author {}\n\nWith @Inheritance and JOINED\n![@Inheritance JOINED](https://drive.google.com/uc?id=1BpxaW7fV_kh4PyFWn3i49nG4SqnKYpAE)\n\nverison 1.1 : JpaInherenceLibrary3",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB04-1: `JPA` Inherence"
    ]
  },
  {
    "objectID": "springboot/sblab4.html#table-per-class-inhrence-jpa",
    "href": "springboot/sblab4.html#table-per-class-inhrence-jpa",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.5 (4) Table per class Inhrence JPA",
    "text": "2.5 (4) Table per class Inhrence JPA\n\n\nJpaInherenceLibrary4\n\n\nBase project:\n\nPOM\n@Entity: Book (SuperClass), ItemBook, RareBook and Auhtor\nn:m : Book&lt;&gt; Auhtor\nDataBase H2 : application.properties\nCommand Line Runner with methods to test\n@CrudRepository JPA 2.0, @Component (CommandLineRunner) and @Test (Jupiter)\n\nNew Topics\n\nHow to code @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n\n\n\n          @Entity\n          @Table(name=\"BOOK_TABLE\")\n          @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n          public class Book {}\n\n\n          @Entity(name=\"BookItem\")\n          @Table(name=\"BOOK_ITEM_TABLE\")\n          public class BookItem extends Book {\n          \n          @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n          @JoinTable(name = \"AUTHOR_BOOK_JOIN_TABLE\",\n               joinColumns = { @JoinColumn(name = \"AUTHOR_FK\" )},\n               inverseJoinColumns = { @JoinColumn(name = \"BOOK_FK\" )})\n          private Set&lt;Author&gt;authors = new HashSet&lt;Author&gt;();}\n \n\n          @Entity(name=\"RareItem\")\n          @Table(name=\"RARE_ITEM_TABLE\")\n          public class RareItem extends Book {}\n\n\n          @Entity(name=\"Author\")\n          @Table(name=\"AUTHOR_TABLE\")\n          public class Author {}\n\nWith @Inheritance and TABLE_PER_CLASS\n\n\n\n\n@Inheritance TABLE PER CLASS\n\n\nversion 1.1 : JpaInherenceLibrary4",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB04-1: `JPA` Inherence"
    ]
  },
  {
    "objectID": "springboot/sblab4.html#basic-spring-boot-project",
    "href": "springboot/sblab4.html#basic-spring-boot-project",
    "title": "Lab#SB04-1: JPA Inherence",
    "section": "2.6 (0) Basic Spring Boot project",
    "text": "2.6 (0) Basic Spring Boot project\n\n\nUniversal Planes\n\n\nPreliminary works:\n\nCreate project on Spring Init\n\nversion 1.0 : spring boot executions",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB04-1: `JPA` Inherence"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-injection.html",
    "href": "springboot/boot-concepts-injection.html",
    "title": "Spring Boot: Dependency Injection",
    "section": "",
    "text": "📘 Dependency Injection\nDependency injection (DI) is a design pattern that allows objects to receive their dependencies from external sources rather than creating them internally. In other words, it is a way to manage the dependencies between objects in a software application.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Dependency Injection"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#overview",
    "href": "springboot/boot-concepts-injection.html#overview",
    "title": "Spring Boot: Dependency Injection",
    "section": "1 Overview",
    "text": "1 Overview\nDependency injection (DI) is a design pattern that allows objects to receive their dependencies from external sources rather than creating them internally. In other words, it is a way to manage the dependencies between objects in a software application.\nIn Spring Boot, the dependency injection is provided by the Spring Framework. The Spring container is responsible for creating and managing the objects in the application, and it uses dependency injection to provide the objects with their dependencies.\nThere are thre types of dependency injection:\n\nConstructor injection: The dependencies are provided to the class through its constructor.\nSetter injection: The dependencies are provided to the class through setter methods.\nMethod Injection: The dependencies are provided to the class through an interface which declares the method(s)\n\nWith dependency injection, objects are no longer responsible for creating or managing their dependencies, which makes the code more maintainable and easier to test (not used in Spring Boot).\nThe @Autowired annotation is used in Spring Boot to automatically wire a bean from the Spring application context into a class field or method.\nThis allows you to use dependency injection to provide objects with their dependencies without having to manually create or manage them.\n\n\n\n\n\n\nDependency Injection\n\n\n\nDependency Injection (DI) is a design pattern that allows objects to receive their dependencies from external sources rather than creating them internally.\nSpring Boot usesDI to manage the dependencies between objects and provide them with their dependencies using Constructor injection and setter injection, the@Autowired annotation is used to wire the bean from the Spring application context.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Dependency Injection"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#inversion-of-control-ioc",
    "href": "springboot/boot-concepts-injection.html#inversion-of-control-ioc",
    "title": "Spring Boot: Dependency Injection",
    "section": "2 Inversion of Control IoC",
    "text": "2 Inversion of Control IoC\n\nInversionOfControl\nInversion of Control vs Dependency Injection\n\n\n\n\n\n\n\n\nDIP, IoC and DI\n\n\n\nIoC is a design pattern that allows for the inversion of control of object creation and management. DI is the process of providing dependencies to a class, rather than the class creating them itself.\nBoth IoC and DI are related to the DIP, which is a design principle that promotes decoupling and abstraction.\nThe hierarchy between these concepts is that IoC is the pattern that enables DI, and DI is a way of implementing the DIP.\n\n\nInversion of Control (IoC) is a design pattern commonly used in Spring Boot applications, where the framework is responsible for creating and managing objects (beans) and their dependencies.\nThe control of the application flow is inverted, as the framework decides when and how to instantiate objects, rather than the developer having to explicitly create them.\nThis simplifies the development process and makes the code more modular and testable.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Dependency Injection"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#dependency-inversion-principle-dip",
    "href": "springboot/boot-concepts-injection.html#dependency-inversion-principle-dip",
    "title": "Spring Boot: Dependency Injection",
    "section": "3 Dependency Inversion Principle DIP",
    "text": "3 Dependency Inversion Principle DIP\nThe Dependency Inversion Principle (DIP) is a software design principle that states that high-level modules should not depend on low-level modules, but both should depend on abstractions.\nThis allows for decoupling and easier maintenance of the codebase, as changes in low-level modules don’t affect high-level ones.\nThe use of interfaces and abstract classes are common in implementing the DIP.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Dependency Injection"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#dependency-injection-di",
    "href": "springboot/boot-concepts-injection.html#dependency-injection-di",
    "title": "Spring Boot: Dependency Injection",
    "section": "4 Dependency Injection DI",
    "text": "4 Dependency Injection DI\nDependency Injection (DI) is the process of providing dependencies (objects) to a class, rather than the class creating them itself.\nThis is often done using frameworks like Spring Boot, where dependencies are defined as beans and injected into other beans using annotations.\nThis reduces the amount of boilerplate code and makes the codebase more modular and maintainable.\nThe DI principle is closely related to the DIP, as it allows for the injection of abstractions rather than concrete implementations.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Dependency Injection"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-injection.html#advantages",
    "href": "springboot/boot-concepts-injection.html#advantages",
    "title": "Spring Boot: Dependency Injection",
    "section": "5 Advantages",
    "text": "5 Advantages\n\nDependency Injection\n\nInversion of Control is a principle in software engineering by which the control of objects or portions of a program is transferred to a container or framework.\nIt’s most often used in the context of object-oriented programming.\nBy contrast with traditional programming, in which our custom code makes calls to a library, IoC enables a framework to take control of the flow of a program and make calls to our custom code.\n\ndecoupling the execution of a task from its implementation\nmaking it easier to switch between different implementations\ngreater modularity of a program\ngreater ease in testing a program by isolating a component or mocking its dependencies and\nallowing components to communicate through contracts",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Dependency Injection"
    ]
  },
  {
    "objectID": "springboot/sblab0-5.html",
    "href": "springboot/sblab0-5.html",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-5: API Rest and JPA H2\nH2 database is a lightweight, open-source, and fast in-memory database that can be easily integrated with Spring Boot applications.\nSpring Boot is a popular framework for building enterprise-grade applications quickly and easily.\nWe will walk through the steps to set up a H2 database in Linux Spring Boot, create a local server, define a User entity, and expose RESTful APIs to perform CRUD operations on the User entity using Postman.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-5: Rest & JPA-H2"
    ]
  },
  {
    "objectID": "springboot/sblab0-5.html#install-and-create-a-h2-db",
    "href": "springboot/sblab0-5.html#install-and-create-a-h2-db",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "1 Install and create a H2 DB",
    "text": "1 Install and create a H2 DB\nReferences:\n\nSpring Boot: H2 DB and Thymeleaf\nSpring Boot: Rest\nLibrary5\n\nInstall Java and Spring Boot on your Linux machine or start from previous project:\n\nDownload and install Java JDK from the official Oracle website.\nDownload and install Spring Boot from the official Spring website.\nDownload the H2 database from the official H2 website.\nExtract the downloaded file to a location on your Linux machine.\nExecute H2 Desktop app and create a local H2 DB.\n\n\n\n\nCreate a H2 DB\n\n\n\nCreation H2 DB step-by-step",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-5: Rest & JPA-H2"
    ]
  },
  {
    "objectID": "springboot/sblab0-5.html#librarymanagmentrest-using-h2",
    "href": "springboot/sblab0-5.html#librarymanagmentrest-using-h2",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "2 LibraryManagmentRest using H2",
    "text": "2 LibraryManagmentRest using H2\n\n\n\nTree-folder project with UserRepository\n\n\n\n2.1 Configure H2 DB\n\npom.xml: dependencies H2 and JPA\nUserRepository interface\nUser class @Entity\napplication.properties\nmodify service to create a user object from API Rest and save it to H2 DB\n\n&lt;dependency&gt;\n  &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n  &lt;artifactId&gt;h2&lt;/artifactId&gt;\n  &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n\n2.2 application.properties\n\n\n\napplication properties file\n\n\n\nOpen the application.properties file located in the sc/main/resources directory of your Spring Boot project.\nAdd the following configuration to use the H2 database:\n\nserver.port=8090\n\nspring.h2.console.enabled=true\n\n#H2 DATASOURCE\nspring.datasource.url=jdbc:h2:/home/albert/MyProjects/MyDBs/h2DBs/libraryManagementRest\n#spring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.username=albert\nspring.datasource.password=1234\nspring.datasource.driver-class-name=org.h2.Driver\n\n#JPA\n#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect\nspring.jpa.defer-datasource-initialization=true\n\n#Remove banner\nspring.main.banner-mode=off\n\n#DDL\n#example: create table book_table (book_id bigint not null, author varchar(255), isbn varchar(255), pages integer not null, published_year integer, book_title varchar(255), primary key (book_id))\nspring.jpa.hibernate.ddl-auto=update\nThis is a configuration file in the application.properties format for a Spring Boot application. It specifies various settings related to the H2 database, JPA, and the application’s server port.\n\nThe server.port setting sets the port number for the application’s server to 8090.\nspring.h2.console.enabled=true enables the H2 database console, which allows you to interact with the database from a web interface.\nThe spring.datasource settings specify the URL, username, password, and driver class name for the H2 database.\nThe spring.jpa settings specify the Hibernate dialect to be used for the database, and set defer-datasource-initialization to true to delay database connection until necessary.\nspring.main.banner-mode=off disables the Spring Boot banner during application startup.\nspring.jpa.hibernate.ddl-auto=update instructs Hibernate to automatically update the database schema based on changes to JPA entity classes. In this case, it specifies a single table named book_table with columns for book_id, author, isbn, pages, published_year, and book_title.\n\n\n\n2.3 DDL\nDDL stands for Data Definition Language. It is a subset of SQL (Structured Query Language) used to define, modify and delete the structure of database objects like tables, indexes, views, and procedures.\n\n\nDDL commands are used to create or alter the schema of a database, which defines the layout of the data and the relationships between the tables. Some examples of DDL statements include CREATE TABLE, ALTER TABLE, DROP TABLE, CREATE INDEX, and CREATE PROCEDURE.\n\n\n\n\n\n\nspring.jpa.hibernate.ddl-auto\n\n\n\nSpecifically, the spring.jpa.hibernate.ddl-auto property is used to control how Hibernate generates or updates the database schema.\nThe available options are create, create-drop, update, validate, and none.\n\n\nThe available options are:\n\nIf set to create, Hibernate will create the database schema on application startup.\nIf set to create-drop, Hibernate will create the schema on startup and drop it on shutdown.\nIf set to update“, Hibernate will update the schema to match the entity mappings.\nIf set to validate“, Hibernate will only validate the schema but not update it.\nAnd if set to none, Hibernate will not perform any schema management operations.\n\nIt’s important to choose the appropriate value for this property based on your specific needs and deployment environment.\n\n\n2.4 Create a User repository and User entity\n\nCreate a new package and a new interface named UserRepository in the package with the following code:\n\nimport com.example.myFirstSpring.model.User;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface UserRepository extends CrudRepository&lt;User, String&gt; {}\n\nCreate a User entity: create a new package and a new class named User in the package with the following code:\n\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n@Data // generates getters, setters, equals, hashCode, and toString methods\n@NoArgsConstructor // generates a no-args constructor\n@AllArgsConstructor // generates a constructor with all arguments\n@Entity(name=\"User\")\n@Table(name=\"USER_TABLE\")\npublic class User {\n    @Id\n    private String userId;\n    private String name;\n    private String address;\n    private int age;\n}\n\nAdd userRepository.save(user); in createUser, userService:\n\n  public User createUser(User user) {\n\n        String newUserId = Utils.createUUID();\n        user.setUserId(newUserId);\n\n        userRepository.save(user);\n\n        return users.put(newUserId, user);\n\n    }\n\n\n2.5 Execute project\nWhen the application starts, Spring Boot will automatically execute the DDL scripts specified in the schema.sql or data.sql files located in the src/main/resources directory.\nIf these files are not present, Spring Boot will create an empty H2 database using the default settings specified in the application.properties file.\n\n\nOnce the database is created and configured, Spring Boot will use JPA to manage the database schema and entities, allowing you to easily perform CRUD operations and other database operations in your application.\n\n\n\nSpring Boot Execution and DDL creating a empty H2 DB\n\n\n\n\nOnce the database is created and configured, Spring Boot will use JPA to manage the database schema and entities, allowing you to easily perform CRUD operations and other database operations in your application.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-5: Rest & JPA-H2"
    ]
  },
  {
    "objectID": "springboot/sblab0-5.html#api-rest",
    "href": "springboot/sblab0-5.html#api-rest",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "3 API Rest",
    "text": "3 API Rest\n\nOpen Postman and create a new request.\nSet the HTTP method to \"POST\" and set the request URL to \"http://localhost:8090/api/user/createUser\".\nClick on the “Body” tab and select the “raw” radio button. Set the request body to the following JSON object:\n\n{\n    \"name\": \"I AI\",\n    \"address\": \"Isaac Asimov\",\n    \"age\": 566\n}\n\nThis will create a new User entity, so click on the “Send” button to send the request.\nIf the request is successful, you should receive a response with a status code of 201 Created and the User entity in the response body.\n\n\n\n\nPostman sends a request and shows the response of the created User object\n\n\n\nTo check if the User entity has been created in the H2 database, you should use the H2 console: Open a web browser and navigate to \"http://localhost:8090/h2-console\".\n\n\nDriver Class: org.h2.Driver\nJDBC URL: jdbc:h2:/home/albert/MyProjects/MyDBs/h2DBs/libraryManagementRest\nUser Name: albert\nPassword: 1234\n\n\n\n\nH2 console URL and data to enter\n\n\nEnter the following SQL query:\nSELECT * FROM USER_TABLE;\nThis should return a result set containing the User entity you just created.\n\n\n\nSELECT * FROM USER_TABLE;",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-5: Rest & JPA-H2"
    ]
  },
  {
    "objectID": "springboot/sblab0-5.html#versions",
    "href": "springboot/sblab0-5.html#versions",
    "title": "Lab#SB00-5: Rest & JPA-H2",
    "section": "4 Versions",
    "text": "4 Versions\nendpoint example: http://localhost:8090/api/book/books\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nLibrary Management Rest H2 0.0\nadd H2 to project: application.properties, @Entity, @UserRepository, POM  userRestController: createUser, getAllusers\nBasic Structure\nlocalhost:8090/api/user/createUser\n\n\nLibrary Management Rest H2 0.1\nrefactor user to H2, remove HashMap users and add ResponseEntity\n-\n-\n\n\nLibrary Management Rest H2 0.2\nrefactor book to H2, remove HashMap books and add ResponseEntity\n-\n-\n\n\nLibrary Management Rest H2 0.3\nrefactor borrow to H2, remove HashMap borrows and add ResponseEntity  getAllBorrows, populate , createBorrow\n-\n-\n\n\nLibrary Management Rest H2 0.4\nrefactor borrow to H2, remove HashMap borrows and add ResponseEntity  returnBook\n-\n-\n\n\nLibrary Management Rest H2 0.5\nuser new field: borrowIds \n-\n-\n\n\n\n\n4.1 Postman apis\n\n\n\nDomain\nLink\nObjects\n\n\n\n\nbooks\npostman link\nbook\n\n\nborrow\npostman link\nborrow\n\n\nuser\npostman link\nuser",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-5: Rest & JPA-H2"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html",
    "href": "springboot/sblab0-4.html",
    "title": "Lab#SB00-4: API Rest",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-4: API Rest\nAfter Lab#SB00-3 we are going to creata an API Rest just for book domain.\nYou may also check this introduction to API Rest.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#overview",
    "href": "springboot/sblab0-4.html#overview",
    "title": "Lab#SB00-4: API Rest",
    "section": "1 Overview",
    "text": "1 Overview\nAn API is a set of definitions and protocols for building and integrating application software.\n\nIt’s sometimes referred to as a contract between an information provider and an information user—establishing the content required from the consumer (the call) and the content required by the producer (the response).\n\n\n\nFor example, the API design for a weather service could specify that the user supply a zip code and that the producer reply with a 2-part answer, the first being the high temperature, and the second being the low temperature.\n\n\n\n\n\n\nRest\n\n\n\nREST is a set of architectural constraints, not a protocol or a standard. API developers can implement REST in a variety of ways.\n\n\nWhen a client request is made via a RESTful API, it transfers a representation of the state of the resource to the requester or endpoint.\nThis information, or representation, is delivered in one of several formats via HTTP: JSON (Javascript Object Notation), HTML, XLT, Python, PHP, or plain text.\n\n\n\n\n\n\nJSON\n\n\n\nJSON is the most generally popular file format to use because, despite its name, it’s language-agnostic, as well as readable by both humans and machines.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#http-messages",
    "href": "springboot/sblab0-4.html#http-messages",
    "title": "Lab#SB00-4: API Rest",
    "section": "2 HTTP messages",
    "text": "2 HTTP messages\nHTTP messages are how data is exchanged between a server and a client.\nThere are two types of messages:\n\nrequests sent by the client to trigger an action on the server,\nand responses, the answer from the server.\n\nHTTP messages are composed of textual information encoded in ASCII, and span over multiple lines.\n\n\nIn HTTP/1.1, and earlier versions of the protocol, these messages were openly sent across the connection. In HTTP/2, the once human-readable message is now divided up into HTTP frames, providing optimization and performance improvements.\n\n\n\nHTTP message\n\n\nHTTP requests, and responses, share similar structure and are composed of:\n\nA start-line describing the requests to be implemented, or its status of whether successful or a failure. This start-line is always a single line.\nAn optional set of HTTP headers specifying the request, or describing the body included in the message.\nA blank line indicating all meta-information for the request has been sent.\nAn optional body containing data associated with the request (like content of an HTML form), or the document associated with a response. The presence of the body and its size is specified by the start-line and HTTP headers.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#http-status-messages",
    "href": "springboot/sblab0-4.html#http-status-messages",
    "title": "Lab#SB00-4: API Rest",
    "section": "3 HTTP status messages",
    "text": "3 HTTP status messages\n\nHTTP status messages\n\n\n\n\nHTTP status messages poster\n\n\nSource-status-code-poster by Steve Schoger",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#library-management-base-project",
    "href": "springboot/sblab0-4.html#library-management-base-project",
    "title": "Lab#SB00-4: API Rest",
    "section": "4 Library Management base project",
    "text": "4 Library Management base project\n\nLibrary Management 0.7",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#folder-tree-project",
    "href": "springboot/sblab0-4.html#folder-tree-project",
    "title": "Lab#SB00-4: API Rest",
    "section": "5 Folder-tree project",
    "text": "5 Folder-tree project\n\n\n\nLibrary Management",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#api-rest-book",
    "href": "springboot/sblab0-4.html#api-rest-book",
    "title": "Lab#SB00-4: API Rest",
    "section": "6 API Rest book",
    "text": "6 API Rest book\nReference:\n\nBuilding a RESTful Web Service\nWhat is JSON\nLibrary1 Rest Controller Book\nWhat is a REST API?\n\n\n\n\n\n\n\n@RestController Annotation\n\n\n\nThis annotation is used at the class level and allows the class to handle the requests made by the client. The RestController allows to handle all REST APIs such as GET, POST, Delete, and PUT requests.\n\n\nWe define a REST controller using the @RestController and @RequestMappingannotations. The controller handles requests related to books under the base path \"/api/book\".\nThe BookRestController class has a dependency on the BookService class, which is automatically injected using the @Autowired annotation.\nThe controller has a GET method mapped to the \"/books\" path, which retrieves all the books using the bookService.getAllBooks() method and returns them as a HashMap with String keys and Book values.\n\n\nThis method can be accessed through a web browser or another client, and it will return the response in a format such as JSON or XML.\npackage com.example.myFirstSpring.restcontroller;\n\nimport com.example.myFirstSpring.model.Book;\nimport com.example.myFirstSpring.service.BookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.util.HashMap;\n\n@RestController\n@RequestMapping(\"/api/book\")\npublic class BookRestController {\n\n    @Autowired\n    BookService bookService;\n\n    @GetMapping (\"/books\")\n    public HashMap&lt;String, Book&gt; getAllBooks(){\n\n      return bookService.getAllBooks();\n\n\n    }\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#postman",
    "href": "springboot/sblab0-4.html#postman",
    "title": "Lab#SB00-4: API Rest",
    "section": "7 Postman",
    "text": "7 Postman\n\n\n\nPostman\n\n\nPostman is a popular API development tool used by developers to test, design, and document APIs.\nWith Postman, developers can send requests to APIs and receive responses, allowing them to check the functionality of the API and identify any issues that need to be fixed.\nPostman also allows developers to create collections of requests and to collaborate with other developers by sharing these collections.\n\n7.1 Install Postman in Linux Mint\n\n$ sudo rm /etc/apt/preferences.d/nosnap.pref\n$ sudo apt update\n$ sudo apt install snapd\n$ sudo snap install postman\n\nendpoint: http://localhost:8086/api/book/books\n\n\n\nPostman\n\n\n\n\n7.2 Using variables\nVariables enable you to store and reuse values in Postman.\nBy storing a value as a variable, you can reference it throughout your collections, environments, requests, and test scripts. Variables help you work efficiently, collaborate with teammates, and set up dynamic workflows.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#swagger",
    "href": "springboot/sblab0-4.html#swagger",
    "title": "Lab#SB00-4: API Rest",
    "section": "8 Swagger",
    "text": "8 Swagger\nSwagger, on the other hand, is an open-source framework for designing and documenting APIs.\nWith Swagger, developers can create an API specification that defines the endpoints, parameters, and responses of an API.\nThis specification can then be used to generate documentation, client libraries, and server stubs in multiple programming languages.\nSwagger also includes a user interface called Swagger UI, which allows developers to interact with an API and explore its endpoints and responses.\n\n8.1 Add Swagger to Spring\nAdd Swagger to project, swagger web and refactor:\n\nURL swagger :\n\n\nhttp://localhost:8080/swagger-ui.html\n\n\nJava Version and dependencies\n\n  &lt;properties&gt;\n              &lt;java.version&gt;11&lt;/java.version&gt;\n  &lt;/properties&gt;\nDependencies:\n  &lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;\n    &lt;dependency&gt;\n          &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n          &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\n          &lt;version&gt;2.9.2&lt;/version&gt;\n  &lt;/dependency&gt;\n\n  &lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;\n  &lt;dependency&gt;\n        &lt;groupId&gt;io.springfox&lt;/groupId&gt;\n        &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\n        &lt;version&gt;2.9.2&lt;/version&gt;\n  &lt;/dependency&gt;\n\nAnnotation:\n\n\n@EnableSwagger2 in Main\n\n\napplication.properties:\n\n\nspring.mvc.pathmatch.matching-strategy=ant-path-matcher\n\n\njava class config:\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@EnableSwagger2\n@Configuration\npublic class SpringFoxConfig {\n\n    @Bean\n    public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .select()\n                .apis(RequestHandlerSelectors\n                .any())\n                .paths(PathSelectors\n                .any())\n                .build();\n    }\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/sblab0-4.html#versions",
    "href": "springboot/sblab0-4.html#versions",
    "title": "Lab#SB00-4: API Rest",
    "section": "9 Versions",
    "text": "9 Versions\nendpoint: http://localhost:8090/api/book/books\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nLibrary Management Rest 0.0\ncreate project pom and refactoring, CRUD: read all books\nBasic Structure\nlocalhost:8090/api/book/books\n\n\nLibrary Management Rest 0.1\nCRUD: delete book\n-\nlocalhost:8090/api/book/deleteBook\n\n\nLibrary Management Rest 0.2\nCRUD: create book & create borrow by ids\n-\nlocalhost:8090/api/book/books - localhost:8090/api/user/users - localhost:8090/api/borrow/createBorrow\n\n\nLibrary Management Rest 0.3\nCRUD: update book and update method in book model\nFinal structure\nlocalhost:8090/api/book/updateBook\n\n\nLibrary Management Rest 0.4\nuser CRUD\n\n\n\n\n\n\n9.1 Postman apis\n\n\n\nDomain\nLink\nObjects\n\n\n\n\nbooks\npostman link\nbook\n\n\nborrow\npostman link\nbook user borrow\n\n\nuser\npostman link\nuser",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-4: API Rest"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html",
    "href": "springboot/boot-concepts-jpa.html",
    "title": "Spring Boot: JPA & DI",
    "section": "",
    "text": "📘 JPA\nJPA stands for Java Persistence API.\nIt is a Java specification for managing, persisting, and accessing relational data in Java applications.\nJPA is a standard API for ORM (Object-Relational Mapping) and provides a way to map Java objects to relational databases.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA & DI"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#overall",
    "href": "springboot/boot-concepts-jpa.html#overall",
    "title": "Spring Boot: JPA & DI",
    "section": "1 Overall",
    "text": "1 Overall\nIn Spring Boot, JPA is used to interact with databases. It provides a convenient and powerful way to perform CRUD operations on database tables and provides a lot of useful features such as caching, lazy loading, and automatic management of transaction.\nSpring Boot provides a number of auto-configuration options for JPA, so you don’t have to set up everything from scratch.\n\n\n\nSpring Boot JPA\n\n\nThe spring-boot-starter-data-jpa is a starter for using Spring Data JPA with Hibernate. It provides a convenient way to create JPA repositories, which can be used to perform CRUD operations on the database.\n&lt;!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-jpa --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;\n    &lt;version&gt;3.0.4&lt;/version&gt;\n&lt;/dependency&gt;\nWhen using JPA in Spring Boot, you can use the @Entity annotation to define a class as a JPA entity, and the @Repository annotation to define a class as a JPA repository. This allows you to use the JPA repository to perform CRUD operations on the corresponding database table.\n\n\nSpring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA based repositories. This module deals with enhanced support for JPA based data access layers. It makes it easier to build Spring-powered applications that use data access technologies.\nFeatures:\n\nSophisticated support to build repositories based on Spring and JPA\nSupport for Querydsl predicates and thus type-safe JPA queries\nTransparent auditing of domain class\nPagination support, dynamic query execution, ability to integrate custom data access code\nValidation of @Query annotated queries at bootstrap time\nSupport for XML based entity mapping\nJavaConfig based repository configuration by introducing @EnableJpaRepositories.\n\n\nBasic Vocabulary\n\n\n\n\n\n\nAcronym\nDefinition\n\n\n\n\nORM\nObject-Relational Mapping, a programming technique for converting data between incompatible type systems in object-oriented programming languages and relational databases.\n\n\nDAO\nData Access Object, a design pattern that provides an abstract interface to access data from a database or other persistent storage mechanism.\n\n\nJPA\nJava Persistence API, a specification for object-relational mapping in Java that provides a standard way to map Java objects to relational databases.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA & DI"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#spring-data-repositories",
    "href": "springboot/boot-concepts-jpa.html#spring-data-repositories",
    "title": "Spring Boot: JPA & DI",
    "section": "2 Spring Data Repositories",
    "text": "2 Spring Data Repositories\n\n\n\n\n\n\npring Data Repositories\n\n\n\nSpring Data Repositories provide a high-level, generic abstraction for data access that allows developers to work with data from various data sources, including relational databases, NoSQL databases, and other data stores, using a consistent and simplified API.\n\n\nimport org.springframework.data.repository.CrudRepository;\nimport java.util.Optional;\n//@Repository\npublic interface BookRepository extends CrudRepository &lt;Book, Long&gt; {\n    // custom query methods defined here\n    Optional&lt;Book&gt; findBookByTitle(String title);\n    Optional&lt;Book&gt; deleteBookByTitle(String title);\n}\nThe repositories eliminate the need for boilerplate code and allow developers to define query methods and dynamic queries in a straightforward manner.\n\n\n\nSpring Boot Repositories - Core concepts\n\n\nSpring Data Repositories also provide support for pagination, sorting, and auditing, as well as integration with other Spring technologies, such as Spring MVC and Spring Security.\n\n\nSpring Data Repositories simplify data access and enable rapid development of data-driven applications.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA & DI"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#using-crudrepository",
    "href": "springboot/boot-concepts-jpa.html#using-crudrepository",
    "title": "Spring Boot: JPA & DI",
    "section": "3 Using CrudRepository",
    "text": "3 Using CrudRepository\nCrudRepository is an interface provided by Spring Data that defines a standard set of methods for performing CRUD (Create, Read, Update, and Delete) operations on entities.\nThe interface provides basic data access functionality and can be extended to provide additional functionality as needed.\nBookRepository:\nimport org.springframework.data.repository.CrudRepository;\nimport java.util.Optional;\n//@Repository\npublic interface BookRepository extends CrudRepository &lt;Book, Long&gt; {\n    // custom query methods defined here\n    Optional&lt;Book&gt; findBookByTitle(String title);\n    Optional&lt;Book&gt; deleteBookByTitle(String title);\n}\nWe use the @Autowired annotation to inject an instance of BookRepository into our Spring application, Spring’s dependency injection container will automatically instantiate a concrete implementation of the BookRepository interface and inject it into our application’s bookRepository object.\nThis implementation is typically a proxy object that provides the required functionality for data access.\nBookService:\nimport java.util.Optional;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class BookService {\n\n    @Autowired\n    BookRepository bookRepository;\n\n    public Iterable&lt;Book&gt; getAllBooks() {\n        return bookRepository.findAll();\n    }\nWith this object, we can use the methods defined in the CrudRepository interface, such as save(), findOne(), findAll(), and delete(), to perform CRUD operations on Book entities.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA & DI"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#jpa-dependency-injection-and-repository",
    "href": "springboot/boot-concepts-jpa.html#jpa-dependency-injection-and-repository",
    "title": "Spring Boot: JPA & DI",
    "section": "4 JPA, Dependency Injection and Repository",
    "text": "4 JPA, Dependency Injection and Repository\n\n\n\nSpring Boot Overview\n\n\n\nIntroduction to Spring Framework\n\nThe Java Persistence API (JPA) is a popular Java framework used for Object-Relational Mapping (ORM). The JPA framework provides the @Repository annotation to identify the DAO (Data Access Object) layer of an application.\n\n\nThe@Repository annotation is a good example of the terms Dependency Inversion Principle (DIP), Dependency Injection (DI), and Inversion of Control (IoC) container.\nThe Dependency Inversion Principle (DIP) is a software design principle that states high-level modules should not depend on low-level modules, but both should depend on abstractions.\n\n\n\n\n\n\n@Repository\n\n\n\nThe @Repository annotation follows this principle by allowing the DAO layer to depend on an interface (abstraction) instead of directly depending on a concrete implementation.\nThis allows for easier maintenance, testing, and flexibility in changing the implementation of the DAO layer.\n\n\nDependency Injection (DI) is a design pattern that implements the DIP by injecting dependencies (objects or interfaces) into a class at runtime.\nIn the case of the @Repository annotation, the dependency is the EntityManager object, which is injected into the DAO class using the @PersistenceContext annotation.\nThis allows the DAO to be decoupled from the EntityManager implementation and provides flexibility to use different implementations of the EntityManager.\n\n\n\nDIP - Dependency Inversion Principle\n\n\n\n\nInversion of Control (IoC) container is a pattern used to manage the lifecycle of objects and their dependencies. It allows the framework to control the creation, configuration, and destruction of objects, rather than having the application manage them directly.\nThe @Repository annotation is an example of an IoC container because it is managed by the Spring framework. The framework handles the instantiation and injection of dependencies, such as the EntityManager, into the DAO classes.\nIn this case, the high order modules are the business logic layer and the low order modules are the data access layer. The business logic layer depends on the data access layer through an abstraction, and the data access layer depends on the EntityManager implementation through injection by the IoC container. This allows for a separation of concerns and easier maintenance and testing of each layer independently.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA & DI"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#annotations",
    "href": "springboot/boot-concepts-jpa.html#annotations",
    "title": "Spring Boot: JPA & DI",
    "section": "5 Annotations",
    "text": "5 Annotations\n\nJPA Annotations\n\n\n\n\n\n\nAnnotation\nDescription\n\n\n\n\n@Entity\nSpecifies that the class is an entity and will be managed by the EntityManager.\n\n\n@Table\nSpecifies the database table name for the entity.\n\n\n@Id\nSpecifies the primary key field of the entity.\n\n\n@GeneratedValue\nSpecifies how the primary key should be generated.\n\n\n@Column\nSpecifies the database column name for a field.\n\n\n@JoinColumn\nSpecifies the join column when using a relationship.\n\n\n@OneToMany\nDefines a one-to-many relationship between two entities.\n\n\n@ManyToOne\nDefines a many-to-one relationship between two entities.\n\n\n@ManyToMany\nDefines a many-to-many relationship between two entities.\n\n\n@JoinTable\nSpecifies the join table for a many-to-many relationship.\n\n\n@Embedded\nSpecifies that the field should be mapped as an embedded object.\n\n\n@Transient\nSpecifies that the field should not be persisted to the database.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA & DI"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-jpa.html#example",
    "href": "springboot/boot-concepts-jpa.html#example",
    "title": "Spring Boot: JPA & DI",
    "section": "6 Example",
    "text": "6 Example\n\nLibrary1 code github\nLibrary1 docs",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: JPA & DI"
    ]
  },
  {
    "objectID": "springboot/sblab0-6.html",
    "href": "springboot/sblab0-6.html",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-6: API Rest and NoSQL-MongoDB\nConnecting Spring Boot entity book to MongoDB Atlas can be completed in a few steps.\nTo connect Spring Boot entity book to MongoDB Atlas, create an account, cluster and database user on MongoDB Atlas. Add MongoDB dependency, configure application.properties and create a Book entity and repository.\nFinally, use the repository to perform CRUD operations on your books collection.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-6: Rest & MongoDB"
    ]
  },
  {
    "objectID": "springboot/sblab0-6.html#references",
    "href": "springboot/sblab0-6.html#references",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "1 References",
    "text": "1 References\n\nSpring Boot Data\nAccessing Data with MongoDB\nSpring Boot Integration with MongoDB Tutorial\nJava - Mapping POJOs\nMongoDB Atlas\nLibrary7",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-6: Rest & MongoDB"
    ]
  },
  {
    "objectID": "springboot/sblab0-6.html#example-book",
    "href": "springboot/sblab0-6.html#example-book",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "2 Example: Book",
    "text": "2 Example: Book\nTo connect your Spring Boot entity book to MongoDB Atlas, you can follow these steps:\n\nCreate a MongoDB Atlas account: First, you need to create an account on MongoDB Atlas. You can sign up for a free account with a limit of 512 MB storage.\nCreate a new project: After logging in, create a new project and give it a name.\nCreate a new cluster: In the project dashboard, click on the “Build a New Cluster” button. Choose a provider, region, and the cluster tier that suits your requirements. Configure your cluster and click “Create Cluster” to start building your cluster.\nCreate a database user and IP permission: Once the cluster is ready, create a database user with appropriate permissions and give network access (add your IP to IP Access List).\nGet connection string: After creating a database user, you will get a connection string that you can use to connect to your MongoDB Atlas cluster. Copy the connection string to use it later.\nAdd MongoDB dependency: In your Spring Boot project, add the MongoDB dependency in the pom.xml file:\n\n&lt;dependency&gt;\n   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n   &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\nConfigure application.properties: In the application.properties file, add the following properties:\n\nspring.data.mongodb.uri=mongodb+srv://&lt;username&gt;:&lt;password&gt;@&lt;clustername&gt;.mongodb.net/&lt;dbname&gt;?retryWrites=true&w=majority\nspring.data.mongodb.database=&lt;dbname&gt;\nReplace &lt;username&gt;, &lt;password&gt;, &lt;clustername&gt;, and &lt;dbname&gt; with your own values.\n\nCreate Book Document: Create a Book Document class with annotations.\n\n@Document(collection = \"books\")\npublic class Book {\n    @Id\n    private String id;\n    private String title;\n    private String author;\n    // getters and setters\n}\n\nCreate a Book repository: Create a repository interface that extends MongoRepository&lt;Book, String&gt;:\n\npublic interface BookRepository extends MongoRepository&lt;Book, String&gt; {\n}\n\nUse the Book repository: You can use the Book repository to perform CRUD operations on your books collection.\n\n@Service\npublic class BookService {\n    @Autowired\n    private BookRepository bookRepository;\n\n    public List&lt;Book&gt; getAllBooks() {\n        return bookRepository.findAll();\n    }\n\n    public void addBook(Book book) {\n        bookRepository.save(book);\n    }\n\n    public void deleteBook(String id) {\n        bookRepository.deleteById(id);\n    }\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-6: Rest & MongoDB"
    ]
  },
  {
    "objectID": "springboot/sblab0-6.html#librarymanagementrest-mongodb",
    "href": "springboot/sblab0-6.html#librarymanagementrest-mongodb",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "3 LibraryManagementRest: mongoDB",
    "text": "3 LibraryManagementRest: mongoDB\n\n3.1 folder-tree\n\n\n\nFolder-tree bookImage\n\n\n\n\n3.2 mongoDB: string connection\n\n\n\nCreate account and cluster\n\n\n\n\n\nClusterTest where we will create our db\n\n\n\n\n\nCreate DB\n\n\n\n\n\nDB and Collection name\n\n\n\n\n\nJust created LibraryManagmentRest DB\n\n\n\n\n\nCreating user to access DB\n\n\n\n\n\nAdd new user to db\n\n\n\n\n\nNetwork access\n\n\n\n\n\nConnect mongoDB to app: string connection\n\n\n\n\n\nConnect to Clustertest: connect your application\n\n\n\n\n\nConnect to Clustertest: string connection\n\n\n\n\n3.3 application.properties\nTo connect a Spring Boot application to MongoDB, you can use the spring.data.mongodb.uri property in the application.properties file to specify the connection string.\nThe connection string typically consists of the username, password, host, port, and database name.\nspring.data.mongodb.uri=mongodb+srv://cifo:1234@clustertest.0h8fd.mongodb.net/LibraryManagementRest\nspring.data.mongodb.database=LibraryManagementRest\n\n\nYou can also use a connection string with additional options like SSL, authentication mechanisms, and connection pooling. By placing the connection string in the application.properties file, you can easily configure the connection and change it without modifying the source code.\nThe Spring Boot MongoDB starter will automatically use the connection string to create a MongoDB client and configure the data source.\n\n\n3.4 @Document\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Document(collection = \"bookImage\")\npublic class BookImage {\n\n    @Id\n    private String id;\n    private String name;\n    private Binary image;\n}\n\n\n3.5 @RestController\n@RestController\n@RequestMapping(\"api/image\")\npublic class BookImageRestController {\n\n    @Autowired\n    BookImageRepository bookImageRepository;\n\n    @PostMapping(\"upload\")\n    public BookImage saveBookImage( @RequestParam String name, @RequestParam MultipartFile file) throws IOException {\n        BookImage bookImage  = new BookImage();\n        //bookImage.setId(Utils.createUUID());\n        bookImage.setName(name);\n        bookImage.setImage( new Binary(file.getBytes() ));\n\n        bookImageRepository.save(bookImage);\n\n        return bookImage;\n\n    }\n\n    @GetMapping(\"/getData\")\n    public String getDataBookImage(@RequestParam  String id){\n\n        Optional&lt;BookImage&gt; bookImage = bookImageRepository.findById(id);\n        Encoder encoder = Base64.getEncoder();\n\n        return encoder.encodeToString( bookImage.get().getImage().getData() );\n\n    }\n\n    @GetMapping(\"/getImage\")\n    public ResponseEntity&lt;byte[]&gt; getBookImage(@RequestParam String id){\n\n        Optional&lt;BookImage&gt; bookImage = bookImageRepository.findById(id);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.IMAGE_JPEG);\n\n        return new ResponseEntity&lt;&gt;( bookImage.get().getImage().getData(), headers, HttpStatus.OK );\n\n    }\n}\n\n\n3.6 @Repository\n@Repository\npublic interface BookImageRepository extends MongoRepository&lt;BookImage, String&gt; {}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-6: Rest & MongoDB"
    ]
  },
  {
    "objectID": "springboot/sblab0-6.html#api-rest-postman",
    "href": "springboot/sblab0-6.html#api-rest-postman",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "4 API Rest: postman",
    "text": "4 API Rest: postman\n\n4.1 upload\n\nOpen Postman and create a new request.\nSet the HTTP method to \"POST\" and set the request URL to \"http://localhost:8090/api/image/upload\".\nClick on the “Body” tab and select the “form-data” radio button. Set the request body to the following key-value:\n\n\n\n\nkey-value to send an Image\n\n\nand the name of the image:\n\n\n\nImage name as a query param\n\n\n\nThis will create a new bookImage document, so click on the “Send” button to send the request.\nIf the request is successful, you should receive a response with a status code of 201 Created and the bookImage document in the response body.\n\n\n\n\nRequest Post create bookImage\n\n\n\n\n\nMongoDB collection document created\n\n\n\n\n4.2 getImage\n\nOpen Postman and create a new request.\nSet the HTTP method to \"GET\" and set the request URL to \"http://localhost:8090/api/image/getImage\".\nClick on the “Params” tab and select the “key-value” data: id: 64367eb2a302f620eea0f1f7\nThe response from the server:\n\n\n\n\nRequest Get read bookImage\n\n\n\n\n4.3 upload one-to-many Book-BookImage\n\n\n\nSpring Boot using two very diferent data-soruces\n\n\nWe are going to update upload method: both classes, Book and BookImage will share ids in a one-to-many relationship.\n\nBook will be stored at local H2 SQL DB.\nBookImage will be stores at MongoDB Cloud noSQL DB.\n\nThe below code is designed to:\n\nretrieve a book by its ID from a book repository.\nIt then checks if the book exists and sets the book ID for a book image.\nIf the book exists, it saves the book image to the book image repository and adds the book image ID to the book’s list of image IDs,\nand then saves the updated book.\n\n\n\n\n\n\n\nupload image updated\n\n\n\nmethod Create CRUD API Rest public BookImage saveBookImage() on @RestController public class BookImageRestController{}:\nupload updated\n\n\n  // Finds a book in the book repository by its ID, if present.\n  Optional&lt;Book&gt; book = bookRepository.findById(bookId);\n  // Checks if the book exists and sets the book ID for the book image.\n  if (book.isPresent()) bookImage.setBookId(book.get().getBookId());\n  // If the book doesn't exist, return null.\n  else return null;\n  // Saves the book image to the book image repository.\n  BookImage bookImageSaved = bookImageRepository.save(bookImage);\n  // Adds the book image ID to the book's list of image IDs and saves the updated book.\n  Book bookUpdated = book.get().addBookImageId(bookImageSaved.getId());\n  bookRepository.save(bookUpdated);\n\nOpen Postman and create a new request.\nSet the HTTP method to \"POST\" and set the request URL to \"http://localhost:8090/api/image/upload\".\nClick on the “Body” tab and select the “form-data” radio button. Set the request body to the following key-value for both, name and bookId:\n\n\n\n\nupload image with bookId @RequestParam\n\n\n\n\n\ngetAll bookImages and find out the previous bookId with the bookImageId related",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-6: Rest & MongoDB"
    ]
  },
  {
    "objectID": "springboot/sblab0-6.html#versions",
    "href": "springboot/sblab0-6.html#versions",
    "title": "Lab#SB00-6: Rest & MongoDB",
    "section": "5 Versions",
    "text": "5 Versions\nendpoint example: http://localhost:8090/api/image/upload\n\n\n\nCode Version\nCommit\nFolder-Tree\nScreeshoots\n\n\n\n\nLibrary Management Rest MongoDB 0.0\nadd MongoDB to project: application.properties, @Document, @Repository, POM  BookImageRestController: upload, getImage, getDataImage\nFolder-tree bookImage\n-\n\n\nLibrary Management Rest MongoDB 0.1\nall CRUD operations with bookImage document\n-\n-\n\n\nLibrary Management Rest MongoDB 0.2\nadd ImageBook Id to books List book entity  and bookId to imageBook document\n-\n1 - 2\n\n\nLibrary Management Rest MongoDB 0.3\nadd data encryptation\n-\n-\n\n\n\n\n5.1 Postman apis\n\n\n\nDomain\nLink\nObjects\n\n\n\n\nbooks\npostman link\nbook\n\n\nborrow\npostman link\nborrow\n\n\nuser\npostman link\nuser\n\n\nbookImage\npostman link\nbookImage",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-6: Rest & MongoDB"
    ]
  },
  {
    "objectID": "springboot/sblab0-7.html",
    "href": "springboot/sblab0-7.html",
    "title": "Lab#SB00-7: Styling",
    "section": "",
    "text": "📘 Spring Boot Lab#SB00-7: API Rest and NoSQL-MongoDB: refactor",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-7: Styling"
    ]
  },
  {
    "objectID": "springboot/sblab0-7.html#overview",
    "href": "springboot/sblab0-7.html#overview",
    "title": "Lab#SB00-7: Styling",
    "section": "1 Overview",
    "text": "1 Overview\n\n1.1 Clean and Improve Code for Book Image REST Controller in Spring Boot\nHere are some suggestions for cleaning up and improving the code:\n\nUse descriptive and meaningful variable names:\n\nChange bookImageRepository to repository or imageRepo.\nChange bookImage to image.\nChange optionalBookImage to optionalImage.\n\nUse constructor injection instead of field injection for better testability and maintainability.\n\nRemove the @Autowired annotation and add a constructor that takes BookImageRepository as a parameter.\nInitialize the bookImageRepository field with the constructor parameter.\n\nUse try-with-resources for handling resources that need to be closed, such as the MultipartFile.\nExtract common code into private methods to reduce duplication.\nAdd validation to ensure that required parameters are not null or empty.\nUse Java 8 Optional methods instead of calling .get() and checking for null.\nAdd error handling and return appropriate error responses.\nUse HTTP verbs consistently and according to their intended purpose.\nUse ResponseEntity&lt;T&gt; to return responses with the appropriate HTTP status codes and headers.\n\nHere’s an updated version of the code:\n@RestController\n@RequestMapping(\"api/image\")\npublic class BookImageRestController {\n\n    private final BookImageRepository imageRepo;\n\n    public BookImageRestController(BookImageRepository imageRepo) {\n        this.imageRepo = imageRepo;\n    }\n\n    @PostMapping(\"upload\")\n    public ResponseEntity&lt;BookImage&gt; saveBookImage(@RequestParam String name, @RequestParam MultipartFile file) throws IOException {\n        if (name == null || name.trim().isEmpty() || file == null) {\n            return ResponseEntity.badRequest().build();\n        }\n        try (InputStream inputStream = file.getInputStream()) {\n            BookImage image = new BookImage();\n            image.setName(name);\n            image.setImage(new Binary(inputStream.readAllBytes()));\n            BookImage savedImage = imageRepo.save(image);\n            return ResponseEntity.ok(savedImage);\n        }\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;byte[]&gt; getBookImage(@PathVariable String id) {\n        Optional&lt;BookImage&gt; optionalImage = imageRepo.findById(id);\n        if (optionalImage.isPresent()) {\n            BookImage image = optionalImage.get();\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(MediaType.IMAGE_JPEG);\n            return ResponseEntity.ok().headers(headers).body(image.getImage().getData());\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity&lt;BookImage&gt; updateBookImage(@PathVariable String id, @RequestParam String name, @RequestParam MultipartFile file) throws IOException {\n        if (name == null || name.trim().isEmpty() || file == null) {\n            return ResponseEntity.badRequest().build();\n        }\n        Optional&lt;BookImage&gt; optionalImage = imageRepo.findById(id);\n        if (optionalImage.isPresent()) {\n            try (InputStream inputStream = file.getInputStream()) {\n                BookImage image = optionalImage.get();\n                image.setName(name);\n                image.setImage(new Binary(inputStream.readAllBytes()));\n                BookImage updatedImage = imageRepo.save(image);\n                return ResponseEntity.ok(updatedImage);\n            }\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; deleteBookImage(@PathVariable String id) {\n        Optional&lt;BookImage&gt; optionalImage = imageRepo.findById(id);\n        if (optionalImage.isPresent()) {\n            imageRepo.delete(optionalImage.get());\n            return ResponseEntity.ok().build();\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n}",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB00-7: Styling"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-projects.html",
    "href": "ifcd0210/ifcd0210backlog-projects.html",
    "title": "IFCD0210 Projects Backlog",
    "section": "",
    "text": "Backlog course",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Projects Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-projects.html#projects",
    "href": "ifcd0210/ifcd0210backlog-projects.html#projects",
    "title": "IFCD0210 Projects Backlog",
    "section": "Projects",
    "text": "Projects\nWork-in-progress\n\nBacklog Projects\n\n\n\n\n\n\n\n\n\n\n#Project\nAuthor\nSite\nMF01\nMF02\nMF03\n\n\n\n\n#1\nMarc\nCIFO - Web Applications, DevOps Training Projects\n++\n-\n-\n\n\n#2\nRafa\nApp with web tecnologies\n++\n-\n-\n\n\n#3\nLis\nWikilis\n++\n-\n-\n\n\n#4\nCruz\nBlog Fabrizio, Welcome ComboBackend\n++\n-\n-\n\n\n#5\nAitor\nAitor wiki\n-\n-\n-\n\n\n#6\nVictor\nmywebsite\n++\n-\n-\n\n\n#7\nAlbertus\nCurso Cifo DAW\n++\n-\n-\n\n\n#8\nRuben\nmiweb\n++\n-\n-\n\n\n#9\nAlbert\nWiki\n++\n-\n-\n\n\n#10\nCarla\nLabs Carla - Carla Velasco Portfoli\n++\n-\n-\n\n\n#11\nPomodoro\nDavid Pomodoro, el hacher\n++\n-\n-\n\n\n#12\nDavid\nDocumentacion\n++\n-\n-\n\n\n#13\nAlex\nAlex quarto project\n-\n-\n-\n\n\n#14\nSergi\naznale_docs\n-\n-\n-\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n- delivery pending\n+ delivery done\n++ delivery pass\n-- need to re-delivery",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Projects Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html",
    "href": "ifcd0210/ifcd0210backlog-product.html",
    "title": "IFCD0210 Product Backlog",
    "section": "",
    "text": "Backlog course",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#december-2022",
    "href": "ifcd0210/ifcd0210backlog-product.html#december-2022",
    "title": "IFCD0210 Product Backlog",
    "section": "December 2022",
    "text": "December 2022\n\nBacklog course December 2022 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#1\n1\n12/12/2022\n- Introduction to course IFCD0210 - Setting of all tools we are going to need\n-\n\n\n\n2\n13/12/2022\n- Quarto create and Publish in GitHub - Create VM and IDEs - Accounts - MOOC\n-\n\n\n\n3\n14/12/2022\n- Linux VM VirtualBox over Windows - What is a Dependency Management, Maven\n-\n\n\n\n4\n15/12/2022\n- Quarto create and Publish in GitHub with adavnced tools\n-\n\n\n\n5\n16/12/2022\n- Create Java Maven Project: JUnit - What is Java SE, EE and Spring MVC, Boot - Create classes\n-\n\n\n#2\n6\n19/12/2022\nCreate Java Maven Project: Git - Why scope is so important in Java\n-\n\n\n\n7\n20/12/2022\n- Introduction to MVC Pattern\n-\n\n\n\n8\n21/12/2022\n- Create Java Maven Project: Classes - Tag & Little-Cube are our dear friends\n-\n\n\n\n9\n22/12/2022\n- Introduction to React JS Framework\n-",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#january-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#january-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "January 2023",
    "text": "January 2023\n\nBacklog course January 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#3\n10\n09/01\n- Different approaches to complex problems are crucial to solve it- How to manage large volumes: quarto- How to stay in class: ask, interrupt, explain new ideas, detect mistakes, connect\nBash, PipesLearn\n\n\n\n11\n10/01\n- How to create a Maven Java Project with TDD in Mind - What could go wrong when create a Maven Project\nTDD, JUnit Maven JavaLab#SE01-1\n\n\n\n12\n11/01\n- What is Model in Java - Why model is so important - All begins in Model - How to create a model (1) Class Candidates (2) Validated Class (3) Relationships\nJava Classes and ObjectsPattern UML\n\n\n\n13\n12/01\n- Coupling and DD defines from first line even to Deploy - Plan a Project: sprint 0 and SCRUM - Even name a variable is important\nCouplingLab#SE02-4\n\n\n\n14\n13/01\n- Time Management - Object Creation: new and @Test - Nested objects in Java are not easy - Tags & Little-cube are our friends\nLab#SE02-1Time ManagemntMaven Project to GitHub: git init\n\n\n#4\n15\n16/01\n+ Object Creation: nested Objects in Java + Movie-Reviews-Review-Critic+ @Test and debug - Java Principles ++ Within which scope (1) creation object: new, (2) operations and methods and (3) sending-parameters by callings there must be?\nLab#SE02-1Markdown in IntellJIdea Mermaid & Mermaid Principles / Objects and classMovieManager Code\n\n\n\n16\n17/01\n+ MovieManager static or non-static - How to send data within Java + Movie-Reviews-Review-Critic + Java Principles  - Project structure: .gitignore, readme.md, uml.md ++ Decision making at Model: (1) Composition? (2) Inherence? (3) Use? (4) Is Class? sure? (5) static/non-static? (6) Domains? (7) Coupling? (8) Interface/Abstract (9) Multiplicity (10) Packages ++ How to write a comment: What? For what? How?\nLab#SE02-2.gitignore / .gitignore not workingObjects and class / staticMovieManager Code\n\n\n\n17\n18/01\n+ Relationships and Multiplicity: onetoone, onetomany, manytomany - Model First: customer/product - Project structure: .gitignore, readme.md, uml.md  ++ Why Multiplicity? (1) People at same page (2) Identify killing problems: pavoland (3) avoid future problems and correct them before code (4) Huge improvement on understanding THE problem (5) documentation\nMultiplicityMermaid Class Diagram UML Customer/Product example Get your team on the same page\n\n\n\n18\n19/01\n+ 1:n / onetomany / @OneToMany + Example (1) oneToMany: Director/Movie + Project structure: .gitignore, readme.md, uml.md ++ Intro Albertus’ Dilemma\nJava Persistence MovieManager Code Domain Driven Design — method and process agnostic\n\n\n\n19\n20/01\n+ How to approach a complex software architecture (software lifecycle meta-domains): (1) project (2) domains-DDD (3) UML (4) coding  + Decision-making & Albertus’ Dilemma+ SCRUM Projects: (1) Management (2) Meetings Rules (3) Mistakes (4) Roles (5) Iterations + spaceX: all requirements are dumb\nSoftware lifecycle SCRUM All requirements are dumb SpaceX’s first Starship SN5 150m hop test\n\n\n#5\n20\n23/01\n+ Top/Down or Down/Top project approach and build-up + Project/Domain-DDD/UML/microProgramming + MovieManager Domains & Packages, connecting classes: general plan (1/3) - Test interactivity\nPackages Movie Manager (with errors: very unusual and not clean) Top-down and bottom-up design\n\n\n\n21\n24/01\n+ MovieManager Domains & Packages, connecting classes: static/non-static and reusable method/class (2/3) + Hashmap + Try and Catch + Test interactivity\nMovie Manager HashMap w3school Lab#SE02-5 Test Input Console Lab#SE02-4 Try and Catch\n\n\n\n22\n25/01\n++ How to code: (1) User-story (2) New Feature (How it fits with existing UML) (3) pseudo-code (4) code acutal typing + MovieManager Domains & Packages, connecting classes (3/3): (1) HashMap movies and CRUD operations, (2) createAndAddMovieToStore, (3) HashMap testMovies  (4) testCreateAndAddMovieToStoreInputConsole\nMovie Manager Simulate Input by console\n\n\n\n23\n26/01\n+ MovieManager, Test and CRUD (1/2) (1) HashMap Movies CRUD (2) implement test by a simulated console: createMovie and deleteMovie tests (3) document test with html (4) manager CRUD implement + Inherence / Interface / Abstract Class - git\nMovie Manager Simulate input (1/2) Class Test Create Movie Movie Manager Simulate input (2/2) Class Test Delete Movie\n\n\n\n24\n27/01\n+ MovieManager, CRUD & update (2/2) + SCRUM + Vocabulary (writting) + Book: SRE\nMovie Manager Update CRUD Class MovieManager Update Movie SRE \n\n\n#6\n25\n30/01\n+ Intro to CSS, OJS, Engines and tools + Example (3) manyToMany: memberLibrary/Book, Customer/Product, Director/Movie\nmanytomany CSS and Engines Resources\n\n\n\n26\n31/01\n+ Library Model Basic/Large + Reuse Movie/Review as a Template  + Start with LibraryProject: lombok (create 100 users/books), use-case, refactor, maven, dependencies, DDD, UML and core classes, borrow core-operation, managers, test, mockup, git, common lenguage \nLab#SE00-3 Basic Lab#SE00-3 Large  LibraryProject \n\n\n\n27\n01/02\n+ LibraryProject: (1) define priorities: tasks and kanban (2) code Faker create Users  (3) code test Borrow a book from console  (4) UUID method \nLab#SE03-1 UML  Lab#SE03-2 Sprint Zero    LibraryProject \n\n\n\n28\n02/02\n+ MVC: Api Rest + Quarto: using API Rest with D3.js + git\nQuarto API REST D3.js  Observable JavaScript\n\n\n\n29\n03/02\n+ SCRUM: delete (step 2 spaceX) + Vocabulary + Four-Hats: Project/DDD/UML/code+ Cifo Java AppWeb Service Infrastructure: servers, services, network, URL\nCifo JAVA AppWeb Infrastructure Prioritize When You Wear Multiple Hats",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#february-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#february-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "February 2023",
    "text": "February 2023\n\nBacklog course February 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#7\n30\n06/02\n-\n-\n\n\n\n31\n07/02\n-\n-\n\n\n\n32\n08/02\n+ LibraryProject: (1) create GitHub Projects and Kanban (2) create tasks Sprint 1  (3) discuss about how to make user/book/borrow interface management  (4) discuss Borrow object test\nLibraryProject\n\n\n\n33\n09/02\n+ Library Model Basic/Large + Example (3) manyToMany: memberLibrary/Book, Customer/Product, Director/Movie + LibraryProject - Inherence / Interface / Abstract Class  ++ Optional\nLab#SE00-4  Inherence Lab#SE00-3 Basic Lab#SE00-3 Large  LibraryProject Optional \n\n\n\n34\n10/02\n+ LibraryProject: sprint 1 - Spring Boot Intro - Spring Rest and Web - Thymeleaf  ++ Albertu’s Dilemma  + Inherence / Interface / Abstract Class\nLibraryProject Generic Types  Interface  Interface w3 schools\n\n\n#8\n35\n13/02\n+ Sprint2: pick up tasks from Product Backlog + LibraryProject: (1) testBorrowUI  (2) bookManager  (3) returns  (4) storage  + Spring Boot:  (1) Intro & project structure/folder tree (2) Spring Rest and Web (3) Thymeleaf  (4) Resources: books and webs \nLibraryProject  MyFirstSpring  Spring Boot: create a Maven Project  \n\n\n\n36\n14/02\n+ LibraryProject: (1) borrowManager: list and get statusBorrow  (2) returnBook: pseudo-code ++ use-story &gt; use-case &gt; functional-diagram &gt; pseudo-code &gt; code\nLibraryProject Approach 1  LibraryProject Approach 1 with several methods \n\n\n\n37\n15/02\n+ LibraryProject: (1) returnBook: code branch-pattern (to-do) (2) returnBook: codee branch-moreHashmaps (to-do) (3) returnBook: code branch-bidirectional (to-do) (3) returnBook: code branch-handlerOptions ++ Make a brief study of the main efficient/relevant (three or four?) solutions and approaches to our problem in order to understand it, find out the optimus solution, solve it and eventually code it.  ++ Create one branch for attempt/aproach (to-do)\nLibraryProject branch-handlerOptions pseudo  LibraryProject branch-handlerOptions finished  \n\n\n\n38\n16/02\n- LibraryProject: (1) Inherence Person,Publication  (2) createBorrows (fake)  (3) pickBorrowByUser (basic-polish bookReturn)  (4) findBorrowsByUser  (5) switch (book, user, borrow) \nLibraryProject branch-handlerOptions fakeBorrows  Java 8  2, 3, 4, 5\n\n\n\n39\n17/02\n- LibraryProject:  (1) core-functional return-book use-case - SCRUM:  (1) Albertus’ Dilemma: burnout flag  (2) Why execution is so difficult? (3) Writting  (4) SpaceX: step 2 and further  (5) Motivation or Purpose \nDiscussion: use case return a book  Burn out and Relaxation Execution: The Discipline of Getting Things Done Motivation? vs. Less Wrong  dukkha\n\n\n#9\n40\n20/01\n+ LibraryProject: (0) plan Sprint  (1) brief-study returnBook  (2) branch returnBook  (3) Inherence Person  + Git:  (1) Remote/Local (just one user) (2) Basic Operations: push, pull, commit, add, clone  (3) watchdog: writting commits, location, document, time\nLibraryProject  Learn Git  \n\n\n\n41\n21/01\n+ LibraryProject: (1) Inherence: Member and/or LibraryMember  (2) Is Author a Member?  (3) Member is Abstract/Interface/Regular class?  (4) How will we call Managers?  - Quarto \ncore-General UML Proposal  \n\n\n\n42\n22/02\n+ Spring Boot:  (1) Book @Controller  (2) Book @Service  (3) Book CRUD  (4) HTML Thymeleaf  (5) H2 DataBase Local Source and Application.properties - Git \nLab#SB02-Library5 Code  Lab#SB02-Library5 Docs  Create H2 DB Spring Boot  Create Spring Boot \n\n\n\n43\n23/02\n- LibraryProject:  (1) finish core use-cases  (2) finish main UML ++ LibraryManagement:  (1) What is Spring Boot?  (2) How does it works?  (3) What are the main elements of Spring Boot?  (4) What is Thymeleaf?  (5) What are server-renders and template engines?  ++ Deliveries MF01 \nThymeleaf  H2 DB  Spring Boot Reference Documentation Spring init  Building an App with Spring Boot  Create Spring Boot  Create Spring Boot H2 DB and TH Lab#SB00-1  \n\n\n\n44\n24/02\n- Deliveries MF01 - Quarto  - Spring Boot:  (1) Summary week  - SCRUM:  (1) Motivation/Purpose 2  (2) Burn Out multitasking, several hats  (3) spaceX beyond Scrum\n-\n\n\n#10\n45\n27/02\n+ LibraryManagement:  (0) Mock-up  (1) Tree-Folder: packages   (2) Book: @Entity, @Repository, @Controller, @Service  (3) Thymelaf  + Spring Boot: request-response Cycle\nSpring Boot H2DB TH Spring Boot: cycle  Lab#SB00-1  Auto-reload compiler:  \n\n\n\n46\n28/02\n+ View-Controller  (1) Controller  (2) View  (3) Example\nController - View  Auto-reload compiler  Tutorial: Using Thymeleaf\n\n\n\n47\n01/03\n+ View-Controller  (1) @Service and Dependency Injection (2) HashMap fake @Repository (3) request-response scope  (4) redirect:  (5) messages.properties  (6) CRUD operations draft and pseudo-code LibraryProject:  (1) finish core use-cases  (2) finish main UML\ncontrollerView Project  render controllerView  resources messages.properties\n\n\n\n48\n02/03\n+ View-Controller  (1) Mock-up user-librarian HTML  (2) Tree-Folder: packages  (3) User: Java Lombok Class and @UserController  (4) User: fake @Repository (HashMap) and @Service  (5) CRUD Operations User and draft Librarian  - Spring Timeline \nLab#SB00-2  Lab#SB02-Library5 Code  Lab#SB02-Library5 Docs  controllerView\n\n\n\n49\n03/03\n+ Deliveries MF01 + Spring Boot:  (1) Summary week  ++ How to Connect Domains  (1) URL+ paths: localhost: 8080/home  (2) annotations: @Controller, @RequestMapping, @RequestParam  (3) Dependency Injection @Autowired UserService userService  + SCRUM:  (1) Motivation/Purpose 2  (2) Order and How we see the world  (3) spaceX beyond Scrum \ncontrollerView  Neuroscience: You Will Never Lack Motivation Again",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#march-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#march-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "March 2023",
    "text": "March 2023\n\nBacklog course March 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#11\n50\n06/03\n- controllerView:  (1) CRUD: create User  (2) CRUD: delete User  (3) CRUD: Librarian  ++ Renfe use-case RedSys error  ++ Time Mangement is Mind Management\nPJG-1 - PJG-2 - PJG-3 - PJG-4  Screenshoot origin  Renfe error log  Time management  LibraryManagement\n\n\n\n51\n07/03\n+ controllerView:  (1) CRUD: create User\nCRUD: create  userController: create\n\n\n\n52\n08/03\n+ controllerView:  (1) CRUD: update User draft  (2) CRUD: delete User draft\n-\n\n\n\n53\n09/03\n+ controllerView:  (1) CRUD: update User  (2) CRUD: delete User\nCRUD: update  controllerView: update \n\n\n\n54\n10/03\n+ SCRUM:  (1) Motivation/Purpose 2  + How we see the world:  (1) noise (2) how it works (no-negotation)  (3) order  (4) time management + Decision-making:  (1) execution: Albertu’s Dilemma - Vocabulary:  (1) Spring Boot \ncontrollerView: deleteMind Management - Article Mind Mangement - Book  Why the Mental Health of Liberal Girls Sank First and FastestHappy families are all alike; every unhappy family is unhappy in its own way\n\n\n#12\n55\n13/03\n+ LibraryManagement:  (1) refactor variables and packages  (2) Project &gt; Management  (3) userController &gt; Management (4) Library5 &gt; Management\nCRUD: delete  userController: delete  userController: detail & createFakeUsers \n\n\n\n56\n14/03\n+ LibraryManagement:  (1) Borrow Domain: select books  + LibraryProject:  (1) finish core use-cases v.0 (2) finish main UML v.0\nLab#SB00-3 LibraryManagement: integration project  LibraryManagement: select books    RequestMapping\n\n\n\n57\n15/03\n+ LibraryManagement:  (1) Borrow Domain: Borrow class (2) Filter table  (3) session/httpServeletRequest creation + Spring Session + Spring HttpServletRequest \nHttpSession with JDBC  HTTP Session State Caching with Spring Filter table JS Client   LibraryManagement: session\n\n\n\n58\n16/03\n++ LibraryManagement:  (1) Fake login and select option (2) Conditional render (3) Debbuging session  - Git - Spring Boot Rest  - ThymeLeaf:  (1) Fragments  \nLibrayManagement: session and fake login  Handling Form Submission\n\n\n\n59\n17/03\n- SCRUM:  (0) Less Wrong (1) Time management  (2) Getting things done  - The three great untruths 2023:  (1) What doesn’t kill you makes you weaker  (2) Always trust your feelings (motivation?)  (3) Life is a battle between good people and evil people\nHappy SCRUM groups are all alike..  Getting the things done Why the Mental Health of Liberal Girls Sank First and Fastest Frakfurt School  End of history  Ikigai\n\n\n#13\n60\n20/03\n+ Week planning:  (1) goal: practicing decision-making and attention-FUDA (focus, execute now!), rest and feed your soul, open-lops, inertia law  (2) tools: doing, done, taks, energies  (3) ultimate goal: metrics &gt; know speed delivering &gt; get closer to optimus (4) plan week: 15 blocks  + LibraryManagement:  (1) fake Login and logout: refreshing  (2) fakeBorrows & borrowsByUser (pagination) \n FUD & Anxiety    Library Management 0.3\n\n\n\n61\n21/03\n- LibraryManagement:  (1) make user borrow (by Librarian)  (2) return book  + LibraryManagement:  (1) fake Login and logout: functional diagram \n  Library Management 0.4  Library Management 0.5\n\n\n\n62\n22/03\n+ LibraryManagement:  (1) make user borrow (by Librarian)  (2) make borrow (by Librarian at borrow domain)  (3) return book\nLibrary Management 0.6  Library Management 0.7 \n\n\n\n63\n23/03\n+ LibraryManagement  (1) API Rest: introduction (2) API Rest: Postman & Swagger  (3) API Rest @EntityResponse  (4) fragments  ++ LibraryManagement API rest\nPostman Swagger Wikipedia API Rest endpoints Wikipedia API Rest: nasa example Library Management 0.8 : BookRestController \n\n\n\n64\n24/03\n+ SCRUM:  + Getting things done  (1) overload, overthink, overdesire  (2) fail fast, and yes, hunt your ghosts  (3) down your cognitive laod  (4) fuda  (5) is motivation a unicorn ? \nGetting Things done\n\n\n#14\n65\n27/03\n+ API Rest:  (1) CRUD: create, delete, update  (2) Postman  (3) @EntityResponse intro\nLibrary1: API Rest CRUD reference docs Library1: API Rest CRUD RestController java class Library Management Rest 0.1  Lab#SB00-4\n\n\n\n66\n28/02\n+ API Rest  (1) CRUD: update, create Book  (2) CRUD: Borrow  (3) Swagger intro  (4) Mockito & JUnit test for Rest intro \nLibraryManagementRest 0.2  Lab#SB00-4\n\n\n\n67\n29/03\n+ API Rest  (1) @EntityResponse (2) CRUD: update  (3) upate book: generic object, array of fields and stream, filter\nJava SE: Java 8  Lab#SB00-4  Library Management Rest 0.3  Library Management Rest 0.4\n\n\n\n68\n30/03\n+ NoSQL: what is NoSQL and SQL H2 JPA  + MongoDB / dynamoDB\nSpring Boot Data  -  Google sheet Employee template\n\n\n\n69\n31/03\n+ SCRUM Time (mind) management:  (1) execution: getting things done  (2) good & fresh decisions qty  (3) pavolands avoided qty  (4) did u learn something new and really useful?  (5) how does good planification mean?  + Vocabulary \n-",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#april-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#april-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "April 2023",
    "text": "April 2023\n\nBacklog course April 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#15\n70\n03/04\n+ LibraryManagementRest  (1) Install, create and set H2 DB  (2) JPA H2 DB Book and User entities\nLibrary Management Rest H2 0.0  Spring Boot: H2 DB and Thymeleaf  Spring Boot: Rest  Lab#SB00-5\n\n\n\n71\n04/04\n+ LibraryManagementRest  (1) API Rest @ResponseEntity  (2) JPA H2 DB: optional  (3) JPA H2 DB: refactor HashMap to H2 DB: User  (4) JPA H2 DB: refactor HashMap to H2 DB: Book\nLibrary Management Rest H2 0.1  Library Management Rest H2 0.2\n\n\n\n72\n05/04\n+ LibraryManagementRest  (1) JPA H2 DB: populate Borrow table  (2) JPA H2 DB: create Borrow with foreign Ids (keys)  (3) JPA H2 DB: return Borrow with borrowId\nLibrary Management Rest H2 0.3  Library Management Rest H2 0.4 \n\n\n\n73\n06/04\n+ LibraryManagement  (1) JPA H2 DB: borrowIds in user  (2) JPA H2 DB: @OneToMany intro  (3) JPA H2 DB: @ManyToMany intro \nLibrary Management Rest H2 0.5\n\n\n#16\n74\n11/04\n+ NoSQL: what is NoSQL and SQL H2 JPA  + MongoDB / dynamoDB  + Render 3D: Nerf / TouchDesigner \n#15 68 30/03  employeeCourse   NeRF 3D - Nerf example: water reflections - TouchDesigner Curriculum - Nerf -\n\n\n\n75\n12/04\n+ LibraryManagement  (1) MongoDB: API Rest CRUD  (2) MongoDB: API Rest Image and @RestController\nSpring Boot Data  Accessing Data with MongoDB  Spring Boot Integration with MongoDB Tutorial  Java - Mapping POJOs  MongoDB Atlas  Library7  Lab#SB00-6: Rest & MongoDB  Library Management Rest MongoDB 0.0\n\n\n\n76\n13/04\n+ LibraryManagement  (1) MongoDB: Images CRUD  (2) MongoDB: Images id to List books from book\nLab#SB00-6: Rest & MongoDB  Library Management Rest MongoDB 0.1  Library Management Rest MongoDB 0.2\n\n\n\n77\n14/04\n+ LibraryManagement  (1) MongoDB: encrypted data   (2) Review - Vocabulary  + Sprint Retrospective:  (1) mental fatigue, pavoland, wells?  (2) optimus, joy the victory, what did u learn?  (3) what about decision-making?  + Pràctiques \nSpring Boot API REST & H2-Mongo DataBase: securityDemo2 - securityDemo2 code  bcrypt\n\n\n#17\n78\n17/04\n+ React:  (1) Intro  (2) nodejs and npm  (3) Create React Project npx\nCreate React app  Principles  Code sandbox  nodejs - npm  Lab#RE00-1\n\n\n\n79\n18/04\n+ React:  (1) Components  (2) JSX .jsx\nWhat is component What is JSX  var, let and const  Git Code: hola & hola2\n\n\n\n80\n19/04\n+ React:  (1) css  (2) semantic\nSemantic React  Material React\n\n\n\n81\n20/04\n+ React:  (1) Props and States  (2) React is immutable\nProps and states  What is immutability in React hola3: semantic Cards  semantic installation\n\n\n\n82\n21/04\n+ SCRUM  (1) Week retrospective  + Vocabulary  + Pràctiques \nhola4  Map mdn\n\n\n#18\n83\n24/04\n+ React:  (0) roadmap  (1) props  (2) update/render cycle  (3) userState: intro  (4) project structure: tree-folder \nRoadmap  useState  React project structure  route example\n\n\n\n84\n25/04\n+ React:  (1) route  (2) JS ES6: spread operator  (3) userEffect: intro  (4) update/render cycle: pure component  - &lt;Pràctiques\napp route  spread operator Keep components pure  ex1 - ex2 - ex3 -\n\n\n\n85\n26/04\n+ React:  (1) intro: userReducer / userEffect  (2) JS ES6: destructuring  (3) conditional render\nuseReducer  useEffect  Conditional Render  hola5 - 0.0\n\n\n\n86\n27/04\n+ React:  (1) userReducer  (2) JS ES6: import/export  + Pràctiques: entrevistes\nLab#RE02-1  codesandbox with handlers functions  codesandbox dispatcher onChange, onClick  React reference manual: useReducer\n\n\n\n87\n28/04\n+ SCRUM:  (1) Retrospecive  (2) Lateralization  * Pràctiques  + Vocabulary \n-",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#may-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#may-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "May 2023",
    "text": "May 2023\n\nBacklog course May 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#19\n88\n02/05\n+ useReducer:  (1) hola5.personProfile  ++ Intro to Matter with Things by Iain McGilchrist\nhola5 0.1  Lab#RE02-1\n\n\n\n89\n03/05\n+ useReducer, useRef, useEffect:  (1) hola5.clock  + useContext  + useEffect  + Maps of meaning\nhola5 0.2  Lab#RE02-1 clock  useContext  useEffect  Rules of Hooks  Maps of meaning - Book .pdf\n\n\n\n90\n04/05\n+ useEffect, useRef, useReducer:  (1) hola5.clock\nLab#RE02-1 clock \n\n\n\n91\n05/05\n+ useEffect:  (1) hola5.apiRest  - useReducer, useRef, useEffect, useContext:  (1) to-do   + Debbug React  + SCRUM  (1) attention: the portal to reality (science, reason, imagination, intuition)  (2) well types: pareto,approach mode, time management, forget order, decision making, lost.  (3) Hemispheres modes: apprehend-compprehend   - Vocabulary   + Retrospective\nLab#RE02-1 apiRest  Lab#RE03-1: to-do  How to debbug React  Can the divided brain tell us anything about the ultimate nature of reality?  Brain leraning cycle\n\n\n#20\n92\n08/05\n- useEffect, useRef, useReducer:  (1) hola5.clock  (2) cleanup function  + useContext:  (1) hola5.login  + semantic table hola5.home  ++ books listing new categories\nuseContext  Lab#RE02-1 clock  Lab#RE02-1 login  books listing new categories and books  Semantic React Table\n\n\n\n93\n09/05\n+ useEffect, useRef, useReducer:  (1) hola5.clock  (2) cleanup function  + useRef, useReducer, useContext:  (1) to-do: useCase, use story & mockup  + async  + Pràctiques\nLab#RE03-1  async  todoApp\n\n\n\n94\n10/05\n+ useRef, useReducer, useContext:  (1) to-do: reducer, create new todo  (2) to-do: highCharts and semantic \nLab#RE03-1  HighCharts  todoApp 0.1\n\n\n\n95\n11/05\n+ useRef, useReducer, useContext:  (1) useContext  (2) to-do: reducer, read, delete todo \ntodoApp 0.2\n\n\n\n96\n12/05\n+ useRef, useReducer, useContext:  (1) to-do: reducer, uupdate todo  + SCRUM:  (1) how did you manage attention?  + Retrospective  + Delivereries & Tests\n-\n\n\n#21\n97\n15/05\n+ axios, fetch  (1) api rest mockapi  + useRef, useReducer, useContext:  (1) to-do: context API \nLab#RE03-3  codesandbox api rest todo cards  deployed api rest todo cards  mock api \n\n\n\n98\n16/05\n+ highcharts:  (1) to-do: visualisation data  (2) import data json  (3) function calculate  + styling\nLab#RE03-2  codesanbox highcharts: todo-app-3  styling \n\n\n\n99\n17/05\n+ axios, fetch  (1) to-do: api rest consume data  (2) to-do: async \nLab#RE03-3  codesanbox rest axios/fetch: todo-app-4  async - async docs mozilla  You Might Not Need an Effect \n\n\n\n100\n18/05\n- store  (1) redux/reducer  local storage  + axios, fetch  (1) to-do: api rest consume data  (2) to-do: async  + React paradigm-core:  (1) immutable/mutable  (2) sync/async  (3) scope (API Context/useContext/Providers)  (4) render cycle: trigger/render/paint \nFetching data\n\n\n\n101\n19/05\n+ SCRUM:  (0) How rich (abundance/scarcity) is created?  (1) Why just left mode is wrong?  (2) The map is no the territory: fishing factory  (3) Right mode: living in the ambiguity (4) Taleb/McGilchrist: Simple/Complicated/Complex  (5) What is a problem? Why science is losing prestige?  (6) Mountain Manifesto  + Retrospective\nAl Pacino best speech - Any Given Sunday - 1080p HD  Mountain Manifesto  The world is not a problem - Iain McGilchrist and Dougald Hine\n\n\n#22\n102\n22/05\n+ useContext to-do CRUD api rest  ++ React paradigm: how to manage data  (1) context  (2) redux  (3) local storage  just api rest  ++ Virtual DOM\nLab#RE03-3  virtual DOM    useForm  redux  \n\n\n\n103\n23/05\n+ useContext to-do CRUD api rest:  (1) mono API Rest  (1) domains API Rest\nLab#RE03-3  Lab#RE03-4\n\n\n\n104\n24/05\n+ useContext to-do CRUD api rest:  (1) domains useContext  (2) api rest data acces layer  -  websockets:  (1) general approach & use-story  (2) mock-up \nLab#RE03-4  What is JavaScript Object Literal?  codesanbox websocket context AWS  MindValley Barcelona\n\n\n\n105\n25/05\n- local.storage  - useContext to-do CRUD api rest:  (1) domains useContext  (2) components  + websockets:  (1) general approach & domains (2) mock-up \nLab#RE03-4  Lab#RE04-1  Lab#RE05-1\n\n\n\n106\n26/05\n+ useContext to-do CRUD api rest:  (1) domains useContext  (2) whole app architecture  + SCRUM  (1) Beyond SCRUM  (2) Beyond SCRUM: Netflix  - Retrospective\nLab#RE03-4  Lab#RE05-1   Agile Netflix - Beyond - Netflix agile: 5 lessons - Professional sports team: build to win - No rules rules\n\n\n#23\n107\n29/05\n+ Spring Boot Todo & React Todo Draft  (1) API Rest @RestController  (2) MongoDB  (3) RestJS: Axios & Context Data Acces Layer\nA’s team, Talent Density , Candor, Remove control \n\n\n\n108\n30/05\n+ Spring Boot Todo & React Todo  (1) API Rest @RestController  (2) MongoDB  (3) RestJS: Axios & Context Data Acces Layer\nReactJS  ReactJS to React: 18 is the turning point   Spring Boot and ReactJS: LAB#RE04-2 \n\n\n\n109\n31/05\n+ Spring Boot Todo & React Todo  (1) API Rest @RestController  (2) MongoDB  (3) RestJS: Axios & Context Data Acces Layer  - websockets:  (1) general approach & domains (2) mock-up  \nSpring Boot and ReactJS: LAB#RE04-2  Published docs API Rest  System Design bytebytyego.com\n\n\n\n110\n01/06\n+ Spring Boot Todo & React Todo  (1) API Rest @RestController  (2) MongoDB  (3) RestJS: Axios & Context Data Acces Layer  - websockets:  (1) data access layer & context (2) components \nSpring Boot and ReactJS: LAB#RE04-2  Published docs API Rest\n\n\n\n111\n02/06\n+ Group Project\n-",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#june-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#june-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "June 2023",
    "text": "June 2023\n\nBacklog course June 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#24\n112\n06/06\n+ websockets:  (1) Architecture: ReactJS - AWS (2) lambda & components \nMyChat: Architecture  MyChat: Architecture\n\n\n\n113\n07/06\n+ websockets:  (1) AWS: backend (2) API Gateway \nMyChat: AWS  MyChat: AWS\n\n\n\n114\n08/06\n+ websockets:  (1) ReactJS: data access layer & context (2) components \nMyChat: ReactJS  MyChat: ReactJS  \n\n\n\n115\n09/06\n+ Formació Copmplementària\n-\n\n\n\n116\n12/06\n+ Formació Copmplementària\n-",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210backlog-product.html#july-2023",
    "href": "ifcd0210/ifcd0210backlog-product.html#july-2023",
    "title": "IFCD0210 Product Backlog",
    "section": "July 2023",
    "text": "July 2023\nFinishing Pràctiques",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Product Backlog"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210initemail.html",
    "href": "ifcd0210/ifcd0210initemail.html",
    "title": "IFCD0210 Init Mail",
    "section": "",
    "text": "Initial email",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Init Mail"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210initemail.html#content",
    "href": "ifcd0210/ifcd0210initemail.html#content",
    "title": "IFCD0210 Init Mail",
    "section": "Content",
    "text": "Content\n\nNo és un curs llarg, ni de broma, des del primer dia, a treballar.\nMooc Helsinki Java\n\nhttps://java-programming.mooc.fi/,\nla primera part Java Programming I, és fonamental fer-la aquesta setmana o durant aquestes dos primeres setmanes de curss o màxim, màxim durant les vacances de Nadal.\nja sabeu: algoritmica bàsica i POO\n\nLa nostra web: https://albertprofe.github.io/web/\n\nja la podeu putijejar\nencara no te domini propi: ho tindrà\nfeta amb quarto/markdown/github-pages: https://albertprofe.github.io/web/about/aboutthissite.html (ja ho explicaré a classe)\n\nComptes que necessitareu:\n\nGitHub\nOracle (per descarregar Java)\nMongoDB\nAWS (demana credit card)\n\nIDEs:\n\nVisual Code per ReactJS\nIntellJIdea per Java Spring Boot\nSublime\n\nOS, linux virtual machine? dual? ho parlem però mireu-vos això\n\nhttps://neverinstall.com/ (i feu-vos un compte)\n\nper qui no pugui vindre dilluns vinent, URL del jit si meet:\n\nhttps://meet.jit.si/cifoweb\nhttps://meet.jit.si/cifowebboard",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Init Mail"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210.html",
    "href": "ifcd0210/ifcd0210.html",
    "title": "IFCD0210 Official Docs",
    "section": "",
    "text": "Denominació: Desenvolupament d’aplicacions amb tecnologies web\nCodi: IFCD0210\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 3\nQualificació professional de referència: IFC154_3 - Desenvolupament d’aplicacions amb tecnologies web\n\n\n\n\nIFCD0210 fitxa\n\n\n\nIFCD0210 fitxa-es .pdf\nIFCD0210 fitxa-cat .pdf",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#identificació-del-certificat-de-professionalitat",
    "href": "ifcd0210/ifcd0210.html#identificació-del-certificat-de-professionalitat",
    "title": "IFCD0210 Official Docs",
    "section": "",
    "text": "Denominació: Desenvolupament d’aplicacions amb tecnologies web\nCodi: IFCD0210\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 3\nQualificació professional de referència: IFC154_3 - Desenvolupament d’aplicacions amb tecnologies web\n\n\n\n\nIFCD0210 fitxa\n\n\n\nIFCD0210 fitxa-es .pdf\nIFCD0210 fitxa-cat .pdf",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "href": "ifcd0210/ifcd0210.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "title": "IFCD0210 Official Docs",
    "section": "Relació d’unitats de competència que configuren el certificat de professionalitat",
    "text": "Relació d’unitats de competència que configuren el certificat de professionalitat\n\nUC0491_3: Desenvolupar elements de programari en l’entorn client.\nUC0492_3: Desenvolupar elements de programari en l’entorn servidor.\nUC0493_3: Implementar, verificar i documentar aplicacions web en entorns internet, intranet i extranet.",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Official Docs"
    ]
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#competència-general",
    "href": "ifcd0210/ifcd0210.html#competència-general",
    "title": "IFCD0210 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDesenvolupar documents i components de programari que constitueixin aplicacions informàtiques en entorns distribuïts utilitzant tecnologies web, partint d’un disseny tècnic ja elaborat, i duent a terme la seva verificació, documentació i implantació. IFCD0210 official document",
    "crumbs": [
      "IFCD0210 Docs",
      "IFCD0210 Official Docs"
    ]
  },
  {
    "objectID": "learning/learning-how-tips.html",
    "href": "learning/learning-how-tips.html",
    "title": "Learning: tips",
    "section": "",
    "text": "About learning: learn to learn",
    "crumbs": [
      "Learning",
      "Learning: tips"
    ]
  },
  {
    "objectID": "learning/learning-how-tips.html#four-strategies-to-effective-and-permanent-learning",
    "href": "learning/learning-how-tips.html#four-strategies-to-effective-and-permanent-learning",
    "title": "Learning: tips",
    "section": "1 Four strategies to effective and permanent learning",
    "text": "1 Four strategies to effective and permanent learning\n\n1.1 Not getting notes is bad\n\nTake notes with pen and paper and have effective note-taking skills\n\n\n\n1.2 Put your soul, now\n\nSpeak, debate, create emotions, remember, memorize. Engage the learning, show it is important for you\n\n\n\n1.3 Confusion is good\n\nEmbrace discomfort to make connections: study some topics at once upon a distributed practice (use the time space among stages) with minor changes everytime\n\n\n\n1.4 Teach is best\n\nTeach what you learn to others. Do it, now.",
    "crumbs": [
      "Learning",
      "Learning: tips"
    ]
  },
  {
    "objectID": "learning/learning-how-tips.html#cone-of-learning",
    "href": "learning/learning-how-tips.html#cone-of-learning",
    "title": "Learning: tips",
    "section": "2 Cone of learning",
    "text": "2 Cone of learning\n\n\n\nThe cone of Learning\n\n\n\nHas eLearning Killed the “Learning Cone”?",
    "crumbs": [
      "Learning",
      "Learning: tips"
    ]
  },
  {
    "objectID": "learning/learning-how-tips.html#jim-kwik-learn-anything-faster",
    "href": "learning/learning-how-tips.html#jim-kwik-learn-anything-faster",
    "title": "Learning: tips",
    "section": "3 Jim Kwik: learn anything faster",
    "text": "3 Jim Kwik: learn anything faster\nTo learn anything faster, just remember FAST\n\n3.1 The F in Fast stands for Forget\n\nIf you want to speed up ‘kwik brain,’ you must temporarily forget three things.\nForget what you already know about the subject. A lot of people don’t learn faster because they feel like they already know the information. But your mind is like a parachute—it only works when it’s open.\nForget about anything that’s not urgent and important. You can’t multitask. If your brain is thinking about 4 different things, you’re not fully present and you won’t learn ’kwik’ly.\nForget your limitations. These are beliefs like your memory isn’t good, or you’re a slow reader, or you don’t have the right education to learn. But if you fight for your limitations, you get to keep them. Your memory isn’t fixed, and it is possible to remember hundreds of words and numbers the way I do onstage.\n\n\n\n3.2 The A in FAST stands for Active\n\nIn school, we were taught to learn by consuming information quietly. But you don’t learn by being lectured to. You learn by creating information and being active in the process.\nLearning is NOT a spectator sport.\nHow can you be more active in your learning?\nAsk questions.\nTake notes.\nThe more active you are, the more you will learn.\n\n\n\n3.3 The S in FAST stands for State\n\nYour state is a snapshot of your mood – the mood of your mind and your body. It’s the emotional well-being that you feel in that exact moment.\nInformation combined with emotion becomes a long-term memory.\nMany of us don’t remember what we learned in school because the umbrella emotion for most people in school was boredom.\nYou are the only person in control of your state.\nHow can you improve your state?\nChange your posture or your body or breathing.\nSit or stand the way you would if you were totally energized.\nThink about how you’ll benefit from the information.\nAll learning is state-dependent. Choose states of joy, fascination, and curiosity.\nSell your cleverness for bewilderment – Rumi.\n\n\n\n3.4 The T in FAST stands for Teach\n\nIf you want to cut your learning curve in half, learn with the intention of teaching it to somebody else.\nIf you had to give a presentation on what you’re learning today, you would learn it differently. You would pay closer attention. You would take more detailed notes. You would ask better questions.\nWhen I teach something, I get to learn it twice.\nPeople often say that those who can’t do teach. But I never saw that as a negative. I always thought, wow, if I can’t do something, I can teach it, and then I can do it.",
    "crumbs": [
      "Learning",
      "Learning: tips"
    ]
  },
  {
    "objectID": "learning/learning-how-tips.html#references-learning-how-to-learn",
    "href": "learning/learning-how-tips.html#references-learning-how-to-learn",
    "title": "Learning: tips",
    "section": "4 References: Learning How to Learn",
    "text": "4 References: Learning How to Learn\n\nThis course gives you easy access to the invaluable learning techniques used by experts in art, music, literature, math, science, sports, and many other disciplines.\n\n\nWe’ll learn about how the brain uses two very different learning modes and how it encapsulates chunks information.\n\n\nWe’ll also cover illusions of learning, memory techniques, dealing with procrastination, and best practices shown by research to be most effective in helping you master tough subjects.\n\n\nLearning How to Learn: Powerful mental tools to help you master tough subjects: Learning How to Learn",
    "crumbs": [
      "Learning",
      "Learning: tips"
    ]
  },
  {
    "objectID": "learning/learning-vocab-devops.html",
    "href": "learning/learning-vocab-devops.html",
    "title": "DevOps Vocabulary",
    "section": "",
    "text": "Technical terms and definitions",
    "crumbs": [
      "Vocabulary",
      "DevOps Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-devops.html#vocabulary",
    "href": "learning/learning-vocab-devops.html#vocabulary",
    "title": "DevOps Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nDevOps vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\ncd/ci\nContinuous Deployment/Continuous Integration, automating software delivery\n\n\npipeline\nA series of automated steps for software delivery\n\n\ndocker image\nA lightweight, portable software package that runs in a container\n\n\ndocker container\nAn executable instance of a Docker Image, isolated environment\n\n\nscript/declarative\nScript-based vs. desired state-based configuration management\n\n\nconfiguration file\nA file containing settings and parameters for a system\n\n\njenkins\nAn open-source automation server for software development and testing\n\n\nk8s\nKubernetes, an open-source container orchestration system for managing clusters\n\n\ndeploy\nTo release and make live a software application\n\n\ndevops\nA methodology for development and operations teams to work together, improve collaboration\n\n\nsoftware life cycle\nA series of stages that a software product goes through from its initial conception to retirement. This includes stages such as planning, development, testing, deployment, and maintenance",
    "crumbs": [
      "Vocabulary",
      "DevOps Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-reactjs.html",
    "href": "learning/learning-vocab-reactjs.html",
    "title": "ReactJS Vocabulary",
    "section": "",
    "text": "Technical terms and definitions",
    "crumbs": [
      "Vocabulary",
      "ReactJS Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-reactjs.html#vocabulary",
    "href": "learning/learning-vocab-reactjs.html#vocabulary",
    "title": "ReactJS Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nReact JS vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nComponent-Oriented Programming (COP)\nA paradigm organizing code into reusable and independent components, promoting modularity and maintainability in web development. Enhances code readability and scalability.\n\n\nJSX\nA syntax extension for JavaScript used with React to write UI components. It allows embedding HTML-like code within JavaScript, making UI development more declarative and readable.\n\n\nProps and States\nIn React, props are data passed from parent to child components, while states manage a component’s internal data and trigger UI updates. Fundamental concepts for managing data flow and rendering.\n\n\nHooks\nFunctions in React enabling the use of state and lifecycle features in functional components. Streamlines component logic and enhances code reusability, reducing reliance on class components.\n\n\nSingle Page Application (SPA)\nA web application that dynamically updates content without reloading the entire page. Enhances user experience by providing a smoother and more responsive interface.\n\n\nVirtual DOM\nAn in-memory representation of the actual DOM in React. Improves rendering efficiency by minimizing direct manipulation of the DOM, resulting in faster updates and improved performance.\n\n\nArrow Function\nA concise syntax in JavaScript for writing functions. Especially useful in React for defining inline functions, simplifying code and maintaining the lexical scope of ‘this’.\n\n\nSpread Operator\nAn operator in JavaScript used for expanding elements in arrays or properties in objects. Enhances code conciseness and flexibility, facilitating the manipulation and creation of data structures.\n\n\nDestructuring\nA JavaScript feature allowing the extraction of values from arrays or properties from objects into distinct variables. Promotes cleaner and more readable code when dealing with complex data structures.\n\n\nlodash\nLodash, A modern JavaScript utility library delivering modularity, performance & extras.",
    "crumbs": [
      "Vocabulary",
      "ReactJS Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-how-questions.html",
    "href": "learning/learning-how-questions.html",
    "title": "Useful Questions",
    "section": "",
    "text": "Decison making is far to be a easy task, on the contrary, it is a complex one …",
    "crumbs": [
      "Learning",
      "Useful Questions"
    ]
  },
  {
    "objectID": "learning/learning-how-questions.html#answering-the-useful-right-questions",
    "href": "learning/learning-how-questions.html#answering-the-useful-right-questions",
    "title": "Useful Questions",
    "section": "1 Answering the useful (right?) questions",
    "text": "1 Answering the useful (right?) questions\nQuestions that begin with the words why, who, what, and how are necessary and paramount because they help to clarify information, to seek additional details, and to better understand a situation. Besides, they play a crucial role in facilitating communication and understanding.\nThese words are often used to ask open-ended questions, which are questions that cannot be answered with a simple yes or no. Asking open-ended questions allows for more in-depth conversation and debate and can help to uncover important information or insights.\nFor example,\n\nasking “Why did this happen?” can help to identify the underlying causes of a particular event,\nwhile asking “What are the consequences of this decision?” can help to anticipate and evaluate the potential impacts of a choice.\n\nOverall, asking why, who, what, and how can help to improve communication, to facilitate decision-making, and to deepen understanding.\n\n\n\n\n\n\nflowchart TD\n  A(Why: programming) --&gt; |Very personal question\\n and it must be answered| B{Who: profiles}\n  B--&gt; C(You love it) \n  B--&gt; D(You need it)\n  C--&gt; E(What: sylabus)\n  H[\"Here you need some\\n kind of guidence\"]--&gt; |teacher?senior? \\nif not a 'picar pedra'| E(What: sylabus)\n  D--&gt; E(What: sylabus)\n  E--&gt; |The what is helpless\\n if you don't know the for| F(For What: skills)\n  F--&gt; |The most second most importat step\\n after the why, the how\\n a bad how may destroy your why| G(How: \\nlearning techniques)",
    "crumbs": [
      "Learning",
      "Useful Questions"
    ]
  },
  {
    "objectID": "learning/learning-listing-card-books.html",
    "href": "learning/learning-listing-card-books.html",
    "title": "Books cards",
    "section": "",
    "text": "Reading is essential for those who seek to rise above the ordinary. - Jim Rohn\n\n\nWhy should I read books?\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nAntifragile\n\n\nNassim Nicholas Taleb, 2012, Antifragile: Things That Gain from Disorder (Incerto)\n\n\n\nassay\n\n\n\nThis book explores how systems can benefit from shocks and uncertainty, and provides insights into how we can design more robust systems and institutions.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAtomic Habits\n\n\nJames Clear, 2016, Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones\n\n\n\nself-management\n\n\n\nA supremely practical and useful book. James Clear distills the most fundamental information about habit formation, so you can accomplish more by focusing on less.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAwekenings\n\n\nOliver Sacks, 1973, Awekenings\n\n\n\nneuropsychology\n\n\n\nThe classic account of survivors of the encephalitic lethargica and their return to the world after decades of “sleep.” This book was the inspiration for the 1990 film starring Robert De Niro and Robin Williams.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBlitzscaling\n\n\nBlitzscaling: The Lightning-Fast Path to Building Massively Valuable companies, 2022, Reid Hoffman and Chris Yeh\n\n\n\nstrategy\n\n\n\nThe new book by Reid Hoffman and Chris Yeh, co-authors of the New York Times Bestseller The Alliance\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBrain Energy\n\n\nBrain Energy: A Revolutionary Breakthrough in Understanding Mental Health–and Improving Treatment for Anxiety, Depression, OCD, PTSD, and More, 2023, Christopher M. Palmer\n\n\n\nneuropsychology\n\n\n\nThe book that will forever change the way we understand and treat mental health.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding a Second Brain\n\n\nTiago Forte, 2022, Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential\n\n\n\nself-management\n\n\n\nIntroduces the concept of a ‘second brain’ for organizing and managing information in the digital age, providing strategies and tools to enhance creativity and productivity.\n\n\n\n\n\nTuesday, August 27, 2019\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBurnout\n\n\nHerbert Freudenberger, 1980, Burnout: The High Cost of High Achievement\n\n\n\nself-management\n\n\n\nAn early and influential work on the topic of burnout. Herbert Freudenberger explores the causes and symptoms of burnout and provides practical tips for avoiding and overcoming it.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nC\n\n\nDennis Ritchie, 1978, C: A Programming Language\n\n\n\nprogramming\n\n\n\nA seminal work in the world of computer programming. Dennis Ritchie introduces the C programming language, which has since become a staple of software development and remains widely used to this day.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nChimpanzee Politics\n\n\nFrans de Waal, 1982, Chimpanzee Politics: Power and Sex among Apes\n\n\n\nassay\n\n\n\nAn groundbreaking book on primate behavior and social dynamics. Frans de Waal provides a deep insight into the complex relationships between chimpanzees and how they influence their political power structures.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nClean Code\n\n\nRobert C. Martin, 2008, Clean Code: A Handbook of Agile Software Craftsmanship\n\n\n\nprogramming\n\n\n\nProvides principles and best practices for writing clean, maintainable, and efficient code, helping software developers improve their coding skills and deliver high-quality software.\n\n\n\n\n\nMonday, August 11, 2008\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCollective Illusions\n\n\nTodd Rose, 2022, Collective Illusions: Conformity, Complicity, and the Science of Why We Make Bad Decisions\n\n\n\npsychology\n\n\n\nDrawing on cutting-edge neuroscience and social psychology research, an acclaimed author demonstrates how so much of our thinking is informed by false assumptions—making us dangerously mistrustful as a society and needlessly unhappy as individuals.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nConsciousness Explained\n\n\nDaniel C. Dennett, 1991, Consciousness Explained\n\n\n\nneuroscience\n\n\n\nDaniel Dennett’s brilliant exploration of human consciousness — named one of the ten best books of the year by the New York Times — is a masterpiece beloved by both scientific experts and general readers (New York Times Book Review). \n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nConsilience\n\n\nEdward O. Wilson, 1999, Consilience: The Unity of Knowledge\n\n\n\nassay\n\n\n\nExplores the integration of knowledge from various fields, including science, philosophy, and the humanities, to develop a comprehensive understanding of the world.\n\n\n\n\n\nThursday, April 29, 1999\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nData Science at the Command Line\n\n\nJeroen Janssens, 2014, Data Science at the Command Line: Facing the Future with Time-Tested Tools\n\n\n\ndevops\n\n\n\nAn innovative book that teaches how to perform data science tasks at the command line, streamlining workflows and making them more efficient. Jeroen Janssens provides a comprehensive guide for data scientists who want to work smarter, not harder.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDescartes’ Error\n\n\nAntonio Damasio, 2006, Descartes’ Error: Emotion, Reason, and the Human Brain\n\n\n\nneuroscience\n\n\n\nExplores the relationship between emotions, reason, and decision-making, presenting a new perspective on the crucial role of emotions in human cognition and behavior.\n\n\n\n\n\nSaturday, August 27, 2005\n\n\nAntonio Damasio\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDesign Patterns\n\n\nErich Gamma, Richard Helm, Ralph Johnson, John Vlissides, 1994, Design Patterns: Elements of Reusable Object-Oriented Software\n\n\n\ndesign\n\n\n\nA seminal book in software engineering that has become an essential reference for developers. The authors describe 23 design patterns that provide solutions to recurring problems in software design, making it easier to write maintainable and scalable code.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDesànim de lucre\n\n\nAbel Cutillas, 2022, Desànim de lucre\n\n\n\nassay\n\n\n\nA book about the negative impacts of profit-oriented thinking on society and individuals.\n\n\n\n\n\nTuesday, January 1, 2019\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDevOps with OpenShift\n\n\nStefano Picozzi, Mike Hepburn & Noel O’Connor, 2017, DevOps with OpenShift: Cloud Deployments Made Easy\n\n\n\ndevops\n\n\n\nA comprehensive guide to DevOps with OpenShift, the powerful platform for container-based applications. The authors explain how to implement a continuous delivery pipeline and how to manage containers in a DevOps environment.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDive Into DESIGN PATTERNS\n\n\nAlexander Shvets, 2022, Dive Into DESIGN PATTERNS: An ebook on design patterns and the principles behind them\n\n\n\ndesign\n\n\n\nDesign patterns help you solve commonly-occurring problems in software design. But you can’t just find a pattern and copy it into your program, the way you can with off-the-shelf functions or libraries. A pattern is not a specific piece of code, but a general concept for solving a particular problem. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDomain Driven Design\n\n\nEric Evans, 2003, Domain Driven Design: Tackling Complexity in the Heart of Software\n\n\n\ndesign\n\n\n\nA groundbreaking book on software design that focuses on modeling complex software systems in a way that aligns with business goals. Eric Evans provides a practical and insightful approach to software design that helps teams build systems that are scalable, maintainable, and easily adaptable to changing business needs.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDon’t Believe Everything You Think\n\n\nJoseph Nguyen, 2022, Don’t Believe Everything You Think: Why Your Thinking Is The Beginning & End Of Suffering (Beyond Suffering)\n\n\n\nmindset\n\n\n\nExplores the connection between thoughts, beliefs, and suffering, offering insights and techniques to challenge and transform limiting thoughts for personal growth and well-being.\n\n\n\n\n\nFriday, July 1, 2022\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nElements of Style\n\n\nStrunk and White, 1918, The Elements of Style\n\n\n\ncommunication\n\n\n\nA classic guide to writing clear and concise English. Strunk and White’s ‘Elements of Style’ covers everything from grammar and syntax to style and tone, making it an essential reference for writers and students.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExecution\n\n\nLarry Bossidy, Ram Charan,Charles Burck (with), 2006, Execution: The Discipline of Getting Things Done\n\n\n\nstrategy\n\n\n\n#1 NEW YORK TIMES BESTSELLER - More than two million copies in print! The premier resource for how to deliver results in an uncertain world, whether you’re running an entire company or in your first management job. A must-read for anyone who cares about business.–The New York Times\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n6 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExpert One-on-One J2EE™ Design and Development\n\n\nRod Johnson, 2002, Expert One-on-One J2EE™ Design and Development\n\n\n\njava\n\n\n\nThe results of using J2EE in practice are often disappointing: applications are often slow, unduly complex, and take too long to develop. Rod Johnson believes that the problem lies not in J2EE itself, but in that it is often used badly. Many J2EE publications advocate approaches that, while fine in theory, often fail in reality, or deliver no real business value.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFooled by Randomness\n\n\nNassim Nicholas Taleb, 2001, Fooled by Randomness: The Hidden Role of Chance in Life and in the Markets (Incerto)\n\n\n\nassay\n\n\n\nA fascinating exploration of the role that randomness plays in our lives, from the stock market to our personal relationships.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nNassim Nicholas Taleb\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Things Done\n\n\nDavid Allen, 2015, etting Things Done: The Art of Stress-Free Productivity\n\n\n\nagile\n\n\n\nSince it was first published almost fifteen years ago, David Allen’s Getting Things Done has become one of the most influential business books of its era, and the ultimate book on personal organization. “GTD” is now shorthand for an entire way of approaching professional and personal tasks, and has spawned an entire culture of websites, organizational tools, seminars, and offshoots.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Create a Mind\n\n\nRay Kurzweil, 2013, How to Create a Mind: The Secret of Human Thought Revealed\n\n\n\nneuroscience\n\n\n\nExplores the mysteries of human thought and proposes theories on how to replicate the human mind in artificial intelligence.\n\n\n\n\n\nTuesday, February 26, 2013\n\n\nRay Kurzweil\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Fail at Almost Everything and Still Win Big\n\n\nScott Adams, 2013, How to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life\n\n\n\nstrategy\n\n\n\nShares the author’s experiences and insights on success, failure, and embracing a system-oriented approach to achieve goals and navigate life’s challenges.\n\n\n\n\n\nTuesday, October 22, 2013\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Measure Anything\n\n\nDouglas W. Hubbard, 2010, How to Measure Anything: Finding the Value of Intangibles in Business\n\n\n\nagile\n\n\n\nA groundbreaking book on measurement that challenges traditional approaches to data collection and analysis. Douglas W. Hubbard provides practical techniques for measuring intangible assets, such as customer satisfaction and employee morale, that are critical to business success.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIkigai\n\n\nHéctor García and Francesc Miralles, 2017, Ikigai: The Japanese Secret to a Long and Happy Life\n\n\n\nself-management\n\n\n\nExplores the concept of ikigai, which translates to ‘reason for being’ in Japanese, and offers insights on how to find purpose, joy, and fulfillment in life.\n\n\n\n\n\nTuesday, August 29, 2017\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIncerto\n\n\nNicholas Taleb, 2020, Incerto: Navigating Uncertainty and the Four Traps of Success\n\n\n\nassay\n\n\n\nA comprehensive guide to navigating uncertainty and the traps of success. Incerto, written by renowned author Nicholas Taleb, explores the intricacies of decision-making and how to avoid the traps that often lead to failure.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nKubernetes Native Microservices\n\n\nJohn Clingan and Ken Finnigan, 2021, Kubernetes Native Microservices with Quarkus and MicroProfile\n\n\n\ndevops\n\n\n\nEntire books are available on Quarkus, microservices, MicroProfile, Spring, and Kubernetes. However, they tend to focus only on each specific topic. This book covers how to combine these topics into an effective and integrated development and deployment stack. Kubernetes-native microservices utilize and integrate with Kubernetes features naturally and efficiently. The result is a productive developer experience that is consistent with the expectations of Kubernetes platform administrators.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMan’s Search for Meaning\n\n\nViktor E. Frank, 1947, Man’s Search for Meaning\n\n\n\npsychology\n\n\n\nA prominent Viennese psychiatrist before the war, Viktor Frankl was uniquely able to observe the way that both he and others in Auschwitz coped (or didn’t) with the experience.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMaps of Meaning\n\n\nJordan B. Peterson, 1999, Maps of Meaning: The Architecture of Belief\n\n\n\nneuropsychology\n\n\n\nWhy have people from different cultures and eras formulated myths and stories with similar structures? What does this similarity tell us about the mind, morality, and structure of the world itself? Jordan Peterson offers a provocative new hypothesis that explores the connection between what modern neuropsychology tells us about the brain and what rituals, myths, and religious stories have long narrated. A cutting-edge work that brings together neuropsychology, cognitive science, and Freudian and Jungian approaches to mythology and narrative, Maps of Meaning presents a rich theory that makes the wisdom and meaning of myth accessible to the critical modern mind.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMicroservices Patterns\n\n\nChris Richardson, 2020, Microservices Patterns: With examples in Java\n\n\n\njava\n\n\n\nA comprehensive guide to designing and building microservices. Chris Richardson provides a wealth of practical patterns and best practices for building scalable and resilient microservices, with examples in Java.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMicroservices for Java Developers\n\n\nRafael Benevides, 2019, Microservices for Java Developers: A Hands-On Introduction to Frameworks and Containers - Java Developers\n\n\n\njava\n\n\n\nThe microservice architectural approach reaches into the foundation of your organization, letting you build complex systems to adapt to rapidly changing competitive markets. Now in its second edition, this step-by-step guide introduces concepts like immutable delivery, and gets you started building distributed systems for managing microservices using Linux containers, Kubernetes, and three different Java frameworks: Spring Boot, Dropwizard, and WildFly Swarm (WildFly Swarm was renamed Thorntail in 2018).\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMind Management Not Time Management\n\n\nDavid Kadavy, 2020, Mind Management Not Time Management: A Guide to Improving Your Productivity and Happiness\n\n\n\nagile\n\n\n\nA practical guide to improving your productivity and happiness. Mind Management Not Time Management teaches you how to manage your thoughts and emotions, so you can achieve your goals and live a more fulfilling life.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n4 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMindset\n\n\nCarol Dweck, 2006, Mindset: The New Psychology of Success\n\n\n\nmindset\n\n\n\nA powerful and inspiring book that challenges traditional notions of intelligence and talent. Carol Dweck introduces the concept of a growth mindset and shows how embracing a growth mindset can lead to greater success and fulfillment in life.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMisbehaving\n\n\nMisbehaving: The Making of Behavioral Economics, 2016, Richard H. Thaler\n\n\n\nfinance\n\n\n\nWhen economics meets psychology, the implications for individuals, managers, and policy makers are both profound and entertaining.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nModern Java EE Design Patterns\n\n\nMarkus Eisele, 2016, Modern Java EE Design Patterns: Building Scalable Architecture for Sustainable Enterprise Development\n\n\n\ndesign\n\n\n\nWith the ascent of DevOps, microservices, containers, and cloud-based development platforms, the gap between state-of-the-art solutions and the technology that enterprises typically support has greatly increased. But as Markus Eisele explains in this O’Reilly report, some enterprises are now looking to bridge that gap by building microservice-based architectures on top of Java EE.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMy Life as Quant\n\n\nEmanuel Derman, 2007, My life as a quant \n\n\n\nfinance\n\n\n\nA memoir by Emanuel Derman, providing insights into the world of quantitative finance and the author’s experiences as a physicist-turned-Wall-Street-quant.\n\n\n\n\n\nFriday, November 5, 2004\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nMy Stroke of Insight\n\n\nJill Bolte Taylor, 2009, My Stroke of Insight: A Brain Scientist’s Personal Journey\n\n\n\nneuroscience\n\n\n\nTransformative…[Taylor’s] experience…will shatter [your] own perception of the world.\n\n\n\n\n\nTuesday, January 1, 2019\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNo Rules Rules\n\n\n Reed Hastings, Erin Meyer, 2020, No Rules Rules\n\n\n\nstudy-case\n\n\n\nHard work is irrelevant. Be radically honest. And never, ever try to please your boss. Nominated as a 2020 Financial Times Business Book of the Year and a New York Times Bestseller.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNoise\n\n\nNoise: A Flaw in Human Judgment, Daniel Kahneman, Olivier Sibony, Cass R. Sunstein\n\n\n\nneuropsychology\n\n\n\nWhen economics meets psychology, the implications for individuals, managers, and policy makers are both profound and entertaining.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nPlaying to win\n\n\nRoger Martin, 2014, Playing to Win - How to make strategy work\n\n\n\nstrategy\n\n\n\nThe Playing to Win Strategy Toolkit is based on a proven framework used by leading companies around the world. These tools guide you through the process with step-by-step advice to help ensure you achieve a successful outcome.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarkus Cookbook\n\n\nAlex Soto Bueno, Jason Porter, February 9, 2021, Quarkus Cookbook: Developing Cloud-Native Applications with Java\n\n\n\njava\n\n\n\nOptimized for Kubernetes, Quarkus is designed to help you create Java applications that are cloud-first, container-native, and serverless capable. With this cookbook, authors Alex Soto Bueno and Jason Porter from Red Hat provide detailed solutions for installing, interacting with, and using Quarkus in the development and production of microservices\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nQuarkus for Spring Developers\n\n\nEric Deandrea, August 31, 2021, Quarkus for Spring Developers\n\n\n\njava\n\n\n\nAn essential guide for Spring developers who want to embrace cloud-native development with Java. Eric Deandrea provides a clear and practical approach to building cloud-native applications with Quarkus, a modern, fast, and efficient Java framework.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nRange\n\n\nRange: Why Generalists Triumph in a Specialized World, 2023, David Epstein\n\n\n\nassay\n\n\n\nThis book explores how Generalists often find their path late, and they juggle many interests rather than focusing on one. They’re also more creative, more agile, and able to make connections their more specialized peers can’t see.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nScrum\n\n\nJ.J. shuterland, 2014, Scrum: The Art of Doing Twice the Work in Half the Time\n\n\n\nagile\n\n\n\nFull of engaging stories and real-world examples. The project management method known as Scrum may be the most widely deployed productivity tool among high-tech companies. On a mission to put this tool into the hands of the broader business world for the first time, Jeff Sutherland succeeds brilliantly\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nServant Leader\n\n\nServant Leadership: A Journey Into the Nature of Legitimate Power and Greatness, 1977, Robert K. Greenleaf\n\n\n\nagile\n\n\n\nRobert K. Greenleaf was the creator of the modern trend to empower employees; he also coined the term servant-leadership.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSite Reliability Engineering\n\n\nBetsy Beyer, Chris Jones, Jennifer Petoff and Niall Richard Murphy, 2016, How Google runs production systems\n\n\n\ndevops\n\n\n\nMembers of the SRE team explain how their engagement with the entire software lifecycle has enabled Google to build, deploy, monitor, and maintain some of the largest software systems in the world.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n3 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSkin in the Game\n\n\nNassim Nicholas Taleb, 2018, Skin in the Game: Hidden Asymmetries in Daily Life (Incerto)\n\n\n\nassay\n\n\n\nA thought-provoking examination of the importance of ‘skin in the game’ in various aspects of life, from politics to economics to personal relationships.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nStolen Focus\n\n\nWhy You Can’t Pay Attention–and How to Think Deeply Again\n\n\n\nmindset\n\n\n\nOur ability to pay attention is collapsing. From the author of Chasing the Scream and Lost Connections comes a groundbreaking examination of why this is happening—and how to get our attention back.\n\n\n\n\n\nMonday, March 11, 2024\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nStratospheric\n\n\nStratospheric, 2020, From Zero to Production with Spring Boot and AWS: Building Scalable and Resilient Applications\n\n\n\njava\n\n\n\nA comprehensive guide to building and deploying scalable and resilient applications with Spring Boot and AWS. Stratospheric provides step-by-step guidance and best practices for building applications from zero to production, leveraging the power of both technologies.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSwimming with Sharks\n\n\nJoris Luyendijk, 2015, Swimming with Sharks: My Journey into the World of the Bankers\n\n\n\nfinance\n\n\n\nAn insider’s account of the culture and practices within the banking industry, based on interviews with bankers during the global financial crisis.\n\n\n\n\n\nThursday, September 4, 2014\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSystem Design\n\n\nAlex Xu, 2022, System Design: the big archive\n\n\n\ndesign\n\n\n\nSystem Design\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSystem Design Interview\n\n\nAlex Xu, 2022, System Design Interview: An insider’s guide\n\n\n\ndesign\n\n\n\nSystem Design Interview\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Art of Agile Development\n\n\nJames Shore, 2007, The Art of Agile Development: Pragmatic guide to agile software development\n\n\n\nstrategy\n\n\n\nThe Art of Agile Development contains practical guidance for anyone considering or applying agile development for building valuable software. It discusses the various methods of agile development, including Scrum, Extreme Programming (XP), Lean, and Kanban, providing readers with an overview of each and advice on how to choose the method that best fits their needs.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Bed of Procrustes\n\n\nNassim Nicholas Taleb, 2010, The Bed of Procrustes: Philosophical and Practical Aphorisms (Incerto)\n\n\n\nassay\n\n\n\nA collection of witty and thought-provoking aphorisms on topics ranging from uncertainty to philosophy to personal growth.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Black Swan\n\n\nNassim Nicholas Taleb, 2007, The Black Swan: The Impact of the Highly Improbable (Incerto)\n\n\n\nassay\n\n\n\nA groundbreaking investigation into the role of rare and unpredictable events in shaping history, culture, and individual lives.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Buddha and the Badass\n\n\nVishen Lakhiani, 2020, The Buddha and the Badass: The Secret Spiritual Art of Succeeding at Work\n\n\n\nstrategy\n\n\n\nHave You Ever Noticed How Some People Have All the Luck at Work?They generate ideas on the fly. They magnetically attract the right people. Others crave joining their missions, their companies, their teams. They move with fluidity and ease, nailing projects with a smile on their face. Getting the coveted raises and promotions. These superstars are often able to get in the zone, displaying remarkable focus and creativity. They are masters of relationships, forging close ties with their teams and everyone around them. When they do business, it’s about win-win. And one of the most unique qualities they seem to have is remarkable luck. Things just go easy for them. It seems like the Universe bends in their favor.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Changing World Order\n\n\nRay Dalio, 2021, The Changing World Order: Why Nations Succeed and Fail\n\n\n\nfinance\n\n\n\nExplores the rise and fall of empires and civilizations throughout history, providing insights into the factors that contribute to the success and failure of nations.\n\n\n\n\n\nTuesday, October 19, 2021\n\n\nRay Dalio\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Communication Book\n\n\nMikal Nielsen, 2018, The Communication Book: 44 Ideas for Better Conversations Every Day\n\n\n\ncommunication\n\n\n\nThe Communication Book provides 44 communication techniques that can be used in everyday situations to improve communication skills. It covers a wide range of topics such as listening, speaking, and body language, and provides practical advice and exercises to help readers improve their communication skills.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nMikal Nielsen\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Compound Effect\n\n\nDarren Hardy, 2012, The Compound Effect: Jumpstart Your Income, Your Life, Your Success\n\n\n\nfinance\n\n\n\nBased on the principle that decisions shape your destiny, this book reveals how small, consistent actions can lead to significant improvements in your life over time.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Creative Habit\n\n\nTwyla Tharp, 2007, The Creative Habit: Learn It and Use It for Life\n\n\n\nself-management\n\n\n\nProvides insights and strategies to cultivate creativity as a habit, offering guidance for artists, writers, and anyone seeking to unlock their creative potential.\n\n\n\n\n\nTuesday, December 27, 2005\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Intelligence Trap\n\n\nThe Intelligence Trap, 2019, The Intelligence Trap: Why Smart People Make Dumb Decisions\n\n\n\npsychology\n\n\n\nAn exploration of why even the smartest people can make poor decisions. The Intelligence Trap, written by science journalist David Robson, reveals the cognitive biases and traps that can lead us astray, and provides practical strategies for overcoming them.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nDavid Robson\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Joy of Living\n\n\nYongey Mingyur Rinpoche, 2008, The Joy of Living: Unlocking the Secret and Science of Happiness\n\n\n\nmindset\n\n\n\nBlends the ancient wisdom of Tibetan Buddhism with modern scientific insights, offering guidance on finding lasting happiness and peace.\n\n\n\n\n\nTuesday, March 6, 2007\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Linux command line\n\n\nWilliam Shotts, The Linux command line\n\n\n\nprogramming\n\n\n\nDesigned for the new command line user, this 555-page volume covers the same material as LinuxCommand.org but in much greater detail. In addition to the basics of command line use and shell scripting, The Linux Command Line includes chapters on many common programs used on the command line, as well as more advanced topics.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nAuthor Name\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Master and His Emissary\n\n\nIain McGilchrist, 2009, The Master and His Emissary: The Divided Brain and the Making of the Western World\n\n\n\nneuropsychology\n\n\n\nA profound and compelling exploration of the role of the brain in shaping our civilization. Iain McGilchrist argues that the split between the two hemispheres of the brain has led to a host of cultural and philosophical issues, and offers a compelling vision for how we might heal this divide.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Matter With Things\n\n\nIan McGilchrist, 2019, The Matter With Things: Our Brains, Our Delusions, and the Unmaking of the World\n\n\n\nneuropsychology\n\n\n\n\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Molecule of More\n\n\nThe Molecule of More: How a Single Chemical in Your Brain Drives Love, Sex, and Creativity―and Will Determine the Fate of the Human\n\n\n\nneuroscience\n\n\n\nThe answer is found in a single chemical in your brain: dopamine. Dopamine ensured the survival of early man. Thousands of years later, it is the source of our most basic behaviors and cultural ideas―and progress itself. \n\n\n\n\n\nDaniel Z. Lieberman and Michael E. Long\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Psychology of Money\n\n\nMorgan Housel, 2020, The Psychology of Money: Timeless lessons on wealth, greed, and happiness\n\n\n\nfinance\n\n\n\nExplores the psychological factors that influence our relationship with money, offering valuable insights into wealth accumulation, risk management, and financial well-being.\n\n\n\n\n\nTuesday, September 8, 2020\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Relaxation Revolution\n\n\nWilliam Proctor, Herbert Benson, 2010, The Relaxation Revolution: Enhancing Your Personal Health Through the Science and Genetics of Mind Body Healing\n\n\n\nself-management\n\n\n\nA comprehensive guide to reducing stress and improving well-being. The Relaxation Revolution provides practical strategies for relaxation and mindfulness, so you can lead a more balanced and fulfilling life.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Righteous Mind\n\n\nJonathan Haidt, 2013, The Righteous Mind: Why Good People are Divided by Politics and Religion\n\n\n\npsychology\n\n\n\nA groundbreaking exploration of the roots of human morality. The Righteous Mind, written by social psychologist Jonathan Haidt, provides insights into the ways in which moral values and beliefs influence our political and religious views.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Rudest Book Ever\n\n\nShwetabh Gangwar. 2019, The Rudest Book Ever\n\n\n\nstrategy\n\n\n\nChallenges societal norms and offers unconventional advice on topics such as relationships, self-improvement, and personal growth, with a straightforward and direct approach.\n\n\n\n\n\nMonday, February 15, 2021\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Second Brain\n\n\nMichael Gershon, 2020, The Second Brain: A Groundbreaking New Understanding Of Nervous Disorders Of The Stomach And Intestine\n\n\n\nneuroscience\n\n\n\nExplores the complex relationship between the brain and the gut, shedding light on the connection between the nervous system and digestive disorders.\n\n\n\n\n\nSaturday, January 2, 1999\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe Status Game\n\n\nWill Storr, 2021, The Status Game: On Social Position and How We Use It\n\n\n\npsychology\n\n\n\nAn in-depth examination of the role of social status and prestige in our lives. The Status Game provides insights and strategies for navigating the complex world of status and prestige, so you can achieve your goals and live a more fulfilling life.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n2 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe five disfunctions of a team\n\n\nPatrick Lencioni, 2002, The five disfunctions of a team\n\n\n\nstrategy\n\n\n\nIn this leadership fable, Lencioni reveals the five dysfunctions which go to the very heart of why teams even the best ones-often struggle. He outlines a powerful model and actionable steps that can be used to overcome these common hurdles and build a cohesive, effective team.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nPatrick Lencioni\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThe mom test\n\n\nHow to talk to customers & learn if your business is a good idea when everyone is lying to you.\n\n\n\ncommunication\n\n\n\nThe Mom Test is a simple, practical guide to talking to your customers without annoying them.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nRob Fitzpatrick\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nThinking in Java\n\n\n Eckel Bruce, 2006, Scrum: The Art of Doing Twice the Work in Half the Time\n\n\n\njava\n\n\n\nThinking in Java has earned raves from programmers worldwide for its extraordinary clarity, careful organization, and small, direct programming examples. From the fundamentals of Java syntax to its most advanced features, Thinking in Java is designed to teach, one simple step at a time.\n\n\n\n\n\nFriday, January 20, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWrite Tight\n\n\nWilliam Brohaugh, 2007, Write Tight: Say Exactly What You Mean with Precision and Power\n\n\n\ncommunication\n\n\n\nThis book provides writers with the tools and techniques to write clear, concise, and compelling prose.\n\n\n\n\n\nMonday, May 1, 2023\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nYour Next Five Moves\n\n\nPatrick Bet-David, 2020, Your Next Five Moves: Master the Art of Business Strategy\n\n\n\nstrategy\n\n\n\nOffers strategies and insights to develop effective business strategies, make calculated decisions, and achieve long-term success in the competitive world of business.\n\n\n\n\n\nTuesday, September 1, 2020\n\n\nalbertprofe\n\n\n1 min\n\n\nFriday, November 1, 2024\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Books & Articles",
      "Books cards"
    ]
  },
  {
    "objectID": "learning/learning-vocab-general.html",
    "href": "learning/learning-vocab-general.html",
    "title": "General Vocabulary",
    "section": "",
    "text": "Technical terms and definitions",
    "crumbs": [
      "Vocabulary",
      "General Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-general.html#vocabulary",
    "href": "learning/learning-vocab-general.html#vocabulary",
    "title": "General Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nGeneral vocabulary\n\n\n\n\n\n\nTerm\nDescription\n\n\n\n\nDevOps\nDevelopment and Operations - a set of practices that aim to automate and improve the process of software development and IT operations to deliver high-quality software more efficiently.\n\n\nScrum\nA lightweight framework that helps people, teams, and organizations generate value through adaptive solutions for complex problems, as defined in the Scrum Guide.\n\n\nFramework\nA pre-established set of rules, conventions, and practices that provides a structure for developing software applications, simplifying the development process.\n\n\nImmutable Code\nCode that, once created, cannot be changed or modified. In the context of DevOps, it often refers to version control practices to maintain consistency and traceability in code.\n\n\nGitHub\nA web-based platform for version control and collaboration that allows developers to host and review code, manage projects, and build software.\n\n\nServerless\nAn architecture approach where the cloud provider is responsible for infrastructure management, allowing developers to focus on writing code without worrying about servers.\n\n\nContainer\nA lightweight, portable, and self-sufficient unit that can run applications and their dependencies, ensuring consistency across different environments.\n\n\nWebhook\nA mechanism that allows one system to send real-time information to another system when a specific event or trigger occurs, enabling seamless integration between applications.\n\n\nPolling\nA method of repeatedly checking or querying a server or service at regular intervals to retrieve updated information, often used in scenarios where real-time communication is not required.\n\n\nParse\nTo analyze and interpret data or code, often used in the context of programming languages or data formats.\n\n\nThrottle\nTo control or limit the rate at which a system or process operates, often used to prevent excessive use of resources or to manage API requests within certain rate limits.\n\n\nDDD\nDomain-Driven Design - an approach to software development that focuses on understanding and modeling the business domain to create more effective and maintainable software solutions.",
    "crumbs": [
      "Vocabulary",
      "General Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-spring-boot.html",
    "href": "learning/learning-vocab-spring-boot.html",
    "title": "Spring Boot Vocabulary",
    "section": "",
    "text": "Technical terms and definitions",
    "crumbs": [
      "Vocabulary",
      "Spring Boot Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-spring-boot.html#vocabulary",
    "href": "learning/learning-vocab-spring-boot.html#vocabulary",
    "title": "Spring Boot Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nSpring Boot vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nSpring Boot\nAn extension of the Spring framework, simplifying Java-based application development with convention (annotations) over configuration (.xml files). It promotes a rapid development cycle and easy deployment.\n\n\nSpring Boot Starter\nPre-configured templates providing a convenient starting point for developing various types of applications. Simplifies dependencies and configuration, fostering productivity and consistency.\n\n\nSpring Boot Auto-configuration\nAutomatically configures application components based on the dependencies present in the classpath, reducing manual setup and enhancing development efficiency.\n\n\nSpring Boot Actuator\nA set of production-ready features providing insights into the application’s runtime behavior, health, and metrics. Enables monitoring, management, and troubleshooting in a production environment.\n\n\nSpring Boot DevTools\nEnhances developer experience with automatic application restarts, live reloading, and other tools that accelerate the iterative development process. Facilitates a smoother and more efficient development workflow.\n\n\nmodel\nIt represents graphically an abstraction of the same reality or of a service. It solves problems or needs through a set of black boxes (DDD) that depend only on its previous state and its runtime input. Its conception and implementation is translated into the creation of classes and the relationships between them by means of the UML. The UML will be based on previously defined architectures adapted to the needs of the project.",
    "crumbs": [
      "Vocabulary",
      "Spring Boot Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-web.html",
    "href": "learning/learning-vocab-web.html",
    "title": "Web Vocabulary",
    "section": "",
    "text": "Technical terms and definitions",
    "crumbs": [
      "Vocabulary",
      "Web Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-web.html#vocabulary",
    "href": "learning/learning-vocab-web.html#vocabulary",
    "title": "Web Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nWeb vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nCSS\nCascading Style Sheets, a language used to style HTML and define the visual presentation of web pages. It includes rules for layout, colors, fonts, and responsive design. Enhances the overall user experience.\n\n\nQuarto\nA modern document format combining the simplicity of Markdown with the power of LaTeX. Suitable for creating reports, books, and presentations, providing a versatile and extensible markup language.\n\n\nMarkdown\nA lightweight markup language for creating formatted text using a plain-text syntax. Widely used for documentation, README files, and blogging. Provides a simple and readable way to structure content.\n\n\nHTML\nHyperText Markup Language, the standard markup language for creating web pages and applications. Defines the structure and elements on a web page, facilitating content organization and presentation.\n\n\nSCSS\nSassy CSS, a superset of CSS that adds features like variables, nesting, and mixins. Enhances code maintainability and reusability, providing a more efficient way to style web applications.\n\n\nMultipage\nA term indicating a website with multiple interconnected HTML pages. Common in traditional web development, where each page serves a distinct purpose or content section.\n\n\nRefresh and History\nIn web browsers, the refresh function reloads the current page, while the history maintains a record of visited pages. Important for navigation and maintaining a consistent user experience.\n\n\nResponsive\nA design approach ensuring a web application adapts and provides an optimal user experience across various devices and screen sizes. Utilizes flexible layouts and media queries to achieve adaptability.",
    "crumbs": [
      "Vocabulary",
      "Web Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-data-base.html",
    "href": "learning/learning-vocab-data-base.html",
    "title": "DataBase Vocabulary",
    "section": "",
    "text": "Technical terms and definitions",
    "crumbs": [
      "Vocabulary",
      "DataBase Vocabulary"
    ]
  },
  {
    "objectID": "learning/learning-vocab-data-base.html#vocabulary",
    "href": "learning/learning-vocab-data-base.html#vocabulary",
    "title": "DataBase Vocabulary",
    "section": "1 Vocabulary",
    "text": "1 Vocabulary\n\nDataBase vocabulary\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nSQL\nStructured Query Language used for managing and manipulating relational databases. It provides a standardized way to interact with databases, defining, querying, and modifying data.\n\n\nMySQL\nAn open-source relational database management system, widely used for its performance, reliability, and ease of use. Supports SQL queries, transactions, and ACID properties for data integrity.\n\n\nNoSQL\nA category of databases that do not use traditional SQL and are designed for flexible and scalable data storage, supporting various data models like document, key-value, or graph.\n\n\nOne-to-One (O2O)\nA relationship between two tables where each record in the first table is linked to a single record in the second, and vice versa.\n\n\nOne-to-Many (O2M)\nA relationship between two tables where each record in the first table can be linked to multiple records in the second, but each record in the second table is linked to only one record in the first.\n\n\nMany-to-Many (M2M)\nA relationship between two tables where each record in one table can be associated with multiple records in another, and vice versa, creating a many-to-many mapping.\n\n\nACID\nAn acronym for Atomicity, Consistency, Isolation, and Durability, defining properties ensuring the reliability of database transactions, maintaining data integrity even in the event of failures.\n\n\nCloud Database\nA database hosted and managed in a cloud computing environment, providing scalability, flexibility, and accessibility. Commonly utilized for efficient data storage and retrieval in distributed systems.\n\n\nVolume\nThe amount of data in a database, measured in terms of the quantity of records and the overall storage space required. Managing data volume is crucial for optimizing database performance.\n\n\nQuery\nA request for information from a database using SQL or other query languages. Queries retrieve, filter, and manipulate data to meet specific requirements, facilitating data analysis and reporting.",
    "crumbs": [
      "Vocabulary",
      "DataBase Vocabulary"
    ]
  },
  {
    "objectID": "ifct034po/ifct034po.html",
    "href": "ifct034po/ifct034po.html",
    "title": "IFCT034PO Docs",
    "section": "",
    "text": "Nom del Curs: Desenvolupament d’aplicacions amb JAVA\nHores: 120 h\nFamília professional: Informàtica i Comunicacions\nÀrea Professional: Sistemes i Telemàtica\nEspecialitat: IFCT034PO\nNivell: 3",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Docs"
    ]
  },
  {
    "objectID": "ifct034po/ifct034po.html#identificació-del-certificat-de-professionalitat",
    "href": "ifct034po/ifct034po.html#identificació-del-certificat-de-professionalitat",
    "title": "IFCT034PO Docs",
    "section": "",
    "text": "Nom del Curs: Desenvolupament d’aplicacions amb JAVA\nHores: 120 h\nFamília professional: Informàtica i Comunicacions\nÀrea Professional: Sistemes i Telemàtica\nEspecialitat: IFCT034PO\nNivell: 3",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Docs"
    ]
  },
  {
    "objectID": "ifct034po/ifct034po.html#presentació",
    "href": "ifct034po/ifct034po.html#presentació",
    "title": "IFCT034PO Docs",
    "section": "Presentació",
    "text": "Presentació\n\nPresentation IFCT03PO October 2023\nFitxa del curs\nFormulari alta alumne",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Docs"
    ]
  },
  {
    "objectID": "ifct034po/ifct034po.html#continguts",
    "href": "ifct034po/ifct034po.html#continguts",
    "title": "IFCT034PO Docs",
    "section": "Continguts",
    "text": "Continguts\n\nMòdul 1: Sintaxi bàsica del llenguatge Java\n\nProgramació Orientada a Objectes\nApp Web amb Java\nJava Struts avançat\nSpring MVC\nHibernate\n\n\n\nObjectius\n\nDissenyar i implementar arquitectures JAVA.\n\n\n\nEntorn professional i ocupacions\nEl programador s’encarrega de crear, escriure, verificar i mantenir programari informàtic. També resol errors, elabora la documentació tècnica i els manuals, i ajuda als usuaris.\nEl professional desenvolupa la seva activitat per compte propi, en empreses de serveis, altres empreses o entitats de qualsevol mida a l’àrea de desenvolupament.\nOcupacions: Programadors informàtics, dissenyadors de pàgines web, analistes i dissenyadors de software i multimèdia no classificats i analistes-programadors web i multimèdia Tecnologies: Java, bases de dades, SQL, proves unitàries i desplegament d’aplicacions",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Docs"
    ]
  },
  {
    "objectID": "ifct034po/ifct034po.html#calendar-2023-java-ifct034po",
    "href": "ifct034po/ifct034po.html#calendar-2023-java-ifct034po",
    "title": "IFCT034PO Docs",
    "section": "Calendar 2023 Java IFCT034PO",
    "text": "Calendar 2023 Java IFCT034PO\n\n\n\nCalendar IFCT034PO",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Docs"
    ]
  },
  {
    "objectID": "ifct034po/ifct034pobacklog-product.html",
    "href": "ifct034po/ifct034pobacklog-product.html",
    "title": "IFCT034PO Product Backlog",
    "section": "",
    "text": "Backlog course",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Product Backlog"
    ]
  },
  {
    "objectID": "ifct034po/ifct034pobacklog-product.html#october-2023",
    "href": "ifct034po/ifct034pobacklog-product.html#october-2023",
    "title": "IFCT034PO Product Backlog",
    "section": "October 2023",
    "text": "October 2023\n\nBacklog course October 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#1\n1\n03/10/2023\n- Introduction to course IFCT034PO - Setting of all tools we are going to need  - What is a programmer in 2023  - Spring Boot basica architecture\n- What is a programmer and skills  - Spring Boot Basics  - Create Spring Boot Project  - IFCT034PO\n\n\n\n2\n04/10/2023\n- What is a Dependency Management, Maven - Create VM and IDEs - Accounts - MOOC  - Course tools: Git, gitHub, IntelijIdea/VCode, nextCloud, Telegram group, Linux Ubuntu/Mint, quarto MD, AWS or cloudfare, Jitsi  - First Sandbox Spring Boot  - Spring Boot key-words\n- Create Spring Boot Project  - Maven\n\n\n\n3\n05/10/2023\n- Maven: dependency management  - Second Sandbox Spring Boot  - Spring Boot key-words  - Lifecycle: from Plan to Deploy  - Sandbox: code sanbox  - Document: Notion, obsidian and quarto\n- Maven Central Repository  - Document by quarto  - Document by notion  - Docuemnt by obsidian  - Code Sandbox\n\n\n\n4\n06/10/2023\n- Quarto create and Publish in GitHub with adavnced tools  - Spring Boot Rest  - TMC Beans install linux and VM\n- Spring Boot Sandbox project code  - Linux VMs\n\n\n#2\n5\n09/10/2023\n- Sprint Boot Thymeleaf MVC  - MV: just Model and View  - DDD: Domain-Driven Design - Why DDD is so important\n- Spring Boot Thymeleaf  - DDD and coupling  - anti-domain-driven design  - What is a car  - Spring Boot Request-Response Cycle\n\n\n\n6\n10/10/2023\n- use-story &gt; use-case (DDD) + functional-diagram (UML) &gt; pseudo-code &gt; code  - Sprint Boot Thymeleaf MVC  - Code: controllerView, Thymeleaf tags: th:attribute=“….”\n- View  - Thymeleaf  - Code Github controllerView  - Thymeleaf  - DemoJavaboot\n\n\n\n7\n11/10/2023\n- Sprint Boot Thymeleaf MVC Review  - Tag TH: text, link, each   ++ OOP: Person, attributes, constructor, methods, new object  - Microservices vs. Monolitic  ++ Spring Boot networking APIs: Rest, SOAP (WSDL), WebSocket, Server-side render TH\n- View  - Thymeleaf  - Code Github controllerView  - Java MOOC Object  - Oracle Java Basic 7h\n\n\n#3\n8\n16/10/2023\n- Thymeleaf  - Tags attributes TH: text, link, each  - Spring Boot create fake @Service  - Git and Github  ++ Immutability  ++ Git and Github: VisualCode Git tool  ++ Fake data, JavaFaker at @Service\n- Git  - GitHub  - Example bookService with Java Faker  - Java Faker\n\n\n\n9\n17/10/2023\n- Java SE UML and debugger  - Git and Github: VisualCode Git tool: review  - Annotations review  - Amazon example of domains and use of @Controller and @Service (business login)  - Object creation: create new, instantiate (memory allocation), varialble reference and object, Dependence Injection (constructor)\n- create books on demoJavaBoot  - Connect idea with remote gh  - Git flow  \n\n\n\n10\n18/10/2023\n- Spring Boot Architecture: request-response cycle  - Spring Boot Architecture Consumers:  1. server-side render (Thymeleaf),  2. client-side render (React),  3. API Rest - API Rest Introduction: @RestController  - Postman: install, create account and documentation \n- api rest example: numbeo  - javaFaker books demoJavaBook  - rest books demoJavaBook  - Video first hour class .mkv  - Video first hour class .mp4  - idea Spring Boot  - Video second hour class .mp4  \n\n\n\n11\n19/10/2023\n- OOP: UML football example (has/is/uses)  - Thymeleaf CRUD: create, read, delete  - Fake data, JavaFaker at @Service   - API Rest Spring Boot CRUD: create, read, delete, update\n- Mermaid Diagramming and charting tool  - Mermaid UML example  - football UML class example\n\n\n\n12\n20/10/2023\n- Thymeleaf CRUD: update  - API Rest Spring Boot CRUD: create, read, delete, update  - What/How/Much is an endpoint  - http://localhost:8080/api/v1/book/getAllBooks  - http://localhost:8080/api/v1/books/getBookById/f276ca91-2852-44ef-9653  - Code Java Classes UML: football exampple\n- Generate Random Data using Java Faker  - mermaid UML footaball example  - findBookById demoJavaBoot  - endpoint books  - endpoint basic example  - Video first hour class\n\n\n#4\n13\n23/10/2023\n- API Rest Spring Boot & Postman: introduction  - Spring Boot @RestController: HttpHeaders, ResponseEntity - Setting up GitHub Football Match UML\n- api Rest Spring Boot- Example book RestController  - Basic example documentation by postman  - repo UML java SE football - Sandbox api rest mock api io  - video first hour class  - video second hour class\n\n\n\n14\n24/10/2023\n- API Rest Spring Boot & Postman: create, read, delete  - Spring Boot @RestController: HttpHeaders, ResponseEntity - Pull Request GitHub Football Match UML\n- ResponseEntity  - HttpHeaders  - repo UML java SE football - Fork a repo  - Git fork vs. clone / fork or clone  video first hour class\n\n\n\n15\n25/10/2023\n- API Rest Spring Boot & Postman: create  - Spring Boot Thymeleaf Log: Activity domain  - Spring Boot @RestController: HttpHeaders, ResponseEntity managing response - Agile Project Management monitorBook  - Wiki documentation creation\n- monitorBook wiki  - Idea debugger  - video first hour class  - video second hour class\n\n\n\n16\n26/10/2023\n- API Rest Spring Boot & Postman: create  - Spring Boot Thymeleaf Log: Activity domain  - Spring Boot @RestController: HttpHeaders, ResponseEntity managing response  - CLI git - gh\n- momtorBook v1.0 code  - monitorBook v1.0 wiki  - CLI git gh - video first hour class\n\n\n\n17\n27/10/2023\n- API Rest Spring Boot & Postman: read - API Rest Spring Boot & Postman: update  - Spring Boot Data: H2 & Postgres: intro  - Spring Boot: @Repository\n- Annotations  - Dependence Injection  - Servlets  - monitorBook v1.1 code\n\n\n#5\n18\n30/10/2023\n- API Rest Spring Boot & Postman: create/delete/update  - API Rest Spring Boot & Postman: CRUD  - Spring Boot Data: H2 JAVA Test DB install & creation  - Spring Boot: @Repository   ++ Git: review pull/fetch  ++ Dependence Injection Spring Pattern\n- Annotations / DI  - Common application properties Spring 1.4 / Current 3.2  - monitorBook v1.2 domain Utilities\n\n\n\n19\n31/10/2023\n- API Rest Spring Boot & Postman: create/delete/update  - API Rest Spring Boot & Postman: CRUD  - Spring Boot Data: H2 JAVA Test DB, application.properties and JPA\n- Exception Handling in Spring MVC  - Spring MVC Exception Handling  - Exceptions - monitorBook v1.31 delete & update \n\n\n\n20\n02/11/2023\n- Spring Boot Data: H2 JAVA Test DB  - Java H2 and MongoDB, bookImage and API Rest  - Model: book, borrows, user\n- libraryManagementRest  - libraryManagementRest H2   - monitorBook v2.0 code\n\n\n\n21\n03/11/2023\n- Spring Boot Data: H2 JAVA Test DB\n- videos class  - roadmap Java 2023  - monitorBook v2.11 code",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Product Backlog"
    ]
  },
  {
    "objectID": "ifct034po/ifct034pobacklog-product.html#november-2023",
    "href": "ifct034po/ifct034pobacklog-product.html#november-2023",
    "title": "IFCT034PO Product Backlog",
    "section": "November 2023",
    "text": "November 2023\n\nBacklog course November 2023 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#6\n22\n06/11/2023\n- monitorBook: JPA @OneToMany, @ManyToOne  - Model: Author, Book, Comment, User, Person  - API Rest: Book-Author\nUML author-book-comment  - @ManyToMany oracle  - Query Methods JPA  - JPA Data  - @OneToMany example author-book  - monitorBook 3.0 code -temptative-\n\n\n\n23\n07/11/2023\n- monitorBook: JPA @OneToMany, @ManyToOne  - Model: Author, Book, Comment, User, Person  - API Rest: Book-Author-Comment\n@oneToMany author-book H2  - Library2: API Rest Author Book @OneToMany CRUD with Swagger  - emotional change: SCRUM  - plan & des &gt; dev & test &gt; prod & devops  - monitorBook 3.1 code -temptative-\n\n\n\n24\n08/11/2023\n- monitorBook: JPA Ihnerence strategies  - Model: Author, Book, Comment, User, Person  - API Rest: Book-Author-User-Person  - linux: clone MV  - How to learn: picnic - understanding - consolidate  Mindset - Macro - Micro  Weekly menu no repetitive\n- monitorBook 3.2 author-book onetomany -unable to find AUTHOR-   - weekly videos\n\n\n\n25\n09/11/2023\n- FCOO03 (1/2)\n- INSERCIÓ LABORAL - SENSIBILITZACIÓ AMBIENTAL  - IGUALTAT DE GENERE  - monitorBook 3.3 authorService, assign author on BookRestController \n\n\n\n26\n10/11/2023\n- FCOO03 (2/2)\n- monitorBook 3.4 book-comment, commetService & Repository, assign comments on BookRestController",
    "crumbs": [
      "IFCT034PO Docs",
      "IFCT034PO Product Backlog"
    ]
  },
  {
    "objectID": "markup/resources.html",
    "href": "markup/resources.html",
    "title": "MarkUp Languages Resources",
    "section": "",
    "text": "MarkUp Resources",
    "crumbs": [
      "MarkUp Languages readings",
      "MarkUp Languages Resources"
    ]
  },
  {
    "objectID": "markup/resources.html#quarto",
    "href": "markup/resources.html#quarto",
    "title": "MarkUp Languages Resources",
    "section": "1.1 Quarto",
    "text": "1.1 Quarto\n\n1.1.1 Quarto general\n\nQuarto vs R\nBig Book of R\nQuarto Gallery\nA Quarto tip of the day\n6 Productivity Hacks for Quarto\n\n\n\n1.1.2 Quarto extensions and features\n\nQuarto extensions and features\n\n\n\n\n\n\nLink\nDescription\n\n\n\n\nShinylive Quarto extension\nThis extension lets you embed Shinylive applications in a Quarto document. These are Shiny for Python applications which run completely in the browser, using Pyodide (Python compiled to WebAssembly).\n\n\nFont Awesome\nIncluding Font Awesome icons in Quarto documents is now easy peasy lemon squeezy  with the Font Awesome extension. Just surround the Font Awesome icon name in {{&lt; and &gt;}}.\n\n\nFont Awesome Search\nThe easiest way to get icons on your website is with a Kit. It’s your very own custom version of Font Awesome, all bundled up with only the icons, tools, and settings you need.\n\n\nGithub Actions for Quarto\nThis repository stores Github Actions useful for building and publishing Quarto documents.\n\n\nHTML blocks and embed iframe\nWant to embed an iframe on a webpage or a slide deck? Plop the sharing code in a raw html block!\n\n\nListing contents\nListings enable you to automatically generate the contents of a page (or region of a page) from a list of Quarto documents or other custom data.\n\n\nLightbox\nAn extension that uses the GLightbox javascript library to add lightbox styling and behavior to images in your HTML documents.\n\n\n\n\n\n1.1.3 Quarto formatting\n\nQuarto Glob Syntax\nQuarto Dates and Date Formatting\n\n\n\n1.1.4 Cheat-sheet\nQuarto cheat sheet",
    "crumbs": [
      "MarkUp Languages readings",
      "MarkUp Languages Resources"
    ]
  },
  {
    "objectID": "markup/resources.html#css",
    "href": "markup/resources.html#css",
    "title": "MarkUp Languages Resources",
    "section": "1.2 CSS",
    "text": "1.2 CSS\nWhatever you do on CSS, you have to understand the roots and focus on the basic knowledge: CSS Deep\n\nSemantic UI\nMaterial UI\nW3 schools CSS\nTailwind CSS",
    "crumbs": [
      "MarkUp Languages readings",
      "MarkUp Languages Resources"
    ]
  },
  {
    "objectID": "markup/resources.html#engines-and-visualizing",
    "href": "markup/resources.html#engines-and-visualizing",
    "title": "MarkUp Languages Resources",
    "section": "1.3 Engines and visualizing",
    "text": "1.3 Engines and visualizing\n\nHighcharts\nD3.JS GALLERY\nThymeleaf\nObservable",
    "crumbs": [
      "MarkUp Languages readings",
      "MarkUp Languages Resources"
    ]
  },
  {
    "objectID": "markup/mulab1.html",
    "href": "markup/mulab1.html",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "",
    "text": "Create and publish a website on GitHub pages (Git on cloud and deploy pipeline) with Visual (IDE) Code and Quarto (publishing system/engine)\n\n\n\n\n\n\n Before\n\n\nStudents will need to have a basic understanding of web development, including HTML, CSS, and JavaScript. \n\n\n  Goal\n\n\nIn this project, students will be required to create a web application using basically Markdown, flavour Quarto, and when it is necessary HTML, JS and CSS. Additionally, they will need to use GitHub and Visual Code** to manage their project’s code and collaborate with their peers. \n\n\n  Tasks\n\n\nThe tasks involved in this project include: \n\n\nIn the first part of the project, students will create a basic web page using markdown and publish it on Github repository using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\n\n\nIn the second part of the project, students will learn how to publish their website on gh-pages, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n\n\nYou should check your website on user/github.io/repo.\n\n\n\n  Optional\n\n\nAs an optional study, students may also want to learn about using callouts in their markdown documentation. The following links provide useful information on the topic: \n\n\nmarkdown-callouts\n\n\nCallout Blocks Quarto\n\n\nGetting Started with RDMD\n\n\nDivs and spans\n\n\ncodepen.io HTML+CSS\n\n\nHow TO - Tabs W3.CSS HTML+CSS+JS\n\n\n\nUsing callouts, links, tabs and CSS can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.   To take their project to the next level, students may also choose to connect to an API (Application Programming Interface) to retrieve data and render charts using JavaScript. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n\n\nQuarto data sources\n\n\n  After\n\n\nThe Quarto website project is a great opportunity for students to develop their skills in web development, markdown, and version control using GitHub and Visual Code. \n\n\n\n\n\n\n\n\n\nStep-by-step guide to create and publish a Quarto website\n\n\n\nInstall some software and Sign in:\n\nInstall Visual Code\n\nInstall GitHub Extension and Source Control if they don’t come with new installation\nInstall Quarto Extension in Visual Code\n\nSign in GitHub from Visual Code (wizard)\nInstall Quarto in your OS (download from Quarto site - Get started)\n\nCreate Quarto Project\nGitHub tasks:\n\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n$git config --global user.name \"Mona Lisa\"\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.paasword \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\nActivate gh-pages service\n\nquarto render and quarto publish gh-pages / quarto publish on Visual Code’s terminal\n\nPublish Quarto Project\nImprove your Quarto Project\n\nGo to published web:user/github.io/repo\n\n\n\n\nStep-by-step Quarto Creation project (install Quarto) in Visual Code (and Quarto Extension) and publishing to gh-pages (log in to GitHub, Sync tool)\nLog in to GitHub and Quarto Creation: Sync GUI\n\n\n\n\n\n\n\n\n\nBasic Quarto Project\n\n\n\n\n\n\n\n\nfig 1\n\n\n\n\n\n\n\n\n\n\n\nInitialize Repository and Publish\n\n\n\n\n\n\n\n\nfig 2\n\n\n\n\n\n\n\n\n\n\n\nYou may use another Extensions\n\n\n\n\n\n\n\n\nfig 3\n\n\n\n\n\n\n\n\n\n\n\nlet s do a commit but .. first\n\n\n\n\n\n\n\n\nfig 4\n\n\n\n\n\n\n\n\n\n\n\nwe need to publish branch\n\n\n\n\n\n\n\n\nfig 5\n\n\n\n\n\n\n\n\n\n\n\nPermission 1/2\n\n\n\n\n\n\n\n\nfig 6\n\n\n\n\n\n\n\n\n\n\n\nPermission 2/2\n\n\n\n\n\n\n\n\nfig 7\n\n\n\n\n\n\n\n\n\n\n\npublish in public repository: name\n\n\n\n\n\n\n\n\nfig 8\n\n\n\n\n\n\n\n\n\n\n\nrepository name: wiki is better! :-)\n\n\n\n\n\n\n\n\nfig 9\n\n\n\n\n\n\n\n\n\n\n\nrepository name: publishing\n\n\n\n\n\n\n\n\nfig 10\n\n\n\n\n\n\n\n\n\n\n\nthis tree folder is publised\n\n\n\n\n\n\n\n\nfig 11\n\n\n\n\n\n\n\n\n\n\n\ntree folder in github\n\n\n\n\n\n\n\n\nfig 12\n\n\n\n\n\n\n\n\n\n\n\ngh-pages activation\n\n\n\n\n\n\n\n\nfig 13\n\n\n\n\n\n\n\n\n\n\n\nat first gh-pages branck doesn’t exist: don’t worry, quarto will create later\n\n\n\n\n\n\n\n\nfig 14\n\n\n\n\n\n\n\n\n\n\n\nmaster is our branch: root\n\n\n\n\n\n\n\n\nfig 15\n\n\n\n\n\n\n\n\n\n\n\nthere is just one brach: master (brach gh-pages NOT YET)\n\n\n\n\n\n\n\n\nfig 16\n\n\n\n\n\n\n\n\n\n\n\nrender\n\n\n\n\n\n\n\n\nfig 17\n\n\n\n\n\n\n\n\n\n\n\nquarto publish\n\n\n\n\n\n\n\n\nfig 18\n\n\n\n\n\n\n\n\n\n\n\nyes\n\n\n\n\n\n\n\n\nfig 19\n\n\n\n\n\n\n\n\n\n\n\nnow: brach created\n\n\n\n\n\n\n\n\nfig 20\n\n\n\n\n\n\n\n\n\n\n\nand … gh pages now has got the gh-pages branch selected\n\n\n\n\n\n\n\n\nfig 21\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: commit\n\n\n\n\n\n\n\n\nfig 22\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: deploy\n\n\n\n\n\n\n\n\nfig 23\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: actions\n\n\n\n\n\n\n\n\nfig 24\n\n\n\n\n\n\n\n\n\n\n\nweb deployed: live\n\n\n\n\n\n\n\n\nfig 25\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 1/4\n\n\n\n\n\n\n\n\nfig 26\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 2/4\n\n\n\n\n\n\n\n\nfig 27\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 3/4\n\n\n\n\n\n\n\n\nfig 28\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 4/4\n\n\n\n\n\n\n\n\nfig 29",
    "crumbs": [
      "MarkUp Languages Laboratories",
      "Lab#MD01-1: Create and publish by Quarto"
    ]
  },
  {
    "objectID": "markup/mulab1.html#overview",
    "href": "markup/mulab1.html#overview",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "",
    "text": "Create and publish a website on GitHub pages (Git on cloud and deploy pipeline) with Visual (IDE) Code and Quarto (publishing system/engine)\n\n\n\n\n\n\n Before\n\n\nStudents will need to have a basic understanding of web development, including HTML, CSS, and JavaScript. \n\n\n  Goal\n\n\nIn this project, students will be required to create a web application using basically Markdown, flavour Quarto, and when it is necessary HTML, JS and CSS. Additionally, they will need to use GitHub and Visual Code** to manage their project’s code and collaborate with their peers. \n\n\n  Tasks\n\n\nThe tasks involved in this project include: \n\n\nIn the first part of the project, students will create a basic web page using markdown and publish it on Github repository using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\n\n\nIn the second part of the project, students will learn how to publish their website on gh-pages, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n\n\nYou should check your website on user/github.io/repo.\n\n\n\n  Optional\n\n\nAs an optional study, students may also want to learn about using callouts in their markdown documentation. The following links provide useful information on the topic: \n\n\nmarkdown-callouts\n\n\nCallout Blocks Quarto\n\n\nGetting Started with RDMD\n\n\nDivs and spans\n\n\ncodepen.io HTML+CSS\n\n\nHow TO - Tabs W3.CSS HTML+CSS+JS\n\n\n\nUsing callouts, links, tabs and CSS can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.   To take their project to the next level, students may also choose to connect to an API (Application Programming Interface) to retrieve data and render charts using JavaScript. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n\n\nQuarto data sources\n\n\n  After\n\n\nThe Quarto website project is a great opportunity for students to develop their skills in web development, markdown, and version control using GitHub and Visual Code. \n\n\n\n\n\n\n\n\n\nStep-by-step guide to create and publish a Quarto website\n\n\n\nInstall some software and Sign in:\n\nInstall Visual Code\n\nInstall GitHub Extension and Source Control if they don’t come with new installation\nInstall Quarto Extension in Visual Code\n\nSign in GitHub from Visual Code (wizard)\nInstall Quarto in your OS (download from Quarto site - Get started)\n\nCreate Quarto Project\nGitHub tasks:\n\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n$git config --global user.name \"Mona Lisa\"\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.paasword \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\nActivate gh-pages service\n\nquarto render and quarto publish gh-pages / quarto publish on Visual Code’s terminal\n\nPublish Quarto Project\nImprove your Quarto Project\n\nGo to published web:user/github.io/repo\n\n\n\n\nStep-by-step Quarto Creation project (install Quarto) in Visual Code (and Quarto Extension) and publishing to gh-pages (log in to GitHub, Sync tool)\nLog in to GitHub and Quarto Creation: Sync GUI\n\n\n\n\n\n\n\n\n\nBasic Quarto Project\n\n\n\n\n\n\n\n\nfig 1\n\n\n\n\n\n\n\n\n\n\n\nInitialize Repository and Publish\n\n\n\n\n\n\n\n\nfig 2\n\n\n\n\n\n\n\n\n\n\n\nYou may use another Extensions\n\n\n\n\n\n\n\n\nfig 3\n\n\n\n\n\n\n\n\n\n\n\nlet s do a commit but .. first\n\n\n\n\n\n\n\n\nfig 4\n\n\n\n\n\n\n\n\n\n\n\nwe need to publish branch\n\n\n\n\n\n\n\n\nfig 5\n\n\n\n\n\n\n\n\n\n\n\nPermission 1/2\n\n\n\n\n\n\n\n\nfig 6\n\n\n\n\n\n\n\n\n\n\n\nPermission 2/2\n\n\n\n\n\n\n\n\nfig 7\n\n\n\n\n\n\n\n\n\n\n\npublish in public repository: name\n\n\n\n\n\n\n\n\nfig 8\n\n\n\n\n\n\n\n\n\n\n\nrepository name: wiki is better! :-)\n\n\n\n\n\n\n\n\nfig 9\n\n\n\n\n\n\n\n\n\n\n\nrepository name: publishing\n\n\n\n\n\n\n\n\nfig 10\n\n\n\n\n\n\n\n\n\n\n\nthis tree folder is publised\n\n\n\n\n\n\n\n\nfig 11\n\n\n\n\n\n\n\n\n\n\n\ntree folder in github\n\n\n\n\n\n\n\n\nfig 12\n\n\n\n\n\n\n\n\n\n\n\ngh-pages activation\n\n\n\n\n\n\n\n\nfig 13\n\n\n\n\n\n\n\n\n\n\n\nat first gh-pages branck doesn’t exist: don’t worry, quarto will create later\n\n\n\n\n\n\n\n\nfig 14\n\n\n\n\n\n\n\n\n\n\n\nmaster is our branch: root\n\n\n\n\n\n\n\n\nfig 15\n\n\n\n\n\n\n\n\n\n\n\nthere is just one brach: master (brach gh-pages NOT YET)\n\n\n\n\n\n\n\n\nfig 16\n\n\n\n\n\n\n\n\n\n\n\nrender\n\n\n\n\n\n\n\n\nfig 17\n\n\n\n\n\n\n\n\n\n\n\nquarto publish\n\n\n\n\n\n\n\n\nfig 18\n\n\n\n\n\n\n\n\n\n\n\nyes\n\n\n\n\n\n\n\n\nfig 19\n\n\n\n\n\n\n\n\n\n\n\nnow: brach created\n\n\n\n\n\n\n\n\nfig 20\n\n\n\n\n\n\n\n\n\n\n\nand … gh pages now has got the gh-pages branch selected\n\n\n\n\n\n\n\n\nfig 21\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: commit\n\n\n\n\n\n\n\n\nfig 22\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: deploy\n\n\n\n\n\n\n\n\nfig 23\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: actions\n\n\n\n\n\n\n\n\nfig 24\n\n\n\n\n\n\n\n\n\n\n\nweb deployed: live\n\n\n\n\n\n\n\n\nfig 25\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 1/4\n\n\n\n\n\n\n\n\nfig 26\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 2/4\n\n\n\n\n\n\n\n\nfig 27\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 3/4\n\n\n\n\n\n\n\n\nfig 28\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 4/4\n\n\n\n\n\n\n\n\nfig 29",
    "crumbs": [
      "MarkUp Languages Laboratories",
      "Lab#MD01-1: Create and publish by Quarto"
    ]
  },
  {
    "objectID": "markup/mulab1.html#step-by-step",
    "href": "markup/mulab1.html#step-by-step",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "",
    "text": "Step-by-step guide to create and publish a Quarto website\n\n\n\nInstall some software and Sign in:\n\nInstall Visual Code\n\nInstall GitHub Extension and Source Control if they don’t come with new installation\nInstall Quarto Extension in Visual Code\n\nSign in GitHub from Visual Code (wizard)\nInstall Quarto in your OS (download from Quarto site - Get started)\n\nCreate Quarto Project\nGitHub tasks:\n\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n$git config --global user.name \"Mona Lisa\"\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.paasword \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\nActivate gh-pages service\n\nquarto render and quarto publish gh-pages / quarto publish on Visual Code’s terminal\n\nPublish Quarto Project\nImprove your Quarto Project\n\nGo to published web:user/github.io/repo",
    "crumbs": [
      "MarkUp Languages Laboratories",
      "Lab#MD01-1: Create and publish by Quarto"
    ]
  },
  {
    "objectID": "markup/mulab1.html#screen-shoots-2022-12-12-installing-quarto-and-cloning-project-from-github.com",
    "href": "markup/mulab1.html#screen-shoots-2022-12-12-installing-quarto-and-cloning-project-from-github.com",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "",
    "text": "Step-by-step Quarto Creation project (install Quarto) in Visual Code (and Quarto Extension) and publishing to gh-pages (log in to GitHub, Sync tool)\nLog in to GitHub and Quarto Creation: Sync GUI",
    "crumbs": [
      "MarkUp Languages Laboratories",
      "Lab#MD01-1: Create and publish by Quarto"
    ]
  },
  {
    "objectID": "markup/mulab1.html#screen-shoots-2022-12-08-pushing-quarto-project-to-github-and-publishing-on-gh-pages",
    "href": "markup/mulab1.html#screen-shoots-2022-12-08-pushing-quarto-project-to-github-and-publishing-on-gh-pages",
    "title": "Lab#MD01-1: Create and publish by Quarto",
    "section": "",
    "text": "Basic Quarto Project\n\n\n\n\n\n\n\n\nfig 1\n\n\n\n\n\n\n\n\n\n\n\nInitialize Repository and Publish\n\n\n\n\n\n\n\n\nfig 2\n\n\n\n\n\n\n\n\n\n\n\nYou may use another Extensions\n\n\n\n\n\n\n\n\nfig 3\n\n\n\n\n\n\n\n\n\n\n\nlet s do a commit but .. first\n\n\n\n\n\n\n\n\nfig 4\n\n\n\n\n\n\n\n\n\n\n\nwe need to publish branch\n\n\n\n\n\n\n\n\nfig 5\n\n\n\n\n\n\n\n\n\n\n\nPermission 1/2\n\n\n\n\n\n\n\n\nfig 6\n\n\n\n\n\n\n\n\n\n\n\nPermission 2/2\n\n\n\n\n\n\n\n\nfig 7\n\n\n\n\n\n\n\n\n\n\n\npublish in public repository: name\n\n\n\n\n\n\n\n\nfig 8\n\n\n\n\n\n\n\n\n\n\n\nrepository name: wiki is better! :-)\n\n\n\n\n\n\n\n\nfig 9\n\n\n\n\n\n\n\n\n\n\n\nrepository name: publishing\n\n\n\n\n\n\n\n\nfig 10\n\n\n\n\n\n\n\n\n\n\n\nthis tree folder is publised\n\n\n\n\n\n\n\n\nfig 11\n\n\n\n\n\n\n\n\n\n\n\ntree folder in github\n\n\n\n\n\n\n\n\nfig 12\n\n\n\n\n\n\n\n\n\n\n\ngh-pages activation\n\n\n\n\n\n\n\n\nfig 13\n\n\n\n\n\n\n\n\n\n\n\nat first gh-pages branck doesn’t exist: don’t worry, quarto will create later\n\n\n\n\n\n\n\n\nfig 14\n\n\n\n\n\n\n\n\n\n\n\nmaster is our branch: root\n\n\n\n\n\n\n\n\nfig 15\n\n\n\n\n\n\n\n\n\n\n\nthere is just one brach: master (brach gh-pages NOT YET)\n\n\n\n\n\n\n\n\nfig 16\n\n\n\n\n\n\n\n\n\n\n\nrender\n\n\n\n\n\n\n\n\nfig 17\n\n\n\n\n\n\n\n\n\n\n\nquarto publish\n\n\n\n\n\n\n\n\nfig 18\n\n\n\n\n\n\n\n\n\n\n\nyes\n\n\n\n\n\n\n\n\nfig 19\n\n\n\n\n\n\n\n\n\n\n\nnow: brach created\n\n\n\n\n\n\n\n\nfig 20\n\n\n\n\n\n\n\n\n\n\n\nand … gh pages now has got the gh-pages branch selected\n\n\n\n\n\n\n\n\nfig 21\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: commit\n\n\n\n\n\n\n\n\nfig 22\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: deploy\n\n\n\n\n\n\n\n\nfig 23\n\n\n\n\n\n\n\n\n\n\n\nwe may check all is right: actions\n\n\n\n\n\n\n\n\nfig 24\n\n\n\n\n\n\n\n\n\n\n\nweb deployed: live\n\n\n\n\n\n\n\n\nfig 25\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 1/4\n\n\n\n\n\n\n\n\nfig 26\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 2/4\n\n\n\n\n\n\n\n\nfig 27\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 3/4\n\n\n\n\n\n\n\n\nfig 28\n\n\n\n\n\n\n\n\n\n\n\nlog publising terminal 4/4\n\n\n\n\n\n\n\n\nfig 29",
    "crumbs": [
      "MarkUp Languages Laboratories",
      "Lab#MD01-1: Create and publish by Quarto"
    ]
  },
  {
    "objectID": "markup/markup-lang-html.html",
    "href": "markup/markup-lang-html.html",
    "title": "HTML Markup",
    "section": "",
    "text": "HTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page’s appearance/presentation (CSS) or functionality/behavior (JavaScript).\n\n\n“Hypertext” refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.\nHTML uses “markup” to annotate text, images, and other content for display in a Web browser. HTML markup includes special “elements” such as\n&lt;head&gt;, &lt;title&gt;, &lt;body&gt;, &lt;header&gt;, &lt;footer&gt;, &lt;article&gt;, &lt;section&gt;, &lt;p&gt;, \n&lt;div&gt;, &lt;span&gt;, &lt;img&gt;, &lt;aside&gt;, &lt;audio&gt;, &lt;canvas&gt;, &lt;datalist&gt;, &lt;details&gt;,\n&lt;embed&gt;, &lt;nav&gt;, &lt;output&gt;, &lt;progress&gt;, &lt;video&gt;, &lt;ul&gt;, &lt;ol&gt;, &lt;li&gt;\nand many others.\nAn HTML element is set off from other text in a document by tags, which consist of the element name surrounded by &lt; and &gt;. The name of an element inside a tag is case insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the &lt;title&gt; tag can be written as &lt;Title&gt;, &lt;TITLE&gt;, or in any other way. However, the convention and recommended practice is to write tags in lowercase.\nReference: HyperText Markup Language",
    "crumbs": [
      "MarkUp Languages",
      "HTML Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-html.html#html-hypertext-markup-language",
    "href": "markup/markup-lang-html.html#html-hypertext-markup-language",
    "title": "HTML Markup",
    "section": "",
    "text": "HTML (HyperText Markup Language) is the most basic building block of the Web. It defines the meaning and structure of web content. Other technologies besides HTML are generally used to describe a web page’s appearance/presentation (CSS) or functionality/behavior (JavaScript).\n\n\n“Hypertext” refers to links that connect web pages to one another, either within a single website or between websites. Links are a fundamental aspect of the Web. By uploading content to the Internet and linking it to pages created by other people, you become an active participant in the World Wide Web.\nHTML uses “markup” to annotate text, images, and other content for display in a Web browser. HTML markup includes special “elements” such as\n&lt;head&gt;, &lt;title&gt;, &lt;body&gt;, &lt;header&gt;, &lt;footer&gt;, &lt;article&gt;, &lt;section&gt;, &lt;p&gt;, \n&lt;div&gt;, &lt;span&gt;, &lt;img&gt;, &lt;aside&gt;, &lt;audio&gt;, &lt;canvas&gt;, &lt;datalist&gt;, &lt;details&gt;,\n&lt;embed&gt;, &lt;nav&gt;, &lt;output&gt;, &lt;progress&gt;, &lt;video&gt;, &lt;ul&gt;, &lt;ol&gt;, &lt;li&gt;\nand many others.\nAn HTML element is set off from other text in a document by tags, which consist of the element name surrounded by &lt; and &gt;. The name of an element inside a tag is case insensitive. That is, it can be written in uppercase, lowercase, or a mixture. For example, the &lt;title&gt; tag can be written as &lt;Title&gt;, &lt;TITLE&gt;, or in any other way. However, the convention and recommended practice is to write tags in lowercase.\nReference: HyperText Markup Language",
    "crumbs": [
      "MarkUp Languages",
      "HTML Markup"
    ]
  },
  {
    "objectID": "markup/markup-lang-html.html#anatomy-of-an-html-document",
    "href": "markup/markup-lang-html.html#anatomy-of-an-html-document",
    "title": "HTML Markup",
    "section": "2 Anatomy of an HTML document",
    "text": "2 Anatomy of an HTML document\nIndividual HTML elements aren’t very useful on their own. Next, let’s examine how individual elements combine to form an entire HTML page:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en-US\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;My test page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;This is my page&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\nAnatomy of an HTML document",
    "crumbs": [
      "MarkUp Languages",
      "HTML Markup"
    ]
  },
  {
    "objectID": "markup/markup-quarto-publish.html",
    "href": "markup/markup-quarto-publish.html",
    "title": "Quarto Markdown: publishing",
    "section": "",
    "text": "1 Overview\nGitHub Pages is a website hosting service that enables you to publish content based on source code managed within a GitHub repository.\nUse the quarto publish command to publish content rendered on your local machine.\nquarto publish will make several operations with GitHub Pages:\n\nprovision,\ncreate pipeline,\ncreate branch with HTML source\nparse .qmd to .html\nrender (or build)\ndeploy,\nhosting,\npublish\n\n\n\n\ngh-pages build and deployment #17: example of Actions triggered by Quarto publish\n\n\nThe most important for us will be to make a branch gh-pages the first time where the output HTML will be deployed with quarto publish gh-pages.\n\n\n\n\n\n\n(0) Files On Repository with TOKEN\n\n\n\n\n\nYour need to create a repository on GitHub with the Quarto pages .qmd pushed there.\nCreate repository, commit and push files to repository with Sync tool. To write our repository you need to:\n\nCreate Token on GitHub.com: Creating a personal access token\nUse this token on your Visual Code - Git, link:\n\n$git config --global user.name \"Mona Lisa\"\n$git config --global user.mail \"monalisa@davinci.com\"\n$git config --global user.password \"4WTVEG43_Q34WG435GAWER4_Q4vsrsrggr_3D44\"\n\n\n\n\n\n\n\n\n\n(1) gh-pages service from GitHub\n\n\n\n\n\nYou can modify these options in Settings : Pages for your repository.\n\n\n\n\n\n\ngh-pages service from github.com\n\n\n\n\n\n\n\n\nfig 13\n\n\n\n\n\n\n\n\n\n\n\nat first gh-pages branch doesn’t exist: don’t worry, quarto will create later\n\n\n\n\n\n\n\n\nfig 14\n\n\n\n\n\n\n\n\n\n\n\nmaster/main is our branch: root\n\n\n\n\n\n\n\n\nfig 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(2) Define Ignoring Output\n\n\n\n\n\nIt’s important to note that you don’t need to check your _site or _book directory into version control (if you have done this in the past you know it makes for very messy diffs!). Before proceeding you should add the output directory of your project to .gitignore. For example:\n## .gitignore\n\n/.quarto/\n/_site/\nIf you’ve already checked these files into source control you may need to remove them explicitly:\n## Terminal\n\ngit rm -r _site\n\n\n\n\n\n\n\n\n\n(3) Publish on branch gh-pages\n\n\n\n\n\nOnce you have configured the source branch and updated your .gitignore, navigate to the directory where your project / git repository is located, make sure you are not on the gh-pages branch, and execute the quarto publish command for GitHub Pages:\n## Terminal\n\nquarto publish gh-pages\nThe publish command will confirm that you want to publish, render your content, copy the output to a special gh-pages branch, push that branch to GitHub, and then open a browser to view your site once it is deployed.\nAfter this first time it will be no necessary to call gh-pages brach, once it has been defined as default:\n##Terminal\n\nquarto publish \n\n\n\n\n\n\n\n\n\n(4) Website published\n\n\n\n\n\nYour Quarto website will be published by GitHub pages on:\n\nuserName.github.io\\repositoryName\n\n\n\n\n\n\n2 Publishing quarto website 2024\n\n\n\n\n\n\n(0) set up tools\n\n\n\n\n\nYou need to set up these tools:\n\ngit & gh CLI tools installed\ngithub.com account created and user logged in\ngh auth login (our machine connected to Github.com) executed\n\nauth wil be done by web browser code\n\nVisual Code with user logged\nquarto engine installed\nquarto extension in Visual Code installed\n\n\n\n\n\n\n\n\n\n\n(1) create local and remote repositories\n\n\n\n\n\n\n\n\nOnce the web in rendered you should Publish to GitHub by the visual tool Git on VisualCode\n\n\n\n\n\nCreate the public repository on remote\n\n\n\n\n\nSelect the files your do not want to push to remote repository\n\n\n\n\n\n\n\n\n\n\n\n(2) first commit and push\n\n\n\n\n\n\n\n\nOnce remote repository created, you may commit and push the quarto project\n\n\n\n\n\nBefore commit & push you must identify the user name and email\n\n\n\n\n\nThe commit/push and first-time definition of remote repository on local can be done by CLI\n\n\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/AlbertProfe/SpeedMan.git\ngit push -u origin main\n\n\n\nYou could rename master to main creating the branch main\n\n\n\n\n\nWe execute the commands: commit, branch, remote add, push\n\n\n\n\n\nCommands executed properly\n\n\n\n\n\nWe check the remote repository on github.com\n\n\n\n\n\n\n\n\n\n\n\n(3) publish on gh-pages\n\n\n\n\n\n\n\n\nNow is time to publish our quarto project to gh-pages\n\n\n\n\n\n\ngh-pages will publish the branch gh-pages created by quarto\n\n\n\n\n\nThe quarto engine is finishing the jobs from quarto publish gh-pages\n\n\n\n\n\n\n\n\n\n\n\n(4) quarto website published\n\n\n\n\n\n\n\n\nquarto project finally published on the internet\n\n\n\n\n\nquarto project finally published on the internet by gh-pages\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: publishing"
    ]
  },
  {
    "objectID": "markup/markup-lang-html-md.html",
    "href": "markup/markup-lang-html-md.html",
    "title": "Markdown and HTML working together, good idea?",
    "section": "",
    "text": "📘 Markdown and HTML\nOverall, it is generally best to avoid mixing HTML and Markdown in the same document, unless you are confident that you can do so without introducing errors or inconsistencies.\nInstead, it is often better to use one language exclusively, and to use the appropriate syntax and formatting for that language",
    "crumbs": [
      "MarkUp Languages",
      "Markdown and HTML working together, good idea?"
    ]
  },
  {
    "objectID": "markup/markup-lang-html-md.html#introduction",
    "href": "markup/markup-lang-html-md.html#introduction",
    "title": "Markdown and HTML working together, good idea?",
    "section": "",
    "text": "📘 Markdown and HTML\nOverall, it is generally best to avoid mixing HTML and Markdown in the same document, unless you are confident that you can do so without introducing errors or inconsistencies.\nInstead, it is often better to use one language exclusively, and to use the appropriate syntax and formatting for that language",
    "crumbs": [
      "MarkUp Languages",
      "Markdown and HTML working together, good idea?"
    ]
  },
  {
    "objectID": "markup/markup-lang-html-md.html#problems",
    "href": "markup/markup-lang-html-md.html#problems",
    "title": "Markdown and HTML working together, good idea?",
    "section": "2 Problems",
    "text": "2 Problems\n\nDisplay: If the HTML and Markdown are not properly formatted or nested, the resulting document may not be readable or display correctly. This can lead to confusion for readers and make the document difficult to understand.\nMaintain: Mixing HTML and Markdown can make it difficult to maintain the document, as changes to one language may affect the other. This can result in errors and inconsistencies, and make it more challenging to update the document over time.\nIncompatibilities: Different Markdown parsers and HTML renderers may have different interpretations of the mixed language, leading to differences in how the document is displayed or interpreted. This can cause confusion for readers and make it difficult to ensure that the document is consistently displayed across different platforms.",
    "crumbs": [
      "MarkUp Languages",
      "Markdown and HTML working together, good idea?"
    ]
  },
  {
    "objectID": "markup/markup-lang-html-md.html#example-creating-navigation-tabs",
    "href": "markup/markup-lang-html-md.html#example-creating-navigation-tabs",
    "title": "Markdown and HTML working together, good idea?",
    "section": "3 Example: creating navigation TABs",
    "text": "3 Example: creating navigation TABs\n\n3.1 Approach #1: MD + CSS\n\n\n\n\n\n\nPublishing website by Quarto engine\n\n\n\n\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n3.2 Before\n\nStudents will need to have a basic understanding of web development, including HTML, CSS, and JavaScript.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n3.3 Goal\n\nIn this project, students will be required to create a web application using HTML, CSS, and JavaScript. They will also need to understand and use Markdown to format their project’s documentation. Additionally, they will need to use GitHub and Visual Code to manage their project’s code and collaborate with their peers.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n3.4 Tasks\n\nIn the first part of the project, students will create a basic web page using markdown and publish it on Github repository using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\nIn the second part of the project, students will learn how to publish their website on gh-pages, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n3.5 Optional\n\nAs an optional study, students may also want to learn about using callouts in their markdown documentation. The following links provide useful information on the topic:\n\nmarkdown-callouts\nCallout Blocks Quarto\nGetting Started with RDMD\nDivs and spans\ncodepen.io HTML+CSS\n\nUsing callouts, links, tabs and CSS can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.\nTo take their project to the next level, students may also choose to connect to an API (Application Programming Interface) to retrieve data and render charts using JavaScript. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n\nQuarto data sources\n\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n3.6 After\n\nThe Quarto website project is a great opportunity for students to develop their skills in web development, markdown, and version control using GitHub and Visual Code.\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n\n\n\n\n\n\n\n\nMarkdown callouts with calls to CSS classes\n\n\n\n\n\n::: {.callout-info icon=false  collapse=\"false\"}\n## Publishing website by Quarto engine\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n::: {.tab-content #before}\n### Before\n&gt;Students will need to have a **basic understanding of web development**, including HTML, CSS, and JavaScript.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #goal}\n### Goal\n&gt;In this project, students will be required to create a **web application using HTML, CSS, and JavaScript**. They will also need to understand and use **Markdown to format their project's documentation**. Additionally, they will need to use GitHub and Visual Code to manage their project's code and collaborate with their peers.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #tasks}\n### Tasks\n&gt;In the first part of the project, students will create a **basic web page using markdown and publish it on Github repository** using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\n&gt;\n&gt;In the second part of the project, students will learn how to **publish their website on gh-pages**, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #optional}\n### Optional\n&gt;As an optional study, students may also want to learn about using **callouts in their markdown documentation**. The following links provide useful information on the topic:\n&gt;\n&gt;- [markdown-callouts](https://oprypin.github.io/markdown-callouts/)\n&gt;- [Callout Blocks Quarto](https://quarto.org/docs/authoring/callouts.html)\n&gt;- [Getting Started with RDMD](https://rdmd.readme.io/docs/getting-started)\n&gt;- [Divs and spans](https://quarto.org/docs/authoring/markdown-basics.html#divs-and-spans)\n&gt;- [codepen.io HTML+CSS](https://codepen.io/dongmikim/pen/VwLqyjQ)\n&gt;\n&gt;Using **callouts, links, tabs and CSS** can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.\n&gt;\n&gt;To take their project to the next level, students may also choose to connect to an **API** (Application Programming Interface) to **retrieve data and render charts using JavaScript**. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n&gt;\n&gt; - [Quarto data sources](/markup/markupquartoprogramming.qmd)\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n::: {.tab-content #after}\n### After\n&gt;The Quarto website project is a great opportunity for students to develop their skills in **web development, markdown, and version control using GitHub and Visual Code**.\n\n::: {.tab-nav}\n[Before](#before){.tab-link}\n\n[Goal](#goal){.tab-link}\n\n[Tasks](#tasks){.tab-link}\n\n[After](#after){.tab-link}\n\n[Optional](#optional){.tab-link}\n:::\n:::\n\n:::\n\n\n\n\n\n3.7 Approach #2: HTML + CSS\nCreate and publish by Quarto\n\n\n3.8 Approach #3: HTML + CSS + JS\nFrom w3.css: W3.CSS Navigation Tabs\nMaven/Gradle Person and Account stored in JSON\n&lt;script&gt;\nfunction openLab(evt, labStep) {\n  var i, tabcontent, tablinks;\n  tabcontent = document.getElementsByClassName(\"tabcontentw3\");\n  for (i = 0; i &lt; tabcontent.length; i++) {\n    tabcontent[i].style.display = \"none\";\n  }\n  tablinks = document.getElementsByClassName(\"tablinks\");\n  for (i = 0; i &lt; tablinks.length; i++) {\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\n  }\n  document.getElementById(labStep).style.display = \"block\";\n  evt.currentTarget.className += \" active\";\n}\n&lt;/script&gt;\n\n\n3.9 Approach #4: import MDReadme?\nCode Blocks\nSyntax\nWe offer both classic single code blocks, as well as a tabbed interface for displaying multiple code blocks concisely! These are written nearly identically to a series of vanilla markdown code snippets, except for their distinct lack of an additional line break separating each subsequent block:\njavascript I'm A tab\nconsole.log('Code Tab A');\n\njavascript I'm tab B\nconsole.log('Code Tab B');\nCustom CSS\n.markdown-body {\n  --md-code-background: #e3dcef;\n  --md-code-text: #4a2b7b;\n  --md-code-tabs: #c6b8dd;\n  --md-code-radius: 4px;\n}\n\n\n\n\n\n\nHow to import that feature Navigate by Tabs into Quarto?\n\n\n\nThis could work but it has been NOT tested:\n\nYou could convert Readme Markdown to Quarto Markdown, using a tool like Markdown Converter (https://markdown.pioul.fr/), which supports both flavors of Markdown.\nOr Markdowon Parser form Flexmark Java library\n\nIn any case, they are not Extensions within Quarto … so, for now, there is NOT an easy and direct solution to do this conversion.\n\n\n\n\n3.10 Approach #5: using Revealjs Quarto\nTabsets Revealjs Quarto\nCreate a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}).\n::: {.panel-tabset group=\"language\"}\n## R\n\nTab content for R language code and stuff\n\n## Python\n\nTab content for Python language code and stuff\n:::\nEach top-level heading within the div creates a new tab. For example, here is the markdown used to implement the first two tabs displayed above:\n\nRPython\n\n\nfizz_buzz &lt;- function(fbnums = 1:50) {\n  output &lt;- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\n\ndef fizz_buzz(num):\n  if num % 15 == 0:\n    print(\"FizzBuzz\")\n  elif num % 5 == 0:\n    print(\"Buzz\")\n  elif num % 3 == 0:\n    print(\"Fizz\")\n  else:\n    print(num)\n\n\n\n it seems the render does not work properly, it does not show content .. :-(",
    "crumbs": [
      "MarkUp Languages",
      "Markdown and HTML working together, good idea?"
    ]
  },
  {
    "objectID": "markup/markup-quarto-create.html",
    "href": "markup/markup-quarto-create.html",
    "title": "Quarto Markdown: creating",
    "section": "",
    "text": "1 Overview\nFollow the Quick Start with Visual Code Extension Quarto to get a simple website up and running. After covering the basics, read on to learn about website navigation and other more advanced website features.\n\n\n\n\n\n\n(1) Install Quarto Extension for Visual Code\n\n\n\n\n\nVS Code extension for the Quarto scientific and technical publishing system. This extension provides language support for Quarto .qmd files. Extension Resources: - Marketplace - Repository - License - Quarto\n\n\n\nQuarto extension for Visual Code\n\n\n\n\n\n\n\n\n\n\n\n(2) Quarto: Create Project\n\n\n\n\n\nTo create a new website project within VS Code, execute the Quarto: Create Project command from the command-palette (CTRL + SHRIFT + P)\n\n\n\nQuarto Visual Code palette create Project\n\n\n\n\n\n\n\n\n\n\n\n(3) Quarto: Select Website and Directory Name\n\n\n\n\n\nThen, select Website Project.\nYou’ll be prompted to select a parent directory to create the project within. Then, you’ll be asked to name the directory for your website project.\n\n\n\nQuarto Visual Code palette create Project and then select website\n\n\n\n\n\nQuarto Visual Code palette create Project and then select website and directory Name\n\n\n\n\n\n\n\n\n\n\n\n(4) Quarto: Project Created\n\n\n\n\n\nThe new website project will be created and opened within VS Code. Click the Render button to preview the website and code the _quarto.yml.\n\n\n\nQuarto Visual Code Project Created\n\n\n\n\n\n\n\n2 Config File\nEvery website has a _quarto.yml config file that provides website options as well as defaults for HTML documents created within the site.\nFor example, here is the default config file for the simple site created above:\n\n\n_quarto.yml\n\nproject:\n  type: website\n\nwebsite:\n  title: \"My New Quarto web about Dev\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\nYAML\n\nYAML (YAML Ain’t Markup Language) is a human-readable data serialization format that stands out for its simplicity and readability. It uses indentation to represent data structures, making it easy to write and understand. YAML is often used for configuration files and data exchange between languages with different data structures. It’s not a programming language but rather a configuration language.\n\n\n\nThe popularity of YAML stems from its clarity and conciseness. Its syntax is clean and doesn’t rely on complex symbols, making it accessible to both developers and non-developers.\nYAML files are commonly used in various contexts, including configuration files for applications, Continuous Integration/Continuous Deployment (CI/CD) pipelines, and infrastructure as code tools.\nYAML’s readability makes it suitable for expressing configurations in a natural and easily comprehensible way.\nIt has become a standard for configuration in many software projects due to its simplicity and broad adoption. Tools like Ansible, Kubernetes, Docker Compose, and configuration files for languages like Python and JavaScript commonly use YAML. Its human-friendly syntax and widespread support contribute to its prevalence in modern software development.\n\n\n\n\n Back to top",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: creating"
    ]
  },
  {
    "objectID": "markup/markup-quarto-api-rest-v2.html",
    "href": "markup/markup-quarto-api-rest-v2.html",
    "title": "Quarto Markdown: OJS Cells",
    "section": "",
    "text": "OJS code cells {ojs} behave a bit differently than cells in traditional notebooks, and have many options available to control their display and layout.\nObservable is a platform for publishing and sharing interactive data-driven documents, an online editor for composing, cells are executed in a sequence, with outputs being generated and displayed as part of the notebook, changes made to cells can be re-executed, updated in real-time.",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: OJS Cells"
    ]
  },
  {
    "objectID": "markup/markup-quarto-api-rest-v2.html#observable-js-cells",
    "href": "markup/markup-quarto-api-rest-v2.html#observable-js-cells",
    "title": "Quarto Markdown: OJS Cells",
    "section": "1 Observable JS Cells",
    "text": "1 Observable JS Cells\n\n1.1 Cell Execution\nA critical difference between OJS cell execution and traditional notebooks is that in OJS cells do not need to be defined in any particular order.\nBecause execution** is fully reactive**, the runtime will automatically execute cells in the correct order based on how they reference each other. This is different than a traditional notebook with linear cell execution.",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: OJS Cells"
    ]
  },
  {
    "objectID": "markup/markup-quarto-api-rest-v2.html#examples",
    "href": "markup/markup-quarto-api-rest-v2.html#examples",
    "title": "Quarto Markdown: OJS Cells",
    "section": "2 Examples",
    "text": "2 Examples\n\n2.1 Example 1: viewof\n\nlink\n\n\n\"choose one color\"\n\n\n\n\n\n\n\nviewof color = Inputs.select([\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"violet\"], {value: \"green\"})\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2 Example 2: Histiogram\n\nlink\n\n\nheight = 250\nnumbers = Float64Array.from({length: 1000}, d3.randomNormal())\nimport {chart as histogram} with {numbers as data, height} from \"@d3/histogram@261\"\n\nhistogram\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.3 Example 3: Cars data\n\nlink\n\n\nimport {viewof selection as cars} from \"@d3/brushable-scatterplot\"\nviewof cars\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4 Example 6: mortgage\n\nmortgage\n\n\nviewof amount = Inputs.range([100000, 1500000], {label: \"Mortgage amount\", step: 100000})\n\nviewof interest = Inputs.range([2, 8], {label: \"Interest rate (%)\", step: .1})\n\nviewof duration = Inputs.range([10, 30], {label: \"Duration\", step: 5})\n\n\"Values:\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\namount\n\n\n\n\n\n\n\ninterest\n\n\n\n\n\n\n\nduration\n\n\n\n\n\n\n\n\nA mortgage for a house purchased for  at an interest rate of \\({(interest)}% over\\){(duration)} years.\nIt costs a total of  dolars.\n\n\n2.5 Example 5: Fetch with loading…\n\nObservable JS\n\n\nd3 = require(\"d3\");\n\n\nviewof fetchButton = Inputs.button(\"fetch\", {async function() {\n\n    loadingMessage.value = \"Loading...\";\n    let contributors = {};\n    contributors.value = await d3.json(\"https://api.github.com/repos/albertprofe/wiki/stats/contributors\");\n    \n\n    let commits = contributors.value.map(contributor =&gt; {\n      loadingMessage.value = \"done\";\n      let author = contributor.author;\n      return {\n        name: author.login,\n        title: author.login,\n        group: author.type,\n        value: contributor.total\n      }\n    });\n\n    Inputs.table(commits, { sort: \"value\", reverse: true })\n}});\n\nviewof loadingMessage = Inputs.button(\"...\");",
    "crumbs": [
      "Quarto Markdown",
      "Quarto Markdown: OJS Cells"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116--deliveries-24.html",
    "href": "ifct116-24/ifct116--deliveries-24.html",
    "title": "IFCT166 Calendar & Deliveries",
    "section": "",
    "text": "Calendar & Deliveries\n\n\n\nCalendar 2024\n\nInici-final de curs: 21/11/2024-11/12/2024\n\n\n\n\nCalendar 2024\n\n\n\nCalendar 2024\n\n\n\nPlanificació didàctica\n\n\n\nPlanificació didàctica de l’ACCIÓ Formativa\n\n\n\n\nDeliveries\nAlways in Quarto/Wiki .md format and code in GitHub repositories (or Organizations). Deliveries via github or similar:\n\n\nDeliveries table\n\n\n\n\n\n\n\nCode\nLink doc\nDescription\n\n\n\n\nMF01\nPull Request to AlbertProfe github\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "ifct116-24/ifct116--backlog-sprint-24.html",
    "href": "ifct116-24/ifct116--backlog-sprint-24.html",
    "title": "IFCT166 Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog"
  },
  {
    "objectID": "ifct116-24/ifct116--backlog-sprint-24.html#sprint01-init-november-2024",
    "href": "ifct116-24/ifct116--backlog-sprint-24.html#sprint01-init-november-2024",
    "title": "IFCT166 Sprint Backlog",
    "section": "Sprint#01 Init (November 2024)",
    "text": "Sprint#01 Init (November 2024)\n\nBacklog course November 2024 table\n\n\n\n\n\n\n\n\n\n#\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#01\n01\n21/11/2024\n\n\n\n\n\n02\n22/11/2024"
  },
  {
    "objectID": "ifct116-24/ifct116-24.html",
    "href": "ifct116-24/ifct116-24.html",
    "title": "IFCT116 Official Docs",
    "section": "",
    "text": "Denominació: FHERRAMIENTAS DEVOPS\nCodi: IFCt166exp\nHores: 75h\nFamília professional: Informàtica i comunicacions\nÀrea professional: SISTEMAS Y TELEMÁTICA\nNivell de qualificació professional: 3",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Official Docs"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-24.html#identificació-del-certificat-de-professionalitat",
    "href": "ifct116-24/ifct116-24.html#identificació-del-certificat-de-professionalitat",
    "title": "IFCT116 Official Docs",
    "section": "",
    "text": "Denominació: FHERRAMIENTAS DEVOPS\nCodi: IFCt166exp\nHores: 75h\nFamília professional: Informàtica i comunicacions\nÀrea professional: SISTEMAS Y TELEMÁTICA\nNivell de qualificació professional: 3",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Official Docs"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-24.html#documentació",
    "href": "ifct116-24/ifct116-24.html#documentació",
    "title": "IFCT116 Official Docs",
    "section": "Documentació",
    "text": "Documentació\n\nPROGRAMA Formatiu: Fullstack júnior web developer amb Java",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Official Docs"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-24.html#programa-formatiu",
    "href": "ifct116-24/ifct116-24.html#programa-formatiu",
    "title": "IFCT116 Official Docs",
    "section": "Programa formatiu",
    "text": "Programa formatiu\n\nMódulo 1: Introducción a DevOps\nMódulo 2: Contenedores con Docker\nMódulo 3: Infraestructura como Código\nMódulo 4: Gestion de la configuración con Ansible\nMódulo 5: Infraestructura Inmutable\nMódulo 6: Integración y Entrega Continua con Jenkins",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Official Docs"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-24.html#competència-general",
    "href": "ifct116-24/ifct116-24.html#competència-general",
    "title": "IFCT116 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDominar las principales herramientas de DevOps para lograr la automatización de todos los pasos de la construcción del software, desde la integración, las pruebas y la entrega hasta el despliegue y la administración de la Infraestructura",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Official Docs"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-backlog-product-24.html",
    "href": "ifct116-24/ifct116-backlog-product-24.html",
    "title": "IFCT116 Product Backlog",
    "section": "",
    "text": "Backlog course",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Product Backlog"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-backlog-product-24.html#november-2024",
    "href": "ifct116-24/ifct116-backlog-product-24.html#november-2024",
    "title": "IFCT116 Product Backlog",
    "section": "November 2024",
    "text": "November 2024\n\nBacklog course November 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#01\n01\n20/11/2024\n\n\n\n\n\n02\n21/11/2024\n\n\n\n\n#02\n03\n25/11/2024\n\n\n\n\n\n04\n26/11/2024\n\n\n\n\n\n05\n27/11/2024\n\n\n\n\n\n06\n28/11/2024\n\n\n\n\n\n07\n29/11/2024",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Product Backlog"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-backlog-product-24.html#december-2024",
    "href": "ifct116-24/ifct116-backlog-product-24.html#december-2024",
    "title": "IFCT116 Product Backlog",
    "section": "December 2024",
    "text": "December 2024\n\nBacklog course December 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#03\n08\n02/12/2024\n\n\n\n\n\n09\n03/12/2024\n\n\n\n\n\n10\n04/12/2024\n\n\n\n\n\n11\n05/12/2024\n\n\n\n\n#04\n13\n09/12/2024\n\n\n\n\n\n14\n10/12/2024\n\n\n\n\n\n15\n11/12/2024",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Product Backlog"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-deliveries-24.html",
    "href": "ifct116-24/ifct116-deliveries-24.html",
    "title": "IFCT116 Calendar & Deliveries",
    "section": "",
    "text": "Calendar & Deliveries\n\n\n\nCalendar 2024\n\nInici-final de curs: 21/11/2024-11/12/2024\n\n\n\n\nCalendar 2024\n\n\n\nCalendar 2024\n\n\n\nPlanificació didàctica\n\n\n\nPlanificació didàctica de l’ACCIÓ Formativa\n\n\n\n\nDeliveries\nAlways in Quarto/Wiki .md format and code in GitHub repositories (or Organizations). Deliveries via github or similar:\n\n\nDeliveries table\n\n\n\n\n\n\n\nCode\nLink doc\nDescription\n\n\n\n\nMF01\nPull Request to AlbertProfe github\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Calendar & Deliveries"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-backlog-sprint-24.html",
    "href": "ifct116-24/ifct116-backlog-sprint-24.html",
    "title": "IFCT116 Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifct116-24/ifct116-backlog-sprint-24.html#sprint01-init-november-2024",
    "href": "ifct116-24/ifct116-backlog-sprint-24.html#sprint01-init-november-2024",
    "title": "IFCT116 Sprint Backlog",
    "section": "Sprint#01 Init (November 2024)",
    "text": "Sprint#01 Init (November 2024)\n\nBacklog course November 2024 table\n\n\n\n\n\n\n\n\n\n#\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#01\n01\n21/11/2024\n\n\n\n\n\n02\n22/11/2024",
    "crumbs": [
      "IFCT116-24 Docs",
      "IFCT116 Sprint Backlog"
    ]
  },
  {
    "objectID": "ifct166-24/ifct116-24.html",
    "href": "ifct166-24/ifct116-24.html",
    "title": "IFCT166 Official Docs",
    "section": "",
    "text": "Denominació: FHERRAMIENTAS DEVOPS\nCodi: IFCt166exp\nHores: 75h\nFamília professional: Informàtica i comunicacions\nÀrea professional: SISTEMAS Y TELEMÁTICA\nNivell de qualificació professional: 3"
  },
  {
    "objectID": "ifct166-24/ifct116-24.html#identificació-del-certificat-de-professionalitat",
    "href": "ifct166-24/ifct116-24.html#identificació-del-certificat-de-professionalitat",
    "title": "IFCT166 Official Docs",
    "section": "",
    "text": "Denominació: FHERRAMIENTAS DEVOPS\nCodi: IFCt166exp\nHores: 75h\nFamília professional: Informàtica i comunicacions\nÀrea professional: SISTEMAS Y TELEMÁTICA\nNivell de qualificació professional: 3"
  },
  {
    "objectID": "ifct166-24/ifct116-24.html#documentació",
    "href": "ifct166-24/ifct116-24.html#documentació",
    "title": "IFCT166 Official Docs",
    "section": "Documentació",
    "text": "Documentació\n\nPROGRAMA Formatiu: Fullstack júnior web developer amb Java"
  },
  {
    "objectID": "ifct166-24/ifct116-24.html#programa-formatiu",
    "href": "ifct166-24/ifct116-24.html#programa-formatiu",
    "title": "IFCT166 Official Docs",
    "section": "Programa formatiu",
    "text": "Programa formatiu\n\nMódulo 1: Introducción a DevOps\nMódulo 2: Contenedores con Docker\nMódulo 3: Infraestructura como Código\nMódulo 4: Gestion de la configuración con Ansible\nMódulo 5: Infraestructura Inmutable\nMódulo 6: Integración y Entrega Continua con Jenkins"
  },
  {
    "objectID": "ifct166-24/ifct116-24.html#competència-general",
    "href": "ifct166-24/ifct116-24.html#competència-general",
    "title": "IFCT166 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDominar las principales herramientas de DevOps para lograr la automatización de todos los pasos de la construcción del software, desde la integración, las pruebas y la entrega hasta el despliegue y la administración de la Infraestructura"
  },
  {
    "objectID": "ifct166-24/ifct116-backlog-product-24.html",
    "href": "ifct166-24/ifct116-backlog-product-24.html",
    "title": "IFCT166 Product Backlog",
    "section": "",
    "text": "Backlog course"
  },
  {
    "objectID": "ifct166-24/ifct116-backlog-product-24.html#november-2024",
    "href": "ifct166-24/ifct116-backlog-product-24.html#november-2024",
    "title": "IFCT166 Product Backlog",
    "section": "November 2024",
    "text": "November 2024\n\nBacklog course November 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#01\n01\n20/11/2024\n\n\n\n\n\n02\n21/11/2024\n\n\n\n\n#02\n03\n25/11/2024\n\n\n\n\n\n04\n26/11/2024\n\n\n\n\n\n05\n27/11/2024\n\n\n\n\n\n06\n28/11/2024\n\n\n\n\n\n07\n29/11/2024"
  },
  {
    "objectID": "ifct166-24/ifct116-backlog-product-24.html#december-2024",
    "href": "ifct166-24/ifct116-backlog-product-24.html#december-2024",
    "title": "IFCT166 Product Backlog",
    "section": "December 2024",
    "text": "December 2024\n\nBacklog course December 2024 table\n\n\n\n\n\n\n\n\n\nSprint\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#03\n08\n02/12/2024\n\n\n\n\n\n09\n03/12/2024\n\n\n\n\n\n10\n04/12/2024\n\n\n\n\n\n11\n05/12/2024\n\n\n\n\n#04\n13\n09/12/2024\n\n\n\n\n\n14\n10/12/2024\n\n\n\n\n\n15\n11/12/2024"
  },
  {
    "objectID": "ifct166-24/ifct116-deliveries-24.html",
    "href": "ifct166-24/ifct116-deliveries-24.html",
    "title": "IFCT166 Calendar & Deliveries",
    "section": "",
    "text": "Calendar & Deliveries\n\n\n\nCalendar 2024\n\nInici-final de curs: 21/11/2024-11/12/2024\n\n\n\n\nCalendar 2024\n\n\n\nCalendar 2024\n\n\n\nPlanificació didàctica\n\n\n\nPlanificació didàctica de l’ACCIÓ Formativa\n\n\n\n\nDeliveries\nAlways in Quarto/Wiki .md format and code in GitHub repositories (or Organizations). Deliveries via github or similar:\n\n\nDeliveries table\n\n\n\n\n\n\n\nCode\nLink doc\nDescription\n\n\n\n\nMF01\nPull Request to AlbertProfe github\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "ifct166-24/ifct116-backlog-sprint-24.html",
    "href": "ifct166-24/ifct116-backlog-sprint-24.html",
    "title": "IFCT166 Sprint Backlog",
    "section": "",
    "text": "Sprint Backlog"
  },
  {
    "objectID": "ifct166-24/ifct116-backlog-sprint-24.html#sprint01-init-november-2024",
    "href": "ifct166-24/ifct116-backlog-sprint-24.html#sprint01-init-november-2024",
    "title": "IFCT166 Sprint Backlog",
    "section": "Sprint#01 Init (November 2024)",
    "text": "Sprint#01 Init (November 2024)\n\nBacklog course November 2024 table\n\n\n\n\n\n\n\n\n\n#\nDay\nDate\nTopics\nDetails Topics\n\n\n\n\n#01\n01\n21/11/2024\n\n\n\n\n\n02\n22/11/2024"
  },
  {
    "objectID": "devops/devops-doc-quarto.html#popular-documentation-tools",
    "href": "devops/devops-doc-quarto.html#popular-documentation-tools",
    "title": "How to document: Quarto and Obsidian",
    "section": "2.1 Popular Documentation Tools",
    "text": "2.1 Popular Documentation Tools\n\n\n\n\n\nSeveral tools leverage markdown for creating powerful documentation:\n\nDocusaurus: https://docusaurus.io\nSphinx: https://www.sphinx-doc.org\nQuarto: https://quarto.org\nObsidian: https://obsidian.md\nNotion: https://www.notion.so\nGitBook: https://www.gitbook.com\n\nThese tools demonstrate the versatility of markdown in creating various types of documentation, from personal notes to large-scale project documentation like Kubernetes.",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html#docusaurus",
    "href": "devops/devops-doc-quarto.html#docusaurus",
    "title": "How to document: Quarto and Obsidian",
    "section": "3.1 Docusaurus",
    "text": "3.1 Docusaurus\n\nPurpose: Building documentation websites\nAdvantage: React-based, allowing for easy customization",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-what-intro.html#comparison-table",
    "href": "devops/devops-what-intro.html#comparison-table",
    "title": "DevOps: Introduction",
    "section": "3.1 Comparison Table",
    "text": "3.1 Comparison Table\nThe integration of these approaches allows organizations to balance rapid innovation with system stability:\n\nDevOps drives the acceleration of software development and deployment, creating flexible and responsive delivery pipelines.\nSRE complements this by implementing rigorous monitoring, establishing service level objectives, and creating systematic approaches to managing system reliability.\n\n\n\nComparison table DevOps vs SRE\n\n\n\n\n\n\n\nAspect\nDevOps\nSRE\n\n\n\n\nPrimary Focus\nContinuous integration and delivery\nSystem reliability and performance\n\n\nKey Objective\nReduce barriers between development and operations\nMaintain system reliability through engineering practices\n\n\nMain Metrics\nDeployment frequency, lead time, change failure rate\nService Level Indicators (SLIs), Error Budgets\n\n\nTeam Composition\nCross-functional teams\nSpecialized reliability engineers\n\n\nAutomation Level\nHigh automation of delivery pipeline\nAutomation of operational tasks and monitoring\n\n\nChange Management\nFrequent, incremental changes\nControlled, measured changes\n\n\nCultural Approach\nCollaborative, shared responsibility\nData-driven, systematic\n\n\n\n\n\nWhere DevOps emphasizes cultural transformation and collaborative workflows, SRE provides a more quantitative framework for understanding system performance. By combining their strengths, teams can create automated, efficient processes that not only deliver software quickly but also maintain high standards of reliability and performance.\n\nThe synergy between DevOps and SRE enables organizations to respond more effectively to technological challenges, reduce operational complexity, and create more resilient software systems. Rather than competing, these methodologies work together to address the complex demands of modern software development and infrastructure management.\n\n\n\n\n\n\n\nCore Principles & When to Use Each Approach\n\n\n\nCore Principles\n\nDevOps emphasizes:\n\nContinuous integration\nRapid deployment\nCollaboration\nAutomation of build and release processes\n\nSRE focuses on:\n\nReliability engineering\nPerformance optimization\nProactive monitoring\nError budget management\n\n\nWhen to Use Each Approach\n\nChoose DevOps when:\n\nNeeding to break down silos\nWanting to accelerate software delivery\nSeeking to improve collaboration\n\nChoose SRE when:\n\nRequiring high system reliability\nManaging complex, large-scale systems\nNeeding systematic approach to operational challenges",
    "crumbs": [
      "What is DevOps",
      "DevOps: Introduction"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html#gitbook",
    "href": "devops/devops-doc-quarto.html#gitbook",
    "title": "How to document: Quarto and Obsidian",
    "section": "3.4 GitBook",
    "text": "3.4 GitBook\n\nOverview: GitBook is a modern documentation platform that allows teams to create and manage documentation collaboratively.\nKey Features:\n\nIntuitive interface for easy document creation.\nSupports version control and integration with GitHub.\nOffers interactive and visually appealing documentation layouts.\n\nUse Case: Ideal for documenting APIs, product features, and internal knowledge bases, making it suitable for both technical and non-technical teams.",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html#notion",
    "href": "devops/devops-doc-quarto.html#notion",
    "title": "How to document: Quarto and Obsidian",
    "section": "3.5 Notion",
    "text": "3.5 Notion\n\nOverview: Notion is a versatile collaboration tool that combines note-taking, task management, and documentation in one platform.\nKey Features:\n\nHighly customizable pages with databases, tables, and kanban boards.\nReal-time collaboration capabilities for team projects.\nSupports embedding various content types (images, videos, code snippets).\n\nUse Case: Great for teams looking to manage diverse documentation needs in a single workspace while allowing for creative layouts.",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html#sphinx",
    "href": "devops/devops-doc-quarto.html#sphinx",
    "title": "How to document: Quarto and Obsidian",
    "section": "3.6 Sphinx",
    "text": "3.6 Sphinx\n\nOverview: Sphinx is an open-source documentation generator primarily used for Python projects but supports multiple programming languages.\nKey Features:\n\nGenerates documentation in various formats (HTML, PDF, LaTeX).\nSupports extensive cross-referencing and automatic indexing.\nHighly customizable with themes and extensions.\n\nUse Case: Best suited for technical documentation where structured content is essential, such as API references and user guides.",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html#documentation-generators",
    "href": "devops/devops-doc-quarto.html#documentation-generators",
    "title": "How to document: Quarto and Obsidian",
    "section": "3.1 Documentation Generators",
    "text": "3.1 Documentation Generators\n\nDocusaurus: A static site generator focused on documentation, allowing users to write in Markdown and embed React components. It supports localization, versioning, and content search.\nSphinx: A tool for creating intelligent and structured documentation, particularly for Python projects. It offers rich text formatting, automatic API documentation generation, and extensive theme support.\nGitBook: A modern documentation platform that allows teams to create beautiful and interactive documentation collaboratively. It integrates with GitHub and supports Markdown.",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-doc-quarto.html#content-creation-and-publishing-tools",
    "href": "devops/devops-doc-quarto.html#content-creation-and-publishing-tools",
    "title": "How to document: Quarto and Obsidian",
    "section": "3.1 Content Creation and Publishing Tools",
    "text": "3.1 Content Creation and Publishing Tools\n\nQuarto: A next-generation tool for authoring documents that combines Markdown with code execution in languages like R, Python, and Julia. It is designed for producing high-quality outputs in various formats like HTML and PDF.\nObsidian: A note-taking app that uses Markdown for creating personal knowledge bases. It emphasizes linking notes together and supports a wide range of plugins for enhanced functionality.\nNotion: An all-in-one workspace that combines note-taking, project management, and database functionalities. It allows users to create documents in a flexible format but is not specifically focused on traditional. documentation.",
    "crumbs": [
      "Documentation",
      "How to document: Quarto and Obsidian"
    ]
  },
  {
    "objectID": "devops/devops-what-infraascode.html",
    "href": "devops/devops-what-infraascode.html",
    "title": "Infrastructure as code (IaC)",
    "section": "",
    "text": "1 Overview\n\n\n\n\n\nInfrastructure as code (IaC) uses DevOps methodology and versioning with a descriptive model to define and deploy infrastructure, such as networks, virtual machines, load balancers, and connection topologies.\nJust as the same source code always generates the same binary, an IaC model generates the same environment every time it deploys.\n\n\n2 Benefits of IaC\nProvisioning infrastructure has historically been a time-consuming and costly manual process. As virtualization, containers, and cloud computing have become the norm, infrastructure management has moved away from physical hardware in data centers—providing many benefits, but also creating some new challenges.\n\n\n\n\n\n\nCloud computing\n\n\n\nWith cloud computing, the number of infrastructure components has grown, more applications are being released to production on a daily basis, and infrastructure needs to be able to be spun up, scaled, and taken down frequently.\nWithout an IaC practice in place, it becomes increasingly difficult to manage the scale of today’s infrastructure.\n\n\nIaC can help your organization manage IT infrastructure needs while also improving consistency and reducing errors and manual configuration.\n\n\n\n\n\nBenefits:\n\nCost reduction\nIncrease in speed of deployments\nReduce errors\nImprove infrastructure consistency\nEliminate configuration drift\n\n\n\n3 Avoid manual configuration to enforce consistency\nIaC evolved to solve the problem of environment drift in release pipelines. Without IaC, teams must maintain deployment environment settings individually. Over time, each environment becomes a “snowflake,” a unique configuration that can’t be reproduced automatically. Inconsistency among environments can cause deployment issues. Infrastructure administration and maintenance involve manual processes that are error prone and hard to track.\nIaC avoids manual configuration and enforces consistency by representing desired environment states via well-documented code in formats such as JSON.\nInfrastructure deployments with IaC are repeatable and prevent runtime issues caused by configuration drift or missing dependencies.\nRelease pipelines execute the environment descriptions and version configuration models to configure target environments. To make changes, the team edits the source, not the target.\n\n\n4 Tools\nUsing IaC config files, you can automate deployments of networks, virtual machines, servers, databases, etc. So, to orchestrate this infrastructure you wil need some tools:\n\nTerraform\nCloudFormation\nAnsible\nPuppet\nPulumi\nDocker\n\n\n\n5 Links\n\nInfrastructure as Code - Wikipedia\nWhat is Infrastructure as Code? - AWS\nInfrastructure as Code Overview - Google Cloud\nWhat is Infrastructure as Code (IaC)? - Red Hat\nWhat is Infrastructure as Code? - Microsoft\nThe Best Infrastructure as Code Tools\n\n\n\n\n\n Back to top",
    "crumbs": [
      "What is DevOps",
      "Infrastructure as code (IaC)"
    ]
  },
  {
    "objectID": "devops/devops-what-lifecycle.html#key-relationship-aspects",
    "href": "devops/devops-what-lifecycle.html#key-relationship-aspects",
    "title": "Software Lifecycle",
    "section": "2.1 Key Relationship Aspects",
    "text": "2.1 Key Relationship Aspects\n\n\n\n\n\nCollaborative Approach\n\nDevOps fosters a collaborative approach that fundamentally changes how development and operations teams interact. It emphasizes shared responsibility, where both teams are accountable for the entire software lifecycle, from development to deployment and maintenance.\n\nThis approach promotes unified goals, aligning the objectives of both teams towards delivering high-quality software efficiently.\nCross-functional team integration is a key aspect, breaking down traditional silos and encouraging continuous communication and knowledge sharing between developers, operations personnel, and other stakeholders.\nProcess Transformation\n\nAt the heart of DevOps is a significant transformation of software development and deployment processes. Automated workflows are implemented to streamline repetitive tasks, reduce human error, and increase efficiency.\n\nContinuous feedback loops are established, allowing for rapid identification and resolution of issues throughout the development cycle.\nThis enables rapid iteration and deployment, where software updates can be released quickly and frequently. The focus shifts from large, infrequent releases to smaller, incremental updates that can be easily rolled back if issues arise.\nTechnical Integration\n\nDevOps relies heavily on technical integration to support its collaborative and efficient approach.\n\nVersion control systems are used to manage code changes and facilitate collaboration among developers.\nAutomated testing is implemented at various stages of the development process to ensure code quality and catch issues early.\nInfrastructure as Code (IaC) allows for the management and provisioning of infrastructure through code, ensuring consistency and repeatability.\nContainerization technologies like Docker are used to package applications and their dependencies, ensuring consistent behavior across different environments.\nComprehensive monitoring and logging systems are put in place to provide real-time insights into application performance and user behavior, enabling quick responses to issues and informed decision-making.\nDevOps Impact on SDLC\nTraditional SDLC     →     DevOps SDLC\nSequential Phases    →     Continuous Improvement\nManual Processes     →     Automated Workflows\nSiloed Teams         →     Collaborative Environment\nSlow Releases        →     Rapid, Frequent Deployments",
    "crumbs": [
      "What is DevOps",
      "Software Lifecycle"
    ]
  },
  {
    "objectID": "devops/devops-what-lifecycle.html#benefits",
    "href": "devops/devops-what-lifecycle.html#benefits",
    "title": "Software Lifecycle",
    "section": "2.2 Benefits",
    "text": "2.2 Benefits\n\nFaster time-to-market\nImproved software quality\nEnhanced team productivity\nReduced deployment risks\nIncreased customer satisfaction",
    "crumbs": [
      "What is DevOps",
      "Software Lifecycle"
    ]
  },
  {
    "objectID": "devops/devops-what-agile-microservice.html",
    "href": "devops/devops-what-agile-microservice.html",
    "title": "DevOps: Agile and Microservices",
    "section": "",
    "text": "DevOps is an evolving philosophy and framework that encourages:\n\nreliable development\nbetter integration between devs and ops, and\nfaster release of new or revised software features or products to customers.\n\n\n\n\n\n\nThe practice of DevOps encourages:\n\nsmoother, continuous communication and collaboration,\nvisibility and iteration,\nand transparency between application development teams (Dev) and their IT operations team (Ops) counterparts.\n\n\nThis closer relationship between “Dev” and “Ops” permeates every phase of the DevOps lifecycle: from initial software planning to code, build, test, and release phases and on to deployment, operations, and ongoing monitoring. \n\nSome people group DevOps goals into four categories: culture, automation, measurement, and sharing (CAMS), and DevOps tools can aid in these areas. These tools can make development and operations workflows more streamlined and collaborative, automating previously time-consuming, manual, or static tasks involved in integration, development, testing, deployment, or monitoring.",
    "crumbs": [
      "What is DevOps",
      "DevOps: Agile and Microservices"
    ]
  },
  {
    "objectID": "devops/devops-what-agile-microservice.html#overview",
    "href": "devops/devops-what-agile-microservice.html#overview",
    "title": "DevOps: Agile and Microservices",
    "section": "",
    "text": "DevOps is an evolving philosophy and framework that encourages:\n\nreliable development\nbetter integration between devs and ops, and\nfaster release of new or revised software features or products to customers.\n\n\n\n\n\n\nThe practice of DevOps encourages:\n\nsmoother, continuous communication and collaboration,\nvisibility and iteration,\nand transparency between application development teams (Dev) and their IT operations team (Ops) counterparts.\n\n\nThis closer relationship between “Dev” and “Ops” permeates every phase of the DevOps lifecycle: from initial software planning to code, build, test, and release phases and on to deployment, operations, and ongoing monitoring. \n\nSome people group DevOps goals into four categories: culture, automation, measurement, and sharing (CAMS), and DevOps tools can aid in these areas. These tools can make development and operations workflows more streamlined and collaborative, automating previously time-consuming, manual, or static tasks involved in integration, development, testing, deployment, or monitoring.",
    "crumbs": [
      "What is DevOps",
      "DevOps: Agile and Microservices"
    ]
  },
  {
    "objectID": "devops/devops-what-agile-microservice.html#agile-devops",
    "href": "devops/devops-what-agile-microservice.html#agile-devops",
    "title": "DevOps: Agile and Microservices",
    "section": "2 Agile DevOps",
    "text": "2 Agile DevOps\n\n\n\n\n\nAgile DevOps is a methodology that combines agile software development with devops practices to help organizations deliver features and updates faster and more efficiently. \nThe main goal of Agile DevOps is to shorten the feedback loop between developers and operations teams so that changes can be made quickly and efficiently.\nMicroservices describe the architectural process of building a distributed application from separately deployable services that perform specific business functions and communicate over web interfaces. \nDevOps teams enclose individual pieces of functionality in microservices and build larger systems by combining the microservices like building blocks.",
    "crumbs": [
      "What is DevOps",
      "DevOps: Agile and Microservices"
    ]
  },
  {
    "objectID": "devops/devops-what-agile-microservice.html#microservices",
    "href": "devops/devops-what-agile-microservice.html#microservices",
    "title": "DevOps: Agile and Microservices",
    "section": "3 Microservices",
    "text": "3 Microservices\n\n\n\n\n\nMicroservices apply an example of the open/closed principle:\n\nThey’re open for extension (using the interfaces they expose)\nThey’re closed for modification (each is implemented and versioned independently) Microservices provide many benefits over monolithic architectures:\nThey can remove single points of failure (SPOFs) by ensuring issues in one service don’t crash or affect other parts of an application.\nIndividual microservices can be scaled out independently to provide extra availability and capacity.\nDevOps teams can extend functionality by adding new microservices without unnecessarily affecting other parts of the application.\n\nUsing microservices can increase team velocity. DevOps practices, such as Continuous Integration and Continuous Delivery, are used to drive microservice deployments.\nMicroservices nicely complement cloud-based application architectures by allowing software development teams to take advantage of scenarios such as event-driven programming and autoscale. The microservice components expose APIs (application programming interfaces), typically over REST protocols, for communicating with other services.\n\n\n\n\n\n\nContainers\n\n\n\nAn increasingly common practice is to use container clusters to implement microservices. Containers allow for the isolation, packaging, and deployment of microservices, while orchestration scales out a group of containers into an application.",
    "crumbs": [
      "What is DevOps",
      "DevOps: Agile and Microservices"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#reference-to-an-instance-method-of-a-particular-object",
    "href": "springboot/sblab8-2.html#reference-to-an-instance-method-of-a-particular-object",
    "title": "Lab#SB08-2: Vaadin",
    "section": "2.3 Reference to an Instance Method of a Particular Object",
    "text": "2.3 Reference to an Instance Method of a Particular Object\n\nThe method reference binder.forField(titleField).bind(Person::getTitle, Person::setTitle) is used. Here, Person::getTitle and Person::setTitle refer to the instance methods getTitle and setTitle of the Person class. This is equivalent to a lambda expression that calls these methods on a Person object.",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/sblab8-2.html#reference-to-an-instance-method-of-a-particular-object-shorthand",
    "href": "springboot/sblab8-2.html#reference-to-an-instance-method-of-a-particular-object-shorthand",
    "title": "Lab#SB08-2: Vaadin",
    "section": "2.4 Reference to an Instance Method of a Particular Object (Shorthand)",
    "text": "2.4 Reference to an Instance Method of a Particular Object (Shorthand)\n\nThe shorthand binder.bind(nameField, Person::getName, Person::setName) is used, which is another example of referencing instance methods getName and setName of the Person class.\n\n\n2.4.1 Example Breakdown\nbinder.forField(titleField)\n      .bind(Person::getTitle, Person::setTitle);\nThis is equivalent to:\nbinder.forField(titleField)\n      .bind(person -&gt; person.getTitle(), (person, title) -&gt; person.setTitle(title));\nSimilarly,\nbinder.bind(nameField, Person::getName, Person::setName);\nis equivalent to:\nbinder.bind(nameField, person -&gt; person.getName(), (person, name) -&gt; person.setName(name));\nMethod references here replace the need for explicit lambda expressions, making the code more concise and easier to read.\n\nServer to Client: Reading & Writing Automatically\nWriting automatically to business objects when the user makes changes in the UI is usually the most convenient option. You can bind the values directly to an instance by allowing Binder to save automatically values from the fields.\nIn the example here, field values are saved automatically:\nBinder&lt;Person&gt; binder = new Binder&lt;&gt;();\n\n// Field binding configuration omitted.\n// It should be done here.\n\nPerson person = new Person(\"John Doe\", 1957);\n\n// Loads the values from the person instance.\n// Sets person to be updated when any bound field\n// is updated.\nbinder.setBean(person);\n\nButton saveButton = new Button(\"Save\", event -&gt; {\n    if (binder.validate().isOk()) {\n        // Person is always up-to-date as long as\n        // there are no validation errors.\n\n        MyBackend.updatePersonInDatabase(person);\n    }\n});",
    "crumbs": [
      "Spring Boot Laboratories",
      "Lab#SB08-2: Vaadin"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-hilla.html",
    "href": "springboot/boot-concepts-vaadin-hilla.html",
    "title": "Spring Boot: Vaadin Hilla",
    "section": "",
    "text": "📘 Vaadin Hilla\nVaadin Hilla offers a powerful and flexible way to build modern web applications by combining the strengths of Java and TypeScript.\nWith its type-safe communication, built-in security features, and support for reactive programming, Hilla is an excellent choice for developers looking to create robust, interactive, and maintainable web applications.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Hilla"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-flow.html",
    "href": "springboot/boot-concepts-vaadin-flow.html",
    "title": "Spring Boot: Vaadin Flow",
    "section": "",
    "text": "📘 Thymeleaf\nThymeleaf is a modern server-side Java template engine for both web and standalone environments.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Flow"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-flow.html#atmosphere",
    "href": "springboot/boot-concepts-vaadin-flow.html#atmosphere",
    "title": "Spring Boot: Vaadin Flow",
    "section": "1.1 atmosphere",
    "text": "1.1 atmosphere\nVaadin uses the Atmosphere framework to facilitate robust client-server communication, particularly for real-time and push-based features. \nAtmosphere is an open-source project that provides a powerful abstraction layer for various asynchronous communication protocols, including WebSockets, Server-Sent Events, and long-polling.\nVaadin integrates Atmosphere to handle its server push functionality, allowing servers to send updates to clients without the need for client-side polling. This integration enables Vaadin applications to create responsive, real-time user interfaces with minimal developer effort.\n\n\n\n\n\nAtmosphere’s key features utilized by Vaadin include:\n\nProtocol negotiation and fallback mechanisms\nAutomatic selection of the best available transport method\nHandling of connection management and reconnection scenarios\nCross-browser compatibility\n\n\nBy building on Atmosphere, Vaadin abstracts away the complexities of low-level communication protocols, allowing developers to focus on application logic while still benefiting from efficient, real-time communication between client and server.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Flow"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-flow.html#binding",
    "href": "springboot/boot-concepts-vaadin-flow.html#binding",
    "title": "Spring Boot: Vaadin Flow",
    "section": "1.2 Binding",
    "text": "1.2 Binding\n\nData Binding\nLoading & Saving Business Objects\nBinding Data to Forms\n\nIn Vaadin, the Binder is a data binding class used to connect UI components to Java beans. It is not a container but rather a utility that facilitates the transfer and validation of data between the user interface and backend objects.\nBinder reads values from business objects, converts them to the format required by UI fields, and vice versa, supporting validation to ensure data integrity. This makes it essential for creating dynamic and interactive forms in Vaadin applications.\n\n\n\n\n\n\nThere can be only one Binder\n\n\n\nThere can be only one Binder instance for each form.\nYou should use this instance for all the fields in the form.\n\n\nClient To Server: How to Bind Form Data\nThe following steps include everything needed to load, edit, and save values for a form. Java 8 method references are used.\n\n// Create a Binder instance for the Person class\n1Binder&lt;Person&gt; binder = new Binder&lt;&gt;(Person.class);\n\n// Create a TextField for the title\n2TextField titleField = new TextField();\n\n// Bind the titleField to the Person class\nbinder.forField(titleField)\n    .bind(\n        // Callback that loads the title from a person instance\n3        Person::getTitle,\n        // Callback that saves the title in a person instance\n        Person::setTitle);\n\n// Create a TextField for the name\n4TextField nameField = new TextField();\n\n// Shorthand for cases without extra configuration\n5binder.bind(nameField, Person::getName,\n        Person::setName);\n\n1\n\nCreate a Binder instance for the Person class.\n\n2\n\nCreate a TextField for the title.\n\n3\n\nBind the titleField to the Person class using method references.\n\n4\n\nCreate a TextField for the name.\n\n5\n\nBind the nameField to the Person class using method references.\n\n\nServer to Client: Reading & Writing Automatically\nWriting automatically to business objects when the user makes changes in the UI is usually the most convenient option. You can bind the values directly to an instance by allowing Binder to save automatically values from the fields.\nIn the example here, field values are saved automatically:\nBinder&lt;Person&gt; binder = new Binder&lt;&gt;();\n\n// Field binding configuration omitted.\n// It should be done here.\n\nPerson person = new Person(\"John Doe\", 1957);\n\n// Loads the values from the person instance.\n// Sets person to be updated when any bound field\n// is updated.\nbinder.setBean(person);\n\nButton saveButton = new Button(\"Save\", event -&gt; {\n    if (binder.validate().isOk()) {\n        // Person is always up-to-date as long as\n        // there are no validation errors.\n\n        MyBackend.updatePersonInDatabase(person);\n    }\n});",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Flow"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-flow.html#create-vaadin-views",
    "href": "springboot/boot-concepts-vaadin-flow.html#create-vaadin-views",
    "title": "Spring Boot: Vaadin Flow",
    "section": "1.3 Create Vaadin Views",
    "text": "1.3 Create Vaadin Views\nTo create the web interface of the system, create Vaadin views for each of the main functionalities. The views will be used to display the data and handle user interactions.\n\nVaadin allows you to create rich, interactive UIs using Java code. It provides a wide range of UI components and layouts that you can use to build your application’s interface.\n\nExample of a simple Vaadin view:\n\n@Route(\"menu\")\npublic class MenuView extends VerticalLayout {\n    private final MenuService menuService;\n\n    public MenuView(MenuService menuService) {\n        this.menuService = menuService;\n        \n        H1 title = new H1(\"Restaurant Menu\");\n        Grid&lt;Menu&gt; grid = new Grid&lt;&gt;(Menu.class);\n        grid.setItems(menuService.getAllMenuItems());\n        \n        add(title, grid);\n    }\n}\n\nThis view creates a page with a title and a grid showing all menu items.\nKey Vaadin Concepts:\n\nServer-side Architecture: Vaadin primarily runs on the server, which means your business logic stays secure and you can leverage the full power of Java.\nComponent-based UI: Build UIs by combining and customizing existing components or creating your own.\nData Binding: Easily bind UI components to data sources, including JPA entities.\nThemes and Styling: Customize the look and feel of your application using CSS and Vaadin’s theming capabilities.\nIntegration with Spring Boot: Vaadin integrates seamlessly with Spring Boot, allowing you to use Spring’s dependency injection and other features.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Flow"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#example1-model",
    "href": "springboot/boot-concepts-th.html#example1-model",
    "title": "Spring Boot: Thymeleaf",
    "section": "9 Example1: Model",
    "text": "9 Example1: Model\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Home&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 th:text=\"${message}\"&gt;Hello, World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this template, the th:text attribute is used to set the text of the &lt;h1&gt; tag to the value of the message attribute in the model. The expression ${message} evaluates to the value of the message attribute.\nAssuming that this template is saved in a file named home.html in your application’s templates directory, the HomeController will render a message that says:\n\n“Welcome to my Spring Boot app!”\n\nwhen you visit theURL /\nThe value of the message attribute is set in the home() method of the controller.\nExample1 Controller",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#example2-pathvariable-and-requestbody",
    "href": "springboot/boot-concepts-th.html#example2-pathvariable-and-requestbody",
    "title": "Spring Boot: Thymeleaf",
    "section": "10 Example2: @PathVariable and @RequestBody",
    "text": "10 Example2: @PathVariable and @RequestBody\nThymeleaf templates that can be used with the hello(), createUser(), and getUserById() methods:\nhello.html\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Hello&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 th:text=\"${message}\"&gt;Hello, World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this template, the th:text attribute is used to set the text of the &lt;h1&gt; tag to the value of the message attribute in the model. The value of message is set in the hello() method of the controller.\nuser.html\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;User&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 th:text=\"${user.name}\"&gt;User&lt;/h1&gt;\n    &lt;p th:text=\"${user.email}\"&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this template, the th:text attribute is used to set the text of the &lt;h1&gt; tag to the value of the name property of the user object in the model.\nThe th:text attribute of the &lt;p&gt; tag is used to set its text to the value of the email property of the user object in the model.\nAssuming that these templates are saved in files named hello.html and user.html, respectively, in your application’s templates directory, the hello() method will render a message that says:\n\n“Hello, World!”\n\nwhen you visit the URL /hello\nThe createUser() method doesn’t return a view, so it doesn’t need a Thymeleaf template.\nFinally, the getUserById() method will render a page that displays the details of a user when you visit the URL /users/{id}, where {id} is the ID of the user.\nThe details of the user are passed to the template using the model.addAttribute() method.\nThe th:text attribute is used to set the text of the &lt;h1&gt; tag to the name of the user, and the th:text attribute of the &lt;p&gt; tag is used to set its text to the email of the user.\nExample2 Controller",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#example3-requestparam",
    "href": "springboot/boot-concepts-th.html#example3-requestparam",
    "title": "Spring Boot: Thymeleaf",
    "section": "11 Example3: @RequestParam",
    "text": "11 Example3: @RequestParam\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 th:text=\"'Hello, ' + ${message}\"&gt;Hello, World!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nIn this template, the th:text attribute is used to set the text of the &lt;h1&gt; tag to the value of the message attribute in the model.\nThe expression 'Hello, ' + ${message} concatenates the string \"Hello, \" with the value of the message attribute.\nAssuming that this template is saved in a file named hello.html in your application’s templates directory, the ExampleController will render a message that says:\n\n\nFor example, if you visit the URL /hello?name=John, the message will say “Hello, John!”.\n\n“Hello, {name}!”\n\nwhen you visit the URL:\n\n/hello?name=John\n\nwhere {name} is the value of the name parameter in the query string.\nExample3 Controller",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#thymeleaf",
    "href": "springboot/boot-concepts-th.html#thymeleaf",
    "title": "Spring Boot: Thymeleaf",
    "section": "12 Thymeleaf",
    "text": "12 Thymeleaf\n\nLibrary5 Documentation\nRepo GitHub Code\n\n\n12.1 ThymeLeaf Templates Engine\nMost Thymeleaf attributes allow their values to be set as or containing expressions, which we will call Standard Expressions because of the dialects they are used in. These can be of five types:\n\n\n\n\n\n\nThymeleaf expresssions\n\n\n\n\n${…} : Variable expressions.\n*{…} : Selection expressions.\n#{…} : Message (i18n) expressions.\n@... : Link (URL) expressions.\n~{…} : Fragment expressions.\n__{…} : use an element inside another\n\n\n\nAttributes th:\n\n\n\n\n\n\nThyemleaf attributes\n\n\n\n\nmessage: &lt;p th:text=\"#{msg.welcome}\"&gt;Welcome everyone!&lt;/p&gt;\nlist: &lt;li th:each=\"book : ${books}\" th:text=\"${book.title}\"&gt;En las Orillas del Sar&lt;/li&gt;\nlink: &lt;form th:action=\"@{/createOrder}\"&gt;\naction: &lt;input type=\"button\" th:value**=\"#{form.submit}\" /&gt;\npath: &lt;a th:href=\"@{/admin/users}\"&gt;\n\n\n\nHow to write th:\n\n\n\nThymeLeaf how TH: works (1/3)\n\n\n\n\n\nThymeLeaf how TH: works (2/3)\n\n\n\n\n\nThymeLeaf how TH: works (3/3)",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-th.html#thymeleaf-templates-engine-1",
    "href": "springboot/boot-concepts-th.html#thymeleaf-templates-engine-1",
    "title": "Spring Boot: Thymeleaf",
    "section": "9 ThymeLeaf Templates Engine",
    "text": "9 ThymeLeaf Templates Engine\nMost Thymeleaf attributes allow their values to be set as or containing expressions, which we will call Standard Expressions because of the dialects they are used in. These can be of five types:\n\n\n\n\n\n\nThymeleaf expresssions\n\n\n\n\n${…} : Variable expressions.\n*{…} : Selection expressions.\n#{…} : Message (i18n) expressions.\n@... : Link (URL) expressions.\n~{…} : Fragment expressions.\n__{…} : use an element inside another\n\n\n\nAttributes th:\n\n\n\n\n\n\nThyemleaf attributes\n\n\n\n\nmessage: &lt;p th:text=\"#{msg.welcome}\"&gt;Welcome everyone!&lt;/p&gt;\nlist: &lt;li th:each=\"book : ${books}\" th:text=\"${book.title}\"&gt;En las Orillas del Sar&lt;/li&gt;\nlink: &lt;form th:action=\"@{/createOrder}\"&gt;\naction: &lt;input type=\"button\" th:value**=\"#{form.submit}\" /&gt;\npath: &lt;a th:href=\"@{/admin/users}\"&gt;\n\n\n\nHow to write th:\n\n\n\nThymeLeaf how TH: works (1/3)",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Thymeleaf"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#vaadin",
    "href": "springboot/boot-concepts-view.html#vaadin",
    "title": "Spring Boot: View",
    "section": "1.2 Vaadin",
    "text": "1.2 Vaadin\nVaadin Flow\nVaadin Flow is a Java framework that allows developers to build rich, interactive web UIs entirely in Java. Here are its key features:\n\nUI Development in Java: Write UIs 100% in Java, eliminating the need to touch frontend technologies like HTML, CSS, and JavaScript.\nPre-built Components: Offers a vast collection of high-quality, pre-built components to enhance user experience.\nServer-side Architecture: Simplifies security implementations and integrates well with Java EE and Spring ecosystems[5].\n\nVaadin Hilla\nVaadin Hilla is a newer approach that combines the strengths of Vaadin with modern frontend technologies. Here’s what it offers:\n\nTypeScript and Java Integration: Allows developers to write frontend code in TypeScript while still leveraging Java for the backend.\nReactive Programming: Supports reactive programming models, making it easier to manage complex UI updates.\nInteroperability: Enables seamless interaction between Java and TypeScript code, providing a hybrid development experience[5].",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#javafx",
    "href": "springboot/boot-concepts-view.html#javafx",
    "title": "Spring Boot: View",
    "section": "1.3 JavaFX",
    "text": "1.3 JavaFX\nJavaFX is a set of graphics and media packages for designing, creating, and deploying rich client applications.\n\nCross-Platform Compatibility: Operates consistently across diverse platforms.\nCSS Styling and FXML: Enhances customization and layout management with CSS styling and FXML support.\nBuilt-in UI Components: Offers a comprehensive set of built-in UI components and 3D graphics support.\nPerformance: Better performance for complex UIs compared to Swing, although it has a steeper learning curve[5].",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#swt-standard-widget-toolkit",
    "href": "springboot/boot-concepts-view.html#swt-standard-widget-toolkit",
    "title": "Spring Boot: View",
    "section": "1.4 SWT (Standard Widget Toolkit)",
    "text": "1.4 SWT (Standard Widget Toolkit)\nSWT is a graphical widget toolkit developed by IBM and part of the Eclipse Foundation.\n\nNative Look and Feel: Provides a native look and feel by using the underlying OS’s graphical control elements.\nPerformance: Generally offers better performance for GUI applications than Swing due to its use of native components.\nEclipse Integration: Tight integration with the Eclipse IDE makes it a preferred choice for developers working within that environment[5].",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#other-alternatives",
    "href": "springboot/boot-concepts-view.html#other-alternatives",
    "title": "Spring Boot: View",
    "section": "1.5 Other Alternatives",
    "text": "1.5 Other Alternatives\nBlazor (via.NET and C#)\nAlthough not directly a Java framework, Blazor can be an interesting alternative for Java developers familiar with.NET and C#.\n\nC# to Web Assembly: Compile C# code to Web Assembly to run in the browser or server-side.\nInteroperability: Interop with other JavaScript libraries such as React or Vue.\nCross-Platform: Build for web, mobile, desktop, and more using.NET[2].\n\nScala.js\nFor developers comfortable with Scala,Scala.js can be a viable option.\n\nScala to JavaScript: Transpile applications written in Scala into JavaScript.\nCorrectness, Performance, and Interoperability: Boasts correctness, performance, and interoperability with other JavaScript frameworks[2].",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#html",
    "href": "springboot/boot-concepts-view.html#html",
    "title": "Spring Boot: View",
    "section": "1.1 HTML",
    "text": "1.1 HTML\nIn Spring Boot Server-Side HTML version, views are typically implemented using template engines such as:\n\nThymeleaf: Thymeleaf\nFreeMarker: Apache FreeMarker™ is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration files, source code, etc.) based on templates and changing data.\nGroovy: Spring Boot officially provided starter to use Groovy Template for MVC and offline rendering.\n\nThe view can access the model and use it to generate the HTML, JSON or XML that is sent to the user’s browser.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-hilla.html#key-features",
    "href": "springboot/boot-concepts-vaadin-hilla.html#key-features",
    "title": "Spring Boot: Vaadin Hilla",
    "section": "1.1 Key Features",
    "text": "1.1 Key Features\nFull-Stack Development\n\nSpring Boot Backend: Hilla integrates seamlessly with Spring Boot, leveraging its powerful backend capabilities for dependency injection, security, and more.\nReact or Lit Frontend: Developers can use either React or Lit for the frontend, benefiting from the latest JavaScript frameworks and their extensive ecosystems.\n\nType-Safe Communication\n\nAuto-Generated TypeScript Interfaces: Hilla automatically generates TypeScript interfaces for your Java endpoints, ensuring type safety and reducing the risk of errors during development.\n\nSecurity\n\nBuilt-in Security Features: Hilla includes built-in security features to protect your application from common web vulnerabilities, making it easier to develop secure web applications.\n\nClient-Server Communication\n\nEfficient Data Exchange: Hilla facilitates efficient communication between the client and server, using Vaadin’s robust client-server communication mechanisms, such as those provided by the Atmosphere framework.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Hilla"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-hilla.html#development-approach",
    "href": "springboot/boot-concepts-vaadin-hilla.html#development-approach",
    "title": "Spring Boot: Vaadin Hilla",
    "section": "1.2 Development Approach",
    "text": "1.2 Development Approach\n\nJava and TypeScript Integration: Hybrid Development, we can write backend code in Java and frontend code in TypeScript, allowing for a hybrid development approach that leverages the strengths of both languages.\n\nAlso, Reactive Models Hilla supports reactive programming models, making it easier to manage complex UI updates and ensure a responsive user interface.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Hilla"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-hilla.html#example-usage",
    "href": "springboot/boot-concepts-vaadin-hilla.html#example-usage",
    "title": "Spring Boot: Vaadin Hilla",
    "section": "1.3 Example Usage",
    "text": "1.3 Example Usage\nHere is an example of how we might set up a simple Hilla application:\n// Java Backend\n@RestController\n@RequestMapping(\"/api\")\npublic class MyController {\n    @GetMapping(\"/data\")\n    public List&lt;MyData&gt; getData() {\n        // Return data from the backend\n        return myService.getData();\n    }\n}\n// TypeScript Frontend\nimport { fetch } from '@vaadin/hilla';\nimport { html, LitElement, property } from 'lit-element';\n\n@customElement('my-component')\nclass MyComponent extends LitElement {\n  @property({ type: Array }) data = [];\n\n  async connectedCallback() {\n    super.connectedCallback();\n    this.data = await fetch('/api/data').json();\n  }\n\n  render() {\n    return html`\n      &lt;ul&gt;\n        ${this.data.map(item =&gt; html`&lt;li&gt;${item.name}&lt;/li&gt;`)}\n      &lt;/ul&gt;\n    `;\n  }\n}",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Hilla"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-vaadin-hilla.html#integration-and-tools",
    "href": "springboot/boot-concepts-vaadin-hilla.html#integration-and-tools",
    "title": "Spring Boot: Vaadin Hilla",
    "section": "1.4 Integration and Tools",
    "text": "1.4 Integration and Tools\nExtensive UI Components: Hilla applications can use Vaadin’s extensive set of UI components and themes, ensuring a consistent and professional look and feel. Spring Boot Integration.\nSeamless Integration: Hilla integrates seamlessly with Spring Boot, allowing developers to leverage Spring’s dependency injection, security features, and other capabilities.",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: Vaadin Hilla"
    ]
  },
  {
    "objectID": "springboot/boot-concepts-view.html#swt",
    "href": "springboot/boot-concepts-view.html#swt",
    "title": "Spring Boot: View",
    "section": "1.4 SWT",
    "text": "1.4 SWT\nSWT (Standard Widget Toolkit) is a graphical widget toolkit developed by IBM and part of the Eclipse Foundation.\n\nNative Look and Feel: Provides a native look and feel by using the underlying OS’s graphical control elements.\nPerformance: Generally offers better performance for GUI applications than Swing due to its use of native components.\nEclipse Integration: Tight integration with the Eclipse IDE makes it a preferred choice for developers working within that environment[5].",
    "crumbs": [
      "Spring Boot Concepts",
      "Spring Boot: View"
    ]
  }
]