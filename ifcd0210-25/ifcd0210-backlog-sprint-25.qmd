---
title: "IFCD0210 Sprint Backlog"
categories: [ifcd0210, backlog]
toc: true
number-sections: false
format:
  html
filters:
   - lightbox
lightbox: true
---

<style>

.heatMap th { background:  #f4f4f4;}
tr:nth-child(3) {background-color: #f4f4f4;}
th, td {
  padding: 8px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

tr:hover {background-color:  #f4f4f4;}

</style>

![Sprint Backlog](/images/home/backlog.jpg){width="30%"}

<div class="heatMap">

::: {.column-page-right}


##  ``Sprint#16-17: Fullstack Hilla`` (April 2025)

| # | Day | Date | Topics |  Details Topics |
| -- | -- | -- | -- | -- |
| #16 | 61 | 23/04/2025 |  - Plan Sprint#16-17 </br>  - Spring Boot Fullstack: </br>  (1) Vaadin </br>  (2) **Hilla**   </br>  (3) Endpoints  </br>  (4) Atmosphere  </br> (5) Playground: Flow or Hilla </br> (6) Architecture Hilla </br></br> - NoSQL: AWS DynamoDB   </br> </br> ++ Project: `Car Renting`: </br> (0) Keywords and hierarchy </br> (1) Wells (**avoid**), Vocabulary, Low-fidelity Wireframe, Understanding business model => NEEDS => Core Features </br> (2) Needs: Available Car - Booking - Paying - Tracking </br> (3) Wireframe or Data-Structure? |  - [Vaadin](https://vaadin.com/){.external target='_blank'}  </br>  - [Vaadin: create app](https://start.vaadin.com/app){.external target='_blank'}  <br> - [Vaadin doc](https://vaadin.com/docs/latest/getting-started){.external target='_blank'}  </br> </br>  - [Spring Boot: Data & DB](/springboot/boot-concepts-data.qmd){.external target='_blank'}   |
| | 62 | 24/04/2025 | - <s>Spring Boot Modulith </br>  - Java `Async` </s></br>  - DynamoDB AWS: </br> (1)  repository `putItem` SDK Java v2 </br> (2)  DAX   </br> (3) replica / backup  </br> (4)  streams  </br> (5)  TTL  </br> (6) Primary Key (Partition Key + Sort Key) + GSI </br> </br>  - Minimum example `rentingCar` : </br> (1) Front .tsx: `request` </br>  (2) Back: `@Endpoint` </br>  (3) `dynamoDB.putItem(putItemRequest);` </br> (4) DynamoDB: dependency, config & credentials| - [DynamoDB examples using SDK for Java 2.x](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/java_dynamodb_code_examples.html){.external target='_blank'}  </br>  - [Use PutItem with an AWS SDK or CLI](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/example_dynamodb_PutItem_section.html){.external target='_blank'}  </br> </br>  ![](/images/springboot/nosql_employee.png){.lightbox width=80% fig-align="center"}  </br> - [Choosing the Right DynamoDB Partition Key](https://aws.amazon.com/blogs/database/choosing-the-right-dynamodb-partition-key/){.external target='_blank'}  </br> </br> ![](/images/ifcd0210-25/dynamodb-students.png){.lightbox width=80% fig-align="center"} </br> - [rentingCar code](https://gist.github.com/AlbertProfe/62d46b6ab2b1de5afbd60c518f9d3f15){.external target='_blank'}|
| | 63 | 25/04/2025 | - Spring Boot Hilla: `@Endpoint` </br>   - React Hilla: Interfaces TS </br></br>  - `rentingCar`: </br>  (1) AWS dynamoDB: account, create Table, credentials </br>  (2) Vaadin Starter: create project, download zip and open </br>  (3) `CarsView`.tsx, `CarEndpoint.java` & `DynamoDBConfig.java` | - [rentingCar: repo](https://github.com/AlbertProfe/rentingCar){.external target='_blank'} </br> </br>   ![](/images/ifcd0210-25/rentingCar-dynamodb.png){.lightbox width=80% fig-align="center"} |
| #17 | 64 | 28/04/2025 | - Designing and defining project: </br>(1) Data-structure, NOoSQL vs. SQL </br>  (2) Business Logic, Front vs. Back </br>   (3) Data Model Container Object and Mapper vs. DynamoDbBean  </br> </br>   - Project: `rentingCar`: </br> (1) Data Structure  </br>  (2) `user`, `delegation` and `car`  </br></br>  - DynamoDB repository: `user` </br> </br> - Typescript: </br> (1) What TS is? |  - [rentingCar: repo](https://github.com/AlbertProfe/rentingCar){.external target='_blank'} </br> </br> - [Hila Interface](https://github.com/AlbertProfe/rentingCar/blob/master/docs/core-concepts/hilla-interface.md){.external target='_blank'} </br> - [DynamoDB Integration Approaches 1](){.external target='_blank'}  </br> - [DynamoDB Integration Approaches 2](https://github.com/AlbertProfe/rentingCar/blob/master/docs/core-concepts/3-policies-interacting-dynamodb-2.md){.external target='_blank'} </br> </br> - [TypeScript](https://www.typescriptlang.org/){.external target='_blank'} </br>  - [typescript: w3school](https://www.w3schools.com/typescript/typescript_simple_types.php){.external target='_blank'} </br> - [typescript: cheatsheet](https://www.typescriptlang.org/cheatsheets/){.external target='_blank'} </br>  - [typescript: cheatsheet](https://devhints.io/typescript){.external target='_blank'}  |
| | 65 | 29/04/2025 | - Project: `rentingCar` </br> </br> - Data Model 3 policies: </br>  (1) Mapping Objects without POJO, `DynamoDbBean`   </br>  (2)  Mapping Objects with POJO   </br>  (3) **Similar to JPA** </br></br>  - Defining data-model: .xls  </br>  (1) user-bookings  </br>  (2)  delegation-cars |  - [rentingCar: repo](https://github.com/AlbertProfe/rentingCar){.external target='_blank'} </br> </br> ![](/images/ifcd0210-25/rentingCar-dynamodb-v1.png){.lightbox width=80% fig-align="center"} </br> ![](/images/ifcd0210-25/rentingCar-decisions.jpg){.lightbox width=80% fig-align="center"} - [rentingCar_nosql: .xls](https://docs.google.com/spreadsheets/d/1jCKONiQ8_KUPSXzlYQ5GwEaLhJo2aV9jCOtgarWg3Tc/edit?usp=sharing){.external target='_blank'} </br> </br>  - [JPA Entity lifecycle](https://blog.payrollschedule.net/){.external target='_blank'} |
| | 66 | 30/04/2025 | - <s>Spring Session </br>  - Spring Boot `Async` </s></br>  </br>  - Java Generics: `delegation` & `car` </br> - Project: `rentingCar`: </br>  (1)  Generics: single endpoint, repo for `delegation` & `car` </br>  (2) 2 single tables: `Users` & `Delegations` </br> </br> - Lab: `user` - `booking`  & `booking.json`  |  - [rentingCar: repo](https://github.com/AlbertProfe/rentingCar){.external target='_blank'} </br>  - [rentingCar: 2-single-tables](https://github.com/AlbertProfe/rentingCar/blob/master/docs/4-Hilla-rentingCar-v1.md){.external target='_blank'} </br> </br> - [oracle: Generic Types](https://docs.oracle.com/javase/tutorial/java/generics/types.html){.external target='_blank'}  </br> - [rentingCar: Generic Types](https://github.com/AlbertProfe/rentingCar/blob/master/docs/core-concepts/Generics-Summary.md){.external target='_blank'}  </br> </br> ![](/images/ifcd0210-25/booking-json.png){.lightbox width=80% fig-align="center"} </br>  - [booking.json](https://github.com/AlbertProfe/rentingCar/blob/master/docs/data-json/booking.json){.external target='_blank'} |
: Backlog Sprint#16-17 April 2025 {tbl-colwidths="[2,2,2,55,39]"}
:::

</div>

::: {.callout-note}
- `---------` <s>topic pending</s>
- `-` topic done in class
- `++` new topic not planned
:::


