---
title: "Lab#RE07-1: traffic lights simulation"
subtitle: ReactJS labs
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: labs
categories: [reactjs, lab, Lab#RE07]
toc: true
number-sections: true
format:
  html
---

::: {.labs}
üìò **React JS Lab#RE07-1: Traffic Lights Simulation**

In this lab, we'll delve into building a **traffic lights simulation** using `React.js`. Here's an overview of what we'll cover:

1. **Project Setup**: We'll kick off by creating a new React project using **Vite**, a modern build tool.
   1. With Vite's fast build times, we'll set up our project environment swiftly.

2. **CSS Inline Styling**: Instead of separate CSS files, we'll utilize inline styling for our components.
   1. This approach keeps our styling concise and localized within each component.

3. **JSX Components**: We'll dive into JSX, a syntax extension for JavaScript often used with React. JSX allows us to write HTML-like code within JavaScript, making it seamless to create UI components.

4. **Business Logic Management with Hooks, Literal Objects & timout**: 
   1. We'll leverage `literal objects` for organized state management.
   2. We'll manage our <marl>form state using React hooks</mark> like (these hooks empower us to handle stateful logic effectively within functional components):
      1.  `useState`,
      2.  `useMemo`,
      3.  `useContext`,
      4.  and `useEffect`
   
   3. `Timeouts for Simulation Logic`: We'll incorporate **timeouts** to control the simulation flow.
      1. Timeouts allow us to delay certain actions, such as changing traffic light colors or updating pedestrian movements, adding an interactive and dynamic element to our traffic lights simulation.
   
5. **Form Management**: We'll dive into forms to manage **user data**


By the end of this lab, you'll have gained hands-on experience in React.js development, mastering essential concepts like state management, JSX rendering, component styling, and integrating timeouts for simulation logic. This project serves as an engaging introduction to building dynamic web applications with React. 


:::

</br>

# References

## Scripts and tools


**Implement a traffic light**

Here is a crosswalk light component that toggles when the button is pressed:

- [Implement a traffic light](https://react.dev/learn/state-as-a-snapshot#challenges){.external target='_blank'}
- [codesandbox **walking**](https://codesandbox.io/p/sandbox/react-dev-mzqnh7?file=%2Fsrc%2FApp.js&utm_medium=sandpack){.external target='_blank'}


**Fix a request counter**

You‚Äôre working on an art marketplace app that lets the user submit multiple orders for an art item at the same time. Each time the user presses the ‚ÄúBuy‚Äù button, the ‚ÄúPending‚Äù counter should increase by one. After three seconds, the ‚ÄúPending‚Äù counter should decrease, and the ‚ÄúCompleted‚Äù counter should increase.

However, the ‚ÄúPending‚Äù counter does not behave as intended. When you press ‚ÄúBuy‚Äù, it decreases to -1 (which should not be possible!). And if you click fast twice, both counters seem to behave unpredictably.

Why does this happen? Fix both counters.

- [Implement a traffic light](https://react.dev/learn/queueing-a-series-of-state-updates#fix-a-request-counter){.external target='_blank'}
- [codesandbox **marketplace**](https://codesandbox.io/p/sandbox/react-dev-hl8cxc?file=%2Fsrc%2FApp.js&utm_medium=sandpack){.external target='_blank'}

**Treat state as read-only**

In other words, you should treat any JavaScript object that you put into state as read-only.

This example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:


- [Treat state as read-only](https://react.dev/learn/updating-objects-in-state#treat-state-as-read-only){.external target='_blank'}
- [codesandbox **red-point**](https://codesandbox.io/p/sandbox/react-dev-5tfwx3?file=%2Fsrc%2FApp.js&utm_medium=sandpack){.external target='_blank'}

**Copying objects with the spread syntax**

In the previous example, the position object is always created fresh from the current cursor position. But often, you will want to include existing data as a part of the new object you‚Äôre creating. For example, you may want to update only one field in a form, but keep the previous values for all other fields.

These input fields don‚Äôt work because the onChange handlers mutate the state:

- [Copying objects with the spread syntax](https://react.dev/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax){.external target='_blank'}
- [codesandbox **form**](https://codesandbox.io/p/sandbox/react-dev-xjd24m?file=%2Fsrc%2FApp.js&utm_medium=sandpack){.external target='_blank'}


**Updating Arrays in State**

Arrays are mutable in JavaScript, but you should treat them as immutable when you store them in state. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array.

- [Updating Arrays in State](https://react.dev/learn/updating-arrays-in-state){.external target='_blank'}
- [codesandbox **sculptors**](https://codesandbox.io/p/sandbox/react-dev-yy44zn?file=%2Fsrc%2FApp.js&utm_medium=sandpack){.external target='_blank'}



## Code repository

- [Github repo](https://github.com/AlbertProfe/trafficlights/tree/master){.external target='_blank'}

# Create project

## Vite

Next Generation Frontend Tooling

Get ready for a development environment that can finally catch up with you.

- [Vite](https://vitejs.dev/){.external target='_blank'}
- [Getting Started | Vite](https://vitejs.dev/guide/)

```{.sh .code-overflow-wrap filename="bash.sh"}
$ node -v
```

To create a new Vite project, open your terminal and run the following command:

```{.sh .code-overflow-wrap filename="bash.sh"}
$ npm create vite@latest <my-project>
```
Select `React` framework:

```{.sh .code-overflow-wrap filename="bash.sh"}
‚úî Project name: ‚Ä¶ vite-project
? Select a framework: ‚Ä∫ - Use arrow-keys. Return to submit.
    Vanilla
    Vue
‚ùØ   React
    Preact
    Lit
    Svelte
```

And `js`:

```{.sh .code-overflow-wrap filename="bash.sh"}
? Select a variant: ‚Ä∫ - Use arrow-keys. Return to submit.
‚ùØ   JavaScript
    TypeScript
```

Output:

```{.sh .code-overflow-wrap filename="bash.sh"}
Scaffolding project in /Users/carlosazaustre/dev/vite-project...

Done. Now run:

  cd vite-project
  npm install
  npm run dev
```

## Exposing port

[npm run dev --host network: not exposed](https://stackoverflow.com/questions/71939532/npm-run-dev-host-network-not-exposed)

```{.json .code-overflow-wrap filename="package.json"}
 "scripts": {
    "dev": "vite --host --port 8888",
   .....  what ever else was here.....
  },
```

## Shortcuts

```{.json .code-overflow-wrap filename="package.json"}
 "scripts": {
    "dev": "vite --host --port 8888",
   .....  what ever else was here.....
  },
```

# Mock-up

to-do


# Step-by-step code


## React functions

```{.js .code-overflow-wrap filename="index.js"}
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = 
ReactDOM.createRoot(
          document.getElementById('root'));
root.render(<App />);

```
## React Application

This first iteration defines a React functional component called `RequestTracker`, <mark>which simulates a traffic light and tracks pedestrian crossings</mark>.

It uses the `useState` hook to manage **four state variables**:

- **pending** (number of pedestrians waiting),
- **walking** (number of pedestrians crossing),
- **completed** (number of completed crossings),
- and **light** (status of the traffic light).

When the user clicks the "Traffic Light" `button`, the `handleTrafficLightClick` function is **triggered**. It decrements pending, increments walking, and sets the light to green. After a **delay of 5 seconds**, it decrements walking, increments completed, and sets the light to red.

The code uses the `<>` (fragment) syntax to group multiple elements without introducing an additional parent node.

::: {.column-margin}

The UI displays the current counts of pending, walking, and completed pedestrians, and the color of the text changes based on the status of the traffic light. The button's color also changes to reflect the traffic light's color.
:::


::: {.column-page-right}
```{.js .code-overflow-wrap filename="App.jsx"}
import { useState } from "react";

export default function RequestTracker() {
  const [pending, setPending] = useState(100);
  const [walking, setWalking] = useState(0);
  const [completed, setCompleted] = useState(0);
  const [light, setLight] = useState(false);

  /*
  useEffect(() => {
    console.log("pending effect:", pending);
  }, [pending]);
  */

  function handleTrafficLightClick() {
    //console.log("before", pending);
    setPending((p) => p - 10);
    //console.log("after", pending);
    setWalking((w) => w + 10);
    setLight(true); // Set light to green when walking starts
    setTimeout(() => {
      setWalking((w) => w - 10);
      setCompleted((c) => c + 10);
      setLight(false); // Set light to red when walking is completed
    }, 5000); // Delay for 3000 milliseconds (5 seconds)
  }

  return (
    <>
      <h3 style={{ color: light ? "grey" : "white" }}> Pending: {pending} </h3>
      <h3 style={{ color: light ? "white" : "grey" }}>
        Walking: {walking} {light ? " . . . . ." : ""}
      </h3>
      <h3 style={{ color: light ? "green" : "grey" }}>
        Completed: {completed}
      </h3>
      <button
        onClick={handleTrafficLightClick}
        style={{
          backgroundColor: light ? "green" : "red",
          padding: "10px 24px",
          borderRadius: "8px",
          border: "none",
          color: "white",
          fontSize: "20px",
        }}
      >
        Taffic Light
      </button>
    </>
  );
}


```
:::

## Adding graphics

to-do

## Consolidation and merge: `literal object`

The operation of consolidating multiple state variables into a single object using the useState hook and the spread operator can be referred to as state consolidation or state merging.

Here's a breakdown:

- **State Consolidation**: This term emphasizes the process of bringing together multiple individual state variables into a single, cohesive object. It highlights the idea of simplifying state management by grouping related pieces of state.
- **State Merging**: This term underscores the use of the spread operator (...) to merge the previous state with the updated state when setting the state. It emphasizes the technique used to update multiple properties of the state object simultaneously.


## Adding form


## Adding data

# Code

::: {.column-page-right}

| Code Version | Commit | Folder-Tree | Output |
| -- | -- | -- | -- |
| [GitHub code v0.0](https://github.com/AlbertProfe/trafficlights/tree/5219b5acb611bd3c7faba7b22b14e0fd49f38b45){.external}  | create project (React Vite) and core business logic | [Basic Structure](/images/reactjs/traffic-project-v0.0-1.png){width="80%"} | [render v0.0 render(1)](/images/reactjs/traffic-render-v0.0-1.png), [render v0.0 render(2)](/images/reactjs/traffic-render-v0.0-2.png), [render v0.0 render(3)](/images/reactjs/traffic-render-v0.0-3.png) |

:::



<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} React JS: Lab#RE06-1-PR  ](/reactjs/rjslab6-1-PR.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[ReactJS Resources  {{< fa solid arrow-right >}}](/reactjs/resources.qmd)
<br>
</div>
<br>
</div>
