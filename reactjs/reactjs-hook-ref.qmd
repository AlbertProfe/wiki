---
title: "React JS: useRef"
subtitle: ReactJS hooks
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: description
categories: [reactjs, hooks, useRef]
toc: true
number-sections: true
format:
  html
---

::: {.summary}

ðŸ“˜ **hookRef**

``useRef`` is a React Hook that lets you reference a value thatâ€™s not needed for rendering: allows you **to persist values between renders**.

``const ref = useRef(initialValue)``

:::

---

## ``useRef(initialValue)``

Call ``useRef`` at the top level of your component **to declare a ``ref``**.

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useRef } from 'react';

function MyComponent() {
  const intervalRef = useRef(0);
  const inputRef = useRef(null);
  // ...
```

::: {.column-margin}
It can be used to store a **mutable value that does not cause a re-render** when updated.
It can be used to access a **DOM element directly.**
:::

### Parameters 

- ``initialValue``: The value you want the ref objectâ€™s ``current`` property to be initially. It can be a value of any type. This argument is ignored after the initial render.

### Returns

``useRef`` returns an object with a single property:

- ``current``: Initially, itâ€™s set to the ``initialValue`` you have passed. You can later set it to something else. If you pass the ref object to React as a ref attribute to a JSX node, React will set its ``current`` property.

## Example 1

If you show ``{ref.current}`` in the JSX,** the number wonâ€™t update on click**. This is because setting ref.current does not trigger a re-render. Information thatâ€™s used for *rendering should be state instead.*

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useRef } from 'react';

export default function Counter() {
  let ref = useRef(0);

  function handleClick() {
    ref.current = ref.current + 1;
    alert('You clicked ' + ref.current + ' times!');
  }

  return (
    <>
      <button onClick={handleClick}>
        Click me!
      </button>
      // Do not write or read ref.current during rendering.
      // React expects that the body of your component behaves like a pure function
      // We do now just for this example
      // If you need use: useState
      <p>You have pressed the button {ref.current} times</p>
    </> 
  );
}
```

::: {.column-margin}
![inital render](/images/reactjs/ex23.png){width=100%}
:::

::: {.column-margin}
![Clicking button and no-renders](/images/reactjs/ex24.png){width=100%}
:::

[Examples of manipulating the DOM with useRef](https://beta.reactjs.org/reference/react/useRef#examples-dom){.external}

## Example 2

The ``useRef`` Hook can also be used to keep track of previous state values. 

This is because we are able to persist ``useRef`` values between renders.

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useState, useEffect, useRef } from "react";

export default function Counter() {
 const [inputValue, setInputValue] = useState("");
  const previousInputValue = useRef("");

  useEffect(() => {
    previousInputValue.current = inputValue;
  }, [inputValue]);

  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h2>Current Value: {inputValue}</h2>
      <h2>Previous Value: {previousInputValue.current}</h2>
    </>
  );
}

```

::: {.column-margin}
![inital render](/images/reactjs/ex25.png){width=100%}
:::

::: {.column-margin}
![Input and not rendering when ``onChange={}`` gets the new inputs, but we see input by using ``useEffect``](/images/reactjs/ex26.png){width=100%}
:::

This time we use a combination of ``useState``, ``useEffect``, and ``useRef`` to keep track of the previous state.

In the ``useEffect``, we are updating the ``useRef`` current value each time the ``inputValue`` **is updated by entering text into the input field.**


<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} React JS: useReducer](/reactjs/reactjs-hook-reducer.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[React JS: useEffect  {{< fa solid arrow-right >}}](/reactjs/reactjs-hook-effect.qmd)
<br>
</div>
<br>
</div>
