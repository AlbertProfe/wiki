---
title: "JavaScript: variables"
subtitle: JavasScript async Dynamic client-side scripting
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: description
categories: [reactjs, js]
toc: true
number-sections: true
format:
  html
---



::: {.summary}

ðŸ“˜ **JavaScript: variables**

Variables are **containers for storing data**, JavaScript Variables can be declared in 4 ways:

- Automatically
- Using ``var``
- Using ``let``
- Using ``const``

:::

---

::: {.callout-note}

- The ``var`` keyword was used in all JavaScript code from 1995 to 2015.
- The ``let`` and const keywords were added to JavaScript in 2015.
- The ``var`` keyword should only be used in code written for older browsers.

:::

# ``Var``

Before the advent of **ES6**, ``var`` declarations ruled, ``var`` declarations are globally scoped or function/locally scoped.

The scope is

- **global** when a ``var`` variable is declared outside a function. This means that any variable that is declared with ``var`` outside a function block is **available for use in the whole window.**
- ``var`` is function **scoped** when it is declared within a function. This means that it is available and can be **accessed only within that function**.


``` {.jsx .code-overflow-wrap filename="App.js"}
  var greeter = "hey hi";
    
    function newFunction() {
        var hello = "hello";
    }

```

Here, greeter is globally scoped because it exists outside a function while hello is function scoped. So we cannot access the variable hello outside of a function. So if we do this:


``` {.jsx .code-overflow-wrap filename="App.js"}
    var tester = "hey hi";
    
    function newFunction() {
        var hello = "hello";
    }
    console.log(hello); // error: hello is not defined

```

We'll get an error which is as a result of hello not being available outside the function.
::: {.column-margin}
It is considered good programming practice to always declare variables before use.
:::









<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} JavaScript: objects](/reactjs/reactjs-js-objects.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[JavaScript: api {{< fa solid arrow-right >}}](/reactjs/reactjs-js-api.qmd)
<br>
</div>
<br>
</div>
