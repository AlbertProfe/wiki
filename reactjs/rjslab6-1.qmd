---
title: "Lab#RE06-1: healthyFood Restaurant"
subtitle: ReactJS labs
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: labs
categories: [reactjs, lab, Lab#RE06]
toc: true
number-sections: true
format:
  html
---

::: {.labs}
ðŸ“˜  **React JS Lab#RE06-1: healthyFood Restaurant**

In this lab, we will be using:

- the ``create-react-app`` with **npx**
- w3.css framework for css
  - install css on React: `npm install w3-css`
  - w3 css: `cards`, `button`, `container`
- JSX components 
- array of `JSON`: **data** as model


This React project serves as the front-end for a robust Spring Boot back-end, complemented by a well-designed UML. The UML is meticulously crafted in the context of [Lab#SE04-1](/javase/selab4-1.qmd), ensuring a structured foundation for the restaurant management system.

Project Overview

- **Technology Stack:**
  - Front-End: React
  - Back-End: Spring Boot

- **System Design:**
  - The UML diagram, designed as part of Lab#SE04-1, lays the groundwork for essential entities such as Orders, Tables, and Menus.

Integration with Spring Boot with API Rest

This React front-end seamlessly integrates with the Spring Boot back-end via API Rest, creating a efficient restaurant management.

The UML design acts as a guide, ensuring a cohesive flow between the front-end and back-end components.

- [Lab#SE04-1](/javase/selab4-1.qmd)


:::

</br>

# General approach

<mark>To craft the React front end for our restaurant management system, we begin by comprehending the UML diagram and backend functionalities.</mark>

- **Initiating a new React project using tools like** `Create React App` establishes the foundational structure.
- Component design follows, with **entities from the UML diagram mapped to distinct React components**, such as Orders, Tables, Menus, and a centralized Controller.
  - Connecting to the Spring Boot backend is facilitated through React's `fetch` or similar HTTP libraries.
- `Routing` is implemented using React Router, establishing distinct paths for functionalities like orders, tables, and menus. State management, accomplished through Redux or React Context API, ensures efficient handling of dynamic data.
- **UI components** are designed and implemented, integrating component libraries for consistency. User input is managed via forms with input validation for an enhanced user experience.
- **Unit tests using Jest and React Testing Library** validate the correctness of React components.
  - Integration with design tools maintains a cohesive look, and responsiveness is prioritized for varying screen sizes.
- Ultimately, the **React app is deployed** independently using platforms like Netlify or Vercel, ensuring seamless communication with the Spring Boot backend API.
  

This systematic approach guarantees the development of a scalable and user-friendly front end, aligning with our grand vision for the restaurant management system's evolution.

# Install `nvm` & `create-react-app`

- [React JS: Create a React project](/reactjs/reactjs-what-create.qmd)

![create-react-app](/images/reactjs/createproject.svg)

# Mock-up

![healthyFood restaurant mockup](/images/reactjs/healthyfood-mockup.png){width="40%"}


# Step-by-step code

Reference:

- [Your first component](https://react.dev/learn/describing-the-ui#your-first-component){.external}
- [W3.CSS Tutorial](https://www.w3schools.com/w3css/defaulT.asp){.external}
- [npm: W3.CSS is a modern CSS framework with built-in responsiveness](https://www.npmjs.com/package/w3-css){.external}

## React functions

```{.js .code-overflow-wrap filename="index.js"}
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = 
ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

```
## React Application

React application is defined with three instances of the `MenuList` component and one instance of the `MenuData` component. The application imports external components and a **CSS framework ("w3-css/w3.css").**


The `App` function returns a JSX structure representing the main application. The outermost element is a `div` with the class "w3-container," containing three instances of the `MenuList` component arranged side by side using the "w3-cell" class. Each `MenuList` component represents a section or module in the application.


The code uses the `<>` (fragment) syntax to group multiple elements without introducing an additional parent node.

::: {.column-margin}
There's a repetition of the `MenuList` component, and the application structure isa **placeholder**.

Depending on the actual requirements, you may want to dynamically render components based on the data or user interactions for a more dynamic and scalable application.
:::




```{.js .code-overflow-wrap filename="App.jsx"}
import MenuList from "./MenuList.jsx";
import Order from "./Order.jsx";;
import "w3-css/w3.css";



export default function App() {
  return (
    <>
      <div class="w3-container">
        <h1>healthy food</h1>
        <div class="w3-container w3-cell">
          <MenuList />
        </div>
        <div class="w3-container w3-cell">
          <MenuList />
        </div>
        <div class="w3-container w3-cell">
          <MenuList />
        </div>
        <MenuList />
      </div>
      <div class="w3-container w3-cell">
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </div>
      <br />
      <Order />
      <br />
    </>
  );
}


```



```{.js .code-overflow-wrap filename="MenuList.jss"}
import "w3-css/w3.css";

export default function MenuList() {
  return (
    <>
      <div class="w3-container">
        <h2>Menu</h2>

        <div class="w3-panel w3-card w3-sand">
         
            <h3>Lisboa</h3>

            <h5>Gluten Free</h5>
            <ul>
              <li>Meat Balls with portuguese sauce</li>
              <li>Fresh Tuna</li>
              <li>Onion and rice</li>

              <h2>Price: 80â‚¬</h2>
            </ul>

      
              <button class="w3-button w3-pink">Accept</button>
            </div>
          </div>
  
     
    </>
  );
}

```
## Add JSON data as model

A **static array** named `menus` represents different restaurant menus, each containing an:

- id,
- name,
- list of contents (foods),
- price, 
- and flags indicating whether the menu is
  -  active and
  -  includes water.



```{.json .code-overflow-wrap filename="Data.json"}
const menus = [
  {
    "id": "M001",
    "name": "Menu Lisboa",
    "contents": [
      "Meat Balls",
      "Salad with tomato",
      "Onion and carrot",
      "Fresh Tuna",
    ],
    "price": 80.0,
    "active": true,
    "water": true
  },
  {
    "id": "M002",
    "name": "Menu New York",
    "contents": [
      "Meat Balls with Pulled Steak",
      "Salad with tomato",
      "Brown Rice",
      "Fresh Salmon"
    ],
    "price": 85.0,
    "active": true,
    "water": true,
  },
  {
    "id": "M003",
    "name": "Menu Santiago",
    "contents": [
      "Meat Chicken Curry",
      "Salad with tomato",
      "Carrot with edamame",
      "Fresh Tuna"
    ],
    "price": 82.0,
    "active": true,
    "water": true,
  }
];
```

In App we may call the component:

```{.js .code-overflow-wrap filename="App.jsx"}

import MenuList from "./MenuList.jsx";
import Order from "./Order.jsx";;
import "w3-css/w3.css";

//  const menus = []; 


export default function App() {
  return (
    <>
      
      ...
      ...


      <CreateOrder menu = {menus[0]}>

      <br />
      <Order />
      <br />
    </CreateOrder>
  );
}


```

Below the three `MenuList` components, a `MenuData` component is rendered with the `menu` prop set to the first menu item from the `menus` array (`menus[0]`).

This implies that the initial data displayed in the `MenuData` component corresponds to the "Menu Lisboa."

```{.js .code-overflow-wrap filename="MenuData.jsx"}
import "w3-css/w3.css";


export default function MenuData({menu}) {

//console.log(menu);

  return (
    <>
      
       <div class="w3-panel w3-card w3-teal">
        <h1> {menu.name} </h1>
        <span class="w3-sand">{menu.id}</span>
        <p></p>
        <p>
          {menu.contents[0]}, 
          {menu.contents[1]}, 
          {menu.contents[2]} 
        </p>

        <p>{menu.price} euros</p>

        <p>Water is {menu.water ? '' : 'not'} 
        <span>included </span></p>
        
      </div>
    </>
  );
}

```

# Code

::: {.column-page-right}

| Code Version | Commit | Folder-Tree | Output |
| -- | -- | -- | -- |
| [GitHub code v0.0](https://github.com/AlbertProfe/healthyfoodFront/tree/99df8047f57acbae1bf53c9dd777a4d7cdd1b597){.external}  | create project, test to basic cards components | [Basic Structure](/images/reactjs/healthyfood-project-v0-0.png){width="80%"} | [render v0.0 render](/images/reactjs/healthyfood-render-v0-0.png) |
| [GitHub code v0.1](https://github.com/AlbertProfe/healthyfoodFront/tree/5fdd2426c239f75de0fcaf4dc681b32d44a8bd99){.external}  | create JSON array for data, props, createOrder component |  -  |  [render v0.1 render (1)](/images/reactjs/healthyfood-render-v0-1.png), [render v0.1 render (2)](/images/reactjs/healthyfood-render-v0-1-2.png) | 
| [GitHub code v0.2 - branch ordersMapping ](https://github.com/AlbertProfe/healthyfoodFront/tree/af20283430d97732362b67f9323fedb89ae14c0d){.external}  |  create function dataFaker, JSON data file, useState hook, refactoring, conditional render SPA in root-App   | - | [render v0.2 render (1)](/images/reactjs/healthyfood-render-v0-2-1.png), [render v0.2 render (2)](/images/reactjs/healthyfood-render-v0-2-2.png) |
| [GitHub code v0.3 - branch ordersMapping ](https://github.com/AlbertProfe/healthyfoodFront/tree/e6ec2bc280cf5745e46e3417477d3efec9ede828){.external}  |  create component orderTable  | - | [render v0.3 render (1)](/images/reactjs/healthyfood-render-v0-3-1.png) |

:::
<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} React JS: Lab#RE05-6  ](/reactjs/rjslab5-6.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[ReactJS Resources  {{< fa solid arrow-right >}}](/reactjs/resources.qmd)
<br>
</div>
<br>
</div>
