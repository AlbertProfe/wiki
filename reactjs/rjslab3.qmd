---
title: "Lab#RE03-1: to-do app"
subtitle: ReactJS labs
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: labs
categories: [reactjs, lab, Lab#RE03]
toc: true
number-sections: true
format:
  html
---

::: {.labs}
ðŸ“˜ **React JS Lab#RE03-1: to-do app**

In this lab, we will be using:

- the ``react-router-dom``, which is a package with bindings for using React Router in web applications.
- We will use the [Semantic React](https://react.semantic-ui.com/){.external} library to paint some `CSS`.
  - We could use a [table](https://react.semantic-ui.com/collections/table/){.external} or [list](https://react.semantic-ui.com/elements/list/){.exteranal}
- We could use [HighCharts](https://www.highcharts.com/){.external} to represent data.
- Hooks we are going to use:
  - to create the basic app: `useReducer`, `useContext`, 
  - to persist the state values between renders: `useEffect`, `useRef`.
  - to manage others states o variables: `useState`.

The lab will demonstrate **how to use a ``react-router-dom`` with React to build a functional web application**.
:::

</br>

Reference:

- [codesanbox basic todo](https://codesandbox.io/s/todo-app-1-oh3324){.external}
- [codesanbox useRef todo](https://codesandbox.io/s/todo-app-2-6cfpry){.external}


## user-story & mock-up

This lab is a basic implementation of a **Todo List application** using React. It utilizes **React hooks** such as `useReducer` and `useContext` for state management.

We will define an `initial set of todos` and a reducer function that handles various actions like `adding a new todo`, `deleting a todo`, `marking a todo as completed`, and `resetting the list.`

Actions definition:

- `add` action: Adds a new todo item to the list.
- ``delete`` action: Removes a todo item from the list.
- ``completed`` action: Toggles the completed status of a todo item.
- ``reset`` action: Resets the todo list to its initial state.

```js
const initialTodos = [
  {
    id: 1,
    text: "lean how to comunicate",
    completed: true,
    author: "Faby",
    due: 1 / 5 / 2022
  },
  {
    id: 2,
    text: "road out of hell",
    complete: false,
    author: "Alex",
    due: 1 / 6 / 2022
  }
];
```

The `TodoApp component` uses the `useReducer` hook to manage the state of todos and `dispatch` actions based on user interactions. It renders a header, a button to create new todos, and a TodosList component that displays the list of todos.

![inital render app](/images/reactjs/lab-re-3-1.png){}

![calendar picker to set date](/images/reactjs/lab-re-3-2.png){}

![creating new todos](/images/reactjs/lab-re-3-3.png){}

## step-by-step code

### Project creation

::: {.column-margin}
![step-by-step cheatsheet](/images/reactjs/todo-app-reducer-context.png){width="30%"}
:::

First at all we create the React project with `Route` and `Semantic` css Library.

Then, the reducer component: `<ToDoApp />`.

It uses React's `useReducer` hook to manage the state of the todo items. The initial todos are predefined, and the app supports actions like adding a new todo, deleting a todo, and marking a todo as completed. The state of the todos is stored in an array.

We crete a placeholder `useReducer`:

```js
import { Button, Input, Checkbox } from "semantic-ui-react";
import { useReducer } from "react";

const initialTodos = [
  {
    id: 1,
    text: "lean how to comunicate",
    completed: true,
    author: "Faby",
    due: 1 / 5 / 2022
  },
  {
    id: 2,
    text: "road out of hell",
    complete: false,
    author: "Alex",
    due: 1 / 6 / 2022
  }
];

function reducer(state, action) {
  switch (action.type) {
    case "bla": {
      return;
    }
    case "blabla": {
      return;
    }
    default: {
      return state;
    }
  }};


export default function ToDoApp(){
    const [state, dispacher] = useReducer (reducer, initialTodos);

    return (
      <>
        <br />
        <span>ToDo</span>
        <Button>Delete</Button>
        <Input placeholder="Write something" />
        <Checkbox toggle />
        <br />
      </>
    );
};
```

### create new todo

Step-by-step new todo creation:

1. The `<Button>` component is rendered with an **onClick event handler**,
2. when the button is clicked, it **dispatches** an action of type `"add"` using the `dispatch` function
3. and calls the `reducer`.
4. The `reducer` executes a case `add` creating a new state.
5. As a new state is created,
6. a new render is painted.

::: {.column-margin}
![Highchart Pie example](/images/reactjs/lab-re-2-19.png){}
::::

```js
import { Button, Input, Checkbox } from "semantic-ui-react";
import { useReducer } from "react";

const initialTodos = [
  // todos objects
];

function reducer(state, action) {
  switch (action.type) {
     case "add": {
      return [
        ...state,
        {
          id: Date.now(),
          text: "",
          author: "",
          due: "",
          completed: false
        }
      ];
    }
    case "blabla": {
      return;
    }
    default: {
      return state;
    }
  }};


export default function ToDoApp(){
    const [state, dispatch] = useReducer(reducer, initialTodos);

    return (
      <>
      <div style={{margin: "40px"}}>        
        <br />
        <Button onClick={
          () => dispatch({ type: "add" })}>Create Todo</Button>
        <br />
        <span>todo id</span> {" "}
        <Button>Delete</Button>
        <Input placeholder="Write something" />
        <Checkbox toggle />
        <br />
        </div>

      </>
    );
};
```

The `<Button>` component is rendered with an **onClick event handler**. When the button is clicked, it **dispatches** an action of type `"add"` using the `dispatch` function and calls the `reducer`.

```js
  <Button onClick={() => dispatch({ type: "add" })}>Create Todo</Button>
```

In the reducer, the `spread` operator `(...state)` is used to create a new array that includes all the existing elements without mutating the original state.

```js
import { Button, Input, Checkbox } from "semantic-ui-react";
import { useReducer } from "react";

const initialTodos = [
  // todos objects
];

function reducer(state, action) {
  switch (action.type) {
     case "add": {
      return [
        ...state,
        {
          id: Date.now(),
          text: "",
          author: "",
          due: "",
          completed: false
        }
      ];
    }
    case "blabla": {
      return;
    }
    default: {
      return state;
    }
  }};


export default function ToDoApp(){
   // render
};
```

The `spread` operator `(...state)` is used <mark>to create a new array that includes all the elements from the existing state array. This is done to avoid mutating the original state.</mark>

A *new object is created* with the following properties:

- `id`: A unique identifier generated using `Date.now()`. This will ensure that each new item has a unique identifier.
- `text`: An empty string.
- `author`: An empty string.
- `due`: An empty string.
- `completed`: A boolean value set to false, indicating that the item is not completed.
  
The new object is then <mark>added to the end of the new array created at initial load using the spread operator (...state).</mark>

This ensures that the new item is appended to the existing items in the state array.

Finally, the updated array is returned from the reducer function, representing the new state with the newly added item.


## Versions

 Code Version | Commit | Folder-Tree | Screeshoots |
| -- | -- | -- | -- |
| todoApp 0.0 | create project with route: [todoApp 0.0](https://github.com/AlbertProfe/CifoJava2023-2/tree/c269b2ad6704635e4e966676598fd23428d05bb7/todoapp){.external} | [initial tree-folder](/images/reactjs/lab-re-3-5.png){width="60%"} | [render home](/images/reactjs/lab-re-3-4.png){width="80%"} |
| todoApp 0.1 | create new todo: [todoApp 0.1](https://github.com/AlbertProfe/CifoJava2023-2/tree/96c8f427a889ccd8f32517c38ee1b8b6a2bd54ba/todoapp){.external} | - | [initial render](/images/reactjs/lab-re-3-7.png) - [todo created render](/images/reactjs/lab-re-3-8.png){width="80%"} |



<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} React JS: Lab#RE02-1](/reactjs/rjslab2.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[React JS: Lab#RE03-2  {{< fa solid arrow-right >}}](/reactjs/rjslab3-2.qmd)
<br>
</div>
<br>
</div>
