---
title: "React JS: useEffect"
subtitle: ReactJS hooks
author: albertprofe
date: "06/01/2021"
date-modified: last-modified
date-format: full
description: description
categories: [reactjs, hooks, useEfect]
toc: true
number-sections: true
format:
  html
---

::: {.summary}

ðŸ“˜ **useEfect**

``useEffect`` allows you to perform side effects in your components. Some examples of side effects are: fetching data, directly updating the DOM, and timers.

``useEffect(setup, dependencies?)``

:::

---

## Introduction

``useEffect`` accepts two arguments. The second argument is optional.

> useEffect(setup, dependencies?)

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useEffect } from 'react';
import { createConnection } from './chat.js';

function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [serverUrl, roomId]);
  // ...
}
```

::: {.column-margin}
``useEffect`` is a Hook, so you can only call it at the top level of your component or your own Hooks. You canâ€™t call it inside loops or conditions. If you need that, extract a new component and move the state into it.
:::

::: {.column-margin}
If youâ€™re not trying to synchronize with some external system, you probably donâ€™t need an ``Effect``.
:::

### Parameters 
- ``setup``: The function with your Effectâ€™s logic. Your setup function may also optionally return a cleanup function. When your component is first added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function one last time.

- ``optional dependencies``: The list of all reactive values referenced inside of the setup code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. 

::: {.callout-note collapse="true"}
If your linter is configured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like [dep1, dep2, dep3]. React will compare each dependency with its previous value using the Object.is comparison algorithm. If you donâ€™t specify the dependencies at all, your Effect will re-run after every re-render of the component. See the difference between passing an array of dependencies, an empty array, and no dependencies at all.
:::


### Returns 
- ``useEffect`` returns undefined.

## Example 1

In this example, the ``reducer`` manages a state object with one field: ``age``.

``` {.jsx .code-overflow-wrap filename="App.js"}
import { useState, useEffect } from "react";

function Counter() {
  const [count, setCount] = useState(0);
  const [calculation, setCalculation] = useState(0);

  useEffect(() => {
    setCalculation(() => count * 2);
  }, [count]); // <- add the count variable here

  return (
    <>
      <p>Count: {count}</p>
      <button onClick={() => setCount((c) => c + 1)}>+</button>
      <p>Calculation: {calculation}</p>
    </>
  );
}

```

::: {.column-margin}
![``useEffect`` inital render](/images/reactjs/ex27.png){width=100%}
:::

::: {.column-margin}
![``useEffect`` second  render](/images/reactjs/ex28.png){width=100%}
:::

::: {.column-margin}
![``useEffect`` third  render](/images/reactjs/ex29.png){width=100%}
:::

<!--- navLinks -->
<br><br>
<div class=row>
<br>
<div class='column left previous'>
<br>
[{{< fa solid arrow-left >}} React JS: useRef](/reactjs/reactjs-hook-ref.qmd)
<br>
</div>
<br>
<div class='column center'>
<br>
[{{< fa solid arrow-up >}} top](#top)
<br>
</div>
<br>
<div class='column right next'>
<br>
[ReactJS: custom hooks  {{< fa solid arrow-right >}}](/reactjs/reactjs-hook-custom.qmd)
<br>
</div>
<br>
</div>
